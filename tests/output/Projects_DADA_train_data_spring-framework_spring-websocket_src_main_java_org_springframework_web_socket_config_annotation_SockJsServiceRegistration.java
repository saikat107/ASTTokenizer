<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { this . org.springframework.web.socket.config.annotation.TaskScheduler = org.springframework.web.socket.config.annotation.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { this . org.springframework.web.socket.config.annotation.TaskScheduler = org.springframework.web.socket.config.annotation.TaskScheduler ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( int int ) { this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( long long ) { this . java.lang.Long = long ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( long long ) { this . java.lang.Long = long ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( int int ) { this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( TransportHandler ... org.springframework.web.socket.config.annotation.TransportHandler[] ) { this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> . clear ( ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.web.socket.config.annotation.TransportHandler[] ) ) { this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.socket.config.annotation.TransportHandler[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( TransportHandler ... org.springframework.web.socket.config.annotation.TransportHandler[] ) { this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> . clear ( ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.web.socket.config.annotation.TransportHandler[] ) ) { this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.socket.config.annotation.TransportHandler[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( HandshakeInterceptor ... org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) { this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . clear ( ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) { this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( java.lang.String ... java.lang.String[] ) { this . java.util.List<java.lang.String> . void ( ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { this . java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( SockJsMessageCodec org.springframework.web.socket.config.annotation.SockJsMessageCodec ) { this . org.springframework.web.socket.config.annotation.SockJsMessageCodec = org.springframework.web.socket.config.annotation.SockJsMessageCodec ; return this ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.SockJsService org.springframework.web.socket.config.annotation.SockJsService ( ) { TransportHandlingSockJsService org.springframework.web.socket.config.annotation.TransportHandlingSockJsService = org.springframework.web.socket.config.annotation.TransportHandlingSockJsService ( ) ; org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setHandshakeInterceptors ( this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> ) ; if ( this . java.lang.String != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setSockJsClientLibraryUrl ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setStreamBytesLimit ( this . java.lang.Integer ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setSessionCookieNeeded ( this . java.lang.Boolean ) ; } if ( this . java.lang.Long != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setHeartbeatTime ( this . java.lang.Long ) ; } if ( this . java.lang.Long != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setDisconnectDelay ( this . java.lang.Long ) ; } if ( this . java.lang.Integer != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setHttpMessageCacheSize ( this . java.lang.Integer ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setWebSocketEnabled ( this . java.lang.Boolean ) ; } if ( this . java.util.List<java.lang.String> != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setAllowedOrigins ( this . java.util.List<java.lang.String> ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setSuppressCors ( this . java.lang.Boolean ) ; } if ( this . org.springframework.web.socket.config.annotation.SockJsMessageCodec != null ) { org.springframework.web.socket.config.annotation.TransportHandlingSockJsService . setMessageCodec ( this . org.springframework.web.socket.config.annotation.SockJsMessageCodec ) ; } return org.springframework.web.socket.config.annotation.TransportHandlingSockJsService ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.annotation.TransportHandlingSockJsService org.springframework.web.socket.config.annotation.TransportHandlingSockJsService ( ) { if ( ! this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> . isEmpty ( ) ) { Assert . state ( this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> . isEmpty ( ) , STRING ) ; return new TransportHandlingSockJsService ( this . org.springframework.web.socket.config.annotation.TaskScheduler , this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> ) ; } else { return new DefaultSockJsService ( this . org.springframework.web.socket.config.annotation.TaskScheduler , this . java.util.List<org.springframework.web.socket.config.annotation.TransportHandler> ) ; } }  <METHOD_END>
