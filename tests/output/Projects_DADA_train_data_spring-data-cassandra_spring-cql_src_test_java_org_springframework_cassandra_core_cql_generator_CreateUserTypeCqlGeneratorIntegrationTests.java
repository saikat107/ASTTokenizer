<METHOD_START> @ Before public void void ( ) java.lang.Exception { session . execute ( STRING ) ; session . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateUserTypeSpecification org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( STRING ) . field ( STRING , DataType . ascii ( ) ) . field ( STRING , DataType . varchar ( ) ) ; session . execute ( toCql ( org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification ) ) ; KeyspaceMetadata org.springframework.cassandra.core.cql.generator.KeyspaceMetadata = session . getCluster ( ) . getMetadata ( ) . getKeyspace ( session . getLoggedKeyspace ( ) ) ; UserType org.springframework.cassandra.core.cql.generator.UserType = org.springframework.cassandra.core.cql.generator.KeyspaceMetadata . getUserType ( STRING ) ; assertThat ( org.springframework.cassandra.core.cql.generator.UserType . getFieldNames ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateUserTypeSpecification org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( ) . name ( STRING ) . ifNotExists ( ) . field ( STRING , DataType . ascii ( ) ) . field ( STRING , DataType . varchar ( ) ) ; session . execute ( toCql ( org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification ) ) ; KeyspaceMetadata org.springframework.cassandra.core.cql.generator.KeyspaceMetadata = session . getCluster ( ) . getMetadata ( ) . getKeyspace ( session . getLoggedKeyspace ( ) ) ; UserType org.springframework.cassandra.core.cql.generator.UserType = org.springframework.cassandra.core.cql.generator.KeyspaceMetadata . getUserType ( STRING ) ; assertThat ( org.springframework.cassandra.core.cql.generator.UserType . getFieldNames ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateUserTypeSpecification org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( ) . name ( STRING ) . ifNotExists ( ) . field ( STRING , DataType . ascii ( ) ) . field ( STRING , DataType . varchar ( ) ) ; session . execute ( toCql ( org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification ) ) ; KeyspaceMetadata org.springframework.cassandra.core.cql.generator.KeyspaceMetadata = session . getCluster ( ) . getMetadata ( ) . getKeyspace ( session . getLoggedKeyspace ( ) ) ; UserType org.springframework.cassandra.core.cql.generator.UserType = org.springframework.cassandra.core.cql.generator.KeyspaceMetadata . getUserType ( STRING ) ; CreateUserTypeSpecification org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( ) . name ( STRING ) . ifNotExists ( ) . field ( STRING , org.springframework.cassandra.core.cql.generator.UserType ) . field ( STRING , DataType . varchar ( ) ) ; session . execute ( toCql ( org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification ) ) ; }  <METHOD_END>
