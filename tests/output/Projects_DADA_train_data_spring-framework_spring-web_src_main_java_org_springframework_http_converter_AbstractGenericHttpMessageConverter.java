<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> protected void ( MediaType org.springframework.http.converter.MediaType ) { super( org.springframework.http.converter.MediaType ); }  <METHOD_END>
<METHOD_START> protected void ( MediaType ... org.springframework.http.converter.MediaType[] ) { super( org.springframework.http.converter.MediaType[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return boolean ( org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return boolean ( org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> public final void void ( final T T , final java.lang.reflect.Type java.lang.reflect.Type , MediaType org.springframework.http.converter.MediaType , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { final HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) ; addDefaultHeaders ( org.springframework.http.converter.HttpHeaders , T , org.springframework.http.converter.MediaType ) ; if ( org.springframework.http.converter.HttpOutputMessage instanceof StreamingHttpOutputMessage ) { StreamingHttpOutputMessage org.springframework.http.converter.StreamingHttpOutputMessage = ( StreamingHttpOutputMessage ) org.springframework.http.converter.HttpOutputMessage ; org.springframework.http.converter.StreamingHttpOutputMessage . setBody ( new StreamingHttpOutputMessage . StreamingHttpOutputMessage ( ) { @ java.lang.Override public void void ( final java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( T , java.lang.reflect.Type , new HttpOutputMessage ( ) { @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return java.io.OutputStream ; } @ java.lang.Override public org.springframework.http.converter.HttpHeaders org.springframework.http.converter.HttpHeaders ( ) { return org.springframework.http.converter.HttpHeaders ; } } ) ; } } ) ; } else { void ( T , java.lang.reflect.Type , org.springframework.http.converter.HttpOutputMessage ) ; org.springframework.http.converter.HttpOutputMessage . getBody ( ) . flush ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( T , java.lang.reflect.Type , new HttpOutputMessage ( ) { @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return java.io.OutputStream ; } @ java.lang.Override public org.springframework.http.converter.HttpHeaders org.springframework.http.converter.HttpHeaders ( ) { return org.springframework.http.converter.HttpHeaders ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return java.io.OutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.converter.HttpHeaders org.springframework.http.converter.HttpHeaders ( ) { return org.springframework.http.converter.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( T T , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { void ( T , null , org.springframework.http.converter.HttpOutputMessage ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( T T , java.lang.reflect.Type java.lang.reflect.Type , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException ;  <METHOD_END>
