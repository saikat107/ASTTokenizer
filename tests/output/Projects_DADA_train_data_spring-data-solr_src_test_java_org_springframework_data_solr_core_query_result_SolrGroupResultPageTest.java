<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) GroupResult < java.lang.Object > org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> = new SimpleGroupResult <> ( NUMBER , null , STRING , Mockito . mock ( Page .class ) ) ; Field org.springframework.data.solr.core.query.result.Field = Mockito . mock ( Field .class ) ; Mockito . when ( org.springframework.data.solr.core.query.result.Field . getName ( ) ) . thenReturn ( STRING ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> < java.lang.Object , GroupResult < java.lang.Object > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> = new java.util.HashMap<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> <> ( ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> . put ( STRING , org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> ) ; SolrResultPage < java.lang.Object > org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> = new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . setGroupResults ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> , org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( org.springframework.data.solr.core.query.result.Field ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) GroupResult < java.lang.Object > org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> = new SimpleGroupResult <> ( NUMBER , null , STRING , Mockito . mock ( Page .class ) ) ; Function org.springframework.data.solr.core.query.result.Function = Mockito . mock ( Function .class ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> < java.lang.Object , GroupResult < java.lang.Object > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> = new java.util.HashMap<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> <> ( ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> . put ( org.springframework.data.solr.core.query.result.Function , org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> ) ; SolrResultPage < java.lang.Object > org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> = new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . setGroupResults ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> , org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( org.springframework.data.solr.core.query.result.Function ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) GroupResult < java.lang.Object > org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> = new SimpleGroupResult <> ( NUMBER , null , STRING , Mockito . mock ( Page .class ) ) ; Query org.springframework.data.solr.core.query.result.Query = Mockito . mock ( Query .class ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> < java.lang.Object , GroupResult < java.lang.Object > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> = new java.util.HashMap<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> <> ( ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> . put ( org.springframework.data.solr.core.query.result.Query , org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> ) ; SolrResultPage < java.lang.Object > org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> = new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . setGroupResults ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> , org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( org.springframework.data.solr.core.query.result.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) GroupResult < java.lang.Object > org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> = new SimpleGroupResult <> ( NUMBER , null , STRING , Mockito . mock ( Page .class ) ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> < java.lang.Object , GroupResult < java.lang.Object > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> = new java.util.HashMap<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> <> ( ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> . put ( STRING , org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> ) ; SolrResultPage < java.lang.Object > org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> = new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . setGroupResults ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object>> ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.result.GroupResult<java.lang.Object> , org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrResultPage < java.lang.Object > org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> = new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( Mockito . mock ( Query .class ) ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( Mockito . mock ( Field .class ) ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.result.SolrResultPage<java.lang.Object> . getGroupResult ( Mockito . mock ( Function .class ) ) ) ; }  <METHOD_END>
