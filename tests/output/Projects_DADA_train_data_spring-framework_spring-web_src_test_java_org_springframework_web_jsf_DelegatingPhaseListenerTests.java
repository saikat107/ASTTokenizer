<METHOD_START> @ java.lang.Override protected org.springframework.web.jsf.ListableBeanFactory org.springframework.web.jsf.ListableBeanFactory ( FacesContext org.springframework.web.jsf.FacesContext ) { return org.springframework.web.jsf.StaticListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener = new org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener ( ) ; org.springframework.web.jsf.StaticListableBeanFactory . addBean ( STRING , org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener ) ; assertEquals ( org.springframework.web.jsf.DelegatingPhaseListenerMulticaster . getPhaseId ( ) , PhaseId . ANY_PHASE ) ; PhaseEvent org.springframework.web.jsf.PhaseEvent = new PhaseEvent ( org.springframework.web.jsf.MockFacesContext , PhaseId . INVOKE_APPLICATION , new MockLifecycle ( ) ) ; org.springframework.web.jsf.DelegatingPhaseListenerMulticaster . beforePhase ( org.springframework.web.jsf.PhaseEvent ) ; assertTrue ( org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener . boolean ) ; org.springframework.web.jsf.DelegatingPhaseListenerMulticaster . afterPhase ( org.springframework.web.jsf.PhaseEvent ) ; assertTrue ( org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener = new org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener ( ) ; org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener = new org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener ( ) ; org.springframework.web.jsf.StaticListableBeanFactory . addBean ( STRING , org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener ) ; org.springframework.web.jsf.StaticListableBeanFactory . addBean ( STRING , org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener ) ; assertEquals ( org.springframework.web.jsf.DelegatingPhaseListenerMulticaster . getPhaseId ( ) , PhaseId . ANY_PHASE ) ; PhaseEvent org.springframework.web.jsf.PhaseEvent = new PhaseEvent ( org.springframework.web.jsf.MockFacesContext , PhaseId . INVOKE_APPLICATION , new MockLifecycle ( ) ) ; org.springframework.web.jsf.DelegatingPhaseListenerMulticaster . beforePhase ( org.springframework.web.jsf.PhaseEvent ) ; assertTrue ( org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener . boolean ) ; assertTrue ( org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener . boolean ) ; org.springframework.web.jsf.DelegatingPhaseListenerMulticaster . afterPhase ( org.springframework.web.jsf.PhaseEvent ) ; assertTrue ( org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener . boolean ) ; assertTrue ( org.springframework.web.jsf.DelegatingPhaseListenerTests.TestListener . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.jsf.PhaseId org.springframework.web.jsf.PhaseId ( ) { return PhaseId . ANY_PHASE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PhaseEvent org.springframework.web.jsf.PhaseEvent ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PhaseEvent org.springframework.web.jsf.PhaseEvent ) { boolean = true ; }  <METHOD_END>
