<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.reactive.function.client.MockWebServer = new MockWebServer ( ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.function.client.MockWebServer . url ( STRING ) . toString ( ) ; this . org.springframework.web.reactive.function.client.WebClient = WebClient . create ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; Mono < HttpHeaders > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.HttpHeaders> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . exchange ( ) . map ( response -> response . headers ( ) . asHttpHeaders ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.HttpHeaders> ) . consumeNextWith ( httpHeaders -> { assertEquals ( MediaType . TEXT_PLAIN , httpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , httpHeaders . getContentLength ( ) ) ; } ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setBody ( STRING ) ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . header ( STRING , STRING ) . exchange ( ) . then ( response -> response . bodyToMono ( String .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( STRING ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( java.lang.String ) ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . exchange ( ) . then ( response -> response . bodyToMono ( String .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<java.lang.String> ) . expectNext ( java.lang.String ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( java.lang.String ) ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . retrieve ( ) . bodyToMono ( java.lang.String .class ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<java.lang.String> ) . expectNext ( java.lang.String ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( java.lang.String ) ) ; Mono < ResponseEntity < java.lang.String > > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<java.lang.String>> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . retrieve ( ) . bodyToEntity ( java.lang.String .class ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<java.lang.String>> ) . consumeNextWith ( entity -> { assertEquals ( HttpStatus . OK , entity . getStatusCode ( ) ) ; assertEquals ( MediaType . APPLICATION_JSON , entity . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( NUMBER , entity . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( content , entity . getBody ( ) ) ; } ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( java.lang.String ) ) ; Mono < ResponseEntity < java.util.List<org.springframework.web.reactive.function.client.Pojo> < Pojo > > > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<java.util.List<org.springframework.web.reactive.function.client.Pojo>>> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . retrieve ( ) . bodyToEntityList ( Pojo .class ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<java.util.List<org.springframework.web.reactive.function.client.Pojo>>> ) . consumeNextWith ( entity -> { assertEquals ( HttpStatus . OK , entity . getStatusCode ( ) ) ; assertEquals ( MediaType . APPLICATION_JSON , entity . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( NUMBER , entity . getHeaders ( ) . getContentLength ( ) ) ; Pojo pojo1 = new Pojo ( STRING , STRING ) ; Pojo pojo2 = new Pojo ( STRING , STRING ) ; assertEquals ( Arrays . asList ( pojo1 , pojo2 ) , entity . getBody ( ) ) ; } ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( java.lang.String ) ) ; Flux < java.lang.String > org.springframework.web.reactive.function.client.Flux<java.lang.String> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . retrieve ( ) . bodyToFlux ( java.lang.String .class ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Flux<java.lang.String> ) . expectNext ( java.lang.String ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; Mono < Pojo > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.Pojo> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . exchange ( ) . then ( response -> response . bodyToMono ( Pojo .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.Pojo> ) . consumeNextWith ( p -> assertEquals ( STRING , p . getBar ( ) ) ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; Flux < Pojo > org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.Pojo> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . exchange ( ) . flatMap ( response -> response . bodyToFlux ( Pojo .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.Pojo> ) . consumeNextWith ( p -> assertThat ( p . getBar ( ) , Matchers . is ( STRING ) ) ) . consumeNextWith ( p -> assertThat ( p . getBar ( ) , Matchers . is ( STRING ) ) ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; Mono < Pojo > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.Pojo> = this . org.springframework.web.reactive.function.client.WebClient . post ( ) . uri ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . contentType ( MediaType . APPLICATION_JSON ) . body ( new Pojo ( STRING , STRING ) ) . exchange ( ) . then ( response -> response . bodyToMono ( Pojo .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.Pojo> ) . consumeNextWith ( p -> assertEquals ( STRING , p . getBar ( ) ) ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getBody ( ) . readUtf8 ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . TRANSFER_ENCODING ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . cookie ( STRING , STRING ) . exchange ( ) . then ( response -> response . bodyToMono ( String .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . COOKIE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setResponseCode ( NUMBER ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; Mono < ClientResponse > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> = this . org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . exchange ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ) . consumeNextWith ( response -> assertEquals ( HttpStatus . NOT_FOUND , response . statusCode ( ) ) ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( HttpHeaders . ACCEPT ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; WebClient org.springframework.web.reactive.function.client.WebClient = this . org.springframework.web.reactive.function.client.WebClient . filter ( ( request , next ) -> { ClientRequest filteredRequest = ClientRequest . from ( request ) . header ( STRING , STRING ) . build ( ) ; return next . exchange ( filteredRequest ) ; } ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . exchange ( ) . then ( response -> response . bodyToMono ( String .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.function.client.MockWebServer . enqueue ( new MockResponse ( ) . setHeader ( STRING , STRING ) . setBody ( STRING ) ) ; WebClient org.springframework.web.reactive.function.client.WebClient = this . org.springframework.web.reactive.function.client.WebClient . filter ( ( request , next ) -> { ClientRequest filteredRequest = ClientRequest . from ( request ) . header ( STRING , STRING ) . build ( ) ; return next . exchange ( filteredRequest ) ; } ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = org.springframework.web.reactive.function.client.WebClient . get ( ) . uri ( STRING ) . exchange ( ) . then ( response -> response . bodyToMono ( String .class ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; RecordedRequest org.springframework.web.reactive.function.client.RecordedRequest = org.springframework.web.reactive.function.client.MockWebServer . takeRequest ( ) ; Assert . assertEquals ( NUMBER , org.springframework.web.reactive.function.client.MockWebServer . getRequestCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.web.reactive.function.client.RecordedRequest . getHeader ( STRING ) ) ; }  <METHOD_END>
