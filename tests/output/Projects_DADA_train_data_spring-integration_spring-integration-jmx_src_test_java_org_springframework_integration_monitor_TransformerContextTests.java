<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.monitor.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.monitor.TransformerContextTests> ( ) ) ; MessageChannel org.springframework.integration.monitor.MessageChannel = org.springframework.integration.monitor.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.monitor.PollableChannel = org.springframework.integration.monitor.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.monitor.Message<?> = org.springframework.integration.monitor.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.monitor.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , int ) ; org.springframework.integration.monitor.MessageChannel = org.springframework.integration.monitor.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.monitor.Message<?> = org.springframework.integration.monitor.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.monitor.Message<> . getPayload ( ) ) ; org.springframework.integration.monitor.MessageChannel = org.springframework.integration.monitor.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.monitor.Message<?> = org.springframework.integration.monitor.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.monitor.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , int ) ; org.springframework.integration.monitor.MessageChannel = org.springframework.integration.monitor.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; org.springframework.integration.monitor.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.monitor.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.monitor.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.monitor.ExecutionCallback . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.monitor.Message<?> ) { java.lang.Exception java.lang.Exception = new java.lang.RuntimeException ( ) ; java.lang.StackTraceElement [] java.lang.StackTraceElement[] = java.lang.Exception . java.lang.StackTraceElement[] ( ) ; return MessageBuilder . withPayload ( org.springframework.integration.monitor.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ) . setHeader ( STRING , java.lang.StackTraceElement[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
