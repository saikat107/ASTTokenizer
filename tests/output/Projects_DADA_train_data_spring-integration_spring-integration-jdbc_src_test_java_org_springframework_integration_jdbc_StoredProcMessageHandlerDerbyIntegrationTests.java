<METHOD_START> @ Before public void void ( ) java.sql.SQLException { EmbeddedDatabaseBuilder org.springframework.integration.jdbc.EmbeddedDatabaseBuilder = new EmbeddedDatabaseBuilder ( ) ; org.springframework.integration.jdbc.EmbeddedDatabaseBuilder . setType ( EmbeddedDatabaseType . DERBY ) ; org.springframework.integration.jdbc.EmbeddedDatabaseBuilder . addScript ( STRING ) ; this . org.springframework.integration.jdbc.EmbeddedDatabase = org.springframework.integration.jdbc.EmbeddedDatabaseBuilder . build ( ) ; this . org.springframework.integration.jdbc.JdbcTemplate = new JdbcTemplate ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.jdbc.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; StoredProcMessageHandler org.springframework.integration.jdbc.StoredProcMessageHandler = new StoredProcMessageHandler ( org.springframework.integration.jdbc.StoredProcExecutor ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureName ( STRING ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . afterPropertiesSet ( ) ; MessageBuilder < User > org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> = MessageBuilder . withPayload ( new User ( STRING , STRING , STRING ) ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . handleMessage ( org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . build ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , STRING ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; StoredProcMessageHandler org.springframework.integration.jdbc.StoredProcMessageHandler = new StoredProcMessageHandler ( org.springframework.integration.jdbc.StoredProcExecutor ) ; final ExpressionFactoryBean org.springframework.integration.jdbc.ExpressionFactoryBean = new ExpressionFactoryBean ( STRING ) ; org.springframework.integration.jdbc.ExpressionFactoryBean . afterPropertiesSet ( ) ; final Expression org.springframework.integration.jdbc.Expression = org.springframework.integration.jdbc.ExpressionFactoryBean . getObject ( ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureNameExpression ( org.springframework.integration.jdbc.Expression ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . afterPropertiesSet ( ) ; MessageBuilder < User > org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> = MessageBuilder . withPayload ( new User ( STRING , STRING , STRING ) ) ; org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . setHeader ( STRING , STRING ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . handleMessage ( org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . build ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , STRING ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; StoredProcMessageHandler org.springframework.integration.jdbc.StoredProcMessageHandler = new StoredProcMessageHandler ( org.springframework.integration.jdbc.StoredProcExecutor ) ; ExpressionFactoryBean org.springframework.integration.jdbc.ExpressionFactoryBean = new ExpressionFactoryBean ( STRING ) ; org.springframework.integration.jdbc.ExpressionFactoryBean . afterPropertiesSet ( ) ; Expression org.springframework.integration.jdbc.Expression = org.springframework.integration.jdbc.ExpressionFactoryBean . getObject ( ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureNameExpression ( org.springframework.integration.jdbc.Expression ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . afterPropertiesSet ( ) ; MessageBuilder < User > org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> = MessageBuilder . withPayload ( new User ( STRING , STRING , STRING ) ) ; org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . setHeader ( STRING , STRING ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . handleMessage ( org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . build ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , STRING ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; StoredProcMessageHandler org.springframework.integration.jdbc.StoredProcMessageHandler = new StoredProcMessageHandler ( org.springframework.integration.jdbc.StoredProcExecutor ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureName ( STRING ) ; final java.util.List<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > java.util.List<org.springframework.integration.jdbc.ProcedureParameter> = new java.util.ArrayList<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > ( ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> . add ( new ProcedureParameter ( STRING , null , STRING ) ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> . add ( new ProcedureParameter ( STRING , null , STRING ) ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> . add ( new ProcedureParameter ( STRING , null , STRING ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . setProcedureParameters ( java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . afterPropertiesSet ( ) ; MessageBuilder < User > org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> = MessageBuilder . withPayload ( new User ( STRING , STRING , STRING ) ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . handleMessage ( org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . build ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , STRING ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor = new StoredProcExecutor ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; StoredProcMessageHandler org.springframework.integration.jdbc.StoredProcMessageHandler = new StoredProcMessageHandler ( org.springframework.integration.jdbc.StoredProcExecutor ) ; org.springframework.integration.jdbc.StoredProcExecutor . setStoredProcedureName ( STRING ) ; final java.util.List<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > java.util.List<org.springframework.integration.jdbc.ProcedureParameter> = new java.util.ArrayList<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > ( ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> . add ( new ProcedureParameter ( STRING , null , STRING ) ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> . add ( new ProcedureParameter ( STRING , STRING , null ) ) ; java.util.List<org.springframework.integration.jdbc.ProcedureParameter> . add ( new ProcedureParameter ( STRING , STRING , null ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . setProcedureParameters ( java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) ; org.springframework.integration.jdbc.StoredProcExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcExecutor . afterPropertiesSet ( ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . afterPropertiesSet ( ) ; MessageBuilder < User > org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> = MessageBuilder . withPayload ( new User ( STRING , STRING , STRING ) ) ; org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . setHeader ( STRING , STRING ) ; org.springframework.integration.jdbc.StoredProcMessageHandler . handleMessage ( org.springframework.integration.jdbc.MessageBuilder<org.springframework.integration.jdbc.User> . build ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , STRING ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
