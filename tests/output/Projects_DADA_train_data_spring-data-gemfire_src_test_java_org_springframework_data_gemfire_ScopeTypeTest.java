<METHOD_START> @ Test public void void ( ) { assertEquals ( Scope . GLOBAL , ScopeType . getScope ( ScopeType . GLOBAL ) ) ; assertEquals ( Scope . LOCAL , ScopeType . getScope ( ScopeType . LOCAL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( ScopeType . getScope ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( Scope . DISTRIBUTED_ACK , ScopeType . DISTRIBUTED_ACK . getScope ( ) ) ; assertEquals ( Scope . DISTRIBUTED_NO_ACK , ScopeType . DISTRIBUTED_NO_ACK . getScope ( ) ) ; assertEquals ( Scope . LOCAL , ScopeType . LOCAL . getScope ( ) ) ; assertEquals ( Scope . GLOBAL , ScopeType . GLOBAL . getScope ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { for ( int int = NUMBER ; int < java.lang.Integer . int ; int ++ ) { Scope org.springframework.data.gemfire.Scope = Scope . fromOrdinal ( int ) ; ScopeType org.springframework.data.gemfire.ScopeType = ScopeType . valueOf ( org.springframework.data.gemfire.Scope ) ; assertNotNull ( org.springframework.data.gemfire.ScopeType ) ; assertSame ( org.springframework.data.gemfire.Scope , org.springframework.data.gemfire.ScopeType . getScope ( ) ) ; } } catch ( java.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( ScopeType . valueOf ( ( Scope ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( ScopeType . DISTRIBUTED_ACK , ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ScopeType . DISTRIBUTED_NO_ACK , ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ScopeType . LOCAL , ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ScopeType . GLOBAL , ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ScopeType . GLOBAL , ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ScopeType . DISTRIBUTED_ACK , ScopeType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ScopeType . valueOfIgnoreCase ( null ) ) ; }  <METHOD_END>
