<METHOD_START> protected abstract org.springframework.boot.configurationprocessor.fieldvalues.FieldValuesParser org.springframework.boot.configurationprocessor.fieldvalues.FieldValuesParser ( javax.annotation.processing.ProcessingEnvironment javax.annotation.processing.ProcessingEnvironment );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.configurationprocessor.fieldvalues.AbstractFieldValuesProcessorTests.TestProcessor org.springframework.boot.configurationprocessor.fieldvalues.AbstractFieldValuesProcessorTests.TestProcessor = new org.springframework.boot.configurationprocessor.fieldvalues.AbstractFieldValuesProcessorTests.TestProcessor ( ) ; TestCompiler org.springframework.boot.configurationprocessor.fieldvalues.TestCompiler = new TestCompiler ( this . org.springframework.boot.configurationprocessor.fieldvalues.TemporaryFolder ) ; org.springframework.boot.configurationprocessor.fieldvalues.TestCompiler . getTask ( FieldValues .class ) . call ( org.springframework.boot.configurationprocessor.fieldvalues.AbstractFieldValuesProcessorTests.TestProcessor ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.configurationprocessor.fieldvalues.AbstractFieldValuesProcessorTests.TestProcessor . java.util.Map<java.lang.String,java.lang.Object> ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( false ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( true ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( new java.lang.Object [] { STRING , STRING } ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( new java.lang.Object [ NUMBER ] ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( new java.lang.Object [] { STRING , STRING } ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( new java.lang.Object [] { STRING } ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( new java.lang.Object [] { NUMBER , NUMBER } ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( javax.annotation.processing.ProcessingEnvironment javax.annotation.processing.ProcessingEnvironment ) { this . org.springframework.boot.configurationprocessor.fieldvalues.FieldValuesParser = org.springframework.boot.configurationprocessor.fieldvalues.FieldValuesParser ( javax.annotation.processing.ProcessingEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Set<? extends javax.lang.model.element.TypeElement> < ? extends javax.lang.model.element.TypeElement > java.util.Set<? extends javax.lang.model.element.TypeElement> , javax.annotation.processing.RoundEnvironment javax.annotation.processing.RoundEnvironment ) { for ( javax.lang.model.element.TypeElement javax.lang.model.element.TypeElement : java.util.Set<> ) { for ( javax.lang.model.element.Element javax.lang.model.element.Element : javax.annotation.processing.RoundEnvironment . java.util.Set<? extends javax.lang.model.element.Element> ( javax.lang.model.element.TypeElement ) ) { if ( javax.lang.model.element.Element instanceof javax.lang.model.element.TypeElement ) { try { this . java.util.Map<java.lang.String,java.lang.Object> . void ( this . org.springframework.boot.configurationprocessor.fieldvalues.FieldValuesParser . getFieldValues ( ( javax.lang.model.element.TypeElement ) javax.lang.model.element.Element ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } } } } return false ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
