<METHOD_START> @ Test void void ( ) { void ( org.springframework.test.context.junit.jupiter.DisabledIfCondition . evaluate ( org.springframework.test.context.junit.jupiter.TestExtensionContext ( STRING ) ) , false , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test void void ( ) { assertAll ( ( ) assertExpressionIsBlank ( STRING ) , ( ) assertExpressionIsBlank ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.IllegalStateException java.lang.IllegalStateException = assertThrows ( java.lang.IllegalStateException .class , ( ) condition . evaluate ( buildExtensionContext ( methodName ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.test.context.junit.jupiter.DisabledIfConditionTestCase> ( ) , java.lang.String ) ; assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , is ( equalTo ( STRING + java.lang.reflect.Method + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.IllegalStateException java.lang.IllegalStateException = assertThrows ( java.lang.IllegalStateException .class , ( ) condition . evaluate ( buildExtensionContext ( methodName ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.test.context.junit.jupiter.DisabledIfConditionTestCase> ( ) , java.lang.String ) ; assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , is ( equalTo ( STRING + java.lang.reflect.Method + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test void void ( ) { void ( org.springframework.test.context.junit.jupiter.DisabledIfCondition . evaluate ( org.springframework.test.context.junit.jupiter.TestExtensionContext ( STRING ) ) , true , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test void void ( ) { void ( org.springframework.test.context.junit.jupiter.DisabledIfCondition . evaluate ( org.springframework.test.context.junit.jupiter.TestExtensionContext ( STRING ) ) , true , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test void void ( ) { void ( org.springframework.test.context.junit.jupiter.DisabledIfCondition . evaluate ( org.springframework.test.context.junit.jupiter.TestExtensionContext ( STRING ) ) , false , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit.jupiter.TestExtensionContext org.springframework.test.context.junit.jupiter.TestExtensionContext ( java.lang.String java.lang.String ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.junit.jupiter.DisabledIfConditionTestCase.SpringTestCase .class ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.test.context.junit.jupiter.DisabledIfConditionTestCase> ( ) , java.lang.String ) ; Store org.springframework.test.context.junit.jupiter.Store = mock ( Store .class ) ; when ( org.springframework.test.context.junit.jupiter.Store . getOrComputeIfAbsent ( any ( ) , any ( ) , any ( ) ) ) . thenReturn ( new TestContextManager ( java.lang.Class<> ) ) ; TestExtensionContext org.springframework.test.context.junit.jupiter.TestExtensionContext = mock ( TestExtensionContext .class ) ; when ( org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestClass ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Class<>> ( java.lang.Class<> ) ) ; when ( org.springframework.test.context.junit.jupiter.TestExtensionContext . getElement ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method ) ) ; when ( org.springframework.test.context.junit.jupiter.TestExtensionContext . getStore ( any ( ) ) ) . thenReturn ( org.springframework.test.context.junit.jupiter.Store ) ; return org.springframework.test.context.junit.jupiter.TestExtensionContext ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { java.lang.IllegalStateException java.lang.IllegalStateException = assertThrows ( java.lang.IllegalStateException .class , ( ) condition . evaluate ( buildExtensionContext ( methodName ) ) ) ; assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConditionEvaluationResult org.springframework.test.context.junit.jupiter.ConditionEvaluationResult , boolean boolean , Matcher < java.lang.String > org.springframework.test.context.junit.jupiter.Matcher<java.lang.String> ) { assertNotNull ( org.springframework.test.context.junit.jupiter.ConditionEvaluationResult ) ; if ( boolean ) { assertTrue ( org.springframework.test.context.junit.jupiter.ConditionEvaluationResult . isDisabled ( ) ) ; } else { assertFalse ( org.springframework.test.context.junit.jupiter.ConditionEvaluationResult . isDisabled ( ) ) ; } java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.test.context.junit.jupiter.ConditionEvaluationResult . getReason ( ) ; assertTrue ( java.util.Optional<java.lang.String> . boolean ( ) ) ; assertThat ( java.util.Optional<java.lang.String> . java.lang.String ( ) , org.springframework.test.context.junit.jupiter.Matcher<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ DisabledIf ( STRING ) private void void ( ) {	}  <METHOD_END>
<METHOD_START> @ DisabledIf ( STRING ) private void void ( ) {	}  <METHOD_END>
<METHOD_START> @ DisabledIf ( STRING ) private void void ( ) {	}  <METHOD_END>
<METHOD_START> @ DisabledIf ( STRING ) private void void ( ) {	}  <METHOD_END>
<METHOD_START> @ DisabledIf ( expression = STRING , reason = STRING ) private void void ( ) {	}  <METHOD_END>
<METHOD_START> @ DisabledIf ( STRING ) private void void ( ) {	}  <METHOD_END>
<METHOD_START> @ DisabledIf ( STRING ) private void void ( ) {	}  <METHOD_END>
