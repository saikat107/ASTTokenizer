<METHOD_START> @ Test public void void ( ) java.lang.Exception { PageRequest org.springframework.data.couchbase.repository.query.PageRequest = new PageRequest ( NUMBER , NUMBER ) ; CouchbaseOperations org.springframework.data.couchbase.repository.query.CouchbaseOperations = mock ( CouchbaseOperations .class ) ; CouchbaseBucket org.springframework.data.couchbase.repository.query.CouchbaseBucket = mock ( CouchbaseBucket .class ) ; CouchbaseConverter org.springframework.data.couchbase.repository.query.CouchbaseConverter = mock ( CouchbaseConverter .class ) ; MappingContext org.springframework.data.couchbase.repository.query.MappingContext = mock ( MappingContext .class ) ; PersistentPropertyPath org.springframework.data.couchbase.repository.query.PersistentPropertyPath = mock ( PersistentPropertyPath .class ) ; CouchbasePersistentProperty org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty = mock ( CouchbasePersistentProperty .class ) ; EntityMetadata org.springframework.data.couchbase.repository.query.EntityMetadata = mock ( EntityMetadata .class ) ; ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor = mock ( ParameterAccessor .class ) ; ProjectionFactory org.springframework.data.couchbase.repository.query.ProjectionFactory = mock ( ProjectionFactory .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; RepositoryMetadata org.springframework.data.couchbase.repository.query.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class ) ; CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod = new CouchbaseQueryMethod ( java.lang.reflect.Method , org.springframework.data.couchbase.repository.query.RepositoryMetadata , org.springframework.data.couchbase.repository.query.ProjectionFactory , org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.ParameterAccessor . getSort ( ) ) . thenReturn ( Sort . unsorted ( ) ) ; when ( org.springframework.data.couchbase.repository.query.EntityMetadata . getJavaType ( ) ) . thenReturn ( Beer .class ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getCouchbaseBucket ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseBucket ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseBucket . name ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . getMappingContext ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.MappingContext . getPersistentPropertyPath ( isA ( PropertyPath .class ) ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath ) ; when ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath . toDotPath ( isA ( Converter .class ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath . getLeafProperty ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty ) ; when ( org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty . getType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.String .class ) ; when ( org.springframework.data.couchbase.repository.query.ParameterAccessor . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( ( java.lang.Object ) STRING , org.springframework.data.couchbase.repository.query.PageRequest ) . iterator ( ) ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . getTypeKey ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . convertForWriteIfNeeded ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; PartTreeN1qlBasedQuery org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery = new PartTreeN1qlBasedQuery ( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.query.CouchbaseOperations ) ; Statement org.springframework.data.couchbase.repository.query.Statement = org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery . getCount ( org.springframework.data.couchbase.repository.query.ParameterAccessor , new java.lang.Object [] { STRING , org.springframework.data.couchbase.repository.query.PageRequest } ) ; assertEquals ( STRING + STRING , org.springframework.data.couchbase.repository.query.Statement . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Sort org.springframework.data.couchbase.repository.query.Sort = new Sort ( Direction . ASC , STRING ) ; PageRequest org.springframework.data.couchbase.repository.query.PageRequest = new PageRequest ( NUMBER , NUMBER , org.springframework.data.couchbase.repository.query.Sort ) ; CouchbaseOperations org.springframework.data.couchbase.repository.query.CouchbaseOperations = mock ( CouchbaseOperations .class ) ; CouchbaseBucket org.springframework.data.couchbase.repository.query.CouchbaseBucket = mock ( CouchbaseBucket .class ) ; CouchbaseConverter org.springframework.data.couchbase.repository.query.CouchbaseConverter = mock ( CouchbaseConverter .class ) ; MappingContext org.springframework.data.couchbase.repository.query.MappingContext = mock ( MappingContext .class ) ; PersistentPropertyPath org.springframework.data.couchbase.repository.query.PersistentPropertyPath = mock ( PersistentPropertyPath .class ) ; CouchbasePersistentProperty org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty = mock ( CouchbasePersistentProperty .class ) ; EntityMetadata org.springframework.data.couchbase.repository.query.EntityMetadata = mock ( EntityMetadata .class ) ; ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor = mock ( ParameterAccessor .class ) ; ProjectionFactory org.springframework.data.couchbase.repository.query.ProjectionFactory = mock ( ProjectionFactory .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; RepositoryMetadata org.springframework.data.couchbase.repository.query.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class ) ; CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod = new CouchbaseQueryMethod ( java.lang.reflect.Method , org.springframework.data.couchbase.repository.query.RepositoryMetadata , org.springframework.data.couchbase.repository.query.ProjectionFactory , org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.EntityMetadata . getJavaType ( ) ) . thenReturn ( Beer .class ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getCouchbaseBucket ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseBucket ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseBucket . name ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . getMappingContext ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.MappingContext . getPersistentPropertyPath ( isA ( PropertyPath .class ) ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath ) ; when ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath . toDotPath ( isA ( Converter .class ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath . getLeafProperty ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty ) ; when ( org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty . getType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.String .class ) ; when ( org.springframework.data.couchbase.repository.query.ParameterAccessor . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( ( java.lang.Object ) STRING , org.springframework.data.couchbase.repository.query.PageRequest ) . iterator ( ) ) ; when ( org.springframework.data.couchbase.repository.query.ParameterAccessor . getSort ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.Sort ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . getTypeKey ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . convertForWriteIfNeeded ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; PartTreeN1qlBasedQuery org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery = new PartTreeN1qlBasedQuery ( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.query.CouchbaseOperations ) ; Statement org.springframework.data.couchbase.repository.query.Statement = org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery . getCount ( org.springframework.data.couchbase.repository.query.ParameterAccessor , new java.lang.Object [] { STRING , org.springframework.data.couchbase.repository.query.PageRequest } ) ; assertEquals ( STRING + STRING , org.springframework.data.couchbase.repository.query.Statement . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CouchbaseOperations org.springframework.data.couchbase.repository.query.CouchbaseOperations = mock ( CouchbaseOperations .class ) ; CouchbaseBucket org.springframework.data.couchbase.repository.query.CouchbaseBucket = mock ( CouchbaseBucket .class ) ; CouchbaseConverter org.springframework.data.couchbase.repository.query.CouchbaseConverter = mock ( CouchbaseConverter .class ) ; EntityMetadata org.springframework.data.couchbase.repository.query.EntityMetadata = mock ( EntityMetadata .class ) ; ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor = mock ( ParameterAccessor .class ) ; ProjectionFactory org.springframework.data.couchbase.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; org.springframework.data.couchbase.repository.query.ProjectionFactory . createProjection ( BeerProjection .class ) ; MappingContext org.springframework.data.couchbase.repository.query.MappingContext = new CouchbaseMappingContext ( ) ; RepositoryMetadata org.springframework.data.couchbase.repository.query.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class . java.lang.reflect.Method ( STRING ) ; CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod = new CouchbaseQueryMethod ( java.lang.reflect.Method , org.springframework.data.couchbase.repository.query.RepositoryMetadata , org.springframework.data.couchbase.repository.query.ProjectionFactory , org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.ParameterAccessor . getDynamicProjection ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Class<org.springframework.data.couchbase.repository.query.BeerProjection>> ( BeerProjection .class ) ) ; when ( org.springframework.data.couchbase.repository.query.EntityMetadata . getJavaType ( ) ) . thenReturn ( Beer .class ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getCouchbaseBucket ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseBucket ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseBucket . name ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getConverter ( ) . getMappingContext ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . getTypeKey ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . convertForWriteIfNeeded ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; ResultProcessor org.springframework.data.couchbase.repository.query.ResultProcessor = org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.couchbase.repository.query.ParameterAccessor ) ; PartTreeN1qlBasedQuery org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery = new PartTreeN1qlBasedQuery ( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.query.CouchbaseOperations ) ; Statement org.springframework.data.couchbase.repository.query.Statement = org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery . getStatement ( org.springframework.data.couchbase.repository.query.ParameterAccessor , null , org.springframework.data.couchbase.repository.query.ResultProcessor . getReturnedType ( ) ) ; assertEquals ( STRING + STRING , org.springframework.data.couchbase.repository.query.Statement . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CouchbaseOperations org.springframework.data.couchbase.repository.query.CouchbaseOperations = mock ( CouchbaseOperations .class ) ; CouchbaseBucket org.springframework.data.couchbase.repository.query.CouchbaseBucket = mock ( CouchbaseBucket .class ) ; CouchbaseConverter org.springframework.data.couchbase.repository.query.CouchbaseConverter = mock ( CouchbaseConverter .class ) ; EntityMetadata org.springframework.data.couchbase.repository.query.EntityMetadata = mock ( EntityMetadata .class ) ; ProjectionFactory org.springframework.data.couchbase.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor = mock ( ParameterAccessor .class ) ; RepositoryMetadata org.springframework.data.couchbase.repository.query.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.couchbase.repository.query.PartTreeN1qBasedQueryTest.TestRepository .class . java.lang.reflect.Method ( STRING ) ; MappingContext org.springframework.data.couchbase.repository.query.MappingContext = new CouchbaseMappingContext ( ) ; CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod = new CouchbaseQueryMethod ( java.lang.reflect.Method , org.springframework.data.couchbase.repository.query.RepositoryMetadata , org.springframework.data.couchbase.repository.query.ProjectionFactory , org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.ParameterAccessor . getDynamicProjection ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Class<org.springframework.data.couchbase.repository.query.BeerDTO>> ( BeerDTO .class ) ) ; when ( org.springframework.data.couchbase.repository.query.EntityMetadata . getJavaType ( ) ) . thenReturn ( Beer .class ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getCouchbaseBucket ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseBucket ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseBucket . name ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseOperations . getConverter ( ) . getMappingContext ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.query.MappingContext ) ; when ( org.springframework.data.couchbase.repository.query.CouchbaseConverter . getTypeKey ( ) ) . thenReturn ( STRING ) ; ResultProcessor org.springframework.data.couchbase.repository.query.ResultProcessor = org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.couchbase.repository.query.ParameterAccessor ) ; PartTreeN1qlBasedQuery org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery = new PartTreeN1qlBasedQuery ( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.query.CouchbaseOperations ) ; Statement org.springframework.data.couchbase.repository.query.Statement = org.springframework.data.couchbase.repository.query.PartTreeN1qlBasedQuery . getStatement ( org.springframework.data.couchbase.repository.query.ParameterAccessor , null , org.springframework.data.couchbase.repository.query.ResultProcessor . getReturnedType ( ) ) ; assertEquals ( STRING + STRING , org.springframework.data.couchbase.repository.query.Statement . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.couchbase.repository.query.Page<org.springframework.data.couchbase.repository.query.Beer> < Beer > org.springframework.data.couchbase.repository.query.Page<org.springframework.data.couchbase.repository.query.Beer> ( java.lang.String java.lang.String , Pageable org.springframework.data.couchbase.repository.query.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.couchbase.repository.query.Page<org.springframework.data.couchbase.repository.query.Beer> < Beer > org.springframework.data.couchbase.repository.query.Page<org.springframework.data.couchbase.repository.query.Beer> ( java.lang.String java.lang.String , Pageable org.springframework.data.couchbase.repository.query.Pageable );  <METHOD_END>
<METHOD_START> java.util.Collection<org.springframework.data.couchbase.repository.query.BeerProjection> < BeerProjection > java.util.Collection<org.springframework.data.couchbase.repository.query.BeerProjection> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.couchbase.repository.query.BeerDTO> < BeerDTO > java.util.List<org.springframework.data.couchbase.repository.query.BeerDTO> ( )  <METHOD_END>
