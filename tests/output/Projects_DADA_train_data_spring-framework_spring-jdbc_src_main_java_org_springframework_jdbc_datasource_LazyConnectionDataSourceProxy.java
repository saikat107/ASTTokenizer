<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setTargetDataSource ( javax.sql.DataSource ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( org.springframework.jdbc.datasource.Constants . asNumber ( java.lang.String ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterPropertiesSet ( ) ; if ( this . java.lang.Boolean == null || this . java.lang.Integer == null ) { try { java.sql.Connection java.sql.Connection = getTargetDataSource ( ) . getConnection ( ) ; try { void ( java.sql.Connection ) ; } finally { java.sql.Connection . void ( ) ; } } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.datasource.Log . warn ( STRING , java.sql.SQLException ) ; } } }  <METHOD_END>
<METHOD_START> protected synchronized void void ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException { if ( this . java.lang.Boolean == null ) { this . java.lang.Boolean = java.sql.Connection . boolean ( ) ; } if ( this . java.lang.Integer == null ) { this . java.lang.Integer = java.sql.Connection . int ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Boolean java.lang.Boolean ( ) { return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { return ( java.sql.Connection ) java.lang.reflect.Proxy . java.lang.Object ( ConnectionProxy .class . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { ConnectionProxy .class } , new org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.LazyConnectionInvocationHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.sql.SQLException { return ( java.sql.Connection ) java.lang.reflect.Proxy . java.lang.Object ( ConnectionProxy .class . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { ConnectionProxy .class } , new org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.LazyConnectionInvocationHandler ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.lang.Boolean = java.lang.Boolean ( ) ; this . java.lang.Integer = java.lang.Integer ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this(); this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . boolean ( java.lang.Object ) ) { return java.lang.Object ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . boolean ( java.lang.Object ) ) { return true ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.sql.Connection ( java.lang.reflect.Method ) ; } if ( ! boolean ( ) ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return STRING + getTargetDataSource ( ) + STRING ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return this . java.lang.Boolean ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { this . java.lang.Boolean = ( java.lang.Boolean ) java.lang.Object[] [ NUMBER ] ; return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( this . java.lang.Integer != null ) { return this . java.lang.Integer ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { this . java.lang.Integer = ( java.lang.Integer ) java.lang.Object[] [ NUMBER ] ; return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( this . java.lang.Boolean != null ) { return this . java.lang.Boolean ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { this . java.lang.Boolean = ( java.lang.Boolean ) java.lang.Object[] [ NUMBER ] ; return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { this . boolean = true ; return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return this . boolean ; } else if ( this . boolean ) { throw new java.sql.SQLException ( STRING ) ; } } try { return java.lang.reflect.Method . java.lang.Object ( java.sql.Connection ( java.lang.reflect.Method ) , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ( this . java.sql.Connection != null ) ; }  <METHOD_END>
<METHOD_START> private java.sql.Connection java.sql.Connection ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.sql.SQLException { if ( this . java.sql.Connection == null ) { if ( org.springframework.jdbc.datasource.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; } this . java.sql.Connection = ( this . java.lang.String != null ) ? getTargetDataSource ( ) . getConnection ( this . java.lang.String , this . java.lang.String ) : getTargetDataSource ( ) . getConnection ( ) ; void ( this . java.sql.Connection ) ; if ( this . java.lang.Boolean ) { try { this . java.sql.Connection . void ( this . java.lang.Boolean ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.jdbc.datasource.Log . debug ( STRING , java.lang.Exception ) ; } } if ( this . java.lang.Integer != null && ! this . java.lang.Integer . boolean ( java.lang.Integer ( ) ) ) { this . java.sql.Connection . void ( this . java.lang.Integer ) ; } if ( this . java.lang.Boolean != null && this . java.lang.Boolean != this . java.sql.Connection . boolean ( ) ) { this . java.sql.Connection . void ( this . java.lang.Boolean ) ; } } else { if ( org.springframework.jdbc.datasource.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; } } return this . java.sql.Connection ; }  <METHOD_END>
