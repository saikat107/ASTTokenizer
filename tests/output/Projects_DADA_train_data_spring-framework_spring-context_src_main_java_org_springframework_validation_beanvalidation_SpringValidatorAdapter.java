<METHOD_START> public void ( javax . javax.validation . javax.validation javax.validation.Validator ) { Assert . notNull ( javax.validation.Validator , STRING ) ; this . javax.validation.Validator = javax.validation.Validator ; }  <METHOD_END>
<METHOD_START> void ( ) {	}  <METHOD_END>
<METHOD_START> void void ( javax . javax.validation . javax.validation javax.validation.Validator ) { this . javax.validation.Validator = javax.validation.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( this . javax.validation.Validator != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.validation.beanvalidation.Errors ) { if ( this . javax.validation.Validator != null ) { void ( this . javax.validation.Validator . validate ( java.lang.Object ) , org.springframework.validation.beanvalidation.Errors ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.validation.beanvalidation.Errors , java.lang.Object ... java.lang.Object[] ) { if ( this . javax.validation.Validator != null ) { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>> <> ( ) ; if ( java.lang.Object[] != null ) { for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( java.lang.Object instanceof java.lang.Class ) { java.util.Set<java.lang.Class<?>> . boolean ( ( java.lang.Class<?> < ? > ) java.lang.Object ) ; } } } void ( this . javax.validation.Validator . validate ( java.lang.Object , java.util.Set<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.Set<java.lang.Class<?>> . int ( ) ] ) ) , org.springframework.validation.beanvalidation.Errors ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> < ConstraintViolation < java.lang.Object > > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> , Errors org.springframework.validation.beanvalidation.Errors ) { for ( ConstraintViolation < java.lang.Object > org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> : java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> ) ; FieldError org.springframework.validation.beanvalidation.FieldError = org.springframework.validation.beanvalidation.Errors . getFieldError ( java.lang.String ) ; if ( org.springframework.validation.beanvalidation.FieldError == null || ! org.springframework.validation.beanvalidation.FieldError . isBindingFailure ( ) ) { try { ConstraintDescriptor < ? > org.springframework.validation.beanvalidation.ConstraintDescriptor<?> = org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> . getConstraintDescriptor ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.validation.beanvalidation.ConstraintDescriptor<> ) ; java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( org.springframework.validation.beanvalidation.Errors . getObjectName ( ) , java.lang.String , org.springframework.validation.beanvalidation.ConstraintDescriptor<> ) ; if ( org.springframework.validation.beanvalidation.Errors instanceof BindingResult ) { BindingResult org.springframework.validation.beanvalidation.BindingResult = ( BindingResult ) org.springframework.validation.beanvalidation.Errors ; java.lang.String java.lang.String = org.springframework.validation.beanvalidation.BindingResult . getNestedPath ( ) + java.lang.String ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = org.springframework.validation.beanvalidation.BindingResult . resolveMessageCodes ( java.lang.String ) ; org.springframework.validation.beanvalidation.BindingResult . addError ( new ObjectError ( org.springframework.validation.beanvalidation.Errors . getObjectName ( ) , java.lang.String[] , java.lang.Object[] , org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> . getMessage ( ) ) ) ; } else { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> , org.springframework.validation.beanvalidation.BindingResult ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.beanvalidation.BindingResult . resolveMessageCodes ( java.lang.String , java.lang.String ) ; org.springframework.validation.beanvalidation.BindingResult . addError ( new FieldError ( org.springframework.validation.beanvalidation.Errors . getObjectName ( ) , java.lang.String , java.lang.Object , false , java.lang.String[] , java.lang.Object[] , org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> . getMessage ( ) ) ) ; } } else { org.springframework.validation.beanvalidation.Errors . rejectValue ( java.lang.String , java.lang.String , java.lang.Object[] , org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> . getMessage ( ) ) ; } } catch ( NotReadablePropertyException org.springframework.validation.beanvalidation.NotReadablePropertyException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + STRING , org.springframework.validation.beanvalidation.NotReadablePropertyException ) ; } } } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ConstraintViolation < java.lang.Object > org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> ) { return org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> . getPropertyPath ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ConstraintDescriptor < ? > org.springframework.validation.beanvalidation.ConstraintDescriptor<?> ) { return org.springframework.validation.beanvalidation.ConstraintDescriptor<> . getAnnotation ( ) . annotationType ( ) . getSimpleName ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object [] java.lang.Object[] ( java.lang.String java.lang.String , java.lang.String java.lang.String , ConstraintDescriptor < ? > org.springframework.validation.beanvalidation.ConstraintDescriptor<?> ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.LinkedList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.validation.beanvalidation.MessageSourceResolvable ( java.lang.String , java.lang.String ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.TreeMap<java.lang.String,java.lang.Object> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.validation.beanvalidation.ConstraintDescriptor<> . getAttributes ( ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.String ) { java.lang.Object = new org.springframework.validation.beanvalidation.SpringValidatorAdapter.ResolvableAttribute ( java.lang.Object . java.lang.String ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } java.util.List<java.lang.Object> . boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) ) ; return java.util.List<java.lang.Object> . java.lang.Object[] ( new java.lang.Object [ java.util.List<java.lang.Object> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.validation.beanvalidation.MessageSourceResolvable org.springframework.validation.beanvalidation.MessageSourceResolvable ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { java.lang.String + Errors . NESTED_PATH_SEPARATOR + java.lang.String , java.lang.String } ; return new DefaultMessageSourceResolvable ( java.lang.String[] , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ConstraintViolation < java.lang.Object > org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> , BindingResult org.springframework.validation.beanvalidation.BindingResult ) { java.lang.Object java.lang.Object = org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> . getInvalidValue ( ) ; if ( ! STRING . boolean ( java.lang.String ) && ( java.lang.Object == org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object> . getLeafBean ( ) || ( ! java.lang.String . boolean ( STRING ) && ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) ) ) ) { java.lang.Object = org.springframework.validation.beanvalidation.BindingResult . getRawFieldValue ( java.lang.String ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<T>> < ConstraintViolation < T > > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<T>> ( T T , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . state ( this . javax.validation.Validator != null , STRING ) ; return this . javax.validation.Validator . validate ( T , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<T>> < ConstraintViolation < T > > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<T>> ( T T , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . state ( this . javax.validation.Validator != null , STRING ) ; return this . javax.validation.Validator . validateProperty ( T , java.lang.String , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<T>> < ConstraintViolation < T > > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<T>> ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . state ( this . javax.validation.Validator != null , STRING ) ; return this . javax.validation.Validator . validateValue ( java.lang.Class<T> , java.lang.String , java.lang.Object , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.BeanDescriptor org.springframework.validation.beanvalidation.BeanDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . state ( this . javax.validation.Validator != null , STRING ) ; return this . javax.validation.Validator . getConstraintsForClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . state ( this . javax.validation.Validator != null , STRING ) ; return ( java.lang.Class<T> != null ? this . javax.validation.Validator . unwrap ( java.lang.Class<T> ) : ( T ) this . javax.validation.Validator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.ExecutableValidator org.springframework.validation.beanvalidation.ExecutableValidator ( ) { return this . javax.validation.Validator . forExecutables ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { this . java.lang.String } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
