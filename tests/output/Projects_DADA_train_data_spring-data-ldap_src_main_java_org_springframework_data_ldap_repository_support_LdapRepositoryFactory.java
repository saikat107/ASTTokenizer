<METHOD_START> public void ( LdapOperations org.springframework.data.ldap.repository.support.LdapOperations ) { Assert . notNull ( org.springframework.data.ldap.repository.support.LdapOperations , STRING ) ; this . org.springframework.data.ldap.repository.support.LdapRepositoryFactory.LdapQueryLookupStrategy = new org.springframework.data.ldap.repository.support.LdapRepositoryFactory.LdapQueryLookupStrategy ( org.springframework.data.ldap.repository.support.LdapOperations ) ; this . org.springframework.data.ldap.repository.support.LdapOperations = org.springframework.data.ldap.repository.support.LdapOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , ID extends java.io.Serializable > org.springframework.data.ldap.repository.support.EntityInformation<T,ID> < T , ID > org.springframework.data.ldap.repository.support.EntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.ldap.repository.support.RepositoryMetadata ) { boolean boolean = QUERY_DSL_PRESENT && QuerydslPredicateExecutor .class . boolean ( org.springframework.data.ldap.repository.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; return boolean ? QueryDslLdapRepository .class : SimpleLdapRepository .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.ldap.repository.support.RepositoryInformation ) { return getTargetRepositoryViaReflection ( org.springframework.data.ldap.repository.support.RepositoryInformation , org.springframework.data.ldap.repository.support.LdapOperations , org.springframework.data.ldap.repository.support.LdapOperations . getObjectDirectoryMapper ( ) , org.springframework.data.ldap.repository.support.RepositoryInformation . getDomainType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.ldap.repository.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.ldap.repository.support.QueryLookupStrategy> ( Key org.springframework.data.ldap.repository.support.Key , EvaluationContextProvider org.springframework.data.ldap.repository.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional<org.springframework.data.ldap.repository.support.LdapRepositoryFactory.LdapQueryLookupStrategy> ( org.springframework.data.ldap.repository.support.LdapRepositoryFactory.LdapQueryLookupStrategy ) ; }  <METHOD_END>
<METHOD_START> public void ( LdapOperations org.springframework.data.ldap.repository.support.LdapOperations ) { this . org.springframework.data.ldap.repository.support.LdapOperations = org.springframework.data.ldap.repository.support.LdapOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.ldap.repository.support.RepositoryQuery org.springframework.data.ldap.repository.support.RepositoryQuery ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.ldap.repository.support.RepositoryMetadata , ProjectionFactory org.springframework.data.ldap.repository.support.ProjectionFactory , NamedQueries org.springframework.data.ldap.repository.support.NamedQueries ) { LdapQueryMethod org.springframework.data.ldap.repository.support.LdapQueryMethod = new LdapQueryMethod ( java.lang.reflect.Method , org.springframework.data.ldap.repository.support.RepositoryMetadata , org.springframework.data.ldap.repository.support.ProjectionFactory ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.ldap.repository.support.RepositoryMetadata . getDomainType ( ) ; if ( org.springframework.data.ldap.repository.support.LdapQueryMethod . hasQueryAnnotation ( ) ) { return new AnnotatedLdapRepositoryQuery ( org.springframework.data.ldap.repository.support.LdapQueryMethod , java.lang.Class<> , org.springframework.data.ldap.repository.support.LdapOperations ) ; } else { return new PartTreeLdapRepositoryQuery ( org.springframework.data.ldap.repository.support.LdapQueryMethod , java.lang.Class<> , org.springframework.data.ldap.repository.support.LdapOperations ) ; } }  <METHOD_END>
