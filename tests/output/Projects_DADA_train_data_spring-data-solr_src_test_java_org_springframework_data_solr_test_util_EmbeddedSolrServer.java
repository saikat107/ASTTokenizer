<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.test.util.EmbeddedSolrServer org.springframework.data.solr.test.util.EmbeddedSolrServer ( Resource org.springframework.data.solr.test.util.Resource ) { return org.springframework.data.solr.test.util.EmbeddedSolrServer ( org.springframework.data.solr.test.util.Resource , org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache . org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.test.util.EmbeddedSolrServer org.springframework.data.solr.test.util.EmbeddedSolrServer ( Resource org.springframework.data.solr.test.util.Resource , org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache ) { org.springframework.data.solr.test.util.EmbeddedSolrServer org.springframework.data.solr.test.util.EmbeddedSolrServer = new org.springframework.data.solr.test.util.EmbeddedSolrServer ( ) ; org.springframework.data.solr.test.util.EmbeddedSolrServer . org.springframework.data.solr.test.util.Resource = org.springframework.data.solr.test.util.Resource ; org.springframework.data.solr.test.util.EmbeddedSolrServer . org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache = org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache ; return org.springframework.data.solr.test.util.EmbeddedSolrServer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.test.util.SolrClient org.springframework.data.solr.test.util.SolrClient ( ) { return org.springframework.data.solr.test.util.SolrClient ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.solr.test.util.SolrClient org.springframework.data.solr.test.util.SolrClient ( java.lang.String java.lang.String ) { if ( org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache . org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache . boolean ( org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache ) && java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.data.solr.test.util.SolrClient> . containsKey ( java.lang.String ) ) { return java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.data.solr.test.util.SolrClient> . get ( java.lang.String ) ; } org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.solr.client.solrj.embedded.EmbeddedSolrServer = new org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache ( org.springframework.data.solr.test.util.CoreContainer , java.lang.String ) { public void void ( ) { } @ java.lang.Override public void void ( ) { void ( ) ; } } ; final DirectFieldAccessor org.springframework.data.solr.test.util.DirectFieldAccessor = new DirectFieldAccessor ( org.apache.solr.client.solrj.embedded.EmbeddedSolrServer ) ; org.springframework.data.solr.test.util.DirectFieldAccessor . setPropertyValue ( STRING , new org.springframework.data.solr.test.util.EmbeddedSolrServer.HttpMethodGuessingSolrRequestParsers ( ) ) ; if ( org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache . org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache . boolean ( org.springframework.data.solr.test.util.EmbeddedSolrServer.ClientCache ) ) { java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.data.solr.test.util.SolrClient> . put ( java.lang.String , org.apache.solr.client.solrj.embedded.EmbeddedSolrServer ) ; } return org.apache.solr.client.solrj.embedded.EmbeddedSolrServer ; }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return new java.util.ArrayList <> ( org.springframework.data.solr.test.util.CoreContainer . getCoreNames ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Throwable { org.springframework.data.solr.test.util.TemporaryFolder = new TemporaryFolder ( ) ; org.springframework.data.solr.test.util.TemporaryFolder . create ( ) ; org.springframework.data.solr.test.util.Logger . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.data.solr.test.util.TemporaryFolder . getRoot ( ) . getPath ( ) ) ) ; if ( org.springframework.data.solr.test.util.Resource != null && org.springframework.data.solr.test.util.Resource . exists ( ) && org.springframework.data.solr.test.util.Resource . getFile ( ) . isDirectory ( ) ) { FileUtils . copyDirectory ( org.springframework.data.solr.test.util.Resource . getFile ( ) , org.springframework.data.solr.test.util.TemporaryFolder . getRoot ( ) ) ; org.springframework.data.solr.test.util.Logger . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.data.solr.test.util.Resource . getFile ( ) . list ( ) . length , org.springframework.data.solr.test.util.Resource . getFile ( ) . getPath ( ) ) ) ; } void ( org.springframework.data.solr.test.util.TemporaryFolder . getRoot ( ) . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { org.springframework.data.solr.test.util.Logger . debug ( STRING ) ; try { org.springframework.data.solr.test.util.CoreContainer . shutdown ( ) ; org.springframework.data.solr.test.util.CoreContainer = null ; java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.data.solr.test.util.SolrClient> . clear ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.data.solr.test.util.Logger . error ( STRING , java.lang.Exception ) ; } org.springframework.data.solr.test.util.Logger . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.data.solr.test.util.TemporaryFolder . getRoot ( ) . getPath ( ) ) ) ; org.springframework.data.solr.test.util.TemporaryFolder . delete ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws org.springframework.data.solr.test.util.SolrServerException , java.io.IOException , java.lang.InterruptedException { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getStaticMethod ( CoreContainer .class , STRING , java.lang.String .class , java.io.File .class ) ; org.springframework.data.solr.test.util.Logger . debug ( STRING ) ; if ( java.lang.reflect.Method != null ) { org.springframework.data.solr.test.util.CoreContainer = ( CoreContainer ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , java.lang.String , new java.io.File ( java.lang.String + STRING ) ) ; } else { java.lang.reflect.Method = ClassUtils . getStaticMethod ( CoreContainer .class , STRING , java.nio.file.Path .class , java.nio.file.Path .class ) ; org.springframework.data.solr.test.util.CoreContainer = ( CoreContainer ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , java.nio.file.FileSystems . java.nio.file.FileSystem ( ) . java.nio.file.Path ( java.lang.String ) , java.nio.file.FileSystems . java.nio.file.FileSystem ( ) . java.nio.file.Path ( new java.io.File ( java.lang.String + STRING ) . java.lang.String ( ) ) ) ; } java.lang.Thread . void ( NUMBER ) ; org.springframework.data.solr.test.util.Logger . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> void ( SolrConfig org.springframework.data.solr.test.util.SolrConfig ) { super( org.springframework.data.solr.test.util.SolrConfig ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.test.util.SolrQueryRequest org.springframework.data.solr.test.util.SolrQueryRequest ( SolrCore org.springframework.data.solr.test.util.SolrCore , SolrParams org.springframework.data.solr.test.util.SolrParams , java.util.Collection<org.springframework.data.solr.test.util.ContentStream> < ContentStream > java.util.Collection<org.springframework.data.solr.test.util.ContentStream> )				throws java.lang.Exception { if ( CollectionUtils . isEmpty ( java.util.Collection<org.springframework.data.solr.test.util.ContentStream> ) ) { return super. buildRequestFrom ( org.springframework.data.solr.test.util.SolrCore , org.springframework.data.solr.test.util.SolrParams , java.util.Collection<org.springframework.data.solr.test.util.ContentStream> ) ; } MockHttpServletRequest org.springframework.data.solr.test.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.solr.test.util.MockHttpServletRequest . setMethod ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org . springframework . util . ReflectionUtils . findMethod ( this . java.lang.Class<? extends org.springframework.data.solr.test.util.EmbeddedSolrServer.HttpMethodGuessingSolrRequestParsers> ( ) , STRING , SolrCore .class , SolrParams .class , java.util.Collection .class , RTimerTree .class , HttpServletRequest .class ) ; java.lang.reflect.Method . void ( true ) ; SolrQueryRequestBase org.springframework.data.solr.test.util.SolrQueryRequestBase = ( SolrQueryRequestBase ) java.lang.reflect.Method . java.lang.Object ( this , org.springframework.data.solr.test.util.SolrCore , org.springframework.data.solr.test.util.SolrParams , java.util.Collection<org.springframework.data.solr.test.util.ContentStream> , new RTimerTree ( ) , org.springframework.data.solr.test.util.MockHttpServletRequest ) ; if ( org.springframework.data.solr.test.util.SolrQueryRequestBase . getContext ( ) == null ) { new DirectFieldAccessor ( org.springframework.data.solr.test.util.SolrQueryRequestBase ) . setPropertyValue ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; } else { org.springframework.data.solr.test.util.SolrQueryRequestBase . getContext ( ) . put ( STRING , STRING ) ; } return org.springframework.data.solr.test.util.SolrQueryRequestBase ; }  <METHOD_END>
