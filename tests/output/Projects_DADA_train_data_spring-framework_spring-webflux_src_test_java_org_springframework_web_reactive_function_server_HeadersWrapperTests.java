<METHOD_START> @ Before public void void ( ) { ServerRequest.Headers = mock ( ServerRequest . ServerRequest .class ) ; ServerRequestWrapper.HeadersWrapper = new ServerRequestWrapper . ServerRequestWrapper ( ServerRequest.Headers ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.server.MediaType> = java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) ; when ( ServerRequest.Headers . accept ( ) ) . thenReturn ( java.util.List<org.springframework.web.reactive.function.server.MediaType> ) ; assertSame ( java.util.List<org.springframework.web.reactive.function.server.MediaType> , ServerRequestWrapper.HeadersWrapper . accept ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> = java.util.Collections . java.util.List<java.nio.charset.Charset> ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; when ( ServerRequest.Headers . acceptCharset ( ) ) . thenReturn ( java.util.List<java.nio.charset.Charset> ) ; assertSame ( java.util.List<java.nio.charset.Charset> , ServerRequestWrapper.HeadersWrapper . acceptCharset ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.OptionalLong java.util.OptionalLong = java.util.OptionalLong . java.util.OptionalLong ( NUMBER ) ; when ( ServerRequest.Headers . contentLength ( ) ) . thenReturn ( java.util.OptionalLong ) ; assertSame ( java.util.OptionalLong , ServerRequestWrapper.HeadersWrapper . contentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Optional<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.Optional<org.springframework.web.reactive.function.server.MediaType> = java.util.Optional . java.util.Optional ( MediaType . APPLICATION_JSON ) ; when ( ServerRequest.Headers . contentType ( ) ) . thenReturn ( java.util.Optional<org.springframework.web.reactive.function.server.MediaType> ) ; assertSame ( java.util.Optional<org.springframework.web.reactive.function.server.MediaType> , ServerRequestWrapper.HeadersWrapper . contentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.InetSocketAddress java.net.InetSocketAddress = java.net.InetSocketAddress . java.net.InetSocketAddress ( STRING , NUMBER ) ; when ( ServerRequest.Headers . host ( ) ) . thenReturn ( java.net.InetSocketAddress ) ; assertSame ( java.net.InetSocketAddress , ServerRequestWrapper.HeadersWrapper . host ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.reactive.function.server.HttpRange> < HttpRange > java.util.List<org.springframework.web.reactive.function.server.HttpRange> = java.util.Collections . java.util.List ( HttpRange . createByteRange ( NUMBER ) ) ; when ( ServerRequest.Headers . range ( ) ) . thenReturn ( java.util.List<org.springframework.web.reactive.function.server.HttpRange> ) ; assertSame ( java.util.List<org.springframework.web.reactive.function.server.HttpRange> , ServerRequestWrapper.HeadersWrapper . range ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; when ( ServerRequest.Headers . header ( java.lang.String ) ) . thenReturn ( java.util.List<java.lang.String> ) ; assertSame ( java.util.List<java.lang.String> , ServerRequestWrapper.HeadersWrapper . header ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders = new HttpHeaders ( ) ; when ( ServerRequest.Headers . asHttpHeaders ( ) ) . thenReturn ( org.springframework.web.reactive.function.server.HttpHeaders ) ; assertSame ( org.springframework.web.reactive.function.server.HttpHeaders , ServerRequestWrapper.HeadersWrapper . asHttpHeaders ( ) ) ; }  <METHOD_END>
