<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.listener.State<S,E> , State < S , E > org.springframework.statemachine.listener.State<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . stateChanged ( org.springframework.statemachine.listener.State<S,E> , org.springframework.statemachine.listener.State<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.listener.State<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . stateEntered ( org.springframework.statemachine.listener.State<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.listener.State<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . stateExited ( org.springframework.statemachine.listener.State<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < E > org.springframework.statemachine.listener.Message<E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . eventNotAccepted ( org.springframework.statemachine.listener.Message<E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.listener.Transition<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . transition ( org.springframework.statemachine.listener.Transition<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.listener.Transition<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . transitionStarted ( org.springframework.statemachine.listener.Transition<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.listener.Transition<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . transitionEnded ( org.springframework.statemachine.listener.Transition<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.listener.StateMachine<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . stateMachineStarted ( org.springframework.statemachine.listener.StateMachine<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.listener.StateMachine<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . stateMachineStopped ( org.springframework.statemachine.listener.StateMachine<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.listener.StateMachine<S,E> , java.lang.Exception java.lang.Exception ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . stateMachineError ( org.springframework.statemachine.listener.StateMachine<S,E> , java.lang.Exception ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . extendedStateChanged ( java.lang.Object , java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.listener.StateContext<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> < StateMachineListener < S , E > > java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . hasNext ( ) ;) { StateMachineListener < S , E > org.springframework.statemachine.listener.StateMachineListener<S,E> = java.util.Iterator<org.springframework.statemachine.listener.StateMachineListener<S,E>> . next ( ) ; try { org.springframework.statemachine.listener.StateMachineListener<S,E> . stateContext ( org.springframework.statemachine.listener.StateContext<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.listener.Log . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
