<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( java.lang.Object java.lang.Object ) throws java.lang.Exception { boolean boolean = java.lang.Object instanceof byte [] ; boolean boolean = java.lang.Object instanceof java.lang.String ; Assert . isTrue ( boolean || boolean , STRING ) ; if ( boolean ) { return this . java.util.Map<java.lang.String,?> ( ( byte [] ) java.lang.Object ) ; } else if ( boolean ) { return this . java.util.Map<java.lang.String,?> ( ( java.lang.String ) java.lang.Object ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( byte [] byte[] ) { java.lang.String java.lang.String ; try { java.lang.String = new java.lang.String ( byte[] , STRING ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { java.lang.String = new java.lang.String ( byte[] ) ; } return java.util.Map<java.lang.String,?> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.regex.Matcher java.util.regex.Matcher = this . java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( java.util.regex.Matcher . boolean ( ) ) { try { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; int int = java.lang.Integer . int ( java.lang.String ) ; int int = int & NUMBER ; int = int >> NUMBER ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , int ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; try { java.time.LocalDate java.time.LocalDate = this . java.time.format.DateTimeFormatter . java.time.LocalDate ( java.lang.String , java.time.LocalDate :: java.time.LocalDate ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; int int = java.util.Calendar . int ( java.util.Calendar . int ) ; int int = java.util.Calendar . int ( java.util.Calendar . int ) ; java.util.Calendar . void ( java.sql.Date . java.sql.Date ( java.time.LocalDate ) ) ; if ( int == NUMBER && java.util.Calendar . int ( java.util.Calendar . int ) == NUMBER ) { java.util.Calendar . void ( java.util.Calendar . int , int + NUMBER ) ; } else if ( int == NUMBER && java.util.Calendar . int ( java.util.Calendar . int ) == NUMBER ) { java.util.Calendar . void ( java.util.Calendar . int , int - NUMBER ) ; } else { java.util.Calendar . void ( java.util.Calendar . int , int ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Calendar . java.util.Date ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; if ( StringUtils . hasLength ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String , java.lang.Exception ) ; } java.util.Map<java.lang.String,java.lang.Object> . void ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; } } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
