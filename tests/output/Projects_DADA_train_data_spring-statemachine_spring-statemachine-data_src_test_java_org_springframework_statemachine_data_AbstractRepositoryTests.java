<METHOD_START> @ Before public void void ( ) { void ( ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext = org.springframework.statemachine.data.AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.statemachine.data.AnnotationConfigApplicationContext != null ) { org.springframework.statemachine.data.AnnotationConfigApplicationContext . close ( ) ; } org.springframework.statemachine.data.AnnotationConfigApplicationContext = null ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config2 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config3 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config4 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config5 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config6 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config6 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config6 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config6 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config8 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config8 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config8 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config8 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . build ( ) ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config9 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config10 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.data.State<java.lang.String,java.lang.String> = null ; java.util.Iterator<org.springframework.statemachine.data.State<java.lang.String,java.lang.String>> < State < java.lang.String , java.lang.String > > java.util.Iterator<org.springframework.statemachine.data.State<java.lang.String,java.lang.String>> = org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> . getStates ( ) . iterator ( ) ; while ( java.util.Iterator<org.springframework.statemachine.data.State<java.lang.String,java.lang.String>> . hasNext ( ) ) { State < java.lang.String , java.lang.String > org.springframework.statemachine.data.State<java.lang.String,java.lang.String> = java.util.Iterator<org.springframework.statemachine.data.State<java.lang.String,java.lang.String>> . next ( ) ; if ( org.springframework.statemachine.data.State<java.lang.String,java.lang.String> . getId ( ) . equals ( STRING ) ) { org.springframework.statemachine.data.State<java.lang.String,java.lang.String> = org.springframework.statemachine.data.State<java.lang.String,java.lang.String> ; break; } } assertThat ( org.springframework.statemachine.data.State<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.data.State<java.lang.String,java.lang.String> . getPseudoState ( ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.data.State<java.lang.String,java.lang.String> . getPseudoState ( ) . getKind ( ) , is ( PseudoStateKind . END ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config11 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config12 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config13 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.AbstractRepositoryTests.Config14 .class , org.springframework.statemachine.data.AbstractRepositoryTests.FactoryConfig .class ) ; org.springframework.statemachine.data.AnnotationConfigApplicationContext . refresh ( ) ; StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> = org.springframework.statemachine.data.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.data.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . expectVariable ( STRING , NUMBER ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.data.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.data.AbstractRepositoryTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.data.AbstractRepositoryTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.data.AbstractRepositoryTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.data.AbstractRepositoryTests.JunctionGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.data.AbstractRepositoryTests.JunctionGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.data.AbstractRepositoryTests.JunctionGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ( ) { StateMachineJackson2RepositoryPopulatorFactoryBean org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean = new StateMachineJackson2RepositoryPopulatorFactoryBean ( ) ; org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean . setResources ( new Resource [] { new ClassPathResource ( STRING ) } ) ; return org.springframework.statemachine.data.StateMachineJackson2RepositoryPopulatorFactoryBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.data.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.data.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.data.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new RepositoryStateMachineModelFactory ( org.springframework.statemachine.data.StateRepository<> , org.springframework.statemachine.data.TransitionRepository<> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateContext<java.lang.String,java.lang.String> ) { return ObjectUtils . nullSafeEquals ( java.lang.String , org.springframework.statemachine.data.StateContext<java.lang.String,java.lang.String> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateContext<java.lang.String,java.lang.String> ) { return ObjectUtils . nullSafeEquals ( java.lang.String , org.springframework.statemachine.data.StateContext<java.lang.String,java.lang.String> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.data.AnnotationConfigApplicationContext org.springframework.statemachine.data.AnnotationConfigApplicationContext ( ) { return null ; }  <METHOD_END>
