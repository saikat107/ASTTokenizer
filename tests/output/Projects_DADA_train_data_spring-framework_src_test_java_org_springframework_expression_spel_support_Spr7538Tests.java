<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.support.Spr7538Tests.AlwaysTrueReleaseStrategy org.springframework.expression.spel.support.Spr7538Tests.AlwaysTrueReleaseStrategy = new org.springframework.expression.spel.support.Spr7538Tests.AlwaysTrueReleaseStrategy ( ) ; BeanFactoryTypeConverter org.springframework.expression.spel.support.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; StandardEvaluationContext org.springframework.expression.spel.support.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.support.StandardEvaluationContext . setTypeConverter ( org.springframework.expression.spel.support.BeanFactoryTypeConverter ) ; java.util.List<org.springframework.expression.spel.support.Spr7538Tests.Foo> < org.springframework.expression.spel.support.Spr7538Tests.Foo > java.util.List<org.springframework.expression.spel.support.Spr7538Tests.Foo> = new java.util.ArrayList<org.springframework.expression.spel.support.Spr7538Tests.Foo> <> ( ) ; java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> = new java.util.ArrayList<org.springframework.expression.spel.support.TypeDescriptor> <> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.support.Spr7538Tests.AlwaysTrueReleaseStrategy .class . java.lang.reflect.Method ( STRING , java.util.List .class ) ; java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . add ( new TypeDescriptor ( new MethodParameter ( java.lang.reflect.Method , NUMBER ) ) ) ; java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> = new java.util.ArrayList<org.springframework.expression.spel.support.TypeDescriptor> <> ( ) ; java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . add ( TypeDescriptor . forObject ( java.util.List<org.springframework.expression.spel.support.Spr7538Tests.Foo> ) ) ; ReflectiveMethodResolver org.springframework.expression.spel.support.ReflectiveMethodResolver = new ReflectiveMethodResolver ( ) ; MethodExecutor org.springframework.expression.spel.support.MethodExecutor = org.springframework.expression.spel.support.ReflectiveMethodResolver . resolve ( org.springframework.expression.spel.support.StandardEvaluationContext , org.springframework.expression.spel.support.Spr7538Tests.AlwaysTrueReleaseStrategy , STRING , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.support.MethodExecutor . execute ( org.springframework.expression.spel.support.StandardEvaluationContext , org.springframework.expression.spel.support.Spr7538Tests.AlwaysTrueReleaseStrategy , java.util.List<org.springframework.expression.spel.support.Spr7538Tests.Foo> ) ; java.lang.System . java.io.PrintStream . void ( STRING + java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.util.List<org.springframework.expression.spel.support.Spr7538Tests.Foo> < org.springframework.expression.spel.support.Spr7538Tests.Foo > java.util.List<org.springframework.expression.spel.support.Spr7538Tests.Foo> ) { return true ; }  <METHOD_END>
