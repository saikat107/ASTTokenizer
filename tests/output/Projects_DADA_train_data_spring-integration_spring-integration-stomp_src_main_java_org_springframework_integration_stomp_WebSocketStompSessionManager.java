<METHOD_START> public void ( WebSocketStompClient org.springframework.integration.stomp.WebSocketStompClient , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { super( org.springframework.integration.stomp.WebSocketStompClient ); Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketHttpHeaders org.springframework.integration.stomp.WebSocketHttpHeaders ) { this . org.springframework.integration.stomp.WebSocketHttpHeaders = org.springframework.integration.stomp.WebSocketHttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> < StompSession > org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler ) { return ( ( WebSocketStompClient ) this . stompClient ) . connect ( this . java.lang.String , this . org.springframework.integration.stomp.WebSocketHttpHeaders , getConnectHeaders ( ) , org.springframework.integration.stomp.StompSessionHandler , this . java.lang.Object[] ) ; }  <METHOD_END>
