<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int int = findAvailablePort ( ) ; org.springframework.data.gemfire.repository.config.ProcessWrapper = run ( ServerProcess .class , java.lang.String . java.lang.String ( STRING , GEMFIRE_CACHE_SERVER_PORT_PROPERTY , int ) , getServerContextXmlFileLocation ( org.springframework.data.gemfire.repository.config.RepositoryClientRegionIntegrationTests .class ) ) ; waitForServerToStart ( DEFAULT_HOSTNAME , int ) ; java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY ) ; stop ( org.springframework.data.gemfire.repository.config.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.data.gemfire.repository.config.PersonRepository . count ( ) ) ; assertEquals ( NUMBER , ( ( java.util.Collection<org.springframework.data.gemfire.repository.config.Person> < Person > ) org.springframework.data.gemfire.repository.config.PersonRepository . findAll ( ) ) . int ( ) ) ; }  <METHOD_END>
