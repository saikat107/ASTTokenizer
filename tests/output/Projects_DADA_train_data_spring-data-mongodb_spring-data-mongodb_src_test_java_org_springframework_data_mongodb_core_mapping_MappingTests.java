<METHOD_START> @ Test public void void ( ) { GeneratedId org.springframework.data.mongodb.core.mapping.GeneratedId = new GeneratedId ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.GeneratedId ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.GeneratedId . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersonWithObjectId org.springframework.data.mongodb.core.mapping.PersonWithObjectId = new PersonWithObjectId ( NUMBER , STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonWithObjectId ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.PersonWithObjectId . getId ( ) ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> < PersonWithObjectId > java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , PersonWithObjectId .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> . get ( NUMBER ) . getSsn ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonCustomIdName org.springframework.data.mongodb.core.mapping.PersonCustomIdName = new PersonCustomIdName ( NUMBER , STRING , null ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonCustomIdName ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> < PersonCustomIdName > java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.PersonCustomIdName . getLastName ( ) ) ) , PersonCustomIdName .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . get ( NUMBER ) . getFirstName ( ) , is ( STRING ) ) ; PersonCustomIdName org.springframework.data.mongodb.core.mapping.PersonCustomIdName = new PersonCustomIdName ( NUMBER , STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonCustomIdName ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> < PersonCustomIdName > java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( STRING ) ) , PersonCustomIdName .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . size ( ) , is ( NUMBER ) ) ; assertNotNull ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . get ( NUMBER ) . getLastName ( ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . get ( NUMBER ) . getLastName ( ) , is ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> < PersonCustomIdName > java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . in ( STRING ) ) , PersonCustomIdName .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . size ( ) , is ( NUMBER ) ) ; assertNotNull ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . get ( NUMBER ) . getLastName ( ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomIdName> . get ( NUMBER ) . getLastName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonMapProperty org.springframework.data.mongodb.core.mapping.PersonMapProperty = new PersonMapProperty ( NUMBER , STRING , STRING ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.AccountPojo> < java.lang.String , AccountPojo > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.AccountPojo> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.mapping.AccountPojo> < java.lang.String , AccountPojo > ( ) ; AccountPojo org.springframework.data.mongodb.core.mapping.AccountPojo = new AccountPojo ( STRING , NUMBER ) ; AccountPojo org.springframework.data.mongodb.core.mapping.AccountPojo = new AccountPojo ( STRING , NUMBER ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.AccountPojo> . put ( STRING , org.springframework.data.mongodb.core.mapping.AccountPojo ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.AccountPojo> . put ( STRING , org.springframework.data.mongodb.core.mapping.AccountPojo ) ; org.springframework.data.mongodb.core.mapping.PersonMapProperty . setAccounts ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.AccountPojo> ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonMapProperty ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.PersonMapProperty . getId ( ) ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonMapProperty> < PersonMapProperty > java.util.List<org.springframework.data.mongodb.core.mapping.PersonMapProperty> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , PersonMapProperty .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonMapProperty> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonMapProperty> . get ( NUMBER ) . getAccounts ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonMapProperty> . get ( NUMBER ) . getAccounts ( ) . get ( STRING ) . getBalance ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { Address org.springframework.data.mongodb.core.mapping.Address = new Address ( ) ; org.springframework.data.mongodb.core.mapping.Address . setLines ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.mongodb.core.mapping.Address . setCity ( STRING ) ; org.springframework.data.mongodb.core.mapping.Address . setPostalCode ( NUMBER ) ; org.springframework.data.mongodb.core.mapping.Address . setCountry ( STRING ) ; Account org.springframework.data.mongodb.core.mapping.Account = new Account ( ) ; org.springframework.data.mongodb.core.mapping.Account . setBalance ( NUMBER ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.Account , STRING ) ; java.util.List<org.springframework.data.mongodb.core.mapping.Account> < Account > java.util.List<org.springframework.data.mongodb.core.mapping.Account> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.Account> < Account > ( ) ; java.util.List<org.springframework.data.mongodb.core.mapping.Account> . add ( org.springframework.data.mongodb.core.mapping.Account ) ; Person org.springframework.data.mongodb.core.mapping.Person = new Person ( NUMBER , STRING , STRING , NUMBER , org.springframework.data.mongodb.core.mapping.Address ) ; org.springframework.data.mongodb.core.mapping.Person . setAccounts ( java.util.List<org.springframework.data.mongodb.core.mapping.Account> ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.Person , STRING ) ; Account org.springframework.data.mongodb.core.mapping.Account = new Account ( ) ; org.springframework.data.mongodb.core.mapping.Account . setBalance ( NUMBER ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.Account , STRING ) ; java.util.List<org.springframework.data.mongodb.core.mapping.Account> . add ( org.springframework.data.mongodb.core.mapping.Account ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . save ( org.springframework.data.mongodb.core.mapping.Person , STRING ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.Person . getId ( ) ) ; java.util.List<org.springframework.data.mongodb.core.mapping.Person> < Person > java.util.List<org.springframework.data.mongodb.core.mapping.Person> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , Person .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.Person> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.Person> . get ( NUMBER ) . getAddress ( ) . getCountry ( ) , is ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.Person> . get ( NUMBER ) . getAccounts ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DuplicateKeyException .class ) @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { Address org.springframework.data.mongodb.core.mapping.Address = new Address ( ) ; org.springframework.data.mongodb.core.mapping.Address . setLines ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.mongodb.core.mapping.Address . setCity ( STRING ) ; org.springframework.data.mongodb.core.mapping.Address . setPostalCode ( NUMBER ) ; org.springframework.data.mongodb.core.mapping.Address . setCountry ( STRING ) ; Person org.springframework.data.mongodb.core.mapping.Person = new Person ( NUMBER , STRING , STRING , NUMBER , org.springframework.data.mongodb.core.mapping.Address ) ; Person org.springframework.data.mongodb.core.mapping.Person = new Person ( NUMBER , STRING , STRING , NUMBER , org.springframework.data.mongodb.core.mapping.Address ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insertAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.mapping.Person , org.springframework.data.mongodb.core.mapping.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.mapping.BasePerson> < BasePerson > java.util.List<org.springframework.data.mongodb.core.mapping.BasePerson> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.BasePerson> < BasePerson > ( ) ; java.util.List<org.springframework.data.mongodb.core.mapping.BasePerson> . add ( new PersonCustomCollection1 ( NUMBER , STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.mapping.BasePerson> . add ( new PersonCustomCollection2 ( NUMBER , STRING , STRING ) ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insertAll ( java.util.List<org.springframework.data.mongodb.core.mapping.BasePerson> ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomCollection1> < PersonCustomCollection1 > java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomCollection1> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , PersonCustomCollection1 .class , STRING ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomCollection2> < PersonCustomCollection2 > java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomCollection2> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , PersonCustomCollection2 .class , STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomCollection1> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonCustomCollection2> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Location org.springframework.data.mongodb.core.mapping.Location = new Location ( new double [] { NUMBER , NUMBER } , new int [] { NUMBER , NUMBER , NUMBER , NUMBER } , new float [] { NUMBER , NUMBER } ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.Location ) ; java.util.List<org.springframework.data.mongodb.core.mapping.Location> < Location > java.util.List<org.springframework.data.mongodb.core.mapping.Location> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.Location . getId ( ) ) ) , Location .class , STRING ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.Location> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomCollectionWithIndex org.springframework.data.mongodb.core.mapping.CustomCollectionWithIndex = new CustomCollectionWithIndex ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.CustomCollectionWithIndex ) ; assertTrue ( org.springframework.data.mongodb.core.mapping.MongoOperations . execute ( STRING , new CollectionCallback < java.lang.Boolean > ( ) { public java.lang.Boolean java.lang.Boolean ( MongoCollection < Document > org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> ) throws org.springframework.data.mongodb.core.mapping.MongoException , org.springframework.data.mongodb.core.mapping.DataAccessException { java.util.List<org.springframework.data.mongodb.core.mapping.Document> < Document > java.util.List<org.springframework.data.mongodb.core.mapping.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.Document> < Document > ( ) ; org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) ; for ( Document org.springframework.data.mongodb.core.mapping.Document : java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) { if ( org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) != null && org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) instanceof java.lang.String && ( ( java.lang.String ) org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) ) . boolean ( STRING ) ) { return true ; } } return false ; } } ) ) ; DetectedCollectionWithIndex org.springframework.data.mongodb.core.mapping.DetectedCollectionWithIndex = new DetectedCollectionWithIndex ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.DetectedCollectionWithIndex ) ; assertTrue ( org.springframework.data.mongodb.core.mapping.MongoOperations . execute ( MongoCollectionUtils . getPreferredCollectionName ( DetectedCollectionWithIndex .class ) , new CollectionCallback < java.lang.Boolean > ( ) { public java.lang.Boolean java.lang.Boolean ( MongoCollection < Document > org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> )							throws org.springframework.data.mongodb.core.mapping.MongoException , org.springframework.data.mongodb.core.mapping.DataAccessException { java.util.List<org.springframework.data.mongodb.core.mapping.Document> < Document > java.util.List<org.springframework.data.mongodb.core.mapping.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.Document> < Document > ( ) ; org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) ; for ( Document org.springframework.data.mongodb.core.mapping.Document : java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) { if ( org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) != null && org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) instanceof java.lang.String && ( ( java.lang.String ) org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) ) . boolean ( STRING ) ) { return true ; } } return false ; } } ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( MongoCollection < Document > org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> ) throws org.springframework.data.mongodb.core.mapping.MongoException , org.springframework.data.mongodb.core.mapping.DataAccessException { java.util.List<org.springframework.data.mongodb.core.mapping.Document> < Document > java.util.List<org.springframework.data.mongodb.core.mapping.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.Document> < Document > ( ) ; org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) ; for ( Document org.springframework.data.mongodb.core.mapping.Document : java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) { if ( org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) != null && org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) instanceof java.lang.String && ( ( java.lang.String ) org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) ) . boolean ( STRING ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( MongoCollection < Document > org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> )							throws org.springframework.data.mongodb.core.mapping.MongoException , org.springframework.data.mongodb.core.mapping.DataAccessException { java.util.List<org.springframework.data.mongodb.core.mapping.Document> < Document > java.util.List<org.springframework.data.mongodb.core.mapping.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.Document> < Document > ( ) ; org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) ; for ( Document org.springframework.data.mongodb.core.mapping.Document : java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) { if ( org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) != null && org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) instanceof java.lang.String && ( ( java.lang.String ) org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) ) . boolean ( STRING ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] [] java.lang.String[][] = new java.lang.String [] [] { new java.lang.String [] { STRING , STRING , STRING , STRING } , new java.lang.String [] { STRING , STRING , STRING , STRING } , new java.lang.String [] { STRING , STRING , STRING , STRING } } ; PersonMultiDimArrays org.springframework.data.mongodb.core.mapping.PersonMultiDimArrays = new PersonMultiDimArrays ( NUMBER , STRING , STRING , java.lang.String[][] ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonMultiDimArrays ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiDimArrays> < PersonMultiDimArrays > java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiDimArrays> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , PersonMultiDimArrays .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiDimArrays> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiDimArrays> . get ( NUMBER ) . getGrid ( ) . length , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> = new java.util.ArrayList<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > ( ) ; java.util.ArrayList<java.lang.String> < java.lang.String > java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.ArrayList<java.lang.String> . boolean ( STRING ) ; java.util.ArrayList<java.lang.String> . boolean ( STRING ) ; java.util.ArrayList<java.lang.String> . boolean ( STRING ) ; java.util.ArrayList<java.lang.String> . boolean ( STRING ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.ArrayList<java.lang.String> ) ; PersonMultiCollection org.springframework.data.mongodb.core.mapping.PersonMultiCollection = new PersonMultiCollection ( NUMBER , STRING , STRING , java.util.List<java.util.List<java.lang.String>> ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonMultiCollection ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiCollection> < PersonMultiCollection > java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiCollection> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , PersonMultiCollection .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiCollection> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonMultiCollection> . get ( NUMBER ) . getGrid ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { double [] double[] = new double [] { NUMBER , - NUMBER } ; GeoLocation org.springframework.data.mongodb.core.mapping.GeoLocation = new GeoLocation ( double[] ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.GeoLocation ) ; PersonWithDbRef org.springframework.data.mongodb.core.mapping.PersonWithDbRef = new PersonWithDbRef ( NUMBER , STRING , STRING , org.springframework.data.mongodb.core.mapping.GeoLocation ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonWithDbRef ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithDbRef> < PersonWithDbRef > java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithDbRef> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( Criteria . where ( STRING ) . is ( NUMBER ) ) , PersonWithDbRef .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithDbRef> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithDbRef> . get ( NUMBER ) . getHome ( ) . getLocation ( ) , is ( double[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonNullProperties org.springframework.data.mongodb.core.mapping.PersonNullProperties = new PersonNullProperties ( ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonNullProperties ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.PersonNullProperties . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { Address org.springframework.data.mongodb.core.mapping.Address = new Address ( ) ; org.springframework.data.mongodb.core.mapping.Address . setLines ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.mongodb.core.mapping.Address . setCity ( STRING ) ; org.springframework.data.mongodb.core.mapping.Address . setPostalCode ( NUMBER ) ; org.springframework.data.mongodb.core.mapping.Address . setCountry ( STRING ) ; Person org.springframework.data.mongodb.core.mapping.Person = new Person ( NUMBER , STRING , STRING , NUMBER , org.springframework.data.mongodb.core.mapping.Address ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.Person ) ; org.springframework.data.mongodb.core.mapping.Address . setCity ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . updateFirst ( query ( where ( STRING ) . is ( NUMBER ) ) , update ( STRING , org.springframework.data.mongodb.core.mapping.Address ) , Person .class ) ; Person org.springframework.data.mongodb.core.mapping.Person = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.Person . getAddress ( ) . getCity ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Address org.springframework.data.mongodb.core.mapping.Address = new Address ( ) ; org.springframework.data.mongodb.core.mapping.Address . setLines ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.mongodb.core.mapping.Address . setCity ( STRING ) ; org.springframework.data.mongodb.core.mapping.Address . setPostalCode ( NUMBER ) ; org.springframework.data.mongodb.core.mapping.Address . setCountry ( STRING ) ; Person org.springframework.data.mongodb.core.mapping.Person = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , Person .class ) ; assertNull ( org.springframework.data.mongodb.core.mapping.Person ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . upsert ( query ( where ( STRING ) . is ( NUMBER ) . and ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) ) , update ( STRING , org.springframework.data.mongodb.core.mapping.Address ) , Person .class ) ; org.springframework.data.mongodb.core.mapping.Person = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.Person . getAddress ( ) . getCity ( ) , is ( STRING ) ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . dropCollection ( Person .class ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . upsert ( query ( where ( STRING ) . is ( NUMBER ) . and ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) ) , update ( STRING , org.springframework.data.mongodb.core.mapping.Address ) , STRING ) ; org.springframework.data.mongodb.core.mapping.Person = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.Person . getAddress ( ) . getCity ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithObjectId org.springframework.data.mongodb.core.mapping.PersonWithObjectId = new PersonWithObjectId ( NUMBER , STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . save ( org.springframework.data.mongodb.core.mapping.PersonWithObjectId ) ; PersonWithObjectId org.springframework.data.mongodb.core.mapping.PersonWithObjectId = new PersonWithObjectId ( NUMBER , STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . save ( org.springframework.data.mongodb.core.mapping.PersonWithObjectId ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> < PersonWithObjectId > java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( new Query ( new Criteria ( ) . orOperator ( where ( STRING ) . is ( NUMBER ) , where ( STRING ) . is ( NUMBER ) ) ) , PersonWithObjectId .class ) ; assertNotNull ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.mapping.PersonWithObjectId> . get ( NUMBER ) . getSsn ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PrimitiveId org.springframework.data.mongodb.core.mapping.PrimitiveId = new PrimitiveId ( NUMBER ) ; org.springframework.data.mongodb.core.mapping.PrimitiveId . setText ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . save ( org.springframework.data.mongodb.core.mapping.PrimitiveId ) ; PrimitiveId org.springframework.data.mongodb.core.mapping.PrimitiveId = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , PrimitiveId .class ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.PrimitiveId ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonPojoIntId org.springframework.data.mongodb.core.mapping.PersonPojoIntId = new PersonPojoIntId ( NUMBER , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonPojoIntId ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . updateFirst ( query ( where ( STRING ) . is ( NUMBER ) ) , update ( STRING , STRING ) , PersonPojoIntId .class ) ; PersonPojoIntId org.springframework.data.mongodb.core.mapping.PersonPojoIntId = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , PersonPojoIntId .class ) ; assertEquals ( STRING , org.springframework.data.mongodb.core.mapping.PersonPojoIntId . getText ( ) ) ; org.springframework.data.mongodb.core.mapping.PersonPojoIntId . setText ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . save ( org.springframework.data.mongodb.core.mapping.PersonPojoIntId ) ; PersonPojoIntId org.springframework.data.mongodb.core.mapping.PersonPojoIntId = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , PersonPojoIntId .class ) ; assertEquals ( STRING , org.springframework.data.mongodb.core.mapping.PersonPojoIntId . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonPojoLongId org.springframework.data.mongodb.core.mapping.PersonPojoLongId = new PersonPojoLongId ( NUMBER , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonPojoLongId ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . updateFirst ( query ( where ( STRING ) . is ( NUMBER ) ) , update ( STRING , STRING ) , PersonPojoLongId .class ) ; PersonPojoLongId org.springframework.data.mongodb.core.mapping.PersonPojoLongId = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , PersonPojoLongId .class ) ; assertEquals ( STRING , org.springframework.data.mongodb.core.mapping.PersonPojoLongId . getText ( ) ) ; org.springframework.data.mongodb.core.mapping.PersonPojoLongId . setText ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . save ( org.springframework.data.mongodb.core.mapping.PersonPojoLongId ) ; PersonPojoLongId org.springframework.data.mongodb.core.mapping.PersonPojoLongId = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( NUMBER ) ) , PersonPojoLongId .class ) ; assertEquals ( STRING , org.springframework.data.mongodb.core.mapping.PersonPojoLongId . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonPojoStringId org.springframework.data.mongodb.core.mapping.PersonPojoStringId = new PersonPojoStringId ( STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonPojoStringId ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . updateFirst ( query ( where ( STRING ) . is ( STRING ) ) , update ( STRING , STRING ) , PersonPojoStringId .class ) ; PersonPojoStringId org.springframework.data.mongodb.core.mapping.PersonPojoStringId = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( STRING ) ) , PersonPojoStringId .class ) ; assertEquals ( STRING , org.springframework.data.mongodb.core.mapping.PersonPojoStringId . getText ( ) ) ; org.springframework.data.mongodb.core.mapping.PersonPojoStringId . setText ( STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . save ( org.springframework.data.mongodb.core.mapping.PersonPojoStringId ) ; PersonPojoStringId org.springframework.data.mongodb.core.mapping.PersonPojoStringId = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( STRING ) ) , PersonPojoStringId .class ) ; assertEquals ( STRING , org.springframework.data.mongodb.core.mapping.PersonPojoStringId . getText ( ) ) ; PersonPojoStringId org.springframework.data.mongodb.core.mapping.PersonPojoStringId = new PersonPojoStringId ( STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonPojoStringId ) ; Query org.springframework.data.mongodb.core.mapping.Query = query ( where ( STRING ) . in ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.mapping.Query . with ( new Sort ( Direction . ASC , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.mapping.PersonPojoStringId> < PersonPojoStringId > java.util.List<org.springframework.data.mongodb.core.mapping.PersonPojoStringId> = org.springframework.data.mongodb.core.mapping.MongoOperations . find ( org.springframework.data.mongodb.core.mapping.Query , PersonPojoStringId .class ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.mongodb.core.mapping.PersonPojoStringId> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonPojoLongId org.springframework.data.mongodb.core.mapping.PersonPojoLongId = new PersonPojoLongId ( NUMBER , STRING ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonPojoLongId ) ; PersonWithLongDBRef org.springframework.data.mongodb.core.mapping.PersonWithLongDBRef = new PersonWithLongDBRef ( NUMBER , STRING , STRING , org.springframework.data.mongodb.core.mapping.PersonPojoLongId ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.PersonWithLongDBRef ) ; Query org.springframework.data.mongodb.core.mapping.Query = query ( where ( STRING ) . is ( NUMBER ) ) ; PersonWithLongDBRef org.springframework.data.mongodb.core.mapping.PersonWithLongDBRef = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( org.springframework.data.mongodb.core.mapping.Query , PersonWithLongDBRef .class ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.PersonWithLongDBRef ) ; assertNotNull ( org.springframework.data.mongodb.core.mapping.PersonWithLongDBRef . getPersonPojoLongId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapping.PersonWithLongDBRef . getPersonPojoLongId ( ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.MongoOperations . dropCollection ( org.springframework.data.mongodb.core.mapping.MappingTests.Item .class ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . dropCollection ( org.springframework.data.mongodb.core.mapping.MappingTests.Container .class ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Item org.springframework.data.mongodb.core.mapping.MappingTests.Item = new org.springframework.data.mongodb.core.mapping.MappingTests.Item ( ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Item org.springframework.data.mongodb.core.mapping.MappingTests.Item = new org.springframework.data.mongodb.core.mapping.MappingTests.Item ( ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.MappingTests.Item ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.MappingTests.Item ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container org.springframework.data.mongodb.core.mapping.MappingTests.Container = new org.springframework.data.mongodb.core.mapping.MappingTests.Container ( ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container . org.springframework.data.mongodb.core.mapping.MappingTests.Item = org.springframework.data.mongodb.core.mapping.MappingTests.Item ; org.springframework.data.mongodb.core.mapping.MappingTests.Container . java.util.List<org.springframework.data.mongodb.core.mapping.MappingTests.Item> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.mapping.MappingTests.Item> ( org.springframework.data.mongodb.core.mapping.MappingTests.Item ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.MappingTests.Container ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container org.springframework.data.mongodb.core.mapping.MappingTests.Container = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.MappingTests.Container . java.lang.String ) ) , org.springframework.data.mongodb.core.mapping.MappingTests.Container .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container . org.springframework.data.mongodb.core.mapping.MappingTests.Item . java.lang.String , is ( org.springframework.data.mongodb.core.mapping.MappingTests.Item . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container . java.util.List<org.springframework.data.mongodb.core.mapping.MappingTests.Item> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container . java.util.List<org.springframework.data.mongodb.core.mapping.MappingTests.Item> . org.springframework.data.mongodb.core.mapping.MappingTests.Item ( NUMBER ) . java.lang.String , is ( org.springframework.data.mongodb.core.mapping.MappingTests.Item . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.MongoOperations . dropCollection ( org.springframework.data.mongodb.core.mapping.MappingTests.Item .class ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . dropCollection ( org.springframework.data.mongodb.core.mapping.MappingTests.Container .class ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Item org.springframework.data.mongodb.core.mapping.MappingTests.Item = new org.springframework.data.mongodb.core.mapping.MappingTests.Item ( ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.MappingTests.Item ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container org.springframework.data.mongodb.core.mapping.MappingTests.Container = new org.springframework.data.mongodb.core.mapping.MappingTests.Container ( STRING ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container . org.springframework.data.mongodb.core.mapping.MappingTests.Item = org.springframework.data.mongodb.core.mapping.MappingTests.Item ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.MappingTests.Container ) ; Query org.springframework.data.mongodb.core.mapping.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.mapping.Query . fields ( ) . exclude ( STRING ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container org.springframework.data.mongodb.core.mapping.MappingTests.Container = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( org.springframework.data.mongodb.core.mapping.Query , org.springframework.data.mongodb.core.mapping.MappingTests.Container .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container . org.springframework.data.mongodb.core.mapping.MappingTests.Item , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.MongoOperations . dropCollection ( org.springframework.data.mongodb.core.mapping.MappingTests.IterableItem .class ) ; org.springframework.data.mongodb.core.mapping.MongoOperations . dropCollection ( org.springframework.data.mongodb.core.mapping.MappingTests.Container .class ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Item org.springframework.data.mongodb.core.mapping.MappingTests.Item = new org.springframework.data.mongodb.core.mapping.MappingTests.IterableItem ( ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Item . java.lang.String = STRING ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.MappingTests.Item ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container org.springframework.data.mongodb.core.mapping.MappingTests.Container = new org.springframework.data.mongodb.core.mapping.MappingTests.Container ( STRING ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container . org.springframework.data.mongodb.core.mapping.MappingTests.Item = org.springframework.data.mongodb.core.mapping.MappingTests.Item ; org.springframework.data.mongodb.core.mapping.MongoOperations . insert ( org.springframework.data.mongodb.core.mapping.MappingTests.Container ) ; Query org.springframework.data.mongodb.core.mapping.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.mapping.MappingTests.Container org.springframework.data.mongodb.core.mapping.MappingTests.Container = org.springframework.data.mongodb.core.mapping.MongoOperations . findOne ( org.springframework.data.mongodb.core.mapping.Query , org.springframework.data.mongodb.core.mapping.MappingTests.Container .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container . org.springframework.data.mongodb.core.mapping.MappingTests.Item , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MappingTests.Container . org.springframework.data.mongodb.core.mapping.MappingTests.Item . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { java.lang.String = new ObjectId ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.lang.String = new ObjectId ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.mongodb.core.mapping.MappingTests.ItemData> < org.springframework.data.mongodb.core.mapping.MappingTests.ItemData > java.util.Iterator<org.springframework.data.mongodb.core.mapping.MappingTests.ItemData> ( ) { return java.util.List<org.springframework.data.mongodb.core.mapping.MappingTests.ItemData> . java.util.Iterator<org.springframework.data.mongodb.core.mapping.MappingTests.ItemData> ( ) ; }  <METHOD_END>
