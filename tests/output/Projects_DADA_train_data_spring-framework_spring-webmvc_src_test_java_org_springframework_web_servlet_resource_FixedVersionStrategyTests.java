<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.resource.FixedVersionStrategy = new FixedVersionStrategy ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new FixedVersionStrategy ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( this . java.lang.String , this . org.springframework.web.servlet.resource.FixedVersionStrategy . extractVersion ( this . java.lang.String + STRING + this . java.lang.String ) ) ; assertNull ( this . org.springframework.web.servlet.resource.FixedVersionStrategy . extractVersion ( this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING + this . java.lang.String , this . org.springframework.web.servlet.resource.FixedVersionStrategy . removeVersion ( this . java.lang.String + STRING + this . java.lang.String , this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( this . java.lang.String + STRING + this . java.lang.String , this . org.springframework.web.servlet.resource.FixedVersionStrategy . addVersion ( STRING + this . java.lang.String , this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + this . java.lang.String ; assertEquals ( java.lang.String , this . org.springframework.web.servlet.resource.FixedVersionStrategy . addVersion ( java.lang.String , this . java.lang.String ) ) ; }  <METHOD_END>
