<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.repositories.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.repositories.PlatformTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.repositories.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.repositories.TransactionStatus ) { Movie org.springframework.data.neo4j.repositories.Movie = new Movie ( STRING ) ; org.springframework.data.neo4j.repositories.MovieRepository . save ( org.springframework.data.neo4j.repositories.Movie ) ; assertEquals ( NUMBER , IterableUtils . count ( org.springframework.data.neo4j.repositories.MovieRepository . findAll ( ) ) ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.repositories.TransactionStatus ) { Movie org.springframework.data.neo4j.repositories.Movie = new Movie ( STRING ) ; org.springframework.data.neo4j.repositories.MovieRepository . save ( org.springframework.data.neo4j.repositories.Movie ) ; assertEquals ( NUMBER , IterableUtils . count ( org.springframework.data.neo4j.repositories.MovieRepository . findAll ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repositories.PlatformTransactionManager org.springframework.data.neo4j.repositories.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.repositories.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repositories.SessionFactory org.springframework.data.neo4j.repositories.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
