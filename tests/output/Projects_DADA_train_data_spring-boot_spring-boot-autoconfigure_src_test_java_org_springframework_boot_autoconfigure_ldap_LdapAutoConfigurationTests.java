<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; ContextSource org.springframework.boot.autoconfigure.ldap.ContextSource = this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . getBean ( ContextSource .class ) ; java.lang.String [] java.lang.String[] = ( java.lang.String [] ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.ldap.ContextSource , STRING ) ; assertThat ( java.lang.String[] ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; ContextSource org.springframework.boot.autoconfigure.ldap.ContextSource = this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . getBean ( ContextSource .class ) ; java.lang.String [] java.lang.String[] = ( java.lang.String [] ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.ldap.ContextSource , STRING ) ; assertThat ( java.lang.String[] ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; ContextSource org.springframework.boot.autoconfigure.ldap.ContextSource = this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . getBean ( ContextSource .class ) ; LdapProperties org.springframework.boot.autoconfigure.ldap.LdapProperties = this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . getBean ( LdapProperties .class ) ; java.lang.String [] java.lang.String[] = ( java.lang.String [] ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.ldap.ContextSource , STRING ) ; assertThat ( java.lang.String[] ) . containsExactly ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.LdapProperties . getUrls ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING , STRING + STRING ) ; LdapProperties org.springframework.boot.autoconfigure.ldap.LdapProperties = this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . getBean ( LdapProperties .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.LdapProperties . getBaseEnvironment ( ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . register ( LdapAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.ldap.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
