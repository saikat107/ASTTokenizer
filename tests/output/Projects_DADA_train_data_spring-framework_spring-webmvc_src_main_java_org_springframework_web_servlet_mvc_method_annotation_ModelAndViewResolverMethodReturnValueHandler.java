<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> < ModelAndViewResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { if ( this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> != null ) { for ( ModelAndViewResolver org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver : this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getContainingClass ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getMethod ( ) ; ExtendedModelMap org.springframework.web.servlet.mvc.method.annotation.ExtendedModelMap = ( ExtendedModelMap ) org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver . resolveModelAndView ( java.lang.reflect.Method , java.lang.Class<> , java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.ExtendedModelMap , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView != ModelAndViewResolver . UNRESOLVED ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . addAllAttributes ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setViewName ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getViewName ( ) ) ; if ( ! org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isReference ( ) ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setView ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getView ( ) ) ; } return; } } } if ( this . org.springframework.web.servlet.mvc.method.annotation.ModelAttributeMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) { this . org.springframework.web.servlet.mvc.method.annotation.ModelAttributeMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; } else { throw new java.lang.UnsupportedOperationException ( STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getMethod ( ) ) ; } }  <METHOD_END>
