<METHOD_START> public org.springframework.data.rest.webmvc.json.patch.Patch org.springframework.data.rest.webmvc.json.patch.Patch ( JsonNode org.springframework.data.rest.webmvc.json.patch.JsonNode ) { if ( ! ( org.springframework.data.rest.webmvc.json.patch.JsonNode instanceof ArrayNode ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } ArrayNode org.springframework.data.rest.webmvc.json.patch.ArrayNode = ( ArrayNode ) org.springframework.data.rest.webmvc.json.patch.JsonNode ; java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> < PatchOperation > java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.patch.PatchOperation> < PatchOperation > ( org.springframework.data.rest.webmvc.json.patch.ArrayNode . size ( ) ) ; for ( java.util.Iterator<org.springframework.data.rest.webmvc.json.patch.JsonNode> < JsonNode > java.util.Iterator<org.springframework.data.rest.webmvc.json.patch.JsonNode> = org.springframework.data.rest.webmvc.json.patch.ArrayNode . elements ( ) ; java.util.Iterator<org.springframework.data.rest.webmvc.json.patch.JsonNode> . hasNext ( ) ;) { JsonNode org.springframework.data.rest.webmvc.json.patch.JsonNode = java.util.Iterator<org.springframework.data.rest.webmvc.json.patch.JsonNode> . next ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.patch.JsonNode . get ( STRING ) . textValue ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.patch.JsonNode . get ( STRING ) . textValue ( ) ; JsonNode org.springframework.data.rest.webmvc.json.patch.JsonNode = org.springframework.data.rest.webmvc.json.patch.JsonNode . get ( STRING ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.data.rest.webmvc.json.patch.JsonNode ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.patch.JsonNode . has ( STRING ) ? org.springframework.data.rest.webmvc.json.patch.JsonNode . get ( STRING ) . textValue ( ) : null ; if ( java.lang.String . boolean ( STRING ) ) { java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> . add ( new TestOperation ( java.lang.String , java.lang.Object ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> . add ( new ReplaceOperation ( java.lang.String , java.lang.Object ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> . add ( new RemoveOperation ( java.lang.String ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> . add ( new AddOperation ( java.lang.String , java.lang.Object ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> . add ( new CopyOperation ( java.lang.String , java.lang.String ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> . add ( new MoveOperation ( java.lang.String , java.lang.String ) ) ; } else { throw new PatchException ( STRING + java.lang.String ) ; } } return new Patch ( java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.json.patch.JsonNode org.springframework.data.rest.webmvc.json.patch.JsonNode ( Patch org.springframework.data.rest.webmvc.json.patch.Patch ) { java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> < PatchOperation > java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> = org.springframework.data.rest.webmvc.json.patch.Patch . getOperations ( ) ; JsonNodeFactory org.springframework.data.rest.webmvc.json.patch.JsonNodeFactory = JsonNodeFactory . instance ; ArrayNode org.springframework.data.rest.webmvc.json.patch.ArrayNode = org.springframework.data.rest.webmvc.json.patch.JsonNodeFactory . arrayNode ( ) ; for ( PatchOperation org.springframework.data.rest.webmvc.json.patch.PatchOperation : java.util.List<org.springframework.data.rest.webmvc.json.patch.PatchOperation> ) { ObjectNode org.springframework.data.rest.webmvc.json.patch.ObjectNode = org.springframework.data.rest.webmvc.json.patch.JsonNodeFactory . objectNode ( ) ; org.springframework.data.rest.webmvc.json.patch.ObjectNode . set ( STRING , org.springframework.data.rest.webmvc.json.patch.JsonNodeFactory . textNode ( org.springframework.data.rest.webmvc.json.patch.PatchOperation . getOp ( ) ) ) ; org.springframework.data.rest.webmvc.json.patch.ObjectNode . set ( STRING , org.springframework.data.rest.webmvc.json.patch.JsonNodeFactory . textNode ( org.springframework.data.rest.webmvc.json.patch.PatchOperation . getPath ( ) ) ) ; if ( org.springframework.data.rest.webmvc.json.patch.PatchOperation instanceof FromOperation ) { FromOperation org.springframework.data.rest.webmvc.json.patch.FromOperation = ( FromOperation ) org.springframework.data.rest.webmvc.json.patch.PatchOperation ; org.springframework.data.rest.webmvc.json.patch.ObjectNode . set ( STRING , org.springframework.data.rest.webmvc.json.patch.JsonNodeFactory . textNode ( org.springframework.data.rest.webmvc.json.patch.FromOperation . getFrom ( ) ) ) ; } java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.json.patch.PatchOperation . getValue ( ) ; if ( java.lang.Object != null ) { org.springframework.data.rest.webmvc.json.patch.ObjectNode . set ( STRING , org.springframework.data.rest.webmvc.json.patch.ObjectMapper . valueToTree ( java.lang.Object ) ) ; } org.springframework.data.rest.webmvc.json.patch.ArrayNode . add ( org.springframework.data.rest.webmvc.json.patch.ObjectNode ) ; } return org.springframework.data.rest.webmvc.json.patch.ArrayNode ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String , JsonNode org.springframework.data.rest.webmvc.json.patch.JsonNode ) { if ( org.springframework.data.rest.webmvc.json.patch.JsonNode == null || org.springframework.data.rest.webmvc.json.patch.JsonNode . isNull ( ) ) { return null ; } else if ( org.springframework.data.rest.webmvc.json.patch.JsonNode . isTextual ( ) ) { return org.springframework.data.rest.webmvc.json.patch.JsonNode . asText ( ) ; } else if ( org.springframework.data.rest.webmvc.json.patch.JsonNode . isFloatingPointNumber ( ) ) { return org.springframework.data.rest.webmvc.json.patch.JsonNode . asDouble ( ) ; } else if ( org.springframework.data.rest.webmvc.json.patch.JsonNode . isBoolean ( ) ) { return org.springframework.data.rest.webmvc.json.patch.JsonNode . asBoolean ( ) ; } else if ( org.springframework.data.rest.webmvc.json.patch.JsonNode . isInt ( ) ) { return org.springframework.data.rest.webmvc.json.patch.JsonNode . asInt ( ) ; } else if ( org.springframework.data.rest.webmvc.json.patch.JsonNode . isLong ( ) ) { return org.springframework.data.rest.webmvc.json.patch.JsonNode . asLong ( ) ; } else if ( org.springframework.data.rest.webmvc.json.patch.JsonNode . isObject ( ) || ( org.springframework.data.rest.webmvc.json.patch.JsonNode . isArray ( ) ) ) { return new JsonLateObjectEvaluator ( org.springframework.data.rest.webmvc.json.patch.ObjectMapper , org.springframework.data.rest.webmvc.json.patch.JsonNode ) ; } throw new PatchException ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.data.rest.webmvc.json.patch.JsonNode ) ) ; }  <METHOD_END>
