<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { PublishSubscribeChannel org.springframework.integration.channel.PublishSubscribeChannel = new PublishSubscribeChannel ( ) ; org.springframework.integration.channel.PublishSubscribeChannel . subscribe ( message -> { throw new UnsupportedOperationException ( STRING ) ; } ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.channel.PublishSubscribeChannel . send ( org.springframework.integration.channel.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.integration.channel.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.integration.channel.StaticApplicationContext . registerSingleton ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME , DirectChannel .class ) ; org.springframework.integration.channel.StaticApplicationContext . refresh ( ) ; DirectChannel org.springframework.integration.channel.DirectChannel = ( DirectChannel ) org.springframework.integration.channel.StaticApplicationContext . getBean ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) ; TaskExecutor org.springframework.integration.channel.TaskExecutor = new SimpleAsyncTaskExecutor ( ) ; PublishSubscribeChannel org.springframework.integration.channel.PublishSubscribeChannel = new PublishSubscribeChannel ( org.springframework.integration.channel.TaskExecutor ) ; org.springframework.integration.channel.PublishSubscribeChannel . setBeanFactory ( org.springframework.integration.channel.StaticApplicationContext ) ; org.springframework.integration.channel.PublishSubscribeChannel . afterPropertiesSet ( ) ; org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler = new org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler ( ) ; org.springframework.integration.channel.DirectChannel . subscribe ( org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler ) ; org.springframework.integration.channel.PublishSubscribeChannel . subscribe ( message -> { throw new MessagingException ( message , new UnsupportedOperationException ( STRING ) ) ; } ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.channel.PublishSubscribeChannel . send ( org.springframework.integration.channel.Message<> ) ; this . void ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler . org.springframework.integration.channel.Message<> ; assertEquals ( MessagingException .class , org.springframework.integration.channel.Message<> . getPayload ( ) . getClass ( ) ) ; MessagingException org.springframework.integration.channel.MessagingException = ( MessagingException ) org.springframework.integration.channel.Message<> . getPayload ( ) ; assertEquals ( java.lang.UnsupportedOperationException .class , org.springframework.integration.channel.MessagingException . getCause ( ) . getClass ( ) ) ; assertSame ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.MessagingException . getFailedMessage ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.integration.channel.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.integration.channel.StaticApplicationContext . registerSingleton ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME , DirectChannel .class ) ; org.springframework.integration.channel.StaticApplicationContext . refresh ( ) ; DirectChannel org.springframework.integration.channel.DirectChannel = ( DirectChannel ) org.springframework.integration.channel.StaticApplicationContext . getBean ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) ; TaskExecutor org.springframework.integration.channel.TaskExecutor = new SimpleAsyncTaskExecutor ( ) ; ExecutorChannel org.springframework.integration.channel.ExecutorChannel = new ExecutorChannel ( org.springframework.integration.channel.TaskExecutor ) ; org.springframework.integration.channel.ExecutorChannel . setBeanFactory ( org.springframework.integration.channel.StaticApplicationContext ) ; org.springframework.integration.channel.ExecutorChannel . afterPropertiesSet ( ) ; org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler = new org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler ( ) ; org.springframework.integration.channel.DirectChannel . subscribe ( org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler ) ; org.springframework.integration.channel.ExecutorChannel . subscribe ( message -> { throw new MessagingException ( message , new UnsupportedOperationException ( STRING ) ) ; } ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.channel.ExecutorChannel . send ( org.springframework.integration.channel.Message<> ) ; this . void ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler . org.springframework.integration.channel.Message<> ; assertEquals ( MessagingException .class , org.springframework.integration.channel.Message<> . getPayload ( ) . getClass ( ) ) ; MessagingException org.springframework.integration.channel.MessagingException = ( MessagingException ) org.springframework.integration.channel.Message<> . getPayload ( ) ; assertEquals ( java.lang.UnsupportedOperationException .class , org.springframework.integration.channel.MessagingException . getCause ( ) . getClass ( ) ) ; assertSame ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.MessagingException . getFailedMessage ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> private void void ( long long ) { try { this . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( java.util.concurrent.CountDownLatch . long ( ) != NUMBER ) { throw new org.springframework.integration.channel.DispatchingChannelErrorHandlingTests.TestTimedOutException ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.Message<?> ) { this . org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<> ; this . java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
