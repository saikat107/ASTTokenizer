<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { MapDataSourceLookup org.springframework.jdbc.datasource.lookup.MapDataSourceLookup = new MapDataSourceLookup ( ) ; java.util.Map java.util.Map = org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . getDataSources ( ) ; org.springframework.jdbc.datasource.lookup.ExpectedException . expect ( java.lang.UnsupportedOperationException .class ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> = new java.util.HashMap<java.lang.String,javax.sql.DataSource> <> ( ) ; StubDataSource org.springframework.jdbc.datasource.lookup.StubDataSource = new StubDataSource ( ) ; java.util.Map<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( java.lang.String , org.springframework.jdbc.datasource.lookup.StubDataSource ) ; MapDataSourceLookup org.springframework.jdbc.datasource.lookup.MapDataSourceLookup = new MapDataSourceLookup ( ) ; org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . setDataSources ( java.util.Map<java.lang.String,javax.sql.DataSource> ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . getDataSource ( java.lang.String ) ; assertNotNull ( STRING , javax.sql.DataSource ) ; assertSame ( org.springframework.jdbc.datasource.lookup.StubDataSource , javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> = new java.util.HashMap<java.lang.String,javax.sql.DataSource> <> ( ) ; StubDataSource org.springframework.jdbc.datasource.lookup.StubDataSource = new StubDataSource ( ) ; java.util.Map<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( java.lang.String , org.springframework.jdbc.datasource.lookup.StubDataSource ) ; MapDataSourceLookup org.springframework.jdbc.datasource.lookup.MapDataSourceLookup = new MapDataSourceLookup ( ) ; org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . setDataSources ( java.util.Map<java.lang.String,javax.sql.DataSource> ) ; org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . setDataSources ( null ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . getDataSource ( java.lang.String ) ; assertNotNull ( STRING , javax.sql.DataSource ) ; assertSame ( org.springframework.jdbc.datasource.lookup.StubDataSource , javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> = new java.util.HashMap<java.lang.String,javax.sql.DataSource> <> ( ) ; StubDataSource org.springframework.jdbc.datasource.lookup.StubDataSource = new StubDataSource ( ) ; StubDataSource org.springframework.jdbc.datasource.lookup.StubDataSource = new StubDataSource ( ) ; java.util.Map<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( java.lang.String , org.springframework.jdbc.datasource.lookup.StubDataSource ) ; MapDataSourceLookup org.springframework.jdbc.datasource.lookup.MapDataSourceLookup = new MapDataSourceLookup ( ) ; org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . setDataSources ( java.util.Map<java.lang.String,javax.sql.DataSource> ) ; org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . addDataSource ( java.lang.String , org.springframework.jdbc.datasource.lookup.StubDataSource ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . getDataSource ( java.lang.String ) ; assertNotNull ( STRING , javax.sql.DataSource ) ; assertSame ( org.springframework.jdbc.datasource.lookup.StubDataSource , javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( java.lang.String , new java.lang.Object ( ) ) ; MapDataSourceLookup org.springframework.jdbc.datasource.lookup.MapDataSourceLookup = new MapDataSourceLookup ( java.util.Map ) ; org.springframework.jdbc.datasource.lookup.ExpectedException . expect ( java.lang.ClassCastException .class ) ; org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . getDataSource ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MapDataSourceLookup org.springframework.jdbc.datasource.lookup.MapDataSourceLookup = new MapDataSourceLookup ( ) ; org.springframework.jdbc.datasource.lookup.ExpectedException . expect ( DataSourceLookupFailureException .class ) ; org.springframework.jdbc.datasource.lookup.MapDataSourceLookup . getDataSource ( java.lang.String ) ; }  <METHOD_END>
