<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.integration.support.RequestResponseScenario> < RequestResponseScenario > java.util.List<org.springframework.integration.support.RequestResponseScenario> ( ) { java.util.List<org.springframework.integration.support.RequestResponseScenario> < RequestResponseScenario > java.util.List<org.springframework.integration.support.RequestResponseScenario> = new java.util.ArrayList<org.springframework.integration.support.RequestResponseScenario> < RequestResponseScenario > ( ) ; RequestResponseScenario org.springframework.integration.support.RequestResponseScenario = new RequestResponseScenario ( STRING , STRING ) . setPayload ( STRING ) . setResponseValidator ( new PayloadValidator < java.lang.String > ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.String ) ; } } ) ; java.util.List<org.springframework.integration.support.RequestResponseScenario> . add ( org.springframework.integration.support.RequestResponseScenario ) ; RequestResponseScenario org.springframework.integration.support.RequestResponseScenario = new RequestResponseScenario ( STRING , STRING ) . setMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . setResponseValidator ( new MessageValidator ( ) { @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.support.Message<?> ) { assertThat ( org.springframework.integration.support.Message<> , hasPayload ( STRING ) ) ; assertThat ( org.springframework.integration.support.Message<> , hasHeader ( STRING , STRING ) ) ; } } ) ; java.util.List<org.springframework.integration.support.RequestResponseScenario> . add ( org.springframework.integration.support.RequestResponseScenario ) ; RequestResponseScenario org.springframework.integration.support.RequestResponseScenario = new RequestResponseScenario ( STRING , STRING ) . setMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . setResponseValidator ( new MessageValidator ( ) { @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.support.Message<?> ) { assertThat ( org.springframework.integration.support.Message<> , hasPayload ( STRING ) ) ; assertThat ( org.springframework.integration.support.Message<> , hasHeader ( STRING , STRING ) ) ; } } ) ; java.util.List<org.springframework.integration.support.RequestResponseScenario> . add ( org.springframework.integration.support.RequestResponseScenario ) ; return java.util.List<org.springframework.integration.support.RequestResponseScenario> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.support.Message<?> ) { assertThat ( org.springframework.integration.support.Message<> , hasPayload ( STRING ) ) ; assertThat ( org.springframework.integration.support.Message<> , hasHeader ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.support.Message<?> ) { assertThat ( org.springframework.integration.support.Message<> , hasPayload ( STRING ) ) ; assertThat ( org.springframework.integration.support.Message<> , hasHeader ( STRING , STRING ) ) ; }  <METHOD_END>
