<METHOD_START> @ Before public void void ( ) { ActiveMqTestUtils . prepare ( ) ; this . org.springframework.integration.jms.ActiveMQConnectionFactory = new ActiveMQConnectionFactory ( ) ; this . org.springframework.integration.jms.ActiveMQConnectionFactory . setBrokerURL ( STRING ) ; this . org.springframework.integration.jms.ActiveMQConnectionFactory . setTrustAllPackages ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jms.Destination = new ActiveMQQueue ( STRING ) ; JmsChannelFactoryBean org.springframework.integration.jms.JmsChannelFactoryBean = new JmsChannelFactoryBean ( false ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( this . org.springframework.integration.jms.ActiveMQConnectionFactory ) ; org.springframework.integration.jms.CachingConnectionFactory . setCacheConsumers ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setDestination ( this . org.springframework.integration.jms.Destination ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsChannelFactoryBean . afterPropertiesSet ( ) ; PollableJmsChannel org.springframework.integration.jms.PollableJmsChannel = ( PollableJmsChannel ) org.springframework.integration.jms.JmsChannelFactoryBean . getObject ( ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsChannelFactoryBean org.springframework.integration.jms.JmsChannelFactoryBean = new JmsChannelFactoryBean ( false ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( this . org.springframework.integration.jms.ActiveMQConnectionFactory ) ; org.springframework.integration.jms.CachingConnectionFactory . setCacheConsumers ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setDestinationName ( STRING ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setPubSubDomain ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsChannelFactoryBean . afterPropertiesSet ( ) ; PollableJmsChannel org.springframework.integration.jms.PollableJmsChannel = ( PollableJmsChannel ) org.springframework.integration.jms.JmsChannelFactoryBean . getObject ( ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsChannelFactoryBean org.springframework.integration.jms.JmsChannelFactoryBean = new JmsChannelFactoryBean ( false ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( this . org.springframework.integration.jms.ActiveMQConnectionFactory ) ; org.springframework.integration.jms.CachingConnectionFactory . setCacheConsumers ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setDestinationName ( STRING ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setPubSubDomain ( false ) ; java.util.List<org.springframework.integration.jms.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.jms.ChannelInterceptor> = new java.util.ArrayList<org.springframework.integration.jms.ChannelInterceptor> < ChannelInterceptor > ( ) ; ChannelInterceptor org.springframework.integration.jms.ChannelInterceptor = spy ( new org.springframework.integration.jms.PollableJmsChannelTests.SampleInterceptor ( false ) ) ; java.util.List<org.springframework.integration.jms.ChannelInterceptor> . add ( org.springframework.integration.jms.ChannelInterceptor ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setInterceptors ( java.util.List<org.springframework.integration.jms.ChannelInterceptor> ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsChannelFactoryBean . afterPropertiesSet ( ) ; PollableJmsChannel org.springframework.integration.jms.PollableJmsChannel = ( PollableJmsChannel ) org.springframework.integration.jms.JmsChannelFactoryBean . getObject ( ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.jms.Message<> ) ; verify ( org.springframework.integration.jms.ChannelInterceptor , times ( NUMBER ) ) . preReceive ( Mockito . any ( MessageChannel .class ) ) ; verify ( org.springframework.integration.jms.ChannelInterceptor , times ( NUMBER ) ) . postReceive ( Mockito . any ( Message .class ) , Mockito . any ( MessageChannel .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsChannelFactoryBean org.springframework.integration.jms.JmsChannelFactoryBean = new JmsChannelFactoryBean ( false ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( this . org.springframework.integration.jms.ActiveMQConnectionFactory ) ; org.springframework.integration.jms.CachingConnectionFactory . setCacheConsumers ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setDestinationName ( STRING ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setPubSubDomain ( false ) ; java.util.List<org.springframework.integration.jms.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.jms.ChannelInterceptor> = new java.util.ArrayList<org.springframework.integration.jms.ChannelInterceptor> < ChannelInterceptor > ( ) ; ChannelInterceptor org.springframework.integration.jms.ChannelInterceptor = spy ( new org.springframework.integration.jms.PollableJmsChannelTests.SampleInterceptor ( true ) ) ; java.util.List<org.springframework.integration.jms.ChannelInterceptor> . add ( org.springframework.integration.jms.ChannelInterceptor ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setInterceptors ( java.util.List<org.springframework.integration.jms.ChannelInterceptor> ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsChannelFactoryBean . afterPropertiesSet ( ) ; PollableJmsChannel org.springframework.integration.jms.PollableJmsChannel = ( PollableJmsChannel ) org.springframework.integration.jms.JmsChannelFactoryBean . getObject ( ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.Message<> ) ; verify ( org.springframework.integration.jms.ChannelInterceptor , times ( NUMBER ) ) . preReceive ( Mockito . any ( MessageChannel .class ) ) ; verify ( org.springframework.integration.jms.ChannelInterceptor , times ( NUMBER ) ) . postReceive ( Mockito . any ( Message .class ) , Mockito . any ( MessageChannel .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jms.Destination = new ActiveMQQueue ( STRING ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( org.springframework.integration.jms.ActiveMQConnectionFactory ) ; org.springframework.integration.jms.CachingConnectionFactory . setCacheConsumers ( false ) ; JmsChannelFactoryBean org.springframework.integration.jms.JmsChannelFactoryBean = new JmsChannelFactoryBean ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setDestination ( this . org.springframework.integration.jms.Destination ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setExplicitQosEnabled ( true ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setPriority ( NUMBER ) ; int int = NUMBER ; org.springframework.integration.jms.JmsChannelFactoryBean . setTimeToLive ( int ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setDeliveryPersistent ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsChannelFactoryBean . afterPropertiesSet ( ) ; PollableJmsChannel org.springframework.integration.jms.PollableJmsChannel = ( PollableJmsChannel ) org.springframework.integration.jms.JmsChannelFactoryBean . getObject ( ) ; final JmsTemplate org.springframework.integration.jms.JmsTemplate = new JmsTemplate ( this . org.springframework.integration.jms.ActiveMQConnectionFactory ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; final java.util.concurrent.atomic.AtomicReference<javax.jms.Message> < javax . javax.jms . javax.jms > java.util.concurrent.atomic.AtomicReference<javax.jms.Message> = new java.util.concurrent.atomic.AtomicReference<javax.jms.Message> < javax . javax.jms . javax.jms > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) { java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . set ( org.springframework.integration.jms.JmsTemplate . receive ( org.springframework.integration.jms.Destination ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) . getJMSPriority ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) . getJMSExpiration ( ) <= java.lang.System . long ( ) + int ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) . toString ( ) . contains ( STRING ) ) ; java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . set ( null ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( MessageBuilder . withPayload ( STRING ) . setPriority ( NUMBER ) . build ( ) ) ; assertTrue ( boolean ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) { java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . set ( org.springframework.integration.jms.JmsTemplate . receive ( org.springframework.integration.jms.Destination ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) . getJMSPriority ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) . getJMSExpiration ( ) <= java.lang.System . long ( ) + int ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<javax.jms.Message> . get ( ) . toString ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jms.Destination = new ActiveMQQueue ( STRING ) ; JmsChannelFactoryBean org.springframework.integration.jms.JmsChannelFactoryBean = new JmsChannelFactoryBean ( false ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( this . org.springframework.integration.jms.ActiveMQConnectionFactory ) ; org.springframework.integration.jms.CachingConnectionFactory . setCacheConsumers ( false ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setDestination ( this . org.springframework.integration.jms.Destination ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setMessageSelector ( STRING ) ; org.springframework.integration.jms.JmsChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsChannelFactoryBean . afterPropertiesSet ( ) ; PollableJmsChannel org.springframework.integration.jms.PollableJmsChannel = ( PollableJmsChannel ) org.springframework.integration.jms.JmsChannelFactoryBean . getObject ( ) ; boolean boolean = org.springframework.integration.jms.PollableJmsChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.jms.Message<> ) ; JmsTemplate org.springframework.integration.jms.JmsTemplate = new JmsTemplate ( this . org.springframework.integration.jms.ActiveMQConnectionFactory ) ; org.springframework.integration.jms.JmsTemplate . setDefaultDestinationName ( STRING ) ; org.springframework.integration.jms.JmsTemplate . send ( session -> { TextMessage message = session . createTextMessage ( STRING ) ; message . setStringProperty ( STRING , STRING ) ; return message ; } ) ; Message < ? > org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.PollableJmsChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jms.Message<?> < ? > org.springframework.integration.jms.Message<?> ( Message < ? > org.springframework.integration.jms.Message<?> , MessageChannel org.springframework.integration.jms.MessageChannel ) { return org.springframework.integration.jms.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.jms.Message<?> , MessageChannel org.springframework.integration.jms.MessageChannel , boolean boolean ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageChannel org.springframework.integration.jms.MessageChannel ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jms.Message<?> < ? > org.springframework.integration.jms.Message<?> ( Message < ? > org.springframework.integration.jms.Message<?> , MessageChannel org.springframework.integration.jms.MessageChannel ) { return org.springframework.integration.jms.Message<> ; }  <METHOD_END>
