<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; FooServiceImpl org.springframework.context.annotation.FooServiceImpl = org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING , FooServiceImpl .class ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . foo ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . lookupFoo ( NUMBER ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . isPrototype ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( STRING ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; FooServiceImpl org.springframework.context.annotation.FooServiceImpl = org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING , FooServiceImpl .class ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . foo ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . lookupFoo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; try { org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( STRING ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( StubFooDao .class . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( NamedStubDao .class ) ) ; int int = org.springframework.context.annotation.GenericApplicationContext . getBeanDefinitionCount ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertEquals ( int + int , org.springframework.context.annotation.GenericApplicationContext . getBeanDefinitionCount ( ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( NamedStubDao .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; int int = org.springframework.context.annotation.GenericApplicationContext . getBeanDefinitionCount ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertEquals ( int + int , org.springframework.context.annotation.GenericApplicationContext . getBeanDefinitionCount ( ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; try { org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( STRING ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( NamedStubDao .class . java.lang.String ( ) ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( NamedStubDao2 .class . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext , false ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addIncludeFilter ( new AnnotationTypeFilter ( CustomComponent .class ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext , false ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addIncludeFilter ( new AnnotationTypeFilter ( CustomComponent .class ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext , true ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addIncludeFilter ( new AnnotationTypeFilter ( CustomComponent .class ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext , true ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addExcludeFilter ( new AnnotationTypeFilter ( Aspect .class ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext , true ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addExcludeFilter ( new AssignableTypeFilter ( FooService .class ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext , true ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addExcludeFilter ( new AssignableTypeFilter ( FooService .class ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext , true ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addExcludeFilter ( new AssignableTypeFilter ( FooService .class ) ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addExcludeFilter ( new AnnotationTypeFilter ( Aspect .class ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( new org.springframework.context.annotation.ClassPathBeanDefinitionScannerTests.TestBeanNameGenerator ( ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertFalse ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . COMMON_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_PROCESSOR_BEAN_NAME ) ) ; assertTrue ( org.springframework.context.annotation.GenericApplicationContext . containsBean ( AnnotationConfigUtils . EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; int int = org.springframework.context.annotation.GenericApplicationContext . getBeanDefinitionCount ( ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; assertEquals ( int , org.springframework.context.annotation.GenericApplicationContext . getBeanDefinitionCount ( ) - int ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( STRING ) ; assertEquals ( int + int + int , org.springframework.context.annotation.GenericApplicationContext . getBeanDefinitionCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( StaticListableBeanFactory .class ) ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( new org.springframework.context.annotation.ClassPathBeanDefinitionScannerTests.TestBeanNameGenerator ( ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; FooServiceImpl org.springframework.context.annotation.FooServiceImpl = org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING , FooServiceImpl .class ) ; StaticListableBeanFactory org.springframework.context.annotation.StaticListableBeanFactory = ( StaticListableBeanFactory ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; MessageSource org.springframework.context.annotation.MessageSource = ( MessageSource ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.FooServiceImpl . isInitCalled ( ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . foo ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . lookupFoo ( NUMBER ) ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext . getDefaultListableBeanFactory ( ) , fooService . beanFactory ) ; assertEquals ( NUMBER , fooService . listableBeanFactory . size ( ) ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext . getDefaultListableBeanFactory ( ) , fooService . listableBeanFactory . get ( NUMBER ) ) ; assertSame ( org.springframework.context.annotation.StaticListableBeanFactory , fooService . listableBeanFactory . get ( NUMBER ) ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext , fooService . resourceLoader ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext , fooService . resourcePatternResolver ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext , fooService . eventPublisher ) ; assertSame ( org.springframework.context.annotation.MessageSource , fooService . messageSource ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext , fooService . context ) ; assertEquals ( NUMBER , fooService . configurableContext . length ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext , fooService . configurableContext [ NUMBER ] ) ; assertSame ( org.springframework.context.annotation.GenericApplicationContext , fooService . genericContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( new org.springframework.context.annotation.ClassPathBeanDefinitionScannerTests.TestBeanNameGenerator ( ) ) ; int int = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; assertEquals ( NUMBER , int ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; try { org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; } catch ( BeanCreationException org.springframework.context.annotation.BeanCreationException ) { assertTrue ( org.springframework.context.annotation.BeanCreationException . contains ( BeanInstantiationException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( true ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( new org.springframework.context.annotation.ClassPathBeanDefinitionScannerTests.TestBeanNameGenerator ( ) ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setAutowireCandidatePatterns ( STRING ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; FooServiceImpl org.springframework.context.annotation.FooServiceImpl = ( FooServiceImpl ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . foo ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooServiceImpl . lookupFoo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( true ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( new org.springframework.context.annotation.ClassPathBeanDefinitionScannerTests.TestBeanNameGenerator ( ) ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setAutowireCandidatePatterns ( STRING ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; try { org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.context.annotation.BeanCreationException ) { assertTrue ( org.springframework.context.annotation.BeanCreationException . getMostSpecificCause ( ) instanceof NoSuchBeanDefinitionException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.BeanDefinition , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { java.lang.String java.lang.String = super. generateBeanName ( org.springframework.context.annotation.BeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; return java.lang.String . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
