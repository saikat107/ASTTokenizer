<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.util.List<org.springframework.data.mongodb.core.query.Term> = new java.util.ArrayList<org.springframework.data.mongodb.core.query.Term> < Term > ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( ) { return new org.springframework.data.mongodb.core.query.TextCriteria ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( Term org.springframework.data.mongodb.core.query.Term ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Term , STRING ) ; this . java.util.List<org.springframework.data.mongodb.core.query.Term> . add ( org.springframework.data.mongodb.core.query.Term ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.query.TextCriteria ( new Term ( java.lang.String ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.query.TextCriteria ( new Term ( java.lang.String , Term . Type . WORD ) . negate ( ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.query.TextCriteria ( new Term ( java.lang.String , Term . Type . PHRASE ) . negate ( ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.query.TextCriteria ( new Term ( java.lang.String , Term . Type . PHRASE ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextCriteria org.springframework.data.mongodb.core.query.TextCriteria ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , java.lang.String ) ; } if ( ! java.util.List<org.springframework.data.mongodb.core.query.Term> . isEmpty ( ) ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , java.lang.String ( java.util.List<org.springframework.data.mongodb.core.query.Term> ) ) ; } if ( java.lang.Boolean != null ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , java.lang.Boolean ) ; } if ( java.lang.Boolean != null ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , java.lang.Boolean ) ; } return new Document ( STRING , org.springframework.data.mongodb.core.query.Document ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Iterable<org.springframework.data.mongodb.core.query.Term> < Term > java.lang.Iterable<org.springframework.data.mongodb.core.query.Term> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( Term org.springframework.data.mongodb.core.query.Term : java.lang.Iterable<org.springframework.data.mongodb.core.query.Term> ) { if ( org.springframework.data.mongodb.core.query.Term != null ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.mongodb.core.query.Term . getFormatted ( ) ) ; } } return StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , STRING ) ; }  <METHOD_END>
