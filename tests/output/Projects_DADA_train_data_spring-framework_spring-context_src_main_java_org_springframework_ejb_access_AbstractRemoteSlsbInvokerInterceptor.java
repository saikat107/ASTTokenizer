<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.Class<? extends java.lang.Class> ( ) + STRING ) ; } this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Object java.lang.Object ) throws org.springframework.ejb.access.EjbAccessException { if ( this . boolean ) { return null ; } if ( ! ( java.lang.Object instanceof EJBHome ) ) { this . boolean = true ; return null ; } return super. getCreateMethod ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation ) throws java.lang.Throwable { try { return java.lang.Object ( org.springframework.ejb.access.MethodInvocation ) ; } catch ( RemoteConnectFailureException org.springframework.ejb.access.RemoteConnectFailureException ) { return java.lang.Object ( org.springframework.ejb.access.MethodInvocation , org.springframework.ejb.access.RemoteConnectFailureException ) ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { if ( boolean ( java.rmi.RemoteException ) ) { return java.lang.Object ( org.springframework.ejb.access.MethodInvocation , java.rmi.RemoteException ) ; } else { throw java.rmi.RemoteException ; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.rmi.RemoteException java.rmi.RemoteException ) { return RmiClientInterceptorUtils . isConnectFailure ( java.rmi.RemoteException ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation , java.lang.Exception java.lang.Exception ) throws java.lang.Throwable { if ( this . boolean ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getJndiName ( ) + STRING , java.lang.Exception ) ; } else if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + getJndiName ( ) + STRING ) ; } return java.lang.Object ( org.springframework.ejb.access.MethodInvocation ) ; } else { throw java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation ) throws java.lang.Throwable { try { refreshHome ( ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new RemoteLookupFailureException ( STRING + getJndiName ( ) + STRING , javax.naming.NamingException ) ; } return java.lang.Object ( org.springframework.ejb.access.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation ) throws java.lang.Throwable ;  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException , java.lang.reflect.InvocationTargetException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } java.lang.Object java.lang.Object = create ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected void void ( EJBObject org.springframework.ejb.access.EJBObject ) { if ( org.springframework.ejb.access.EJBObject != null && ! this . boolean ) { try { org.springframework.ejb.access.EJBObject . remove ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
