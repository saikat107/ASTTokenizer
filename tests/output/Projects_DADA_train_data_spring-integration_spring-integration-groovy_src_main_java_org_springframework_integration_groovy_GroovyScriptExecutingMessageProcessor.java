<METHOD_START> public void ( ScriptSource org.springframework.integration.groovy.ScriptSource ) { super(); this . org.springframework.integration.groovy.ScriptSource = org.springframework.integration.groovy.ScriptSource ; }  <METHOD_END>
<METHOD_START> public void ( ScriptSource org.springframework.integration.groovy.ScriptSource , ScriptVariableGenerator org.springframework.integration.groovy.ScriptVariableGenerator ) { super( org.springframework.integration.groovy.ScriptVariableGenerator ); this . org.springframework.integration.groovy.ScriptSource = org.springframework.integration.groovy.ScriptSource ; }  <METHOD_END>
<METHOD_START> public void void ( GroovyObjectCustomizer org.springframework.integration.groovy.GroovyObjectCustomizer ) { this . org.springframework.integration.groovy.VariableBindingGroovyObjectCustomizerDecorator . setCustomizer ( org.springframework.integration.groovy.GroovyObjectCustomizer ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( CompilerConfiguration org.springframework.integration.groovy.CompilerConfiguration ) { this . org.springframework.integration.groovy.CompilerConfiguration = org.springframework.integration.groovy.CompilerConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.groovy.ScriptSource org.springframework.integration.groovy.ScriptSource ( Message < ? > org.springframework.integration.groovy.Message<?> ) { return this . org.springframework.integration.groovy.ScriptSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . beanFactory != null && this . beanFactory instanceof ConfigurableListableBeanFactory ) { ( ( ConfigurableListableBeanFactory ) this . beanFactory ) . ignoreDependencyType ( MetaClass .class ) ; } CompilerConfiguration org.springframework.integration.groovy.CompilerConfiguration = this . org.springframework.integration.groovy.CompilerConfiguration ; if ( org.springframework.integration.groovy.CompilerConfiguration == null && this . boolean ) { org.springframework.integration.groovy.CompilerConfiguration = new CompilerConfiguration ( ) ; org.springframework.integration.groovy.CompilerConfiguration . addCompilationCustomizers ( new ASTTransformationCustomizer ( CompileStatic .class ) ) ; } this . org.springframework.integration.groovy.GroovyClassLoader = new GroovyClassLoader ( this . beanClassLoader , org.springframework.integration.groovy.CompilerConfiguration ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ScriptSource org.springframework.integration.groovy.ScriptSource , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws java.lang.Exception { Assert . notNull ( org.springframework.integration.groovy.ScriptSource , STRING ) ; this . void ( org.springframework.integration.groovy.ScriptSource ) ; java.lang.Object java.lang.Object = this . java.lang.Object ( java.util.Map<java.lang.String,java.lang.Object> ) ; return ( java.lang.Object instanceof GString ) ? java.lang.Object . java.lang.String ( ) : java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( ScriptSource org.springframework.integration.groovy.ScriptSource ) throws java.lang.Exception { if ( this . java.lang.Class<> == null || org.springframework.integration.groovy.ScriptSource . isModified ( ) ) { this . java.util.concurrent.locks.Lock . void ( ) ; try { if ( this . java.lang.Class<> == null || org.springframework.integration.groovy.ScriptSource . isModified ( ) ) { java.lang.String java.lang.String = org.springframework.integration.groovy.ScriptSource . suggestedClassName ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { this . java.lang.Class<?> = this . org.springframework.integration.groovy.GroovyClassLoader . parseClass ( org.springframework.integration.groovy.ScriptSource . getScriptAsString ( ) , java.lang.String ) ; } else { this . java.lang.Class<?> = this . org.springframework.integration.groovy.GroovyClassLoader . parseClass ( org.springframework.integration.groovy.ScriptSource . getScriptAsString ( ) ) ; } } } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws org.springframework.integration.groovy.ScriptCompilationException { try { GroovyObject org.springframework.integration.groovy.GroovyObject = ( GroovyObject ) this . java.lang.Class<> . newInstance ( ) ; VariableBindingGroovyObjectCustomizerDecorator org.springframework.integration.groovy.VariableBindingGroovyObjectCustomizerDecorator = new BindingOverwriteGroovyObjectCustomizerDecorator ( new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessor.BeanFactoryFallbackBinding ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; org.springframework.integration.groovy.VariableBindingGroovyObjectCustomizerDecorator . setCustomizer ( this . org.springframework.integration.groovy.VariableBindingGroovyObjectCustomizerDecorator ) ; if ( org.springframework.integration.groovy.GroovyObject instanceof Script ) { org.springframework.integration.groovy.VariableBindingGroovyObjectCustomizerDecorator . customize ( org.springframework.integration.groovy.GroovyObject ) ; return ( ( Script ) org.springframework.integration.groovy.GroovyObject ) . run ( ) ; } else { return org.springframework.integration.groovy.GroovyObject ; } } catch ( java.lang.InstantiationException java.lang.InstantiationException ) { throw new ScriptCompilationException ( this . org.springframework.integration.groovy.ScriptSource , STRING + this . java.lang.Class<> . java.lang.String ( ) , java.lang.InstantiationException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new ScriptCompilationException ( this . org.springframework.integration.groovy.ScriptSource , STRING + this . java.lang.Class<> . java.lang.String ( ) , java.lang.IllegalAccessException ) ; } }  <METHOD_END>
<METHOD_START> private void ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { super( java.util.Map<,> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { try { return super. getVariable ( java.lang.String ) ; } catch ( MissingPropertyException org.springframework.integration.groovy.MissingPropertyException ) { } if ( org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessor .this . beanFactory == null ) { throw new MissingPropertyException ( java.lang.String , this . java.lang.Class<? extends org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessor.BeanFactoryFallbackBinding> ( ) ) ; } try { return org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessor .this . beanFactory . getBean ( java.lang.String ) ; } catch ( NoSuchBeanDefinitionException org.springframework.integration.groovy.NoSuchBeanDefinitionException ) { throw new MissingPropertyException ( java.lang.String , this . java.lang.Class<? extends org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessor.BeanFactoryFallbackBinding> ( ) , org.springframework.integration.groovy.NoSuchBeanDefinitionException ) ; } }  <METHOD_END>
