<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext samples.websocket.jetty.echo.ConfigurableApplicationContext = new SpringApplicationBuilder ( samples.websocket.jetty.echo.CustomContainerWebSocketsApplicationTests.ClientConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) . properties ( STRING + int + STRING ) . run ( STRING ) ; long long = samples.websocket.jetty.echo.ConfigurableApplicationContext . getBean ( samples.websocket.jetty.echo.CustomContainerWebSocketsApplicationTests.ClientConfiguration .class ) . latch . getCount ( ) ; java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = samples.websocket.jetty.echo.ConfigurableApplicationContext . getBean ( samples.websocket.jetty.echo.CustomContainerWebSocketsApplicationTests.ClientConfiguration .class ) . messagePayload ; samples.websocket.jetty.echo.ConfigurableApplicationContext . close ( ) ; assertThat ( long ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext samples.websocket.jetty.echo.ConfigurableApplicationContext = new SpringApplicationBuilder ( samples.websocket.jetty.echo.CustomContainerWebSocketsApplicationTests.ClientConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) . properties ( STRING + int + STRING ) . run ( STRING ) ; long long = samples.websocket.jetty.echo.ConfigurableApplicationContext . getBean ( samples.websocket.jetty.echo.CustomContainerWebSocketsApplicationTests.ClientConfiguration .class ) . latch . getCount ( ) ; java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = samples.websocket.jetty.echo.ConfigurableApplicationContext . getBean ( samples.websocket.jetty.echo.CustomContainerWebSocketsApplicationTests.ClientConfiguration .class ) . messagePayload ; samples.websocket.jetty.echo.ConfigurableApplicationContext . close ( ) ; assertThat ( long ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public samples.websocket.jetty.echo.ServletWebServerFactory samples.websocket.jetty.echo.ServletWebServerFactory ( ) { return new JettyServletWebServerFactory ( STRING , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { samples.websocket.jetty.echo.Log . info ( STRING + this . java.util.concurrent.CountDownLatch . long ( ) ) ; if ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { samples.websocket.jetty.echo.Log . info ( STRING + this . java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; } else { samples.websocket.jetty.echo.Log . info ( STRING + this . java.util.concurrent.CountDownLatch . long ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public samples.websocket.jetty.echo.WebSocketConnectionManager samples.websocket.jetty.echo.WebSocketConnectionManager ( ) { WebSocketConnectionManager samples.websocket.jetty.echo.WebSocketConnectionManager = new WebSocketConnectionManager ( samples.websocket.jetty.echo.StandardWebSocketClient ( ) , samples.websocket.jetty.echo.SimpleClientWebSocketHandler ( ) , this . java.lang.String ) ; samples.websocket.jetty.echo.WebSocketConnectionManager . setAutoStartup ( true ) ; return samples.websocket.jetty.echo.WebSocketConnectionManager ; }  <METHOD_END>
<METHOD_START> @ Bean public samples.websocket.jetty.echo.StandardWebSocketClient samples.websocket.jetty.echo.StandardWebSocketClient ( ) { return new StandardWebSocketClient ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public samples.websocket.jetty.echo.SimpleClientWebSocketHandler samples.websocket.jetty.echo.SimpleClientWebSocketHandler ( ) { return new SimpleClientWebSocketHandler ( samples.websocket.jetty.echo.GreetingService ( ) , this . java.util.concurrent.CountDownLatch , this . java.util.concurrent.atomic.AtomicReference<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public samples.websocket.jetty.echo.GreetingService samples.websocket.jetty.echo.GreetingService ( ) { return new SimpleGreetingService ( ) ; }  <METHOD_END>
