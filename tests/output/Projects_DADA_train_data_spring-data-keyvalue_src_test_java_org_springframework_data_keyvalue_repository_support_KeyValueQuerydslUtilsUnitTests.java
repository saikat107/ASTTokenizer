<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.keyvalue.repository.support.EntityPath<org.springframework.data.keyvalue.repository.support.Person> = SimpleEntityPathResolver . INSTANCE . createPath ( Person .class ) ; this . org.springframework.data.keyvalue.repository.support.PathBuilder<org.springframework.data.keyvalue.repository.support.Person> = new PathBuilder < Person > ( org.springframework.data.keyvalue.repository.support.EntityPath<org.springframework.data.keyvalue.repository.support.Person> . getType ( ) , org.springframework.data.keyvalue.repository.support.EntityPath<org.springframework.data.keyvalue.repository.support.Person> . getMetadata ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { toOrderSpecifier ( new Sort ( STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( toOrderSpecifier ( null , org.springframework.data.keyvalue.repository.support.PathBuilder<org.springframework.data.keyvalue.repository.support.Person> ) , arrayWithSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.keyvalue.repository.support.Sort = new Sort ( Direction . ASC , STRING ) ; org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > [] org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] = toOrderSpecifier ( org.springframework.data.keyvalue.repository.support.Sort , org.springframework.data.keyvalue.repository.support.PathBuilder<org.springframework.data.keyvalue.repository.support.Person> ) ; assertThat ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] , IsArrayContainingInOrder .< OrderSpecifier < ? > > arrayContaining ( QPerson . person . firstname . asc ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.keyvalue.repository.support.Sort = new Sort ( Direction . DESC , STRING ) ; org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > [] org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] = toOrderSpecifier ( org.springframework.data.keyvalue.repository.support.Sort , org.springframework.data.keyvalue.repository.support.PathBuilder<org.springframework.data.keyvalue.repository.support.Person> ) ; assertThat ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] , IsArrayContainingInOrder .< OrderSpecifier < ? > > arrayContaining ( QPerson . person . firstname . desc ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.keyvalue.repository.support.Sort = new Sort ( Direction . DESC , STRING ) . and ( new Sort ( Direction . ASC , STRING ) ) ; org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > [] org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] = toOrderSpecifier ( org.springframework.data.keyvalue.repository.support.Sort , org.springframework.data.keyvalue.repository.support.PathBuilder<org.springframework.data.keyvalue.repository.support.Person> ) ; assertThat ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] , IsArrayContainingInOrder .< OrderSpecifier < ? > > arrayContaining ( QPerson . person . firstname . desc ( ) , QPerson . person . age . asc ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.keyvalue.repository.support.Sort = new Sort ( new Sort . Sort ( Direction . DESC , STRING , NullHandling . NULLS_LAST ) ) ; org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > [] org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] = toOrderSpecifier ( org.springframework.data.keyvalue.repository.support.Sort , org.springframework.data.keyvalue.repository.support.PathBuilder<org.springframework.data.keyvalue.repository.support.Person> ) ; assertThat ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] , IsArrayContainingInOrder .< OrderSpecifier < ? > > arrayContaining ( QPerson . person . firstname . desc ( ) . nullsLast ( ) ) ) ; }  <METHOD_END>
