<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.jpa.repository.query.EntityManager . getMetamodel ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Metamodel ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . getEntityManagerFactory ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.EntityManagerFactory ) ; when ( org.springframework.data.jpa.repository.query.EntityManagerFactory . createEntityManager ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.EntityManager ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . getDelegate ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryLookupStrategy org.springframework.data.jpa.repository.query.QueryLookupStrategy = JpaQueryLookupStrategy . create ( org.springframework.data.jpa.repository.query.EntityManager , Key . CREATE_IF_NOT_FOUND , org.springframework.data.jpa.repository.query.QueryExtractor , org.springframework.data.jpa.repository.query.EvaluationContextProvider ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.JpaQueryLookupStrategyUnitTests.UserRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; RepositoryMetadata org.springframework.data.jpa.repository.query.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.jpa.repository.query.JpaQueryLookupStrategyUnitTests.UserRepository .class ) ; java.lang.Throwable java.lang.Throwable = new java.lang.RuntimeException ( ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . createQuery ( anyString ( ) ) ) . thenThrow ( java.lang.Throwable ) ; try { org.springframework.data.jpa.repository.query.QueryLookupStrategy . resolveQuery ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.RepositoryMetadata , org.springframework.data.jpa.repository.query.ProjectionFactory , org.springframework.data.jpa.repository.query.NamedQueries ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , is ( instanceOf ( java.lang.IllegalArgumentException .class ) ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , is ( java.lang.Throwable ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryLookupStrategy org.springframework.data.jpa.repository.query.QueryLookupStrategy = JpaQueryLookupStrategy . create ( org.springframework.data.jpa.repository.query.EntityManager , Key . CREATE_IF_NOT_FOUND , org.springframework.data.jpa.repository.query.QueryExtractor , org.springframework.data.jpa.repository.query.EvaluationContextProvider ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.JpaQueryLookupStrategyUnitTests.UserRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; RepositoryMetadata org.springframework.data.jpa.repository.query.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.jpa.repository.query.JpaQueryLookupStrategyUnitTests.UserRepository .class ) ; org.springframework.data.jpa.repository.query.ExpectedException . expect ( InvalidJpaQueryMethodException .class ) ; org.springframework.data.jpa.repository.query.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.jpa.repository.query.ExpectedException . expectMessage ( java.lang.reflect.Method . java.lang.String ( ) ) ; org.springframework.data.jpa.repository.query.QueryLookupStrategy . resolveQuery ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.RepositoryMetadata , org.springframework.data.jpa.repository.query.ProjectionFactory , org.springframework.data.jpa.repository.query.NamedQueries ) ; }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.jpa.repository.query.User org.springframework.data.jpa.repository.query.User ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , nativeQuery = true ) org.springframework.data.jpa.repository.query.Page<org.springframework.data.jpa.repository.query.User> < User > org.springframework.data.jpa.repository.query.Page<org.springframework.data.jpa.repository.query.User> ( java.lang.String java.lang.String , Pageable org.springframework.data.jpa.repository.query.Pageable );  <METHOD_END>
