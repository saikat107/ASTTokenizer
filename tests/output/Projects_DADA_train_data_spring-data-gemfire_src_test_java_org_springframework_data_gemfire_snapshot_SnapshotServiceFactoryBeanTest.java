<METHOD_START> protected static java.io.File java.io.File ( java.lang.String java.lang.String ) { java.io.File java.io.File = mock ( java.io.File .class , java.lang.String ) ; when ( java.io.File . boolean ( ) ) . thenReturn ( true ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( java.lang.String ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> protected < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> ( ) { return org.springframework.data.gemfire.snapshot.SnapshotMetadata ( FileSystemUtils . WORKING_DIRECTORY ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> ( java.io.File java.io.File ) { return org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( java.io.File , null ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> ( SnapshotFilter < K , V > org.springframework.data.gemfire.snapshot.SnapshotFilter<K,V> ) { return org.springframework.data.gemfire.snapshot.SnapshotMetadata ( FileSystemUtils . WORKING_DIRECTORY , org.springframework.data.gemfire.snapshot.SnapshotFilter<K,V> ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> ( java.io.File java.io.File , SnapshotFilter < K , V > org.springframework.data.gemfire.snapshot.SnapshotFilter<K,V> ) { return org.springframework.data.gemfire.snapshot.SnapshotMetadata ( java.io.File , org.springframework.data.gemfire.snapshot.SnapshotFilter<K,V> , SnapshotFormat . GEMFIRE ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> ( java.io.File java.io.File , SnapshotFilter < K , V > org.springframework.data.gemfire.snapshot.SnapshotFilter<K,V> , SnapshotFormat org.springframework.data.gemfire.snapshot.SnapshotFormat ) { return new SnapshotMetadata < K , V > ( java.io.File , org.springframework.data.gemfire.snapshot.SnapshotFilter<K,V> , org.springframework.data.gemfire.snapshot.SnapshotFormat ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> < K , V > [] org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V> < K , V > ... org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ) { return org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.io.File . java.lang.String ) . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { java.io.File = java.io.File ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = new SnapshotMetadata [ NUMBER ] ; assertThat ( SnapshotServiceFactoryBean . nullSafeArray ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) , is ( sameInstance ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SnapshotServiceFactoryBean . nullSafeArray ( null ) , is ( equalTo ( SnapshotServiceFactoryBean . EMPTY_ARRAY ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SnapshotServiceFactoryBean . nullSafeIsDirectory ( new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SnapshotServiceFactoryBean . nullSafeIsDirectory ( new java.io.File ( STRING ) ) , is ( false ) ) ; assertThat ( SnapshotServiceFactoryBean . nullSafeIsDirectory ( FileSystemUtils . JAVA_EXE ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SnapshotServiceFactoryBean . nullSafeIsFile ( FileSystemUtils . JAVA_EXE ) , is ( FileSystemUtils . JAVA_EXE . isFile ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SnapshotServiceFactoryBean . nullSafeIsFile ( new java.io.File ( STRING ) ) , is ( false ) ) ; assertThat ( SnapshotServiceFactoryBean . nullSafeIsFile ( new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.snapshot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setCache ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.snapshot.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getCache ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.snapshot.Cache = mock ( Cache .class , STRING ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setCache ( org.springframework.data.gemfire.snapshot.Cache ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getCache ( ) , is ( sameInstance ( org.springframework.data.gemfire.snapshot.Cache ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( notNullValue ( ) ) ) ; assertThat ( actualExports . length , is ( equalTo ( NUMBER ) ) ) ; SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ; org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( sameInstance ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( not ( sameInstance ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( notNullValue ( ) ) ) ; assertThat ( actualExports . length , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( notNullValue ( ) ) ) ; assertThat ( actualImports . length , is ( equalTo ( NUMBER ) ) ) ; SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ; org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( sameInstance ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( not ( sameInstance ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] , is ( notNullValue ( ) ) ) ; assertThat ( actualImports . length , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( nullValue ( ) ) ) ; Region org.springframework.data.gemfire.snapshot.Region = mock ( Region .class , STRING ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( org.springframework.data.gemfire.snapshot.Region ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.snapshot.Region ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( null ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getSuppressImportOnInit ( ) , is ( false ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setSuppressImportOnInit ( true ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getSuppressImportOnInit ( ) , is ( true ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setSuppressImportOnInit ( false ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getSuppressImportOnInit ( ) , is ( false ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setSuppressImportOnInit ( null ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getSuppressImportOnInit ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . isSingleton ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; final SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = mock ( SnapshotServiceAdapter .class , STRING ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) { @ java.lang.Override protected org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , times ( NUMBER ) ) . doImport ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = mock ( SnapshotServiceAdapter .class , STRING ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) { @ java.lang.Override protected org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setSuppressImportOnInit ( true ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getSuppressImportOnInit ( ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , never ( ) ) . doImport ( any ( SnapshotMetadata [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.snapshot.Cache = mock ( Cache .class , STRING ) ; CacheSnapshotService org.springframework.data.gemfire.snapshot.CacheSnapshotService = mock ( CacheSnapshotService .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Cache . getSnapshotService ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setCache ( org.springframework.data.gemfire.snapshot.Cache ) ; SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . create ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , is ( instanceOf ( CacheSnapshotServiceAdapter .class ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.Cache , times ( NUMBER ) ) . getSnapshotService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.snapshot.Region = mock ( Region .class , STRING ) ; RegionSnapshotService org.springframework.data.gemfire.snapshot.RegionSnapshotService = mock ( RegionSnapshotService .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Region . getSnapshotService ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( org.springframework.data.gemfire.snapshot.Region ) ; SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . create ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , is ( instanceOf ( RegionSnapshotServiceAdapter .class ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.Region , times ( NUMBER ) ) . getSnapshotService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.snapshot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . wrap ( ( CacheSnapshotService ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.snapshot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . wrap ( ( RegionSnapshotService ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; final SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = mock ( SnapshotServiceAdapter .class , STRING ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . destroy ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , times ( NUMBER ) ) . doExport ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Region org.springframework.data.gemfire.snapshot.Region = mock ( Region .class , STRING ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( ExportSnapshotApplicationEvent .class , STRING ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( java.io.File ) ; final SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = mock ( SnapshotServiceAdapter .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . matches ( eq ( org.springframework.data.gemfire.snapshot.Region ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . getSnapshotMetadata ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( org.springframework.data.gemfire.snapshot.Region ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) [ NUMBER ] , is ( not ( sameInstance ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.snapshot.Region ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . onApplicationEvent ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . matches ( eq ( org.springframework.data.gemfire.snapshot.Region ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . getSnapshotMetadata ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , times ( NUMBER ) ) . doExport ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( ImportSnapshotApplicationEvent .class , STRING ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( java.io.File ) ; final SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = mock ( SnapshotServiceAdapter .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . matches ( any ( Region .class ) ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . getSnapshotMetadata ( ) ) . thenReturn ( null ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . onApplicationEvent ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , never ( ) ) . matches ( any ( Region .class ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . getSnapshotMetadata ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , times ( NUMBER ) ) . doImport ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( ExportSnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . matches ( any ( Region .class ) ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . getSnapshotMetadata ( ) ) . thenReturn ( null ) ; final SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = mock ( SnapshotServiceAdapter .class , STRING ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) [ NUMBER ] , isA ( SnapshotMetadata .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . onApplicationEvent ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . matches ( isNull ( Region .class ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , never ( ) ) . getSnapshotMetadata ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , never ( ) ) . doExport ( any ( SnapshotMetadata .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Region org.springframework.data.gemfire.snapshot.Region = mock ( Region .class , STRING ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( ImportSnapshotApplicationEvent .class , STRING ) ; final SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter = mock ( SnapshotServiceAdapter .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . matches ( any ( Region .class ) ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . getSnapshotMetadata ( ) ) . thenReturn ( null ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<K,V>[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( org.springframework.data.gemfire.snapshot.Region ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) [ NUMBER ] , isA ( SnapshotMetadata .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.Region ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . onApplicationEvent ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . matches ( eq ( org.springframework.data.gemfire.snapshot.Region ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , never ( ) ) . getSnapshotMetadata ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter , never ( ) ) . doImport ( any ( SnapshotMetadata .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ( ) java.lang.Exception { return org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( java.io.File ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata ( FileSystemUtils . USER_HOME ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( SnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . getSnapshotMetadata ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . resolveSnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . getSnapshotMetadata ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata ( FileSystemUtils . USER_HOME ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( ExportSnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . getSnapshotMetadata ( ) ) . thenReturn ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . resolveSnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . getSnapshotMetadata ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = org.springframework.data.gemfire.snapshot.SnapshotMetadata ( FileSystemUtils . USER_HOME ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( ImportSnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . getSnapshotMetadata ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object>[] ( ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getExports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getImports ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . resolveSnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . getSnapshotMetadata ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( SnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( true ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . isMatch ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , never ( ) ) . matches ( any ( Region .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( SnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . matches ( any ( Region .class ) ) ) . thenReturn ( false ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . isMatch ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) , is ( false ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . matches ( isNull ( Region .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( SnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( mock ( Region .class , STRING ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . isMatch ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , never ( ) ) . matches ( any ( Region .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.snapshot.Region = mock ( Region .class , STRING ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent = mock ( SnapshotApplicationEvent .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent . matches ( eq ( org.springframework.data.gemfire.snapshot.Region ) ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( org.springframework.data.gemfire.snapshot.Region ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.snapshot.Region ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . isMatch ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . isCacheSnapshotEvent ( ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotApplicationEvent , times ( NUMBER ) ) . matches ( eq ( org.springframework.data.gemfire.snapshot.Region ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.snapshot.Cache = mock ( Cache .class , STRING ) ; CacheSnapshotService org.springframework.data.gemfire.snapshot.CacheSnapshotService = mock ( CacheSnapshotService .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Cache . getSnapshotService ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ; when ( org.springframework.data.gemfire.snapshot.CacheSnapshotService . createOptions ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ( FileSystemUtils . USER_HOME , org.springframework.data.gemfire.snapshot.SnapshotFilter ) , org.springframework.data.gemfire.snapshot.SnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setCache ( org.springframework.data.gemfire.snapshot.Cache ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( null ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObject ( ) , is ( nullValue ( ) ) ) ; assertThat ( ( java.lang.Class<org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter> < SnapshotServiceAdapter > ) org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObjectType ( ) , is ( equalTo ( SnapshotServiceAdapter .class ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObject ( ) , is ( instanceOf ( CacheSnapshotServiceAdapter .class ) ) ) ; assertThat ( ( java.lang.Class<org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter> < CacheSnapshotServiceAdapter > ) org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObjectType ( ) , is ( equalTo ( CacheSnapshotServiceAdapter .class ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.Cache , times ( NUMBER ) ) . getSnapshotService ( ) ; verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . createOptions ( ) ; verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . load ( eq ( FileSystemUtils . safeListFiles ( FileSystemUtils . USER_HOME , FileSystemUtils . FileOnlyFilter . INSTANCE ) ) , eq ( SnapshotFormat . GEMFIRE ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . load ( eq ( FileSystemUtils . safeListFiles ( FileSystemUtils . WORKING_DIRECTORY , FileSystemUtils . FileOnlyFilter . INSTANCE ) ) , eq ( SnapshotFormat . GEMFIRE ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.snapshot.Cache = mock ( Cache .class , STRING ) ; Region org.springframework.data.gemfire.snapshot.Region = mock ( Region .class , STRING ) ; RegionSnapshotService org.springframework.data.gemfire.snapshot.RegionSnapshotService = mock ( RegionSnapshotService .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Cache . getSnapshotService ( ) ) . thenThrow ( new java.lang.UnsupportedOperationException ( STRING ) ) ; when ( org.springframework.data.gemfire.snapshot.Region . getSnapshotService ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ; when ( org.springframework.data.gemfire.snapshot.RegionSnapshotService . createOptions ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; java.io.File java.io.File = java.io.File ( STRING ) ; SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ( java.io.File , org.springframework.data.gemfire.snapshot.SnapshotFilter ) , org.springframework.data.gemfire.snapshot.SnapshotMetadata ( java.io.File , org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setCache ( org.springframework.data.gemfire.snapshot.Cache ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( org.springframework.data.gemfire.snapshot.Region ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObject ( ) , is ( nullValue ( ) ) ) ; assertThat ( ( java.lang.Class<org.springframework.data.gemfire.snapshot.SnapshotServiceAdapter> < SnapshotServiceAdapter > ) org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObjectType ( ) , is ( equalTo ( SnapshotServiceAdapter .class ) ) ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObject ( ) , is ( instanceOf ( RegionSnapshotServiceAdapter .class ) ) ) ; assertThat ( ( java.lang.Class<org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter> < RegionSnapshotServiceAdapter > ) org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObjectType ( ) , is ( equalTo ( RegionSnapshotServiceAdapter .class ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.Cache , never ( ) ) . getSnapshotService ( ) ; verify ( org.springframework.data.gemfire.snapshot.Region , times ( NUMBER ) ) . getSnapshotService ( ) ; verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . createOptions ( ) ; verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . load ( eq ( java.io.File ) , eq ( SnapshotFormat . GEMFIRE ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . load ( eq ( java.io.File ) , eq ( SnapshotFormat . GEMFIRE ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.snapshot.Cache = mock ( Cache .class , STRING ) ; CacheSnapshotService org.springframework.data.gemfire.snapshot.CacheSnapshotService = mock ( CacheSnapshotService .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Cache . getSnapshotService ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ; when ( org.springframework.data.gemfire.snapshot.CacheSnapshotService . createOptions ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) , org.springframework.data.gemfire.snapshot.SnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setCache ( org.springframework.data.gemfire.snapshot.Cache ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . afterPropertiesSet ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . destroy ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObject ( ) , is ( instanceOf ( CacheSnapshotServiceAdapter .class ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.Cache , times ( NUMBER ) ) . getSnapshotService ( ) ; verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . createOptions ( ) ; verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . save ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getLocation ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getFormat ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . save ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getLocation ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getFormat ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.snapshot.Cache = mock ( Cache .class , STRING ) ; Region org.springframework.data.gemfire.snapshot.Region = mock ( Region .class , STRING ) ; RegionSnapshotService org.springframework.data.gemfire.snapshot.RegionSnapshotService = mock ( RegionSnapshotService .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Cache . getSnapshotService ( ) ) . thenThrow ( new java.lang.UnsupportedOperationException ( STRING ) ) ; when ( org.springframework.data.gemfire.snapshot.Region . getSnapshotService ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ; when ( org.springframework.data.gemfire.snapshot.RegionSnapshotService . createOptions ( ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; SnapshotMetadata [] org.springframework.data.gemfire.snapshot.SnapshotMetadata[] = org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ( org.springframework.data.gemfire.snapshot.SnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) , org.springframework.data.gemfire.snapshot.SnapshotMetadata ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; SnapshotServiceFactoryBean org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean = new SnapshotServiceFactoryBean ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setCache ( org.springframework.data.gemfire.snapshot.Cache ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setExports ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setImports ( null ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . setRegion ( org.springframework.data.gemfire.snapshot.Region ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . afterPropertiesSet ( ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . destroy ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBean . getObject ( ) , is ( instanceOf ( RegionSnapshotServiceAdapter .class ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.Cache , never ( ) ) . getSnapshotService ( ) ; verify ( org.springframework.data.gemfire.snapshot.Region , times ( NUMBER ) ) . getSnapshotService ( ) ; verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . createOptions ( ) ; verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . save ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getLocation ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getFormat ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . save ( eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getLocation ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotMetadata[] [ NUMBER ] . getFormat ( ) ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; final SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.SnapshotOptions . setFilter ( any ( SnapshotFilter .class ) ) ) . thenReturn ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter = new org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter ( ) { @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotOptions<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.snapshot.SnapshotOptions<java.lang.Object,java.lang.Object> ( ) { return org.springframework.data.gemfire.snapshot.SnapshotOptions ; } } ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . createOptions ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ) ; verify ( org.springframework.data.gemfire.snapshot.SnapshotOptions , times ( NUMBER ) ) . setFilter ( eq ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.snapshot.SnapshotOptions<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.snapshot.SnapshotOptions<java.lang.Object,java.lang.Object> ( ) { return org.springframework.data.gemfire.snapshot.SnapshotOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.Closeable java.io.Closeable = mock ( java.io.Closeable .class , STRING ) ; assertThat ( new org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( java.io.Closeable ) , is ( true ) ) ; verify ( java.io.Closeable , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.Closeable java.io.Closeable = mock ( java.io.Closeable .class , STRING ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( java.io.Closeable ) . close ( ) ; assertThat ( new org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( java.io.Closeable ) , is ( false ) ) ; verify ( java.io.Closeable , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Log org.springframework.data.gemfire.snapshot.Log = mock ( Log .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter = new org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter ( ) { @ java.lang.Override org.springframework.data.gemfire.snapshot.Log org.springframework.data.gemfire.snapshot.Log ( ) { return org.springframework.data.gemfire.snapshot.Log ; } } ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( STRING ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . logDebug ( java.lang.Exception , STRING , STRING ) ; verify ( org.springframework.data.gemfire.snapshot.Log , times ( NUMBER ) ) . isDebugEnabled ( ) ; verify ( org.springframework.data.gemfire.snapshot.Log , times ( NUMBER ) ) . debug ( eq ( STRING ) , eq ( java.lang.Exception ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.snapshot.Log org.springframework.data.gemfire.snapshot.Log ( ) { return org.springframework.data.gemfire.snapshot.Log ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Log org.springframework.data.gemfire.snapshot.Log = mock ( Log .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.Log . isDebugEnabled ( ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter = new org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter ( ) { @ java.lang.Override org.springframework.data.gemfire.snapshot.Log org.springframework.data.gemfire.snapshot.Log ( ) { return org.springframework.data.gemfire.snapshot.Log ; } } ; org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . logDebug ( null , STRING , STRING ) ; verify ( org.springframework.data.gemfire.snapshot.Log , times ( NUMBER ) ) . isDebugEnabled ( ) ; verify ( org.springframework.data.gemfire.snapshot.Log , never ( ) ) . debug ( any ( java.lang.String .class ) , any ( java.lang.Throwable .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.snapshot.Log org.springframework.data.gemfire.snapshot.Log ( ) { return org.springframework.data.gemfire.snapshot.Log ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter = new org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter ( ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( java.lang.String ( STRING , STRING , STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( java.lang.String ( STRING , STRING , STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( java.lang.String ( STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( java.io.File . java.lang.String . java.lang.String ( STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotServiceFactoryBeanTest.TestSnapshotServiceAdapter . toSimpleFilename ( null ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ImportSnapshotException .class ) public void void ( ) java.lang.Exception { CacheSnapshotService org.springframework.data.gemfire.snapshot.CacheSnapshotService = mock ( CacheSnapshotService .class , STRING ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) . load ( any ( java.io.File .class ) , any ( SnapshotFormat .class ) ) ; CacheSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter = new CacheSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . load ( FileSystemUtils . WORKING_DIRECTORY , SnapshotFormat . GEMFIRE ) ; } catch ( ImportSnapshotException org.springframework.data.gemfire.snapshot.ImportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , FileSystemUtils . WORKING_DIRECTORY ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) , is ( instanceOf ( java.io.IOException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ImportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . load ( eq ( FileSystemUtils . WORKING_DIRECTORY ) , eq ( SnapshotFormat . GEMFIRE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ImportSnapshotException .class ) public void void ( ) java.lang.Exception { SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; CacheSnapshotService org.springframework.data.gemfire.snapshot.CacheSnapshotService = mock ( CacheSnapshotService .class , STRING ) ; doThrow ( new java.lang.ClassCastException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) . load ( any ( java.io.File [] .class ) , any ( SnapshotFormat .class ) , any ( SnapshotOptions .class ) ) ; CacheSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter = new CacheSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . load ( SnapshotFormat . GEMFIRE , org.springframework.data.gemfire.snapshot.SnapshotOptions , java.io.File ) ; } catch ( ImportSnapshotException org.springframework.data.gemfire.snapshot.ImportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , java.util.Arrays . java.lang.String ( new java.io.File [] { java.io.File } ) , org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) , is ( instanceOf ( java.lang.ClassCastException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ImportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . load ( eq ( new java.io.File [] { java.io.File } ) , eq ( SnapshotFormat . GEMFIRE ) , Matchers . isA ( SnapshotOptions .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ExportSnapshotException .class ) public void void ( ) java.lang.Exception { CacheSnapshotService org.springframework.data.gemfire.snapshot.CacheSnapshotService = mock ( CacheSnapshotService .class , STRING ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) . save ( any ( java.io.File .class ) , any ( SnapshotFormat .class ) ) ; CacheSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter = new CacheSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . save ( FileSystemUtils . WORKING_DIRECTORY , SnapshotFormat . GEMFIRE ) ; } catch ( ExportSnapshotException org.springframework.data.gemfire.snapshot.ExportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , FileSystemUtils . WORKING_DIRECTORY ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) , is ( instanceOf ( java.io.IOException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ExportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . save ( eq ( FileSystemUtils . WORKING_DIRECTORY ) , eq ( SnapshotFormat . GEMFIRE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ExportSnapshotException .class ) public void void ( ) java.lang.Exception { SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; CacheSnapshotService org.springframework.data.gemfire.snapshot.CacheSnapshotService = mock ( CacheSnapshotService .class , STRING ) ; doThrow ( new java.lang.ClassCastException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) . save ( any ( java.io.File .class ) , any ( SnapshotFormat .class ) , any ( SnapshotOptions .class ) ) ; CacheSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter = new CacheSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.CacheSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.CacheSnapshotServiceAdapter . save ( FileSystemUtils . USER_HOME , SnapshotFormat . GEMFIRE , org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; } catch ( ExportSnapshotException org.springframework.data.gemfire.snapshot.ExportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , FileSystemUtils . USER_HOME , org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) , is ( instanceOf ( java.lang.ClassCastException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ExportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.CacheSnapshotService , times ( NUMBER ) ) . save ( eq ( FileSystemUtils . USER_HOME ) , eq ( SnapshotFormat . GEMFIRE ) , Matchers . isA ( SnapshotOptions .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ImportSnapshotException .class ) public void void ( ) java.lang.Exception { RegionSnapshotService org.springframework.data.gemfire.snapshot.RegionSnapshotService = mock ( RegionSnapshotService .class , STRING ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) . load ( any ( java.io.File .class ) , any ( SnapshotFormat .class ) ) ; RegionSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter = new RegionSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . load ( java.io.File , SnapshotFormat . GEMFIRE ) ; } catch ( ImportSnapshotException org.springframework.data.gemfire.snapshot.ImportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , java.io.File ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) , is ( instanceOf ( java.io.IOException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ImportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . load ( eq ( java.io.File ) , eq ( SnapshotFormat . GEMFIRE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ImportSnapshotException .class ) public void void ( ) java.lang.Exception { SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; RegionSnapshotService org.springframework.data.gemfire.snapshot.RegionSnapshotService = mock ( RegionSnapshotService .class , STRING ) ; doThrow ( new java.lang.ClassCastException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) . load ( any ( java.io.File .class ) , any ( SnapshotFormat .class ) , any ( SnapshotOptions .class ) ) ; RegionSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter = new RegionSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . load ( SnapshotFormat . GEMFIRE , org.springframework.data.gemfire.snapshot.SnapshotOptions , java.io.File ) ; } catch ( ImportSnapshotException org.springframework.data.gemfire.snapshot.ImportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , java.util.Arrays . java.lang.String ( new java.io.File [] { java.io.File } ) , org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) , is ( instanceOf ( java.lang.ClassCastException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ImportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ImportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . load ( eq ( java.io.File ) , eq ( SnapshotFormat . GEMFIRE ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ExportSnapshotException .class ) public void void ( ) java.lang.Exception { RegionSnapshotService org.springframework.data.gemfire.snapshot.RegionSnapshotService = mock ( RegionSnapshotService .class , STRING ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) . save ( any ( java.io.File .class ) , any ( SnapshotFormat .class ) ) ; RegionSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter = new RegionSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . save ( java.io.File , SnapshotFormat . GEMFIRE ) ; } catch ( ExportSnapshotException org.springframework.data.gemfire.snapshot.ExportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , java.io.File ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) , is ( instanceOf ( java.io.IOException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ExportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . save ( eq ( java.io.File ) , eq ( SnapshotFormat . GEMFIRE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ExportSnapshotException .class ) public void void ( ) java.lang.Exception { SnapshotOptions org.springframework.data.gemfire.snapshot.SnapshotOptions = mock ( SnapshotOptions .class , STRING ) ; RegionSnapshotService org.springframework.data.gemfire.snapshot.RegionSnapshotService = mock ( RegionSnapshotService .class , STRING ) ; doThrow ( new java.lang.ClassCastException ( STRING ) ) . when ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) . save ( any ( java.io.File .class ) , any ( SnapshotFormat .class ) , any ( SnapshotOptions .class ) ) ; RegionSnapshotServiceAdapter org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter = new RegionSnapshotServiceAdapter ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ; assertThat ( org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . getSnapshotService ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.RegionSnapshotService ) ) ) ; try { org.springframework.data.gemfire.snapshot.RegionSnapshotServiceAdapter . save ( java.io.File , SnapshotFormat . GEMFIRE , org.springframework.data.gemfire.snapshot.SnapshotOptions ) ; } catch ( ExportSnapshotException org.springframework.data.gemfire.snapshot.ExportSnapshotException ) { assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getMessage ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , java.io.File , org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) , is ( instanceOf ( java.lang.ClassCastException .class ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.ExportSnapshotException . getCause ( ) . getMessage ( ) , is ( equalTo ( STRING ) ) ) ; throw org.springframework.data.gemfire.snapshot.ExportSnapshotException ; } finally { verify ( org.springframework.data.gemfire.snapshot.RegionSnapshotService , times ( NUMBER ) ) . save ( eq ( java.io.File ) , eq ( SnapshotFormat . GEMFIRE ) , eq ( org.springframework.data.gemfire.snapshot.SnapshotOptions ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.snapshot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.snapshot.ExpectedException . expectMessage ( STRING ) ; new SnapshotMetadata ( null , mock ( SnapshotFilter .class ) , SnapshotFormat . GEMFIRE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotFilter org.springframework.data.gemfire.snapshot.SnapshotFilter = mock ( SnapshotFilter .class , STRING ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = new SnapshotMetadata ( FileSystemUtils . WORKING_DIRECTORY , org.springframework.data.gemfire.snapshot.SnapshotFilter , null ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . getLocation ( ) , is ( equalTo ( FileSystemUtils . WORKING_DIRECTORY ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . isDirectory ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . isFile ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . getFilter ( ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.SnapshotFilter ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . isFilterPresent ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . getFormat ( ) , is ( equalTo ( SnapshotFormat . GEMFIRE ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SnapshotMetadata org.springframework.data.gemfire.snapshot.SnapshotMetadata = new SnapshotMetadata ( java.io.File , null , SnapshotFormat . GEMFIRE ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . getLocation ( ) , is ( equalTo ( java.io.File ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . isDirectory ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . isFile ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . getFilter ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . isFilterPresent ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.SnapshotMetadata . getFormat ( ) , is ( equalTo ( SnapshotFormat . GEMFIRE ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.File java.io.File = new java.io.File ( new java.io.File ( FileSystemUtils . JAVA_HOME , STRING ) , STRING ) ; if ( ! java.io.File . boolean ( ) ) { java.io.File = new java.io.File ( new java.io.File ( new java.io.File ( FileSystemUtils . JAVA_HOME , STRING ) , STRING ) , STRING ) ; assumeThat ( java.io.File . boolean ( ) , is ( true ) ) ; } assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( java.io.File ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( new java.io.File ( STRING ) ) , is ( false ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( new ClassPathResource ( STRING ) . getFile ( ) ) , is ( false ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( new java.io.File ( STRING ) ) , is ( false ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( new java.io.File ( STRING ) ) , is ( false ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( new java.io.File ( STRING ) ) , is ( false ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( new java.io.File ( STRING ) ) , is ( false ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . isJarFile ( null ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ArchiveFileFilter . INSTANCE . getFileExtension ( new ClassPathResource ( STRING ) . getFile ( ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . getFileExtension ( new java.io.File ( STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . getFileExtension ( new java.io.File ( STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . getFileExtension ( FileSystemUtils . WORKING_DIRECTORY ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . getFileExtension ( new java.io.File ( STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . getFileExtension ( new java.io.File ( STRING ) ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ArchiveFileFilter . INSTANCE . getFileExtension ( null ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ArchiveFileFilter . INSTANCE . accept ( new ClassPathResource ( STRING ) . getFile ( ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ArchiveFileFilter . INSTANCE . accept ( new java.io.File ( STRING ) ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.File [] java.io.File[] ( final SnapshotMetadata < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.snapshot.SnapshotMetadata<java.lang.Object,java.lang.Object> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
