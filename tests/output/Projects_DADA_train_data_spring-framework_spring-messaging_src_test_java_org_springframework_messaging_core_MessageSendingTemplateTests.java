<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate = new org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate ( ) ; this . org.springframework.messaging.core.TestMessagePostProcessor = new org.springframework.messaging.core.TestMessagePostProcessor ( ) ; this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . send ( org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertSame ( org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . send ( STRING , org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertSame ( org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . send ( org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertNotNull ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertNotNull ( this . org.springframework.messaging.core.TestMessagePostProcessor . org.springframework.messaging.core.Message<?> ( ) ) ; assertSame ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.TestMessagePostProcessor . org.springframework.messaging.core.Message<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( STRING ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertNotNull ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , NUMBER , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . size ( ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( STRING , STRING ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertNotNull ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , NUMBER , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . size ( ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertNotNull ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaderAccessor org.springframework.messaging.core.MessageHeaderAccessor = new MessageHeaderAccessor ( ) ; org.springframework.messaging.core.MessageHeaderAccessor . setHeader ( STRING , STRING ) ; org.springframework.messaging.core.MessageHeaderAccessor . setLeaveMutable ( true ) ; MessageHeaders org.springframework.messaging.core.MessageHeaders = org.springframework.messaging.core.MessageHeaderAccessor . getMessageHeaders ( ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . setMessageConverter ( new StringMessageConverter ( ) ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( STRING , STRING , org.springframework.messaging.core.MessageHeaders ) ; MessageHeaders org.springframework.messaging.core.MessageHeaders = this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) ; assertSame ( org.springframework.messaging.core.MessageHeaders , org.springframework.messaging.core.MessageHeaders ) ; assertEquals ( new MimeType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.messaging.core.MessageHeaders . get ( MessageHeaders . CONTENT_TYPE ) ) ; assertEquals ( STRING , org.springframework.messaging.core.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( ( java.lang.Object ) STRING , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertNotNull ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , NUMBER , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . size ( ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertNotNull ( this . org.springframework.messaging.core.TestMessagePostProcessor . org.springframework.messaging.core.Message<?> ( ) ) ; assertSame ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.TestMessagePostProcessor . org.springframework.messaging.core.Message<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( STRING , STRING , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . java.lang.String ) ; assertNotNull ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , NUMBER , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . size ( ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertNotNull ( this . org.springframework.messaging.core.TestMessagePostProcessor . org.springframework.messaging.core.Message<?> ( ) ) ; assertSame ( this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.TestMessagePostProcessor . org.springframework.messaging.core.Message<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageConversionException .class ) public void void ( ) { MessageConverter org.springframework.messaging.core.MessageConverter = new CompositeMessageConverter ( java.util.Arrays .< MessageConverter > java.util.List<org.springframework.messaging.core.MessageConverter> ( new MappingJackson2MessageConverter ( ) ) ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . setMessageConverter ( org.springframework.messaging.core.MessageConverter ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . APPLICATION_XML ) ; this . org.springframework.messaging.core.MessageSendingTemplateTests.TestMessageSendingTemplate . convertAndSend ( STRING , STRING , new MessageHeaders ( this . java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.core.Message<?> ) { this . java.lang.String = java.lang.String ; this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( ) { return this . org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( Message < ? > org.springframework.messaging.core.Message<?> ) { this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; return org.springframework.messaging.core.Message<> ; }  <METHOD_END>
