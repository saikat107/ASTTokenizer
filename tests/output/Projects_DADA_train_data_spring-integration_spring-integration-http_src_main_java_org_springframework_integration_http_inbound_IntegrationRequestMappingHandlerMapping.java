<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return HttpRequestHandlingEndpointSupport .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.http.inbound.HandlerExecutionChain org.springframework.integration.http.inbound.HandlerExecutionChain ( java.lang.Object java.lang.Object , HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest ) { if ( java.lang.Object instanceof HandlerMethod ) { HandlerMethod org.springframework.integration.http.inbound.HandlerMethod = ( HandlerMethod ) java.lang.Object ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.HandlerMethod . getBean ( ) ; if ( java.lang.Object instanceof HttpRequestHandlingEndpointSupport ) { java.lang.Object = java.lang.Object ; } } return super. getHandlerExecutionChain ( java.lang.Object , org.springframework.integration.http.inbound.HttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.http.inbound.CorsConfiguration org.springframework.integration.http.inbound.CorsConfiguration ( java.lang.Object java.lang.Object , HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest ) { if ( java.lang.Object instanceof HandlerMethod ) { return super. getCorsConfiguration ( java.lang.Object , org.springframework.integration.http.inbound.HttpServletRequest ) ; } else { return super. getCorsConfiguration ( new HandlerMethod ( java.lang.Object , java.lang.reflect.Method ) , org.springframework.integration.http.inbound.HttpServletRequest ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String ) { java.lang.Object = this . getApplicationContext ( ) . getBean ( ( java.lang.String ) java.lang.Object ) ; } RequestMappingInfo org.springframework.integration.http.inbound.RequestMappingInfo = this . org.springframework.integration.http.inbound.RequestMappingInfo ( ( HttpRequestHandlingEndpointSupport ) java.lang.Object ) ; if ( org.springframework.integration.http.inbound.RequestMappingInfo != null ) { registerMapping ( org.springframework.integration.http.inbound.RequestMappingInfo , java.lang.Object , java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.http.inbound.CorsConfiguration org.springframework.integration.http.inbound.CorsConfiguration ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , RequestMappingInfo org.springframework.integration.http.inbound.RequestMappingInfo ) { CrossOrigin org.springframework.integration.http.inbound.CrossOrigin = ( ( HttpRequestHandlingEndpointSupport ) java.lang.Object ) . getCrossOrigin ( ) ; if ( org.springframework.integration.http.inbound.CrossOrigin != null ) { CorsConfiguration org.springframework.integration.http.inbound.CorsConfiguration = new CorsConfiguration ( ) ; for ( java.lang.String java.lang.String : org.springframework.integration.http.inbound.CrossOrigin . getOrigin ( ) ) { org.springframework.integration.http.inbound.CorsConfiguration . addAllowedOrigin ( java.lang.String ) ; } for ( RequestMethod org.springframework.integration.http.inbound.RequestMethod : org.springframework.integration.http.inbound.CrossOrigin . getMethod ( ) ) { org.springframework.integration.http.inbound.CorsConfiguration . addAllowedMethod ( org.springframework.integration.http.inbound.RequestMethod . name ( ) ) ; } for ( java.lang.String java.lang.String : org.springframework.integration.http.inbound.CrossOrigin . getAllowedHeaders ( ) ) { org.springframework.integration.http.inbound.CorsConfiguration . addAllowedHeader ( java.lang.String ) ; } for ( java.lang.String java.lang.String : org.springframework.integration.http.inbound.CrossOrigin . getExposedHeaders ( ) ) { org.springframework.integration.http.inbound.CorsConfiguration . addExposedHeader ( java.lang.String ) ; } if ( org.springframework.integration.http.inbound.CrossOrigin . getAllowCredentials ( ) != null ) { org.springframework.integration.http.inbound.CorsConfiguration . setAllowCredentials ( org.springframework.integration.http.inbound.CrossOrigin . getAllowCredentials ( ) ) ; } if ( org.springframework.integration.http.inbound.CrossOrigin . getMaxAge ( ) != - NUMBER ) { org.springframework.integration.http.inbound.CorsConfiguration . setMaxAge ( org.springframework.integration.http.inbound.CrossOrigin . getMaxAge ( ) ) ; } if ( CollectionUtils . isEmpty ( org.springframework.integration.http.inbound.CorsConfiguration . getAllowedMethods ( ) ) ) { for ( RequestMethod org.springframework.integration.http.inbound.RequestMethod : org.springframework.integration.http.inbound.RequestMappingInfo . getMethodsCondition ( ) . getMethods ( ) ) { org.springframework.integration.http.inbound.CorsConfiguration . addAllowedMethod ( org.springframework.integration.http.inbound.RequestMethod . name ( ) ) ; } } if ( CollectionUtils . isEmpty ( org.springframework.integration.http.inbound.CorsConfiguration . getAllowedHeaders ( ) ) ) { for ( NameValueExpression < java.lang.String > org.springframework.integration.http.inbound.NameValueExpression<java.lang.String> : org.springframework.integration.http.inbound.RequestMappingInfo . getHeadersCondition ( ) . getExpressions ( ) ) { if ( ! org.springframework.integration.http.inbound.NameValueExpression<java.lang.String> . isNegated ( ) ) { org.springframework.integration.http.inbound.CorsConfiguration . addAllowedHeader ( org.springframework.integration.http.inbound.NameValueExpression<java.lang.String> . getName ( ) ) ; } } } return org.springframework.integration.http.inbound.CorsConfiguration ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.inbound.RequestMappingInfo org.springframework.integration.http.inbound.RequestMappingInfo ( HttpRequestHandlingEndpointSupport org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport ) { final RequestMapping org.springframework.integration.http.inbound.RequestMapping = org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport . getRequestMapping ( ) ; if ( ObjectUtils . isEmpty ( org.springframework.integration.http.inbound.RequestMapping . getPathPatterns ( ) ) ) { return null ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport . getComponentName ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.RequestMapping . getPathPatterns ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.RequestMapping . getPathPatterns ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.RequestMapping . getRequestMethods ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.RequestMapping . getParams ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.RequestMapping . getHeaders ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.RequestMapping . getConsumes ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.inbound.RequestMapping . getProduces ( ) ) ; org . springframework . org.springframework.web . org.springframework.web . org.springframework.web . org.springframework.web org.springframework.web.bind.annotation.RequestMapping = AnnotationUtils . synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , org . springframework . org.springframework.web . org.springframework.web . org.springframework.web . org.springframework.web .class , null ) ; return createRequestMappingInfo ( org.springframework.web.bind.annotation.RequestMapping , getCustomTypeCondition ( org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.integration.http.inbound.ContextRefreshedEvent ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ) { super. afterPropertiesSet ( ) ; } }  <METHOD_END>
