<METHOD_START> @ java.lang.Override public org.springframework.data.mapping.model.PersistentPropertyAccessor org.springframework.data.mapping.model.PersistentPropertyAccessor ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.lang.Object java.lang.Object ) { final java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> < PersistentPropertyAccessor > java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> = java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> . computeIfAbsent ( org.springframework.data.mapping.model.PersistentEntity<,> . getTypeInformation ( ) , k -> potentiallyCreateAndRegisterPersistentPropertyAccessorClass ( entity ) ) ; try { return ( PersistentPropertyAccessor ) java.util.Map<java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>,java.lang.reflect.Constructor<?>> . computeIfAbsent ( java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> , k -> propertyAccessorClass . getConstructors ( ) [ NUMBER ] ) . newInstance ( java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mapping.model.PersistentEntity<,> ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { Assert . notNull ( org.springframework.data.mapping.model.PersistentEntity<,> , STRING ) ; if ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) . getClassLoader ( ) == null || org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) . getPackage ( ) . getName ( ) . startsWith ( STRING ) ) { return false ; } final java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; org.springframework.data.mapping.model.PersistentEntity<,> . doWithProperties ( ( SimplePropertyHandler ) property -> { hashCodes . add ( property . getName ( ) . hashCode ( ) ) ; propertyCount . incrementAndGet ( ) ; } ) ; org.springframework.data.mapping.model.PersistentEntity<,> . doWithAssociations ( ( SimpleAssociationHandler ) association -> { if ( association . getInverse ( ) != null ) { hashCodes . add ( association . getInverse ( ) . getName ( ) . hashCode ( ) ) ; propertyCount . incrementAndGet ( ) ; } } ) ; return java.util.Set<java.lang.Integer> . int ( ) == java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> private synchronized java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> < PersistentPropertyAccessor > java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> < TypeInformation < ? > , java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> < PersistentPropertyAccessor > > java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> = this . java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> ; java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> < PersistentPropertyAccessor > java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> = java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> . get ( org.springframework.data.mapping.model.PersistentEntity<,> . getTypeInformation ( ) ) ; if ( java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> != null ) { return java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> ; } java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> = java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> ( org.springframework.data.mapping.model.PersistentEntity<,> ) ; java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> = new java.util.HashMap <> ( java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> ) ; java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> . put ( org.springframework.data.mapping.model.PersistentEntity<,> . getTypeInformation ( ) , java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> ) ; this . java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> = java.util.Map<org.springframework.data.mapping.model.TypeInformation<?>,java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor>> ; return java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> < PersistentPropertyAccessor > java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { try { return ( java.lang.Class<org.springframework.data.mapping.model.PersistentPropertyAccessor> < PersistentPropertyAccessor > ) org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyAccessorClassGenerator . java.lang.Class<?> ( org.springframework.data.mapping.model.PersistentEntity<,> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> ) ; byte [] byte[] = byte[] ( java.lang.String . java.lang.String ( '.' , '/' ) , org.springframework.data.mapping.model.PersistentEntity<,> ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.Evil . java.lang.Class<?> ( java.lang.String , byte[] , NUMBER , byte[] . int , org.springframework.data.mapping.model.PersistentEntity<,> ) ; return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public static byte [] byte[] ( java.lang.String java.lang.String , PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { ClassWriter org.springframework.data.mapping.model.ClassWriter = new ClassWriter ( ClassWriter . COMPUTE_MAXS ) ; org.springframework.data.mapping.model.ClassWriter . visit ( Opcodes . V1_6 , ACC_PUBLIC + ACC_SUPER , java.lang.String , null , java.lang.String , java.lang.String[] ) ; java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> = java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ( org.springframework.data.mapping.model.PersistentEntity<,> ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , org.springframework.data.mapping.model.ClassWriter ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.lang.String , org.springframework.data.mapping.model.ClassWriter ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String , org.springframework.data.mapping.model.ClassWriter ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.lang.String , org.springframework.data.mapping.model.ClassWriter ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String , org.springframework.data.mapping.model.ClassWriter ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String , org.springframework.data.mapping.model.ClassWriter ) ; org.springframework.data.mapping.model.ClassWriter . visitEnd ( ) ; return org.springframework.data.mapping.model.ClassWriter . toByteArray ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { final java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> = new java.util.ArrayList<org.springframework.data.mapping.model.PersistentProperty<?>> <> ( ) ; org.springframework.data.mapping.model.PersistentEntity<,> . doWithAssociations ( ( SimpleAssociationHandler ) association -> { if ( association . getInverse ( ) != null ) { persistentProperties . add ( association . getInverse ( ) ) ; } } ) ; org.springframework.data.mapping.model.PersistentEntity<,> . doWithProperties ( ( SimplePropertyHandler ) property -> persistentProperties . add ( property ) ) ; return java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , ClassWriter org.springframework.data.mapping.model.ClassWriter ) { org.springframework.data.mapping.model.ClassWriter . visitInnerClass ( java.lang.String , java.lang.String , STRING , ACC_PRIVATE + ACC_FINAL + ACC_STATIC ) ; boolean boolean = boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ; if ( boolean ) { org.springframework.data.mapping.model.ClassWriter . visitField ( ACC_PRIVATE + ACC_FINAL , java.lang.String , java.lang.String ( Type . getInternalName ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ) , null , null ) . visitEnd ( ) ; } else { org.springframework.data.mapping.model.ClassWriter . visitField ( ACC_PRIVATE + ACC_FINAL , java.lang.String , java.lang.String ( java.lang.String ) , null , null ) . visitEnd ( ) ; } for ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> : java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) { org.springframework.data.mapping.model.PersistentProperty<> . getSetter ( ) . filter ( it -> generateMethodHandle ( entity , it ) ) . ifPresent ( it -> cw . visitField ( ACC_PRIVATE + ACC_FINAL + ACC_STATIC , setterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) , null , null ) . visitEnd ( ) ) ; org.springframework.data.mapping.model.PersistentProperty<> . getGetter ( ) . filter ( it -> generateMethodHandle ( entity , it ) ) . ifPresent ( it -> cw . visitField ( ACC_PRIVATE + ACC_FINAL + ACC_STATIC , getterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) , null , null ) . visitEnd ( ) ) ; org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . filter ( it -> generateSetterMethodHandle ( entity , it ) ) . ifPresent ( it -> { cw . visitField ( ACC_PRIVATE + ACC_FINAL + ACC_STATIC , fieldSetterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) , null , null ) . visitEnd ( ) ; cw . visitField ( ACC_PRIVATE + ACC_FINAL + ACC_STATIC , fieldGetterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) , null , null ) . visitEnd ( ) ; } ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.lang.String java.lang.String , ClassWriter org.springframework.data.mapping.model.ClassWriter ) { MethodVisitor org.springframework.data.mapping.model.MethodVisitor ; boolean boolean = boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ; if ( boolean ) { org.springframework.data.mapping.model.MethodVisitor = org.springframework.data.mapping.model.ClassWriter . visitMethod ( ACC_PUBLIC , java.lang.String , java.lang.String . java.lang.String ( STRING , java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ) , null , null ) ; } else { org.springframework.data.mapping.model.MethodVisitor = org.springframework.data.mapping.model.ClassWriter . visitMethod ( ACC_PUBLIC , java.lang.String , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) ) , null , null ) ; } org.springframework.data.mapping.model.MethodVisitor . visitCode ( ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESPECIAL , java.lang.String , java.lang.String , STRING , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLdcInsn ( STRING ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; if ( boolean ) { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( PUTFIELD , java.lang.String , java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( PUTFIELD , java.lang.String , java.lang.String , java.lang.String ( java.lang.String ) ) ; } org.springframework.data.mapping.model.MethodVisitor . visitInsn ( RETURN ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; if ( boolean ) { org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( Type . getInternalName ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; } org.springframework.data.mapping.model.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String java.lang.String , ClassWriter org.springframework.data.mapping.model.ClassWriter ) { MethodVisitor org.springframework.data.mapping.model.MethodVisitor = org.springframework.data.mapping.model.ClassWriter . visitMethod ( ACC_STATIC , java.lang.String , STRING , null , null ) ; org.springframework.data.mapping.model.MethodVisitor . visitCode ( ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) ) , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ASTORE , NUMBER ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.List<java.lang.Class<?>> ( java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { org.springframework.data.mapping.model.MethodVisitor . visitLdcInsn ( java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ASTORE , int ( java.util.List<java.lang.Class<?>> , java.lang.Class<> ) ) ; } for ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> : java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) { if ( org.springframework.data.mapping.model.PersistentProperty<> . usePropertyAccess ( ) ) { org.springframework.data.mapping.model.PersistentProperty<> . getGetter ( ) . filter ( it -> generateMethodHandle ( entity , it ) ) . ifPresent ( it -> visitPropertyGetterInitializer ( property , mv , entityClasses , internalClassName ) ) ; org.springframework.data.mapping.model.PersistentProperty<> . getSetter ( ) . filter ( it -> generateMethodHandle ( entity , it ) ) . ifPresent ( it -> visitPropertySetterInitializer ( property , mv , entityClasses , internalClassName ) ) ; } org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . filter ( it -> generateSetterMethodHandle ( entity , it ) ) . ifPresent ( it -> visitFieldGetterSetterInitializer ( property , mv , entityClasses , internalClassName ) ) ; } org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( RETURN ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { int int = int ( java.util.List<java.lang.Class<?>> , java.lang.Class<> ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String . java.lang.String ( STRING , int ) , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , int ) ; } org.springframework.data.mapping.model.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitEnd ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) { return java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> . stream ( ) . flatMap ( property -> { return Optionals . toStream ( property . getField ( ) , property . getGetter ( ) , property . getSetter ( ) ) . map ( it -> it . getDeclaringClass ( ) ) ; } ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,,java.lang.Object> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Set<java.lang.Object>> ( ) , it -> new ArrayList <> ( it ) ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , MethodVisitor org.springframework.data.mapping.model.MethodVisitor , java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.lang.String java.lang.String ) { java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> = org.springframework.data.mapping.model.PersistentProperty<> . getGetter ( ) ; java.util.Optional<java.lang.reflect.Method> . void ( java.lang.reflect.Method -> { org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , int ( java.util.List<java.lang.Class<?>> , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) ; org.springframework.data.mapping.model.MethodVisitor . visitLdcInsn ( java.lang.reflect.Method . java.lang.String ( ) ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ICONST_0 ) ; org.springframework.data.mapping.model.MethodVisitor . visitTypeInsn ( ANEWARRAY , java.lang.String ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ASTORE , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ICONST_1 ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , java.lang.String , STRING , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; } ) ; if ( ! java.util.Optional<java.lang.reflect.Method> . boolean ( ) ) { org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ACONST_NULL ) ; } org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( PUTSTATIC , java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentProperty<> ) , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , MethodVisitor org.springframework.data.mapping.model.MethodVisitor , java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.lang.String java.lang.String ) { java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> = org.springframework.data.mapping.model.PersistentProperty<> . getSetter ( ) ; java.util.Optional<java.lang.reflect.Method> . void ( java.lang.reflect.Method -> { org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , int ( java.util.List<java.lang.Class<?>> , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) ; org.springframework.data.mapping.model.MethodVisitor . visitLdcInsn ( java.lang.reflect.Method . java.lang.String ( ) ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ICONST_1 ) ; org.springframework.data.mapping.model.MethodVisitor . visitTypeInsn ( ANEWARRAY , java.lang.String ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( DUP ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ICONST_0 ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] ; if ( java.lang.Class<> . boolean ( ) ) { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETSTATIC , Type . getInternalName ( java.lang.Class<?> ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] ) ) , STRING , java.lang.String ( java.lang.String ) ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitLdcInsn ( Type . getType ( java.lang.String ( java.lang.Class<> ) ) ) ; } org.springframework.data.mapping.model.MethodVisitor . visitInsn ( AASTORE ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ASTORE , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ICONST_1 ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , java.lang.String , STRING , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; } ) ; if ( ! java.util.Optional<java.lang.reflect.Method> . boolean ( ) ) { org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ACONST_NULL ) ; } org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( PUTSTATIC , java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentProperty<> ) , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , MethodVisitor org.springframework.data.mapping.model.MethodVisitor , java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.lang.String java.lang.String ) { org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . ifPresent ( it -> { mv . visitVarInsn ( ALOAD , classVariableIndex4 ( entityClasses , it . getDeclaringClass ( ) ) ) ; mv . visitLdcInsn ( it . getName ( ) ) ; mv . visitMethodInsn ( INVOKEVIRTUAL , JAVA_LANG_CLASS , STRING , String . format ( STRING , referenceName ( JAVA_LANG_STRING ) , referenceName ( JAVA_LANG_REFLECT_FIELD ) ) , false ) ; mv . visitVarInsn ( ASTORE , NUMBER ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitInsn ( ICONST_1 ) ; mv . visitMethodInsn ( INVOKEVIRTUAL , JAVA_LANG_REFLECT_FIELD , SET_ACCESSIBLE , STRING , false ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitMethodInsn ( INVOKEVIRTUAL , JAVA_LANG_INVOKE_METHOD_HANDLES_LOOKUP , STRING , String . format ( STRING , referenceName ( JAVA_LANG_REFLECT_FIELD ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) ) , false ) ; mv . visitFieldInsn ( PUTSTATIC , internalClassName , fieldGetterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitMethodInsn ( INVOKEVIRTUAL , JAVA_LANG_INVOKE_METHOD_HANDLES_LOOKUP , STRING , String . format ( STRING , referenceName ( JAVA_LANG_REFLECT_FIELD ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) ) , false ) ; mv . visitFieldInsn ( PUTSTATIC , internalClassName , fieldSetterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.lang.String java.lang.String , ClassWriter org.springframework.data.mapping.model.ClassWriter ) { MethodVisitor org.springframework.data.mapping.model.MethodVisitor = org.springframework.data.mapping.model.ClassWriter . visitMethod ( ACC_PUBLIC , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) ) , null , null ) ; org.springframework.data.mapping.model.MethodVisitor . visitCode ( ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; if ( boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETFIELD , java.lang.String , java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETFIELD , java.lang.String , java.lang.String , java.lang.String ( java.lang.String ) ) ; } org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ARETURN ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitEnd ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String java.lang.String , ClassWriter org.springframework.data.mapping.model.ClassWriter ) { MethodVisitor org.springframework.data.mapping.model.MethodVisitor = org.springframework.data.mapping.model.ClassWriter . visitMethod ( ACC_PUBLIC , STRING , STRING , STRING , null ) ; org.springframework.data.mapping.model.MethodVisitor . visitCode ( ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; void ( org.springframework.data.mapping.model.MethodVisitor ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; if ( boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETFIELD , java.lang.String , java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETFIELD , java.lang.String , java.lang.String , java.lang.String ( java.lang.String ) ) ; } org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ASTORE , NUMBER ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String , org.springframework.data.mapping.model.MethodVisitor ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; void ( org.springframework.data.mapping.model.MethodVisitor , STRING ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , java.lang.String ( java.lang.String ) , STRING , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; if ( boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; } org.springframework.data.mapping.model.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitEnd ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String java.lang.String , MethodVisitor org.springframework.data.mapping.model.MethodVisitor ) { java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> < java.lang.String , org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress > java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> = java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ( java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) ; int [] int[] = new int [ java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . int ( ) ] ; Label [] org.springframework.data.mapping.model.Label[] = new Label [ java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . int ( ) ] ; java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> < org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress > java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> = new java.util.ArrayList<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> <> ( java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . java.util.Collection<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ( ) ) ; java.util.Collections . void ( java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . int ( ) ; int ++ ) { org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress = java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress ( int ) ; int[] [ int ] = org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress . int ; org.springframework.data.mapping.model.Label[] [ int ] = org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress . org.springframework.data.mapping.model.Label ; } Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEINTERFACE , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) ) , true ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , STRING , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitLookupSwitchInsn ( org.springframework.data.mapping.model.Label , int[] , org.springframework.data.mapping.model.Label[] ) ; for ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> : java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) { org.springframework.data.mapping.model.MethodVisitor . visitLabel ( java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress ( org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) ) . label ) ; org.springframework.data.mapping.model.MethodVisitor . visitFrame ( Opcodes . F_SAME , NUMBER , null , NUMBER , null ) ; if ( org.springframework.data.mapping.model.PersistentProperty<> . getGetter ( ) . isPresent ( ) || org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . isPresent ( ) ) { void ( org.springframework.data.mapping.model.PersistentEntity<,> , org.springframework.data.mapping.model.PersistentProperty<> , org.springframework.data.mapping.model.MethodVisitor , java.lang.String ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitJumpInsn ( GOTO , org.springframework.data.mapping.model.Label ) ; } } org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitFrame ( Opcodes . F_SAME , NUMBER , null , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , MethodVisitor org.springframework.data.mapping.model.MethodVisitor , java.lang.String java.lang.String ) { org.springframework.data.mapping.model.PersistentProperty<> . getGetter ( ) . filter ( it -> property . usePropertyAccess ( ) ) . map ( it -> { if ( generateMethodHandle ( entity , it ) ) { mv . visitFieldInsn ( GETSTATIC , internalClassName , getterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitMethodInsn ( INVOKEVIRTUAL , JAVA_LANG_INVOKE_METHOD_HANDLE , STRING , String . format ( STRING , referenceName ( JAVA_LANG_OBJECT ) , referenceName ( JAVA_LANG_OBJECT ) ) , false ) ; } else { mv . visitVarInsn ( ALOAD , NUMBER ) ; int invokeOpCode = INVOKEVIRTUAL ; Class < ? > declaringClass = it . getDeclaringClass ( ) ; boolean interfaceDefinition = declaringClass . isInterface ( ) ; if ( interfaceDefinition ) { invokeOpCode = INVOKEINTERFACE ; } mv . visitMethodInsn ( invokeOpCode , Type . getInternalName ( declaringClass ) , it . getName ( ) , String . format ( STRING , signatureTypeName ( it . getReturnType ( ) ) ) , interfaceDefinition ) ; autoboxIfNeeded ( it . getReturnType ( ) , autoboxType ( it . getReturnType ( ) ) , mv ) ; } return null ; } ) . orElseGet ( ( ) { property . getField ( ) . ifPresent ( it -> { if ( generateMethodHandle ( entity , it ) ) { mv . visitFieldInsn ( GETSTATIC , internalClassName , fieldGetterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitMethodInsn ( INVOKEVIRTUAL , JAVA_LANG_INVOKE_METHOD_HANDLE , STRING , String . format ( STRING , referenceName ( JAVA_LANG_OBJECT ) , referenceName ( JAVA_LANG_OBJECT ) ) , false ) ; } else { mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitFieldInsn ( GETFIELD , Type . getInternalName ( it . getDeclaringClass ( ) ) , it . getName ( ) , signatureTypeName ( it . getType ( ) ) ) ; autoboxIfNeeded ( it . getType ( ) , autoboxType ( it . getType ( ) ) , mv ) ; } } ) ; return null ; } ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ARETURN ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String java.lang.String , ClassWriter org.springframework.data.mapping.model.ClassWriter ) { MethodVisitor org.springframework.data.mapping.model.MethodVisitor = org.springframework.data.mapping.model.ClassWriter . visitMethod ( ACC_PUBLIC , STRING , STRING , STRING , null ) ; org.springframework.data.mapping.model.MethodVisitor . visitCode ( ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; void ( org.springframework.data.mapping.model.MethodVisitor ) ; void ( org.springframework.data.mapping.model.MethodVisitor ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; if ( boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETFIELD , java.lang.String , java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETFIELD , java.lang.String , java.lang.String , java.lang.String ( java.lang.String ) ) ; } org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ASTORE , NUMBER ) ; void ( org.springframework.data.mapping.model.PersistentEntity<,> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String , org.springframework.data.mapping.model.MethodVisitor ) ; Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; void ( org.springframework.data.mapping.model.MethodVisitor , STRING ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , STRING , STRING , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , java.lang.String ( java.lang.String ) , STRING , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; if ( boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( java.lang.String , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; } org.springframework.data.mapping.model.MethodVisitor . visitLocalVariable ( STRING , java.lang.String ( java.lang.String ) , null , org.springframework.data.mapping.model.Label , org.springframework.data.mapping.model.Label , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitEnd ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( MethodVisitor org.springframework.data.mapping.model.MethodVisitor ) { org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ACONST_NULL ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ASTORE , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> , java.lang.String java.lang.String , MethodVisitor org.springframework.data.mapping.model.MethodVisitor ) { java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> < java.lang.String , org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress > java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> = java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ( java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) ; int [] int[] = new int [ java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . int ( ) ] ; Label [] org.springframework.data.mapping.model.Label[] = new Label [ java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . int ( ) ] ; java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> < org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress > java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> = new java.util.ArrayList<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> <> ( java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . java.util.Collection<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ( ) ) ; java.util.Collections . void ( java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . int ( ) ; int ++ ) { org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress = java.util.List<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress ( int ) ; int[] [ int ] = org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress . int ; org.springframework.data.mapping.model.Label[] [ int ] = org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress . org.springframework.data.mapping.model.Label ; } Label org.springframework.data.mapping.model.Label = new Label ( ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEINTERFACE , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) ) , true ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , STRING , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitLookupSwitchInsn ( org.springframework.data.mapping.model.Label , int[] , org.springframework.data.mapping.model.Label[] ) ; for ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> : java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) { org.springframework.data.mapping.model.MethodVisitor . visitLabel ( java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress ( org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) ) . label ) ; org.springframework.data.mapping.model.MethodVisitor . visitFrame ( Opcodes . F_SAME , NUMBER , null , NUMBER , null ) ; if ( org.springframework.data.mapping.model.PersistentProperty<> . getSetter ( ) . isPresent ( ) || org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . isPresent ( ) ) { void ( org.springframework.data.mapping.model.PersistentEntity<,> , org.springframework.data.mapping.model.PersistentProperty<> , org.springframework.data.mapping.model.MethodVisitor , java.lang.String ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitJumpInsn ( GOTO , org.springframework.data.mapping.model.Label ) ; } } org.springframework.data.mapping.model.MethodVisitor . visitLabel ( org.springframework.data.mapping.model.Label ) ; org.springframework.data.mapping.model.MethodVisitor . visitFrame ( Opcodes . F_SAME , NUMBER , null , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> private static void void ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> , MethodVisitor org.springframework.data.mapping.model.MethodVisitor , java.lang.String java.lang.String ) { java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> = org.springframework.data.mapping.model.PersistentProperty<> . getSetter ( ) ; java.util.Optional<java.lang.reflect.Method> . java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method -> org.springframework.data.mapping.model.PersistentProperty<> . usePropertyAccess ( ) ) . java.util.Optional<java.lang.Object> ( java.lang.reflect.Method -> { if ( boolean ( org.springframework.data.mapping.model.PersistentEntity<,> , java.lang.reflect.Method ) ) { org.springframework.data.mapping.model.MethodVisitor . visitFieldInsn ( GETSTATIC , java.lang.String , java.lang.String ( org.springframework.data.mapping.model.PersistentProperty<> ) , java.lang.String ( java.lang.String ) ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; } else { org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] ; org.springframework.data.mapping.model.MethodVisitor . visitTypeInsn ( CHECKCAST , Type . getInternalName ( java.lang.Class<?> ( java.lang.Class<> ) ) ) ; void ( java.lang.Class<?> ( java.lang.Class<> ) , java.lang.Class<> , org.springframework.data.mapping.model.MethodVisitor ) ; int int = INVOKEVIRTUAL ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; boolean boolean = java.lang.Class<> . boolean ( ) ; if ( boolean ) { int = INVOKEINTERFACE ; } org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( int , Type . getInternalName ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) , java.lang.reflect.Method . java.lang.String ( ) , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.Class<> ) ) , boolean ) ; } return null ; } ) . java.lang.Object ( ( ) { org.springframework.data.mapping.model.PersistentProperty<> . getField ( ) . ifPresent ( it -> { if ( generateSetterMethodHandle ( entity , it ) ) { mv . visitFieldInsn ( GETSTATIC , internalClassName , fieldSetterName ( property ) , referenceName ( JAVA_LANG_INVOKE_METHOD_HANDLE ) ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitMethodInsn ( INVOKEVIRTUAL , JAVA_LANG_INVOKE_METHOD_HANDLE , STRING , String . format ( STRING , referenceName ( JAVA_LANG_OBJECT ) , referenceName ( JAVA_LANG_OBJECT ) ) , false ) ; } else { mv . visitVarInsn ( ALOAD , NUMBER ) ; mv . visitVarInsn ( ALOAD , NUMBER ) ; Class < ? > fieldType = it . getType ( ) ; mv . visitTypeInsn ( CHECKCAST , Type . getInternalName ( autoboxType ( fieldType ) ) ) ; autoboxIfNeeded ( autoboxType ( fieldType ) , fieldType , mv ) ; mv . visitFieldInsn ( PUTFIELD , Type . getInternalName ( it . getDeclaringClass ( ) ) , it . getName ( ) , signatureTypeName ( fieldType ) ) ; } } ) ; return null ; } ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( RETURN ) ; }  <METHOD_END>
<METHOD_START> private static void void ( MethodVisitor org.springframework.data.mapping.model.MethodVisitor ) { org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitLdcInsn ( STRING ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) , false ) ; }  <METHOD_END>
<METHOD_START> private static void void ( MethodVisitor org.springframework.data.mapping.model.MethodVisitor , java.lang.String java.lang.String ) { org.springframework.data.mapping.model.MethodVisitor . visitTypeInsn ( NEW , java.lang.String ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( DUP ) ; org.springframework.data.mapping.model.MethodVisitor . visitLdcInsn ( java.lang.String ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ICONST_1 ) ; org.springframework.data.mapping.model.MethodVisitor . visitTypeInsn ( ANEWARRAY , java.lang.String ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( DUP ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ICONST_0 ) ; org.springframework.data.mapping.model.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( AASTORE ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , java.lang.String , STRING , STRING , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESPECIAL , java.lang.String , STRING , STRING , false ) ; org.springframework.data.mapping.model.MethodVisitor . visitInsn ( ATHROW ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { return boolean ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( java.lang.Class<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( int int ) { return ! java.lang.reflect.Modifier . boolean ( int ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( int int ) { if ( java.lang.reflect.Modifier . boolean ( int ) || java.lang.reflect.Modifier . boolean ( int ) || java.lang.reflect.Modifier . boolean ( int ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.lang.reflect.Field java.lang.reflect.Field ) { return boolean ( org.springframework.data.mapping.model.PersistentEntity<,> , java.lang.reflect.Field ) || java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> , java.lang.reflect.Member java.lang.reflect.Member ) { if ( boolean ( org.springframework.data.mapping.model.PersistentEntity<,> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Member . int ( ) ) || boolean ( java.lang.reflect.Member . int ( ) ) ) { if ( ! java.lang.reflect.Member . java.lang.Class<?> ( ) . java.lang.Package ( ) . boolean ( org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) . getPackage ( ) ) ) { return true ; } } if ( boolean ( java.lang.reflect.Member . java.lang.Class<?> ( ) ) && boolean ( java.lang.reflect.Member . int ( ) ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private static int int ( java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return NUMBER + java.util.List<java.lang.Class<?>> . int ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { return org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) . getName ( ) + java.lang.String + java.lang.Integer . java.lang.String ( org.springframework.data.mapping.model.PersistentEntity<,> . hashCode ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> . boolean ( ) ) { return Type . getInternalName ( java.lang.Class<> ) ; } return java.lang.String ( Type . getInternalName ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> < java.lang.String , org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress > java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ( java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) { java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> < java.lang.String , org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress > java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> = new java.util.HashMap<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> <> ( ) ; for ( PersistentProperty < ? > org.springframework.data.mapping.model.PersistentProperty<?> : java.util.List<org.springframework.data.mapping.model.PersistentProperty<?>> ) { java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> . org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress ( org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) , new org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress ( new Label ( ) , org.springframework.data.mapping.model.PersistentProperty<> . getName ( ) . hashCode ( ) ) ) ; } return java.util.Map<java.lang.String,org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress> ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> . boolean ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) { return java.lang.Boolean .class ; } if ( java.lang.Class<> . boolean ( java.lang.Byte . java.lang.Class<java.lang.Byte> ) ) { return java.lang.Byte .class ; } if ( java.lang.Class<> . boolean ( java.lang.Character . java.lang.Class<java.lang.Character> ) ) { return java.lang.Character .class ; } if ( java.lang.Class<> . boolean ( java.lang.Double . java.lang.Class<java.lang.Double> ) ) { return java.lang.Double .class ; } if ( java.lang.Class<> . boolean ( java.lang.Float . java.lang.Class<java.lang.Float> ) ) { return java.lang.Float .class ; } if ( java.lang.Class<> . boolean ( java.lang.Integer . java.lang.Class<java.lang.Integer> ) ) { return java.lang.Integer .class ; } if ( java.lang.Class<> . boolean ( java.lang.Long . java.lang.Class<java.lang.Long> ) ) { return java.lang.Long .class ; } if ( java.lang.Class<> . boolean ( java.lang.Short . java.lang.Class<java.lang.Short> ) ) { return java.lang.Short .class ; } if ( java.lang.Class<> . boolean ( java.lang.Void . java.lang.Class<java.lang.Void> ) ) { return java.lang.Void .class ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , MethodVisitor org.springframework.data.mapping.model.MethodVisitor ) { if ( java.lang.Class<> . boolean ( java.lang.Boolean .class ) && java.lang.Class<> . boolean ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) && java.lang.Class<> . boolean ( java.lang.Boolean .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Byte .class ) && java.lang.Class<> . boolean ( java.lang.Byte . java.lang.Class<java.lang.Byte> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Byte . java.lang.Class<java.lang.Byte> ) && java.lang.Class<> . boolean ( java.lang.Byte .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Character .class ) && java.lang.Class<> . boolean ( java.lang.Character . java.lang.Class<java.lang.Character> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Character . java.lang.Class<java.lang.Character> ) && java.lang.Class<> . boolean ( java.lang.Character .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Double .class ) && java.lang.Class<> . boolean ( java.lang.Double . java.lang.Class<java.lang.Double> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Double . java.lang.Class<java.lang.Double> ) && java.lang.Class<> . boolean ( java.lang.Double .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Float .class ) && java.lang.Class<> . boolean ( java.lang.Float . java.lang.Class<java.lang.Float> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Float . java.lang.Class<java.lang.Float> ) && java.lang.Class<> . boolean ( java.lang.Float .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Integer .class ) && java.lang.Class<> . boolean ( java.lang.Integer . java.lang.Class<java.lang.Integer> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Integer . java.lang.Class<java.lang.Integer> ) && java.lang.Class<> . boolean ( java.lang.Integer .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Long .class ) && java.lang.Class<> . boolean ( java.lang.Long . java.lang.Class<java.lang.Long> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Long . java.lang.Class<java.lang.Long> ) && java.lang.Class<> . boolean ( java.lang.Long .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Short .class ) && java.lang.Class<> . boolean ( java.lang.Short . java.lang.Class<java.lang.Short> ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; } if ( java.lang.Class<> . boolean ( java.lang.Short . java.lang.Class<java.lang.Short> ) && java.lang.Class<> . boolean ( java.lang.Short .class ) ) { org.springframework.data.mapping.model.MethodVisitor . visitMethodInsn ( INVOKESTATIC , STRING , STRING , STRING , false ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> . boolean ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Byte . java.lang.Class<java.lang.Byte> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Character . java.lang.Class<java.lang.Character> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Double . java.lang.Class<java.lang.Double> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Float . java.lang.Class<java.lang.Float> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Integer . java.lang.Class<java.lang.Integer> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Long . java.lang.Class<java.lang.Long> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Short . java.lang.Class<java.lang.Short> ) ) { return STRING ; } if ( java.lang.Class<> . boolean ( java.lang.Void . java.lang.Class<java.lang.Void> ) ) { return STRING ; } return java.lang.String ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress ) { return ( int < org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress . int ) ? - NUMBER : ( ( int == org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory.PropertyStackAddress . int ) ? NUMBER : NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , byte [] byte[] , int int , int int , PersistentEntity < ? , ? > org.springframework.data.mapping.model.PersistentEntity<?,?> ) { java.lang.ClassLoader java.lang.ClassLoader = org.springframework.data.mapping.model.PersistentEntity<,> . getType ( ) . getClassLoader ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) ; try { java.lang.Class<? extends org.springframework.data.mapping.model.PersistentEntity> < ? extends PersistentEntity > java.lang.Class<? extends org.springframework.data.mapping.model.PersistentEntity> = org.springframework.data.mapping.model.PersistentEntity<,> . getClass ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<> , STRING , java.lang.String .class , byte [] .class , java.lang.Integer . java.lang.Class<java.lang.Integer> , java.lang.Integer . java.lang.Class<java.lang.Integer> , java.security.ProtectionDomain .class ) ; java.lang.reflect.Method . void ( true ) ; return ( java.lang.Class<?> < ? > ) java.lang.reflect.Method . java.lang.Object ( java.lang.ClassLoader , java.lang.String , byte[] , int , int , java.lang.Class<> . java.security.ProtectionDomain ( ) ) ; } catch ( java.lang.ReflectiveOperationException java.lang.ReflectiveOperationException ) { throw new java.lang.IllegalStateException ( java.lang.ReflectiveOperationException ) ; } }  <METHOD_END>
