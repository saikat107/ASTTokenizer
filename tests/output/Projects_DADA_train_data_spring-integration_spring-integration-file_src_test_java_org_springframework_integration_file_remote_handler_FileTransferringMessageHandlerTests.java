<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public < F > void void ( ) java.lang.Exception { SessionFactory < F > org.springframework.integration.file.remote.handler.SessionFactory<F> = mock ( SessionFactory .class ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = mock ( Session .class ) ; when ( org.springframework.integration.file.remote.handler.SessionFactory<F> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.handler.Session<F> ) ; doAnswer ( invocation -> { String path = invocation . getArgument ( NUMBER ) ; assertFalse ( path . startsWith ( STRING ) ) ; return null ; } ) . when ( org.springframework.integration.file.remote.handler.Session<F> ) . rename ( Mockito . anyString ( ) , Mockito . anyString ( ) ) ; ExpressionParser org.springframework.integration.file.remote.handler.ExpressionParser = new SpelExpressionParser ( ) ; FileTransferringMessageHandler < F > org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> = new FileTransferringMessageHandler < F > ( org.springframework.integration.file.remote.handler.SessionFactory<F> ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setRemoteDirectoryExpression ( org.springframework.integration.file.remote.handler.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public < F > void void ( ) java.lang.Exception { SessionFactory < F > org.springframework.integration.file.remote.handler.SessionFactory<F> = mock ( SessionFactory .class ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = mock ( Session .class ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; when ( org.springframework.integration.file.remote.handler.SessionFactory<F> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.handler.Session<F> ) ; doAnswer ( invocation -> { temporaryPath . set ( invocation . getArgument ( NUMBER ) ) ; finalPath . set ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.file.remote.handler.Session<F> ) . rename ( Mockito . anyString ( ) , Mockito . anyString ( ) ) ; FileTransferringMessageHandler < F > org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> = new FileTransferringMessageHandler < F > ( org.springframework.integration.file.remote.handler.SessionFactory<F> ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setTemporaryRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) . java.lang.String ( NUMBER , NUMBER ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) . java.lang.String ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public < F > void void ( ) java.lang.Exception { SessionFactory < F > org.springframework.integration.file.remote.handler.SessionFactory<F> = mock ( SessionFactory .class ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = mock ( Session .class ) ; when ( org.springframework.integration.file.remote.handler.SessionFactory<F> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.handler.Session<F> ) ; doAnswer ( invocation -> { String path = invocation . getArgument ( NUMBER ) ; assertFalse ( path . startsWith ( STRING ) ) ; return null ; } ) . when ( org.springframework.integration.file.remote.handler.Session<F> ) . rename ( Mockito . anyString ( ) , Mockito . anyString ( ) ) ; ExpressionParser org.springframework.integration.file.remote.handler.ExpressionParser = new SpelExpressionParser ( ) ; FileTransferringMessageHandler < F > org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> = new FileTransferringMessageHandler < F > ( org.springframework.integration.file.remote.handler.SessionFactory<F> ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setRemoteDirectoryExpression ( org.springframework.integration.file.remote.handler.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.file.remote.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , null ) . build ( ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . handleMessage ( org.springframework.integration.file.remote.handler.Message<> ) ; verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test ( expected = java.lang.IllegalArgumentException .class ) public < F > void void ( ) java.lang.Exception { SessionFactory < F > org.springframework.integration.file.remote.handler.SessionFactory<F> = mock ( SessionFactory .class ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = mock ( Session .class ) ; when ( org.springframework.integration.file.remote.handler.SessionFactory<F> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.handler.Session<F> ) ; ExpressionParser org.springframework.integration.file.remote.handler.ExpressionParser = new SpelExpressionParser ( ) ; FileTransferringMessageHandler < F > org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> = new FileTransferringMessageHandler < F > ( org.springframework.integration.file.remote.handler.SessionFactory<F> ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setRemoteDirectoryExpression ( org.springframework.integration.file.remote.handler.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setTemporaryFileSuffix ( null ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . onInit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public < F > void void ( ) java.lang.Exception { SessionFactory < F > org.springframework.integration.file.remote.handler.SessionFactory<F> = mock ( SessionFactory .class ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = mock ( Session .class ) ; when ( org.springframework.integration.file.remote.handler.SessionFactory<F> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.handler.Session<F> ) ; ExpressionParser org.springframework.integration.file.remote.handler.ExpressionParser = new SpelExpressionParser ( ) ; FileTransferringMessageHandler < F > org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> = new FileTransferringMessageHandler < F > ( org.springframework.integration.file.remote.handler.SessionFactory<F> ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setRemoteDirectoryExpression ( org.springframework.integration.file.remote.handler.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setUseTemporaryFileName ( false ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.file.remote.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , null ) . build ( ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . handleMessage ( org.springframework.integration.file.remote.handler.Message<> ) ; verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . rename ( Mockito . anyString ( ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public < F > void void ( ) java.lang.Exception { SessionFactory < F > org.springframework.integration.file.remote.handler.SessionFactory<F> = mock ( SessionFactory .class ) ; CachingSessionFactory < F > org.springframework.integration.file.remote.handler.CachingSessionFactory<F> = new CachingSessionFactory < F > ( org.springframework.integration.file.remote.handler.SessionFactory<F> , NUMBER ) ; FileTransferringMessageHandler < F > org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> = new FileTransferringMessageHandler < F > ( org.springframework.integration.file.remote.handler.CachingSessionFactory<F> ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setBeanFactory ( mock ( BeanFactory .class ) ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = org.springframework.integration.file.remote.handler.Session<java.lang.Object> ( ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = org.springframework.integration.file.remote.handler.Session<java.lang.Object> ( ) ; Session < F > org.springframework.integration.file.remote.handler.Session<F> = org.springframework.integration.file.remote.handler.Session<java.lang.Object> ( ) ; when ( org.springframework.integration.file.remote.handler.SessionFactory<F> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.handler.Session<F> , org.springframework.integration.file.remote.handler.Session<F> , org.springframework.integration.file.remote.handler.Session<F> ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . afterPropertiesSet ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { try { org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<F> . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } } verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; verify ( org.springframework.integration.file.remote.handler.Session<F> , times ( NUMBER ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; SimplePool < ? > org.springframework.integration.file.remote.handler.SimplePool<?> = TestUtils . getPropertyValue ( org.springframework.integration.file.remote.handler.CachingSessionFactory<F> , STRING , SimplePool .class ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.handler.SimplePool<> . getAllocatedCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.handler.SimplePool<> . getIdleCount ( ) ) ; assertSame ( org.springframework.integration.file.remote.handler.Session<F> , TestUtils . getPropertyValue ( org.springframework.integration.file.remote.handler.SimplePool<> , STRING , java.util.Set .class ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> private < F > org.springframework.integration.file.remote.handler.Session<F> < F > org.springframework.integration.file.remote.handler.Session<F> ( ) java.io.IOException { @ java.lang.SuppressWarnings ( STRING ) Session < F > org.springframework.integration.file.remote.handler.Session<F> = mock ( Session .class ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.integration.file.remote.handler.Session<F> ) . write ( any ( java.io.InputStream .class ) , anyString ( ) ) ; when ( org.springframework.integration.file.remote.handler.Session<F> . isOpen ( ) ) . thenReturn ( false ) ; return org.springframework.integration.file.remote.handler.Session<F> ; }  <METHOD_END>
