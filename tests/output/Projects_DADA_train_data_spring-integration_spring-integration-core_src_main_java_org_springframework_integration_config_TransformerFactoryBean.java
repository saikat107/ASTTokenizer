<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.Object , STRING ) ; Transformer org.springframework.integration.config.Transformer = null ; if ( java.lang.Object instanceof Transformer ) { org.springframework.integration.config.Transformer = ( Transformer ) java.lang.Object ; } else { this . checkForIllegalTarget ( java.lang.Object , java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.Transformer = new MethodInvokingTransformer ( java.lang.Object , java.lang.String ) ; } else { org.springframework.integration.config.Transformer = new MethodInvokingTransformer ( java.lang.Object ) ; } } return this . org.springframework.integration.config.MessageTransformingHandler ( org.springframework.integration.config.Transformer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( Expression org.springframework.integration.config.Expression ) { Transformer org.springframework.integration.config.Transformer = new ExpressionEvaluatingTransformer ( org.springframework.integration.config.Expression ) ; MessageTransformingHandler org.springframework.integration.config.MessageTransformingHandler = this . org.springframework.integration.config.MessageTransformingHandler ( org.springframework.integration.config.Transformer ) ; org.springframework.integration.config.MessageTransformingHandler . setPrimaryExpression ( org.springframework.integration.config.Expression ) ; return org.springframework.integration.config.MessageTransformingHandler ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.MessageTransformingHandler org.springframework.integration.config.MessageTransformingHandler ( Transformer org.springframework.integration.config.Transformer ) { MessageTransformingHandler org.springframework.integration.config.MessageTransformingHandler = new MessageTransformingHandler ( org.springframework.integration.config.Transformer ) ; this . void ( org.springframework.integration.config.MessageTransformingHandler ) ; return org.springframework.integration.config.MessageTransformingHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { if ( this . java.lang.Long != null ) { org.springframework.integration.config.AbstractMessageProducingHandler . setSendTimeout ( this . java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends org.springframework.integration.config.MessageHandler> < ? extends MessageHandler > java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) { return MessageTransformingHandler .class ; }  <METHOD_END>
