<METHOD_START> public void ( JerseyProperties org.springframework.boot.autoconfigure.jersey.JerseyProperties , ResourceConfig org.springframework.boot.autoconfigure.jersey.ResourceConfig , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer> < ResourceConfigCustomizer > > org.springframework.boot.autoconfigure.jersey.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer>> ) { this . org.springframework.boot.autoconfigure.jersey.JerseyProperties = org.springframework.boot.autoconfigure.jersey.JerseyProperties ; this . org.springframework.boot.autoconfigure.jersey.ResourceConfig = org.springframework.boot.autoconfigure.jersey.ResourceConfig ; this . java.util.List<org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer> = org.springframework.boot.autoconfigure.jersey.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( StringUtils . hasLength ( this . org.springframework.boot.autoconfigure.jersey.JerseyProperties . getApplicationPath ( ) ) ) { this . java.lang.String = java.lang.String ( this . org.springframework.boot.autoconfigure.jersey.JerseyProperties . getApplicationPath ( ) ) ; } else { this . java.lang.String = java.lang.String ( AnnotationUtils . findAnnotation ( this . org.springframework.boot.autoconfigure.jersey.ResourceConfig . getClass ( ) , ApplicationPath .class ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.util.List<org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer> != null ) { AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer> ) ; for ( ResourceConfigCustomizer org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer : this . java.util.List<org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer> ) { org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer . customize ( this . org.springframework.boot.autoconfigure.jersey.ResourceConfig ) ; } } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.RequestContextFilter> < RequestContextFilter > org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.RequestContextFilter> ( ) { FilterRegistrationBean < RequestContextFilter > org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.RequestContextFilter> = new FilterRegistrationBean <> ( ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.RequestContextFilter> . setFilter ( new RequestContextFilter ( ) ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.RequestContextFilter> . setOrder ( this . org.springframework.boot.autoconfigure.jersey.JerseyProperties . getFilter ( ) . getOrder ( ) - NUMBER ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.RequestContextFilter> . setName ( STRING ) ; return org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.RequestContextFilter> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) @ ConditionalOnProperty ( prefix = STRING , name = STRING , havingValue = STRING ) public org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> < ServletContainer > org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> ( ) { FilterRegistrationBean < ServletContainer > org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> = new FilterRegistrationBean <> ( ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . setFilter ( new ServletContainer ( this . org.springframework.boot.autoconfigure.jersey.ResourceConfig ) ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . setUrlPatterns ( java.util.Arrays . java.util.List<java.lang.String> ( this . java.lang.String ) ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . setOrder ( this . org.springframework.boot.autoconfigure.jersey.JerseyProperties . getFilter ( ) . getOrder ( ) ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . addInitParameter ( ServletProperties . FILTER_CONTEXT_PATH , java.lang.String ( this . java.lang.String ) ) ; void ( org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . setName ( STRING ) ; org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . setDispatcherTypes ( java.util.EnumSet . java.util.EnumSet<E> ( DispatcherType .class ) ) ; return org.springframework.boot.autoconfigure.jersey.FilterRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( STRING ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) @ ConditionalOnProperty ( prefix = STRING , name = STRING , havingValue = STRING , matchIfMissing = true ) public org.springframework.boot.autoconfigure.jersey.ServletRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> < ServletContainer > org.springframework.boot.autoconfigure.jersey.ServletRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> ( ) { ServletRegistrationBean < ServletContainer > org.springframework.boot.autoconfigure.jersey.ServletRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> = new ServletRegistrationBean <> ( new ServletContainer ( this . org.springframework.boot.autoconfigure.jersey.ResourceConfig ) , this . java.lang.String ) ; void ( org.springframework.boot.autoconfigure.jersey.ServletRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> ) ; org.springframework.boot.autoconfigure.jersey.ServletRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . setName ( java.lang.String ( ) ) ; org.springframework.boot.autoconfigure.jersey.ServletRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> . setLoadOnStartup ( this . org.springframework.boot.autoconfigure.jersey.JerseyProperties . getServlet ( ) . getLoadOnStartup ( ) ) ; return org.springframework.boot.autoconfigure.jersey.ServletRegistrationBean<org.springframework.boot.autoconfigure.jersey.ServletContainer> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return ClassUtils . getUserClass ( this . org.springframework.boot.autoconfigure.jersey.ResourceConfig . getClass ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( RegistrationBean org.springframework.boot.autoconfigure.jersey.RegistrationBean ) { for ( java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . org.springframework.boot.autoconfigure.jersey.JerseyProperties . getInit ( ) . entrySet ( ) ) { org.springframework.boot.autoconfigure.jersey.RegistrationBean . addInitParameter ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( ApplicationPath org.springframework.boot.autoconfigure.jersey.ApplicationPath ) { if ( org.springframework.boot.autoconfigure.jersey.ApplicationPath == null ) { return STRING ; } return java.lang.String ( org.springframework.boot.autoconfigure.jersey.ApplicationPath . value ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } return java.lang.String . boolean ( STRING ) ? STRING : java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.autoconfigure.jersey.ServletContext ) { java.lang.String java.lang.String = java.lang.String ( ) ; ServletRegistration org.springframework.boot.autoconfigure.jersey.ServletRegistration = org.springframework.boot.autoconfigure.jersey.ServletContext . getServletRegistration ( java.lang.String ) ; if ( org.springframework.boot.autoconfigure.jersey.ServletRegistration != null ) { if ( org.springframework.boot.autoconfigure.jersey.Log . isInfoEnabled ( ) ) { org.springframework.boot.autoconfigure.jersey.Log . info ( STRING + java.lang.String + STRING ) ; } org.springframework.boot.autoconfigure.jersey.ServletRegistration . setInitParameters ( this . org.springframework.boot.autoconfigure.jersey.JerseyProperties . getInit ( ) ) ; org.springframework.boot.autoconfigure.jersey.ServletRegistration . setInitParameter ( CommonProperties . METAINF_SERVICES_LOOKUP_DISABLE , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.autoconfigure.jersey.ServletContext ) throws org.springframework.boot.autoconfigure.jersey.ServletException { org.springframework.boot.autoconfigure.jersey.ServletContext . setInitParameter ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer ( final ObjectMapper org.springframework.boot.autoconfigure.jersey.ObjectMapper ) { void ( org.springframework.boot.autoconfigure.jersey.ObjectMapper ) ; return new ResourceConfigCustomizer ( ) { @ java.lang.Override public void void ( ResourceConfig org.springframework.boot.autoconfigure.jersey.ResourceConfig ) { org.springframework.boot.autoconfigure.jersey.ResourceConfig . register ( JacksonFeature .class ) ; org.springframework.boot.autoconfigure.jersey.ResourceConfig . register ( new org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration.JacksonResourceConfigCustomizer.ObjectMapperContextResolver ( org.springframework.boot.autoconfigure.jersey.ObjectMapper ) , ContextResolver .class ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceConfig org.springframework.boot.autoconfigure.jersey.ResourceConfig ) { org.springframework.boot.autoconfigure.jersey.ResourceConfig . register ( JacksonFeature .class ) ; org.springframework.boot.autoconfigure.jersey.ResourceConfig . register ( new org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration.JacksonResourceConfigCustomizer.ObjectMapperContextResolver ( org.springframework.boot.autoconfigure.jersey.ObjectMapper ) , ContextResolver .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ObjectMapper org.springframework.boot.autoconfigure.jersey.ObjectMapper ) { if ( ClassUtils . isPresent ( java.lang.String , java.lang.Class<? extends org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration.JacksonResourceConfigCustomizer> ( ) . java.lang.ClassLoader ( ) ) ) { new org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration.JacksonResourceConfigCustomizer.ObjectMapperCustomizer ( ) . void ( org.springframework.boot.autoconfigure.jersey.ObjectMapper ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ObjectMapper org.springframework.boot.autoconfigure.jersey.ObjectMapper ) { JaxbAnnotationIntrospector org.springframework.boot.autoconfigure.jersey.JaxbAnnotationIntrospector = new JaxbAnnotationIntrospector ( org.springframework.boot.autoconfigure.jersey.ObjectMapper . getTypeFactory ( ) ) ; org.springframework.boot.autoconfigure.jersey.ObjectMapper . setAnnotationIntrospectors ( org.springframework.boot.autoconfigure.jersey.AnnotationIntrospector ( org.springframework.boot.autoconfigure.jersey.ObjectMapper . getSerializationConfig ( ) , org.springframework.boot.autoconfigure.jersey.JaxbAnnotationIntrospector ) , org.springframework.boot.autoconfigure.jersey.AnnotationIntrospector ( org.springframework.boot.autoconfigure.jersey.ObjectMapper . getDeserializationConfig ( ) , org.springframework.boot.autoconfigure.jersey.JaxbAnnotationIntrospector ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jersey.AnnotationIntrospector org.springframework.boot.autoconfigure.jersey.AnnotationIntrospector ( MapperConfig < ? > org.springframework.boot.autoconfigure.jersey.MapperConfig<?> , JaxbAnnotationIntrospector org.springframework.boot.autoconfigure.jersey.JaxbAnnotationIntrospector ) { return AnnotationIntrospector . pair ( org.springframework.boot.autoconfigure.jersey.MapperConfig<> . getAnnotationIntrospector ( ) , org.springframework.boot.autoconfigure.jersey.JaxbAnnotationIntrospector ) ; }  <METHOD_END>
<METHOD_START> private void ( ObjectMapper org.springframework.boot.autoconfigure.jersey.ObjectMapper ) { this . org.springframework.boot.autoconfigure.jersey.ObjectMapper = org.springframework.boot.autoconfigure.jersey.ObjectMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.jersey.ObjectMapper org.springframework.boot.autoconfigure.jersey.ObjectMapper ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . org.springframework.boot.autoconfigure.jersey.ObjectMapper ; }  <METHOD_END>
