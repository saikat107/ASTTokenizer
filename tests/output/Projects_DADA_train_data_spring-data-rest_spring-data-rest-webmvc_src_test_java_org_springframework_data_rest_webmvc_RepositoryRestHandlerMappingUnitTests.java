<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.RepositoryRestConfiguration = new RepositoryRestConfiguration ( new ProjectionDefinitionConfiguration ( ) , new MetadataConfiguration ( ) , mock ( EnumTranslationConfiguration .class ) ) ; org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping = new RepositoryRestHandlerMapping ( org.springframework.data.rest.webmvc.ResourceMappings , org.springframework.data.rest.webmvc.RepositoryRestConfiguration , org.springframework.data.rest.webmvc.Repositories ) ; org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . setApplicationContext ( org.springframework.data.rest.webmvc.AnnotationConfigWebApplicationContext ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( ) ; java.lang.reflect.Method = RepositoryEntityController .class . java.lang.reflect.Method ( STRING , RootResourceInformation .class , DefaultedPageable .class , Sort .class , PersistentEntityResourceAssembler .class ) ; java.lang.reflect.Method = RepositoryController .class . java.lang.reflect.Method ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new RepositoryRestHandlerMapping ( null , org.springframework.data.rest.webmvc.RepositoryRestConfiguration ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new RepositoryRestHandlerMapping ( org.springframework.data.rest.webmvc.ResourceMappings , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( STRING ) ) . thenReturn ( true ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . afterPropertiesSet ( ) ; HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod . getMethod ( ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( STRING ) ) . thenReturn ( true ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestConfiguration . setBasePath ( STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . afterPropertiesSet ( ) ; HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod . getMethod ( ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestConfiguration . setBasePath ( STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . afterPropertiesSet ( ) ; HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod . getMethod ( ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( STRING ) ) . thenReturn ( true ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestConfiguration . setBasePath ( STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . afterPropertiesSet ( ) ; HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod . getMethod ( ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( STRING ) ) . thenReturn ( true ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestConfiguration . setBasePath ( STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . afterPropertiesSet ( ) ; HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod . getMethod ( ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.data.rest.webmvc.RepositoryRestConfiguration . setBasePath ( STRING ) ; HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING ) ; when ( org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( STRING ) ) . thenReturn ( true ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , java.lang.String ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest . setServletPath ( java.lang.String ) ; org.springframework.data.rest.webmvc.RepositoryRestConfiguration . setBasePath ( java.lang.String ) ; HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . lookupHandlerMethod ( STRING , org.springframework.data.rest.webmvc.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.HandlerMethod ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( STRING ) ) . thenReturn ( true ) ; org.springframework.data.rest.webmvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping . getHandler ( org.springframework.data.rest.webmvc.MockHttpServletRequest ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new RepositoryRestHandlerMapping ( org.springframework.data.rest.webmvc.ResourceMappings , org.springframework.data.rest.webmvc.RepositoryRestConfiguration ) ; }  <METHOD_END>
