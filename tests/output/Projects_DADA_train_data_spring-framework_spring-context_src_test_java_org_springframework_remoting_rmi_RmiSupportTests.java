<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean = new org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean ( ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean .class ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( STRING , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . isSingleton ( ) ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) instanceof org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean = ( org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) ; org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean . void ( STRING ) ; assertEquals ( org.springframework.remoting.rmi.RmiSupportTests.RemoteBean . java.lang.String , STRING ) ; assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.RemoteException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectIOException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.UnknownHostException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.NoSuchObjectException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.StubNotFoundException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.MarshalException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.UnmarshalException .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean = new org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean ( ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean .class ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) instanceof org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean = ( org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) ; try { org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean . void ( java.lang.Class<> . java.lang.String ( ) ) ; fail ( STRING + java.lang.Class<> . java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Class<> . boolean ( java.lang.Exception ) ) { } else { throw java.lang.Exception ; } } assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectIOException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.UnknownHostException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.NoSuchObjectException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.StubNotFoundException .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean = new org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean ( ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean .class ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setRefreshStubOnConnectFailure ( true ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) instanceof org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean = ( org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) ; try { org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean . void ( java.lang.Class<> . java.lang.String ( ) ) ; fail ( STRING + java.lang.Class<> . java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Class<> . boolean ( java.lang.Exception ) ) { } else { throw java.lang.Exception ; } } assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean = new org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean ( ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean .class ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) instanceof org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean = ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) ; assertFalse ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean instanceof org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . void ( STRING ) ; assertEquals ( org.springframework.remoting.rmi.RmiSupportTests.RemoteBean . java.lang.String , STRING ) ; assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean = new org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean ( ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IWrongBusinessBean .class ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) instanceof org.springframework.remoting.rmi.RmiSupportTests.IWrongBusinessBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IWrongBusinessBean org.springframework.remoting.rmi.RmiSupportTests.IWrongBusinessBean = ( org.springframework.remoting.rmi.RmiSupportTests.IWrongBusinessBean ) org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) ; assertFalse ( org.springframework.remoting.rmi.RmiSupportTests.IWrongBusinessBean instanceof org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) ; try { org.springframework.remoting.rmi.RmiSupportTests.IWrongBusinessBean . void ( STRING ) ; fail ( STRING ) ; } catch ( RemoteProxyFailureException org.springframework.remoting.rmi.RemoteProxyFailureException ) { assertTrue ( org.springframework.remoting.rmi.RemoteProxyFailureException . getCause ( ) instanceof java.lang.NoSuchMethodException ) ; assertTrue ( org.springframework.remoting.rmi.RemoteProxyFailureException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.remoting.rmi.RemoteProxyFailureException . getMessage ( ) . contains ( STRING ) ) ; } assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.RemoteException .class , RemoteAccessException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectIOException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.UnknownHostException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.NoSuchObjectException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.StubNotFoundException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean = new org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean ( ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean .class ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) instanceof org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean = ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) ; assertFalse ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean instanceof org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) ; try { org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . void ( java.lang.Class<> . java.lang.String ( ) ) ; fail ( STRING + java.lang.Class<> . java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Class<> . boolean ( java.lang.Exception ) ) { } else { throw java.lang.Exception ; } } assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.RemoteException .class , RemoteAccessException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.ConnectIOException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.UnknownHostException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.NoSuchObjectException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.rmi.StubNotFoundException .class , RemoteConnectFailureException .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean = new org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean ( ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean .class ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . setRefreshStubOnConnectFailure ( true ) ; org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) instanceof org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) ; org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean = ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . getObject ( ) ; assertFalse ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean instanceof org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean ) ; try { org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . void ( java.lang.Class<> . java.lang.String ( ) ) ; fail ( STRING + java.lang.Class<> . java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Class<> . boolean ( java.lang.Exception ) ) { } else { throw java.lang.Exception ; } } if ( RemoteConnectFailureException .class . boolean ( java.lang.Class<> ) ) { assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; } else { assertEquals ( NUMBER , org.springframework.remoting.rmi.RmiSupportTests.CountingRmiProxyFactoryBean . int ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RmiClientInterceptor org.springframework.remoting.rmi.RmiClientInterceptor = new RmiClientInterceptor ( ) ; org.springframework.remoting.rmi.RmiClientInterceptor . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IRemoteBean .class ) ; try { org.springframework.remoting.rmi.RmiClientInterceptor . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { final org.springframework.remoting.rmi.RmiSupportTests.RemoteBean org.springframework.remoting.rmi.RmiSupportTests.RemoteBean = new org.springframework.remoting.rmi.RmiSupportTests.RemoteBean ( ) ; final java.lang.reflect.Method java.lang.reflect.Method = org.springframework.remoting.rmi.RmiSupportTests.RemoteBean . java.lang.Class<? extends org.springframework.remoting.rmi.RmiSupportTests.RemoteBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvocation org.springframework.remoting.rmi.MethodInvocation = new MethodInvocation ( ) { @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ; } @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return new java.lang.Object [] { STRING } ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { throw new java.lang.UnsupportedOperationException ( ) ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.remoting.rmi.RmiSupportTests.RemoteBean ; } @ java.lang.Override public java.lang.reflect.AccessibleObject java.lang.reflect.AccessibleObject ( ) { return java.lang.reflect.Method ; } } ; RemoteInvocation org.springframework.remoting.rmi.RemoteInvocation = new RemoteInvocation ( org.springframework.remoting.rmi.MethodInvocation ) ; assertEquals ( STRING , org.springframework.remoting.rmi.RemoteInvocation . getMethodName ( ) ) ; assertEquals ( STRING , org.springframework.remoting.rmi.RemoteInvocation . getArguments ( ) [ NUMBER ] ) ; assertEquals ( java.lang.String .class , org.springframework.remoting.rmi.RemoteInvocation . getParameterTypes ( ) [ NUMBER ] ) ; org.springframework.remoting.rmi.RemoteInvocation = new RemoteInvocation ( ) ; org.springframework.remoting.rmi.RemoteInvocation . setArguments ( new java.lang.Object [] { STRING } ) ; assertEquals ( STRING , org.springframework.remoting.rmi.RemoteInvocation . getArguments ( ) [ NUMBER ] ) ; org.springframework.remoting.rmi.RemoteInvocation . setMethodName ( STRING ) ; assertEquals ( STRING , org.springframework.remoting.rmi.RemoteInvocation . getMethodName ( ) ) ; org.springframework.remoting.rmi.RemoteInvocation . setParameterTypes ( new java.lang.Class<?> < ? > [] { java.lang.String .class } ) ; assertEquals ( java.lang.String .class , org.springframework.remoting.rmi.RemoteInvocation . getParameterTypes ( ) [ NUMBER ] ) ; org.springframework.remoting.rmi.RemoteInvocation = new RemoteInvocation ( STRING , new java.lang.Class<?> < ? > [] { java.lang.String .class } , new java.lang.Object [] { STRING } ) ; assertEquals ( STRING , org.springframework.remoting.rmi.RemoteInvocation . getArguments ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.remoting.rmi.RemoteInvocation . getMethodName ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.remoting.rmi.RemoteInvocation . getParameterTypes ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return new java.lang.Object [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.remoting.rmi.RmiSupportTests.RemoteBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.AccessibleObject java.lang.reflect.AccessibleObject ( ) { return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; RmiProxyFactoryBean org.springframework.remoting.rmi.RmiProxyFactoryBean = new RmiProxyFactoryBean ( ) { @ java.lang.Override protected java.rmi.Remote java.rmi.Remote ( ) { return new RmiInvocationHandler ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } @ java.lang.Override public java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.rmi.RemoteInvocation ) throws java.rmi.RemoteException { throw new java.rmi.RemoteException ( ) ; } } ; } } ; org.springframework.remoting.rmi.RmiProxyFactoryBean . setServiceInterface ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean .class ) ; org.springframework.remoting.rmi.RmiProxyFactoryBean . setServiceUrl ( java.lang.String ) ; org.springframework.remoting.rmi.RmiProxyFactoryBean . afterPropertiesSet ( ) ; org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean = ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) org.springframework.remoting.rmi.RmiProxyFactoryBean . getObject ( ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . java.lang.String ( ) . boolean ( java.lang.String ) ) ; assertEquals ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . int ( ) , org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . int ( ) ) ; assertTrue ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . boolean ( org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean ) ) ; try { org.springframework.remoting.rmi.RmiSupportTests.IBusinessBean . void ( STRING ) ; fail ( STRING ) ; } catch ( RemoteAccessException org.springframework.remoting.rmi.RemoteAccessException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.rmi.Remote java.rmi.Remote ( ) { return new RmiInvocationHandler ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } @ java.lang.Override public java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.rmi.RemoteInvocation ) throws java.rmi.RemoteException { throw new java.rmi.RemoteException ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.rmi.RemoteInvocation ) throws java.rmi.RemoteException { throw new java.rmi.RemoteException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.rmi.Remote java.rmi.Remote ( ) { int ++ ; return new org.springframework.remoting.rmi.RmiSupportTests.RemoteBean ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.rmi.RemoteException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.rmi.RemoteException { if ( java.lang.String != null && java.lang.String . boolean ( STRING ) ) { java.rmi.RemoteException java.rmi.RemoteException ; try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String ) ; java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.String .class ) ; java.rmi.RemoteException = ( java.rmi.RemoteException ) java.lang.reflect.Constructor<> . newInstance ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.rmi.RemoteException ( STRING + java.lang.String , java.lang.Exception ) ; } throw java.rmi.RemoteException ; } java.lang.String = java.lang.String ; }  <METHOD_END>
