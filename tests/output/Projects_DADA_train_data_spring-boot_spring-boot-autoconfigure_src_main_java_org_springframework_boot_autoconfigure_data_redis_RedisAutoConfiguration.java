<METHOD_START> public void ( RedisProperties org.springframework.boot.autoconfigure.data.redis.RedisProperties , ObjectProvider < RedisSentinelConfiguration > org.springframework.boot.autoconfigure.data.redis.ObjectProvider<org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration> , ObjectProvider < RedisClusterConfiguration > org.springframework.boot.autoconfigure.data.redis.ObjectProvider<org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration> ) { this . org.springframework.boot.autoconfigure.data.redis.RedisProperties = org.springframework.boot.autoconfigure.data.redis.RedisProperties ; this . org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration = org.springframework.boot.autoconfigure.data.redis.ObjectProvider<org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration = org.springframework.boot.autoconfigure.data.redis.ObjectProvider<org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( RedisConnectionFactory .class ) public org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ( ) java.net.UnknownHostException { return org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ( org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ( JedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ) { void ( org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ) ; if ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . isSsl ( ) ) { org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setUseSsl ( true ) ; } org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setDatabase ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getDatabase ( ) ) ; if ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getTimeout ( ) > NUMBER ) { org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setTimeout ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getTimeout ( ) ) ; } return org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ; }  <METHOD_END>
<METHOD_START> private void void ( JedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ) { if ( StringUtils . hasText ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getUrl ( ) ) ) { void ( org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ) ; } else { org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setHostName ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getHost ( ) ) ; org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setPort ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getPort ( ) ) ; if ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getPassword ( ) != null ) { org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setPassword ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getPassword ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( JedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ) { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getUrl ( ) ; if ( java.lang.String . boolean ( STRING ) ) { org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setUseSsl ( true ) ; } try { java.net.URI java.net.URI = new java.net.URI ( java.lang.String ) ; org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setHostName ( java.net.URI . java.lang.String ( ) ) ; org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setPort ( java.net.URI . int ( ) ) ; if ( java.net.URI . java.lang.String ( ) != null ) { java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) ; int int = java.lang.String . int ( STRING ) ; if ( int >= NUMBER ) { java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; } org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory . setPassword ( java.lang.String ) ; } } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String , java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration ( ) { if ( this . org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration != null ) { return this . org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration ; } Sentinel org.springframework.boot.autoconfigure.data.redis.Sentinel = this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getSentinel ( ) ; if ( org.springframework.boot.autoconfigure.data.redis.Sentinel != null ) { RedisSentinelConfiguration org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration = new RedisSentinelConfiguration ( ) ; org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration . master ( org.springframework.boot.autoconfigure.data.redis.Sentinel . getMaster ( ) ) ; org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration . setSentinels ( java.util.List<org.springframework.boot.autoconfigure.data.redis.RedisNode> ( org.springframework.boot.autoconfigure.data.redis.Sentinel ) ) ; return org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration ; } return null ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration ( ) { if ( this . org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration != null ) { return this . org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration ; } if ( this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getCluster ( ) == null ) { return null ; } Cluster org.springframework.boot.autoconfigure.data.redis.Cluster = this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getCluster ( ) ; RedisClusterConfiguration org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration = new RedisClusterConfiguration ( org.springframework.boot.autoconfigure.data.redis.Cluster . getNodes ( ) ) ; if ( org.springframework.boot.autoconfigure.data.redis.Cluster . getMaxRedirects ( ) != null ) { org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration . setMaxRedirects ( org.springframework.boot.autoconfigure.data.redis.Cluster . getMaxRedirects ( ) ) ; } return org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.autoconfigure.data.redis.RedisNode> < RedisNode > java.util.List<org.springframework.boot.autoconfigure.data.redis.RedisNode> ( Sentinel org.springframework.boot.autoconfigure.data.redis.Sentinel ) { java.util.List<org.springframework.boot.autoconfigure.data.redis.RedisNode> < RedisNode > java.util.List<org.springframework.boot.autoconfigure.data.redis.RedisNode> = new java.util.ArrayList<org.springframework.boot.autoconfigure.data.redis.RedisNode> <> ( ) ; for ( java.lang.String java.lang.String : StringUtils . commaDelimitedListToStringArray ( org.springframework.boot.autoconfigure.data.redis.Sentinel . getNodes ( ) ) ) { try { java.lang.String [] java.lang.String[] = StringUtils . split ( java.lang.String , STRING ) ; Assert . state ( java.lang.String[] . int == NUMBER , STRING ) ; java.util.List<org.springframework.boot.autoconfigure.data.redis.RedisNode> . add ( new RedisNode ( java.lang.String[] [ NUMBER ] , java.lang.Integer . java.lang.Integer ( java.lang.String[] [ NUMBER ] ) ) ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw new java.lang.IllegalStateException ( STRING + STRING + java.lang.String + STRING , java.lang.RuntimeException ) ; } } return java.util.List<org.springframework.boot.autoconfigure.data.redis.RedisNode> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.JedisConnectionFactory ( ) { JedisPoolConfig org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig = this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getPool ( ) != null ? org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig ( ) : new JedisPoolConfig ( ) ; if ( org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration ( ) != null ) { return new JedisConnectionFactory ( org.springframework.boot.autoconfigure.data.redis.RedisSentinelConfiguration ( ) , org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig ) ; } if ( org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration ( ) != null ) { return new JedisConnectionFactory ( org.springframework.boot.autoconfigure.data.redis.RedisClusterConfiguration ( ) , org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig ) ; } return new JedisConnectionFactory ( org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig ( ) { JedisPoolConfig org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig = new JedisPoolConfig ( ) ; RedisProperties . RedisProperties RedisProperties.Pool = this . org.springframework.boot.autoconfigure.data.redis.RedisProperties . getPool ( ) ; org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig . setMaxTotal ( RedisProperties.Pool . getMaxActive ( ) ) ; org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig . setMaxIdle ( RedisProperties.Pool . getMaxIdle ( ) ) ; org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig . setMinIdle ( RedisProperties.Pool . getMinIdle ( ) ) ; org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig . setMaxWaitMillis ( RedisProperties.Pool . getMaxWait ( ) ) ; return org.springframework.boot.autoconfigure.data.redis.JedisPoolConfig ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.autoconfigure.data.redis.RedisTemplate<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.boot.autoconfigure.data.redis.RedisTemplate<java.lang.Object,java.lang.Object> ( RedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.RedisConnectionFactory )						throws java.net.UnknownHostException { RedisTemplate < java.lang.Object , java.lang.Object > org.springframework.boot.autoconfigure.data.redis.RedisTemplate<java.lang.Object,java.lang.Object> = new RedisTemplate <> ( ) ; org.springframework.boot.autoconfigure.data.redis.RedisTemplate<java.lang.Object,java.lang.Object> . setConnectionFactory ( org.springframework.boot.autoconfigure.data.redis.RedisConnectionFactory ) ; return org.springframework.boot.autoconfigure.data.redis.RedisTemplate<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( StringRedisTemplate .class ) public org.springframework.boot.autoconfigure.data.redis.StringRedisTemplate org.springframework.boot.autoconfigure.data.redis.StringRedisTemplate ( RedisConnectionFactory org.springframework.boot.autoconfigure.data.redis.RedisConnectionFactory )						throws java.net.UnknownHostException { StringRedisTemplate org.springframework.boot.autoconfigure.data.redis.StringRedisTemplate = new StringRedisTemplate ( ) ; org.springframework.boot.autoconfigure.data.redis.StringRedisTemplate . setConnectionFactory ( org.springframework.boot.autoconfigure.data.redis.RedisConnectionFactory ) ; return org.springframework.boot.autoconfigure.data.redis.StringRedisTemplate ; }  <METHOD_END>
