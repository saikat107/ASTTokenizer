<METHOD_START> public void ( java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> , java.lang.reflect.Type java.lang.reflect.Type , TypeDiscoverer < ? > org.springframework.data.util.TypeDiscoverer<?> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) { super( java.lang.reflect.TypeVariable<> , org.springframework.data.util.TypeDiscoverer<> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ); Assert . notNull ( java.lang.reflect.TypeVariable<> , STRING ) ; this . java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<> ; this . java.lang.reflect.Type = java.lang.reflect.Type ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<T> < T > java.lang.Class<T> ( ) { int int = int ( java.lang.reflect.TypeVariable<> ) ; if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType && int != - NUMBER ) { java.lang.reflect.Type java.lang.reflect.Type = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) [ int ] ; return resolveType ( java.lang.reflect.Type ) ; } return resolveType ( java.lang.reflect.TypeVariable<> ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = resolveType ( java.lang.reflect.Type ) ; java.lang.reflect.TypeVariable<?> < ? > [] java.lang.reflect.TypeVariable<?>[] = java.lang.Class<> . java.lang.reflect.TypeVariable<java.lang.Class<>>[] ( ) ; for ( int int = NUMBER ; int < java.lang.reflect.TypeVariable<?>[] . int ; int ++ ) { if ( java.lang.reflect.TypeVariable<> . boolean ( java.lang.reflect.TypeVariable<?>[] [ int ] ) ) { return int ; } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.util.TypeVariableTypeInformation ) ) { return false ; } org.springframework.data.util.TypeVariableTypeInformation<?> < ? > org.springframework.data.util.TypeVariableTypeInformation<?> = ( org.springframework.data.util.TypeVariableTypeInformation<?> < ? > ) java.lang.Object ; return java.lang.Class<T> ( ) . boolean ( org.springframework.data.util.TypeVariableTypeInformation<> . java.lang.Class<> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int += NUMBER * nullSafeHashCode ( java.lang.Class<T> ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.reflect.TypeVariable<> . java.lang.String ( ) ; }  <METHOD_END>
