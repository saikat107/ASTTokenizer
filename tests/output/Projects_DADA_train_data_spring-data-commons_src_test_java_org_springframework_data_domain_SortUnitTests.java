<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( Sort . by ( STRING ) . iterator ( ) . next ( ) . getDirection ( ) ) . isEqualTo ( Sort . DEFAULT_DIRECTION ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { Sort . by ( Direction . ASC , ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { Sort . by ( Direction . ASC , ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { Sort . by ( Direction . ASC , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { Sort . by ( Direction . ASC ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.domain.Sort = Sort . by ( STRING ) . and ( Sort . by ( STRING ) ) ; assertThat ( org.springframework.data.domain.Sort ) . containsExactly ( new Sort . Sort ( STRING ) , new Sort . Sort ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.domain.Sort = Sort . by ( STRING ) . and ( null ) ; assertThat ( org.springframework.data.domain.Sort ) . containsExactly ( new Sort . Sort ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Order ( Direction . ASC , STRING ) . ignoreCase ( ) . isIgnoreCase ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Order ( Direction . ASC , STRING ) . isIgnoreCase ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Order org.springframework.data.domain.Order = new Order ( STRING ) ; Order org.springframework.data.domain.Order = new Order ( STRING ) . ignoreCase ( ) ; assertThat ( org.springframework.data.domain.Order ) . isNotEqualTo ( org.springframework.data.domain.Order ) ; assertThat ( org.springframework.data.domain.Order . hashCode ( ) ) . isNotEqualTo ( org.springframework.data.domain.Order . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Order ( STRING ) . nullsFirst ( ) . getNullHandling ( ) ) . isEqualTo ( NULLS_FIRST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Order ( STRING ) . nullsLast ( ) . getNullHandling ( ) ) . isEqualTo ( NULLS_LAST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Order ( STRING ) . nullsNative ( ) . getNullHandling ( ) ) . isEqualTo ( NATIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Order ( STRING ) . getNullHandling ( ) ) . isEqualTo ( NATIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Order org.springframework.data.domain.Order = new Order ( Direction . DESC , STRING ) . nullsFirst ( ) . ignoreCase ( ) ; Order org.springframework.data.domain.Order = org.springframework.data.domain.Order . withProperty ( STRING ) ; assertThat ( org.springframework.data.domain.Order . getProperty ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.domain.Order . getDirection ( ) ) . isEqualTo ( org.springframework.data.domain.Order . getDirection ( ) ) ; assertThat ( org.springframework.data.domain.Order . getNullHandling ( ) ) . isEqualTo ( org.springframework.data.domain.Order . getNullHandling ( ) ) ; assertThat ( org.springframework.data.domain.Order . isIgnoreCase ( ) ) . isEqualTo ( org.springframework.data.domain.Order . isIgnoreCase ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( java.lang.IllegalArgumentException .class ) . isThrownBy ( ( ) Sort . by ( ( Direction ) null , STRING ) ) . withMessageContaining ( STRING ) ; }  <METHOD_END>
