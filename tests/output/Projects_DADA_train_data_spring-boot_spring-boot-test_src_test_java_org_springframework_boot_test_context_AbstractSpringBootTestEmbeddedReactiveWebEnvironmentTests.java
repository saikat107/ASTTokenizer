<METHOD_START> public org.springframework.boot.test.context.ReactiveWebApplicationContext org.springframework.boot.test.context.ReactiveWebApplicationContext ( ) { return this . org.springframework.boot.test.context.ReactiveWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . int ) . isNotEqualTo ( NUMBER ) . isNotEqualTo ( NUMBER ) ; WebTestClient . bindToServer ( ) . baseUrl ( STRING + this . int ) . build ( ) . get ( ) . uri ( STRING ) . exchange ( ) . expectBody ( java.lang.String .class ) . value ( ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.test.context.WebTestClient . get ( ) . uri ( STRING ) . exchange ( ) . expectBody ( java.lang.String .class ) . value ( ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = this . org.springframework.boot.test.context.TestRestTemplate . getForObject ( STRING , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.context.HttpHandler org.springframework.boot.test.context.HttpHandler ( ApplicationContext org.springframework.boot.test.context.ApplicationContext ) { return WebHttpHandlerBuilder . applicationContext ( org.springframework.boot.test.context.ApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.context.ReactiveWebServerFactory org.springframework.boot.test.context.ReactiveWebServerFactory ( ) { TomcatReactiveWebServerFactory org.springframework.boot.test.context.TomcatReactiveWebServerFactory = new TomcatReactiveWebServerFactory ( ) ; org.springframework.boot.test.context.TomcatReactiveWebServerFactory . setPort ( this . int ) ; return org.springframework.boot.test.context.TomcatReactiveWebServerFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.boot.test.context.PropertySourcesPlaceholderConfigurer org.springframework.boot.test.context.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.boot.test.context.Mono<java.lang.String> < java.lang.String > org.springframework.boot.test.context.Mono<java.lang.String> ( ) { return Mono . just ( STRING ) ; }  <METHOD_END>
