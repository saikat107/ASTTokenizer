<METHOD_START> public void ( StateRepository < ? extends RepositoryState > org.springframework.statemachine.data.StateRepository<? extends org.springframework.statemachine.data.RepositoryState> , TransitionRepository < ? extends RepositoryTransition > org.springframework.statemachine.data.TransitionRepository<? extends org.springframework.statemachine.data.RepositoryTransition> ) { this . org.springframework.statemachine.data.StateRepository<? extends org.springframework.statemachine.data.RepositoryState> = org.springframework.statemachine.data.StateRepository<> ; this . org.springframework.statemachine.data.TransitionRepository<? extends org.springframework.statemachine.data.RepositoryTransition> = org.springframework.statemachine.data.TransitionRepository<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> ( ) { return org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) { ConfigurationData < java.lang.String , java.lang.String > org.springframework.statemachine.data.ConfigurationData<java.lang.String,java.lang.String> = new ConfigurationData <> ( ) ; java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> <> ( ) ; for ( RepositoryState org.springframework.statemachine.data.RepositoryState : org.springframework.statemachine.data.StateRepository<> . findByMachineId ( java.lang.String == null ? STRING : java.lang.String ) ) { StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> = null ; java.lang.String java.lang.String = org.springframework.statemachine.data.RepositoryState . getSubmachineId ( ) ; if ( java.lang.String != null ) { org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> ( java.lang.String ) ; } java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> < ? extends RepositoryAction > java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> = org.springframework.statemachine.data.RepositoryState . getStateActions ( ) ; if ( java.util.Set<> != null ) { for ( RepositoryAction org.springframework.statemachine.data.RepositoryAction : java.util.Set<> ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = null ; if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ) { org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = resolveAction ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ; } else if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) { SpelExpressionParser org.springframework.statemachine.data.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.SpelExpressionParser . parseExpression ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) ; } if ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> != null ) { java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> ) ; } } } java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> < ? extends RepositoryAction > java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> = org.springframework.statemachine.data.RepositoryState . getEntryActions ( ) ; if ( java.util.Set<> != null ) { for ( RepositoryAction org.springframework.statemachine.data.RepositoryAction : java.util.Set<> ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = null ; if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ) { org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = resolveAction ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ; } else if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) { SpelExpressionParser org.springframework.statemachine.data.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.SpelExpressionParser . parseExpression ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) ; } if ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> != null ) { java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> ) ; } } } java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> < ? extends RepositoryAction > java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> = org.springframework.statemachine.data.RepositoryState . getExitActions ( ) ; if ( java.util.Set<> != null ) { for ( RepositoryAction org.springframework.statemachine.data.RepositoryAction : java.util.Set<> ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = null ; if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ) { org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = resolveAction ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ; } else if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) { SpelExpressionParser org.springframework.statemachine.data.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.SpelExpressionParser . parseExpression ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) ; } if ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> != null ) { java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> ) ; } } } RepositoryState org.springframework.statemachine.data.RepositoryState = org.springframework.statemachine.data.RepositoryState . getParentState ( ) ; java.lang.Object java.lang.Object = org.springframework.statemachine.data.RepositoryState . getRegion ( ) ; StateData < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> = new StateData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryState != null ? org.springframework.statemachine.data.RepositoryState . getState ( ) : null , java.lang.Object , org.springframework.statemachine.data.RepositoryState . getState ( ) , org.springframework.statemachine.data.RepositoryState . isInitial ( ) ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = null ; if ( org.springframework.statemachine.data.RepositoryState . getInitialAction ( ) != null ) { if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryState . getInitialAction ( ) . getName ( ) ) ) { org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = resolveAction ( org.springframework.statemachine.data.RepositoryState . getInitialAction ( ) . getName ( ) ) ; } else if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryState . getInitialAction ( ) . getSpel ( ) ) ) { SpelExpressionParser org.springframework.statemachine.data.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.SpelExpressionParser . parseExpression ( org.springframework.statemachine.data.RepositoryState . getInitialAction ( ) . getSpel ( ) ) ) ; } } org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setInitialAction ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setStateActions ( java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> ) ; org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setEntryActions ( java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> ) ; org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setExitActions ( java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> ) ; if ( org.springframework.statemachine.data.RepositoryState . getKind ( ) != null ) { org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( org.springframework.statemachine.data.RepositoryState . getKind ( ) ) ; if ( org.springframework.statemachine.data.RepositoryState . getKind ( ) == PseudoStateKind . END ) { org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setEnd ( true ) ; } } org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setDeferred ( org.springframework.statemachine.data.RepositoryState . getDeferredEvents ( ) ) ; if ( org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> != null ) { java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> <> ( ) ; java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> ) { java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> . add ( new StateData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryState . getState ( ) , org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . getRegion ( ) , org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . getState ( ) , org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . getDeferred ( ) , org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . getEntryActions ( ) , org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . getExitActions ( ) , org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . isInitial ( ) , org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . getInitialAction ( ) ) ) ; } org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> . setSubmachineStateData ( java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> ) ; } java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String> ) ; } StatesData < java.lang.String , java.lang.String > org.springframework.statemachine.data.StatesData<java.lang.String,java.lang.String> = new StatesData <> ( java.util.Collection<org.springframework.statemachine.data.StateData<java.lang.String,java.lang.String>> ) ; java.util.Collection<org.springframework.statemachine.data.TransitionData<java.lang.String,java.lang.String>> < TransitionData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.TransitionData<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.TransitionData<java.lang.String,java.lang.String>> <> ( ) ; java.util.Collection<org.springframework.statemachine.data.EntryData<java.lang.String,java.lang.String>> < EntryData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.EntryData<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.EntryData<java.lang.String,java.lang.String>> < EntryData < java.lang.String , java.lang.String > > ( ) ; java.util.Collection<org.springframework.statemachine.data.ExitData<java.lang.String,java.lang.String>> < ExitData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.ExitData<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.ExitData<java.lang.String,java.lang.String>> < ExitData < java.lang.String , java.lang.String > > ( ) ; java.util.Collection<org.springframework.statemachine.data.HistoryData<java.lang.String,java.lang.String>> < HistoryData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.HistoryData<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.HistoryData<java.lang.String,java.lang.String>> < HistoryData < java.lang.String , java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > > java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> = new java.util.HashMap<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > > ( ) ; java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > > java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> = new java.util.HashMap<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > > ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ( ) ; for ( RepositoryTransition org.springframework.statemachine.data.RepositoryTransition : org.springframework.statemachine.data.TransitionRepository<> . findByMachineId ( java.lang.String == null ? STRING : java.lang.String ) ) { java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> < ? extends RepositoryAction > java.util.Set<? extends org.springframework.statemachine.data.RepositoryAction> = org.springframework.statemachine.data.RepositoryTransition . getActions ( ) ; if ( java.util.Set<> != null ) { for ( RepositoryAction org.springframework.statemachine.data.RepositoryAction : java.util.Set<> ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = null ; if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ) { org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = resolveAction ( org.springframework.statemachine.data.RepositoryAction . getName ( ) ) ; } else if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) { SpelExpressionParser org.springframework.statemachine.data.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> = new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.SpelExpressionParser . parseExpression ( org.springframework.statemachine.data.RepositoryAction . getSpel ( ) ) ) ; } if ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> != null ) { java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.data.Action<java.lang.String,java.lang.String> ) ; } } } TransitionKind org.springframework.statemachine.data.TransitionKind = org.springframework.statemachine.data.RepositoryTransition . getKind ( ) ; Guard < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.data.RepositoryTransition ) ; java.util.Collection<org.springframework.statemachine.data.TransitionData<java.lang.String,java.lang.String>> . add ( new TransitionData <> ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getEvent ( ) , java.util.Collection<org.springframework.statemachine.data.Action<java.lang.String,java.lang.String>> , org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> , org.springframework.statemachine.data.TransitionKind != null ? org.springframework.statemachine.data.TransitionKind : TransitionKind . EXTERNAL ) ) ; if ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getKind ( ) == PseudoStateKind . ENTRY ) { java.util.Collection<org.springframework.statemachine.data.EntryData<java.lang.String,java.lang.String>> . add ( new EntryData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) ) ) ; } else if ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getKind ( ) == PseudoStateKind . EXIT ) { java.util.Collection<org.springframework.statemachine.data.ExitData<java.lang.String,java.lang.String>> . add ( new ExitData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) ) ) ; } else if ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getKind ( ) == PseudoStateKind . CHOICE ) { java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> . get ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) ) ; if ( java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> == null ) { java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> = new java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> . put ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> ) ; } org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.data.RepositoryTransition ) ; if ( org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> == null ) { java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> . addLast ( new ChoiceData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) , org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ) ) ; } else { java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> . addFirst ( new ChoiceData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) , org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ) ) ; } } else if ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getKind ( ) == PseudoStateKind . JUNCTION ) { java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> . get ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) ) ; if ( java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> == null ) { java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> = new java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> . put ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> ) ; } org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.data.RepositoryTransition ) ; if ( org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> == null ) { java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> . addLast ( new JunctionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) , org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ) ) ; } else { java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> . addFirst ( new JunctionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) , org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ) ) ; } } else if ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getKind ( ) == PseudoStateKind . FORK ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) ) ; if ( java.util.List<java.lang.String> == null ) { java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , java.util.List<java.lang.String> ) ; } java.util.List<java.lang.String> . boolean ( org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) ) ; } else if ( org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getKind ( ) == PseudoStateKind . JOIN ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) ) ; if ( java.util.List<java.lang.String> == null ) { java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) , java.util.List<java.lang.String> ) ; } java.util.List<java.lang.String> . boolean ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) ) ; } else if ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getKind ( ) == PseudoStateKind . HISTORY_SHALLOW ) { java.util.Collection<org.springframework.statemachine.data.HistoryData<java.lang.String,java.lang.String>> . add ( new HistoryData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) ) ) ; } else if ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getKind ( ) == PseudoStateKind . HISTORY_DEEP ) { java.util.Collection<org.springframework.statemachine.data.HistoryData<java.lang.String,java.lang.String>> . add ( new HistoryData < java.lang.String , java.lang.String > ( org.springframework.statemachine.data.RepositoryTransition . getSource ( ) . getState ( ) , org.springframework.statemachine.data.RepositoryTransition . getTarget ( ) . getState ( ) ) ) ; } } java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > > java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> = new java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > > ( ) ; java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> . putAll ( java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> ) ; java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > > java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> = new java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > > ( ) ; java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> . putAll ( java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> ) ; TransitionsData < java.lang.String , java.lang.String > org.springframework.statemachine.data.TransitionsData<java.lang.String,java.lang.String> = new TransitionsData <> ( java.util.Collection<org.springframework.statemachine.data.TransitionData<java.lang.String,java.lang.String>> , java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.ChoiceData<java.lang.String,java.lang.String>>> , java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.data.JunctionData<java.lang.String,java.lang.String>>> , java.util.Map<java.lang.String,java.util.List<java.lang.String>> , java.util.Map<java.lang.String,java.util.List<java.lang.String>> , java.util.Collection<org.springframework.statemachine.data.EntryData<java.lang.String,java.lang.String>> , java.util.Collection<org.springframework.statemachine.data.ExitData<java.lang.String,java.lang.String>> , java.util.Collection<org.springframework.statemachine.data.HistoryData<java.lang.String,java.lang.String>> ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> = new DefaultStateMachineModel <> ( org.springframework.statemachine.data.ConfigurationData<java.lang.String,java.lang.String> , org.springframework.statemachine.data.StatesData<java.lang.String,java.lang.String> , org.springframework.statemachine.data.TransitionsData<java.lang.String,java.lang.String> ) ; return org.springframework.statemachine.data.StateMachineModel<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( RepositoryTransition org.springframework.statemachine.data.RepositoryTransition ) { Guard < java.lang.String , java.lang.String > org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> = null ; RepositoryGuard org.springframework.statemachine.data.RepositoryGuard = org.springframework.statemachine.data.RepositoryTransition . getGuard ( ) ; if ( org.springframework.statemachine.data.RepositoryGuard != null ) { if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryGuard . getName ( ) ) ) { org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.data.RepositoryGuard . getName ( ) ) ; } else if ( StringUtils . hasText ( org.springframework.statemachine.data.RepositoryGuard . getSpel ( ) ) ) { SpelExpressionParser org.springframework.statemachine.data.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> = new SpelExpressionGuard <> ( org.springframework.statemachine.data.SpelExpressionParser . parseExpression ( org.springframework.statemachine.data.RepositoryGuard . getSpel ( ) ) ) ; } } return org.springframework.statemachine.data.Guard<java.lang.String,java.lang.String> ; }  <METHOD_END>
