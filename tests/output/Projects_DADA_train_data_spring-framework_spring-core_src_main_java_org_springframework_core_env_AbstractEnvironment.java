<METHOD_START> public void ( ) { void ( this . org.springframework.core.env.MutablePropertySources ) ; if ( this . org.springframework.core.env.Log . isDebugEnabled ( ) ) { this . org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.core.env.AbstractEnvironment> ( ) . java.lang.String ( ) , this . org.springframework.core.env.MutablePropertySources ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( MutablePropertySources org.springframework.core.env.MutablePropertySources ) {	}  <METHOD_END>
<METHOD_START> protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return StringUtils . toStringArray ( java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { synchronized ( this . java.util.Set<java.lang.String> ) { if ( this . java.util.Set<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { void ( StringUtils . commaDelimitedListToStringArray ( StringUtils . trimAllWhitespace ( java.lang.String ) ) ) ; } } return this . java.util.Set<java.lang.String> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; synchronized ( this . java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> . void ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( this . org.springframework.core.env.Log . isDebugEnabled ( ) ) { this . org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } void ( java.lang.String ) ; java.util.Set<java.lang.String> ( ) ; synchronized ( this . java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return StringUtils . toStringArray ( java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { synchronized ( this . java.util.Set<java.lang.String> ) { if ( this . java.util.Set<java.lang.String> . boolean ( java.util.Set<java.lang.String> ( ) ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { void ( StringUtils . commaDelimitedListToStringArray ( StringUtils . trimAllWhitespace ( java.lang.String ) ) ) ; } } return this . java.util.Set<java.lang.String> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; synchronized ( this . java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> . void ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( StringUtils . hasLength ( java.lang.String ) && java.lang.String . char ( NUMBER ) == '!' ) { if ( ! boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) { return true ; } } else if ( boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { void ( java.lang.String ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( ) ; return ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) || ( java.util.Set<java.lang.String> . boolean ( ) && java.util.Set<java.lang.String> ( ) . boolean ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } if ( java.lang.String . char ( NUMBER ) == '!' ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.env.MutablePropertySources org.springframework.core.env.MutablePropertySources ( ) { return this . org.springframework.core.env.MutablePropertySources ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { if ( boolean ( ) ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } try { return ( java.util.Map ) java.lang.System . java.util.Map<java.lang.String,java.lang.String> ( ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { return ( java.util.Map ) new ReadOnlySystemAttributesMap ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { return java.lang.System . java.lang.String ( java.lang.String ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { if ( org.springframework.core.env.Log . isInfoEnabled ( ) ) { org.springframework.core.env.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , java.security.AccessControlException . java.lang.String ( ) ) ) ; } return null ; } } } ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { return java.lang.System . java.lang.String ( java.lang.String ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { if ( org.springframework.core.env.Log . isInfoEnabled ( ) ) { org.springframework.core.env.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , java.security.AccessControlException . java.lang.String ( ) ) ) ; } return null ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return SpringProperties . getFlag ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { try { return ( java.util.Map ) java.lang.System . java.util.Properties ( ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { return ( java.util.Map ) new ReadOnlySystemAttributesMap ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { return java.lang.System . java.lang.String ( java.lang.String ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { if ( org.springframework.core.env.Log . isInfoEnabled ( ) ) { org.springframework.core.env.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , java.security.AccessControlException . java.lang.String ( ) ) ) ; } return null ; } } } ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { return java.lang.System . java.lang.String ( java.lang.String ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { if ( org.springframework.core.env.Log . isInfoEnabled ( ) ) { org.springframework.core.env.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , java.security.AccessControlException . java.lang.String ( ) ) ) ; } return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment ) { for ( PropertySource < ? > org.springframework.core.env.PropertySource<?> : org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) ) { if ( ! this . org.springframework.core.env.MutablePropertySources . contains ( org.springframework.core.env.PropertySource<> . getName ( ) ) ) { this . org.springframework.core.env.MutablePropertySources . addLast ( org.springframework.core.env.PropertySource<> ) ; } } java.lang.String [] java.lang.String[] = org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { synchronized ( this . java.util.Set<java.lang.String> ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } } java.lang.String [] java.lang.String[] = org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { synchronized ( this . java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.env.ConfigurableConversionService org.springframework.core.env.ConfigurableConversionService ( ) { return this . org.springframework.core.env.ConfigurablePropertyResolver . getConversionService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableConversionService org.springframework.core.env.ConfigurableConversionService ) { this . org.springframework.core.env.ConfigurablePropertyResolver . setConversionService ( org.springframework.core.env.ConfigurableConversionService ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.core.env.ConfigurablePropertyResolver . setPlaceholderPrefix ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.core.env.ConfigurablePropertyResolver . setPlaceholderSuffix ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.core.env.ConfigurablePropertyResolver . setValueSeparator ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . org.springframework.core.env.ConfigurablePropertyResolver . setIgnoreUnresolvableNestedPlaceholders ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.core.env.ConfigurablePropertyResolver . setRequiredProperties ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.core.env.MissingRequiredPropertiesException { this . org.springframework.core.env.ConfigurablePropertyResolver . validateRequiredProperties ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . org.springframework.core.env.ConfigurablePropertyResolver . containsProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.core.env.ConfigurablePropertyResolver . getProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return this . org.springframework.core.env.ConfigurablePropertyResolver . getProperty ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return this . org.springframework.core.env.ConfigurablePropertyResolver . getProperty ( java.lang.String , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , T T ) { return this . org.springframework.core.env.ConfigurablePropertyResolver . getProperty ( java.lang.String , java.lang.Class<T> , T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.IllegalStateException { return this . org.springframework.core.env.ConfigurablePropertyResolver . getRequiredProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.IllegalStateException { return this . org.springframework.core.env.ConfigurablePropertyResolver . getRequiredProperty ( java.lang.String , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.core.env.ConfigurablePropertyResolver . resolvePlaceholders ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { return this . org.springframework.core.env.ConfigurablePropertyResolver . resolveRequiredPlaceholders ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.core.env.AbstractEnvironment> ( ) . java.lang.String ( ) , this . java.util.Set<java.lang.String> , this . java.util.Set<java.lang.String> , this . org.springframework.core.env.MutablePropertySources ) ; }  <METHOD_END>
