<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage < java.lang.String > ( STRING ) ) . getPayload ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( ObjectToJsonTransformer . JSON_CONTENT_TYPE , org.springframework.integration.json.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; Message < ? > org.springframework.integration.json.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , STRING ) . build ( ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( org.springframework.integration.json.Message<> ) ; assertEquals ( STRING , org.springframework.integration.json.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; org.springframework.integration.json.ObjectToJsonTransformer . setContentType ( ObjectToJsonTransformer . JSON_CONTENT_TYPE ) ; Message < ? > org.springframework.integration.json.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , STRING ) . build ( ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( org.springframework.integration.json.Message<> ) ; assertEquals ( ObjectToJsonTransformer . JSON_CONTENT_TYPE , org.springframework.integration.json.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; org.springframework.integration.json.ObjectToJsonTransformer . setContentType ( STRING ) ; Message < ? > org.springframework.integration.json.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( org.springframework.integration.json.Message<> ) ; assertFalse ( org.springframework.integration.json.Message<> . getHeaders ( ) . containsKey ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; org.springframework.integration.json.ObjectToJsonTransformer . setContentType ( STRING ) ; Message < ? > org.springframework.integration.json.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , STRING ) . build ( ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( org.springframework.integration.json.Message<> ) ; assertEquals ( STRING , org.springframework.integration.json.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; org.springframework.integration.json.ObjectToJsonTransformer . setContentType ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) . getPayload ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; TestAddress org.springframework.integration.json.TestAddress = new TestAddress ( NUMBER , STRING ) ; TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( STRING , STRING , NUMBER ) ; org.springframework.integration.json.TestPerson . setAddress ( org.springframework.integration.json.TestAddress ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage < TestPerson > ( org.springframework.integration.json.TestPerson ) ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; assertTrue ( java.util.regex.Matcher . boolean ( ) ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMapper org.springframework.integration.json.ObjectMapper = new ObjectMapper ( ) ; org.springframework.integration.json.ObjectMapper . configure ( JsonGenerator . Feature . QUOTE_FIELD_NAMES , java.lang.Boolean . java.lang.Boolean ) ; ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( new Jackson2JsonObjectMapper ( org.springframework.integration.json.ObjectMapper ) ) ; TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( STRING , STRING , NUMBER ) ; org.springframework.integration.json.TestPerson . setAddress ( new TestAddress ( NUMBER , STRING ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage < TestPerson > ( org.springframework.integration.json.TestPerson ) ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; assertTrue ( java.util.regex.Matcher . boolean ( ) ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage <> ( java.util.List<java.lang.String> ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . TYPE_ID ) . toString ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . CONTENT_TYPE_ID ) , equalTo ( java.lang.String .class ) ) ; java.util.Map<java.lang.String,java.lang.Long> < java.lang.String , java.lang.Long > java.util.Map<java.lang.String,java.lang.Long> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Long> ( STRING , NUMBER ) ; org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage <> ( java.util.Map<java.lang.String,java.lang.Long> ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . TYPE_ID ) . toString ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . CONTENT_TYPE_ID ) , equalTo ( java.lang.Long .class ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . KEY_TYPE_ID ) , equalTo ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( null ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage <> ( java.util.List<java.lang.String> ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . TYPE_ID ) . toString ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . CONTENT_TYPE_ID ) , equalTo ( java.lang.Object .class ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , null ) ; org.springframework.integration.json.Message<?> = org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage <> ( java.util.Map<java.lang.String,java.lang.String> ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . TYPE_ID ) . toString ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . CONTENT_TYPE_ID ) , equalTo ( java.lang.Object .class ) ) ; assertThat ( org.springframework.integration.json.Message<> . getHeaders ( ) . get ( JsonHeaders . KEY_TYPE_ID ) , equalTo ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( new BoonJsonObjectMapper ( ) ) ; TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( STRING , STRING , NUMBER ) ; org.springframework.integration.json.TestPerson . setAddress ( new TestAddress ( NUMBER , STRING ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage < TestPerson > ( org.springframework.integration.json.TestPerson ) ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; assertTrue ( java.util.regex.Matcher . boolean ( ) ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectToJsonTransformer org.springframework.integration.json.ObjectToJsonTransformer = new ObjectToJsonTransformer ( new BoonJsonObjectMapper ( ) , ObjectToJsonTransformer . ResultType . NODE ) ; TestPerson org.springframework.integration.json.TestPerson = new TestPerson ( STRING , STRING , NUMBER ) ; org.springframework.integration.json.TestPerson . setAddress ( new TestAddress ( NUMBER , STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.json.ObjectToJsonTransformer . transform ( new GenericMessage < TestPerson > ( org.springframework.integration.json.TestPerson ) ) . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.Map .class ) ) ; SpelExpressionParser org.springframework.integration.json.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.integration.json.Expression = org.springframework.integration.json.SpelExpressionParser . parseExpression ( STRING ) ; StandardEvaluationContext org.springframework.integration.json.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.integration.json.StandardEvaluationContext . addPropertyAccessor ( new MapAccessor ( ) ) ; java.lang.String java.lang.String = org.springframework.integration.json.Expression . getValue ( org.springframework.integration.json.StandardEvaluationContext , java.lang.Object , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
