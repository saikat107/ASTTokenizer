<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this( java.lang.Class<T> , java.lang.Class<org.springframework.data.repository.core.support.Id> ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> , final java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { super( java.lang.Class<T> ); Assert . notNull ( java.lang.Class<> , STRING ) ; ReflectionUtils . doWithFields ( java.lang.Class<T> , field -> { if ( field . getAnnotation ( annotation ) != null ) { ReflectionEntityInformation .this . field = field ; return; } } ) ; Assert . notNull ( this . java.lang.reflect.Field , ( ) String . format ( STRING , annotation . toString ( ) ) ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Optional<ID> < ID > java.util.Optional<ID> ( java.lang.Object java.lang.Object ) { return java.lang.Object == null ? null : java.util.Optional . java.util.Optional<ID> ( ( ID ) ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Class<ID> < ID > java.lang.Class<ID> ( ) { return ( java.lang.Class<ID> < ID > ) java.lang.reflect.Field . java.lang.Class<?> ( ) ; }  <METHOD_END>
