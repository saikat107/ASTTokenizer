<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelPayload ( NUMBER , java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelPayload ( NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload = new HttpTunnelPayload ( NUMBER , java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) ) ; assertThat ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload . getSequence ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ; HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload = new HttpTunnelPayload ( NUMBER , java.nio.ByteBuffer ) ; assertThat ( byte[] ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ) ) . isEqualTo ( java.nio.ByteBuffer . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ; HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload = new HttpTunnelPayload ( NUMBER , java.nio.ByteBuffer ) ; MockHttpServletResponse org.springframework.boot.devtools.tunnel.payload.MockHttpServletResponse = new MockHttpServletResponse ( ) ; HttpOutputMessage org.springframework.boot.devtools.tunnel.payload.HttpOutputMessage = new ServletServerHttpResponse ( org.springframework.boot.devtools.tunnel.payload.MockHttpServletResponse ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload . assignTo ( org.springframework.boot.devtools.tunnel.payload.HttpOutputMessage ) ; assertThat ( org.springframework.boot.devtools.tunnel.payload.MockHttpServletResponse . getHeader ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.devtools.tunnel.payload.MockHttpServletResponse . getContentAsString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest = new MockHttpServletRequest ( ) ; HttpInputMessage org.springframework.boot.devtools.tunnel.payload.HttpInputMessage = new ServletServerHttpRequest ( org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest ) ; HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload = HttpTunnelPayload . get ( org.springframework.boot.devtools.tunnel.payload.HttpInputMessage ) ; assertThat ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; HttpInputMessage org.springframework.boot.devtools.tunnel.payload.HttpInputMessage = new ServletServerHttpRequest ( org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest ) ; this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expectMessage ( STRING ) ; HttpTunnelPayload . get ( org.springframework.boot.devtools.tunnel.payload.HttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest . addHeader ( STRING , NUMBER ) ; HttpInputMessage org.springframework.boot.devtools.tunnel.payload.HttpInputMessage = new ServletServerHttpRequest ( org.springframework.boot.devtools.tunnel.payload.MockHttpServletRequest ) ; HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload = HttpTunnelPayload . get ( org.springframework.boot.devtools.tunnel.payload.HttpInputMessage ) ; assertThat ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload . getSequence ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( byte[] ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ) ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.nio.channels.ReadableByteChannel java.nio.channels.ReadableByteChannel = java.nio.channels.Channels . java.nio.channels.ReadableByteChannel ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; java.nio.ByteBuffer java.nio.ByteBuffer = HttpTunnelPayload . getPayloadData ( java.nio.channels.ReadableByteChannel ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = java.nio.channels.Channels . java.nio.channels.WritableByteChannel ( java.io.ByteArrayOutputStream ) ; while ( java.nio.ByteBuffer . boolean ( ) ) { java.nio.channels.WritableByteChannel . int ( java.nio.ByteBuffer ) ; } assertThat ( java.io.ByteArrayOutputStream . byte[] ( ) ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.nio.channels.ReadableByteChannel java.nio.channels.ReadableByteChannel = mock ( java.nio.channels.ReadableByteChannel .class ) ; given ( java.nio.channels.ReadableByteChannel . int ( any ( java.nio.ByteBuffer .class ) ) ) . willThrow ( new java.net.SocketTimeoutException ( ) ) ; java.nio.ByteBuffer java.nio.ByteBuffer = HttpTunnelPayload . getPayloadData ( java.nio.channels.ReadableByteChannel ) ; assertThat ( java.nio.ByteBuffer ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = java.nio.channels.Channels . java.nio.channels.WritableByteChannel ( java.io.ByteArrayOutputStream ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload . writeTo ( java.nio.channels.WritableByteChannel ) ; return java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
