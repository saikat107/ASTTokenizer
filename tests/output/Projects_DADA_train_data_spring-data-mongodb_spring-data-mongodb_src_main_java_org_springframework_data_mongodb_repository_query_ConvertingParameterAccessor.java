<METHOD_START> public void ( MongoWriter < ? > org.springframework.data.mongodb.repository.query.MongoWriter<?> , MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) { Assert . notNull ( org.springframework.data.mongodb.repository.query.MongoWriter<> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor , STRING ) ; this . org.springframework.data.mongodb.repository.query.MongoWriter<?> = org.springframework.data.mongodb.repository.query.MongoWriter<> ; this . org.springframework.data.mongodb.repository.query.MongoParameterAccessor = org.springframework.data.mongodb.repository.query.MongoParameterAccessor ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor.PotentiallyConvertingIterator org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor.PotentiallyConvertingIterator ( ) { return new org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor.ConvertingIterator ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor . iterator ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.Pageable org.springframework.data.mongodb.repository.query.Pageable ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.Sort org.springframework.data.mongodb.repository.query.Sort ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getSort ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getDynamicProjection ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( int int ) { return java.lang.Object ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getBindableValue ( int ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> < Distance > org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getDistanceRange ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.Point org.springframework.data.mongodb.repository.query.Point ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getGeoNearLocation ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.TextCriteria org.springframework.data.mongodb.repository.query.TextCriteria ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getFullText ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeInformation < ? > org.springframework.data.mongodb.repository.query.TypeInformation<?> ) { return org.springframework.data.mongodb.repository.query.MongoWriter<> . convertToMongoType ( java.lang.Object , org.springframework.data.mongodb.repository.query.TypeInformation<> == null ? null : org.springframework.data.mongodb.repository.query.TypeInformation<> . getActualType ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . hasBindableNullValue ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { this . java.util.Iterator<java.lang.Object> = java.util.Iterator<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Iterator<java.lang.Object> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty ) { java.lang.Object java.lang.Object = java.lang.Object ( ) ; if ( java.lang.Object == null ) { return null ; } if ( org.springframework.data.mongodb.repository.query.MongoPersistentProperty . isAssociation ( ) ) { if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) || java.lang.Object instanceof java.lang.Iterable ) { java.util.List<org.springframework.data.mongodb.repository.query.DBRef> < DBRef > java.util.List<org.springframework.data.mongodb.repository.query.DBRef> = new java.util.ArrayList<org.springframework.data.mongodb.repository.query.DBRef> < DBRef > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<?> ( java.lang.Object ) ) { java.util.List<org.springframework.data.mongodb.repository.query.DBRef> . add ( org.springframework.data.mongodb.repository.query.MongoWriter<> . toDBRef ( java.lang.Object , org.springframework.data.mongodb.repository.query.MongoPersistentProperty ) ) ; } return java.util.List<org.springframework.data.mongodb.repository.query.DBRef> ; } else { return org.springframework.data.mongodb.repository.query.MongoWriter<> . toDBRef ( java.lang.Object , org.springframework.data.mongodb.repository.query.MongoPersistentProperty ) ; } } return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.repository.query.MongoPersistentProperty . getTypeInformation ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Iterator<java.lang.Object> . void ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<?> < ? > java.util.Collection<?> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Iterable ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) java.lang.Object ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } return java.util.List<java.lang.Object> ; } if ( java.lang.Object == null ) { return java.util.Collections . java.util.Set<java.lang.Object> ( ) ; } return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ? CollectionUtils . arrayToList ( java.lang.Object ) : java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getValues ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty );  <METHOD_END>
