<METHOD_START> @ java.lang.Override public org.springframework.aop.config.BeanDefinition org.springframework.aop.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { CompositeComponentDefinition org.springframework.aop.config.CompositeComponentDefinition = new CompositeComponentDefinition ( org.w3c.dom.Element . java.lang.String ( ) , org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; org.springframework.aop.config.ParserContext . pushContainingComponent ( org.springframework.aop.config.CompositeComponentDefinition ) ; void ( org.springframework.aop.config.ParserContext , org.w3c.dom.Element ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElements ( org.w3c.dom.Element ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { java.lang.String java.lang.String = org.springframework.aop.config.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Element ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { void ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { void ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ; } } org.springframework.aop.config.ParserContext . popAndRegisterContainingComponent ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( ParserContext org.springframework.aop.config.ParserContext , org.w3c.dom.Element org.w3c.dom.Element ) { AopNamespaceUtils . registerAspectJAutoProxyCreatorIfNecessary ( org.springframework.aop.config.ParserContext , org.w3c.dom.Element ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition = org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; try { this . org.springframework.aop.config.ParseState . push ( new AdvisorEntry ( java.lang.String ) ) ; java.lang.String java.lang.String = java.lang.String ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.aop.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.aop.config.AbstractBeanDefinition ) ; } else { java.lang.String = org.springframework.aop.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.aop.config.AbstractBeanDefinition ) ; } java.lang.Object java.lang.Object = java.lang.Object ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ; if ( java.lang.Object instanceof BeanDefinition ) { org.springframework.aop.config.AbstractBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , java.lang.Object ) ; org.springframework.aop.config.ParserContext . registerComponent ( new AdvisorComponentDefinition ( java.lang.String , org.springframework.aop.config.AbstractBeanDefinition , ( BeanDefinition ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.aop.config.AbstractBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , new RuntimeBeanReference ( ( java.lang.String ) java.lang.Object ) ) ; org.springframework.aop.config.ParserContext . registerComponent ( new AdvisorComponentDefinition ( java.lang.String , org.springframework.aop.config.AbstractBeanDefinition ) ) ; } } finally { this . org.springframework.aop.config.ParseState . pop ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.config.AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { RootBeanDefinition org.springframework.aop.config.RootBeanDefinition = new RootBeanDefinition ( DefaultBeanFactoryPointcutAdvisor .class ) ; org.springframework.aop.config.RootBeanDefinition . setSource ( org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.aop.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element , this . org.springframework.aop.config.ParseState . snapshot ( ) ) ; } else { org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , new RuntimeBeanNameReference ( java.lang.String ) ) ; } if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } return org.springframework.aop.config.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; try { this . org.springframework.aop.config.ParseState . push ( new AspectEntry ( java.lang.String , java.lang.String ) ) ; java.util.List<org.springframework.aop.config.BeanDefinition> < BeanDefinition > java.util.List<org.springframework.aop.config.BeanDefinition> = new java.util.ArrayList<org.springframework.aop.config.BeanDefinition> <> ( ) ; java.util.List<org.springframework.aop.config.BeanReference> < BeanReference > java.util.List<org.springframework.aop.config.BeanReference> = new java.util.ArrayList<org.springframework.aop.config.BeanReference> <> ( ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , java.lang.String ) ; for ( int int = int ; int < java.util.List<org.w3c.dom.Element> . int ( ) ; int ++ ) { org.w3c.dom.Element org.w3c.dom.Element = java.util.List<org.w3c.dom.Element> . org.w3c.dom.Element ( int ) ; java.util.List<org.springframework.aop.config.BeanDefinition> . add ( org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ) ; } org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; boolean boolean = false ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; if ( boolean ( org.w3c.dom.Node , org.springframework.aop.config.ParserContext ) ) { if ( ! boolean ) { boolean = true ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.aop.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element , this . org.springframework.aop.config.ParseState . snapshot ( ) ) ; return; } java.util.List<org.springframework.aop.config.BeanReference> . add ( new RuntimeBeanReference ( java.lang.String ) ) ; } AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition = org.springframework.aop.config.AbstractBeanDefinition ( java.lang.String , int , org.w3c.dom.Element , ( org.w3c.dom.Element ) org.w3c.dom.Node , org.springframework.aop.config.ParserContext , java.util.List<org.springframework.aop.config.BeanDefinition> , java.util.List<org.springframework.aop.config.BeanReference> ) ; java.util.List<org.springframework.aop.config.BeanDefinition> . add ( org.springframework.aop.config.AbstractBeanDefinition ) ; } } AspectComponentDefinition org.springframework.aop.config.AspectComponentDefinition = org.springframework.aop.config.AspectComponentDefinition ( org.w3c.dom.Element , java.lang.String , java.util.List<org.springframework.aop.config.BeanDefinition> , java.util.List<org.springframework.aop.config.BeanReference> , org.springframework.aop.config.ParserContext ) ; org.springframework.aop.config.ParserContext . pushContainingComponent ( org.springframework.aop.config.AspectComponentDefinition ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , java.lang.String ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ; } org.springframework.aop.config.ParserContext . popAndRegisterContainingComponent ( ) ; } finally { this . org.springframework.aop.config.ParseState . pop ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.config.AspectComponentDefinition org.springframework.aop.config.AspectComponentDefinition ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.String java.lang.String , java.util.List<org.springframework.aop.config.BeanDefinition> < BeanDefinition > java.util.List<org.springframework.aop.config.BeanDefinition> , java.util.List<org.springframework.aop.config.BeanReference> < BeanReference > java.util.List<org.springframework.aop.config.BeanReference> , ParserContext org.springframework.aop.config.ParserContext ) { BeanDefinition [] org.springframework.aop.config.BeanDefinition[] = java.util.List<org.springframework.aop.config.BeanDefinition> . toArray ( new BeanDefinition [ java.util.List<org.springframework.aop.config.BeanDefinition> . size ( ) ] ) ; BeanReference [] org.springframework.aop.config.BeanReference[] = java.util.List<org.springframework.aop.config.BeanReference> . toArray ( new BeanReference [ java.util.List<org.springframework.aop.config.BeanReference> . size ( ) ] ) ; java.lang.Object java.lang.Object = org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; return new AspectComponentDefinition ( java.lang.String , org.springframework.aop.config.BeanDefinition[] , org.springframework.aop.config.BeanReference[] , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.w3c.dom.Node org.w3c.dom.Node , ParserContext org.springframework.aop.config.ParserContext ) { if ( ! ( org.w3c.dom.Node instanceof org.w3c.dom.Element ) ) { return false ; } else { java.lang.String java.lang.String = org.springframework.aop.config.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Node ) ; return ( java.lang.String . boolean ( java.lang.String ) || java.lang.String . boolean ( java.lang.String ) || java.lang.String . boolean ( java.lang.String ) || java.lang.String . boolean ( java.lang.String ) || java.lang.String . boolean ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.config.AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { BeanDefinitionBuilder org.springframework.aop.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( DeclareParentsAdvisor .class ) ; org.springframework.aop.config.BeanDefinitionBuilder . addConstructorArgValue ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; org.springframework.aop.config.BeanDefinitionBuilder . addConstructorArgValue ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) && ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.aop.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; } else if ( StringUtils . hasText ( java.lang.String ) && ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.aop.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { org.springframework.aop.config.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING + java.lang.String + STRING , org.w3c.dom.Element , this . org.springframework.aop.config.ParseState . snapshot ( ) ) ; } AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition = org.springframework.aop.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; org.springframework.aop.config.AbstractBeanDefinition . setSource ( org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; org.springframework.aop.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.aop.config.AbstractBeanDefinition ) ; return org.springframework.aop.config.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.config.AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition ( java.lang.String java.lang.String , int int , org.w3c.dom.Element org.w3c.dom.Element , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext , java.util.List<org.springframework.aop.config.BeanDefinition> < BeanDefinition > java.util.List<org.springframework.aop.config.BeanDefinition> , java.util.List<org.springframework.aop.config.BeanReference> < BeanReference > java.util.List<org.springframework.aop.config.BeanReference> ) { try { this . org.springframework.aop.config.ParseState . push ( new AdviceEntry ( org.springframework.aop.config.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Element ) ) ) ; RootBeanDefinition org.springframework.aop.config.RootBeanDefinition = new RootBeanDefinition ( MethodLocatingFactoryBean .class ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.String ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.aop.config.RootBeanDefinition . setSynthetic ( true ) ; RootBeanDefinition org.springframework.aop.config.RootBeanDefinition = new RootBeanDefinition ( SimpleBeanFactoryAwareAspectInstanceFactory .class ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.String ) ; org.springframework.aop.config.RootBeanDefinition . setSynthetic ( true ) ; AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition = org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext , java.lang.String , int , org.springframework.aop.config.RootBeanDefinition , org.springframework.aop.config.RootBeanDefinition , java.util.List<org.springframework.aop.config.BeanDefinition> , java.util.List<org.springframework.aop.config.BeanReference> ) ; RootBeanDefinition org.springframework.aop.config.RootBeanDefinition = new RootBeanDefinition ( AspectJPointcutAdvisor .class ) ; org.springframework.aop.config.RootBeanDefinition . setSource ( org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; org.springframework.aop.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( org.springframework.aop.config.AbstractBeanDefinition ) ; if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } org.springframework.aop.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.aop.config.RootBeanDefinition ) ; return org.springframework.aop.config.RootBeanDefinition ; } finally { this . org.springframework.aop.config.ParseState . pop ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.config.AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext , java.lang.String java.lang.String , int int , RootBeanDefinition org.springframework.aop.config.RootBeanDefinition , RootBeanDefinition org.springframework.aop.config.RootBeanDefinition , java.util.List<org.springframework.aop.config.BeanDefinition> < BeanDefinition > java.util.List<org.springframework.aop.config.BeanDefinition> , java.util.List<org.springframework.aop.config.BeanReference> < BeanReference > java.util.List<org.springframework.aop.config.BeanReference> ) { RootBeanDefinition org.springframework.aop.config.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<?> ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ) ; org.springframework.aop.config.RootBeanDefinition . setSource ( org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , java.lang.String ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , int ) ; if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } ConstructorArgumentValues org.springframework.aop.config.ConstructorArgumentValues = org.springframework.aop.config.RootBeanDefinition . getConstructorArgumentValues ( ) ; org.springframework.aop.config.ConstructorArgumentValues . addIndexedArgumentValue ( int , org.springframework.aop.config.RootBeanDefinition ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.w3c.dom.Element , org.springframework.aop.config.ParserContext ) ; if ( java.lang.Object instanceof BeanDefinition ) { org.springframework.aop.config.ConstructorArgumentValues . addIndexedArgumentValue ( int , java.lang.Object ) ; java.util.List<org.springframework.aop.config.BeanDefinition> . add ( ( BeanDefinition ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { RuntimeBeanReference org.springframework.aop.config.RuntimeBeanReference = new RuntimeBeanReference ( ( java.lang.String ) java.lang.Object ) ; org.springframework.aop.config.ConstructorArgumentValues . addIndexedArgumentValue ( int , org.springframework.aop.config.RuntimeBeanReference ) ; java.util.List<org.springframework.aop.config.BeanReference> . add ( org.springframework.aop.config.RuntimeBeanReference ) ; } org.springframework.aop.config.ConstructorArgumentValues . addIndexedArgumentValue ( int , org.springframework.aop.config.RootBeanDefinition ) ; return org.springframework.aop.config.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { java.lang.String java.lang.String = org.springframework.aop.config.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Element ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { return AspectJMethodBeforeAdvice .class ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return AspectJAfterAdvice .class ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return AspectJAfterReturningAdvice .class ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return AspectJAfterThrowingAdvice .class ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return AspectJAroundAdvice .class ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.config.AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition = null ; try { this . org.springframework.aop.config.ParseState . push ( new PointcutEntry ( java.lang.String ) ) ; org.springframework.aop.config.AbstractBeanDefinition = org.springframework.aop.config.AbstractBeanDefinition ( java.lang.String ) ; org.springframework.aop.config.AbstractBeanDefinition . setSource ( org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; java.lang.String java.lang.String = java.lang.String ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.aop.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.aop.config.AbstractBeanDefinition ) ; } else { java.lang.String = org.springframework.aop.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.aop.config.AbstractBeanDefinition ) ; } org.springframework.aop.config.ParserContext . registerComponent ( new PointcutComponentDefinition ( java.lang.String , org.springframework.aop.config.AbstractBeanDefinition , java.lang.String ) ) ; } finally { this . org.springframework.aop.config.ParseState . pop ( ) ; } return org.springframework.aop.config.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.aop.config.ParserContext ) { if ( org.w3c.dom.Element . boolean ( java.lang.String ) && org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.aop.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element , this . org.springframework.aop.config.ParseState . snapshot ( ) ) ; return null ; } else if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition = org.springframework.aop.config.AbstractBeanDefinition ( java.lang.String ) ; org.springframework.aop.config.AbstractBeanDefinition . setSource ( org.springframework.aop.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; return org.springframework.aop.config.AbstractBeanDefinition ; } else if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.aop.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element , this . org.springframework.aop.config.ParseState . snapshot ( ) ) ; return null ; } return java.lang.String ; } else { org.springframework.aop.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element , this . org.springframework.aop.config.ParseState . snapshot ( ) ) ; return null ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.aop.config.AbstractBeanDefinition org.springframework.aop.config.AbstractBeanDefinition ( java.lang.String java.lang.String ) { RootBeanDefinition org.springframework.aop.config.RootBeanDefinition = new RootBeanDefinition ( AspectJExpressionPointcut .class ) ; org.springframework.aop.config.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.aop.config.RootBeanDefinition . setSynthetic ( true ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( java.lang.String , java.lang.String ) ; return org.springframework.aop.config.RootBeanDefinition ; }  <METHOD_END>
