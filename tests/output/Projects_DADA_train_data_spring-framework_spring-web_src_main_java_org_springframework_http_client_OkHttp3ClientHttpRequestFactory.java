<METHOD_START> public void ( ) { this . org.springframework.http.client.OkHttpClient = new OkHttpClient ( ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( OkHttpClient org.springframework.http.client.OkHttpClient ) { Assert . notNull ( org.springframework.http.client.OkHttpClient , STRING ) ; this . org.springframework.http.client.OkHttpClient = org.springframework.http.client.OkHttpClient ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.http.client.OkHttpClient = this . org.springframework.http.client.OkHttpClient . newBuilder ( ) . readTimeout ( int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.http.client.OkHttpClient = this . org.springframework.http.client.OkHttpClient . newBuilder ( ) . writeTimeout ( int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.http.client.OkHttpClient = this . org.springframework.http.client.OkHttpClient . newBuilder ( ) . connectTimeout ( int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) { return new OkHttp3ClientHttpRequest ( this . org.springframework.http.client.OkHttpClient , java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) { return new OkHttp3AsyncClientHttpRequest ( this . org.springframework.http.client.OkHttpClient , java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { if ( this . boolean ) { if ( this . org.springframework.http.client.OkHttpClient . cache ( ) != null ) { this . org.springframework.http.client.OkHttpClient . cache ( ) . close ( ) ; } this . org.springframework.http.client.OkHttpClient . dispatcher ( ) . executorService ( ) . shutdown ( ) ; } }  <METHOD_END>
<METHOD_START> static org.springframework.http.client.Request org.springframework.http.client.Request ( HttpHeaders org.springframework.http.client.HttpHeaders , byte [] byte[] , java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod )			throws java.net.MalformedURLException { okhttp3 . okhttp3 okhttp3.MediaType = okhttp3.MediaType ( org.springframework.http.client.HttpHeaders ) ; RequestBody org.springframework.http.client.RequestBody = ( byte[] . int > NUMBER || okhttp3 . internal . http . HttpMethod . requiresRequestBody ( org.springframework.http.client.HttpMethod . name ( ) ) ? RequestBody . create ( okhttp3.MediaType , byte[] ) : null ) ; Request . Request Request.Builder = new Request . Request ( ) . url ( java.net.URI . java.net.URL ( ) ) . method ( org.springframework.http.client.HttpMethod . name ( ) , org.springframework.http.client.RequestBody ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.http.client.HttpHeaders . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { Request.Builder . addHeader ( java.lang.String , java.lang.String ) ; } } return Request.Builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private static okhttp3 . okhttp3.MediaType okhttp3.MediaType ( HttpHeaders org.springframework.http.client.HttpHeaders ) { java.lang.String java.lang.String = org.springframework.http.client.HttpHeaders . getFirst ( HttpHeaders . CONTENT_TYPE ) ; return ( StringUtils . hasText ( java.lang.String ) ? okhttp3 . MediaType . parse ( java.lang.String ) : null ) ; }  <METHOD_END>
