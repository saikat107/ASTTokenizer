<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( new java.lang.String [] { java.lang.String } ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { if ( java.lang.String[] != null ) { this . java.lang.String[] = new java.lang.String [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] ; Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String[] [ int ] = java.lang.String . java.lang.String ( ) ; } } else { this . java.lang.String[] = new java.lang.String [ NUMBER ] ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . long = ( int * NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( PropertiesPersister org.springframework.integration.expression.PropertiesPersister ) { this . org.springframework.integration.expression.PropertiesPersister = ( org.springframework.integration.expression.PropertiesPersister != null ? org.springframework.integration.expression.PropertiesPersister : new DefaultPropertiesPersister ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.integration.expression.ResourceLoader ) { this . org.springframework.integration.expression.ResourceLoader = ( org.springframework.integration.expression.ResourceLoader != null ? org.springframework.integration.expression.ResourceLoader : new DefaultResourceLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.expression.Expression org.springframework.integration.expression.Expression ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { java.lang.String java.lang.String = this . java.lang.String ( java.lang.String , java.util.Locale ) ; if ( java.lang.String != null ) { return this . org.springframework.integration.expression.ExpressionParser . parseExpression ( java.lang.String ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { if ( this . long < NUMBER ) { org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.util.Locale ) ; java.lang.String java.lang.String = org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } } else { for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String , java.util.Locale ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } } } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.util.Locale java.util.Locale ) { synchronized ( this . java.util.Map<java.util.Locale,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> ) { org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = this . java.util.Map<java.util.Locale,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> . org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.util.Locale ) ; if ( org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder != null ) { return org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ; } java.util.Properties java.util.Properties = new java.util.Properties ( ) ; org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = new org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.util.Properties , - NUMBER ) ; for ( int int = this . java.lang.String[] . int - NUMBER ; int >= NUMBER ; int -- ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( this . java.lang.String[] [ int ] , java.util.Locale ) ; for ( int int = java.util.List<java.lang.String> . int ( ) - NUMBER ; int >= NUMBER ; int -- ) { java.lang.String java.lang.String = java.util.List<java.lang.String> . java.lang.String ( int ) ; org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.lang.String ) ; if ( org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . java.util.Properties ( ) != null ) { java.util.Properties . void ( org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . java.util.Properties ( ) ) ; } } } this . java.util.Map<java.util.Locale,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> . org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.util.Locale , org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ) ; return org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ; } }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { synchronized ( this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.util.List<java.lang.String>>> ) { java.util.Map<java.util.Locale,java.util.List<java.lang.String>> < java.util.Locale , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.util.Locale,java.util.List<java.lang.String>> = this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.util.List<java.lang.String>>> . java.util.Map<java.util.Locale,java.util.List<java.lang.String>> ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.util.List<java.lang.String>> != null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.util.Locale,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.util.Locale ) ; if ( java.util.List<java.lang.String> != null ) { return java.util.List<java.lang.String> ; } } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( NUMBER ) ; java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ( java.lang.String , java.util.Locale ) ) ; if ( this . boolean && ! java.util.Locale . boolean ( java.util.Locale . java.util.Locale ( ) ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String , java.util.Locale . java.util.Locale ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } java.util.List<java.lang.String> . boolean ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.util.List<java.lang.String>> != null ) { java.util.Map<java.util.Locale,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.util.Locale , java.util.List<java.lang.String> ) ; } else { java.util.Map<java.util.Locale,java.util.List<java.lang.String>> = new java.util.HashMap<java.util.Locale,java.util.List<java.lang.String>> < java.util.Locale , java.util.List<java.lang.String> < java.lang.String > > ( ) ; java.util.Map<java.util.Locale,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.util.Locale , java.util.List<java.lang.String> ) ; this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.util.List<java.lang.String>>> . java.util.Map<java.util.Locale,java.util.List<java.lang.String>> ( java.lang.String , java.util.Map<java.util.Locale,java.util.List<java.lang.String>> ) ; } return java.util.List<java.lang.String> ; } }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( NUMBER ) ; java.lang.String java.lang.String = java.util.Locale . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Locale . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Locale . java.lang.String ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '_' ) ; if ( java.lang.String . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.util.List<java.lang.String> . void ( NUMBER , java.lang.StringBuilder . java.lang.String ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( '_' ) ; if ( java.lang.String . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.util.List<java.lang.String> . void ( NUMBER , java.lang.StringBuilder . java.lang.String ( ) ) ; } if ( java.lang.String . int ( ) > NUMBER && ( java.lang.String . int ( ) > NUMBER || java.lang.String . int ( ) > NUMBER ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '_' ) . java.lang.StringBuilder ( java.lang.String ) ; java.util.List<java.lang.String> . void ( NUMBER , java.lang.StringBuilder . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.lang.String java.lang.String ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> ) { org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = this . java.util.Map<java.lang.String,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> . org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.lang.String ) ; if ( org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder != null && ( org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . long ( ) < NUMBER || org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . long ( ) > java.lang.System . long ( ) - this . long ) ) { return org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ; } return org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.lang.String , org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.lang.String java.lang.String , org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ) { long long = ( this . long < NUMBER ) ? - NUMBER : java.lang.System . long ( ) ; Resource org.springframework.integration.expression.Resource = this . org.springframework.integration.expression.ResourceLoader . getResource ( java.lang.String + java.lang.String ) ; if ( ! org.springframework.integration.expression.Resource . exists ( ) ) { org.springframework.integration.expression.Resource = this . org.springframework.integration.expression.ResourceLoader . getResource ( java.lang.String + java.lang.String ) ; } if ( org.springframework.integration.expression.Resource . exists ( ) ) { long long = - NUMBER ; if ( this . long >= NUMBER ) { try { long = org.springframework.integration.expression.Resource . lastModified ( ) ; if ( org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder != null && org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . long ( ) == long ) { if ( org.springframework.integration.expression.Log . isDebugEnabled ( ) ) { org.springframework.integration.expression.Log . debug ( STRING + java.lang.String + STRING ) ; } org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . void ( long ) ; return org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ; } } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.integration.expression.Log . isDebugEnabled ( ) ) { org.springframework.integration.expression.Log . debug ( org.springframework.integration.expression.Resource + STRING , java.io.IOException ) ; } long = - NUMBER ; } } try { java.util.Properties java.util.Properties = java.util.Properties ( org.springframework.integration.expression.Resource , java.lang.String ) ; org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = new org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.util.Properties , long ) ; } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.integration.expression.Log . isWarnEnabled ( ) ) { org.springframework.integration.expression.Log . warn ( STRING + org.springframework.integration.expression.Resource . getFilename ( ) + STRING , java.io.IOException ) ; } org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = new org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( ) ; } } else { if ( org.springframework.integration.expression.Log . isDebugEnabled ( ) ) { org.springframework.integration.expression.Log . debug ( STRING + java.lang.String + STRING ) ; } org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder = new org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( ) ; } org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder . void ( long ) ; this . java.util.Map<java.lang.String,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> . org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ( java.lang.String , org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ) ; return org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( Resource org.springframework.integration.expression.Resource , java.lang.String java.lang.String ) throws java.io.IOException { java.io.InputStream java.io.InputStream = org.springframework.integration.expression.Resource . getInputStream ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; try { if ( org.springframework.integration.expression.Resource . getFilename ( ) . endsWith ( java.lang.String ) ) { if ( org.springframework.integration.expression.Log . isDebugEnabled ( ) ) { org.springframework.integration.expression.Log . debug ( STRING + org.springframework.integration.expression.Resource . getFilename ( ) + STRING ) ; } this . org.springframework.integration.expression.PropertiesPersister . loadFromXml ( java.util.Properties , java.io.InputStream ) ; } else { java.lang.String java.lang.String = null ; if ( this . java.util.Properties != null ) { java.lang.String = this . java.util.Properties . java.lang.String ( java.lang.String ) ; } if ( java.lang.String == null ) { java.lang.String = this . java.lang.String ; } if ( java.lang.String != null ) { if ( org.springframework.integration.expression.Log . isDebugEnabled ( ) ) { org.springframework.integration.expression.Log . debug ( STRING + org.springframework.integration.expression.Resource . getFilename ( ) + STRING + java.lang.String + STRING ) ; } this . org.springframework.integration.expression.PropertiesPersister . load ( java.util.Properties , new java.io.InputStreamReader ( java.io.InputStream , java.lang.String ) ) ; } else { if ( org.springframework.integration.expression.Log . isDebugEnabled ( ) ) { org.springframework.integration.expression.Log . debug ( STRING + org.springframework.integration.expression.Resource . getFilename ( ) + STRING ) ; } this . org.springframework.integration.expression.PropertiesPersister . load ( java.util.Properties , java.io.InputStream ) ; } } return java.util.Properties ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.integration.expression.Log . debug ( STRING ) ; synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> ) { this . java.util.Map<java.lang.String,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> . void ( ) ; } synchronized ( this . java.util.Map<java.util.Locale,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> ) { this . java.util.Map<java.util.Locale,org.springframework.integration.expression.ReloadableResourceBundleExpressionSource.PropertiesHolder> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.integration.expression.ReloadableResourceBundleExpressionSource> ( ) . java.lang.String ( ) + STRING + StringUtils . arrayToCommaDelimitedString ( this . java.lang.String[] ) + STRING ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> void ( java.util.Properties java.util.Properties , long long ) { this . java.util.Properties = java.util.Properties ; this . long = long ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( ) { return this . java.util.Properties ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( this . java.util.Properties == null ) { return null ; } return this . java.util.Properties . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
