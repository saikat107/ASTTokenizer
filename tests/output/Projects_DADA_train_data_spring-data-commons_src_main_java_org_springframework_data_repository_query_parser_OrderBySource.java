<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , java.util.Optional . java.util.Optional<java.lang.Class<?>> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ) { this . java.util.List<org.springframework.data.repository.query.parser.Order> = new java.util.ArrayList <> ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } for ( java.lang.String java.lang.String : java.lang.String . java.lang.String[] ( java.lang.String ) ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( ! java.util.regex.Matcher . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) ; } java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) && java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) ; } this . java.util.List<org.springframework.data.repository.query.parser.Order> . add ( org.springframework.data.repository.query.parser.Order ( java.lang.String , Direction . fromOptionalString ( java.lang.String ) , java.util.Optional<java.lang.Class<?>> ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.query.parser.Order org.springframework.data.repository.query.parser.Order ( java.lang.String java.lang.String , java.util.Optional<org.springframework.data.repository.query.parser.Direction> < Direction > java.util.Optional<org.springframework.data.repository.query.parser.Direction> , java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ) { return java.util.Optional<java.lang.Class<?>> . java.util.Optional<java.lang.Object> ( java.lang.Class<?> -> { PropertyPath org.springframework.data.repository.query.parser.PropertyPath = PropertyPath . from ( java.lang.String , java.lang.Class<> ) ; return java.util.Optional<org.springframework.data.repository.query.parser.Direction> . map ( it -> new Order ( it , propertyPath . toDotPath ( ) ) ) . orElseGet ( ( ) new Order ( propertyPath . toDotPath ( ) ) ) ; } ) . orElseGet ( ( ) direction . map ( it -> new Order ( it , StringUtils . uncapitalize ( propertySource ) ) ) . orElseGet ( ( ) new Order ( StringUtils . uncapitalize ( propertySource ) ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.parser.Sort org.springframework.data.repository.query.parser.Sort ( ) { return Sort . by ( this . java.util.List<org.springframework.data.repository.query.parser.Order> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + StringUtils . collectionToDelimitedString ( java.util.List<org.springframework.data.repository.query.parser.Order> , STRING ) ; }  <METHOD_END>
