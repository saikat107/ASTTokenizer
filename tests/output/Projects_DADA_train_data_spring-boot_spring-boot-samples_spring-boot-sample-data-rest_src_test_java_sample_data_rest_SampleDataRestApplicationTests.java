<METHOD_START> @ Before public void void ( ) { this . sample.data.rest.MockMvc = MockMvcBuilders . webAppContextSetup ( this . sample.data.rest.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.data.rest.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.data.rest.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING , equalTo ( STRING ) ) ) . andExpect ( jsonPath ( STRING , equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.data.rest.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING , hasSize ( NUMBER ) ) ) ; }  <METHOD_END>
