<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , STRING ) ; assertThat ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . varchar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , LocalDateTime .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , LocalDateTime . of ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( NUMBER ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , LocalDateTime .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , LocalDateTime . of ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , STRING ) ; assertThat ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , STRING ) ; assertThat ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.CassandraQueryMethod org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method java.lang.reflect.Method ) { return new CassandraQueryMethod ( java.lang.reflect.Method , org.springframework.data.cassandra.repository.query.RepositoryMetadata , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.CassandraMappingContext ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( LocalDateTime org.springframework.data.cassandra.repository.query.LocalDateTime );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( @ CassandraType ( type = Name . DATE ) LocalDateTime org.springframework.data.cassandra.repository.query.LocalDateTime );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( @ CassandraType ( type = Name . DATE ) java.lang.Object java.lang.Object );  <METHOD_END>
