<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( AuditEventsMvcEndpoint .class ) . setEnabled ( true ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . header ( HttpHeaders . ACCEPT , MediaType . APPLICATION_JSON_VALUE ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( STRING , MediaType . APPLICATION_JSON_UTF8_VALUE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( AuditEventsMvcEndpoint .class ) . setEnabled ( false ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) . andExpect ( content ( ) . string ( not ( containsString ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) . param ( STRING , STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) . andExpect ( content ( ) . string ( not ( containsString ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.mvc.AuditEventRepository org.springframework.boot.actuate.endpoint.mvc.AuditEventRepository ( ) { AuditEventRepository org.springframework.boot.actuate.endpoint.mvc.AuditEventRepository = new InMemoryAuditEventRepository ( NUMBER ) ; org.springframework.boot.actuate.endpoint.mvc.AuditEventRepository . add ( org.springframework.boot.actuate.endpoint.mvc.AuditEvent ( STRING , STRING , STRING ) ) ; org.springframework.boot.actuate.endpoint.mvc.AuditEventRepository . add ( org.springframework.boot.actuate.endpoint.mvc.AuditEvent ( STRING , STRING , STRING ) ) ; org.springframework.boot.actuate.endpoint.mvc.AuditEventRepository . add ( org.springframework.boot.actuate.endpoint.mvc.AuditEvent ( STRING , STRING , STRING ) ) ; return org.springframework.boot.actuate.endpoint.mvc.AuditEventRepository ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.AuditEvent org.springframework.boot.actuate.endpoint.mvc.AuditEvent ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new AuditEvent ( java.util.Date . java.util.Date ( java.time.Instant . java.time.Instant ( java.lang.String ) ) , java.lang.String , java.lang.String , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; }  <METHOD_END>
