<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.core.codec.DataBufferEncoder . canEncode ( ResolvableType . forClass ( DataBuffer .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertFalse ( this . org.springframework.core.codec.DataBufferEncoder . canEncode ( ResolvableType . forClass ( java.lang.Integer .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertTrue ( this . org.springframework.core.codec.DataBufferEncoder . canEncode ( ResolvableType . forClass ( DataBuffer .class ) , MimeTypeUtils . APPLICATION_JSON ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.codec.DataBuffer = stringBuffer ( STRING ) ; DataBuffer org.springframework.core.codec.DataBuffer = stringBuffer ( STRING ) ; Flux < DataBuffer > org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> = Flux . just ( org.springframework.core.codec.DataBuffer , org.springframework.core.codec.DataBuffer ) ; Flux < DataBuffer > org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> = this . org.springframework.core.codec.DataBufferEncoder . encode ( org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> , this . bufferFactory , ResolvableType . forClassWithGenerics ( Publisher .class , java.nio.ByteBuffer .class ) , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; assertSame ( org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> , org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> ) ; }  <METHOD_END>
