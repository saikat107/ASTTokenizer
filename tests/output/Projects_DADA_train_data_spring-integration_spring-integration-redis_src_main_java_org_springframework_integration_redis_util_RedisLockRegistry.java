<METHOD_START> public void ( RedisConnectionFactory org.springframework.integration.redis.util.RedisConnectionFactory , java.lang.String java.lang.String ) { this( org.springframework.integration.redis.util.RedisConnectionFactory , java.lang.String , long ); }  <METHOD_END>
<METHOD_START> public void ( RedisConnectionFactory org.springframework.integration.redis.util.RedisConnectionFactory , java.lang.String java.lang.String , long long ) { this( org.springframework.integration.redis.util.RedisConnectionFactory , java.lang.String , long , new DefaultLockRegistry ( ) ); }  <METHOD_END>
<METHOD_START> public void ( RedisConnectionFactory org.springframework.integration.redis.util.RedisConnectionFactory , java.lang.String java.lang.String , long long , LockRegistry org.springframework.integration.redis.util.LockRegistry ) { Assert . notNull ( org.springframework.integration.redis.util.RedisConnectionFactory , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.integration.redis.util.LockRegistry , STRING ) ; this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> = new RedisTemplate <> ( ) ; this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . setConnectionFactory ( org.springframework.integration.redis.util.RedisConnectionFactory ) ; this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . setKeySerializer ( new StringRedisSerializer ( ) ) ; this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . setValueSerializer ( this . org.springframework.integration.redis.util.RedisLockRegistry.LockSerializer ) ; this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . afterPropertiesSet ( ) ; this . java.lang.String = java.lang.String ; this . long = long ; this . org.springframework.integration.redis.util.LockRegistry = org.springframework.integration.redis.util.LockRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> < org.springframework.integration.redis.util.RedisLockRegistry.RedisLock > java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) { java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> < org.springframework.integration.redis.util.RedisLockRegistry.RedisLock > java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> = this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) ; if ( java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> == null ) { java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> = java.util.Collections . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( new java.util.WeakHashMap<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock,java.lang.Boolean> < org.springframework.integration.redis.util.RedisLockRegistry.RedisLock , java.lang.Boolean > ( ) ) ; this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . void ( java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ) ; } return java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> < org.springframework.integration.redis.util.RedisLockRegistry.RedisLock > java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) { java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> < org.springframework.integration.redis.util.RedisLockRegistry.RedisLock > java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> = this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) ; if ( java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> == null ) { java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> = new java.util.LinkedList<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> <> ( ) ; this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . void ( java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ) ; } return java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ( java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> < org.springframework.integration.redis.util.RedisLockRegistry.RedisLock > java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> , java.lang.Object java.lang.Object ) { if ( java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> != null ) { for ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock : java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ) { if ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String ( ) . boolean ( java.lang.Object ) ) { return org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ; } } } return null ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) { if ( this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) != null ) { this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ; } java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ; if ( this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) != null && this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( ) ) { this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) { if ( this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) != null ) { java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ; } if ( this . boolean ) { java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ; } if ( this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) != null && this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( ) ) { this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ( this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) , java.lang.Object ) ; if ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock != null && org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.Thread != null ) { org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . boundValueOps ( this . java.lang.String + STRING + java.lang.Object ) . get ( ) ; if ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock == null || ! org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ) { try { org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.integration.redis.util.Log . isWarnEnabled ( ) ) { org.springframework.integration.redis.util.Log . warn ( STRING , java.lang.Exception ) ; } } if ( this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) != null ) { this . java.lang.ThreadLocal<java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.List<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ; } if ( this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) != null ) { this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ; } org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = null ; } } if ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock == null ) { org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ( this . java.lang.ThreadLocal<java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock>> . java.util.Set<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) , java.lang.Object ) ; if ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock == null ) { org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = new org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ( ( java.lang.String ) java.lang.Object ) ; if ( this . boolean ) { java.util.Collection<org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ; } } } return org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.util.concurrent.locks.Lock> < java.util.concurrent.locks.Lock > java.util.Collection<java.util.concurrent.locks.Lock> ( ) { return this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . execute ( ( RedisCallback < java.util.Collection<java.util.concurrent.locks.Lock> < java.util.concurrent.locks.Lock > > ) connection -> { Set < byte [] > keys = connection . keys ( ( RedisLockRegistry .this . registryKey + STRING ) . getBytes ( ) ) ; if ( keys . size ( ) > NUMBER ) { List < byte [] > locks = connection . mGet ( keys . toArray ( new byte [ [] keys . size ( ) ][] ) ) ; return locks . stream ( ) . map ( RedisLockRegistry .this . lockSerializer :: deserialize ) . collect ( Collectors . toList ( ) ) ; } return Collections . emptyList ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . byte[] = org.springframework.integration.redis.util.RedisLockRegistry . byte[] ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.LockRegistry . obtain ( this . java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; while ( true ) { try { while ( ! this . boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; } break; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.locks.Lock . void ( ) ; void ( java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Exception java.lang.Exception ) { throw new CannotAcquireLockException ( STRING + this . java.lang.String , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.InterruptedException { java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.LockRegistry . obtain ( this . java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; try { while ( ! this . boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.util.concurrent.locks.Lock . void ( ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw java.lang.InterruptedException ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.locks.Lock . void ( ) ; void ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.LockRegistry . obtain ( this . java.lang.String ) ; try { if ( ! java.util.concurrent.locks.Lock . boolean ( ) ) { return false ; } boolean boolean = this . boolean ( ) ; if ( ! boolean ) { java.util.concurrent.locks.Lock . void ( ) ; } return boolean ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.locks.Lock . void ( ) ; void ( java.lang.Exception ) ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; if ( java.lang.Thread . boolean ( this . java.lang.Thread ) ) { this . int ++ ; return true ; } void ( this ) ; this . long = java.lang.System . long ( ) ; this . java.lang.String = java.lang.Thread . java.lang.String ( ) ; java.lang.Boolean java.lang.Boolean = false ; try { java.lang.Boolean = org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . execute ( ( RedisCallback < java.lang.Boolean > ) connection -> { This command isn't supported directly by RedisTemplate.					*/ long expireAfter = TimeoutUtils . toSeconds ( RedisLockRegistry .this . expireAfter , TimeUnit . MILLISECONDS ) ; RedisSerializer < String > serializer = RedisLockRegistry .this . redisTemplate . getStringSerializer ( ) ; byte [] [] actualArgs = new byte [] [] { serializer . serialize ( constructLockKey ( ) ) , RedisLockRegistry .this . lockSerializer . serialize ( RedisLock .this ) , serializer . serialize ( STRING ) , serializer . serialize ( STRING ) , serializer . serialize ( String . valueOf ( expireAfter ) ) } ; return connection . execute ( STRING , actualArgs ) != null ; } ) ; } finally { if ( ! java.lang.Boolean ) { this . long = NUMBER ; this . java.lang.String = null ; void ( this ) ; } else { this . java.lang.Thread = java.lang.Thread ; if ( org.springframework.integration.redis.util.Log . isDebugEnabled ( ) ) { org.springframework.integration.redis.util.Log . debug ( STRING + this ) ; } } } return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException { java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.LockRegistry . obtain ( this . java.lang.String ) ; if ( ! java.util.concurrent.locks.Lock . boolean ( long , java.util.concurrent.TimeUnit ) ) { return false ; } try { long long = java.lang.System . long ( ) + java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( long , java.util.concurrent.TimeUnit ) ; boolean boolean ; while ( ! ( boolean = boolean ( ) ) && java.lang.System . long ( ) < long ) { java.lang.Thread . void ( NUMBER ) ; } if ( ! boolean ) { java.util.concurrent.locks.Lock . void ( ) ; } return boolean ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.locks.Lock . void ( ) ; void ( java.lang.Exception ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! java.lang.Thread . java.lang.Thread ( ) . boolean ( this . java.lang.Thread ) ) { if ( this . java.lang.Thread == null ) { throw new java.lang.IllegalStateException ( STRING + this ) ; } throw new java.lang.IllegalStateException ( STRING + this . java.lang.Thread . java.lang.String ( ) + STRING + this ) ; } try { if ( this . int -- <= NUMBER ) { try { this . void ( ) ; org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . delete ( java.lang.String ( ) ) ; if ( org.springframework.integration.redis.util.Log . isDebugEnabled ( ) ) { org.springframework.integration.redis.util.Log . debug ( STRING + this ) ; } } finally { this . java.lang.Thread = null ; this . int = NUMBER ; void ( this ) ; } } } finally { java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.LockRegistry . obtain ( this . java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = org.springframework.integration.redis.util.RedisLockRegistry .this . org.springframework.integration.redis.util.RedisTemplate<java.lang.String,org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> . boundValueOps ( java.lang.String ( ) ) . get ( ) ; if ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock == null || ! this . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ) { throw new java.lang.IllegalStateException ( STRING + this + ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock == null ? STRING : STRING + org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return org.springframework.integration.redis.util.RedisLockRegistry .this . java.lang.String + STRING + this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Condition java.util.concurrent.locks.Condition ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String ( ) + STRING + java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter . java.lang.String ( java.time.Instant . java.time.Instant ( this . long ) . java.time.ZonedDateTime ( java.time.ZoneId . java.time.ZoneId ( ) ) ) + STRING + this . java.lang.String + STRING + new java.lang.String ( this . byte[] ) + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + org.springframework.integration.redis.util.RedisLockRegistry ( ) . int ( ) ; int = int * int + java.util.Arrays . int ( this . byte[] ) ; int = int * int + ( ( this . java.lang.String == null ) ? NUMBER : this . java.lang.String . int ( ) ) ; int = int * int + ( int ) ( this . long ^ ( this . long >>> NUMBER ) ) ; int = int * int + ( ( this . java.lang.String == null ) ? NUMBER : this . java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.integration.redis.util.RedisLockRegistry.RedisLock> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) java.lang.Object ; if ( ! org.springframework.integration.redis.util.RedisLockRegistry ( ) . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . org.springframework.integration.redis.util.RedisLockRegistry ( ) ) ) { return false ; } if ( ! java.util.Arrays . boolean ( this . byte[] , org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . byte[] ) ) { return false ; } if ( ! this . java.lang.String . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String ) ) { return false ; } if ( this . long != org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . long ) { return false ; } if ( this . java.lang.String == null ) { if ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String != null ) { return false ; } } else if ( ! this . java.lang.String . boolean ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.redis.util.RedisLockRegistry org.springframework.integration.redis.util.RedisLockRegistry ( ) { return org.springframework.integration.redis.util.RedisLockRegistry .this ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ) throws org.springframework.integration.redis.util.SerializationException { int int = org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . byte[] . int ; int int = org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String . int ( ) ; int int = org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String . int ( ) ; byte [] byte[] = new byte [ NUMBER + int + NUMBER + int + NUMBER + int + NUMBER ] ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) int ) . java.nio.ByteBuffer ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . byte[] ) . java.nio.ByteBuffer ( ( byte ) int ) . java.nio.ByteBuffer ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String . byte[] ( ) ) . java.nio.ByteBuffer ( ( byte ) int ) . java.nio.ByteBuffer ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String . byte[] ( ) ) . java.nio.ByteBuffer ( org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . long ) ; return byte[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ( byte [] byte[] ) throws org.springframework.integration.redis.util.SerializationException { if ( byte[] == null ) { return null ; } java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; byte [] byte[] = new byte [ java.nio.ByteBuffer . byte ( ) ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; byte [] byte[] = new byte [ java.nio.ByteBuffer . byte ( ) ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; byte [] byte[] = new byte [ java.nio.ByteBuffer . byte ( ) ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; long long = java.nio.ByteBuffer . long ( ) ; org.springframework.integration.redis.util.RedisLockRegistry.RedisLock org.springframework.integration.redis.util.RedisLockRegistry.RedisLock = new org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ( new java.lang.String ( byte[] ) ) ; org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . long = long ; org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . byte[] = byte[] ; org.springframework.integration.redis.util.RedisLockRegistry.RedisLock . java.lang.String = new java.lang.String ( byte[] ) ; return org.springframework.integration.redis.util.RedisLockRegistry.RedisLock ; }  <METHOD_END>
