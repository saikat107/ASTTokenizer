<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( final boolean boolean , boolean boolean ) throws java.lang.Exception { QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Exception> < java.lang.Exception > java.util.concurrent.atomic.AtomicReference<java.lang.Exception> = new java.util.concurrent.atomic.AtomicReference<java.lang.Exception> < java.lang.Exception > ( ) ; UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new UnicastReceivingChannelAdapter ( NUMBER ) { @ java.lang.Override public boolean boolean ( ) { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { try { java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { fail ( ) ; } return true ; } else { return super. isActive ( ) ; } } @ java.lang.Override protected java.net.DatagramPacket java.net.DatagramPacket ( ) java.lang.Exception { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { return new java.net.DatagramPacket ( new byte [ NUMBER ] , NUMBER ) ; } else { return super. receive ( ) ; } } @ java.lang.Override protected boolean boolean ( java.net.DatagramPacket java.net.DatagramPacket ) { boolean boolean = false ; try { boolean = super. asyncSendMessage ( java.net.DatagramPacket ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.atomic.AtomicReference<java.lang.Exception> . void ( java.lang.Exception ) ; } if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { java.util.concurrent.CountDownLatch . void ( ) ; } return boolean ; } @ java.lang.Override public java.util.concurrent.Executor java.util.concurrent.Executor ( ) { java.util.concurrent.Executor java.util.concurrent.Executor = super. getTaskExecutor ( ) ; if ( boolean && java.util.concurrent.Executor != null ) { ( ( java.util.concurrent.ExecutorService ) java.util.concurrent.Executor ) . void ( ) ; } return java.util.concurrent.Executor ; } } ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; if ( boolean ) { org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setLocalAddress ( STRING ) ; } org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; int int = org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; DatagramPacketMessageMapper org.springframework.integration.ip.udp.DatagramPacketMessageMapper = new DatagramPacketMessageMapper ( ) ; java.net.DatagramPacket java.net.DatagramPacket = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . fromMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( STRING , int ) ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( NUMBER ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; java.net.DatagramSocket . void ( ) ; @ java.lang.SuppressWarnings ( STRING ) Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.udp.Message<byte[]> ) ; assertEquals ( new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNull ( java.util.concurrent.atomic.AtomicReference<java.lang.Exception> . java.lang.Exception ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { try { java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { fail ( ) ; } return true ; } else { return super. isActive ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.DatagramPacket java.net.DatagramPacket ( ) java.lang.Exception { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { return new java.net.DatagramPacket ( new byte [ NUMBER ] , NUMBER ) ; } else { return super. receive ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.net.DatagramPacket java.net.DatagramPacket ) { boolean boolean = false ; try { boolean = super. asyncSendMessage ( java.net.DatagramPacket ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.atomic.AtomicReference<java.lang.Exception> . void ( java.lang.Exception ) ; } if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { java.util.concurrent.CountDownLatch . void ( ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Executor java.util.concurrent.Executor ( ) { java.util.concurrent.Executor java.util.concurrent.Executor = super. getTaskExecutor ( ) ; if ( boolean && java.util.concurrent.Executor != null ) { ( ( java.util.concurrent.ExecutorService ) java.util.concurrent.Executor ) . void ( ) ; } return java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new UnicastReceivingChannelAdapter ( NUMBER ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; int int = org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; DatagramPacketMessageMapper org.springframework.integration.ip.udp.DatagramPacketMessageMapper = new DatagramPacketMessageMapper ( ) ; java.net.DatagramPacket java.net.DatagramPacket = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . fromMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( STRING , int ) ) ; final java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( NUMBER ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; final java.util.concurrent.atomic.AtomicReference<java.net.DatagramPacket> < java.net.DatagramPacket > java.util.concurrent.atomic.AtomicReference<java.net.DatagramPacket> = new java.util.concurrent.atomic.AtomicReference<java.net.DatagramPacket> < java.net.DatagramPacket > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) { java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( new byte [ NUMBER ] , NUMBER ) ; try { java.util.concurrent.CountDownLatch . void ( ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; java.util.concurrent.atomic.AtomicReference<java.net.DatagramPacket> . void ( java.net.DatagramPacket ) ; java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { java.io.IOException . void ( ) ; } } ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertEquals ( new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; java.lang.String java.lang.String = STRING + java.lang.System . long ( ) ; byte [] byte[] = java.lang.String . byte[] ( ) ; java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( byte[] , byte[] . int ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( ( java.lang.String ) org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) , ( java.lang.Integer ) org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . get ( IpHeaders . PORT ) ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.net.DatagramPacket java.net.DatagramPacket = java.util.concurrent.atomic.AtomicReference<java.net.DatagramPacket> . java.net.DatagramPacket ( ) ; assertNotNull ( java.net.DatagramPacket ) ; assertEquals ( java.lang.String , new java.lang.String ( java.net.DatagramPacket . byte[] ( ) , NUMBER , java.net.DatagramPacket . int ( ) ) ) ; java.net.DatagramSocket . void ( ) ; java.net.DatagramSocket . void ( ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new UnicastReceivingChannelAdapter ( NUMBER ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setBeanName ( STRING ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; int int = org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ; UnicastSendingMessageHandler org.springframework.integration.ip.udp.UnicastSendingMessageHandler = new UnicastSendingMessageHandler ( STRING , int , false , true , STRING , NUMBER , NUMBER ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . start ( ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . handleMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertEquals ( new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; MulticastReceivingChannelAdapter org.springframework.integration.ip.udp.MulticastReceivingChannelAdapter = new MulticastReceivingChannelAdapter ( this . org.springframework.integration.ip.udp.MulticastRule . getGroup ( ) , NUMBER ) ; org.springframework.integration.ip.udp.MulticastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; java.lang.String java.lang.String = this . org.springframework.integration.ip.udp.MulticastRule . getNic ( ) ; org.springframework.integration.ip.udp.MulticastReceivingChannelAdapter . setLocalAddress ( java.lang.String ) ; org.springframework.integration.ip.udp.MulticastReceivingChannelAdapter . start ( ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.MulticastReceivingChannelAdapter ) ; int int = org.springframework.integration.ip.udp.MulticastReceivingChannelAdapter . getPort ( ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; DatagramPacketMessageMapper org.springframework.integration.ip.udp.DatagramPacketMessageMapper = new DatagramPacketMessageMapper ( ) ; java.net.DatagramPacket java.net.DatagramPacket = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . fromMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( this . org.springframework.integration.ip.udp.MulticastRule . getGroup ( ) , int ) ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( NUMBER , java.net.Inet4Address . java.net.InetAddress ( java.lang.String ) ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; java.net.DatagramSocket . void ( ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.udp.Message<byte[]> ) ; assertEquals ( new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; org.springframework.integration.ip.udp.MulticastReceivingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new MulticastReceivingChannelAdapter ( this . org.springframework.integration.ip.udp.MulticastRule . getGroup ( ) , NUMBER ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; java.lang.String java.lang.String = this . org.springframework.integration.ip.udp.MulticastRule . getNic ( ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setLocalAddress ( java.lang.String ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; MulticastSendingMessageHandler org.springframework.integration.ip.udp.MulticastSendingMessageHandler = new MulticastSendingMessageHandler ( this . org.springframework.integration.ip.udp.MulticastRule . getGroup ( ) , org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . setLocalAddress ( java.lang.String ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . handleMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.udp.Message<byte[]> ) ; assertEquals ( new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SubscribableChannel org.springframework.integration.ip.udp.SubscribableChannel = new DirectChannel ( ) ; UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new UnicastReceivingChannelAdapter ( NUMBER ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.SubscribableChannel ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.SubscribableChannel ) ; ServiceActivatingHandler org.springframework.integration.ip.udp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.udp.UdpChannelAdapterTests.FailingService ( ) ) ; org.springframework.integration.ip.udp.SubscribableChannel . subscribe ( org.springframework.integration.ip.udp.ServiceActivatingHandler ) ; QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setErrorChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; int int = org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; DatagramPacketMessageMapper org.springframework.integration.ip.udp.DatagramPacketMessageMapper = new DatagramPacketMessageMapper ( ) ; java.net.DatagramPacket java.net.DatagramPacket = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . fromMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( STRING , int ) ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( NUMBER ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; java.net.DatagramSocket . void ( ) ; Message < ? > org.springframework.integration.ip.udp.Message<?> = org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.udp.Message<> ) ; assertEquals ( STRING , ( ( java.lang.Exception ) org.springframework.integration.ip.udp.Message<> . getPayload ( ) ) . java.lang.Throwable ( ) . java.lang.String ( ) ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.ip.udp.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.ip.udp.UdpChannelAdapterTests> ( ) ) ; UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = org.springframework.integration.ip.udp.ConfigurableApplicationContext . getBean ( UnicastReceivingChannelAdapter .class ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; int int = org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ; java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( STRING . byte[] ( ) , NUMBER ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( STRING , int ) ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; assertEquals ( STRING , new java.lang.String ( java.net.DatagramPacket . byte[] ( ) ) ) ; assertEquals ( int , java.net.DatagramPacket . int ( ) ) ; java.net.DatagramSocket . void ( ) ; org.springframework.integration.ip.udp.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( byte [] byte[] ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
