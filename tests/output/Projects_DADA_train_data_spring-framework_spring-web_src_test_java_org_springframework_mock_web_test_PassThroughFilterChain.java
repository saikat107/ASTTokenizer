<METHOD_START> public void ( Filter org.springframework.mock.web.test.Filter , FilterChain org.springframework.mock.web.test.FilterChain ) { Assert . notNull ( org.springframework.mock.web.test.Filter , STRING ) ; Assert . notNull ( org.springframework.mock.web.test.FilterChain , STRING ) ; this . org.springframework.mock.web.test.Filter = org.springframework.mock.web.test.Filter ; this . org.springframework.mock.web.test.FilterChain = org.springframework.mock.web.test.FilterChain ; }  <METHOD_END>
<METHOD_START> public void ( Servlet org.springframework.mock.web.test.Servlet ) { Assert . notNull ( org.springframework.mock.web.test.Servlet , STRING ) ; this . org.springframework.mock.web.test.Servlet = org.springframework.mock.web.test.Servlet ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.mock.web.test.ServletRequest , ServletResponse org.springframework.mock.web.test.ServletResponse ) throws org.springframework.mock.web.test.ServletException , java.io.IOException { if ( this . org.springframework.mock.web.test.Filter != null ) { this . org.springframework.mock.web.test.Filter . doFilter ( org.springframework.mock.web.test.ServletRequest , org.springframework.mock.web.test.ServletResponse , this . org.springframework.mock.web.test.FilterChain ) ; } else { this . org.springframework.mock.web.test.Servlet . service ( org.springframework.mock.web.test.ServletRequest , org.springframework.mock.web.test.ServletResponse ) ; } }  <METHOD_END>
