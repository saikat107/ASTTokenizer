<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String , final DataPolicy org.springframework.data.gemfire.config.xml.DataPolicy ) { void ( org.springframework.data.gemfire.config.xml.Region<,> , java.lang.String , Region . SEPARATOR + java.lang.String , org.springframework.data.gemfire.config.xml.DataPolicy ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final DataPolicy org.springframework.data.gemfire.config.xml.DataPolicy ) { assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.DataPolicy , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes ) { if ( org.springframework.data.gemfire.config.xml.ExpirationAttributes != null ) { assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes , final int int , final ExpirationAction org.springframework.data.gemfire.config.xml.ExpirationAction ) { assertNotNull ( org.springframework.data.gemfire.config.xml.ExpirationAttributes ) ; assertEquals ( int , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.ExpirationAction , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( final CustomExpiry < ? , ? > org.springframework.data.gemfire.config.xml.CustomExpiry<?,?> , final java.lang.String java.lang.String , final int int , final ExpirationAction org.springframework.data.gemfire.config.xml.ExpirationAction ) { assertNotNull ( org.springframework.data.gemfire.config.xml.CustomExpiry<,> ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.CustomExpiry<,> . toString ( ) ) ; void ( org.springframework.data.gemfire.config.xml.CustomExpiry<,> . getExpiry ( mock ( Region . Region .class ) ) , int , org.springframework.data.gemfire.config.xml.ExpirationAction ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<,> , STRING , DataPolicy . REPLICATE ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryTimeToLive ( ) , NUMBER , ExpirationAction . DESTROY ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryIdleTimeout ( ) , NUMBER , ExpirationAction . INVALIDATE ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryTimeToLive ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<,> , STRING , DataPolicy . PRELOADED ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryTimeToLive ( ) , NUMBER , ExpirationAction . LOCAL_DESTROY ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryIdleTimeout ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryTimeToLive ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<,> , STRING , DataPolicy . PARTITION ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryTimeToLive ( ) , NUMBER , ExpirationAction . DESTROY ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryIdleTimeout ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryTimeToLive ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) , STRING , NUMBER , ExpirationAction . INVALIDATE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<,> , STRING , DataPolicy . NORMAL ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryTimeToLive ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getEntryIdleTimeout ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryTimeToLive ( ) , STRING , NUMBER , ExpirationAction . LOCAL_DESTROY ) ; void ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) , STRING , NUMBER , ExpirationAction . LOCAL_INVALIDATE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ExpirationAttributes getExpiry ( final Region . Region < K , V > kvEntry ) { Assert . state ( java.lang.Integer != null , STRING ) ; Assert . state ( org.springframework.data.gemfire.config.xml.ExpirationAction != null , STRING ) ; return new ExpirationAttributes ( java.lang.Integer , org.springframework.data.gemfire.config.xml.ExpirationAction ) ; }  <METHOD_END>
<METHOD_START> public void void ( final ExpirationAction org.springframework.data.gemfire.config.xml.ExpirationAction ) { this . org.springframework.data.gemfire.config.xml.ExpirationAction = org.springframework.data.gemfire.config.xml.ExpirationAction ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
