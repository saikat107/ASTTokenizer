<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.web.multipart.support.HttpServletRequest ) { if ( ! STRING . boolean ( org.springframework.web.multipart.support.HttpServletRequest . getMethod ( ) . toLowerCase ( ) ) ) { return false ; } java.lang.String java.lang.String = org.springframework.web.multipart.support.HttpServletRequest . getContentType ( ) ; return ( java.lang.String != null && java.lang.String . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.multipart.support.MultipartHttpServletRequest org.springframework.web.multipart.support.MultipartHttpServletRequest ( HttpServletRequest org.springframework.web.multipart.support.HttpServletRequest ) throws org.springframework.web.multipart.support.MultipartException { return new StandardMultipartHttpServletRequest ( org.springframework.web.multipart.support.HttpServletRequest , this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MultipartHttpServletRequest org.springframework.web.multipart.support.MultipartHttpServletRequest ) { try { for ( Part org.springframework.web.multipart.support.Part : org.springframework.web.multipart.support.MultipartHttpServletRequest . getParts ( ) ) { if ( org.springframework.web.multipart.support.MultipartHttpServletRequest . getFile ( org.springframework.web.multipart.support.Part . getName ( ) ) != null ) { org.springframework.web.multipart.support.Part . delete ( ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.web.multipart.support.StandardServletMultipartResolver> ( ) ) . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
