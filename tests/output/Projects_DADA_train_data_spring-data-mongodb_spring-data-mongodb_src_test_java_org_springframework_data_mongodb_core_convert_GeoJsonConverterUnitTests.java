<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonPolygonConverter . convert ( org.springframework.data.mongodb.core.convert.Document ) , equalTo ( org.springframework.data.mongodb.core.convert.GeoJsonPolygon ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonPolygonConverter . convert ( null ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.convert.DocumentToGeoJsonPolygonConverter . convert ( new Document ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonPolygonConverter . convert ( org.springframework.data.mongodb.core.convert.Document ) , equalTo ( org.springframework.data.mongodb.core.convert.GeoJsonPolygon ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonPointConverter . convert ( org.springframework.data.mongodb.core.convert.Document ) , equalTo ( org.springframework.data.mongodb.core.convert.GeoJsonPoint ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonPointConverter . convert ( null ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.convert.DocumentToGeoJsonPointConverter . convert ( new Document ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonLineStringConverter . convert ( org.springframework.data.mongodb.core.convert.Document ) , equalTo ( org.springframework.data.mongodb.core.convert.GeoJsonLineString ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonLineStringConverter . convert ( null ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.convert.DocumentToGeoJsonLineStringConverter . convert ( new Document ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiLineStringConverter . convert ( org.springframework.data.mongodb.core.convert.Document ) , equalTo ( org.springframework.data.mongodb.core.convert.GeoJsonMultiLineString ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiLineStringConverter . convert ( null ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiLineStringConverter . convert ( new Document ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiPointConverter . convert ( org.springframework.data.mongodb.core.convert.Document ) , equalTo ( org.springframework.data.mongodb.core.convert.GeoJsonMultiPoint ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiPointConverter . convert ( null ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiPointConverter . convert ( new Document ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiPolygonConverter . convert ( org.springframework.data.mongodb.core.convert.Document ) , equalTo ( org.springframework.data.mongodb.core.convert.GeoJsonMultiPolygon ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiPolygonConverter . convert ( null ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.convert.DocumentToGeoJsonMultiPolygonConverter . convert ( new Document ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( null ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonPoint ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonPolygon ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonLineString ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonMultiLineString ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonMultiPoint ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonMultiPolygon ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonGeometryCollection ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.GeoJsonToDocumentConverter . convert ( org.springframework.data.mongodb.core.convert.GeoJsonPolygon ) , equalTo ( org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
