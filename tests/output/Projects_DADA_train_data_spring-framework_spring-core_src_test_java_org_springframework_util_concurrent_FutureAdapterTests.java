<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.concurrent.Future<java.lang.Integer> = mock ( java.util.concurrent.Future .class ) ; org.springframework.util.concurrent.FutureAdapter<java.lang.String,java.lang.Integer> = new FutureAdapter < java.lang.String , java.lang.Integer > ( java.util.concurrent.Future<java.lang.Integer> ) { @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) throws java.util.concurrent.ExecutionException { return java.lang.Integer . java.lang.String ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) throws java.util.concurrent.ExecutionException { return java.lang.Integer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.util.concurrent.Future<java.lang.Integer> . boolean ( true ) ) . willReturn ( true ) ; boolean boolean = org.springframework.util.concurrent.FutureAdapter<java.lang.String,java.lang.Integer> . cancel ( true ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( java.util.concurrent.Future<java.lang.Integer> . boolean ( ) ) . willReturn ( true ) ; boolean boolean = org.springframework.util.concurrent.FutureAdapter<java.lang.String,java.lang.Integer> . isCancelled ( ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( java.util.concurrent.Future<java.lang.Integer> . boolean ( ) ) . willReturn ( true ) ; boolean boolean = org.springframework.util.concurrent.FutureAdapter<java.lang.String,java.lang.Integer> . isDone ( ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.util.concurrent.Future<java.lang.Integer> . java.lang.Integer ( ) ) . willReturn ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.util.concurrent.FutureAdapter<java.lang.String,java.lang.Integer> . get ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.util.concurrent.Future<java.lang.Integer> . java.lang.Integer ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . willReturn ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.util.concurrent.FutureAdapter<java.lang.String,java.lang.Integer> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
