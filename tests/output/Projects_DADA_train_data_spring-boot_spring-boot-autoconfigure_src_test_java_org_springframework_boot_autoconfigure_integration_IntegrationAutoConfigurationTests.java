<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . close ( ) ; if ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getParent ( ) != null ) { ( ( ConfigurableApplicationContext ) this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getParent ( ) ) . close ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.integration.IntegrationAutoConfigurationTests.TestGateway .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( IntegrationComponentScanAutoConfiguration .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.integration.IntegrationAutoConfigurationTests.IntegrationComponentScanConfiguration .class , JmxAutoConfiguration .class , IntegrationAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.integration.IntegrationAutoConfigurationTests.TestGateway .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBeansOfType ( IntegrationComponentScanAutoConfiguration .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext = this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext ; this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . setParent ( org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext ) ; this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . register ( JmxAutoConfiguration .class , IntegrationAutoConfiguration .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( HeaderChannelRegistry .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; javax.management.MBeanServer javax.management.MBeanServer = this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( javax.management.MBeanServer .class ) ; void ( javax.management.MBeanServer , true , STRING , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME ) ; assertThat ( java.lang.Object ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBeansOfType ( javax.management.MBeanServer .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBeansOfType ( IntegrationManagementConfigurer .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; javax.management.MBeanServer javax.management.MBeanServer = this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( javax.management.MBeanServer .class ) ; void ( javax.management.MBeanServer , true , STRING ) ; void ( javax.management.MBeanServer , false , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.integration.IntegrationAutoConfigurationTests.CustomMBeanExporter .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBeansOfType ( MBeanExporter .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( MBeanExporter .class ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( javax.management.MBeanServer javax.management.MBeanServer , boolean boolean , java.lang.String ... java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( javax.management.MBeanServer . java.lang.String[] ( ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { assertThat ( java.util.List<java.lang.String> . boolean ( java.lang.String ) ) . isEqualTo ( boolean ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { void ( null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . register ( JmxAutoConfiguration .class , IntegrationAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.integration.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public org.springframework.boot.autoconfigure.integration.MBeanExporter org.springframework.boot.autoconfigure.integration.MBeanExporter ( ) { return mock ( MBeanExporter .class ) ; }  <METHOD_END>
