<METHOD_START> @ Test public void void ( ) { GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; assertThat ( org.springframework.data.cassandra.config.GenericXmlApplicationContext . getBeanNamesForType ( CassandraOperations .class ) , hasItemInArray ( DefaultBeanNames . DATA_TEMPLATE ) ) ; assertThat ( org.springframework.data.cassandra.config.GenericXmlApplicationContext . getBeanNamesForType ( CassandraMappingContext .class ) , hasItemInArray ( DefaultBeanNames . CONTEXT ) ) ; assertThat ( org.springframework.data.cassandra.config.GenericXmlApplicationContext . getBeanNamesForType ( CassandraConverter .class ) , hasItemInArray ( DefaultBeanNames . CONVERTER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; assertThat ( org.springframework.data.cassandra.config.GenericXmlApplicationContext . getBeanNamesForType ( CassandraOperations .class ) , hasItemInArray ( DefaultBeanNames . DATA_TEMPLATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.ExpectedException . expect ( BeanCreationException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( containsString ( STRING ) ) ; GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( allOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( allOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( allOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( allOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericXmlApplicationContext org.springframework.data.cassandra.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . load ( org.springframework.data.cassandra.config.CassandraMappingBeanFactoryPostProcessorUnitTests .class , STRING ) ; org.springframework.data.cassandra.config.GenericXmlApplicationContext . refresh ( ) ; assertThat ( org.springframework.data.cassandra.config.GenericXmlApplicationContext . getBeanNamesForType ( CassandraOperations .class ) , arrayContaining ( STRING , STRING ) ) ; assertThat ( org.springframework.data.cassandra.config.GenericXmlApplicationContext . getBeanNamesForType ( CassandraMappingContext .class ) , arrayContaining ( STRING , STRING ) ) ; assertThat ( org.springframework.data.cassandra.config.GenericXmlApplicationContext . getBeanNamesForType ( CassandraConverter .class ) , arrayContaining ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return Session .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.cassandra.config.Session org.springframework.data.cassandra.config.Session ( ) { return mock ( Session .class ) ; }  <METHOD_END>
