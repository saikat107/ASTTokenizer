<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( java.util.List<java.lang.String> ( org.springframework.boot.autoconfigure.AnnotationMetadata , null ) ) ; java.util.Set<java.lang.String> . boolean ( java.util.Set<java.lang.String> ( org.springframework.boot.autoconfigure.AnnotationMetadata , null ) ) ; return java.util.Collections .< java.lang.Object > java.util.Set<java.lang.Object> ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata , AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.Map<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> = java.util.Map<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map.Entry<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> : java.util.Map<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>>> ( ) ) { void ( java.util.Map.Entry<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> . java.lang.Class<?> ( ) , java.util.Map.Entry<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> . java.util.List<java.lang.annotation.Annotation> ( ) , java.util.List<java.lang.String> ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.util.List<java.lang.annotation.Annotation> ) { java.util.List<java.lang.String> . boolean ( java.util.Collection<java.lang.String> ( java.lang.Class<> , java.lang.annotation.Annotation ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation , true ) . get ( STRING ) ; if ( java.lang.String[] . int > NUMBER ) { return java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; } return java.util.Collection<java.lang.String> ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return SpringFactoriesLoader . loadFactoryNames ( java.lang.Class<> , java.lang.Class<? extends org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata , AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( org.springframework.boot.autoconfigure.AnnotationMetadata . getClassName ( ) , null ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes = AnnotatedElementUtils . getMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( org.springframework.boot.autoconfigure.AnnotationAttributes == null ? null : org.springframework.boot.autoconfigure.AnnotationAttributes . getClassArray ( STRING ) ) ; if ( java.lang.Class<?>[] != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.Set<java.lang.String> . boolean ( java.lang.Class<> . java.lang.String ( ) ) ; } } } for ( java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> : java.util.Map<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> ( org.springframework.boot.autoconfigure.AnnotationMetadata ) . values ( ) ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.util.List<java.lang.annotation.Annotation> ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation , true ) . get ( STRING ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected final java.util.Map<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map<java.lang.Class<?>,java.util.List<java.lang.annotation.Annotation>> ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata ) { MultiValueMap < java.lang.Class<?> < ? > , java.lang.annotation.Annotation > org.springframework.boot.autoconfigure.MultiValueMap<java.lang.Class<?>,java.lang.annotation.Annotation> = new LinkedMultiValueMap <> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( org.springframework.boot.autoconfigure.AnnotationMetadata . getClassName ( ) , null ) ; void ( java.lang.Class<> , org.springframework.boot.autoconfigure.MultiValueMap<java.lang.Class<?>,java.lang.annotation.Annotation> , new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) ) ; return java.util.Collections . java.util.Map ( org.springframework.boot.autoconfigure.MultiValueMap<java.lang.Class<?>,java.lang.annotation.Annotation> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , MultiValueMap < java.lang.Class<?> < ? > , java.lang.annotation.Annotation > org.springframework.boot.autoconfigure.MultiValueMap<java.lang.Class<?>,java.lang.annotation.Annotation> , java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.HashSet<java.lang.Class<?>> ) { if ( java.lang.Class<> != null && java.util.HashSet<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ) { if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.annotation.Annotation ) ) { if ( java.util.Set<java.lang.String> . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ) { org.springframework.boot.autoconfigure.MultiValueMap<java.lang.Class<?>,java.lang.annotation.Annotation> . add ( java.lang.Class<> , java.lang.annotation.Annotation ) ; } void ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) , org.springframework.boot.autoconfigure.MultiValueMap<java.lang.Class<?>,java.lang.annotation.Annotation> , java.util.HashSet<java.lang.Class<?>> ) ; } } void ( java.lang.Class<> . java.lang.Class<? super > ( ) , org.springframework.boot.autoconfigure.MultiValueMap<java.lang.Class<?>,java.lang.annotation.Annotation> , java.util.HashSet<java.lang.Class<?>> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return super. getOrder ( ) - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { }  <METHOD_END>
