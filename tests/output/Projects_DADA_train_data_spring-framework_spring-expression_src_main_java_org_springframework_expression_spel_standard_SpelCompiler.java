<METHOD_START> private void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . org.springframework.expression.spel.standard.SpelCompiler.ChildClassLoader = new org.springframework.expression.spel.standard.SpelCompiler.ChildClassLoader ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.standard.CompiledExpression org.springframework.expression.spel.standard.CompiledExpression ( SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ) { if ( org.springframework.expression.spel.standard.SpelNodeImpl . isCompilable ( ) ) { if ( org.springframework.expression.spel.standard.Log . isDebugEnabled ( ) ) { org.springframework.expression.spel.standard.Log . debug ( STRING + org.springframework.expression.spel.standard.SpelNodeImpl . toStringAST ( ) ) ; } java.lang.Class<? extends org.springframework.expression.spel.standard.CompiledExpression> < ? extends CompiledExpression > java.lang.Class<? extends org.springframework.expression.spel.standard.CompiledExpression> = java.lang.Class<? extends org.springframework.expression.spel.standard.CompiledExpression> ( org.springframework.expression.spel.standard.SpelNodeImpl ) ; if ( java.lang.Class<> != null ) { try { return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } } if ( org.springframework.expression.spel.standard.Log . isDebugEnabled ( ) ) { org.springframework.expression.spel.standard.Log . debug ( STRING + org.springframework.expression.spel.standard.SpelNodeImpl . toStringAST ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> private int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Class<? extends org.springframework.expression.spel.standard.CompiledExpression> < ? extends CompiledExpression > java.lang.Class<? extends org.springframework.expression.spel.standard.CompiledExpression> ( SpelNodeImpl org.springframework.expression.spel.standard.SpelNodeImpl ) { java.lang.String java.lang.String = STRING + int ( ) ; ClassWriter org.springframework.expression.spel.standard.ClassWriter = new org.springframework.expression.spel.standard.SpelCompiler.ExpressionClassWriter ( ) ; org.springframework.expression.spel.standard.ClassWriter . visit ( V1_5 , ACC_PUBLIC , java.lang.String , null , STRING , null ) ; MethodVisitor org.springframework.expression.spel.standard.MethodVisitor = org.springframework.expression.spel.standard.ClassWriter . visitMethod ( ACC_PUBLIC , STRING , STRING , null , null ) ; org.springframework.expression.spel.standard.MethodVisitor . visitCode ( ) ; org.springframework.expression.spel.standard.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.expression.spel.standard.MethodVisitor . visitMethodInsn ( INVOKESPECIAL , STRING , STRING , STRING , false ) ; org.springframework.expression.spel.standard.MethodVisitor . visitInsn ( RETURN ) ; org.springframework.expression.spel.standard.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; org.springframework.expression.spel.standard.MethodVisitor . visitEnd ( ) ; org.springframework.expression.spel.standard.MethodVisitor = org.springframework.expression.spel.standard.ClassWriter . visitMethod ( ACC_PUBLIC , STRING , STRING , null , new java.lang.String [ { STRING } ) ; org.springframework.expression.spel.standard.MethodVisitor . visitCode ( ) ; CodeFlow org.springframework.expression.spel.standard.CodeFlow = new CodeFlow ( java.lang.String , org.springframework.expression.spel.standard.ClassWriter ) ; try { org.springframework.expression.spel.standard.SpelNodeImpl . generateCode ( org.springframework.expression.spel.standard.MethodVisitor , org.springframework.expression.spel.standard.CodeFlow ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { if ( org.springframework.expression.spel.standard.Log . isDebugEnabled ( ) ) { org.springframework.expression.spel.standard.Log . debug ( org.springframework.expression.spel.standard.SpelNodeImpl . getClass ( ) . getSimpleName ( ) + STRING + java.lang.IllegalStateException . java.lang.String ( ) ) ; } return null ; } CodeFlow . insertBoxIfNecessary ( org.springframework.expression.spel.standard.MethodVisitor , org.springframework.expression.spel.standard.CodeFlow . lastDescriptor ( ) ) ; if ( STRING . boolean ( org.springframework.expression.spel.standard.CodeFlow . lastDescriptor ( ) ) ) { org.springframework.expression.spel.standard.MethodVisitor . visitInsn ( ACONST_NULL ) ; } org.springframework.expression.spel.standard.MethodVisitor . visitInsn ( ARETURN ) ; org.springframework.expression.spel.standard.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; org.springframework.expression.spel.standard.MethodVisitor . visitEnd ( ) ; org.springframework.expression.spel.standard.ClassWriter . visitEnd ( ) ; org.springframework.expression.spel.standard.CodeFlow . finish ( ) ; byte [] byte[] = org.springframework.expression.spel.standard.ClassWriter . toByteArray ( ) ; return ( java.lang.Class<? extends org.springframework.expression.spel.standard.CompiledExpression> < ? extends CompiledExpression > ) this . org.springframework.expression.spel.standard.SpelCompiler.ChildClassLoader . java.lang.Class<?> ( java.lang.String . java.lang.String ( STRING , STRING ) , byte[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.expression.spel.standard.SpelCompiler org.springframework.expression.spel.standard.SpelCompiler ( java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.ClassLoader java.lang.ClassLoader = ( java.lang.ClassLoader != null ? java.lang.ClassLoader : ClassUtils . getDefaultClassLoader ( ) ) ; synchronized ( java.util.Map<java.lang.ClassLoader,org.springframework.expression.spel.standard.SpelCompiler> ) { org.springframework.expression.spel.standard.SpelCompiler org.springframework.expression.spel.standard.SpelCompiler = java.util.Map<java.lang.ClassLoader,org.springframework.expression.spel.standard.SpelCompiler> . org.springframework.expression.spel.standard.SpelCompiler ( java.lang.ClassLoader ) ; if ( org.springframework.expression.spel.standard.SpelCompiler == null ) { org.springframework.expression.spel.standard.SpelCompiler = new org.springframework.expression.spel.standard.SpelCompiler ( java.lang.ClassLoader ) ; java.util.Map<java.lang.ClassLoader,org.springframework.expression.spel.standard.SpelCompiler> . org.springframework.expression.spel.standard.SpelCompiler ( java.lang.ClassLoader , org.springframework.expression.spel.standard.SpelCompiler ) ; } return org.springframework.expression.spel.standard.SpelCompiler ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Expression org.springframework.expression.spel.standard.Expression ) { return ( org.springframework.expression.spel.standard.Expression instanceof SpelExpression && ( ( SpelExpression ) org.springframework.expression.spel.standard.Expression ) . compileExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Expression org.springframework.expression.spel.standard.Expression ) { if ( org.springframework.expression.spel.standard.Expression instanceof SpelExpression ) { ( ( SpelExpression ) org.springframework.expression.spel.standard.Expression ) . revertToInterpreted ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , byte [] byte[] ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( '.' , '/' ) ; java.lang.String java.lang.String = ( java.lang.String . int ( '/' ) != - NUMBER ? java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( '/' ) ) : STRING ) ; java.lang.String java.lang.String = null ; try { java.io.File java.io.File = java.io.File . java.io.File ( STRING , null ) ; java.lang.String = java.io.File + java.io.File . java.lang.String + java.lang.String + STRING ; java.io.File . boolean ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; java.io.File . boolean ( ) ; if ( org.springframework.expression.spel.standard.Log . isDebugEnabled ( ) ) { org.springframework.expression.spel.standard.Log . debug ( STRING + java.lang.String + STRING + java.lang.String ) ; } java.io.File = new java.io.File ( java.lang.String ) ; java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( java.io.File ) ; java.io.FileOutputStream . void ( byte[] ) ; java.io.FileOutputStream . void ( ) ; java.io.FileOutputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + java.lang.String , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.net.URL[] , java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , byte [] byte[] ) { return super. java.lang.Class<?> ( java.lang.String , byte[] , NUMBER , byte[] . int ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( ClassWriter . COMPUTE_MAXS | ClassWriter . COMPUTE_FRAMES ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return org.springframework.expression.spel.standard.SpelCompiler.ChildClassLoader ; }  <METHOD_END>
