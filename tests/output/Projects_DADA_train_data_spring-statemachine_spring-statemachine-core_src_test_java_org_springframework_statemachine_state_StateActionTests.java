<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.state.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.statemachine.state.StateActionTests.Config1 .class ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = org.springframework.statemachine.state.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; TestExitAction org.springframework.statemachine.state.TestExitAction = org.springframework.statemachine.state.AnnotationConfigApplicationContext . getBean ( STRING , TestExitAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = org.springframework.statemachine.state.AnnotationConfigApplicationContext . getBean ( STRING , TestEntryAction .class ) ; assertThat ( org.springframework.statemachine.state.TestExitAction , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.state.TestEntryAction , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( testExitAction . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testEntryAction . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.state.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { java.util.Collection<org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> = java.util.Arrays . java.util.List ( org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) ) ; java.util.Collection<org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> = java.util.Arrays . java.util.List ( org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) ) ; org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 , null , java.util.Collection<org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> ) . state ( TestStates . S2 , java.util.Collection<org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.state.Action<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ( ) { return new TestExitAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TaskExecutor org.springframework.statemachine.state.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
