<METHOD_START> protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.aop.aspectj.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.BeforeAdviceBindingTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.BeforeAdviceBindingTests> ( ) ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.ITestBean ) ) ; org.springframework.aop.aspectj.TestBean = ( TestBean ) ( ( Advised ) org.springframework.aop.aspectj.ITestBean ) . getTargetSource ( ) . getTarget ( ) ; AdviceBindingTestAspect org.springframework.aop.aspectj.AdviceBindingTestAspect = ( AdviceBindingTestAspect ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.AdviceBindingCollaborator = mock ( AdviceBindingCollaborator .class ) ; org.springframework.aop.aspectj.AdviceBindingTestAspect . setCollaborator ( org.springframework.aop.aspectj.AdviceBindingCollaborator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; verify ( org.springframework.aop.aspectj.AdviceBindingCollaborator ) . oneIntArg ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . getAge ( ) ; verify ( org.springframework.aop.aspectj.AdviceBindingCollaborator ) . oneObjectArg ( this . org.springframework.aop.aspectj.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; verify ( org.springframework.aop.aspectj.AdviceBindingCollaborator ) . oneIntAndOneObject ( NUMBER , this . org.springframework.aop.aspectj.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . getAge ( ) ; verify ( org.springframework.aop.aspectj.AdviceBindingCollaborator ) . needsJoinPoint ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . getAge ( ) ; verify ( org.springframework.aop.aspectj.AdviceBindingCollaborator ) . needsJoinPointStaticPart ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.System . java.io.PrintStream . void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
