<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class ) ; final MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.concurrent.ExecutorService . void ( new java.lang.Runnable ( ) { public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( java.lang.Object ) ; } } ) ; } java.util.concurrent.ExecutorService . void ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; GenericMessage < java.lang.String > org.springframework.integration.handler.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.util.Properties .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.handler.MethodInvokingMessageProcessor , STRING , java.lang.Boolean .class ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; java.util.Properties java.util.Properties = ( java.util.Properties ) java.lang.Object ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.handler.MethodInvokingMessageProcessor , STRING , java.lang.Boolean .class ) ) ; } java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; java.util.Properties java.util.Properties = ( java.util.Properties ) java.lang.Object ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.handler.MethodInvokingMessageProcessor , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.util.Properties .class , java.lang.Object .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; java.util.Properties java.util.Properties = ( java.util.Properties ) java.lang.Object ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.util.Map .class , java.lang.Object .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertTrue ( java.util.Map<,> . boolean ( MessageHeaders . ID ) ) ; assertTrue ( java.util.Map<,> . boolean ( MessageHeaders . TIMESTAMP ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.util.Properties .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; Message < java.util.Properties > org.springframework.integration.handler.Message<java.util.Properties> = MessageBuilder . withPayload ( java.util.Properties ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.util.Properties java.util.Properties = ( java.util.Properties ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.util.Properties> ) ; assertEquals ( NUMBER , java.util.Properties . int ( ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.util.Map .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.util.Map .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; Message < java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > org.springframework.integration.handler.Message<java.util.Map<java.lang.String,java.lang.Integer>> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Integer> ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = ( java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.util.Map<java.lang.String,java.lang.Integer>> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Integer> . int ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.handler.Message<?> = this . org.springframework.integration.handler.Message<?> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<> ) ; Assert . assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.handler.Message<?> = this . org.springframework.integration.handler.Message<?> ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class , org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee .class , java.lang.String .class , java.util.Map .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<> ) ; Assert . assertNotNull ( java.lang.Object[] ) ; Assert . assertTrue ( java.lang.Object[] . int == NUMBER ) ; Assert . assertTrue ( java.lang.Object[] [ NUMBER ] . boolean ( STRING ) ) ; Assert . assertTrue ( java.lang.Object[] [ NUMBER ] . boolean ( STRING ) ) ; Assert . assertTrue ( java.lang.Object[] [ NUMBER ] . boolean ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ) ) ; Assert . assertTrue ( java.lang.Object[] [ NUMBER ] . boolean ( STRING ) ) ; Assert . assertTrue ( java.lang.Object[] [ NUMBER ] instanceof java.util.Map ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.util.Map .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee > org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> = MessageBuilder . withPayload ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> ) ; Assert . assertTrue ( java.lang.Object instanceof java.util.Map ) ; Assert . assertEquals ( STRING , ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee > org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> = MessageBuilder . withPayload ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> ) ; Assert . assertTrue ( java.lang.Object instanceof java.lang.String ) ; Assert . assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee > org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> = MessageBuilder . withPayload ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> ) ; Assert . assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee > org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> = MessageBuilder . withPayload ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> ) ; Assert . assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.MultipleMappingAnnotationTestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee = new org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ( STRING , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.TestService , java.lang.reflect.Method ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.handler.Message<?> < ? > org.springframework.integration.handler.Message<?> ( ) { MessageBuilder < org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee > org.springframework.integration.handler.MessageBuilder<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> = MessageBuilder . withPayload ( org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee ) ; org.springframework.integration.handler.MessageBuilder<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> . setHeader ( STRING , STRING ) ; org.springframework.integration.handler.MessageBuilder<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> . setHeader ( STRING , STRING ) ; return org.springframework.integration.handler.MessageBuilder<org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee> . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ Payload ( STRING ) @ Header ( STRING ) java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return java.util.Map<,> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Payload ( STRING ) java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Payload ( STRING ) java.lang.String java.lang.String , @ Payload ( STRING ) java.lang.String java.lang.String ) { return java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Payload ( STRING ) java.lang.String java.lang.String , @ Header java.lang.String java.lang.String ) { return java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( @ Header ( required = false ) java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( @ Header ( value = STRING , required = true ) java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( STRING ) java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String ) { return java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( required = false ) java.lang.String java.lang.String , @ Header ( value = STRING , required = true ) java.lang.Integer java.lang.Integer ) { return java.lang.String + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( java.util.Properties java.util.Properties ) { return java.util.Properties ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( @ Headers java.util.Properties java.util.Properties ) { return java.util.Properties ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.util.Properties java.util.Properties , java.lang.Object java.lang.Object ) { java.util.Properties . java.lang.Object ( STRING , java.lang.Object ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> public java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return java.util.Map<,> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( @ Headers java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return java.util.Map<,> ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object java.lang.Object ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( STRING ) java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Object [] java.lang.Object[] ( @ Header ( STRING ) java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String , @ Payload org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee , @ Payload ( STRING ) java.lang.String java.lang.String , @ Headers java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return new java.lang.Object [] { java.lang.String , java.lang.String , org.springframework.integration.handler.MethodInvokingMessageProcessorAnnotationTests.Employee , java.lang.String , java.util.Map<,> } ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ BogusAnnotation java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( STRING ) java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String ) { org.springframework.integration.handler.Log . debug ( java.lang.String ) ; if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { int ++ ; } java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; return STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
