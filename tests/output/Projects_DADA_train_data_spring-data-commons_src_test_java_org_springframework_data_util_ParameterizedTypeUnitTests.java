<METHOD_START> @ Before public void void ( ) { when ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) ) . thenReturn ( new java.lang.reflect.Type [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDiscoverer < java.lang.String > org.springframework.data.util.TypeDiscoverer<java.lang.String> = new TypeDiscoverer <> ( java.lang.String .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; TypeDiscoverer < java.lang.Object > org.springframework.data.util.TypeDiscoverer<java.lang.Object> = new TypeDiscoverer <> ( java.lang.Object .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; ParameterizedTypeInformation < java.lang.Object > org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> = new ParameterizedTypeInformation <> ( java.lang.reflect.ParameterizedType , org.springframework.data.util.TypeDiscoverer<java.lang.String> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; ParameterizedTypeInformation < java.lang.Object > org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> = new ParameterizedTypeInformation <> ( java.lang.reflect.ParameterizedType , org.springframework.data.util.TypeDiscoverer<java.lang.Object> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> ) . isNotEqualTo ( org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDiscoverer < java.lang.String > org.springframework.data.util.TypeDiscoverer<java.lang.String> = new TypeDiscoverer <> ( java.lang.String .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; ParameterizedTypeInformation < java.lang.Object > org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> = new ParameterizedTypeInformation <> ( java.lang.reflect.ParameterizedType , org.springframework.data.util.TypeDiscoverer<java.lang.String> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; ParameterizedTypeInformation < java.lang.Object > org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> = new ParameterizedTypeInformation <> ( java.lang.reflect.ParameterizedType , org.springframework.data.util.TypeDiscoverer<java.lang.String> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> . equals ( org.springframework.data.util.ParameterizedTypeInformation<java.lang.Object> ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ParameterizedTypeUnitTests.Foo > org.springframework.data.util.TypeInformation<org.springframework.data.util.ParameterizedTypeUnitTests.Foo> = ClassTypeInformation . from ( org.springframework.data.util.ParameterizedTypeUnitTests.Foo .class ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ParameterizedTypeUnitTests.Foo> . getProperty ( STRING ) ; OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( it -> it . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getMapValueType ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ParameterizedTypeUnitTests.Foo> . getProperty ( STRING ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( it -> it . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getMapValueType ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( from ( org.springframework.data.util.ParameterizedTypeUnitTests.Foo .class ) . getProperty ( STRING ) ) . map ( java.lang.Object :: java.lang.String ) . hasValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = from ( org.springframework.data.util.ParameterizedTypeUnitTests.First .class ) . getProperty ( STRING ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = from ( org.springframework.data.util.ParameterizedTypeUnitTests.Second .class ) . getProperty ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) . isEqualTo ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) ; assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) . hasValueSatisfying ( left -> assertThat ( second ) . hasValueSatisfying ( right -> assertThat ( left . hashCode ( ) ) . isEqualTo ( right . hashCode ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = from ( org.springframework.data.util.ParameterizedTypeUnitTests.First .class ) . getProperty ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) . map ( TypeInformation :: getActualType ) . isEqualTo ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ParameterizedTypeUnitTests.NormalizedProfile > org.springframework.data.util.TypeInformation<org.springframework.data.util.ParameterizedTypeUnitTests.NormalizedProfile> = ClassTypeInformation . from ( org.springframework.data.util.ParameterizedTypeUnitTests.NormalizedProfile .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ParameterizedTypeUnitTests.NormalizedProfile> . getProperty ( STRING ) ) . flatMap ( TypeInformation :: getComponentType ) . flatMap ( it -> it . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Education .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( ClassTypeInformation . from ( org.springframework.data.util.ParameterizedTypeUnitTests.Bar .class ) . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . hasValueSatisfying ( it -> assertThat ( it ) . isInstanceOf ( ParameterizedTypeInformation .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getMapValueType ) . isEmpty ( ) ; }  <METHOD_END>
