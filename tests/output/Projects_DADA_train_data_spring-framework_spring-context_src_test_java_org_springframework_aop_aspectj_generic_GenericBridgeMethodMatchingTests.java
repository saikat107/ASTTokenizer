<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ org . org.junit . org.junit public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.generic.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.generic.GenericBridgeMethodMatchingTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.generic.GenericBridgeMethodMatchingTests> ( ) ) ; org.springframework.aop.aspectj.generic.GenericCounterAspect = ( org.springframework.aop.aspectj.generic.GenericCounterAspect ) org.springframework.aop.aspectj.generic.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.generic.GenericCounterAspect . int = NUMBER ; org.springframework.aop.aspectj.generic.DerivedInterface<java.lang.String> = ( org.springframework.aop.aspectj.generic.DerivedInterface<java.lang.String> < java.lang.String > ) org.springframework.aop.aspectj.generic.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.generic.DerivedInterface<java.lang.String> . void ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.GenericCounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.generic.DerivedInterface<java.lang.String> . void ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.GenericCounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> void void ( T T );  <METHOD_END>
<METHOD_START> public void void ( T T );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
