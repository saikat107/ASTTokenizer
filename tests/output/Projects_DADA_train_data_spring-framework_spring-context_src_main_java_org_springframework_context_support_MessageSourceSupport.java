<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.util.Locale java.util.Locale ) { return java.lang.String ( java.lang.String , java.lang.Object[] , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.util.Locale java.util.Locale ) { if ( java.lang.String == null || ( ! boolean ( ) && ObjectUtils . isEmpty ( java.lang.Object[] ) ) ) { return java.lang.String ; } java.text.MessageFormat java.text.MessageFormat = null ; synchronized ( this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> ) { java.util.Map<java.util.Locale,java.text.MessageFormat> < java.util.Locale , java.text.MessageFormat > java.util.Map<java.util.Locale,java.text.MessageFormat> = this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> . java.util.Map<java.util.Locale,java.text.MessageFormat> ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.text.MessageFormat> != null ) { java.text.MessageFormat = java.util.Map<java.util.Locale,java.text.MessageFormat> . java.text.MessageFormat ( java.util.Locale ) ; } else { java.util.Map<java.util.Locale,java.text.MessageFormat> = new java.util.HashMap<java.util.Locale,java.text.MessageFormat> <> ( ) ; this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> . java.util.Map<java.util.Locale,java.text.MessageFormat> ( java.lang.String , java.util.Map<java.util.Locale,java.text.MessageFormat> ) ; } if ( java.text.MessageFormat == null ) { try { java.text.MessageFormat = java.text.MessageFormat ( java.lang.String , java.util.Locale ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { if ( boolean ( ) ) { throw java.lang.IllegalArgumentException ; } java.text.MessageFormat = java.text.MessageFormat ; } java.util.Map<java.util.Locale,java.text.MessageFormat> . java.text.MessageFormat ( java.util.Locale , java.text.MessageFormat ) ; } } if ( java.text.MessageFormat == java.text.MessageFormat ) { return java.lang.String ; } synchronized ( java.text.MessageFormat ) { return java.text.MessageFormat . java.lang.String ( java.lang.Object[] ( java.lang.Object[] , java.util.Locale ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.text.MessageFormat java.text.MessageFormat ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return new java.text.MessageFormat ( ( java.lang.String != null ? java.lang.String : STRING ) , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object [] java.lang.Object[] ( java.lang.Object [] java.lang.Object[] , java.util.Locale java.util.Locale ) { return java.lang.Object[] ; }  <METHOD_END>
