<METHOD_START> public void ( LdapQueryMethod org.springframework.data.ldap.repository.query.LdapQueryMethod , java.lang.Class<?> < ? > java.lang.Class<?> , LdapOperations org.springframework.data.ldap.repository.query.LdapOperations ) { super( org.springframework.data.ldap.repository.query.LdapQueryMethod , java.lang.Class<> , org.springframework.data.ldap.repository.query.LdapOperations ); Assert . notNull ( org.springframework.data.ldap.repository.query.LdapQueryMethod . getQueryAnnotation ( ) , STRING ) ; Assert . hasLength ( org.springframework.data.ldap.repository.query.LdapQueryMethod . getQueryAnnotation ( ) . value ( ) , STRING ) ; org.springframework.data.ldap.repository.query.Query = org.springframework.data.ldap.repository.query.LdapQueryMethod . getQueryAnnotation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.ldap.repository.query.LdapQuery org.springframework.data.ldap.repository.query.LdapQuery ( java.lang.Object [] java.lang.Object[] ) { return query ( ) . base ( org.springframework.data.ldap.repository.query.Query . base ( ) ) . searchScope ( org.springframework.data.ldap.repository.query.Query . searchScope ( ) ) . countLimit ( org.springframework.data.ldap.repository.query.Query . countLimit ( ) ) . timeLimit ( org.springframework.data.ldap.repository.query.Query . timeLimit ( ) ) . filter ( org.springframework.data.ldap.repository.query.Query . value ( ) , java.lang.Object[] ) ; }  <METHOD_END>
