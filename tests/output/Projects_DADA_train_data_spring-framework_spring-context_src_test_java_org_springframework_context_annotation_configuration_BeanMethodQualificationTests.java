<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardConfig .class , org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo .class ) ; assertFalse ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo .class ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.ScopedConfig .class , org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo .class ) ; assertFalse ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo .class ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.ScopedProxyConfig .class , org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo .class ) ; assertTrue ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo .class ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.StandardPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomConfig .class , org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo .class ) ; assertFalse ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo .class ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomConfig .class . java.lang.String ( ) ) ) ; RootBeanDefinition org.springframework.context.annotation.configuration.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo .class . java.lang.String ( ) ) ; org.springframework.context.annotation.configuration.RootBeanDefinition . setLazyInit ( true ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.configuration.RootBeanDefinition ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo .class ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomConfigWithAttributeOverride .class , org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo .class ) ; assertFalse ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo .class ) ; assertThat ( org.springframework.context.annotation.configuration.BeanMethodQualificationTests.CustomPojo . org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Qualifier ( STRING ) @ Lazy public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.configuration.BeanMethodQualificationTests.Boring public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Qualifier ( STRING ) @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.configuration.BeanMethodQualificationTests.Boring @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Qualifier ( STRING ) @ Scope ( value = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.configuration.BeanMethodQualificationTests.Boring @ Scope ( value = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.annotation.configuration.BeanMethodQualificationTests.InterestingBean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Qualifier ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.annotation.configuration.BeanMethodQualificationTests.InterestingBeanWithName ( java.lang.String = STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Qualifier ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
