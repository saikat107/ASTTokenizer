<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext != null ) { this . org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.LazyNamingConfiguration .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.ProxyConfiguration .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { this . org.springframework.jmx.export.annotation.ExpectedException . expect ( InvalidMetadataException .class ) ; this . org.springframework.jmx.export.annotation.ExpectedException . expectMessage ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBean .class . java.lang.String ( ) ) ; this . org.springframework.jmx.export.annotation.ExpectedException . expectMessage ( STRING ) ; new AnnotationConfigApplicationContext ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { this . org.springframework.jmx.export.annotation.ExpectedException . expect ( InvalidMetadataException .class ) ; this . org.springframework.jmx.export.annotation.ExpectedException . expectMessage ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateAnnotationTestBean .class . java.lang.String ( ) ) ; this . org.springframework.jmx.export.annotation.ExpectedException . expectMessage ( STRING ) ; new AnnotationConfigApplicationContext ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateInterfaceImplementationConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateExtensionConfiguration .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockEnvironment org.springframework.jmx.export.annotation.MockEnvironment = new MockEnvironment ( ) ; org.springframework.jmx.export.annotation.MockEnvironment . setProperty ( STRING , STRING ) ; AnnotationConfigApplicationContext org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.jmx.export.annotation.MockEnvironment ) ; org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext . register ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PlaceholderBasedConfiguration .class ) ; org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext = org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; void ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.LazyAssemblingConfiguration .class ) ; try { javax.management.MBeanServer javax.management.MBeanServer = ( javax.management.MBeanServer ) this . org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; void ( javax.management.MBeanServer , STRING , STRING ) ; void ( javax.management.MBeanServer , STRING , STRING ) ; void ( javax.management.MBeanServer , STRING , STRING ) ; void ( javax.management.MBeanServer , STRING , STRING ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.ComponentScanConfiguration .class ) ; javax.management.MBeanServer javax.management.MBeanServer = ( javax.management.MBeanServer ) this . org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; void ( javax.management.MBeanServer , STRING , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { javax.management.MBeanServer javax.management.MBeanServer = ( javax.management.MBeanServer ) this . org.springframework.jmx.export.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; void ( javax.management.MBeanServer , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( javax.management.MBeanServer javax.management.MBeanServer , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { javax.management.ObjectName javax.management.ObjectName = ObjectNameManager . getInstance ( java.lang.String ) ; assertNotNull ( javax.management.MBeanServer . javax.management.ObjectInstance ( javax.management.ObjectName ) ) ; java.lang.String java.lang.String = ( java.lang.String ) javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName , STRING ) ; assertEquals ( STRING , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy public org.springframework.jmx.export.annotation.AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean ( ) { AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean = new AnnotationTestBean ( ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setName ( STRING ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setAge ( NUMBER ) ; return org.springframework.jmx.export.annotation.AnnotationTestBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy @ Scope ( proxyMode = ScopedProxyMode . TARGET_CLASS ) public org.springframework.jmx.export.annotation.AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean ( ) { AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean = new AnnotationTestBean ( ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setName ( STRING ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setAge ( NUMBER ) ; return org.springframework.jmx.export.annotation.AnnotationTestBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy public org.springframework.jmx.export.annotation.AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean ( ) { AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean = new AnnotationTestBean ( ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setName ( STRING ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setAge ( NUMBER ) ; return org.springframework.jmx.export.annotation.AnnotationTestBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.PropertyPlaceholderConfigurer org.springframework.jmx.export.annotation.PropertyPlaceholderConfigurer ( ) { return new PropertyPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) @ Lazy public org.springframework.jmx.export.annotation.AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean ( ) { AnnotationTestBean org.springframework.jmx.export.annotation.AnnotationTestBean = new AnnotationTestBean ( ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setName ( STRING ) ; org.springframework.jmx.export.annotation.AnnotationTestBean . setAge ( NUMBER ) ; return org.springframework.jmx.export.annotation.AnnotationTestBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) public org.springframework.jmx.export.annotation.AnnotationTestBeanFactory org.springframework.jmx.export.annotation.AnnotationTestBeanFactory ( ) java.lang.Exception { return new AnnotationTestBeanFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) @ Lazy public org.springframework.jmx.export.annotation.TestDynamicMBean org.springframework.jmx.export.annotation.TestDynamicMBean ( ) { return new TestDynamicMBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) @ Lazy public MBeanExporterTests . MBeanExporterTests.Person MBeanExporterTests.Person ( ) { MBeanExporterTests . MBeanExporterTests MBeanExporterTests.Person = new MBeanExporterTests . MBeanExporterTests ( ) ; MBeanExporterTests.Person . setName ( STRING ) ; return MBeanExporterTests.Person ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Class . java.lang.Class<?> ( STRING ) . newInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBean org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBean ( ) { return new org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBeanExtension org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBeanExtension ( ) { org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBeanExtension org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBeanExtension = new org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBeanExtension ( ) ; org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBeanExtension . setName ( STRING ) ; return org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateTestBeanExtension ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.MBeanServerFactoryBean org.springframework.jmx.export.annotation.MBeanServerFactoryBean ( ) java.lang.Exception { return new MBeanServerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateAnnotationTestBean org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateAnnotationTestBean ( ) { return new org.springframework.jmx.export.annotation.EnableMBeanExportConfigurationTests.PackagePrivateAnnotationTestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
