<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static org.springframework.test.context.BootstrapContext org.springframework.test.context.BootstrapContext ( java.lang.Class<?> < ? > java.lang.Class<?> ) { CacheAwareContextLoaderDelegate org.springframework.test.context.CacheAwareContextLoaderDelegate = org.springframework.test.context.CacheAwareContextLoaderDelegate ( ) ; java.lang.Class<? extends org.springframework.test.context.BootstrapContext> < ? extends BootstrapContext > java.lang.Class<? extends org.springframework.test.context.BootstrapContext> = null ; try { java.lang.Class<? extends org.springframework.test.context.BootstrapContext> = ( java.lang.Class<? extends org.springframework.test.context.BootstrapContext> < ? extends BootstrapContext > ) ClassUtils . forName ( java.lang.String , org.springframework.test.context.BootstrapUtils .class . java.lang.ClassLoader ( ) ) ; java.lang.reflect.Constructor<? extends org.springframework.test.context.BootstrapContext> < ? extends BootstrapContext > java.lang.reflect.Constructor<? extends org.springframework.test.context.BootstrapContext> = java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.Class .class , CacheAwareContextLoaderDelegate .class ) ; if ( org.springframework.test.context.Log . isDebugEnabled ( ) ) { org.springframework.test.context.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.reflect.Constructor<> ) ) ; } return BeanUtils . instantiateClass ( java.lang.reflect.Constructor<> , java.lang.Class<> , org.springframework.test.context.CacheAwareContextLoaderDelegate ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> + STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static org.springframework.test.context.CacheAwareContextLoaderDelegate org.springframework.test.context.CacheAwareContextLoaderDelegate ( ) { java.lang.Class<? extends org.springframework.test.context.CacheAwareContextLoaderDelegate> < ? extends CacheAwareContextLoaderDelegate > java.lang.Class<? extends org.springframework.test.context.CacheAwareContextLoaderDelegate> = null ; try { java.lang.Class<? extends org.springframework.test.context.CacheAwareContextLoaderDelegate> = ( java.lang.Class<? extends org.springframework.test.context.CacheAwareContextLoaderDelegate> < ? extends CacheAwareContextLoaderDelegate > ) ClassUtils . forName ( java.lang.String , org.springframework.test.context.BootstrapUtils .class . java.lang.ClassLoader ( ) ) ; if ( org.springframework.test.context.Log . isDebugEnabled ( ) ) { org.springframework.test.context.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) ) ) ; } return BeanUtils . instantiateClass ( java.lang.Class<> , CacheAwareContextLoaderDelegate .class ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> + STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> static org.springframework.test.context.TestContextBootstrapper org.springframework.test.context.TestContextBootstrapper ( BootstrapContext org.springframework.test.context.BootstrapContext ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.BootstrapContext . getTestClass ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; try { java.lang.Class<?> = java.lang.Class<?> ( java.lang.Class<> ) ; if ( java.lang.Class<> == null ) { java.lang.Class<?> = java.lang.Class<?> ( java.lang.Class<> ) ; } if ( org.springframework.test.context.Log . isDebugEnabled ( ) ) { org.springframework.test.context.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; } TestContextBootstrapper org.springframework.test.context.TestContextBootstrapper = BeanUtils . instantiateClass ( java.lang.Class<> , TestContextBootstrapper .class ) ; org.springframework.test.context.TestContextBootstrapper . setBootstrapContext ( org.springframework.test.context.BootstrapContext ) ; return org.springframework.test.context.TestContextBootstrapper ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw java.lang.IllegalStateException ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> + STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Set<org.springframework.test.context.BootstrapWith> < BootstrapWith > java.util.Set<org.springframework.test.context.BootstrapWith> = AnnotatedElementUtils . findAllMergedAnnotations ( java.lang.Class<> , BootstrapWith .class ) ; if ( java.util.Set<org.springframework.test.context.BootstrapWith> . size ( ) < NUMBER ) { return null ; } Assert . state ( java.util.Set<org.springframework.test.context.BootstrapWith> . size ( ) <= NUMBER , ( ) String . format ( STRING , testClass . getName ( ) , annotations ) ) ; return java.util.Set<org.springframework.test.context.BootstrapWith> . iterator ( ) . next ( ) . value ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { java.lang.ClassLoader java.lang.ClassLoader = org.springframework.test.context.BootstrapUtils .class . java.lang.ClassLoader ( ) ; AnnotationAttributes org.springframework.test.context.AnnotationAttributes = AnnotatedElementUtils . findMergedAnnotationAttributes ( java.lang.Class<> , java.lang.String , false , false ) ; if ( org.springframework.test.context.AnnotationAttributes != null ) { return ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; } return ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; }  <METHOD_END>
