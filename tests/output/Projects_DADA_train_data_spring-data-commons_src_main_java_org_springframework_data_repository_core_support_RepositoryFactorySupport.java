<METHOD_START> public void ( ) { this . java.util.Map<org.springframework.data.repository.core.support.RepositoryFactorySupport.RepositoryInformationCacheKey,org.springframework.data.repository.core.support.RepositoryInformation> = new java.util.HashMap <> ( ) ; this . java.util.List<org.springframework.data.repository.core.support.RepositoryProxyPostProcessor> = new java.util.ArrayList <> ( ) ; this . java.util.Optional<java.lang.Class<?>> = java.util.Optional . java.util.Optional<java.lang.Class<?>> ( ) ; this . org.springframework.data.repository.core.support.NamedQueries = PropertiesBasedNamedQueries . EMPTY ; this . java.lang.ClassLoader = org . springframework . util . ClassUtils . getDefaultClassLoader ( ) ; this . org.springframework.data.repository.core.support.EvaluationContextProvider = DefaultEvaluationContextProvider . INSTANCE ; this . java.util.List<org.springframework.data.repository.core.support.QueryCreationListener<?>> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.data.repository.core.support.QueryCreationListener<?>> . add ( org.springframework.data.repository.core.support.RepositoryFactorySupport.QueryCollectingQueryCreationListener ) ; }  <METHOD_END>
<METHOD_START> public void void ( Key org.springframework.data.repository.core.support.Key ) { this . QueryLookupStrategy.Key = org.springframework.data.repository.core.support.Key ; }  <METHOD_END>
<METHOD_START> public void void ( NamedQueries org.springframework.data.repository.core.support.NamedQueries ) { this . org.springframework.data.repository.core.support.NamedQueries = org.springframework.data.repository.core.support.NamedQueries == null ? PropertiesBasedNamedQueries . EMPTY : org.springframework.data.repository.core.support.NamedQueries ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader == null ? org . springframework . util . ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.repository.core.support.BeanFactory ) throws org.springframework.data.repository.core.support.BeansException { this . org.springframework.data.repository.core.support.BeanFactory = org.springframework.data.repository.core.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContextProvider org.springframework.data.repository.core.support.EvaluationContextProvider ) { this . org.springframework.data.repository.core.support.EvaluationContextProvider = org.springframework.data.repository.core.support.EvaluationContextProvider == null ? DefaultEvaluationContextProvider . INSTANCE : org.springframework.data.repository.core.support.EvaluationContextProvider ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.util.Optional<java.lang.Class<?>> = java.util.Optional . java.util.Optional<java.lang.Class<?>> ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( QueryCreationListener < ? > org.springframework.data.repository.core.support.QueryCreationListener<?> ) { Assert . notNull ( org.springframework.data.repository.core.support.QueryCreationListener<> , STRING ) ; this . java.util.List<org.springframework.data.repository.core.support.QueryCreationListener<?>> . add ( org.springframework.data.repository.core.support.QueryCreationListener<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( RepositoryProxyPostProcessor org.springframework.data.repository.core.support.RepositoryProxyPostProcessor ) { Assert . notNull ( org.springframework.data.repository.core.support.RepositoryProxyPostProcessor , STRING ) ; this . java.util.List<org.springframework.data.repository.core.support.RepositoryProxyPostProcessor> . add ( org.springframework.data.repository.core.support.RepositoryProxyPostProcessor ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return T ( java.lang.Class<T> , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object java.lang.Object ) { return T ( java.lang.Class<T> , java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) protected < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = org.springframework.data.repository.core.support.RepositoryMetadata ( java.lang.Class<T> ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = org.springframework.data.repository.core.support.RepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Class<>> ( java.lang.Object :: java.lang.Class<? extends java.lang.Object> ) ) ; void ( org.springframework.data.repository.core.support.RepositoryInformation , java.util.Optional<java.lang.Object> ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.repository.core.support.RepositoryInformation ) ; ProxyFactory org.springframework.data.repository.core.support.ProxyFactory = new ProxyFactory ( ) ; org.springframework.data.repository.core.support.ProxyFactory . setTarget ( java.lang.Object ) ; org.springframework.data.repository.core.support.ProxyFactory . setInterfaces ( new java.lang.Class [] { java.lang.Class<T> , Repository .class , TransactionalProxy .class } ) ; org.springframework.data.repository.core.support.ProxyFactory . addAdvice ( SurroundingTransactionDetectorMethodInterceptor . INSTANCE ) ; org.springframework.data.repository.core.support.ProxyFactory . addAdvisor ( ExposeInvocationInterceptor . ADVISOR ) ; java.util.List<org.springframework.data.repository.core.support.RepositoryProxyPostProcessor> . forEach ( processor -> processor . postProcess ( result , information ) ) ; org.springframework.data.repository.core.support.ProxyFactory . addAdvice ( new DefaultMethodInvokingMethodInterceptor ( ) ) ; org.springframework.data.repository.core.support.ProxyFactory . addAdvice ( new org.springframework.data.repository.core.support.RepositoryFactorySupport.QueryExecutorMethodInterceptor ( org.springframework.data.repository.core.support.RepositoryInformation ) ) ; org.springframework.data.repository.core.support.ProxyFactory . addAdvice ( org.springframework.data.repository.core.support.RepositoryInformation . isReactiveRepository ( ) ? new org.springframework.data.repository.core.support.RepositoryFactorySupport.ConvertingImplementationMethodExecutionInterceptor ( org.springframework.data.repository.core.support.RepositoryInformation , java.util.Optional<java.lang.Object> , java.lang.Object ) : new org.springframework.data.repository.core.support.RepositoryFactorySupport.ImplementationMethodExecutionInterceptor ( org.springframework.data.repository.core.support.RepositoryInformation , java.util.Optional<java.lang.Object> , java.lang.Object ) ) ; return ( T ) org.springframework.data.repository.core.support.ProxyFactory . getProxy ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.repository.core.support.RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AbstractRepositoryMetadata . getMetadata ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.repository.core.support.RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata , java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ) { org.springframework.data.repository.core.support.RepositoryFactorySupport.RepositoryInformationCacheKey org.springframework.data.repository.core.support.RepositoryFactorySupport.RepositoryInformationCacheKey = new org.springframework.data.repository.core.support.RepositoryFactorySupport.RepositoryInformationCacheKey ( org.springframework.data.repository.core.support.RepositoryMetadata , java.util.Optional<java.lang.Class<?>> ) ; return java.util.Map<org.springframework.data.repository.core.support.RepositoryFactorySupport.RepositoryInformationCacheKey,org.springframework.data.repository.core.support.RepositoryInformation> . computeIfAbsent ( org.springframework.data.repository.core.support.RepositoryFactorySupport.RepositoryInformationCacheKey , key -> { Class < ? > baseClass = repositoryBaseClass . orElse ( getRepositoryBaseClass ( metadata ) ) ; return metadata . isReactiveRepository ( ) ? new ReactiveRepositoryInformation ( metadata , baseClass , customImplementationClass ) : new DefaultRepositoryInformation ( metadata , baseClass , customImplementationClass ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.repository.core.support.QueryMethod> < QueryMethod > java.util.List<org.springframework.data.repository.core.support.QueryMethod> ( ) { return org.springframework.data.repository.core.support.RepositoryFactorySupport.QueryCollectingQueryCreationListener . getQueryMethods ( ) ; }  <METHOD_END>
<METHOD_START> public abstract < T , ID extends java.io.Serializable > org.springframework.data.repository.core.support.EntityInformation<T,ID> < T , ID > org.springframework.data.repository.core.support.EntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation );  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata );  <METHOD_END>
<METHOD_START> protected java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> ( Key org.springframework.data.repository.core.support.Key , EvaluationContextProvider org.springframework.data.repository.core.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { java.util.Optional<java.lang.Object> . java.lang.Object ( ( ) { if ( ! org.springframework.data.repository.core.support.RepositoryInformation . hasCustomMethod ( ) ) { return null ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.repository.core.support.RepositoryInformation . getRepositoryInterface ( ) ) ) ; } ) ; void ( org.springframework.data.repository.core.support.RepositoryInformation ) ; }  <METHOD_END>
<METHOD_START> protected void void ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected final < R > R R ( RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation , java.lang.Object ... java.lang.Object[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.core.support.RepositoryInformation . getRepositoryBaseClass ( ) ; java.util.Optional<java.lang.reflect.Constructor<?>> < java.lang.reflect.Constructor<?> < ? > > java.util.Optional<java.lang.reflect.Constructor<?>> = ReflectionUtils . findConstructor ( java.lang.Class<> , java.lang.Object[] ) ; return java.util.Optional<java.lang.reflect.Constructor<?>> . java.util.Optional<R> ( java.lang.reflect.Constructor<?> -> ( R ) BeanUtils . instantiateClass ( java.lang.reflect.Constructor<> , java.lang.Object[] ) ) . R ( ( ) new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> , java.util.Arrays . java.util.stream.Stream<java.lang.Object> ( java.lang.Object[] ) . java.util.stream.Stream<java.lang.Class<>> ( java.lang.Object :: java.lang.Class<? extends java.lang.Object> ) . java.util.List<java.lang.Class<>> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Class<>,?,java.util.List<java.lang.Class<>>> ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> public void ( RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation ) { this . org.springframework.data.repository.core.support.QueryExecutionResultHandler = new QueryExecutionResultHandler ( ) ; java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> = java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> ( QueryLookupStrategy.Key , org.springframework.data.repository.core.support.RepositoryFactorySupport .this . org.springframework.data.repository.core.support.EvaluationContextProvider ) ; if ( ! java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> . isPresent ( ) && org.springframework.data.repository.core.support.RepositoryInformation . hasQueryMethods ( ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + STRING ) ; } this . java.util.Map<java.lang.reflect.Method,org.springframework.data.repository.core.support.RepositoryQuery> = java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> . map ( it -> { SpelAwareProxyProjectionFactory factory = new SpelAwareProxyProjectionFactory ( ) ; factory . setBeanClassLoader ( classLoader ) ; factory . setBeanFactory ( beanFactory ) ; return repositoryInformation . getQueryMethods ( ) . stream ( ) . map ( method -> Pair . of ( method , it . resolveQuery ( method , repositoryInformation , factory , namedQueries ) ) ) . peek ( pair -> invokeListeners ( pair . getSecond ( ) ) ) . collect ( Pair . toMap ( ) ) ; } ) . orElse ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( RepositoryQuery org.springframework.data.repository.core.support.RepositoryQuery ) { for ( QueryCreationListener org.springframework.data.repository.core.support.QueryCreationListener : java.util.List<org.springframework.data.repository.core.support.QueryCreationListener<?>> ) { ResolvableType org.springframework.data.repository.core.support.ResolvableType = ResolvableType . forClass ( QueryCreationListener .class , org.springframework.data.repository.core.support.QueryCreationListener . getClass ( ) ) . getGeneric ( NUMBER ) ; if ( org.springframework.data.repository.core.support.ResolvableType != null && org.springframework.data.repository.core.support.ResolvableType . isAssignableFrom ( ResolvableType . forClass ( org.springframework.data.repository.core.support.RepositoryQuery . getClass ( ) ) ) ) { org.springframework.data.repository.core.support.QueryCreationListener . onCreation ( org.springframework.data.repository.core.support.RepositoryQuery ) ; } } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.repository.core.support.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.repository.core.support.MethodInvocation ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.MethodInvocation . getMethod ( ) ; MethodParameter org.springframework.data.repository.core.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; TypeDescriptor org.springframework.data.repository.core.support.TypeDescriptor = TypeDescriptor . nested ( org.springframework.data.repository.core.support.MethodParameter , NUMBER ) ; return org.springframework.data.repository.core.support.QueryExecutionResultHandler . postProcessInvocationResult ( java.lang.Object , org.springframework.data.repository.core.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.repository.core.support.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.MethodInvocation . getMethod ( ) ; java.lang.Object [] java.lang.Object[] = org.springframework.data.repository.core.support.MethodInvocation . getArguments ( ) ; if ( boolean ( java.lang.reflect.Method ) ) { return java.util.Map<java.lang.reflect.Method,org.springframework.data.repository.core.support.RepositoryQuery> . get ( java.lang.reflect.Method ) . execute ( java.lang.Object[] ) ; } return org.springframework.data.repository.core.support.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return java.util.Map<java.lang.reflect.Method,org.springframework.data.repository.core.support.RepositoryQuery> . containsKey ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.repository.core.support.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.MethodInvocation . getMethod ( ) ; java.lang.Object [] java.lang.Object[] = org.springframework.data.repository.core.support.MethodInvocation . getArguments ( ) ; if ( boolean ( org.springframework.data.repository.core.support.MethodInvocation ) ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ; return java.lang.Object ( java.util.Optional<java.lang.Object> . java.lang.Object ( ) , java.lang.reflect.Method , java.lang.Object[] ) ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ; return java.lang.Object ( java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { try { return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; } catch ( java.lang.Exception java.lang.Exception ) { ClassUtils . unwrapReflectionException ( java.lang.Exception ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MethodInvocation org.springframework.data.repository.core.support.MethodInvocation ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> org.springframework.data.repository.core.support.RepositoryInformation . isCustomMethod ( org.springframework.data.repository.core.support.MethodInvocation . getMethod ( ) ) ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , java.lang.Object java.lang.Object ) { super( org.springframework.data.repository.core.support.RepositoryInformation , java.util.Optional<java.lang.Object> , java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { return super. java.lang.Object ( java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Object [] java.lang.Object[] ) { if ( java.lang.Object[] . int == NUMBER ) { return java.lang.Object[] ; } java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Object[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { if ( java.lang.Object[] [ int ] == null ) { continue; } if ( ! java.lang.Class<?>[] [ int ] . boolean ( java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) ) && ReactiveWrappers . isAvailable ( ) && ReactiveWrapperConverters . canConvert ( java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<?>[] [ int ] ) ) { java.lang.Object[] [ int ] = ReactiveWrapperConverters . toWrapper ( java.lang.Object[] [ int ] , java.lang.Class<?>[] [ int ] ) ; } else { java.lang.Object[] [ int ] = java.lang.Object[] [ int ] ; } } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> public void void ( RepositoryQuery org.springframework.data.repository.core.support.RepositoryQuery ) { this . java.util.List<org.springframework.data.repository.core.support.QueryMethod> . add ( org.springframework.data.repository.core.support.RepositoryQuery . getQueryMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata , java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ) { this . java.lang.String = org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) . getName ( ) ; this . java.lang.String = java.util.Optional<java.lang.Class<?>> . java.util.Optional<java.lang.String> ( java.lang.Class :: java.lang.String ) . java.lang.String ( null ) ; }  <METHOD_END>
