<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider = org.springframework.data.jpa.repository.query.ParameterMetadataProvider ( org.springframework.data.jpa.repository.query.ParameterMetadataProviderIntegrationTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ; ParameterMetadata < java.lang.Object > org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> = org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( new Part ( STRING , User .class ) ) ; assertThat ( org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> . getExpression ( ) . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider = org.springframework.data.jpa.repository.query.ParameterMetadataProvider ( org.springframework.data.jpa.repository.query.ParameterMetadataProviderIntegrationTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ; ParameterMetadata < java.lang.Object > org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> = org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( new Part ( STRING , User .class ) ) ; assertThat ( org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> . getExpression ( ) . getName ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider = org.springframework.data.jpa.repository.query.ParameterMetadataProvider ( org.springframework.data.jpa.repository.query.ParameterMetadataProviderIntegrationTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ) ; ParameterMetadata < java.lang.Object > org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> = org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( new Part ( STRING , User .class ) ) ; assertThat ( org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> . prepare ( NUMBER ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider ( java.lang.reflect.Method java.lang.reflect.Method ) { JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = new JpaParameters ( java.lang.reflect.Method ) ; void ( org.springframework.data.jpa.repository.query.JpaParameters , NUMBER , STRING ) ; return new ParameterMetadataProvider ( org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) , org.springframework.data.jpa.repository.query.JpaParameters , PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> , int int , java.lang.String java.lang.String ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) ReflectionTestUtils . getField ( org.springframework.data.jpa.repository.query.Parameters<,> , STRING ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , STRING ) ; ReflectionTestUtils . setField ( java.lang.Object , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.User org.springframework.data.jpa.repository.query.User ( @ Param ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.User org.springframework.data.jpa.repository.query.User ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.User org.springframework.data.jpa.repository.query.User ( @ Param ( STRING ) java.lang.Integer java.lang.Integer );  <METHOD_END>
