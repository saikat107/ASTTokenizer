<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.annotation.BeanWiringInfo org.springframework.beans.factory.annotation.BeanWiringInfo ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Configurable org.springframework.beans.factory.annotation.Configurable = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . A ( Configurable .class ) ; return ( org.springframework.beans.factory.annotation.Configurable != null ? org.springframework.beans.factory.annotation.BeanWiringInfo ( java.lang.Object , org.springframework.beans.factory.annotation.Configurable ) : null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.annotation.BeanWiringInfo org.springframework.beans.factory.annotation.BeanWiringInfo ( java.lang.Object java.lang.Object , Configurable org.springframework.beans.factory.annotation.Configurable ) { if ( ! Autowire . NO . equals ( org.springframework.beans.factory.annotation.Configurable . autowire ( ) ) ) { return new BeanWiringInfo ( org.springframework.beans.factory.annotation.Configurable . autowire ( ) . value ( ) , org.springframework.beans.factory.annotation.Configurable . dependencyCheck ( ) ) ; } else { if ( ! STRING . boolean ( org.springframework.beans.factory.annotation.Configurable . value ( ) ) ) { return new BeanWiringInfo ( org.springframework.beans.factory.annotation.Configurable . value ( ) , false ) ; } else { return new BeanWiringInfo ( java.lang.String ( java.lang.Object ) , true ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return ClassUtils . getUserClass ( java.lang.Object ) . getName ( ) ; }  <METHOD_END>
