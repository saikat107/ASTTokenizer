<METHOD_START> @ Before public void void ( ) { StaticApplicationContext org.springframework.web.reactive.result.view.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.web.reactive.result.view.StaticApplicationContext . refresh ( ) ; this . org.springframework.web.reactive.result.view.UrlBasedViewResolver = new UrlBasedViewResolver ( ) ; this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . setApplicationContext ( org.springframework.web.reactive.result.view.StaticApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . setViewClass ( org.springframework.web.reactive.result.view.UrlBasedViewResolverTests.TestView .class ) ; this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . setViewNames ( STRING ) ; Mono < View > org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> = this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertNotNull ( org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> . block ( ) ) ; org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> = this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertNull ( org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < View > org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> = this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; StepVerifier . create ( org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> ) . consumeNextWith ( view -> { assertEquals ( RedirectView .class , view . getClass ( ) ) ; RedirectView redirectView = ( RedirectView ) view ; assertEquals ( redirectView . getUrl ( ) , STRING ) ; assertEquals ( redirectView . getStatusCode ( ) , HttpStatus . SEE_OTHER ) ; } ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . setRedirectViewProvider ( url -> new RedirectView ( url , HttpStatus . FOUND ) ) ; Mono < View > org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> = this . org.springframework.web.reactive.result.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; StepVerifier . create ( org.springframework.web.reactive.result.view.Mono<org.springframework.web.reactive.result.view.View> ) . consumeNextWith ( view -> { assertEquals ( RedirectView .class , view . getClass ( ) ) ; RedirectView redirectView = ( RedirectView ) view ; assertEquals ( redirectView . getUrl ( ) , STRING ) ; assertEquals ( redirectView . getStatusCode ( ) , HttpStatus . FOUND ) ; } ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Locale java.util.Locale ) throws java.lang.Exception { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.view.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.view.Mono<java.lang.Void> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , MediaType org.springframework.web.reactive.result.view.MediaType , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { return Mono . empty ( ) ; }  <METHOD_END>
