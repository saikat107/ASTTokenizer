<METHOD_START> protected void ( java.lang.String java.lang.String , AbstractMessageListenerContainer org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate ) { this( java.lang.String , org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , org.springframework.integration.amqp.channel.AmqpTemplate , false ); }  <METHOD_END>
<METHOD_START> protected void ( java.lang.String java.lang.String , AbstractMessageListenerContainer org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper ) { this( java.lang.String , org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , org.springframework.integration.amqp.channel.AmqpTemplate , false , org.springframework.integration.amqp.channel.AmqpHeaderMapper , org.springframework.integration.amqp.channel.AmqpHeaderMapper ); }  <METHOD_END>
<METHOD_START> protected void ( java.lang.String java.lang.String , AbstractMessageListenerContainer org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate , boolean boolean ) { super( org.springframework.integration.amqp.channel.AmqpTemplate ); Assert . notNull ( org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer = org.springframework.integration.amqp.channel.AbstractMessageListenerContainer ; this . boolean = boolean ; this . org.springframework.integration.amqp.channel.ConnectionFactory = org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . getConnectionFactory ( ) ; this . org.springframework.integration.amqp.channel.AmqpAdmin = new RabbitAdmin ( this . org.springframework.integration.amqp.channel.ConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.lang.String java.lang.String , AbstractMessageListenerContainer org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate , boolean boolean , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper ) { super( org.springframework.integration.amqp.channel.AmqpTemplate , org.springframework.integration.amqp.channel.AmqpHeaderMapper , org.springframework.integration.amqp.channel.AmqpHeaderMapper ); Assert . notNull ( org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer = org.springframework.integration.amqp.channel.AbstractMessageListenerContainer ; this . boolean = boolean ; this . org.springframework.integration.amqp.channel.ConnectionFactory = org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . getConnectionFactory ( ) ; this . org.springframework.integration.amqp.channel.AmqpAdmin = new RabbitAdmin ( this . org.springframework.integration.amqp.channel.ConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; if ( this . org.springframework.integration.amqp.channel.AbstractDispatcher != null ) { this . org.springframework.integration.amqp.channel.AbstractDispatcher . setMaxSubscribers ( this . java.lang.Integer ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.channel.AmqpAdmin org.springframework.integration.amqp.channel.AmqpAdmin ( ) { return this . org.springframework.integration.amqp.channel.AmqpAdmin ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.channel.ConnectionFactory org.springframework.integration.amqp.channel.ConnectionFactory ( ) { return this . org.springframework.integration.amqp.channel.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageHandler org.springframework.integration.amqp.channel.MessageHandler ) { return this . org.springframework.integration.amqp.channel.AbstractDispatcher . addHandler ( org.springframework.integration.amqp.channel.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageHandler org.springframework.integration.amqp.channel.MessageHandler ) { return this . org.springframework.integration.amqp.channel.AbstractDispatcher . removeHandler ( org.springframework.integration.amqp.channel.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. onInit ( ) ; this . org.springframework.integration.amqp.channel.AbstractDispatcher = this . org.springframework.integration.amqp.channel.AbstractDispatcher ( ) ; if ( this . java.lang.Integer == null ) { this . java.lang.Integer = this . getIntegrationProperty ( this . boolean ? IntegrationProperties . CHANNELS_MAX_BROADCAST_SUBSCRIBERS : IntegrationProperties . CHANNELS_MAX_UNICAST_SUBSCRIBERS , java.lang.Integer .class ) ; } void ( this . java.lang.Integer ) ; java.lang.String java.lang.String = this . java.lang.String ( this . org.springframework.integration.amqp.channel.AmqpAdmin , this . java.lang.String ) ; this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . setQueueNames ( java.lang.String ) ; MessageConverter org.springframework.integration.amqp.channel.MessageConverter = ( this . getAmqpTemplate ( ) instanceof RabbitTemplate ) ? ( ( RabbitTemplate ) this . getAmqpTemplate ( ) ) . getMessageConverter ( ) : new SimpleMessageConverter ( ) ; MessageListener org.springframework.integration.amqp.channel.MessageListener = new org.springframework.integration.amqp.channel.AbstractSubscribableAmqpChannel.DispatchingMessageListener ( org.springframework.integration.amqp.channel.MessageConverter , this . org.springframework.integration.amqp.channel.AbstractDispatcher , this , this . boolean , getMessageBuilderFactory ( ) , getInboundHeaderMapper ( ) ) ; this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . setMessageListener ( org.springframework.integration.amqp.channel.MessageListener ) ; if ( ! this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . isActive ( ) ) { this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . afterPropertiesSet ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer != null ) && this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . isAutoStartup ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer != null ) ? this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . getPhase ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer != null ) && this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { if ( this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . stop ( java.lang.Runnable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.amqp.channel.AbstractMessageListenerContainer . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.amqp.channel.AbstractDispatcher org.springframework.integration.amqp.channel.AbstractDispatcher ( )  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( AmqpAdmin org.springframework.integration.amqp.channel.AmqpAdmin , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> private void ( MessageConverter org.springframework.integration.amqp.channel.MessageConverter , MessageDispatcher org.springframework.integration.amqp.channel.MessageDispatcher , org.springframework.integration.amqp.channel.AbstractSubscribableAmqpChannel org.springframework.integration.amqp.channel.AbstractSubscribableAmqpChannel , boolean boolean , MessageBuilderFactory org.springframework.integration.amqp.channel.MessageBuilderFactory , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper ) { Assert . notNull ( org.springframework.integration.amqp.channel.MessageConverter , STRING ) ; Assert . notNull ( org.springframework.integration.amqp.channel.MessageDispatcher , STRING ) ; this . org.springframework.integration.amqp.channel.MessageConverter = org.springframework.integration.amqp.channel.MessageConverter ; this . org.springframework.integration.amqp.channel.MessageDispatcher = org.springframework.integration.amqp.channel.MessageDispatcher ; this . org.springframework.integration.amqp.channel.AbstractSubscribableAmqpChannel = org.springframework.integration.amqp.channel.AbstractSubscribableAmqpChannel ; this . boolean = boolean ; this . org.springframework.integration.amqp.channel.MessageBuilderFactory = org.springframework.integration.amqp.channel.MessageBuilderFactory ; this . org.springframework.integration.amqp.channel.AmqpHeaderMapper = org.springframework.integration.amqp.channel.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message ) { Message < ? > org.springframework.integration.amqp.channel.Message<?> = null ; try { java.lang.Object java.lang.Object = this . org.springframework.integration.amqp.channel.MessageConverter . fromMessage ( org.springframework.amqp.core.Message ) ; if ( java.lang.Object != null ) { org.springframework.integration.amqp.channel.Message<?> = ( java.lang.Object instanceof Message < ? > ) ? ( Message < ? > ) java.lang.Object : org.springframework.integration.amqp.channel.Message<java.lang.Object> ( org.springframework.amqp.core.Message , java.lang.Object ) ; this . org.springframework.integration.amqp.channel.MessageDispatcher . dispatch ( org.springframework.integration.amqp.channel.Message<> ) ; } else if ( this . org.springframework.integration.amqp.channel.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.amqp.channel.Log . warn ( STRING ) ; } } catch ( MessageDispatchingException org.springframework.integration.amqp.channel.MessageDispatchingException ) { java.lang.String java.lang.String = org.springframework.integration.amqp.channel.MessageDispatchingException . getMessage ( ) + STRING + this . org.springframework.integration.amqp.channel.AbstractSubscribableAmqpChannel . getFullChannelName ( ) + STRING ; if ( this . boolean ) { if ( this . org.springframework.integration.amqp.channel.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.amqp.channel.Log . warn ( java.lang.String , org.springframework.integration.amqp.channel.MessageDispatchingException ) ; } } else { throw new MessageDeliveryException ( org.springframework.integration.amqp.channel.Message<> , java.lang.String , org.springframework.integration.amqp.channel.MessageDispatchingException ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.channel.Message<java.lang.Object> < java.lang.Object > org.springframework.integration.amqp.channel.Message<java.lang.Object> ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message , java.lang.Object java.lang.Object ) { AbstractIntegrationMessageBuilder < java.lang.Object > org.springframework.integration.amqp.channel.AbstractIntegrationMessageBuilder<java.lang.Object> = this . org.springframework.integration.amqp.channel.MessageBuilderFactory . withPayload ( java.lang.Object ) ; if ( this . org.springframework.integration.amqp.channel.AbstractSubscribableAmqpChannel . isExtractPayload ( ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.amqp.channel.AmqpHeaderMapper . toHeadersFromRequest ( org.springframework.amqp.core.Message . getMessageProperties ( ) ) ; org.springframework.integration.amqp.channel.AbstractIntegrationMessageBuilder<java.lang.Object> . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; } return org.springframework.integration.amqp.channel.AbstractIntegrationMessageBuilder<java.lang.Object> . build ( ) ; }  <METHOD_END>
