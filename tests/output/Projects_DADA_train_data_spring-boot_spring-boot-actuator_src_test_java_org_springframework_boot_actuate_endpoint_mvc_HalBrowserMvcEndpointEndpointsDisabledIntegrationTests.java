<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) ) . isEmpty ( ) ; }  <METHOD_END>
