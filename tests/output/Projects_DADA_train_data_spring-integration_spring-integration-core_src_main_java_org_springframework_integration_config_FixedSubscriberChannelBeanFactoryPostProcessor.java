<METHOD_START> private void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.integration.config.ConfigurableListableBeanFactory ) throws org.springframework.integration.config.BeansException { if ( org.springframework.integration.config.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry = ( BeanDefinitionRegistry ) org.springframework.integration.config.ConfigurableListableBeanFactory ; if ( this . java.util.Map<java.lang.String,java.lang.String> . int ( ) > NUMBER ) { for ( java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; BeanDefinition org.springframework.integration.config.BeanDefinition = null ; if ( org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { org.springframework.integration.config.BeanDefinition = org.springframework.integration.config.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; } if ( org.springframework.integration.config.BeanDefinition != null && org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { BeanDefinition org.springframework.integration.config.BeanDefinition = org.springframework.integration.config.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( FixedSubscriberChannel .class . java.lang.String ( ) . boolean ( org.springframework.integration.config.BeanDefinition . getBeanClassName ( ) ) ) { ConstructorArgumentValues org.springframework.integration.config.ConstructorArgumentValues = org.springframework.integration.config.BeanDefinition . getConstructorArgumentValues ( ) ; Assert . isTrue ( org.springframework.integration.config.ConstructorArgumentValues . isEmpty ( ) , STRING ) ; org.springframework.integration.config.ConstructorArgumentValues . addGenericArgumentValue ( org.springframework.integration.config.BeanDefinition ) ; } } } } } }  <METHOD_END>
