<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.spr.MockMvc = webAppContextSetup ( this . org.springframework.test.web.servlet.samples.spr.WebApplicationContext ) . dispatchOptions ( true ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController = this . org.springframework.test.web.servlet.samples.spr.WebApplicationContext . getBean ( org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController .class ) ; int int = org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController . java.util.concurrent.atomic.AtomicInteger . int ( ) ; this . org.springframework.test.web.servlet.samples.spr.MockMvc . perform ( options ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; assertEquals ( int + NUMBER , org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController ( ) { return new org.springframework.test.web.servlet.samples.spr.HttpOptionsTests.MyController ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . OPTIONS ) @ ResponseBody public void void ( ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
