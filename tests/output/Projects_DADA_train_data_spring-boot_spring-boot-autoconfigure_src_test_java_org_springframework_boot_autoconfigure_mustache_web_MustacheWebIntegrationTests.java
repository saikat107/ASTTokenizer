<METHOD_START> @ Before public void void ( ) { this . int = this . org.springframework.boot.autoconfigure.mustache.web.ServletWebServerApplicationContext . getWebServer ( ) . getPort ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Template org.springframework.boot.autoconfigure.mustache.web.Template = Mustache . compiler ( ) . compile ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mustache.web.Template . execute ( java.util.Map<java.lang.String,java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = new TestRestTemplate ( ) . getForObject ( STRING + this . int , java.lang.String .class ) ; assertThat ( java.lang.String . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = new TestRestTemplate ( ) . getForObject ( STRING + this . int + STRING , java.lang.String .class ) ; assertThat ( java.lang.String . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver ( ) { MustacheViewResolver org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver = new MustacheViewResolver ( ) ; org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setPrefix ( STRING ) ; org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setSuffix ( STRING ) ; org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setCompiler ( Mustache . compiler ( ) . withLoader ( new MustacheResourceTemplateLoader ( STRING , STRING ) ) ) ; return org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { SpringApplication . run ( org.springframework.boot.autoconfigure.mustache.web.MustacheWebIntegrationTests.Application .class , java.lang.String[] ) ; }  <METHOD_END>
