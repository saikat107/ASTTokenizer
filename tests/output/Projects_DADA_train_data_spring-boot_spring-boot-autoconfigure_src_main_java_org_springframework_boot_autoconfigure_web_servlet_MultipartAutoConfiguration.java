<METHOD_START> public void ( MultipartProperties org.springframework.boot.autoconfigure.web.servlet.MultipartProperties ) { this . org.springframework.boot.autoconfigure.web.servlet.MultipartProperties = org.springframework.boot.autoconfigure.web.servlet.MultipartProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement ( ) { return this . org.springframework.boot.autoconfigure.web.servlet.MultipartProperties . createMultipartConfig ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = DispatcherServlet . MULTIPART_RESOLVER_BEAN_NAME ) @ ConditionalOnMissingBean ( MultipartResolver .class ) public org.springframework.boot.autoconfigure.web.servlet.StandardServletMultipartResolver org.springframework.boot.autoconfigure.web.servlet.StandardServletMultipartResolver ( ) { StandardServletMultipartResolver org.springframework.boot.autoconfigure.web.servlet.StandardServletMultipartResolver = new StandardServletMultipartResolver ( ) ; org.springframework.boot.autoconfigure.web.servlet.StandardServletMultipartResolver . setResolveLazily ( this . org.springframework.boot.autoconfigure.web.servlet.MultipartProperties . isResolveLazily ( ) ) ; return org.springframework.boot.autoconfigure.web.servlet.StandardServletMultipartResolver ; }  <METHOD_END>
