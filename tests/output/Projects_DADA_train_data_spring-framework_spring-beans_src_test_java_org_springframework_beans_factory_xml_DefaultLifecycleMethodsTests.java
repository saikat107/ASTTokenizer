<METHOD_START> @ Before public void void ( ) java.lang.Exception { new XmlBeanDefinitionReader ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean = ( org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; assertFalse ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean = ( org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertFalse ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests> ( ) ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean = ( org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertFalse ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.LifecycleAwareBean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
