<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.StoredProcMessageHandlerParserTests> ( ) ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( this . org.springframework.integration.jdbc.config.EventDrivenConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; Expression org.springframework.integration.jdbc.config.Expression = ( Expression ) org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING + org.springframework.integration.jdbc.config.Expression , STRING , org.springframework.integration.jdbc.config.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.StoredProcMessageHandlerParserTests> ( ) ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( this . org.springframework.integration.jdbc.config.EventDrivenConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> < ProcedureParameter > java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> = ( java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> < ProcedureParameter > ) java.lang.Object ; assertTrue ( java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> . size ( ) == NUMBER ) ; ProcedureParameter org.springframework.integration.jdbc.config.ProcedureParameter = java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> . get ( NUMBER ) ; ProcedureParameter org.springframework.integration.jdbc.config.ProcedureParameter = java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> . get ( NUMBER ) ; ProcedureParameter org.springframework.integration.jdbc.config.ProcedureParameter = java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> . get ( NUMBER ) ; ProcedureParameter org.springframework.integration.jdbc.config.ProcedureParameter = java.util.List<org.springframework.integration.jdbc.config.ProcedureParameter> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.ProcedureParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.ProcedureParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.ProcedureParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.ProcedureParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.ProcedureParameter . getValue ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.ProcedureParameter . getValue ( ) ) ; assertNull ( org.springframework.integration.jdbc.config.ProcedureParameter . getValue ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.jdbc.config.ProcedureParameter . getValue ( ) ) ; assertNull ( org.springframework.integration.jdbc.config.ProcedureParameter . getExpression ( ) ) ; assertNull ( org.springframework.integration.jdbc.config.ProcedureParameter . getExpression ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.ProcedureParameter . getExpression ( ) ) ; assertNull ( org.springframework.integration.jdbc.config.ProcedureParameter . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.StoredProcMessageHandlerParserTests> ( ) ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( this . org.springframework.integration.jdbc.config.EventDrivenConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<org.springframework.integration.jdbc.config.SqlParameter> < SqlParameter > java.util.List<org.springframework.integration.jdbc.config.SqlParameter> = ( java.util.List<org.springframework.integration.jdbc.config.SqlParameter> < SqlParameter > ) java.lang.Object ; assertTrue ( java.util.List<org.springframework.integration.jdbc.config.SqlParameter> . size ( ) == NUMBER ) ; SqlParameter org.springframework.integration.jdbc.config.SqlParameter = java.util.List<org.springframework.integration.jdbc.config.SqlParameter> . get ( NUMBER ) ; SqlParameter org.springframework.integration.jdbc.config.SqlParameter = java.util.List<org.springframework.integration.jdbc.config.SqlParameter> . get ( NUMBER ) ; SqlParameter org.springframework.integration.jdbc.config.SqlParameter = java.util.List<org.springframework.integration.jdbc.config.SqlParameter> . get ( NUMBER ) ; SqlParameter org.springframework.integration.jdbc.config.SqlParameter = java.util.List<org.springframework.integration.jdbc.config.SqlParameter> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.SqlParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.SqlParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.SqlParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.SqlParameter . getName ( ) ) ; assertNull ( STRING , org.springframework.integration.jdbc.config.SqlParameter . getScale ( ) ) ; assertNull ( STRING , org.springframework.integration.jdbc.config.SqlParameter . getScale ( ) ) ; assertEquals ( STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.jdbc.config.SqlParameter . getScale ( ) ) ; assertNull ( STRING , org.springframework.integration.jdbc.config.SqlParameter . getScale ( ) ) ; assertEquals ( STRING , java.sql.Types . int , org.springframework.integration.jdbc.config.SqlParameter . getSqlType ( ) ) ; assertEquals ( STRING , java.sql.Types . int , org.springframework.integration.jdbc.config.SqlParameter . getSqlType ( ) ) ; assertEquals ( STRING , java.sql.Types . int , org.springframework.integration.jdbc.config.SqlParameter . getSqlType ( ) ) ; assertEquals ( STRING , java.sql.Types . int , org.springframework.integration.jdbc.config.SqlParameter . getSqlType ( ) ) ; assertTrue ( org.springframework.integration.jdbc.config.SqlParameter instanceof SqlParameter ) ; assertTrue ( org.springframework.integration.jdbc.config.SqlParameter instanceof SqlOutParameter ) ; assertTrue ( org.springframework.integration.jdbc.config.SqlParameter instanceof SqlInOutParameter ) ; assertTrue ( org.springframework.integration.jdbc.config.SqlParameter instanceof SqlParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.StoredProcMessageHandlerParserTests> ( ) ) ; MessageHandler org.springframework.integration.jdbc.config.MessageHandler = TestUtils . getPropertyValue ( this . org.springframework.integration.jdbc.config.EventDrivenConsumer , STRING , MessageHandler .class ) ; org.springframework.integration.jdbc.config.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.integration.jdbc.config.ConfigurableApplicationContext != null ) { org.springframework.integration.jdbc.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.integration.jdbc.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; org.springframework.integration.jdbc.config.EventDrivenConsumer = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jdbc.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jdbc.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
