<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.cache.ConditionOutcome org.springframework.boot.autoconfigure.cache.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.cache.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.cache.AnnotatedTypeMetadata ) { java.lang.String java.lang.String = STRING ; if ( org.springframework.boot.autoconfigure.cache.AnnotatedTypeMetadata instanceof ClassMetadata ) { java.lang.String = ( ( ClassMetadata ) org.springframework.boot.autoconfigure.cache.AnnotatedTypeMetadata ) . getClassName ( ) ; } ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING , java.lang.String ) ; RelaxedPropertyResolver org.springframework.boot.autoconfigure.cache.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.cache.ConditionContext . getEnvironment ( ) , STRING ) ; if ( ! org.springframework.boot.autoconfigure.cache.RelaxedPropertyResolver . containsProperty ( STRING ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . because ( STRING ) ) ; } CacheType org.springframework.boot.autoconfigure.cache.CacheType = CacheConfigurations . getType ( ( ( AnnotationMetadata ) org.springframework.boot.autoconfigure.cache.AnnotatedTypeMetadata ) . getClassName ( ) ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.cache.RelaxedPropertyResolver . getProperty ( STRING ) . replace ( '-' , '_' ) . toUpperCase ( ) ; if ( java.lang.String . boolean ( org.springframework.boot.autoconfigure.cache.CacheType . name ( ) ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . because ( java.lang.String + STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . because ( java.lang.String + STRING ) ) ; }  <METHOD_END>
