<METHOD_START> private void ( ) { this . java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> = java.util.Collections . java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> ( ) ; }  <METHOD_END>
<METHOD_START> private void ( org.springframework.data.mongodb.core.convert.ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath , org.springframework.data.mongodb.core.convert.ObjectPath . org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem ) { java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> < org.springframework.data.mongodb.core.convert.ObjectPath . org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem > java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> = new java.util.ArrayList<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> < org.springframework.data.mongodb.core.convert.ObjectPath . org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem > ( org.springframework.data.mongodb.core.convert.ObjectPath . java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> ) ; java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> . boolean ( org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem ) ; this . java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> = java.util.Collections . java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> ( java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ( java.lang.Object java.lang.Object , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , STRING ) ; org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem = new org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem ( java.lang.Object , java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getCollection ( ) ) ; return new org.springframework.data.mongodb.core.convert.ObjectPath ( this , org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; for ( org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem : java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem . java.lang.Object ( ) ; if ( java.lang.Object == null ) { continue; } if ( org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem . java.lang.Object ( ) == null ) { continue; } if ( java.lang.String . boolean ( org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem . java.lang.String ( ) ) && java.lang.Object . boolean ( org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem . java.lang.Object ( ) ) ) { return java.lang.Object ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( ) { return java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> . boolean ( ) ? java.util.Optional . java.util.Optional<java.lang.Object> ( ) : java.util.Optional . java.util.Optional<java.lang.Object> ( java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> . org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem ( java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> . int ( ) - NUMBER ) . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> . boolean ( ) ) { return STRING ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> . int ( ) ) ; for ( org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem : java.util.List<org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem> ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.mongodb.core.convert.ObjectPath.ObjectPathItem . java.lang.Object . java.lang.String ( ) ) ; } return StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
