<METHOD_START> @ Test public void void ( ) { Page < java.lang.Integer > org.springframework.data.repository.support.Page<java.lang.Integer> = PageableExecutionUtils . getPage ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , PageRequest . of ( NUMBER , NUMBER ) , java.util.function.LongSupplier ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; verifyZeroInteractions ( java.util.function.LongSupplier ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < java.lang.Integer > org.springframework.data.repository.support.Page<java.lang.Integer> = PageableExecutionUtils . getPage ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , Pageable . unpaged ( ) , java.util.function.LongSupplier ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; verifyZeroInteractions ( java.util.function.LongSupplier ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < java.lang.Integer > org.springframework.data.repository.support.Page<java.lang.Integer> = PageableExecutionUtils . getPage ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , PageRequest . of ( NUMBER , NUMBER ) , java.util.function.LongSupplier ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; verifyZeroInteractions ( java.util.function.LongSupplier ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( NUMBER ) . when ( java.util.function.LongSupplier ) . getAsLong ( ) ; Page < java.lang.Integer > org.springframework.data.repository.support.Page<java.lang.Integer> = PageableExecutionUtils . getPage ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , PageRequest . of ( NUMBER , NUMBER ) , java.util.function.LongSupplier ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; verify ( java.util.function.LongSupplier ) . getAsLong ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( NUMBER ) . when ( java.util.function.LongSupplier ) . getAsLong ( ) ; Page < java.lang.Integer > org.springframework.data.repository.support.Page<java.lang.Integer> = PageableExecutionUtils . getPage ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) , PageRequest . of ( NUMBER , NUMBER ) , java.util.function.LongSupplier ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; verify ( java.util.function.LongSupplier ) . getAsLong ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( NUMBER ) . when ( java.util.function.LongSupplier ) . getAsLong ( ) ; Page < java.lang.Integer > org.springframework.data.repository.support.Page<java.lang.Integer> = PageableExecutionUtils . getPage ( java.util.Collections .< java.lang.Integer > java.util.List<java.lang.Integer> ( ) , PageRequest . of ( NUMBER , NUMBER ) , java.util.function.LongSupplier ) ; assertThat ( org.springframework.data.repository.support.Page<java.lang.Integer> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; verify ( java.util.function.LongSupplier ) . getAsLong ( ) ; }  <METHOD_END>
