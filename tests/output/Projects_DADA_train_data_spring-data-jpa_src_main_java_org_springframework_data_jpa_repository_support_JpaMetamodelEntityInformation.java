<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> , Metamodel org.springframework.data.jpa.repository.support.Metamodel ) { super( java.lang.Class<T> ); Assert . notNull ( org.springframework.data.jpa.repository.support.Metamodel , STRING ) ; this . org.springframework.data.jpa.repository.support.Metamodel = org.springframework.data.jpa.repository.support.Metamodel ; ManagedType < T > org.springframework.data.jpa.repository.support.ManagedType<T> = org.springframework.data.jpa.repository.support.Metamodel . managedType ( java.lang.Class<T> ) ; if ( org.springframework.data.jpa.repository.support.ManagedType<T> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.String = org.springframework.data.jpa.repository.support.ManagedType<T> instanceof EntityType ? ( ( EntityType < ? > ) org.springframework.data.jpa.repository.support.ManagedType<T> ) . getName ( ) : null ; if ( ! ( org.springframework.data.jpa.repository.support.ManagedType<T> instanceof IdentifiableType ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } IdentifiableType < T > org.springframework.data.jpa.repository.support.IdentifiableType<T> = ( IdentifiableType < T > ) org.springframework.data.jpa.repository.support.ManagedType<T> ; this . org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> = new org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> < T > ( org.springframework.data.jpa.repository.support.IdentifiableType<T> ) ; this . org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> = org.springframework.data.jpa.repository.support.SingularAttribute ( org.springframework.data.jpa.repository.support.IdentifiableType<T> , org.springframework.data.jpa.repository.support.Metamodel ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String != null ? java.lang.String : super. getEntityName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < T > org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> < ? super T , ? > org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> ( IdentifiableType < T > org.springframework.data.jpa.repository.support.IdentifiableType<T> , Metamodel org.springframework.data.jpa.repository.support.Metamodel ) { try { return org.springframework.data.jpa.repository.support.IdentifiableType<T> . getVersion ( java.lang.Object .class ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> < SingularAttribute < ? super T , ? > > java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> = org.springframework.data.jpa.repository.support.IdentifiableType<T> . getSingularAttributes ( ) ; for ( SingularAttribute < ? super T , ? > org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> : java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> ) { if ( org.springframework.data.jpa.repository.support.SingularAttribute<,> . isVersion ( ) ) { return org.springframework.data.jpa.repository.support.SingularAttribute<,> ; } } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.repository.support.IdentifiableType<T> . getJavaType ( ) . getSuperclass ( ) ; try { ManagedType < ? > org.springframework.data.jpa.repository.support.ManagedType<?> = org.springframework.data.jpa.repository.support.Metamodel . managedType ( java.lang.Class<> ) ; if ( ! ( org.springframework.data.jpa.repository.support.ManagedType<> instanceof IdentifiableType ) ) { return null ; } return ( SingularAttribute < ? super T , ? > ) org.springframework.data.jpa.repository.support.SingularAttribute ( ( IdentifiableType < T > ) org.springframework.data.jpa.repository.support.ManagedType<> , org.springframework.data.jpa.repository.support.Metamodel ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Optional<ID> < ID > java.util.Optional<ID> ( T T ) { BeanWrapper org.springframework.data.jpa.repository.support.BeanWrapper = new DirectFieldAccessFallbackBeanWrapper ( T ) ; if ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . boolean ( ) ) { return java.util.Optional . java.util.Optional<ID> ( ( ID ) org.springframework.data.jpa.repository.support.BeanWrapper . getPropertyValue ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> ( ) . getName ( ) ) ) ; } BeanWrapper org.springframework.data.jpa.repository.support.BeanWrapper = new org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdentifierDerivingDirectFieldAccessFallbackBeanWrapper ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . java.lang.Class<?> ( ) , org.springframework.data.jpa.repository.support.Metamodel ) ; boolean boolean = false ; for ( SingularAttribute < ? super T , ? > org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> : org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> ) { java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.BeanWrapper . getPropertyValue ( org.springframework.data.jpa.repository.support.SingularAttribute<,> . getName ( ) ) ; if ( java.lang.Object != null ) { boolean = true ; } org.springframework.data.jpa.repository.support.BeanWrapper . setPropertyValue ( org.springframework.data.jpa.repository.support.SingularAttribute<,> . getName ( ) , java.lang.Object ) ; } return boolean ? java.util.Optional . java.util.Optional<ID> ( ( ID ) org.springframework.data.jpa.repository.support.BeanWrapper . getWrappedInstance ( ) ) : java.util.Optional . java.util.Optional<ID> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Class<ID> < ID > java.lang.Class<ID> ( ) { return ( java.lang.Class<ID> < ID > ) org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> < ? super T , ? > org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> ( ) { return org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> . size ( ) ) ; for ( SingularAttribute < ? super T , ? > org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> : org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.IdMetadata<T> . java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.jpa.repository.support.SingularAttribute<,> . getName ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.io.Serializable java.io.Serializable , java.lang.String java.lang.String ) { Assert . isTrue ( boolean ( ) , STRING ) ; return new DirectFieldAccessFallbackBeanWrapper ( java.io.Serializable ) . getPropertyValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( T T ) { if ( org.springframework.data.jpa.repository.support.SingularAttribute<,> == null || org.springframework.data.jpa.repository.support.SingularAttribute<,> . getJavaType ( ) . isPrimitive ( ) ) { return super. isNew ( T ) ; } BeanWrapper org.springframework.data.jpa.repository.support.BeanWrapper = new DirectFieldAccessFallbackBeanWrapper ( T ) ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.BeanWrapper . getPropertyValue ( org.springframework.data.jpa.repository.support.SingularAttribute<,> . getName ( ) ) ; return java.lang.Object == null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( IdentifiableType < T > org.springframework.data.jpa.repository.support.IdentifiableType<T> ) { this . org.springframework.data.jpa.repository.support.IdentifiableType<T> = org.springframework.data.jpa.repository.support.IdentifiableType<T> ; this . java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> = ( java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> < SingularAttribute < ? super T , ? > > ) ( org.springframework.data.jpa.repository.support.IdentifiableType<T> . hasSingleIdAttribute ( ) ? java.util.Collections . java.util.Set ( org.springframework.data.jpa.repository.support.IdentifiableType<T> . getId ( org.springframework.data.jpa.repository.support.IdentifiableType<T> . getIdType ( ) . getJavaType ( ) ) ) : org.springframework.data.jpa.repository.support.IdentifiableType<T> . getIdClassAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> . size ( ) == NUMBER ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } this . java.lang.Class<?> = java.lang.Class<?> ( ) ; return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( ) { try { Type < ? > org.springframework.data.jpa.repository.support.Type<?> = org.springframework.data.jpa.repository.support.IdentifiableType<T> . getIdType ( ) ; return org.springframework.data.jpa.repository.support.Type<> == null ? java.lang.Class<?> ( org.springframework.data.jpa.repository.support.IdentifiableType<T> ) : org.springframework.data.jpa.repository.support.Type<> . getJavaType ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return java.lang.Class<?> ( org.springframework.data.jpa.repository.support.IdentifiableType<T> ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( IdentifiableType < ? > org.springframework.data.jpa.repository.support.IdentifiableType<?> ) { IdClass org.springframework.data.jpa.repository.support.IdClass = AnnotationUtils . findAnnotation ( org.springframework.data.jpa.repository.support.IdentifiableType<> . getJavaType ( ) , IdClass .class ) ; return org.springframework.data.jpa.repository.support.IdClass == null ? null : org.springframework.data.jpa.repository.support.IdClass . value ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> < ? super T , ? > org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?> ( ) { return java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> . iterator ( ) . next ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> < SingularAttribute < ? super T , ? > > java.util.Iterator<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> ( ) { return java.util.Set<org.springframework.data.jpa.repository.support.SingularAttribute<? super T,?>> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , Metamodel org.springframework.data.jpa.repository.support.Metamodel ) { super( java.lang.Class<> ); this . org.springframework.data.jpa.repository.support.Metamodel = org.springframework.data.jpa.repository.support.Metamodel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( ! boolean ( java.lang.Object ) ) { super. setPropertyValue ( java.lang.String , java.lang.Object ) ; return; } @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation = new org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , this . org.springframework.data.jpa.repository.support.Metamodel ) ; if ( ! org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation . getJavaType ( ) . isAnnotationPresent ( IdClass .class ) ) { java.lang.Object java.lang.Object = new DirectFieldAccessFallbackBeanWrapper ( java.lang.Object ) . getPropertyValue ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation . org.springframework.data.jpa.repository.support.SingularAttribute ( ) . getName ( ) ) ; super. setPropertyValue ( java.lang.String , java.lang.Object ) ; return; } BeanWrapper org.springframework.data.jpa.repository.support.BeanWrapper = new DirectFieldAccessFallbackBeanWrapper ( java.lang.Object ) ; BeanWrapper org.springframework.data.jpa.repository.support.BeanWrapper = new BeanWrapperImpl ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation . java.lang.Class ( ) ) ; for ( java.lang.String java.lang.String : ( java.lang.Iterable<java.lang.String> < java.lang.String > ) org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation . java.lang.Iterable ( ) ) { org.springframework.data.jpa.repository.support.BeanWrapper . setPropertyValue ( java.lang.String , java.lang.Object ( org.springframework.data.jpa.repository.support.BeanWrapper , java.lang.String ) ) ; } super. setPropertyValue ( java.lang.String , org.springframework.data.jpa.repository.support.BeanWrapper . getWrappedInstance ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( BeanWrapper org.springframework.data.jpa.repository.support.BeanWrapper , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.BeanWrapper . getPropertyValue ( java.lang.String ) ; if ( java.lang.Object != null ) { java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Class<> ) ) { return java.lang.Object ; } return new DirectFieldAccessFallbackBeanWrapper ( java.lang.Object ) . getPropertyValue ( java.lang.String ( java.lang.Class<> , java.lang.String ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> , java.lang.String java.lang.String ) { ManagedType < ? extends java.lang.Object > org.springframework.data.jpa.repository.support.ManagedType<? extends java.lang.Object> = org.springframework.data.jpa.repository.support.Metamodel . managedType ( java.lang.Class<> ) ; for ( SingularAttribute < ? , ? > org.springframework.data.jpa.repository.support.SingularAttribute<?,?> : org.springframework.data.jpa.repository.support.ManagedType<> . getSingularAttributes ( ) ) { if ( org.springframework.data.jpa.repository.support.SingularAttribute<,> . isId ( ) ) { return org.springframework.data.jpa.repository.support.SingularAttribute<,> . getName ( ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return false ; } try { ManagedType < ? extends java.lang.Object > org.springframework.data.jpa.repository.support.ManagedType<? extends java.lang.Object> = this . org.springframework.data.jpa.repository.support.Metamodel . managedType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; return org.springframework.data.jpa.repository.support.ManagedType<> != null && org.springframework.data.jpa.repository.support.ManagedType<> . getPersistenceType ( ) == PersistenceType . ENTITY ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return false ; } }  <METHOD_END>
