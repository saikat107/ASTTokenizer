<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int , final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { java.net.Socket java.net.Socket = null ; try { java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { byte [] byte[] = new byte [ NUMBER ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) . java.nio.ByteBuffer ( java.lang.String . int ( ) * NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( byte[] ) ; java.net.Socket . java.io.OutputStream ( ) . void ( java.lang.String . byte[] ( ) ) ; org.springframework.integration.ip.util.Log . debug ( int + STRING ) ; if ( java.util.concurrent.CountDownLatch != null ) { java.util.concurrent.CountDownLatch . void ( ) ; } java.lang.Thread . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( java.lang.String . byte[] ( ) ) ; org.springframework.integration.ip.util.Log . debug ( int + STRING ) ; } java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { if ( java.net.Socket != null ) { try { java.net.Socket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { java.net.Socket java.net.Socket = null ; try { java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; byte [] byte[] = new byte [ NUMBER ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) . java.nio.ByteBuffer ( java.lang.Integer . int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( byte[] ) ; java.net.Socket . java.io.OutputStream ( ) . void ( java.lang.String . byte[] ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { if ( java.net.Socket != null ) { try { java.net.Socket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int , final int int , final boolean boolean ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { java.net.Socket java.net.Socket = null ; try { org.springframework.integration.ip.util.Log . debug ( STRING + int ) ; java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { void ( java.io.OutputStream , NUMBER , boolean ) ; void ( java.io.OutputStream , NUMBER , boolean ) ; void ( java.io.OutputStream , NUMBER , boolean ) ; void ( java.io.OutputStream , NUMBER , boolean ) ; void ( java.io.OutputStream , 'x' , boolean ) ; void ( java.io.OutputStream , 'x' , boolean ) ; } java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { if ( java.net.Socket != null ) { try { java.net.Socket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.OutputStream java.io.OutputStream , int int , boolean boolean ) throws java.lang.Exception { java.io.OutputStream . void ( int ) ; org.springframework.integration.ip.util.Log . trace ( STRING + java.lang.Integer . java.lang.String ( int ) ) ; if ( boolean ) { return; } java.lang.Thread . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int , final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { java.net.Socket java.net.Socket = null ; try { java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( java.io.OutputStream , NUMBER , true ) ; java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; org.springframework.integration.ip.util.Log . debug ( int + STRING ) ; if ( java.util.concurrent.CountDownLatch != null ) { java.util.concurrent.CountDownLatch . void ( ) ; } java.lang.Thread . void ( NUMBER ) ; java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; org.springframework.integration.ip.util.Log . debug ( int + STRING ) ; void ( java.io.OutputStream , NUMBER , true ) ; } java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { if ( java.net.Socket != null ) { try { java.net.Socket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { java.net.Socket java.net.Socket = null ; try { java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; void ( java.io.OutputStream , NUMBER , true ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( java.io.OutputStream , 'x' , true ) ; } java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.ip.util.Log . debug ( STRING , java.lang.Exception ) ; } finally { if ( java.net.Socket != null ) { try { java.net.Socket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int , final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { java.net.Socket java.net.Socket = null ; try { java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; org.springframework.integration.ip.util.Log . debug ( int + STRING ) ; if ( java.util.concurrent.CountDownLatch != null ) { java.util.concurrent.CountDownLatch . void ( ) ; } java.lang.Thread . void ( NUMBER ) ; java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; org.springframework.integration.ip.util.Log . debug ( int + STRING ) ; void ( java.io.OutputStream , '\r' , true ) ; void ( java.io.OutputStream , '\n' , true ) ; } java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { if ( java.net.Socket != null ) { try { java.net.Socket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public static void void ( final int int , final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.net.Socket java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; void ( java.io.OutputStream , '\r' , true ) ; void ( java.io.OutputStream , '\n' , true ) ; if ( java.util.concurrent.CountDownLatch != null ) { java.util.concurrent.CountDownLatch . void ( ) ; } java.net.Socket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( final int int ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.net.Socket java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; java.io.OutputStream . void ( java.lang.String . byte[] ( ) ) ; java.net.Socket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { java.net.Socket java.net.Socket = null ; try { java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.OutputStream ) ; java.io.ObjectOutputStream . void ( java.lang.String ) ; java.io.ObjectOutputStream . void ( ) ; java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.OutputStream ) ; java.io.ObjectOutputStream . void ( java.lang.String ) ; java.io.ObjectOutputStream . void ( ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { if ( java.net.Socket != null ) { try { java.net.Socket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public static java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( final int int ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { java.net.Socket java.net.Socket = new java.net.Socket ( java.net.InetAddress . java.net.InetAddress ( STRING ) , int ) ; java.io.OutputStream java.io.OutputStream = java.net.Socket . java.io.OutputStream ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( java.io.OutputStream , 'x' , true ) ; } java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.net.Socket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public static void void ( AbstractInternetProtocolReceivingChannelAdapter org.springframework.integration.ip.util.AbstractInternetProtocolReceivingChannelAdapter )			throws java.net.UnknownHostException { java.net.InetAddress [] java.net.InetAddress[] = java.net.InetAddress . java.net.InetAddress[] ( null ) ; if ( java.net.InetAddress[] . int > NUMBER ) { java.lang.String java.lang.String = java.net.InetAddress[] [ NUMBER ] . java.lang.String ( ) ; org.springframework.integration.ip.util.AbstractInternetProtocolReceivingChannelAdapter . setLocalAddress ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( boolean boolean ) throws java.lang.Exception { java.util.Enumeration<java.net.NetworkInterface> < java.net.NetworkInterface > java.util.Enumeration<java.net.NetworkInterface> = java.net.NetworkInterface . java.util.Enumeration<java.net.NetworkInterface> ( ) ; while ( java.util.Enumeration<java.net.NetworkInterface> . boolean ( ) ) { java.net.NetworkInterface java.net.NetworkInterface = java.util.Enumeration<java.net.NetworkInterface> . java.net.NetworkInterface ( ) ; if ( java.net.NetworkInterface . boolean ( ) || ( boolean && ! java.net.NetworkInterface . boolean ( ) ) || java.net.NetworkInterface . java.lang.String ( ) . boolean ( STRING ) ) { continue; } for ( java.util.Enumeration<java.net.InetAddress> < java.net.InetAddress > java.util.Enumeration<java.net.InetAddress> = java.net.NetworkInterface . java.util.Enumeration<java.net.InetAddress> ( ) ; java.util.Enumeration<java.net.InetAddress> . boolean ( ) ; ) { java.net.InetAddress java.net.InetAddress = java.util.Enumeration<java.net.InetAddress> . java.net.InetAddress ( ) ; if ( java.net.InetAddress instanceof java.net.Inet4Address ) { return java.net.InetAddress . java.lang.String ( ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> public static void void ( AbstractInternetProtocolReceivingChannelAdapter org.springframework.integration.ip.util.AbstractInternetProtocolReceivingChannelAdapter ) throws java.lang.Exception { int int = NUMBER ; while ( ! org.springframework.integration.ip.util.AbstractInternetProtocolReceivingChannelAdapter . isListening ( ) ) { java.lang.Thread . void ( NUMBER ) ; if ( int ++ > NUMBER ) { throw new java.lang.Exception ( STRING ) ; } } }  <METHOD_END>
