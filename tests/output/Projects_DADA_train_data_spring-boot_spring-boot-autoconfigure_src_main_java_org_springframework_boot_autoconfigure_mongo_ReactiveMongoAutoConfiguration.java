<METHOD_START> public void ( MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties , ObjectProvider < MongoClientSettings > org.springframework.boot.autoconfigure.mongo.ObjectProvider<org.springframework.boot.autoconfigure.mongo.MongoClientSettings> , Environment org.springframework.boot.autoconfigure.mongo.Environment ) { this . org.springframework.boot.autoconfigure.mongo.MongoClientSettings = org.springframework.boot.autoconfigure.mongo.ObjectProvider<org.springframework.boot.autoconfigure.mongo.MongoClientSettings> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.mongo.ReactiveMongoClientFactory = new ReactiveMongoClientFactory ( org.springframework.boot.autoconfigure.mongo.MongoProperties , org.springframework.boot.autoconfigure.mongo.Environment ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PreDestroy public void void ( ) { if ( this . org.springframework.boot.autoconfigure.mongo.MongoClient != null ) { this . org.springframework.boot.autoconfigure.mongo.MongoClient . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.mongo.MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient ( ) { this . org.springframework.boot.autoconfigure.mongo.MongoClient = this . org.springframework.boot.autoconfigure.mongo.ReactiveMongoClientFactory . createMongoClient ( this . org.springframework.boot.autoconfigure.mongo.MongoClientSettings ) ; return this . org.springframework.boot.autoconfigure.mongo.MongoClient ; }  <METHOD_END>
