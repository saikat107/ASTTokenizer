<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestUtils . TestUtils TestUtils.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; TestUtils.TestApplicationContext . refresh ( ) ; RouterFactoryBean org.springframework.integration.router.config.RouterFactoryBean = new RouterFactoryBean ( ) ; org.springframework.integration.router.config.RouterFactoryBean . setTargetObject ( this ) ; org.springframework.integration.router.config.RouterFactoryBean . setTargetMethodName ( STRING ) ; org.springframework.integration.router.config.RouterFactoryBean . setDefaultOutputChannelName ( STRING ) ; QueueChannel org.springframework.integration.router.config.QueueChannel = new QueueChannel ( ) ; TestUtils.TestApplicationContext . registerBean ( STRING , org.springframework.integration.router.config.QueueChannel ) ; org.springframework.integration.router.config.RouterFactoryBean . setBeanFactory ( TestUtils.TestApplicationContext ) ; MessageHandler org.springframework.integration.router.config.MessageHandler = org.springframework.integration.router.config.RouterFactoryBean . getObject ( ) ; this . boolean = false ; org.springframework.integration.router.config.MessageHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; assertNotNull ( org.springframework.integration.router.config.QueueChannel . receive ( NUMBER ) ) ; assertTrue ( this . boolean ) ; TestUtils.TestApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { boolean = true ; return null ; }  <METHOD_END>
