<METHOD_START> public void ( HttpServer org.springframework.boot.web.embedded.netty.HttpServer , ReactorHttpHandlerAdapter org.springframework.boot.web.embedded.netty.ReactorHttpHandlerAdapter ) { this . org.springframework.boot.web.embedded.netty.HttpServer = org.springframework.boot.web.embedded.netty.HttpServer ; this . org.springframework.boot.web.embedded.netty.ReactorHttpHandlerAdapter = org.springframework.boot.web.embedded.netty.ReactorHttpHandlerAdapter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.netty.WebServerException { if ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.boot.web.embedded.netty.NettyContext> . get ( ) == null ) { this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; try { this . java.util.concurrent.atomic.AtomicReference<org.springframework.boot.web.embedded.netty.NettyContext> . set ( this . org.springframework.boot.web.embedded.netty.HttpServer . newHandler ( this . org.springframework.boot.web.embedded.netty.ReactorHttpHandlerAdapter ) . block ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.net.BindException ( java.lang.Exception ) != null ) { } throw new WebServerException ( STRING , java.lang.Exception ) ; } org.springframework.boot.web.embedded.netty.NettyWebServer . org.springframework.boot.web.embedded.netty.Log . info ( STRING + int ( ) ) ; void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.net.BindException java.net.BindException ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception ; while ( java.lang.Throwable != null ) { if ( java.lang.Throwable instanceof java.net.BindException ) { return ( java.net.BindException ) java.lang.Throwable ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( STRING ) { @ java.lang.Override public void void ( ) { try { org.springframework.boot.web.embedded.netty.NettyWebServer .this . java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {				} } } ; java.lang.Thread . void ( java.lang.Class<? extends org.springframework.boot.web.embedded.netty.NettyWebServer> ( ) . java.lang.ClassLoader ( ) ) ; java.lang.Thread . void ( false ) ; java.lang.Thread . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { org.springframework.boot.web.embedded.netty.NettyWebServer .this . java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {				} }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.netty.WebServerException { NettyContext org.springframework.boot.web.embedded.netty.NettyContext = this . java.util.concurrent.atomic.AtomicReference<org.springframework.boot.web.embedded.netty.NettyContext> . getAndSet ( null ) ; if ( org.springframework.boot.web.embedded.netty.NettyContext != null ) { org.springframework.boot.web.embedded.netty.NettyContext . dispose ( ) ; } this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { if ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.boot.web.embedded.netty.NettyContext> . get ( ) != null ) { return this . java.util.concurrent.atomic.AtomicReference<org.springframework.boot.web.embedded.netty.NettyContext> . get ( ) . address ( ) . getPort ( ) ; } return NUMBER ; }  <METHOD_END>
