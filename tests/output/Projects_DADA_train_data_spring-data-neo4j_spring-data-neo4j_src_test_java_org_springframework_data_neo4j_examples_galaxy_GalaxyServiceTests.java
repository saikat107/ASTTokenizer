<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . deleteAll ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.galaxy.GalaxyService . getNumberOfWorlds ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { World org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . createWorld ( STRING , NUMBER ) ; java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> = ( java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> < World > ) org.springframework.data.neo4j.examples.galaxy.GalaxyService . getAllWorlds ( ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> . size ( ) ) ; World org.springframework.data.neo4j.examples.galaxy.World = java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> . iterator ( ) . next ( ) ; assertEquals ( org.springframework.data.neo4j.examples.galaxy.World . getName ( ) , org.springframework.data.neo4j.examples.galaxy.World . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeSomeWorlds ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.galaxy.GalaxyService . getNumberOfWorlds ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeAllWorldsAtOnce ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.galaxy.GalaxyService . getNumberOfWorlds ( ) ) ; World org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findWorldByName ( STRING ) ; World org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findWorldByName ( STRING ) ; assertTrue ( org.springframework.data.neo4j.examples.galaxy.World . canBeReachedFrom ( org.springframework.data.neo4j.examples.galaxy.World ) ) ; assertTrue ( org.springframework.data.neo4j.examples.galaxy.World . canBeReachedFrom ( org.springframework.data.neo4j.examples.galaxy.World ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeSomeWorlds ( ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : org.springframework.data.neo4j.examples.galaxy.GalaxyService . getAllWorlds ( ) ) { java.util.Optional<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.Optional<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findWorldById ( org.springframework.data.neo4j.examples.galaxy.World . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.galaxy.World> . isPresent ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeSomeWorlds ( ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : org.springframework.data.neo4j.examples.galaxy.GalaxyService . getAllWorlds ( ) ) { World org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findWorldByName ( org.springframework.data.neo4j.examples.galaxy.World . getName ( ) ) ; assertNotNull ( org.springframework.data.neo4j.examples.galaxy.World ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeSomeWorlds ( ) ; World org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findWorldByName ( STRING ) ; World org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findWorldByName ( STRING ) ; assertTrue ( org.springframework.data.neo4j.examples.galaxy.World . canBeReachedFrom ( org.springframework.data.neo4j.examples.galaxy.World ) ) ; assertTrue ( org.springframework.data.neo4j.examples.galaxy.World . canBeReachedFrom ( org.springframework.data.neo4j.examples.galaxy.World ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeSomeWorlds ( ) ; java.lang.Iterable<org.springframework.data.neo4j.examples.galaxy.World> < World > java.lang.Iterable<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . getAllWorlds ( ) ; int int = NUMBER ; for ( World org.springframework.data.neo4j.examples.galaxy.World : java.lang.Iterable<org.springframework.data.neo4j.examples.galaxy.World> ) { assertTrue ( java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> . contains ( org.springframework.data.neo4j.examples.galaxy.World ) ) ; int ++ ; } assertEquals ( java.util.Collection<org.springframework.data.neo4j.examples.galaxy.World> . size ( ) , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeSomeWorlds ( ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : org.springframework.data.neo4j.examples.galaxy.GalaxyService . findAllByNumberOfMoons ( NUMBER ) ) { assertThat ( org.springframework.data.neo4j.examples.galaxy.World . getName ( ) , is ( anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeSomeWorlds ( ) ; World org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findWorldByName ( STRING ) ; assertNull ( org.springframework.data.neo4j.examples.galaxy.World ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.List<org.springframework.data.neo4j.examples.galaxy.World> = ( java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > ) org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeAllWorldsAtOnce ( ) ; int int = java.util.List<org.springframework.data.neo4j.examples.galaxy.World> . size ( ) ; int int = NUMBER ; int int = int / int + NUMBER ; long long = NUMBER ; for ( World org.springframework.data.neo4j.examples.galaxy.World : java.util.List<org.springframework.data.neo4j.examples.galaxy.World> ) { long += org.springframework.data.neo4j.examples.galaxy.World . getId ( ) ; } for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Iterable<org.springframework.data.neo4j.examples.galaxy.World> < World > java.lang.Iterable<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findAllWorlds ( new Pagination ( int , int ) ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : java.lang.Iterable<org.springframework.data.neo4j.examples.galaxy.World> ) { long -= org.springframework.data.neo4j.examples.galaxy.World . getId ( ) ; } } assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeAllWorldsAtOnce ( ) . size ( ) ; assertEquals ( int , NUMBER ) ; Pageable org.springframework.data.neo4j.examples.galaxy.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < World > org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findAllWorlds ( org.springframework.data.neo4j.examples.galaxy.Pageable ) ; assertTrue ( org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeAllWorldsAtOnce ( ) . size ( ) ; assertEquals ( int , NUMBER ) ; Pageable org.springframework.data.neo4j.examples.galaxy.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < World > org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findAllWorlds ( org.springframework.data.neo4j.examples.galaxy.Pageable ) ; assertFalse ( org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = NUMBER ; java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.List<org.springframework.data.neo4j.examples.galaxy.World> = ( java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > ) org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeAllWorldsAtOnce ( ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : java.util.List<org.springframework.data.neo4j.examples.galaxy.World> ) { long += org.springframework.data.neo4j.examples.galaxy.World . getId ( ) ; } Pageable org.springframework.data.neo4j.examples.galaxy.Pageable = new PageRequest ( NUMBER , NUMBER ) ; for (; ; ) { Page < World > org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findAllWorlds ( org.springframework.data.neo4j.examples.galaxy.Pageable ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> ) { long -= org.springframework.data.neo4j.examples.galaxy.World . getId ( ) ; } if ( ! org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> . hasNext ( ) ) { break; } org.springframework.data.neo4j.examples.galaxy.Pageable = org.springframework.data.neo4j.examples.galaxy.Pageable . next ( ) ; } assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.List<org.springframework.data.neo4j.examples.galaxy.World> = ( java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > ) org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeAllWorldsAtOnce ( ) ; int int = java.util.List<org.springframework.data.neo4j.examples.galaxy.World> . size ( ) ; assertEquals ( int , NUMBER ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( java.util.List<org.springframework.data.neo4j.examples.galaxy.World> ) ; Pageable org.springframework.data.neo4j.examples.galaxy.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ; int int = NUMBER ; for (; ; ) { Page < World > org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findAllWorlds ( org.springframework.data.neo4j.examples.galaxy.Pageable ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> ) { assertEquals ( java.lang.String[] [ int ] , org.springframework.data.neo4j.examples.galaxy.World . getName ( ) ) ; int -- ; int ++ ; } if ( ! org.springframework.data.neo4j.examples.galaxy.Page<org.springframework.data.neo4j.examples.galaxy.World> . hasNext ( ) ) { break; } org.springframework.data.neo4j.examples.galaxy.Pageable = org.springframework.data.neo4j.examples.galaxy.Pageable . next ( ) ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.List<org.springframework.data.neo4j.examples.galaxy.World> = ( java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > ) org.springframework.data.neo4j.examples.galaxy.GalaxyService . makeAllWorldsAtOnce ( ) ; int int = java.util.List<org.springframework.data.neo4j.examples.galaxy.World> . size ( ) ; assertEquals ( int , NUMBER ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( java.util.List<org.springframework.data.neo4j.examples.galaxy.World> ) ; Sort org.springframework.data.neo4j.examples.galaxy.Sort = new Sort ( Sort . Direction . ASC , STRING ) ; int int = NUMBER ; for ( World org.springframework.data.neo4j.examples.galaxy.World : org.springframework.data.neo4j.examples.galaxy.GalaxyService . findAllWorlds ( org.springframework.data.neo4j.examples.galaxy.Sort ) ) { assertEquals ( java.lang.String[] [ int ] , org.springframework.data.neo4j.examples.galaxy.World . getName ( ) ) ; int -- ; int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.galaxy.GalaxyService . deleteAll ( ) ; World org.springframework.data.neo4j.examples.galaxy.World = new World ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.galaxy.World . setRadius ( NUMBER ) ; org.springframework.data.neo4j.examples.galaxy.GalaxyService . create ( org.springframework.data.neo4j.examples.galaxy.World ) ; org.springframework.data.neo4j.examples.galaxy.World = org.springframework.data.neo4j.examples.galaxy.GalaxyService . findByName ( STRING ) ; assertEquals ( java.lang.Float . java.lang.Float ( NUMBER ) , org.springframework.data.neo4j.examples.galaxy.World . getRadius ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( java.util.List<org.springframework.data.neo4j.examples.galaxy.World> < World > java.util.List<org.springframework.data.neo4j.examples.galaxy.World> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList ( ) ; for ( World org.springframework.data.neo4j.examples.galaxy.World : java.util.List<org.springframework.data.neo4j.examples.galaxy.World> ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.examples.galaxy.World . getName ( ) ) ; } java.lang.String [] java.lang.String[] = java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [] {} ) ; java.util.Arrays . void ( java.lang.String[] ) ; return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.examples.galaxy.PlatformTransactionManager org.springframework.data.neo4j.examples.galaxy.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.examples.galaxy.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.examples.galaxy.SessionFactory org.springframework.data.neo4j.examples.galaxy.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.examples.galaxy.TransactionTemplate org.springframework.data.neo4j.examples.galaxy.TransactionTemplate ( ) { return new TransactionTemplate ( org.springframework.data.neo4j.examples.galaxy.PlatformTransactionManager ( ) ) ; }  <METHOD_END>
