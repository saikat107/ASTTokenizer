<METHOD_START> protected org.springframework.aop.framework.autoproxy.BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory ( ) java.io.IOException { return new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; Lockable org.springframework.aop.framework.autoproxy.Lockable = ( Lockable ) org.springframework.aop.framework.autoproxy.ITestBean ; NopInterceptor org.springframework.aop.framework.autoproxy.NopInterceptor = ( NopInterceptor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; NopInterceptor org.springframework.aop.framework.autoproxy.NopInterceptor = ( NopInterceptor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING , Advisor .class ) . getAdvice ( ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; Lockable org.springframework.aop.framework.autoproxy.Lockable = ( Lockable ) org.springframework.aop.framework.autoproxy.ITestBean ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.autoproxy.Lockable . lock ( ) ; assertTrue ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; PackageVisibleMethod org.springframework.aop.framework.autoproxy.PackageVisibleMethod = ( PackageVisibleMethod ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.autoproxy.PackageVisibleMethod . doSomething ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertTrue ( org.springframework.aop.framework.autoproxy.PackageVisibleMethod instanceof Lockable ) ; Lockable org.springframework.aop.framework.autoproxy.Lockable = ( Lockable ) org.springframework.aop.framework.autoproxy.PackageVisibleMethod ; org.springframework.aop.framework.autoproxy.Lockable . lock ( ) ; assertTrue ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; org.springframework.aop.framework.autoproxy.Lockable . unlock ( ) ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CountingTestBean . count = NUMBER ; BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; Advised org.springframework.aop.framework.autoproxy.Advised = ( Advised ) org.springframework.aop.framework.autoproxy.ITestBean ; assertTrue ( org.springframework.aop.framework.autoproxy.Advised . getTargetSource ( ) instanceof PrototypeTargetSource ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; assertEquals ( STRING , NUMBER , CountingTestBean . count ) ; CountingTestBean . count = NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CountingTestBean . count = NUMBER ; BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; Advised org.springframework.aop.framework.autoproxy.Advised = ( Advised ) org.springframework.aop.framework.autoproxy.ITestBean ; assertTrue ( org.springframework.aop.framework.autoproxy.Advised . getTargetSource ( ) instanceof LazyInitTargetSource ) ; assertEquals ( STRING , NUMBER , CountingTestBean . count ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; assertEquals ( STRING , NUMBER , CountingTestBean . count ) ; CountingTestBean . count = NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.aop.framework.autoproxy.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; Advised org.springframework.aop.framework.autoproxy.Advised = ( Advised ) org.springframework.aop.framework.autoproxy.ITestBean ; assertTrue ( org.springframework.aop.framework.autoproxy.Advised . getTargetSource ( ) instanceof CommonsPool2TargetSource ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; org.springframework.aop.framework.autoproxy.Advised = ( Advised ) org.springframework.aop.framework.autoproxy.ITestBean ; assertTrue ( org.springframework.aop.framework.autoproxy.Advised . getTargetSource ( ) instanceof ThreadLocalTargetSource ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; org.springframework.aop.framework.autoproxy.Advised = ( Advised ) org.springframework.aop.framework.autoproxy.ITestBean ; assertTrue ( org.springframework.aop.framework.autoproxy.Advised . getTargetSource ( ) instanceof PrototypeTargetSource ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , org.springframework.aop.framework.autoproxy.ITestBean == org.springframework.aop.framework.autoproxy.ITestBean ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getSpouse ( ) . getName ( ) ) ; org.springframework.aop.framework.autoproxy.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.aop.framework.autoproxy.BeanFactory = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; CountingBeforeAdvice org.springframework.aop.framework.autoproxy.CountingBeforeAdvice = ( CountingBeforeAdvice ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( NUMBER ) ; org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.autoproxy.CountingBeforeAdvice . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.aop.framework.autoproxy.AbstractBeanFactoryBasedTargetSource org.springframework.aop.framework.autoproxy.AbstractBeanFactoryBasedTargetSource ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( STRING ) ) { return null ; } return new PrototypeTargetSource ( ) ; }  <METHOD_END>
