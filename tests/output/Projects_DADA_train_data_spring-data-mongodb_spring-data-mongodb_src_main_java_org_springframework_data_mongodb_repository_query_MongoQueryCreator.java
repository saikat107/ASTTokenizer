<METHOD_START> public void ( PartTree org.springframework.data.mongodb.repository.query.PartTree , ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , MappingContext < ? , MongoPersistentProperty > org.springframework.data.mongodb.repository.query.MappingContext<?,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) { this( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> , false ); }  <METHOD_END>
<METHOD_START> public void ( PartTree org.springframework.data.mongodb.repository.query.PartTree , ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , MappingContext < ? , MongoPersistentProperty > org.springframework.data.mongodb.repository.query.MappingContext<?,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> , boolean boolean ) { super( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ); Assert . notNull ( org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> , STRING ) ; this . org.springframework.data.mongodb.repository.query.MongoParameterAccessor = org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ; this . boolean = boolean ; this . org.springframework.data.mongodb.repository.query.MappingContext<?,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> = org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.query.Criteria org.springframework.data.mongodb.repository.query.Criteria ( Part org.springframework.data.mongodb.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( boolean && org.springframework.data.mongodb.repository.query.Part . getType ( ) . equals ( Type . NEAR ) ) { return null ; } PersistentPropertyPath < MongoPersistentProperty > org.springframework.data.mongodb.repository.query.PersistentPropertyPath<org.springframework.data.mongodb.repository.query.MongoPersistentProperty> = org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> . getPersistentPropertyPath ( org.springframework.data.mongodb.repository.query.Part . getProperty ( ) ) ; MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty = org.springframework.data.mongodb.repository.query.PersistentPropertyPath<org.springframework.data.mongodb.repository.query.MongoPersistentProperty> . getLeafProperty ( ) ; Criteria org.springframework.data.mongodb.repository.query.Criteria = org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , org.springframework.data.mongodb.repository.query.MongoPersistentProperty , where ( org.springframework.data.mongodb.repository.query.PersistentPropertyPath<org.springframework.data.mongodb.repository.query.MongoPersistentProperty> . toDotPath ( ) ) , ( PotentiallyConvertingIterator ) java.util.Iterator<java.lang.Object> ) ; return org.springframework.data.mongodb.repository.query.Criteria ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.query.Criteria org.springframework.data.mongodb.repository.query.Criteria ( Part org.springframework.data.mongodb.repository.query.Part , Criteria org.springframework.data.mongodb.repository.query.Criteria , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( org.springframework.data.mongodb.repository.query.Criteria == null ) { return org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , java.util.Iterator<java.lang.Object> ) ; } PersistentPropertyPath < MongoPersistentProperty > org.springframework.data.mongodb.repository.query.PersistentPropertyPath<org.springframework.data.mongodb.repository.query.MongoPersistentProperty> = org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> . getPersistentPropertyPath ( org.springframework.data.mongodb.repository.query.Part . getProperty ( ) ) ; MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty = org.springframework.data.mongodb.repository.query.PersistentPropertyPath<org.springframework.data.mongodb.repository.query.MongoPersistentProperty> . getLeafProperty ( ) ; return org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , org.springframework.data.mongodb.repository.query.MongoPersistentProperty , org.springframework.data.mongodb.repository.query.Criteria . and ( org.springframework.data.mongodb.repository.query.PersistentPropertyPath<org.springframework.data.mongodb.repository.query.MongoPersistentProperty> . toDotPath ( ) ) , ( PotentiallyConvertingIterator ) java.util.Iterator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.query.Criteria org.springframework.data.mongodb.repository.query.Criteria ( Criteria org.springframework.data.mongodb.repository.query.Criteria , Criteria org.springframework.data.mongodb.repository.query.Criteria ) { Criteria org.springframework.data.mongodb.repository.query.Criteria = new Criteria ( ) ; return org.springframework.data.mongodb.repository.query.Criteria . orOperator ( org.springframework.data.mongodb.repository.query.Criteria , org.springframework.data.mongodb.repository.query.Criteria ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( Criteria org.springframework.data.mongodb.repository.query.Criteria , Sort org.springframework.data.mongodb.repository.query.Sort ) { Query org.springframework.data.mongodb.repository.query.Query = ( org.springframework.data.mongodb.repository.query.Criteria == null ? new Query ( ) : new Query ( org.springframework.data.mongodb.repository.query.Criteria ) ) . with ( org.springframework.data.mongodb.repository.query.Sort ) ; if ( org.springframework.data.mongodb.repository.query.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.repository.query.Logger . debug ( STRING + org.springframework.data.mongodb.repository.query.Query ) ; } return org.springframework.data.mongodb.repository.query.Query ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.Criteria org.springframework.data.mongodb.repository.query.Criteria ( Part org.springframework.data.mongodb.repository.query.Part , MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty , Criteria org.springframework.data.mongodb.repository.query.Criteria , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { Type org.springframework.data.mongodb.repository.query.Type = org.springframework.data.mongodb.repository.query.Part . getType ( ) ; switch ( org.springframework.data.mongodb.repository.query.Type ) { case AFTER : case GREATER_THAN : return org.springframework.data.mongodb.repository.query.Criteria . gt ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; case GREATER_THAN_EQUAL : return org.springframework.data.mongodb.repository.query.Criteria . gte ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; case BEFORE : case LESS_THAN : return org.springframework.data.mongodb.repository.query.Criteria . lt ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; case LESS_THAN_EQUAL : return org.springframework.data.mongodb.repository.query.Criteria . lte ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; case BETWEEN : return org.springframework.data.mongodb.repository.query.Criteria . gt ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) . lt ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; case IS_NOT_NULL : return org.springframework.data.mongodb.repository.query.Criteria . ne ( null ) ; case IS_NULL : return org.springframework.data.mongodb.repository.query.Criteria . is ( null ) ; case NOT_IN : return org.springframework.data.mongodb.repository.query.Criteria . nin ( java.lang.Object[] ( java.util.Iterator<java.lang.Object> ) ) ; case IN : return org.springframework.data.mongodb.repository.query.Criteria . in ( java.lang.Object[] ( java.util.Iterator<java.lang.Object> ) ) ; case LIKE : case STARTING_WITH : case ENDING_WITH : case CONTAINING : return org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , org.springframework.data.mongodb.repository.query.MongoPersistentProperty , org.springframework.data.mongodb.repository.query.Criteria , java.util.Iterator<java.lang.Object> ) ; case NOT_LIKE : return org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , org.springframework.data.mongodb.repository.query.MongoPersistentProperty , org.springframework.data.mongodb.repository.query.Criteria . not ( ) , java.util.Iterator<java.lang.Object> ) ; case NOT_CONTAINING : return org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , org.springframework.data.mongodb.repository.query.MongoPersistentProperty , org.springframework.data.mongodb.repository.query.Criteria . not ( ) , java.util.Iterator<java.lang.Object> ) ; case REGEX : return org.springframework.data.mongodb.repository.query.Criteria . regex ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) . java.lang.String ( ) ) ; case EXISTS : return org.springframework.data.mongodb.repository.query.Criteria . exists ( ( java.lang.Boolean ) java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; case TRUE : return org.springframework.data.mongodb.repository.query.Criteria . is ( true ) ; case FALSE : return org.springframework.data.mongodb.repository.query.Criteria . is ( false ) ; case NEAR : Range < Distance > org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> = org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getDistanceRange ( ) ; Distance org.springframework.data.mongodb.repository.query.Distance = org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> . getUpperBound ( ) ; Distance org.springframework.data.mongodb.repository.query.Distance = org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> . getLowerBound ( ) ; Point org.springframework.data.mongodb.repository.query.Point = org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getGeoNearLocation ( ) ; org.springframework.data.mongodb.repository.query.Point = org.springframework.data.mongodb.repository.query.Point == null ? org.springframework.data.mongodb.repository.query.Point ( java.util.Iterator<java.lang.Object> , Point .class ) : org.springframework.data.mongodb.repository.query.Point ; boolean boolean = boolean ( org.springframework.data.mongodb.repository.query.MongoPersistentProperty ) ; if ( org.springframework.data.mongodb.repository.query.Distance == null ) { return boolean ? org.springframework.data.mongodb.repository.query.Criteria . nearSphere ( org.springframework.data.mongodb.repository.query.Point ) : org.springframework.data.mongodb.repository.query.Criteria . near ( org.springframework.data.mongodb.repository.query.Point ) ; } else { if ( boolean || ! Metrics . NEUTRAL . equals ( org.springframework.data.mongodb.repository.query.Distance . getMetric ( ) ) ) { org.springframework.data.mongodb.repository.query.Criteria . nearSphere ( org.springframework.data.mongodb.repository.query.Point ) ; } else { org.springframework.data.mongodb.repository.query.Criteria . near ( org.springframework.data.mongodb.repository.query.Point ) ; } org.springframework.data.mongodb.repository.query.Criteria . maxDistance ( org.springframework.data.mongodb.repository.query.Distance . getNormalizedValue ( ) ) ; if ( org.springframework.data.mongodb.repository.query.Distance != null ) { org.springframework.data.mongodb.repository.query.Criteria . minDistance ( org.springframework.data.mongodb.repository.query.Distance . getNormalizedValue ( ) ) ; } } return org.springframework.data.mongodb.repository.query.Criteria ; case WITHIN : java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; return org.springframework.data.mongodb.repository.query.Criteria . within ( ( Shape ) java.lang.Object ) ; case SIMPLE_PROPERTY : return boolean ( org.springframework.data.mongodb.repository.query.Part ) ? org.springframework.data.mongodb.repository.query.Criteria . is ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) : org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , org.springframework.data.mongodb.repository.query.MongoPersistentProperty , org.springframework.data.mongodb.repository.query.Criteria , java.util.Iterator<java.lang.Object> , false ) ; case NEGATING_SIMPLE_PROPERTY : return boolean ( org.springframework.data.mongodb.repository.query.Part ) ? org.springframework.data.mongodb.repository.query.Criteria . ne ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) : org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Part , org.springframework.data.mongodb.repository.query.MongoPersistentProperty , org.springframework.data.mongodb.repository.query.Criteria , java.util.Iterator<java.lang.Object> , true ) ; default: throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Part org.springframework.data.mongodb.repository.query.Part ) { switch ( org.springframework.data.mongodb.repository.query.Part . shouldIgnoreCase ( ) ) { case NEVER : return true ; case WHEN_POSSIBLE : return org.springframework.data.mongodb.repository.query.Part . getProperty ( ) . getType ( ) != java.lang.String .class ; case ALWAYS : return false ; default: return true ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.Criteria org.springframework.data.mongodb.repository.query.Criteria ( Part org.springframework.data.mongodb.repository.query.Part , MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty , Criteria org.springframework.data.mongodb.repository.query.Criteria , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , boolean boolean ) { PropertyPath org.springframework.data.mongodb.repository.query.PropertyPath = org.springframework.data.mongodb.repository.query.Part . getProperty ( ) . getLeafProperty ( ) ; switch ( org.springframework.data.mongodb.repository.query.Part . shouldIgnoreCase ( ) ) { case ALWAYS : if ( org.springframework.data.mongodb.repository.query.PropertyPath . getType ( ) != java.lang.String .class ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.repository.query.PropertyPath , org.springframework.data.mongodb.repository.query.PropertyPath . getType ( ) ) ) ; } case WHEN_POSSIBLE : if ( boolean ) { org.springframework.data.mongodb.repository.query.Criteria = org.springframework.data.mongodb.repository.query.Criteria . not ( ) ; } return org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Criteria , org.springframework.data.mongodb.repository.query.Part , java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; case NEVER : } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.util.Arrays . java.util.List ( IgnoreCaseType . ALWAYS , IgnoreCaseType . WHEN_POSSIBLE ) , org.springframework.data.mongodb.repository.query.Part . shouldIgnoreCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.Criteria org.springframework.data.mongodb.repository.query.Criteria ( Part org.springframework.data.mongodb.repository.query.Part , MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty , Criteria org.springframework.data.mongodb.repository.query.Criteria , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( org.springframework.data.mongodb.repository.query.MongoPersistentProperty . isCollectionLike ( ) ) { return org.springframework.data.mongodb.repository.query.Criteria . in ( java.lang.Object[] ( java.util.Iterator<java.lang.Object> ) ) ; } return org.springframework.data.mongodb.repository.query.Criteria ( org.springframework.data.mongodb.repository.query.Criteria , org.springframework.data.mongodb.repository.query.Part , java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.Criteria org.springframework.data.mongodb.repository.query.Criteria ( Criteria org.springframework.data.mongodb.repository.query.Criteria , Part org.springframework.data.mongodb.repository.query.Part , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.repository.query.Part . getProperty ( ) . getSegment ( ) ) ) ; } return org.springframework.data.mongodb.repository.query.Criteria . regex ( java.lang.String ( java.lang.Object . java.lang.String ( ) , org.springframework.data.mongodb.repository.query.Part ) , java.lang.String ( org.springframework.data.mongodb.repository.query.Part ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Part org.springframework.data.mongodb.repository.query.Part ) { java.lang.String java.lang.String = null ; switch ( org.springframework.data.mongodb.repository.query.Part . shouldIgnoreCase ( ) ) { case WHEN_POSSIBLE : case ALWAYS : java.lang.String = STRING ; case NEVER : } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( ClassUtils . isAssignable ( java.lang.Class<T> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return ( T ) java.lang.Object ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<T> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.util.Collection ) { return ( ( java.util.Collection<?> < ? > ) java.lang.Object ) . java.lang.Object[] ( ) ; } else if ( java.lang.Object != null && java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return ( java.lang.Object [] ) java.lang.Object ; } return new java.lang.Object [] { java.lang.Object } ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , Part org.springframework.data.mongodb.repository.query.Part ) { return MongoRegexCreator . INSTANCE . toRegularExpression ( java.lang.String , org.springframework.data.mongodb.repository.query.Part . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty ) { java.util.Optional<org.springframework.data.mongodb.repository.query.GeoSpatialIndexed> < GeoSpatialIndexed > java.util.Optional<org.springframework.data.mongodb.repository.query.GeoSpatialIndexed> = org.springframework.data.mongodb.repository.query.MongoPersistentProperty . findAnnotation ( GeoSpatialIndexed .class ) ; return java.util.Optional<org.springframework.data.mongodb.repository.query.GeoSpatialIndexed> . isPresent ( ) && java.util.Optional<org.springframework.data.mongodb.repository.query.GeoSpatialIndexed> . get ( ) . type ( ) . equals ( GeoSpatialIndexType . GEO_2DSPHERE ) ; }  <METHOD_END>
