<METHOD_START> public void ( HttpServletRequest org.springframework.web.util.HttpServletRequest ) { super( org.springframework.web.util.HttpServletRequest ); int int = org.springframework.web.util.HttpServletRequest . getContentLength ( ) ; this . java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( int >= NUMBER ? int : NUMBER ) ; this . java.lang.Integer = null ; }  <METHOD_END>
<METHOD_START> public void ( HttpServletRequest org.springframework.web.util.HttpServletRequest , int int ) { super( org.springframework.web.util.HttpServletRequest ); this . java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( int ) ; this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.util.ServletInputStream org.springframework.web.util.ServletInputStream ( ) java.io.IOException { if ( this . org.springframework.web.util.ServletInputStream == null ) { this . org.springframework.web.util.ServletInputStream = new org.springframework.web.util.ContentCachingRequestWrapper.ContentCachingInputStream ( getRequest ( ) . getInputStream ( ) ) ; } return this . org.springframework.web.util.ServletInputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = super. getCharacterEncoding ( ) ; return ( java.lang.String != null ? java.lang.String : WebUtils . DEFAULT_CHARACTER_ENCODING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.BufferedReader java.io.BufferedReader ( ) java.io.IOException { if ( this . java.io.BufferedReader == null ) { this . java.io.BufferedReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( org.springframework.web.util.ServletInputStream ( ) , java.lang.String ( ) ) ) ; } return this . java.io.BufferedReader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( this . java.io.ByteArrayOutputStream . int ( ) == NUMBER && boolean ( ) ) { void ( ) ; } return super. getParameter ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ( ) { if ( this . java.io.ByteArrayOutputStream . int ( ) == NUMBER && boolean ( ) ) { void ( ) ; } return super. getParameterMap ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { if ( this . java.io.ByteArrayOutputStream . int ( ) == NUMBER && boolean ( ) ) { void ( ) ; } return super. getParameterNames ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { if ( this . java.io.ByteArrayOutputStream . int ( ) == NUMBER && boolean ( ) ) { void ( ) ; } return super. getParameterValues ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { java.lang.String java.lang.String = getContentType ( ) ; return ( java.lang.String != null && java.lang.String . boolean ( java.lang.String ) && HttpMethod . POST . matches ( getMethod ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { if ( this . java.io.ByteArrayOutputStream . int ( ) == NUMBER ) { java.lang.String java.lang.String = java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = super. getParameterMap ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ; ) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String ) ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ; ) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; this . java.io.ByteArrayOutputStream . void ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.lang.String ) . byte[] ( ) ) ; if ( java.lang.String != null ) { this . java.io.ByteArrayOutputStream . void ( '=' ) ; this . java.io.ByteArrayOutputStream . void ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.lang.String ) . byte[] ( ) ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { this . java.io.ByteArrayOutputStream . void ( '&' ) ; } } } if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { this . java.io.ByteArrayOutputStream . void ( '&' ) ; } } } } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return this . java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( int int ) {	}  <METHOD_END>
<METHOD_START> public void ( ServletInputStream org.springframework.web.util.ServletInputStream ) { this . org.springframework.web.util.ServletInputStream = org.springframework.web.util.ServletInputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.io.IOException { int int = this . org.springframework.web.util.ServletInputStream . read ( ) ; if ( int != - NUMBER && ! this . boolean ) { if ( java.lang.Integer != null && java.io.ByteArrayOutputStream . int ( ) == java.lang.Integer ) { this . boolean = true ; void ( java.lang.Integer ) ; } else { java.io.ByteArrayOutputStream . void ( int ) ; } } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.util.ServletInputStream . isFinished ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.util.ServletInputStream . isReady ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ReadListener org.springframework.web.util.ReadListener ) { this . org.springframework.web.util.ServletInputStream . setReadListener ( org.springframework.web.util.ReadListener ) ; }  <METHOD_END>
