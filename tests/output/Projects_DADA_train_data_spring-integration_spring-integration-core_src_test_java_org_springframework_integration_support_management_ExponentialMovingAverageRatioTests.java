<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getCount ( ) ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { long long = NUMBER ; long long = java.lang.System . long ( ) - NUMBER * long * NUMBER ; for ( int int = NUMBER ; int < TestUtils . getPropertyValue ( org.springframework.integration.support.management.ExponentialMovingAverageRatio , STRING , java.lang.Integer .class ) ; int ++ ) { org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( long ) ; } final java.util.Deque<java.lang.Long> < java.lang.Long > java.util.Deque<java.lang.Long> = TestUtils . getPropertyValue ( org.springframework.integration.support.management.ExponentialMovingAverageRatio , STRING , java.util.Deque .class ) ; assertEquals ( java.lang.Long . java.lang.Long ( long ) , java.util.Deque<java.lang.Long> . java.lang.Long ( ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( long ) , java.util.Deque<java.lang.Long> . java.lang.Long ( ) ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( java.lang.System . long ( ) - long * NUMBER ) ; assertNotEquals ( java.util.Deque<java.lang.Long> . java.lang.Long ( ) , java.util.Deque<java.lang.Long> . java.lang.Long ( ) ) ; double double = org.springframework.integration.support.management.ExponentialMovingAverageRatio . getTimeSinceLastMeasurement ( ) ; assertThat ( double , Matchers . greaterThan ( ( double ) ( long / NUMBER ) ) ) ; assertThat ( double , Matchers . lessThanOrEqualTo ( NUMBER * long / NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( java.lang.System . long ( ) - NUMBER ) ; assertEquals ( double ( NUMBER , java.lang.Math . double ( - NUMBER ) ) , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; double double = org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) ; Statistics org.springframework.integration.support.management.Statistics = org.springframework.integration.support.management.ExponentialMovingAverageRatio . getStatistics ( ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , greaterThan ( double ) ) ; assertThat ( org.springframework.integration.support.management.ExponentialMovingAverageRatio . getStatistics ( ) . getMean ( ) , greaterThan ( org.springframework.integration.support.management.Statistics . getMean ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( double ( NUMBER ) , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; assertEquals ( double ( NUMBER , NUMBER ) , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( double ( NUMBER , NUMBER , NUMBER ) , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; assertEquals ( double ( NUMBER ) , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; assertEquals ( double ( NUMBER , NUMBER ) , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( double ( NUMBER , NUMBER , NUMBER ) , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getStandardDeviation ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getStandardDeviation ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getStandardDeviation ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; assertThat ( org.springframework.integration.support.management.ExponentialMovingAverageRatio . getStandardDeviation ( ) , not ( equalTo ( NUMBER ) ) ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . reset ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getStandardDeviation ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getTimeSinceLastMeasurement ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMin ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMax ( ) , NUMBER ) ; org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMin ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private double double ( double ... double[] ) { int int = NUMBER ; double double = NUMBER ; for ( double double : double[] ) { double += double ; int ++ ; } return double / int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExponentialMovingAverageRatio org.springframework.integration.support.management.ExponentialMovingAverageRatio = new ExponentialMovingAverageRatio ( NUMBER , NUMBER , true ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { if ( int % NUMBER == NUMBER ) { org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; } else { org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; } } assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMax ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { ExponentialMovingAverageRatio org.springframework.integration.support.management.ExponentialMovingAverageRatio = new ExponentialMovingAverageRatio ( NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { if ( int % NUMBER == NUMBER ) { org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( ) ; } else { org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( ) ; } } }  <METHOD_END>
