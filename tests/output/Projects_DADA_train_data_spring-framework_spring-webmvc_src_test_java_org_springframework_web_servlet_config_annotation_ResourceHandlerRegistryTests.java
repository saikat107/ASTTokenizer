<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry = new ResourceHandlerRegistry ( new GenericWebApplicationContext ( ) , new MockServletContext ( ) ) ; this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration = org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . addResourceHandler ( STRING ) ; this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . addResourceLocations ( STRING ) ; this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry = new ResourceHandlerRegistry ( new GenericWebApplicationContext ( ) , new MockServletContext ( ) ) ; assertNull ( this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . getHandlerMapping ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.config.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) ; org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . handleRequest ( org.springframework.web.servlet.config.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( - NUMBER , org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) . getCacheSeconds ( ) ) ; this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . setCachePeriod ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) . getCacheSeconds ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) . getCacheControl ( ) , Matchers . nullValue ( ) ) ; this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . setCacheControl ( CacheControl . noCache ( ) . cachePrivate ( ) ) ; assertThat ( org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) . getCacheControl ( ) . getHeaderValue ( ) , Matchers . equalTo ( CacheControl . noCache ( ) . cachePrivate ( ) . getHeaderValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Integer . int - NUMBER , org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . getHandlerMapping ( ) . getOrder ( ) ) ; org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . setOrder ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . getHandlerMapping ( ) . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . hasMappingForPattern ( STRING ) ) ; assertFalse ( this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . hasMappingForPattern ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResourceResolver org.springframework.web.servlet.config.annotation.ResourceResolver = Mockito . mock ( ResourceResolver .class ) ; ResourceTransformer org.springframework.web.servlet.config.annotation.ResourceTransformer = Mockito . mock ( ResourceTransformer .class ) ; this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . resourceChain ( true ) . addResolver ( org.springframework.web.servlet.config.annotation.ResourceResolver ) . addTransformer ( org.springframework.web.servlet.config.annotation.ResourceTransformer ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . toString ( ) , java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceResolver .class ) ) ; CachingResourceResolver org.springframework.web.servlet.config.annotation.CachingResourceResolver = ( CachingResourceResolver ) java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.servlet.config.annotation.CachingResourceResolver . getCache ( ) , Matchers . instanceOf ( ConcurrentMapCache .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . equalTo ( org.springframework.web.servlet.config.annotation.ResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( WebJarsResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . equalTo ( org.springframework.web.servlet.config.annotation.ResourceTransformer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . resourceChain ( false ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( WebJarsResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { VersionResourceResolver org.springframework.web.servlet.config.annotation.VersionResourceResolver = new VersionResourceResolver ( ) . addFixedVersionStrategy ( STRING , STRING STRING ) . addContentVersionStrategy ( STRING ) ; this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . resourceChain ( true ) . addResolver ( org.springframework.web.servlet.config.annotation.VersionResourceResolver ) . addTransformer ( new AppCacheManifestTransformer ( ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . toString ( ) , java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.VersionResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( WebJarsResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CssLinkResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( AppCacheManifestTransformer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CachingResourceResolver org.springframework.web.servlet.config.annotation.CachingResourceResolver = Mockito . mock ( CachingResourceResolver .class ) ; VersionResourceResolver org.springframework.web.servlet.config.annotation.VersionResourceResolver = Mockito . mock ( VersionResourceResolver .class ) ; WebJarsResourceResolver org.springframework.web.servlet.config.annotation.WebJarsResourceResolver = Mockito . mock ( WebJarsResourceResolver .class ) ; PathResourceResolver org.springframework.web.servlet.config.annotation.PathResourceResolver = new PathResourceResolver ( ) ; CachingResourceTransformer org.springframework.web.servlet.config.annotation.CachingResourceTransformer = Mockito . mock ( CachingResourceTransformer .class ) ; AppCacheManifestTransformer org.springframework.web.servlet.config.annotation.AppCacheManifestTransformer = Mockito . mock ( AppCacheManifestTransformer .class ) ; CssLinkResourceTransformer org.springframework.web.servlet.config.annotation.CssLinkResourceTransformer = new CssLinkResourceTransformer ( ) ; this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration . setCachePeriod ( NUMBER ) . resourceChain ( false ) . addResolver ( org.springframework.web.servlet.config.annotation.CachingResourceResolver ) . addResolver ( org.springframework.web.servlet.config.annotation.VersionResourceResolver ) . addResolver ( org.springframework.web.servlet.config.annotation.WebJarsResourceResolver ) . addResolver ( org.springframework.web.servlet.config.annotation.PathResourceResolver ) . addTransformer ( org.springframework.web.servlet.config.annotation.CachingResourceTransformer ) . addTransformer ( org.springframework.web.servlet.config.annotation.AppCacheManifestTransformer ) . addTransformer ( org.springframework.web.servlet.config.annotation.CssLinkResourceTransformer ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( STRING ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . toString ( ) , java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.CachingResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.VersionResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.WebJarsResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.PathResourceResolver ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> = org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.CachingResourceTransformer ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.AppCacheManifestTransformer ) ) ; assertThat ( java.util.List<org.springframework.web.servlet.config.annotation.ResourceTransformer> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.servlet.config.annotation.CssLinkResourceTransformer ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ( java.lang.String java.lang.String ) { SimpleUrlHandlerMapping org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) this . org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . getHandlerMapping ( ) ; return ( ResourceHttpRequestHandler ) org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( java.lang.String ) ; }  <METHOD_END>
