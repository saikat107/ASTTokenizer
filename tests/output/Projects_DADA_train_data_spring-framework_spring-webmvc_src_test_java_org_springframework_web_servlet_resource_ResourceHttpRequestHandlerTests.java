<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.List<org.springframework.web.servlet.resource.Resource> < Resource > java.util.List<org.springframework.web.servlet.resource.Resource> = new java.util.ArrayList<org.springframework.web.servlet.resource.Resource> <> ( NUMBER ) ; java.util.List<org.springframework.web.servlet.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ) ; java.util.List<org.springframework.web.servlet.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ) ; java.util.List<org.springframework.web.servlet.resource.Resource> . add ( new ClassPathResource ( STRING ) ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler = new ResourceHttpRequestHandler ( ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.List<org.springframework.web.servlet.resource.Resource> ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setCacheSeconds ( NUMBER ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setServletContext ( new org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.TestServletContext ( ) ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertEquals ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) , java.lang.String ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertEquals ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) , java.lang.String ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsByteArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setCacheSeconds ( NUMBER ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertEquals ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) , java.lang.String ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { VersionResourceResolver org.springframework.web.servlet.resource.VersionResourceResolver = new VersionResourceResolver ( ) . addFixedVersionStrategy ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setResourceResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.VersionResourceResolver , new PathResourceResolver ( ) ) ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setCacheSeconds ( NUMBER ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setUseExpiresHeader ( true ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setUseCacheControlHeader ( true ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setAlwaysMustRevalidate ( true ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( long ( STRING ) >= java.lang.System . long ( ) - NUMBER + ( NUMBER * NUMBER ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertEquals ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) , java.lang.String ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setCacheSeconds ( NUMBER ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setUseExpiresHeader ( true ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setUseCacheControlNoStore ( false ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setUseCacheControlHeader ( true ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertThat ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaderValues ( STRING ) , Matchers . iterableWithSize ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( long ( STRING ) <= java.lang.System . long ( ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertEquals ( long ( STRING ) / NUMBER , long ( STRING ) / NUMBER ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertEquals ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) , java.lang.String ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertEquals ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) , java.lang.String ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean . addMediaType ( STRING , new MediaType ( STRING , STRING ) ) ; org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.servlet.resource.ContentNegotiationManager = org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean . getObject ( ) ; java.util.List<org.springframework.web.servlet.resource.Resource> < Resource > java.util.List<org.springframework.web.servlet.resource.Resource> = java.util.Collections . java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.resource.ResourceHttpRequestHandler = new ResourceHttpRequestHandler ( ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.List<org.springframework.web.servlet.resource.Resource> ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setContentNegotiationManager ( org.springframework.web.servlet.resource.ContentNegotiationManager ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean . setFavorPathExtension ( false ) ; org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.servlet.resource.ContentNegotiationManager = org.springframework.web.servlet.resource.ContentNegotiationManagerFactoryBean . getObject ( ) ; java.util.List<org.springframework.web.servlet.resource.Resource> < Resource > java.util.List<org.springframework.web.servlet.resource.Resource> = java.util.Collections . java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.resource.ResourceHttpRequestHandler = new ResourceHttpRequestHandler ( ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.List<org.springframework.web.servlet.resource.Resource> ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setContentNegotiationManager ( org.springframework.web.servlet.resource.ContentNegotiationManager ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.resource.MockServletContext = new MockServletContext ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } } ; java.util.List<org.springframework.web.servlet.resource.Resource> < Resource > java.util.List<org.springframework.web.servlet.resource.Resource> = java.util.Collections . java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.resource.ResourceHttpRequestHandler = new ResourceHttpRequestHandler ( ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setServletContext ( org.springframework.web.servlet.resource.MockServletContext ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.List<org.springframework.web.servlet.resource.Resource> ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( HttpMethod org.springframework.web.servlet.resource.HttpMethod : HttpMethod . values ( ) ) { this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletResponse = new MockHttpServletResponse ( ) ; void ( org.springframework.web.servlet.resource.HttpMethod ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpMethod org.springframework.web.servlet.resource.HttpMethod ) throws java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setMethod ( org.springframework.web.servlet.resource.HttpMethod . name ( ) ) ; Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.Collections . java.util.List ( org.springframework.web.servlet.resource.Resource ) ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; org.springframework.web.servlet.resource.Resource = new UrlResource ( java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) . java.net.URL ( STRING ) ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.Collections . java.util.List ( org.springframework.web.servlet.resource.Resource ) ) ; Resource org.springframework.web.servlet.resource.Resource = new UrlResource ( java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) . java.net.URL ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.web.servlet.resource.Resource . getURL ( ) . getPath ( ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( Resource org.springframework.web.servlet.resource.Resource , java.lang.String java.lang.String ) throws java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , java.lang.String ) ; this . org.springframework.web.servlet.resource.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; if ( ! org.springframework.web.servlet.resource.Resource . createRelative ( java.lang.String ) . exists ( ) && ! java.lang.String . boolean ( STRING ) ) { fail ( java.lang.String + STRING ) ; } assertEquals ( HttpStatus . NOT_FOUND . value ( ) , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertSame ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( ( char ) NUMBER + STRING + ( char ) NUMBER + STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . processPath ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PathResourceResolver org.springframework.web.servlet.resource.PathResourceResolver = ( PathResourceResolver ) this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . getResourceResolvers ( ) . get ( NUMBER ) ; Resource [] org.springframework.web.servlet.resource.Resource[] = org.springframework.web.servlet.resource.PathResourceResolver . getAllowedLocations ( ) ; assertEquals ( NUMBER , locations . length ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.servlet.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.servlet.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.servlet.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.web.servlet.resource.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ; ClassPathResource org.springframework.web.servlet.resource.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) ; PathResourceResolver org.springframework.web.servlet.resource.PathResourceResolver = new PathResourceResolver ( ) ; org.springframework.web.servlet.resource.PathResourceResolver . setAllowedLocations ( org.springframework.web.servlet.resource.ClassPathResource ) ; ResourceHttpRequestHandler org.springframework.web.servlet.resource.ResourceHttpRequestHandler = new ResourceHttpRequestHandler ( ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setResourceResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.resource.PathResourceResolver ) ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.ClassPathResource , org.springframework.web.servlet.resource.ClassPathResource ) ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . afterPropertiesSet ( ) ; Resource [] org.springframework.web.servlet.resource.Resource[] = org.springframework.web.servlet.resource.PathResourceResolver . getAllowedLocations ( ) ; assertEquals ( NUMBER , locations . length ) ; assertEquals ( STRING , ( ( ClassPathResource ) org.springframework.web.servlet.resource.Resource[] [ NUMBER ] ) . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , long ( STRING ) ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( HttpServletResponse . SC_NOT_MODIFIED , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , long ( STRING ) / NUMBER * NUMBER - NUMBER ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( HttpServletResponse . SC_OK , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpRequestMethodNotSupportedException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( HttpMethod org.springframework.web.servlet.resource.HttpMethod : HttpMethod . values ( ) ) { this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletResponse = new MockHttpServletResponse ( ) ; void ( org.springframework.web.servlet.resource.HttpMethod ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpMethod org.springframework.web.servlet.resource.HttpMethod ) throws java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setMethod ( org.springframework.web.servlet.resource.HttpMethod . name ( ) ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( HttpStatus . NOT_FOUND . value ( ) , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getStatus ( ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) . startsWith ( STRING ) ) ; java.lang.String java.lang.String = STRING + this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentType ( ) . substring ( NUMBER ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.resource.MockHttpServletResponse . getContentAsString ( ) ; java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING , false , true ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletResponse . setHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.ResourceHttpRequestHandler . handleRequest ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String ) throws java.lang.Exception { return java.text.SimpleDateFormat . java.util.Date ( this . org.springframework.web.servlet.resource.MockHttpServletResponse . getHeader ( java.lang.String ) ) . getTime ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String ) throws java.io.IOException { return new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) . getFile ( ) . lastModified ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.io.IOException { long long = new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests> ( ) ) . getFile ( ) . lastModified ( ) ; return java.text.SimpleDateFormat . java.lang.String ( long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { return STRING ; } else if ( java.lang.String . boolean ( STRING ) ) { return STRING ; } else { return super. getMimeType ( java.lang.String ) ; } }  <METHOD_END>
