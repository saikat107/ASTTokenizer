<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.reflect.Method , STRING ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.util.AnnotationMappingDiscoverer . getMapping ( java.lang.reflect.Method ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new org . springframework . org.springframework.web . org.springframework.web . org.springframework.web ( java.lang.String ) . match ( java.lang.String ) ; java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } return null ; }  <METHOD_END>
<METHOD_START> public static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.util.AnnotationMappingDiscoverer . getMapping ( java.lang.reflect.Method . java.lang.Class<?> ( ) , java.lang.reflect.Method ) ; return UriComponentsBuilder . fromPath ( java.lang.String ) . build ( ) . getPathSegments ( ) ; }  <METHOD_END>
