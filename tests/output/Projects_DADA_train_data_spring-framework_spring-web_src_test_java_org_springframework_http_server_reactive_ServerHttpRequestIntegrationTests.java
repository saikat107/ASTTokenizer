<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.ServerHttpRequestIntegrationTests.CheckRequestHandler org.springframework.http.server.reactive.ServerHttpRequestIntegrationTests.CheckRequestHandler ( ) { return new org.springframework.http.server.reactive.ServerHttpRequestIntegrationTests.CheckRequestHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + port + STRING ) ; RequestEntity < java.lang.Void > org.springframework.http.server.reactive.RequestEntity<java.lang.Void> = RequestEntity . post ( java.net.URI ) . build ( ) ; ResponseEntity < java.lang.Void > org.springframework.http.server.reactive.ResponseEntity<java.lang.Void> = new RestTemplate ( ) . exchange ( org.springframework.http.server.reactive.RequestEntity<java.lang.Void> , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.http.server.reactive.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest , ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ) { java.net.URI java.net.URI = org.springframework.http.server.reactive.ServerHttpRequest . getURI ( ) ; assertNotNull ( java.net.URI . java.lang.String ( ) ) ; assertNotEquals ( - NUMBER , java.net.URI . int ( ) ) ; assertNotNull ( org.springframework.http.server.reactive.ServerHttpRequest . getRemoteAddress ( ) ) ; assertEquals ( STRING , java.net.URI . java.lang.String ( ) ) ; assertEquals ( STRING , java.net.URI . java.lang.String ( ) ) ; return Mono . empty ( ) ; }  <METHOD_END>
