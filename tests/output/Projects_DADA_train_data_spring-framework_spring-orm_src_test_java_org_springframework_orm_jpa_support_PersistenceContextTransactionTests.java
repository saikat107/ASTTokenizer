<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.orm.jpa.support.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; org.springframework.orm.jpa.support.EntityTransaction = mock ( EntityTransaction .class ) ; JpaTransactionManager org.springframework.orm.jpa.support.JpaTransactionManager = new JpaTransactionManager ( org.springframework.orm.jpa.support.EntityManagerFactory ) ; org.springframework.orm.jpa.support.TransactionTemplate = new TransactionTemplate ( org.springframework.orm.jpa.support.JpaTransactionManager ) ; given ( org.springframework.orm.jpa.support.EntityManagerFactory . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; given ( org.springframework.orm.jpa.support.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityTransaction ) ; given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.support.PersistenceContextTransactionTests.EntityManagerHoldingBean = new org.springframework.orm.jpa.support.PersistenceContextTransactionTests.EntityManagerHoldingBean ( ) ; @ java.lang.SuppressWarnings ( STRING ) PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) { @ java.lang.Override protected org.springframework.orm.jpa.support.EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.orm.jpa.support.EntityManagerFactory ; } } ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceContextTransactionTests.EntityManagerHoldingBean , STRING ) ; assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.orm.jpa.support.EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.orm.jpa.support.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityTransaction ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . sharedEntityManager . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.support.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . sharedEntityManager . clear ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . clear ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityTransaction ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . extendedEntityManager . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityTransaction , times ( NUMBER ) ) . commit ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.support.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . extendedEntityManager . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityTransaction ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . sharedEntityManagerUnsynchronized . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.support.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . sharedEntityManagerUnsynchronized . clear ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . clear ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityTransaction ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . extendedEntityManagerUnsynchronized . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.support.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . extendedEntityManagerUnsynchronized . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityTransaction ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . sharedEntityManagerUnsynchronized . joinTransaction ( ) ; bean . sharedEntityManagerUnsynchronized . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityTransaction ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . extendedEntityManagerUnsynchronized . joinTransaction ( ) ; bean . extendedEntityManagerUnsynchronized . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityTransaction , times ( NUMBER ) ) . commit ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.support.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; org.springframework.orm.jpa.support.TransactionTemplate . execute ( status -> { bean . extendedEntityManagerUnsynchronized . joinTransaction ( ) ; bean . extendedEntityManagerUnsynchronized . flush ( ) ; return null ; } ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; }  <METHOD_END>
