<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; assertEquals ( STRING , org.springframework.messaging.handler.DestinationPatternsMessageCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = new DestinationPatternsMessageCondition ( new java.lang.String [] { STRING } , new AntPathMatcher ( STRING ) ) ; assertEquals ( STRING , STRING , org.springframework.messaging.handler.DestinationPatternsMessageCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; assertEquals ( STRING , org.springframework.messaging.handler.DestinationPatternsMessageCondition . getPatterns ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( ) ; assertEquals ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) , org.springframework.messaging.handler.DestinationPatternsMessageCondition . combine ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( ) ; assertEquals ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) , org.springframework.messaging.handler.DestinationPatternsMessageCondition . combine ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ) ) ; org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( ) ; org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) ; assertEquals ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) , org.springframework.messaging.handler.DestinationPatternsMessageCondition . combine ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) ; assertEquals ( new DestinationPatternsMessageCondition ( STRING , STRING , STRING , STRING ) , org.springframework.messaging.handler.DestinationPatternsMessageCondition . combine ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition . getMatchingCondition ( org.springframework.messaging.handler.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition . getMatchingCondition ( org.springframework.messaging.handler.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.handler.DestinationPatternsMessageCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING , STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition . getMatchingCondition ( org.springframework.messaging.handler.Message<?> ( STRING ) ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING , STRING ) ; assertEquals ( org.springframework.messaging.handler.DestinationPatternsMessageCondition , org.springframework.messaging.handler.DestinationPatternsMessageCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; assertEquals ( NUMBER , org.springframework.messaging.handler.DestinationPatternsMessageCondition . compareTo ( org.springframework.messaging.handler.DestinationPatternsMessageCondition , org.springframework.messaging.handler.Message<?> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING ) ; assertEquals ( NUMBER , org.springframework.messaging.handler.DestinationPatternsMessageCondition . compareTo ( org.springframework.messaging.handler.DestinationPatternsMessageCondition , org.springframework.messaging.handler.Message<?> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.Message<?> = org.springframework.messaging.handler.Message<?> ( STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition ( STRING , STRING ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition . getMatchingCondition ( org.springframework.messaging.handler.Message<> ) ; DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition = org.springframework.messaging.handler.DestinationPatternsMessageCondition . getMatchingCondition ( org.springframework.messaging.handler.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.handler.DestinationPatternsMessageCondition . compareTo ( org.springframework.messaging.handler.DestinationPatternsMessageCondition , org.springframework.messaging.handler.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.handler.DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition ( java.lang.String ... java.lang.String[] ) { return new DestinationPatternsMessageCondition ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.handler.Message<?> < ? > org.springframework.messaging.handler.Message<?> ( java.lang.String java.lang.String ) { return MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeader ( DestinationPatternsMessageCondition . LOOKUP_DESTINATION_HEADER , java.lang.String ) . build ( ) ; }  <METHOD_END>
