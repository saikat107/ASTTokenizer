<METHOD_START> public void ( LdapOperations org.springframework.data.ldap.repository.support.LdapOperations , ObjectDirectoryMapper org.springframework.data.ldap.repository.support.ObjectDirectoryMapper , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.data.ldap.repository.support.LdapOperations , STRING ) ; Assert . notNull ( org.springframework.data.ldap.repository.support.ObjectDirectoryMapper , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; this . org.springframework.data.ldap.repository.support.LdapOperations = org.springframework.data.ldap.repository.support.LdapOperations ; this . org.springframework.data.ldap.repository.support.ObjectDirectoryMapper = org.springframework.data.ldap.repository.support.ObjectDirectoryMapper ; this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.ObjectDirectoryMapper . filterFor ( java.lang.Class<T> , null ) ; CountNameClassPairCallbackHandler org.springframework.data.ldap.repository.support.CountNameClassPairCallbackHandler = new CountNameClassPairCallbackHandler ( ) ; LdapQuery org.springframework.data.ldap.repository.support.LdapQuery = query ( ) . attributes ( java.lang.String ) . filter ( org.springframework.data.ldap.repository.support.Filter ) ; org.springframework.data.ldap.repository.support.LdapOperations . search ( org.springframework.data.ldap.repository.support.LdapQuery , org.springframework.data.ldap.repository.support.CountNameClassPairCallbackHandler ) ; return org.springframework.data.ldap.repository.support.CountNameClassPairCallbackHandler . getNoOfRows ( ) ; }  <METHOD_END>
<METHOD_START> private < S extends T > boolean boolean ( S S , javax.naming.Name javax.naming.Name ) { if ( S instanceof Persistable ) { Persistable < ? > org.springframework.data.ldap.repository.support.Persistable<?> = ( Persistable < ? > ) S ; return org.springframework.data.ldap.repository.support.Persistable<> . isNew ( ) ; } else { return javax.naming.Name == null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > S S ( S S ) { Assert . notNull ( S , STRING ) ; javax.naming.Name javax.naming.Name = org.springframework.data.ldap.repository.support.ObjectDirectoryMapper . getId ( S ) ; if ( boolean ( S , javax.naming.Name ) ) { org.springframework.data.ldap.repository.support.LdapOperations . create ( S ) ; } else { org.springframework.data.ldap.repository.support.LdapOperations . update ( S ) ; } return S ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.lang.Iterable<S> < S > java.lang.Iterable<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { return java.util.stream.StreamSupport . java.util.stream.Stream<S> ( java.lang.Iterable<S> . java.util.Spliterator<S> ( ) , false ) . java.util.stream.Stream<S> ( this :: S ) . java.util.List<S> ( java.util.stream.Collectors . java.util.stream.Collector<S,?,java.util.List<S>> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<T> < T > java.util.Optional<T> ( javax.naming.Name javax.naming.Name ) { Assert . notNull ( javax.naming.Name , STRING ) ; try { return java.util.Optional . java.util.Optional ( org.springframework.data.ldap.repository.support.LdapOperations . findByDn ( javax.naming.Name , java.lang.Class<T> ) ) ; } catch ( NameNotFoundException org.springframework.data.ldap.repository.support.NameNotFoundException ) { return java.util.Optional . java.util.Optional<T> ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( LdapQuery org.springframework.data.ldap.repository.support.LdapQuery ) { Assert . notNull ( org.springframework.data.ldap.repository.support.LdapQuery , STRING ) ; return org.springframework.data.ldap.repository.support.LdapOperations . find ( org.springframework.data.ldap.repository.support.LdapQuery , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<T> < T > java.util.Optional<T> ( LdapQuery org.springframework.data.ldap.repository.support.LdapQuery ) { Assert . notNull ( org.springframework.data.ldap.repository.support.LdapQuery , STRING ) ; try { return java.util.Optional . java.util.Optional ( org.springframework.data.ldap.repository.support.LdapOperations . findOne ( org.springframework.data.ldap.repository.support.LdapQuery , java.lang.Class<T> ) ) ; } catch ( EmptyResultDataAccessException org.springframework.data.ldap.repository.support.EmptyResultDataAccessException ) { return java.util.Optional . java.util.Optional<T> ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( javax.naming.Name javax.naming.Name ) { Assert . notNull ( javax.naming.Name , STRING ) ; return java.util.Optional<T> ( javax.naming.Name ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( ) { return org.springframework.data.ldap.repository.support.LdapOperations . findAll ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( final java.lang.Iterable<javax.naming.Name> < javax.naming.Name > java.lang.Iterable<javax.naming.Name> ) { return java.util.stream.StreamSupport . java.util.stream.Stream<javax.naming.Name> ( java.lang.Iterable<javax.naming.Name> . java.util.Spliterator<javax.naming.Name> ( ) , false ) . java.util.stream.Stream<java.util.Optional<T>> ( this :: java.util.Optional<T> ) . java.util.stream.Stream ( Optionals :: toStream ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.naming.Name javax.naming.Name ) { Assert . notNull ( javax.naming.Name , STRING ) ; org.springframework.data.ldap.repository.support.LdapOperations . unbind ( javax.naming.Name ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( T T ) { Assert . notNull ( T , STRING ) ; org.springframework.data.ldap.repository.support.LdapOperations . delete ( T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { java.lang.Iterable<> . void ( this :: void ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( java.util.List<T> ( ) ) ; }  <METHOD_END>
