<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( STRING , int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = getLeftOperand ( ) ; SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = getRightOperand ( ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; if ( java.lang.Object instanceof java.lang.Number && java.lang.Object instanceof java.lang.Number ) { java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; if ( java.lang.Number instanceof java.math.BigDecimal ) { java.math.BigDecimal java.math.BigDecimal = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigDecimal .class ) ; return new TypedValue ( java.math.BigDecimal . java.math.BigDecimal ( java.lang.Number . int ( ) ) ) ; } else if ( java.lang.Number instanceof java.math.BigInteger ) { java.math.BigInteger java.math.BigInteger = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigInteger .class ) ; return new TypedValue ( java.math.BigInteger . java.math.BigInteger ( java.lang.Number . int ( ) ) ) ; } else if ( java.lang.Number instanceof java.lang.Double || java.lang.Number instanceof java.lang.Double ) { return new TypedValue ( java.lang.Math . double ( java.lang.Number . double ( ) , java.lang.Number . double ( ) ) ) ; } else if ( java.lang.Number instanceof java.lang.Float || java.lang.Number instanceof java.lang.Float ) { return new TypedValue ( java.lang.Math . double ( java.lang.Number . float ( ) , java.lang.Number . float ( ) ) ) ; } double double = java.lang.Math . double ( java.lang.Number . double ( ) , java.lang.Number . double ( ) ) ; if ( double > java.lang.Integer . int || java.lang.Number instanceof java.lang.Long || java.lang.Number instanceof java.lang.Long ) { return new TypedValue ( ( long ) double ) ; } else { return new TypedValue ( ( int ) double ) ; } } return org.springframework.expression.spel.ast.ExpressionState . operate ( Operation . POWER , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
