<METHOD_START> @ BeforeClass public static void void ( ) { RequestMappingHandlerAdapter org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter = new RequestMappingHandlerAdapter ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setApplicationContext ( new StaticWebApplicationContext ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; int = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getArgumentResolvers ( ) . size ( ) ; int = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getInitBinderArgumentResolvers ( ) . size ( ) ; int = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getReturnValueHandlers ( ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter = new RequestMappingHandlerAdapter ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setApplicationContext ( this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SimpleController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setCacheSeconds ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SessionAttributeController org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SessionAttributeController = new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SessionAttributeController ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setCacheSeconds ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SessionAttributeController , STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolver org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver = new RedirectAttributesMethodArgumentResolver ( ) ; HandlerMethodArgumentResolver org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver = new ModelMethodProcessor ( ) ; HandlerMethodReturnValueHandler org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler = new ViewNameMethodReturnValueHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setArgumentResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver , org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setReturnValueHandlers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setIgnoreDefaultModelOnRedirect ( true ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( DispatcherServlet . OUTPUT_FLASH_MAP_ATTRIBUTE , new FlashMap ( ) ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.RedirectAttributeController ( ) , STRING , Model .class ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolver org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver = new ServletRequestMethodArgumentResolver ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setCustomArgumentResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getArgumentResolvers ( ) . contains ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; void ( int + NUMBER , int + NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolver org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver = new ServletRequestMethodArgumentResolver ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setArgumentResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; void ( NUMBER , int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolver org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver = new ServletRequestMethodArgumentResolver ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setInitBinderArgumentResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; void ( int , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HandlerMethodReturnValueHandler org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler = new ViewNameMethodReturnValueHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setCustomReturnValueHandlers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getReturnValueHandlers ( ) . contains ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler ) ) ; void ( int , int , int + NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HandlerMethodReturnValueHandler org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler = new ModelMethodProcessor ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setReturnValueHandlers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; void ( int , int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.ModelAttributeAdvice .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SimpleController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.ModelAttributeAdvice .class ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . setParent ( org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SimpleController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.ModelAttributePackageAdvice .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.ModelAttributeNotUsedPackageAdvice .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SimpleController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; assertEquals ( null , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setMessageConverters ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.ResponseCodeSuppressingAdvice .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , MediaType . APPLICATION_JSON_VALUE ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setParameter ( STRING , STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SimpleController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setMessageConverters ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.JsonpAdvice .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; void ( STRING , true ) ; void ( STRING , true ) ; void ( STRING , true ) ; void ( STRING , true ) ; void ( STRING , false ) ; void ( STRING , false ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; return new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , int int , int int ) { assertEquals ( int , this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getArgumentResolvers ( ) . size ( ) ) ; assertEquals ( int , this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getInitBinderArgumentResolvers ( ) . size ( ) ) ; assertEquals ( int , this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . getReturnValueHandlers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , boolean boolean ) throws java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , MediaType . APPLICATION_JSON_VALUE ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setParameter ( STRING , java.lang.String ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.SimpleController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; if ( boolean ) { assertEquals ( STRING STRING + java.lang.String + STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; } else { assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.util.Map<java.lang.String,java.lang.String>> ( ) { return new ResponseEntity <> ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( ) { return new ResponseEntity <> ( STRING , HttpStatus . BAD_REQUEST ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ModelAttribute public void void ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ModelAttribute public void void ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ModelAttribute public void void ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override protected void void ( MappingJacksonValue org.springframework.web.servlet.mvc.method.annotation.MappingJacksonValue , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) { int int = ( ( ServletServerHttpResponse ) org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) . getServletResponse ( ) . getStatus ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . setStatusCode ( HttpStatus . OK ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.mvc.method.annotation.MappingJacksonValue . getValue ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MappingJacksonValue . setValue ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
