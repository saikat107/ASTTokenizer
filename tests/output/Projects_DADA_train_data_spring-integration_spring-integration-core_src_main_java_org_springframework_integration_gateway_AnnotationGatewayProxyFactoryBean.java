<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> ); this . org.springframework.integration.gateway.AnnotationAttributes = AnnotatedElementUtils . getMergedAnnotationAttributes ( java.lang.Class<> , MessagingGateway .class . java.lang.String ( ) , false , true ) ; Assert . notNull ( this . org.springframework.integration.gateway.AnnotationAttributes , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { ConfigurableListableBeanFactory org.springframework.integration.gateway.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) getBeanFactory ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > [] java.util.Map<java.lang.String,java.lang.Object>[] = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > [] ) this . org.springframework.integration.gateway.AnnotationAttributes . get ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; Assert . state ( ! boolean || ! boolean , STRING ) ; boolean boolean = ! ObjectUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.Object>[] ) ; Assert . state ( ! boolean || ! boolean , STRING ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; setDefaultRequestChannelName ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; setDefaultReplyChannelName ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; setErrorChannelName ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; if ( java.lang.String == null || AnnotationConstants . NULL . equals ( java.lang.String ) ) { setAsyncExecutor ( null ) ; } else if ( StringUtils . hasText ( java.lang.String ) ) { setAsyncExecutor ( org.springframework.integration.gateway.ConfigurableListableBeanFactory . getBean ( java.lang.String , java.util.concurrent.Executor .class ) ) ; } if ( boolean || boolean ) { GatewayMethodMetadata org.springframework.integration.gateway.GatewayMethodMetadata = new GatewayMethodMetadata ( ) ; if ( boolean ) { org.springframework.integration.gateway.GatewayMethodMetadata . setPayloadExpression ( java.lang.String ) ; } java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> = new java.util.HashMap<java.lang.String,org.springframework.integration.gateway.Expression> <> ( ) ; for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object>[] ) { java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; Assert . state ( ! ( boolean == StringUtils . hasText ( java.lang.String ) ) , STRING ) ; Expression org.springframework.integration.gateway.Expression = boolean ? new LiteralExpression ( java.lang.String ) : EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> . put ( java.lang.String , org.springframework.integration.gateway.Expression ) ; } org.springframework.integration.gateway.GatewayMethodMetadata . setHeaderExpressions ( java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ) ; setGlobalMethodMetadata ( org.springframework.integration.gateway.GatewayMethodMetadata ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { setMapper ( org.springframework.integration.gateway.ConfigurableListableBeanFactory . getBean ( java.lang.String , MethodArgsMessageMapper .class ) ) ; } java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; setDefaultRequestTimeout ( java.lang.Long . long ( java.lang.String ) ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.ConfigurableListableBeanFactory . resolveEmbeddedValue ( this . org.springframework.integration.gateway.AnnotationAttributes . getString ( STRING ) ) ; setDefaultReplyTimeout ( java.lang.Long . long ( java.lang.String ) ) ; super. onInit ( ) ; }  <METHOD_END>
