<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { GeoResult < java.lang.Object > org.springframework.data.geo.GeoResult<java.lang.Object> = new GeoResult <> ( new java.lang.Object ( ) , new Distance ( NUMBER ) ) ; GeoResult < java.lang.Object > org.springframework.data.geo.GeoResult<java.lang.Object> = new GeoResult <> ( new java.lang.Object ( ) , new Distance ( NUMBER ) ) ; GeoResults < java.lang.Object > org.springframework.data.geo.GeoResults<java.lang.Object> = new GeoResults <> ( java.util.Arrays . java.util.List ( org.springframework.data.geo.GeoResult<java.lang.Object> , org.springframework.data.geo.GeoResult<java.lang.Object> ) ) ; assertThat ( org.springframework.data.geo.GeoResults<java.lang.Object> . getAverageDistance ( ) ) . isEqualTo ( new Distance ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GeoResult < java.lang.String > org.springframework.data.geo.GeoResult<java.lang.String> = new GeoResult <> ( STRING , new Distance ( NUMBER ) ) ; GeoResults < java.lang.String > org.springframework.data.geo.GeoResults<java.lang.String> = new GeoResults <> ( java.util.Collections . java.util.List ( org.springframework.data.geo.GeoResult<java.lang.String> ) ) ; @ java.lang.SuppressWarnings ( STRING ) GeoResults < java.lang.String > org.springframework.data.geo.GeoResults<java.lang.String> = ( GeoResults < java.lang.String > ) SerializationUtils . deserialize ( SerializationUtils . serialize ( org.springframework.data.geo.GeoResults<java.lang.String> ) ) ; assertThat ( org.springframework.data.geo.GeoResults<java.lang.String> ) . isEqualTo ( org.springframework.data.geo.GeoResults<java.lang.String> ) ; }  <METHOD_END>
