<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.data.gemfire.serialization.json.Region<?,?>> < Region < ? , ? > > java.util.List<org.springframework.data.gemfire.serialization.json.Region<?,?>> ) { this . java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( Region < ? , ? > org.springframework.data.gemfire.serialization.json.Region<?,?> : java.util.List<org.springframework.data.gemfire.serialization.json.Region<?,?>> ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.gemfire.serialization.json.Region<,> . getName ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING + STRING + STRING + STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint ) { boolean boolean = boolean ( org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getTarget ( ) ) ; java.lang.Object java.lang.Object = null ; try { if ( boolean ) { java.lang.Object [] java.lang.Object[] = java.util.Arrays . java.lang.Object[] ( org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getArgs ( ) , org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getArgs ( ) . length ) ; java.lang.Object java.lang.Object = java.lang.Object[] [ NUMBER ] ; java.lang.Object[] [ NUMBER ] = org.springframework.data.gemfire.serialization.json.PdxInstance ( java.lang.Object ) ; java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( java.lang.Object[] ) ; org.springframework.data.gemfire.serialization.json.Log . debug ( STRING + java.lang.Object + STRING ) ; java.lang.Object = java.lang.Object ( java.lang.Object ) ; } else { java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint ) { boolean boolean = boolean ( org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getTarget ( ) ) ; java.lang.Object java.lang.Object = null ; try { if ( boolean ) { java.lang.Object [] java.lang.Object[] = java.util.Arrays . java.lang.Object[] ( org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getArgs ( ) , org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getArgs ( ) . length ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.lang.Object[] [ NUMBER ] ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; for ( java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<,> . getKey ( ) , org.springframework.data.gemfire.serialization.json.PdxInstance ( java.util.Map.Entry<,> . getValue ( ) ) ) ; } java.lang.Object[] [ NUMBER ] = java.util.Map<java.lang.Object,java.lang.Object> ; java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( java.lang.Object[] ) ; } else { java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING + STRING + STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint ) { java.lang.Object java.lang.Object = null ; try { if ( boolean ( org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getTarget ( ) ) ) { java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; org.springframework.data.gemfire.serialization.json.Log . debug ( STRING + java.lang.Object + STRING ) ; java.lang.Object = java.lang.Object ( java.lang.Object ) ; } else { java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Around ( STRING ) public java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ProceedingJoinPoint org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = null ; try { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; if ( ! boolean || CollectionUtils . isEmpty ( java.util.Map<java.lang.Object,java.lang.Object> ) || ! boolean ( org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getTarget ( ) ) ) { java.util.Map<java.lang.Object,java.lang.Object> = java.util.Map<java.lang.Object,java.lang.Object> ; } else { java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Around ( STRING ) public java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( ProceedingJoinPoint org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = null ; try { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; if ( ! boolean || CollectionUtils . isEmpty ( java.util.Collection<java.lang.Object> ) || ! boolean ( org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getTarget ( ) ) ) { java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ; } else { java.util.Collection<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<java.lang.Object> ) { java.util.Collection<java.lang.Object> . boolean ( org.springframework.data.gemfire.serialization.json.PdxInstance ( java.lang.Object ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } return java.util.Collection<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING + STRING + STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint ) { GemfireTemplate org.springframework.data.gemfire.serialization.json.GemfireTemplate = ( GemfireTemplate ) org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . getTarget ( ) ; boolean boolean = boolean ( org.springframework.data.gemfire.serialization.json.GemfireTemplate . getRegion ( ) ) ; java.lang.Object java.lang.Object = null ; try { if ( boolean ) { java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; if ( java.lang.Object instanceof SelectResults && boolean ) { ResultsBag org.springframework.data.gemfire.serialization.json.ResultsBag = new ResultsBag ( ) ; for ( java.lang.Object java.lang.Object : ( SelectResults < ? > ) java.lang.Object ) { org.springframework.data.gemfire.serialization.json.ResultsBag . add ( java.lang.Object ( java.lang.Object ) ) ; } java.lang.Object = org.springframework.data.gemfire.serialization.json.ResultsBag ; } else { java.lang.Object = java.lang.Object ( java.lang.Object ) ; } } else { java.lang.Object = org.springframework.data.gemfire.serialization.json.ProceedingJoinPoint . proceed ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.serialization.json.PdxInstance org.springframework.data.gemfire.serialization.json.PdxInstance ( java.lang.Object java.lang.Object ) { PdxInstance org.springframework.data.gemfire.serialization.json.PdxInstance = null ; if ( java.lang.Object instanceof PdxInstance ) { org.springframework.data.gemfire.serialization.json.PdxInstance = ( PdxInstance ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.data.gemfire.serialization.json.PdxInstance = JSONFormatter . fromJSON ( ( java.lang.String ) java.lang.Object ) ; } else { ObjectMapper org.springframework.data.gemfire.serialization.json.ObjectMapper = new ObjectMapper ( ) ; try { java.lang.String java.lang.String = org.springframework.data.gemfire.serialization.json.ObjectMapper . writeValueAsString ( java.lang.Object ) ; org.springframework.data.gemfire.serialization.json.PdxInstance = JSONFormatter . fromJSON ( java.lang.String ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } } return org.springframework.data.gemfire.serialization.json.PdxInstance ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { Region < ? , ? > org.springframework.data.gemfire.serialization.json.Region<?,?> = ( Region < ? , ? > ) java.lang.Object ; boolean boolean = false ; if ( java.util.List<java.lang.String> == null || java.util.List<java.lang.String> . boolean ( org.springframework.data.gemfire.serialization.json.Region<,> . getName ( ) ) ) { if ( org.springframework.data.gemfire.serialization.json.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.serialization.json.Log . debug ( org.springframework.data.gemfire.serialization.json.Region<,> . getName ( ) + STRING ) ; } boolean = true ; } return boolean ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object != null && java.lang.Object instanceof PdxInstance ) { java.lang.Object = JSONFormatter . toJSON ( ( PdxInstance ) java.lang.Object ) ; if ( ! boolean ) { java.lang.Object = java.lang.Object ( java.lang.Object ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; return java.lang.String . java.lang.String ( STRING , STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Throwable ; } else { throw new java.lang.RuntimeException ( java.lang.Throwable ) ; } }  <METHOD_END>
