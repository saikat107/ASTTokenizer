<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader == null ? ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.mongodb.repository.BeanFactory ) throws org.springframework.data.mongodb.repository.BeansException { this . org.springframework.data.mongodb.repository.BeanFactory = org.springframework.data.mongodb.repository.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory = new ReactiveMongoRepositoryFactory ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setRepositoryBaseClass ( SimpleReactiveMongoRepository .class ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setBeanClassLoader ( java.lang.ClassLoader ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setBeanFactory ( org.springframework.data.mongodb.repository.BeanFactory ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setEvaluationContextProvider ( DefaultEvaluationContextProvider . INSTANCE ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory = org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . getRepository ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory .class ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . save ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . exists ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . exists ( STRING ) ) . expectNext ( false ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . exists ( Mono . just ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . exists ( Mono . empty ( ) ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( STRING ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( Mono . just ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( Mono . empty ( ) ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findAll ( java.util.Arrays . java.util.List<java.lang.String> ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findAll ( Flux . just ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findAll ( Flux . empty ( ) ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findAll ( new Sort ( new Order ( Direction . ASC , STRING ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . count ( ) ) . expectNext ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . insert ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . insert ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . insert ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . insert ( Flux . just ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setFirstname ( STRING ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setLastname ( STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . save ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( STRING ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . consumeNextWith ( actual -> { assertThat ( actual . getFirstname ( ) , is ( equalTo ( dave . getFirstname ( ) ) ) ) ; assertThat ( actual . getLastname ( ) , is ( equalTo ( dave . getLastname ( ) ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . save ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . consumeNextWith ( actual -> { assertThat ( actual . getFirstname ( ) , is ( equalTo ( person . getFirstname ( ) ) ) ) ; assertThat ( actual . getLastname ( ) , is ( equalTo ( person . getLastname ( ) ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . save ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson = new org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setFirstname ( STRING ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setLastname ( STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . save ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String , is ( notNullValue ( ) ) ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . setId ( null ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . save ( Flux . just ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findAll ( ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . delete ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . delete ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . delete ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( STRING ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . delete ( Flux . just ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson , org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . findOne ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson . java.lang.String ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePersonRepostitory . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( STRING ) ) . expectNext ( org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> < org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.SimpleReactiveMongoRepositoryTests.ReactivePerson> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
