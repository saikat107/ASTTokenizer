<METHOD_START> @ Before public void void ( ) java.lang.Exception { ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver = new RequestParamMethodArgumentResolver ( null , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , true ) ; ConfigurableWebBindingInitializer org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultFormattingConversionService ( ) ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.lang.String [] .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . name ( STRING ) ) . arg ( java.util.Map .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . name ( STRING ) ) . arg ( java.util.Map .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) ) . arg ( java.lang.String .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( ) ) . arg ( java.lang.String .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver = new RequestParamMethodArgumentResolver ( null , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , false ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ; try { org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) ) . arg ( Mono .class , java.lang.String .class ) ; this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } try { org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( Mono .class , java.lang.String .class ) ; this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_FORM_URLENCODED ) . body ( STRING ) . toExchange ( ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.lang.String [] .class ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ; assertTrue ( java.lang.Object instanceof java.lang.String [] ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , ( java.lang.String [] ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.lang.String [] .class ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; assertNull ( java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) ) . arg ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( forClassWithGenerics ( java.util.Optional .class , java.lang.Integer .class ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertEquals ( java.util.Optional .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.Optional<?> < ? > java.util.Optional<?> = ( java.util.Optional<?> < ? > ) java.lang.Object ; assertTrue ( java.util.Optional<> . boolean ( ) ) ; assertEquals ( NUMBER , java.util.Optional<> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { return this . org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) . block ( java.time.Duration . java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( @ RequestParam ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestParam ( STRING ) java.lang.String [] java.lang.String[] , @ RequestParam ( STRING ) java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestParam java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String , Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> , @ RequestParam ( STRING ) java.lang.String java.lang.String , @ RequestParam ( name = STRING , required = false ) java.lang.String java.lang.String , @ RequestParam ( STRING ) java.util.Optional<java.lang.Integer> < java.lang.Integer > java.util.Optional<java.lang.Integer> , @ RequestParam Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> ) {	}  <METHOD_END>
