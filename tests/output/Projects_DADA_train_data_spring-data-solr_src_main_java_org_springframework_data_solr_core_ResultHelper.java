<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> static java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> < java.lang.String , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> ( QueryResponse org.springframework.data.solr.core.QueryResponse ) { if ( org.springframework.data.solr.core.QueryResponse == null || org.springframework.data.solr.core.QueryResponse . getTermsResponse ( ) == null || org.springframework.data.solr.core.QueryResponse . getTermsResponse ( ) . getTermMap ( ) == null ) { return java.util.Collections . java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> ( ) ; } TermsResponse org.springframework.data.solr.core.TermsResponse = org.springframework.data.solr.core.QueryResponse . getTermsResponse ( ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> < java.lang.String , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> = new java.util.LinkedHashMap <> ( org.springframework.data.solr.core.TermsResponse . getTermMap ( ) . size ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Term>> < java.lang.String , java.util.List<org.springframework.data.solr.core.Term> < Term > > java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Term>> : org.springframework.data.solr.core.TermsResponse . getTermMap ( ) . entrySet ( ) ) { java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > java.util.List<org.springframework.data.solr.core.TermsFieldEntry> = new java.util.ArrayList <> ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Term>> . getValue ( ) . size ( ) ) ; for ( Term org.springframework.data.solr.core.Term : java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Term>> . getValue ( ) ) { SimpleTermsFieldEntry org.springframework.data.solr.core.SimpleTermsFieldEntry = new SimpleTermsFieldEntry ( org.springframework.data.solr.core.Term . getTerm ( ) , org.springframework.data.solr.core.Term . getFrequency ( ) ) ; org.springframework.data.solr.core.SimpleTermsFieldEntry . setField ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Term>> . getKey ( ) ) ; java.util.List<org.springframework.data.solr.core.TermsFieldEntry> . add ( org.springframework.data.solr.core.SimpleTermsFieldEntry ) ; } java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . put ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.Term>> . getKey ( ) , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> ) ; } return java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> ; }  <METHOD_END>
<METHOD_START> static java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ( FacetQuery org.springframework.data.solr.core.FacetQuery , QueryResponse org.springframework.data.solr.core.QueryResponse ) { Assert . notNull ( org.springframework.data.solr.core.FacetQuery , STRING ) ; if ( ! boolean ( org.springframework.data.solr.core.FacetQuery , org.springframework.data.solr.core.QueryResponse ) ) { return java.util.Collections . java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ( ) ; } java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = new java.util.LinkedHashMap<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> <> ( ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) ) { int int = java.lang.Math . int ( NUMBER , org.springframework.data.solr.core.FacetQuery . getFacetOptions ( ) . getPageable ( ) . getPageSize ( ) ) ; for ( FacetField org.springframework.data.solr.core.FacetField : org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) { if ( org.springframework.data.solr.core.FacetField != null && StringUtils . hasText ( org.springframework.data.solr.core.FacetField . getName ( ) ) ) { Field org.springframework.data.solr.core.Field = new SimpleField ( org.springframework.data.solr.core.FacetField . getName ( ) ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.data.solr.core.FacetField . getValues ( ) ) ) { java.util.List<org.springframework.data.solr.core.FacetFieldEntry> < FacetFieldEntry > java.util.List<org.springframework.data.solr.core.FacetFieldEntry> = new java.util.ArrayList<org.springframework.data.solr.core.FacetFieldEntry> <> ( int ) ; for ( Count org.springframework.data.solr.core.Count : org.springframework.data.solr.core.FacetField . getValues ( ) ) { if ( org.springframework.data.solr.core.Count != null ) { java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . add ( new SimpleFacetFieldEntry ( org.springframework.data.solr.core.Field , org.springframework.data.solr.core.Count . getName ( ) , org.springframework.data.solr.core.Count . getCount ( ) ) ) ; } } java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . put ( org.springframework.data.solr.core.Field , new SolrResultPage <> ( java.util.List<org.springframework.data.solr.core.FacetFieldEntry> , org.springframework.data.solr.core.FacetQuery . getFacetOptions ( ) . getPageable ( ) , org.springframework.data.solr.core.FacetField . getValueCount ( ) , null ) ) ; } else { java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . put ( org.springframework.data.solr.core.Field , new SolrResultPage <> ( java.util.Collections .< FacetFieldEntry > java.util.List<org.springframework.data.solr.core.FacetFieldEntry> ( ) , org.springframework.data.solr.core.FacetQuery . getFacetOptions ( ) . getPageable ( ) , NUMBER , null ) ) ; } } } } return java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ; }  <METHOD_END>
<METHOD_START> static java.util.Map<org.springframework.data.solr.core.query.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> < org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > > java.util.Map<org.springframework.data.solr.core.query.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> ( FacetQuery org.springframework.data.solr.core.FacetQuery , QueryResponse org.springframework.data.solr.core.QueryResponse ) { java.util.Map<org.springframework.data.solr.core.query.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> < org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > > java.util.Map<org.springframework.data.solr.core.query.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> = new java.util.LinkedHashMap<org.springframework.data.solr.core.query.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> <> ( ) ; NamedList < java.util.List<org.springframework.data.solr.core.PivotField> < PivotField > > org.springframework.data.solr.core.NamedList<java.util.List<org.springframework.data.solr.core.PivotField>> = org.springframework.data.solr.core.QueryResponse . getFacetPivot ( ) ; if ( org.springframework.data.solr.core.NamedList<java.util.List<org.springframework.data.solr.core.PivotField>> != null && org.springframework.data.solr.core.NamedList<java.util.List<org.springframework.data.solr.core.PivotField>> . size ( ) > NUMBER ) { for ( int int = NUMBER ; int < org.springframework.data.solr.core.NamedList<java.util.List<org.springframework.data.solr.core.PivotField>> . size ( ) ; int ++ ) { java.lang.String java.lang.String = org.springframework.data.solr.core.NamedList<java.util.List<org.springframework.data.solr.core.PivotField>> . getName ( int ) ; java.util.List<org.springframework.data.solr.core.PivotField> < PivotField > java.util.List<org.springframework.data.solr.core.PivotField> = org.springframework.data.solr.core.NamedList<java.util.List<org.springframework.data.solr.core.PivotField>> . get ( java.lang.String ) ; java.util.Map<org.springframework.data.solr.core.query.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> . put ( new SimplePivotField ( java.lang.String ) , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> ( java.util.List<org.springframework.data.solr.core.PivotField> ) ) ; } } return java.util.Map<org.springframework.data.solr.core.query.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> ( java.util.List<org.springframework.data.solr.core.PivotField> < PivotField > java.util.List<org.springframework.data.solr.core.PivotField> ) { if ( CollectionUtils . isEmpty ( java.util.List<org.springframework.data.solr.core.PivotField> ) ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> ( ) ; } java.util.ArrayList<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.ArrayList<org.springframework.data.solr.core.FacetPivotFieldEntry> = new java.util.ArrayList<org.springframework.data.solr.core.FacetPivotFieldEntry> <> ( ) ; for ( PivotField org.springframework.data.solr.core.PivotField : java.util.List<org.springframework.data.solr.core.PivotField> ) { SimpleFacetPivotEntry org.springframework.data.solr.core.SimpleFacetPivotEntry = new SimpleFacetPivotEntry ( new SimpleField ( org.springframework.data.solr.core.PivotField . getField ( ) ) , java.lang.String . java.lang.String ( org.springframework.data.solr.core.PivotField . getValue ( ) ) , org.springframework.data.solr.core.PivotField . getCount ( ) ) ; java.util.List<org.springframework.data.solr.core.PivotField> < PivotField > java.util.List<org.springframework.data.solr.core.PivotField> = org.springframework.data.solr.core.PivotField . getPivot ( ) ; if ( java.util.List<org.springframework.data.solr.core.PivotField> != null ) { org.springframework.data.solr.core.SimpleFacetPivotEntry . setPivot ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> ( java.util.List<org.springframework.data.solr.core.PivotField> ) ) ; } java.util.ArrayList<org.springframework.data.solr.core.FacetPivotFieldEntry> . add ( org.springframework.data.solr.core.SimpleFacetPivotEntry ) ; } return java.util.ArrayList<org.springframework.data.solr.core.FacetPivotFieldEntry> ; }  <METHOD_END>
<METHOD_START> static java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ( FacetQuery org.springframework.data.solr.core.FacetQuery , QueryResponse org.springframework.data.solr.core.QueryResponse ) { Assert . notNull ( org.springframework.data.solr.core.FacetQuery , STRING ) ; if ( ! boolean ( org.springframework.data.solr.core.FacetQuery , org.springframework.data.solr.core.QueryResponse ) || CollectionUtils . isEmpty ( org.springframework.data.solr.core.QueryResponse . getFacetRanges ( ) ) ) { return java.util.Collections . java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ( ) ; } java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = new java.util.LinkedHashMap<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> <> ( ) ; Pageable org.springframework.data.solr.core.Pageable = org.springframework.data.solr.core.FacetQuery . getFacetOptions ( ) . getPageable ( ) ; int int = org.springframework.data.solr.core.Pageable . getPageSize ( ) ; for ( RangeFacet < ? , ? > org.springframework.data.solr.core.RangeFacet<?,?> : org.springframework.data.solr.core.QueryResponse . getFacetRanges ( ) ) { if ( org.springframework.data.solr.core.RangeFacet<,> == null || ! StringUtils . hasText ( org.springframework.data.solr.core.RangeFacet<,> . getName ( ) ) ) { continue; } Field org.springframework.data.solr.core.Field = new SimpleField ( org.springframework.data.solr.core.RangeFacet<,> . getName ( ) ) ; java.util.List<org.springframework.data.solr.core.FacetFieldEntry> < FacetFieldEntry > java.util.List<org.springframework.data.solr.core.FacetFieldEntry> ; long long ; if ( ! CollectionUtils . isEmpty ( org.springframework.data.solr.core.RangeFacet<,> . getCounts ( ) ) ) { java.util.List<org.springframework.data.solr.core.FacetFieldEntry> = new java.util.ArrayList <> ( int ) ; for ( RangeFacet . RangeFacet RangeFacet.Count : org.springframework.data.solr.core.RangeFacet<,> . getCounts ( ) ) { java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . add ( new SimpleFacetFieldEntry ( org.springframework.data.solr.core.Field , RangeFacet.Count . getValue ( ) , RangeFacet.Count . getCount ( ) ) ) ; } long = org.springframework.data.solr.core.RangeFacet<,> . getCounts ( ) . size ( ) ; } else { java.util.List<org.springframework.data.solr.core.FacetFieldEntry> = java.util.Collections .< FacetFieldEntry > java.util.List<org.springframework.data.solr.core.FacetFieldEntry> ( ) ; long = NUMBER ; } java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . put ( org.springframework.data.solr.core.Field , new SolrResultPage <> ( java.util.List<org.springframework.data.solr.core.FacetFieldEntry> , org.springframework.data.solr.core.Pageable , long , null ) ) ; } return java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ; }  <METHOD_END>
<METHOD_START> static java.util.List<org.springframework.data.solr.core.FacetQueryEntry> < FacetQueryEntry > java.util.List<org.springframework.data.solr.core.FacetQueryEntry> ( FacetQuery org.springframework.data.solr.core.FacetQuery , QueryResponse org.springframework.data.solr.core.QueryResponse ) { Assert . notNull ( org.springframework.data.solr.core.FacetQuery , STRING ) ; if ( ! boolean ( org.springframework.data.solr.core.FacetQuery , org.springframework.data.solr.core.QueryResponse ) ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.FacetQueryEntry> ( ) ; } java.util.List<org.springframework.data.solr.core.FacetQueryEntry> < FacetQueryEntry > java.util.List<org.springframework.data.solr.core.FacetQueryEntry> = new java.util.ArrayList<org.springframework.data.solr.core.FacetQueryEntry> <> ( ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.data.solr.core.QueryResponse . getFacetQuery ( ) ) ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map.Entry<java.lang.String,java.lang.Integer> : org.springframework.data.solr.core.QueryResponse . getFacetQuery ( ) . entrySet ( ) ) { java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . add ( new SimpleFacetQueryEntry ( java.util.Map.Entry<java.lang.String,java.lang.Integer> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Integer> . java.lang.Integer ( ) ) ) ; } } return java.util.List<org.springframework.data.solr.core.FacetQueryEntry> ; }  <METHOD_END>
<METHOD_START> static < T > java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> < HighlightEntry < T > > java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> ( QueryResponse org.springframework.data.solr.core.QueryResponse , SolrResultPage < T > org.springframework.data.solr.core.SolrResultPage<T> ) { if ( org.springframework.data.solr.core.QueryResponse == null || CollectionUtils . isEmpty ( org.springframework.data.solr.core.QueryResponse . getHighlighting ( ) ) || org.springframework.data.solr.core.SolrResultPage<T> == null ) { return java.util.Collections . java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> ( ) ; } java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> < HighlightEntry < T > > java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> = new java.util.ArrayList <> ( org.springframework.data.solr.core.SolrResultPage<T> . getSize ( ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> = org.springframework.data.solr.core.QueryResponse . getHighlighting ( ) ; for ( T T : org.springframework.data.solr.core.SolrResultPage<T> ) { HighlightEntry < T > org.springframework.data.solr.core.HighlightEntry<T> = org.springframework.data.solr.core.HighlightEntry<T> ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> , T ) ; java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> . add ( org.springframework.data.solr.core.HighlightEntry<T> ) ; } org.springframework.data.solr.core.SolrResultPage<T> . setHighlighted ( java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> ) ; return java.util.List<org.springframework.data.solr.core.HighlightEntry<T>> ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.data.solr.core.HighlightEntry<T> < T > org.springframework.data.solr.core.HighlightEntry<T> ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> , T T ) { HighlightEntry < T > org.springframework.data.solr.core.HighlightEntry<T> = new HighlightEntry <> ( T ) ; java.lang.Object java.lang.Object = java.lang.Object ( T ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( java.lang.Object . java.lang.String ( ) ) ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> ( ) ) { org.springframework.data.solr.core.HighlightEntry<T> . addSnipplets ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) ; } } return org.springframework.data.solr.core.HighlightEntry<T> ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( ClassUtils . hasProperty ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING ) ) { try { return FieldUtils . readDeclaredField ( java.lang.Object , STRING , true ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new MappingException ( STRING , java.lang.IllegalAccessException ) ; } } for ( java . lang . reflect . java.lang.reflect.Field java.lang.reflect.Field : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Field[] ( ) ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = AnnotationUtils . getAnnotation ( java.lang.reflect.Field , Id .class ) ; if ( java.lang.annotation.Annotation != null ) { try { return FieldUtils . readField ( java.lang.reflect.Field , java.lang.Object , true ) ; } catch ( java.lang.IllegalArgumentException | java.lang.IllegalAccessException java.lang.Exception ) { throw new MappingException ( STRING , java.lang.Exception ) ; } } } throw new MappingException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( FacetQuery org.springframework.data.solr.core.FacetQuery , QueryResponse org.springframework.data.solr.core.QueryResponse ) { return org.springframework.data.solr.core.FacetQuery . hasFacetOptions ( ) && org.springframework.data.solr.core.QueryResponse != null ; }  <METHOD_END>
<METHOD_START> static < T > java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> < java.lang.Object , GroupResult < T > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> ( Query org.springframework.data.solr.core.Query , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , QueryResponse org.springframework.data.solr.core.QueryResponse , SolrTemplate org.springframework.data.solr.core.SolrTemplate , java.lang.Class<T> < T > java.lang.Class<T> ) { GroupResponse org.springframework.data.solr.core.GroupResponse = org.springframework.data.solr.core.QueryResponse . getGroupResponse ( ) ; if ( org.springframework.data.solr.core.GroupResponse == null ) { return java.util.Collections . java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> ( ) ; } java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> < java.lang.Object , GroupResult < T > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> = new java.util.LinkedHashMap<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> <> ( ) ; java.util.List<org.springframework.data.solr.core.GroupCommand> < GroupCommand > java.util.List<org.springframework.data.solr.core.GroupCommand> = org.springframework.data.solr.core.GroupResponse . getValues ( ) ; for ( GroupCommand org.springframework.data.solr.core.GroupCommand : java.util.List<org.springframework.data.solr.core.GroupCommand> ) { java.util.List<org.springframework.data.solr.core.GroupEntry<T>> < GroupEntry < T > > java.util.List<org.springframework.data.solr.core.GroupEntry<T>> = new java.util.ArrayList<org.springframework.data.solr.core.GroupEntry<T>> <> ( ) ; for ( Group org.springframework.data.solr.core.Group : org.springframework.data.solr.core.GroupCommand . getValues ( ) ) { SolrDocumentList org.springframework.data.solr.core.SolrDocumentList = org.springframework.data.solr.core.Group . getResult ( ) ; java.util.List<T> < T > java.util.List<T> = org.springframework.data.solr.core.SolrTemplate . convertSolrDocumentListToBeans ( org.springframework.data.solr.core.SolrDocumentList , java.lang.Class<T> ) ; Page < T > org.springframework.data.solr.core.Page<T> = new PageImpl <> ( java.util.List<T> , org.springframework.data.solr.core.Query . getGroupOptions ( ) . getPageRequest ( ) , org.springframework.data.solr.core.SolrDocumentList . getNumFound ( ) ) ; java.util.List<org.springframework.data.solr.core.GroupEntry<T>> . add ( new SimpleGroupEntry <> ( org.springframework.data.solr.core.Group . getGroupValue ( ) , org.springframework.data.solr.core.Page<T> ) ) ; } int int = org.springframework.data.solr.core.GroupCommand . getMatches ( ) ; java.lang.Integer java.lang.Integer = org.springframework.data.solr.core.GroupCommand . getNGroups ( ) ; java.lang.String java.lang.String = org.springframework.data.solr.core.GroupCommand . getName ( ) ; PageImpl < GroupEntry < T > > org.springframework.data.solr.core.PageImpl<org.springframework.data.solr.core.GroupEntry<T>> ; if ( java.lang.Integer != null ) { org.springframework.data.solr.core.PageImpl<org.springframework.data.solr.core.GroupEntry<T>> = new PageImpl <> ( java.util.List<org.springframework.data.solr.core.GroupEntry<T>> , org.springframework.data.solr.core.Query . getPageRequest ( ) , java.lang.Integer ) ; } else { org.springframework.data.solr.core.PageImpl<org.springframework.data.solr.core.GroupEntry<T>> = new PageImpl <> ( java.util.List<org.springframework.data.solr.core.GroupEntry<T>> ) ; } SimpleGroupResult < T > org.springframework.data.solr.core.SimpleGroupResult<T> = new SimpleGroupResult <> ( int , java.lang.Integer , java.lang.String , org.springframework.data.solr.core.PageImpl<org.springframework.data.solr.core.GroupEntry<T>> ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> . put ( java.lang.String , org.springframework.data.solr.core.SimpleGroupResult<T> ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> . put ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , org.springframework.data.solr.core.SimpleGroupResult<T> ) ; } } return java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<T>> ; }  <METHOD_END>
<METHOD_START> static java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> < java.lang.String , FieldStatsInfo > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> ) { if ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> == null ) { return java.util.Collections . java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> ( ) ; } java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> = new java.util.LinkedHashMap<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> <> ( ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> < java.lang.String , FieldStatsInfo > java.util.Map.Entry<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> : java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> . entrySet ( ) ) { FieldStatsInfo org.springframework.data.solr.core.FieldStatsInfo = java.util.Map.Entry<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> . getValue ( ) ; if ( org.springframework.data.solr.core.FieldStatsInfo == null ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . put ( java.util.Map.Entry<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> . getKey ( ) , new SimpleFieldStatsResult ( ) ) ; continue; } SimpleFieldStatsResult org.springframework.data.solr.core.SimpleFieldStatsResult = org.springframework.data.solr.core.SimpleStatsResult ( new SimpleFieldStatsResult ( ) , org.springframework.data.solr.core.FieldStatsInfo ) ; org.springframework.data.solr.core.SimpleFieldStatsResult . setCountDistinct ( org.springframework.data.solr.core.FieldStatsInfo . getCountDistinct ( ) ) ; org.springframework.data.solr.core.SimpleFieldStatsResult . setDistinctValues ( org.springframework.data.solr.core.FieldStatsInfo . getDistinctValues ( ) ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> < java.lang.String , java.util.List<org.springframework.data.solr.core.FieldStatsInfo> < FieldStatsInfo > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> = org.springframework.data.solr.core.FieldStatsInfo . getFacets ( ) ; if ( java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> != null ) { org.springframework.data.solr.core.SimpleFieldStatsResult . setStatsResults ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> ( java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> ) ) ; } java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . put ( java.util.Map.Entry<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> . getKey ( ) , org.springframework.data.solr.core.SimpleFieldStatsResult ) ; } return java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> < java.lang.String , java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> < java.lang.String , StatsResult > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> ( java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> < java.lang.String , java.util.List<org.springframework.data.solr.core.FieldStatsInfo> < FieldStatsInfo > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> ) { java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> < java.lang.String , java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> < java.lang.String , StatsResult > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> = new java.util.LinkedHashMap<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> <> ( ) ; for ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> < java.lang.String , java.util.List<org.springframework.data.solr.core.FieldStatsInfo> < FieldStatsInfo > > java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> : java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> . entrySet ( ) ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> < java.lang.String , StatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> = new java.util.LinkedHashMap<java.lang.String,org.springframework.data.solr.core.StatsResult> <> ( ) ; for ( FieldStatsInfo org.springframework.data.solr.core.FieldStatsInfo : java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> . getValue ( ) ) { SimpleStatsResult org.springframework.data.solr.core.SimpleStatsResult = org.springframework.data.solr.core.SimpleStatsResult ( new SimpleStatsResult ( ) , org.springframework.data.solr.core.FieldStatsInfo ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> . put ( org.springframework.data.solr.core.FieldStatsInfo . getName ( ) , org.springframework.data.solr.core.SimpleStatsResult ) ; } java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> . put ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.solr.core.FieldStatsInfo>> . getKey ( ) , java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> ) ; } return java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> ; }  <METHOD_END>
<METHOD_START> private static < T extends org.springframework.data.solr.core.SimpleStatsResult > T T ( T T , FieldStatsInfo org.springframework.data.solr.core.FieldStatsInfo ) { T . setMax ( org.springframework.data.solr.core.FieldStatsInfo . getMax ( ) ) ; T . setMin ( org.springframework.data.solr.core.FieldStatsInfo . getMin ( ) ) ; T . setCount ( org.springframework.data.solr.core.FieldStatsInfo . getCount ( ) ) ; T . setMissing ( org.springframework.data.solr.core.FieldStatsInfo . getMissing ( ) ) ; T . setStddev ( org.springframework.data.solr.core.FieldStatsInfo . getStddev ( ) ) ; T . setSumOfSquares ( ( java.lang.Double ) new DirectFieldAccessor ( org.springframework.data.solr.core.FieldStatsInfo ) . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.data.solr.core.FieldStatsInfo . getMean ( ) ; if ( java.lang.Object instanceof java.lang.Double ) { T . setMean ( ( java.lang.Double ) java.lang.Object ) ; } java.lang.Object java.lang.Object = org.springframework.data.solr.core.FieldStatsInfo . getSum ( ) ; if ( java.lang.Object instanceof java.lang.Double ) { T . setSum ( ( java.lang.Double ) java.lang.Object ) ; } return T ; }  <METHOD_END>
<METHOD_START> static java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> < java.lang.String , java.util.List<org.springframework.data.solr.core.Alternative> < Alternative > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> ( QueryResponse org.springframework.data.solr.core.QueryResponse ) { if ( org.springframework.data.solr.core.QueryResponse == null || org.springframework.data.solr.core.QueryResponse . getSpellCheckResponse ( ) == null || org.springframework.data.solr.core.QueryResponse . getSpellCheckResponse ( ) . getSuggestions ( ) == null ) { return java.util.Collections . java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> ( ) ; } java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> < java.lang.String , java.util.List<org.springframework.data.solr.core.Alternative> < Alternative > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> <> ( ) ; SpellCheckResponse org.springframework.data.solr.core.SpellCheckResponse = org.springframework.data.solr.core.QueryResponse . getSpellCheckResponse ( ) ; if ( org.springframework.data.solr.core.SpellCheckResponse != null && org.springframework.data.solr.core.SpellCheckResponse . getSuggestions ( ) != null ) { for ( SpellCheckResponse . SpellCheckResponse SpellCheckResponse.Suggestion : org.springframework.data.solr.core.SpellCheckResponse . getSuggestions ( ) ) { java.util.List<org.springframework.data.solr.core.Alternative> < Alternative > java.util.List<org.springframework.data.solr.core.Alternative> = new java.util.ArrayList<org.springframework.data.solr.core.Alternative> <> ( ) ; if ( ! CollectionUtils . isEmpty ( SpellCheckResponse.Suggestion . getAlternatives ( ) ) ) { for ( int int = NUMBER ; int < SpellCheckResponse.Suggestion . getAlternatives ( ) . size ( ) ; int ++ ) { java.util.List<org.springframework.data.solr.core.Alternative> . add ( new Alternative ( SpellCheckResponse.Suggestion . getToken ( ) , SpellCheckResponse.Suggestion . getOriginalFrequency ( ) , SpellCheckResponse.Suggestion . getAlternatives ( ) . get ( int ) , SpellCheckResponse.Suggestion . getAlternativeFrequencies ( ) . get ( int ) ) ) ; } } java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> . put ( SpellCheckResponse.Suggestion . getToken ( ) , java.util.List<org.springframework.data.solr.core.Alternative> ) ; } } return java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.Alternative>> ; }  <METHOD_END>
