<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( equalTo ( STRING ) ) ) . andExpect ( jsonPath ( STRING ) . value ( equalTo ( STRING ) ) ) . andExpect ( jsonPath ( STRING , startsWith ( STRING ) ) ) . andExpect ( jsonPath ( STRING , endsWith ( STRING ) ) ) . andExpect ( jsonPath ( STRING , containsString ( STRING ) ) ) . andExpect ( jsonPath ( STRING , isIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) . andExpect ( jsonPath ( STRING , hasItem ( STRING ) ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( startsWith ( STRING ) ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( endsWith ( STRING ) ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( containsString ( STRING ) ) ) . andExpect ( jsonPath ( java.lang.String , NUMBER ) . value ( isIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . isArray ( ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . isString ( ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . isNumber ( ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( jsonPath ( STRING ) . isBoolean ( ) ) . andRespond ( withSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.net.URISyntaxException { this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , org.springframework.test.web.client.samples.matchers.MultiValueMap<java.lang.String,org.springframework.test.web.client.samples.matchers.Person> ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
