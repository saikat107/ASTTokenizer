<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.integration.config.Environment ) { this . org.springframework.integration.config.Environment = org.springframework.integration.config.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.integration.config.AnnotationMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.config.AnnotationMetadata . getAnnotationAttributes ( EnableIntegrationManagement .class . java.lang.String ( ) ) ; this . org.springframework.integration.config.AnnotationAttributes = AnnotationAttributes . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; Assert . notNull ( this . org.springframework.integration.config.AnnotationAttributes , STRING + org.springframework.integration.config.AnnotationMetadata . getClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME ) @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.integration.config.IntegrationManagementConfigurer org.springframework.integration.config.IntegrationManagementConfigurer ( ) { IntegrationManagementConfigurer org.springframework.integration.config.IntegrationManagementConfigurer = new IntegrationManagementConfigurer ( ) ; void ( org.springframework.integration.config.IntegrationManagementConfigurer ) ; void ( org.springframework.integration.config.IntegrationManagementConfigurer ) ; org.springframework.integration.config.IntegrationManagementConfigurer . setDefaultLoggingEnabled ( java.lang.Boolean . boolean ( this . org.springframework.integration.config.Environment . resolvePlaceholders ( ( java.lang.String ) this . org.springframework.integration.config.AnnotationAttributes . get ( STRING ) ) ) ) ; org.springframework.integration.config.IntegrationManagementConfigurer . setDefaultCountsEnabled ( java.lang.Boolean . boolean ( this . org.springframework.integration.config.Environment . resolvePlaceholders ( ( java.lang.String ) this . org.springframework.integration.config.AnnotationAttributes . get ( STRING ) ) ) ) ; org.springframework.integration.config.IntegrationManagementConfigurer . setDefaultStatsEnabled ( java.lang.Boolean . boolean ( this . org.springframework.integration.config.Environment . resolvePlaceholders ( ( java.lang.String ) this . org.springframework.integration.config.AnnotationAttributes . get ( STRING ) ) ) ) ; org.springframework.integration.config.IntegrationManagementConfigurer . setMetricsFactoryBeanName ( ( java.lang.String ) this . org.springframework.integration.config.AnnotationAttributes . get ( STRING ) ) ; return org.springframework.integration.config.IntegrationManagementConfigurer ; }  <METHOD_END>
<METHOD_START> private void void ( IntegrationManagementConfigurer org.springframework.integration.config.IntegrationManagementConfigurer ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.integration.config.AnnotationAttributes . getStringArray ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = this . org.springframework.integration.config.Environment . resolvePlaceholders ( java.lang.String ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) ) ; } org.springframework.integration.config.IntegrationManagementConfigurer . setEnabledCountsPatterns ( java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( IntegrationManagementConfigurer org.springframework.integration.config.IntegrationManagementConfigurer ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.integration.config.AnnotationAttributes . getStringArray ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = this . org.springframework.integration.config.Environment . resolvePlaceholders ( java.lang.String ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) ) ; } org.springframework.integration.config.IntegrationManagementConfigurer . setEnabledStatsPatterns ( java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; }  <METHOD_END>
