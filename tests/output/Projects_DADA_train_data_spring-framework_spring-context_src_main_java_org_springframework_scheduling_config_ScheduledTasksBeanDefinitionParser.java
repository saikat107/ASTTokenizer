<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext , BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder ) { org.springframework.scheduling.config.BeanDefinitionBuilder . setLazyInit ( false ) ; ManagedList < RuntimeBeanReference > org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> = new ManagedList <> ( ) ; ManagedList < RuntimeBeanReference > org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> = new ManagedList <> ( ) ; ManagedList < RuntimeBeanReference > org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> = new ManagedList <> ( ) ; ManagedList < RuntimeBeanReference > org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> = new ManagedList <> ( ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; if ( ! boolean ( org.w3c.dom.Node , org.springframework.scheduling.config.ParserContext ) ) { continue; } org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) org.w3c.dom.Node ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) || ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.scheduling.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; continue; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( ! ( boolean || boolean || boolean || boolean ) ) { org.springframework.scheduling.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; continue; } if ( boolean && ( boolean || boolean ) ) { org.springframework.scheduling.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; continue; } java.lang.String java.lang.String = org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String , java.lang.String , org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext ) . getBeanName ( ) ; if ( boolean ) { org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> . add ( org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String , java.lang.String , java.lang.String , org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext ) ) ; } if ( boolean ) { org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> . add ( org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String , java.lang.String , java.lang.String , org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext ) ) ; } if ( boolean ) { org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> . add ( org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String , java.lang.String , org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext ) ) ; } if ( boolean ) { java.lang.String java.lang.String = new RuntimeBeanReference ( java.lang.String ) . getBeanName ( ) ; org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> . add ( org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String , java.lang.String , org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext ) ) ; } } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.scheduling.config.ManagedList<org.springframework.scheduling.config.RuntimeBeanReference> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.w3c.dom.Node org.w3c.dom.Node , ParserContext org.springframework.scheduling.config.ParserContext ) { return org.w3c.dom.Node . short ( ) == org.w3c.dom.Node . short && java.lang.String . boolean ( org.springframework.scheduling.config.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Node ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.scheduling.config.RuntimeBeanReference org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String java.lang.String , java.lang.String java.lang.String , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext ) { BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( STRING ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; return org.springframework.scheduling.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext , org.springframework.scheduling.config.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.scheduling.config.RuntimeBeanReference org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext ) { BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( STRING ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgValue ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String : long ) ; return org.springframework.scheduling.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext , org.springframework.scheduling.config.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.scheduling.config.RuntimeBeanReference org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String java.lang.String , java.lang.String java.lang.String , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext ) { BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( STRING ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; return org.springframework.scheduling.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext , org.springframework.scheduling.config.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.scheduling.config.RuntimeBeanReference org.springframework.scheduling.config.RuntimeBeanReference ( java.lang.String java.lang.String , java.lang.String java.lang.String , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext ) { BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( STRING ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; org.springframework.scheduling.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; return org.springframework.scheduling.config.RuntimeBeanReference ( org.w3c.dom.Element , org.springframework.scheduling.config.ParserContext , org.springframework.scheduling.config.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.scheduling.config.RuntimeBeanReference org.springframework.scheduling.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.scheduling.config.ParserContext , BeanDefinitionBuilder org.springframework.scheduling.config.BeanDefinitionBuilder ) { org.springframework.scheduling.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setSource ( org.springframework.scheduling.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; java.lang.String java.lang.String = org.springframework.scheduling.config.ParserContext . getReaderContext ( ) . generateBeanName ( org.springframework.scheduling.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) ) ; org.springframework.scheduling.config.ParserContext . registerBeanComponent ( new BeanComponentDefinition ( org.springframework.scheduling.config.BeanDefinitionBuilder . getBeanDefinition ( ) , java.lang.String ) ) ; return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
