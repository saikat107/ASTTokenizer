<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { if ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . hasAnnotation ( EnableDiskStore .class . java.lang.String ( ) ) ) { AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . getAnnotationAttributes ( EnableDiskStore .class . java.lang.String ( ) ) ) ; void ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , org.springframework.data.gemfire.config.annotation.AnnotationAttributes , org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DiskStoreFactoryBean .class ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyReference ( STRING , GemfireConstants . DEFAULT_GEMFIRE_CACHE_NAME ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getBoolean ( STRING ) , false ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getBoolean ( STRING ) , false ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Integer > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Float > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Float > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Long > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Integer > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Long > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Integer > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , org.springframework.data.gemfire.config.annotation.AnnotationAttributes , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { AnnotationAttributes [] org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] = ArrayUtils . nullSafeArray ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getAnnotationArray ( STRING ) , AnnotationAttributes .class ) ; ManagedList < BeanDefinition > org.springframework.data.gemfire.config.annotation.ManagedList<org.springframework.data.gemfire.config.annotation.BeanDefinition> = new ManagedList < BeanDefinition > ( diskDirectories . length ) ; for ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes : org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DiskStoreFactoryBean . DiskStoreFactoryBean .class ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Integer > getNumber ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.ManagedList<org.springframework.data.gemfire.config.annotation.BeanDefinition> . add ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } if ( ! org.springframework.data.gemfire.config.annotation.ManagedList<org.springframework.data.gemfire.config.annotation.BeanDefinition> . isEmpty ( ) ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.ManagedList<org.springframework.data.gemfire.config.annotation.BeanDefinition> ) ; } return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , java.lang.String java.lang.String , T T , T T ) { return ( T != null && ! T . boolean ( T ) ? org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , T ) : org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; }  <METHOD_END>
