<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; new SpyDefinition ( null , null , null , true , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = new SpyDefinition ( null , org.springframework.boot.test.mock.mockito.ResolvableType , null , true , null ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getName ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) ) . isEqualTo ( org.springframework.boot.test.mock.mockito.ResolvableType ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getReset ( ) ) . isEqualTo ( MockReset . AFTER ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . isProxyTargetAware ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getQualifier ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition = mock ( QualifierDefinition .class ) ; SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = new SpyDefinition ( STRING , org.springframework.boot.test.mock.mockito.ResolvableType , MockReset . BEFORE , false , org.springframework.boot.test.mock.mockito.QualifierDefinition ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) ) . isEqualTo ( org.springframework.boot.test.mock.mockito.ResolvableType ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getReset ( ) ) . isEqualTo ( MockReset . BEFORE ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . isProxyTargetAware ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getQualifier ( ) ) . isEqualTo ( org.springframework.boot.test.mock.mockito.QualifierDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = new SpyDefinition ( STRING , org.springframework.boot.test.mock.mockito.ResolvableType , MockReset . BEFORE , true , null ) ; RealExampleService org.springframework.boot.test.mock.mockito.RealExampleService = org.springframework.boot.test.mock.mockito.SpyDefinition . createSpy ( new RealExampleService ( STRING ) ) ; MockCreationSettings < ? > org.springframework.boot.test.mock.mockito.MockCreationSettings<?> = MockitoApi . get ( ) . getMockSettings ( org.springframework.boot.test.mock.mockito.RealExampleService ) ; assertThat ( org.springframework.boot.test.mock.mockito.RealExampleService ) . isInstanceOf ( ExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockCreationSettings<> . getMockName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockCreationSettings<> . getDefaultAnswer ( ) ) . isEqualTo ( Answers . CALLS_REAL_METHODS ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.RealExampleService ) ) . isEqualTo ( MockReset . BEFORE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = new SpyDefinition ( STRING , org.springframework.boot.test.mock.mockito.ResolvableType , MockReset . BEFORE , true , null ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.test.mock.mockito.SpyDefinition . createSpy ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = new SpyDefinition ( STRING , org.springframework.boot.test.mock.mockito.ResolvableType , MockReset . BEFORE , true , null ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.test.mock.mockito.SpyDefinition . createSpy ( new ExampleServiceCaller ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = new SpyDefinition ( STRING , org.springframework.boot.test.mock.mockito.ResolvableType , MockReset . BEFORE , true , null ) ; java.lang.Object java.lang.Object = new RealExampleService ( STRING ) ; java.lang.Object = org.springframework.boot.test.mock.mockito.SpyDefinition . createSpy ( java.lang.Object ) ; org.springframework.boot.test.mock.mockito.SpyDefinition . createSpy ( java.lang.Object ) ; }  <METHOD_END>
