<METHOD_START> public void ( Repositories org.springframework.data.rest.core.mapping.Repositories , PersistentEntities org.springframework.data.rest.core.mapping.PersistentEntities , RepositoryDetectionStrategy org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy ) { this( org.springframework.data.rest.core.mapping.Repositories , org.springframework.data.rest.core.mapping.PersistentEntities , new EvoInflectorRelProvider ( ) , org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy ); }  <METHOD_END>
<METHOD_START> void ( Repositories org.springframework.data.rest.core.mapping.Repositories , PersistentEntities org.springframework.data.rest.core.mapping.PersistentEntities , RelProvider org.springframework.data.rest.core.mapping.RelProvider , RepositoryDetectionStrategy org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy ) { super( org.springframework.data.rest.core.mapping.PersistentEntities ); Assert . notNull ( org.springframework.data.rest.core.mapping.Repositories , STRING ) ; Assert . notNull ( org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy , STRING ) ; this . org.springframework.data.rest.core.mapping.Repositories = org.springframework.data.rest.core.mapping.Repositories ; this . void ( org.springframework.data.rest.core.mapping.Repositories , org.springframework.data.rest.core.mapping.RelProvider , org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy ) ; }  <METHOD_END>
<METHOD_START> private final void void ( Repositories org.springframework.data.rest.core.mapping.Repositories , RelProvider org.springframework.data.rest.core.mapping.RelProvider , RepositoryDetectionStrategy org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : org.springframework.data.rest.core.mapping.Repositories ) { RepositoryInformation org.springframework.data.rest.core.mapping.RepositoryInformation = org.springframework.data.rest.core.mapping.Repositories . getRequiredRepositoryInformation ( java.lang.Class<> ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.core.mapping.RepositoryInformation . getRepositoryInterface ( ) ; PersistentEntity < ? , ? > org.springframework.data.rest.core.mapping.PersistentEntity<?,?> = org.springframework.data.rest.core.mapping.Repositories . getPersistentEntity ( java.lang.Class<> ) ; CollectionResourceMapping org.springframework.data.rest.core.mapping.CollectionResourceMapping = new RepositoryCollectionResourceMapping ( org.springframework.data.rest.core.mapping.RepositoryInformation , org.springframework.data.rest.core.mapping.RelProvider , org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy ) ; RepositoryAwareResourceMetadata org.springframework.data.rest.core.mapping.RepositoryAwareResourceMetadata = new RepositoryAwareResourceMetadata ( org.springframework.data.rest.core.mapping.PersistentEntity<,> , org.springframework.data.rest.core.mapping.CollectionResourceMapping , this , org.springframework.data.rest.core.mapping.RepositoryInformation ) ; addToCache ( java.lang.Class<> , org.springframework.data.rest.core.mapping.RepositoryAwareResourceMetadata ) ; if ( ! hasMetadataFor ( java.lang.Class<> ) || org.springframework.data.rest.core.mapping.RepositoryAwareResourceMetadata . isPrimary ( ) ) { addToCache ( java.lang.Class<> , org.springframework.data.rest.core.mapping.RepositoryAwareResourceMetadata ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.SearchResourceMappings org.springframework.data.rest.core.mapping.SearchResourceMappings ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.util.Map<java.lang.Class<?>,org.springframework.data.rest.core.mapping.SearchResourceMappings> . containsKey ( java.lang.Class<> ) ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.rest.core.mapping.SearchResourceMappings> . get ( java.lang.Class<> ) ; } RepositoryInformation org.springframework.data.rest.core.mapping.RepositoryInformation = org.springframework.data.rest.core.mapping.Repositories . getRequiredRepositoryInformation ( java.lang.Class<> ) ; java.util.List<org.springframework.data.rest.core.mapping.MethodResourceMapping> < MethodResourceMapping > java.util.List<org.springframework.data.rest.core.mapping.MethodResourceMapping> = new java.util.ArrayList<org.springframework.data.rest.core.mapping.MethodResourceMapping> < MethodResourceMapping > ( ) ; ResourceMetadata org.springframework.data.rest.core.mapping.ResourceMetadata = getMetadataFor ( java.lang.Class<> ) ; if ( org.springframework.data.rest.core.mapping.ResourceMetadata . isExported ( ) ) { for ( java.lang.reflect.Method java.lang.reflect.Method : org.springframework.data.rest.core.mapping.RepositoryInformation . getQueryMethods ( ) ) { RepositoryMethodResourceMapping org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping = new RepositoryMethodResourceMapping ( java.lang.reflect.Method , org.springframework.data.rest.core.mapping.ResourceMetadata , org.springframework.data.rest.core.mapping.RepositoryInformation ) ; if ( org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping . isExported ( ) ) { java.util.List<org.springframework.data.rest.core.mapping.MethodResourceMapping> . add ( org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ) ; } } } SearchResourceMappings org.springframework.data.rest.core.mapping.SearchResourceMappings = new SearchResourceMappings ( java.util.List<org.springframework.data.rest.core.mapping.MethodResourceMapping> ) ; java.util.Map<java.lang.Class<?>,org.springframework.data.rest.core.mapping.SearchResourceMappings> . put ( java.lang.Class<> , org.springframework.data.rest.core.mapping.SearchResourceMappings ) ; return org.springframework.data.rest.core.mapping.SearchResourceMappings ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( super. hasMappingFor ( java.lang.Class<> ) ) { return true ; } if ( org.springframework.data.rest.core.mapping.Repositories . hasRepositoryFor ( java.lang.Class<> ) ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( PersistentProperty < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> ) { return org.springframework.data.rest.core.mapping.Repositories . hasRepositoryFor ( org.springframework.data.rest.core.mapping.PersistentProperty<> . getActualType ( ) ) && super. isMapped ( org.springframework.data.rest.core.mapping.PersistentProperty<> ) ; }  <METHOD_END>
