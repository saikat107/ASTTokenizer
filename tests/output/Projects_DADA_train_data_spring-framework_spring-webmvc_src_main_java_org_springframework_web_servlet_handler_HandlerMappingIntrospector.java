<METHOD_START> public void ( ApplicationContext org.springframework.web.servlet.handler.ApplicationContext ) { this . java.util.List<org.springframework.web.servlet.handler.HandlerMapping> = java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ( org.springframework.web.servlet.handler.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ( ApplicationContext org.springframework.web.servlet.handler.ApplicationContext ) { java.util.Map<java.lang.String,org.springframework.web.servlet.handler.HandlerMapping> < java.lang.String , HandlerMapping > java.util.Map<java.lang.String,org.springframework.web.servlet.handler.HandlerMapping> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.web.servlet.handler.ApplicationContext , HandlerMapping .class , true , false ) ; if ( ! java.util.Map<java.lang.String,org.springframework.web.servlet.handler.HandlerMapping> . isEmpty ( ) ) { java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> = new java.util.ArrayList <> ( java.util.Map<java.lang.String,org.springframework.web.servlet.handler.HandlerMapping> . values ( ) ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ) ; return java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ; } return java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ( org.springframework.web.servlet.handler.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ( ApplicationContext org.springframework.web.servlet.handler.ApplicationContext ) { java.util.Properties java.util.Properties ; java.lang.String java.lang.String = STRING ; try { Resource org.springframework.web.servlet.handler.Resource = new ClassPathResource ( java.lang.String , DispatcherServlet .class ) ; java.util.Properties = PropertiesLoaderUtils . loadProperties ( org.springframework.web.servlet.handler.Resource ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + java.io.IOException . java.lang.String ( ) ) ; } java.lang.String java.lang.String = java.util.Properties . java.lang.String ( HandlerMapping .class . java.lang.String ( ) ) ; java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> = new java.util.ArrayList<org.springframework.web.servlet.handler.HandlerMapping> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , DispatcherServlet .class . java.lang.ClassLoader ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.handler.ApplicationContext . getAutowireCapableBeanFactory ( ) . createBean ( java.lang.Class<> ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMapping> . add ( ( HandlerMapping ) java.lang.Object ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } } return java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.handler.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ( ) { return this . java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.handler.MatchableHandlerMapping org.springframework.web.servlet.handler.MatchableHandlerMapping ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) throws java.lang.Exception { HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest = new org.springframework.web.servlet.handler.HandlerMappingIntrospector.RequestAttributeChangeIgnoringWrapper ( org.springframework.web.servlet.handler.HttpServletRequest ) ; for ( HandlerMapping org.springframework.web.servlet.handler.HandlerMapping : this . java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.handler.HandlerMapping . getHandler ( org.springframework.web.servlet.handler.HttpServletRequest ) ; if ( java.lang.Object == null ) { continue; } if ( org.springframework.web.servlet.handler.HandlerMapping instanceof MatchableHandlerMapping ) { return ( ( MatchableHandlerMapping ) org.springframework.web.servlet.handler.HandlerMapping ) ; } throw new java.lang.IllegalStateException ( STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.handler.CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest = new org.springframework.web.servlet.handler.HandlerMappingIntrospector.RequestAttributeChangeIgnoringWrapper ( org.springframework.web.servlet.handler.HttpServletRequest ) ; for ( HandlerMapping org.springframework.web.servlet.handler.HandlerMapping : this . java.util.List<org.springframework.web.servlet.handler.HandlerMapping> ) { HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = null ; try { org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerMapping . getHandler ( org.springframework.web.servlet.handler.HttpServletRequest ) ; } catch ( java.lang.Exception java.lang.Exception ) { } if ( org.springframework.web.servlet.handler.HandlerExecutionChain == null ) { continue; } if ( org.springframework.web.servlet.handler.HandlerExecutionChain . getInterceptors ( ) != null ) { for ( HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor : org.springframework.web.servlet.handler.HandlerExecutionChain . getInterceptors ( ) ) { if ( org.springframework.web.servlet.handler.HandlerInterceptor instanceof CorsConfigurationSource ) { return ( ( CorsConfigurationSource ) org.springframework.web.servlet.handler.HandlerInterceptor ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HttpServletRequest ) ; } } } if ( org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) instanceof CorsConfigurationSource ) { return ( ( CorsConfigurationSource ) org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HttpServletRequest ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public void ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { super( org.springframework.web.servlet.handler.HttpServletRequest ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { }  <METHOD_END>
