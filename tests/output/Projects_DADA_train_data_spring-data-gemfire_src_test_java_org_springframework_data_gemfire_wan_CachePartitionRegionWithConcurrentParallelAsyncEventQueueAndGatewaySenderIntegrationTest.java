<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.wan.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.Region<,> . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.wan.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.wan.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; assertTrue ( org.springframework.data.gemfire.wan.Region<,> . getAttributes ( ) . getAsyncEventQueueIds ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.wan.Region<,> . getAttributes ( ) . getGatewaySenderIds ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue . getAsyncEventListener ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.AsyncEventQueue . getDispatcherThreads ( ) ) ; assertTrue ( org.springframework.data.gemfire.wan.AsyncEventQueue . isParallel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.wan.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getRemoteDSId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.wan.GatewaySender . getDispatcherThreads ( ) ) ; assertTrue ( org.springframework.data.gemfire.wan.GatewaySender . isParallel ( ) ) ; assertFalse ( org.springframework.data.gemfire.wan.GatewaySender . isRunning ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.util.List<org.springframework.data.gemfire.wan.AsyncEvent> < AsyncEvent > java.util.List<org.springframework.data.gemfire.wan.AsyncEvent> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
