<METHOD_START> public static < S > org.springframework.data.util.ClassTypeInformation<S> < S > org.springframework.data.util.ClassTypeInformation<S> ( java.lang.Class<S> < S > java.lang.Class<S> ) { Assert . notNull ( java.lang.Class<S> , STRING ) ; java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>> < org.springframework.data.util.ClassTypeInformation<?> < ? > > java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>> = java.util.Map<java.lang.Class<?>,java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>>> . java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>> ( java.lang.Class<S> ) ; TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>> == null ? null : java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>> . org.springframework.data.util.ClassTypeInformation<?> ( ) ; if ( org.springframework.data.util.TypeInformation<> != null ) { return ( org.springframework.data.util.ClassTypeInformation<S> < S > ) org.springframework.data.util.TypeInformation<> ; } org.springframework.data.util.ClassTypeInformation<S> < S > org.springframework.data.util.ClassTypeInformation<S> = new org.springframework.data.util.ClassTypeInformation<S> <> ( java.lang.Class<S> ) ; java.util.Map<java.lang.Class<?>,java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>>> . java.lang.ref.Reference<org.springframework.data.util.ClassTypeInformation<?>> ( java.lang.Class<S> , new java.lang.ref.WeakReference<org.springframework.data.util.ClassTypeInformation<?>> <> ( org.springframework.data.util.ClassTypeInformation<S> ) ) ; return org.springframework.data.util.ClassTypeInformation<S> ; }  <METHOD_END>
<METHOD_START> public static < S > org.springframework.data.util.TypeInformation<S> < S > org.springframework.data.util.TypeInformation<S> ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; return ( TypeInformation < S > ) org.springframework.data.util.ClassTypeInformation . org.springframework.data.util.ClassTypeInformation<> ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) . createInfo ( java.lang.reflect.Method . java.lang.reflect.Type ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<S> < S > java.lang.Class<S> ) { super( ClassUtils . getUserClass ( java.lang.Class<S> ) , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( java.lang.Class<S> ) ); this . java.lang.Class<S> = java.lang.Class<S> ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( java.lang.Class<> , new java.util.HashSet<java.lang.reflect.Type> <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<java.lang.reflect.Type> < java.lang.reflect.Type > java.util.Collection<java.lang.reflect.Type> ) { if ( java.util.Collection<java.lang.reflect.Type> . boolean ( java.lang.Class<> ) ) { return java.util.Collections . java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( ) ; } else { java.util.Collection<java.lang.reflect.Type> . boolean ( java.lang.Class<> ) ; } java.util.Map<java.lang.reflect.TypeVariable,java.lang.reflect.Type> < java.lang.reflect.TypeVariable , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable,java.lang.reflect.Type> = GenericTypeResolver . getTypeVariableMap ( java.lang.Class<> ) ; java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> <> ( java.util.Map<java.lang.reflect.TypeVariable,java.lang.reflect.Type> . int ( ) ) ; for ( java.util.Map.Entry<java.lang.reflect.TypeVariable,java.lang.reflect.Type> < java.lang.reflect.TypeVariable , java.lang.reflect.Type > java.util.Map.Entry<java.lang.reflect.TypeVariable,java.lang.reflect.Type> : java.util.Map<java.lang.reflect.TypeVariable,java.lang.reflect.Type> . java.util.Set<java.util.Map.Entry<java.lang.reflect.TypeVariable,java.lang.reflect.Type>> ( ) ) { java.lang.reflect.Type java.lang.reflect.Type = java.util.Map.Entry<java.lang.reflect.TypeVariable,java.lang.reflect.Type> . java.lang.reflect.Type ( ) ; java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . java.lang.reflect.Type ( java.util.Map.Entry<java.lang.reflect.TypeVariable,java.lang.reflect.Type> . java.lang.reflect.TypeVariable ( ) , java.util.Map.Entry<java.lang.reflect.TypeVariable,java.lang.reflect.Type> . java.lang.reflect.Type ( ) ) ; if ( java.lang.reflect.Type instanceof java.lang.Class ) { for ( java.util.Map.Entry<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map.Entry<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> : java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type , java.util.Collection<java.lang.reflect.Type> ) . java.util.Set<java.util.Map.Entry<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type>> ( ) ) { if ( ! java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . boolean ( java.util.Map.Entry<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . java.lang.reflect.TypeVariable<?> ( ) ) ) { java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . java.lang.reflect.Type ( java.util.Map.Entry<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . java.lang.reflect.TypeVariable<?> ( ) , java.util.Map.Entry<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . java.lang.reflect.Type ( ) ) ; } } } } return java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<S> < S > java.lang.Class<S> ( ) { return java.lang.Class<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.util.ClassTypeInformation<?> < ? > org.springframework.data.util.ClassTypeInformation<?> ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeInformation < ? > org.springframework.data.util.TypeInformation<?> ) { return java.lang.Class<S> ( ) . boolean ( org.springframework.data.util.TypeInformation<> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.util.TypeInformation<? extends S> < ? extends S > org.springframework.data.util.TypeInformation<? extends S> ( org.springframework.data.util.ClassTypeInformation<?> < ? > org.springframework.data.util.ClassTypeInformation<?> ) { return ( TypeInformation < ? extends S > ) org.springframework.data.util.ClassTypeInformation<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<S> . java.lang.String ( ) ; }  <METHOD_END>
