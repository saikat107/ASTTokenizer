<METHOD_START> public void ( CrudMethods org.springframework.data.rest.core.mapping.CrudMethods ) { Assert . notNull ( org.springframework.data.rest.core.mapping.CrudMethods , STRING ) ; this . org.springframework.data.rest.core.mapping.CrudMethodsSupportedHttpMethods.ExposureAwareCrudMethods = new org.springframework.data.rest.core.mapping.CrudMethodsSupportedHttpMethods.DefaultExposureAwareCrudMethods ( org.springframework.data.rest.core.mapping.CrudMethods ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> < HttpMethod > java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> ( ResourceType org.springframework.data.rest.core.mapping.ResourceType ) { Assert . notNull ( org.springframework.data.rest.core.mapping.ResourceType , STRING ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> < HttpMethod > java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> = new java.util.HashSet<org.springframework.data.rest.core.mapping.HttpMethod> < HttpMethod > ( ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( OPTIONS ) ; switch ( org.springframework.data.rest.core.mapping.ResourceType ) { case COLLECTION : if ( org.springframework.data.rest.core.mapping.CrudMethodsSupportedHttpMethods.ExposureAwareCrudMethods . boolean ( ) ) { java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( GET ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( HEAD ) ; } if ( org.springframework.data.rest.core.mapping.CrudMethodsSupportedHttpMethods.ExposureAwareCrudMethods . boolean ( ) ) { java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( POST ) ; } break; case ITEM : if ( org.springframework.data.rest.core.mapping.CrudMethodsSupportedHttpMethods.ExposureAwareCrudMethods . boolean ( ) ) { java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( DELETE ) ; } if ( org.springframework.data.rest.core.mapping.CrudMethodsSupportedHttpMethods.ExposureAwareCrudMethods . boolean ( ) ) { java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( GET ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( HEAD ) ; } if ( org.springframework.data.rest.core.mapping.CrudMethodsSupportedHttpMethods.ExposureAwareCrudMethods . boolean ( ) ) { java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( PUT ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( PATCH ) ; } break; default: throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.rest.core.mapping.ResourceType ) ) ; } return java.util.Collections . java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> ( java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> < HttpMethod > java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> ( PersistentProperty < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> ) { if ( ! org.springframework.data.rest.core.mapping.PersistentProperty<> . isAssociation ( ) ) { return java.util.Collections . java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> ( ) ; } java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> < HttpMethod > java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> = new java.util.HashSet<org.springframework.data.rest.core.mapping.HttpMethod> < HttpMethod > ( ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( GET ) ; if ( org.springframework.data.rest.core.mapping.PersistentProperty<> . isWritable ( ) && java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> ( ITEM ) . contains ( PUT ) ) { java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( PUT ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( PATCH ) ; java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( DELETE ) ; } if ( org.springframework.data.rest.core.mapping.PersistentProperty<> . isCollectionLike ( ) && org.springframework.data.rest.core.mapping.PersistentProperty<> . isWritable ( ) ) { java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> . add ( POST ) ; } return java.util.Set<org.springframework.data.rest.core.mapping.HttpMethod> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ( org.springframework.data.rest.core.mapping.CrudMethods . getSaveMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ( org.springframework.data.rest.core.mapping.CrudMethods . getDeleteMethod ( ) ) && org.springframework.data.rest.core.mapping.CrudMethods . hasFindOneMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ( org.springframework.data.rest.core.mapping.CrudMethods . getFindOneMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ( org.springframework.data.rest.core.mapping.CrudMethods . getFindAllMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ) { return java.util.Optional<java.lang.reflect.Method> . java.util.Optional<java.lang.Object> ( java.lang.reflect.Method -> { RestResource org.springframework.data.rest.core.mapping.RestResource = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , RestResource .class ) ; return org.springframework.data.rest.core.mapping.RestResource == null ? true : org.springframework.data.rest.core.mapping.RestResource . exported ( ) ; } ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
