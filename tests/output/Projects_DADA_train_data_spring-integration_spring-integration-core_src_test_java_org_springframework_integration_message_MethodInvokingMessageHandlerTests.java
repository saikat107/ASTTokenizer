<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageHandler org.springframework.integration.message.MethodInvokingMessageHandler = new MethodInvokingMessageHandler ( new org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestSink ( ) , STRING ) ; org.springframework.integration.message.MethodInvokingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new MethodInvokingMessageHandler ( new org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestSink ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { Message < ? > org.springframework.integration.message.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; try { MethodInvokingMessageHandler org.springframework.integration.message.MethodInvokingMessageHandler = new MethodInvokingMessageHandler ( new org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestSink ( ) , STRING ) ; org.springframework.integration.message.MethodInvokingMessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; } catch ( MessagingException org.springframework.integration.message.MessagingException ) { assertEquals ( org.springframework.integration.message.MessagingException . getFailedMessage ( ) , org.springframework.integration.message.Message<> ) ; throw org.springframework.integration.message.MessagingException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { new MethodInvokingMessageHandler ( new org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestSink ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestApplicationContext org.springframework.integration.message.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; java.util.concurrent.SynchronousQueue<java.lang.String> < java.lang.String > java.util.concurrent.SynchronousQueue<java.lang.String> = new java.util.concurrent.SynchronousQueue<java.lang.String> < java.lang.String > ( ) ; org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestBean org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestBean = new org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestBean ( java.util.concurrent.SynchronousQueue<java.lang.String> ) ; QueueChannel org.springframework.integration.message.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.message.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.message.QueueChannel ) ; Message < java.lang.String > org.springframework.integration.message.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.message.QueueChannel . send ( org.springframework.integration.message.Message<java.lang.String> ) ; assertNull ( java.util.concurrent.SynchronousQueue<java.lang.String> . java.lang.String ( ) ) ; MethodInvokingMessageHandler org.springframework.integration.message.MethodInvokingMessageHandler = new MethodInvokingMessageHandler ( org.springframework.integration.message.MethodInvokingMessageHandlerTests.TestBean , STRING ) ; PollingConsumer org.springframework.integration.message.PollingConsumer = new PollingConsumer ( org.springframework.integration.message.QueueChannel , org.springframework.integration.message.MethodInvokingMessageHandler ) ; org.springframework.integration.message.PollingConsumer . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; org.springframework.integration.message.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.message.PollingConsumer ) ; org.springframework.integration.message.TestApplicationContext . refresh ( ) ; java.lang.String java.lang.String = java.util.concurrent.SynchronousQueue<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.message.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.BlockingQueue<java.lang.String> < java.lang.String > java.util.concurrent.BlockingQueue<java.lang.String> ) { this . java.util.concurrent.BlockingQueue<java.lang.String> = java.util.concurrent.BlockingQueue<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { try { this . java.util.concurrent.BlockingQueue<java.lang.String> . void ( java.lang.String ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
