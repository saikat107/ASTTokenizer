<METHOD_START> public static org.springframework.data.cassandra.config.BeanDefinitionBuilder org.springframework.data.cassandra.config.BeanDefinitionBuilder ( ListableBeanFactory org.springframework.data.cassandra.config.ListableBeanFactory , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , BeanDefinitionBuilderArgument ... org.springframework.data.cassandra.config.BeanDefinitionBuilderArgument[] ) { java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.data.cassandra.config.ListableBeanFactory , java.lang.Class<> , true , false ) ; if ( java.lang.String[] . int > NUMBER ) { return null ; } BeanDefinitionBuilder org.springframework.data.cassandra.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( java.lang.Class<> ) ; if ( org.springframework.data.cassandra.config.BeanDefinitionBuilderArgument[] == null ) { return org.springframework.data.cassandra.config.BeanDefinitionBuilder ; } for ( BeanDefinitionBuilderArgument org.springframework.data.cassandra.config.BeanDefinitionBuilderArgument : org.springframework.data.cassandra.config.BeanDefinitionBuilderArgument[] ) { if ( arg . reference ) { org.springframework.data.cassandra.config.BeanDefinitionBuilder . addConstructorArgReference ( arg . value . toString ( ) ) ; } else { org.springframework.data.cassandra.config.BeanDefinitionBuilder . addConstructorArgValue ( arg . value ) ; } } return org.springframework.data.cassandra.config.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.cassandra.config.BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder ( BeanDefinitionRegistry org.springframework.data.cassandra.config.BeanDefinitionRegistry , ListableBeanFactory org.springframework.data.cassandra.config.ListableBeanFactory , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean , boolean boolean , boolean boolean ) { BeanDefinitionHolder [] org.springframework.data.cassandra.config.BeanDefinitionHolder[] = org.springframework.data.cassandra.config.BeanDefinitionHolder[] ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , org.springframework.data.cassandra.config.ListableBeanFactory , java.lang.Class<> , boolean , boolean ) ; if ( definitions . length == NUMBER ) { return org.springframework.data.cassandra.config.BeanDefinitionHolder[] [ NUMBER ] ; } if ( definitions . length == NUMBER && ! boolean ) { return null ; } java.lang.String [] java.lang.String[] = new java.lang.String [ definitions . length ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String[] [ int ] = org.springframework.data.cassandra.config.BeanDefinitionHolder[] [ int ] . getBeanName ( ) ; } throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , definitions . length , StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.cassandra.config.BeanDefinitionHolder [] org.springframework.data.cassandra.config.BeanDefinitionHolder[] ( BeanDefinitionRegistry org.springframework.data.cassandra.config.BeanDefinitionRegistry , ListableBeanFactory org.springframework.data.cassandra.config.ListableBeanFactory , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean , boolean boolean ) { java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.data.cassandra.config.ListableBeanFactory , java.lang.Class<> , boolean , boolean ) ; if ( java.lang.String[] . int == NUMBER ) { return new BeanDefinitionHolder [] {} ; } BeanDefinitionHolder [] org.springframework.data.cassandra.config.BeanDefinitionHolder[] = new BeanDefinitionHolder [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] ; BeanDefinition org.springframework.data.cassandra.config.BeanDefinition = null ; while ( org.springframework.data.cassandra.config.BeanDefinition == null ) { try { org.springframework.data.cassandra.config.BeanDefinition = org.springframework.data.cassandra.config.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; } catch ( NoSuchBeanDefinitionException org.springframework.data.cassandra.config.NoSuchBeanDefinitionException ) { if ( FactoryBean .class . boolean ( java.lang.Class<> ) ) { java.lang.String = java.lang.String . java.lang.String ( BeanFactory . FACTORY_BEAN_PREFIX . length ( ) ) ; } else { throw org.springframework.data.cassandra.config.NoSuchBeanDefinitionException ; } } } org.springframework.data.cassandra.config.BeanDefinitionHolder[] [ int ] = new BeanDefinitionHolder ( org.springframework.data.cassandra.config.BeanDefinition , java.lang.String ) ; } return org.springframework.data.cassandra.config.BeanDefinitionHolder[] ; }  <METHOD_END>
