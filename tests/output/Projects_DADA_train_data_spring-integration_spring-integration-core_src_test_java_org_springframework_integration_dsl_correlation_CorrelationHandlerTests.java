<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.dsl.correlation.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.dsl.correlation.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.correlation.QueueChannel ) . setHeader ( STRING , STRING ) . build ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.dsl.correlation.Message<?> = org.springframework.integration.dsl.correlation.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.correlation.Message<> ) ; assertFalse ( org.springframework.integration.dsl.correlation.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; assertTrue ( org.springframework.integration.dsl.correlation.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.dsl.correlation.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( int + NUMBER , org.springframework.integration.dsl.correlation.Message<> . getPayload ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Character> < java.lang.Character > java.util.List<java.lang.Character> = java.util.Arrays . java.util.List<java.lang.Character> ( 'a' , 'b' , 'c' , 'd' , 'e' ) ; QueueChannel org.springframework.integration.dsl.correlation.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.dsl.correlation.MessageChannel . send ( MessageBuilder . withPayload ( java.util.List<java.lang.Character> ) . setReplyChannel ( org.springframework.integration.dsl.correlation.QueueChannel ) . build ( ) ) ; Message < ? > org.springframework.integration.dsl.correlation.Message<?> = org.springframework.integration.dsl.correlation.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.correlation.Message<> ) ; assertThat ( org.springframework.integration.dsl.correlation.Message<> . getPayload ( ) , instanceOf ( java.util.List .class ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.integration.dsl.correlation.Message<> . getPayload ( ) ; for ( int int = NUMBER ; int < java.util.List<java.lang.Character> . int ( ) ; int ++ ) { assertEquals ( java.util.List<java.lang.Character> . java.lang.Character ( int ) , java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.correlation.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.correlation.Message<?> = this . org.springframework.integration.dsl.correlation.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.correlation.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.correlation.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.dsl.correlation.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( java.lang.String , STRING ) . build ( ) ; this . org.springframework.integration.dsl.correlation.PollableChannel . send ( org.springframework.integration.dsl.correlation.Message<> ) ; Message < ? > org.springframework.integration.dsl.correlation.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( java.lang.String , STRING ) . build ( ) ; this . org.springframework.integration.dsl.correlation.MessageChannel . send ( org.springframework.integration.dsl.correlation.Message<> ) ; Message < ? > org.springframework.integration.dsl.correlation.Message<?> = this . org.springframework.integration.dsl.correlation.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.correlation.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.correlation.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.Executor java.util.concurrent.Executor ( ) { return java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.correlation.CorrelationHandlerTests.TestSplitterPojo org.springframework.integration.dsl.correlation.CorrelationHandlerTests.TestSplitterPojo ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; return new org.springframework.integration.dsl.correlation.CorrelationHandlerTests.TestSplitterPojo ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.correlation.IntegrationFlow org.springframework.integration.dsl.correlation.IntegrationFlow ( ) { return f -> f . enrichHeaders ( s -> s . header ( STRING , STRING ) ) . split ( STRING , STRING , c -> c . applySequence ( false ) ) . channel ( MessageChannels . executor ( taskExecutor ( ) ) ) . split ( Message .class , Message < ? > :: getPayload , c -> c . applySequence ( false ) ) . channel ( MessageChannels . executor ( taskExecutor ( ) ) ) . split ( s -> s . applySequence ( false ) . delimiters ( STRING ) ) . channel ( MessageChannels . executor ( taskExecutor ( ) ) ) .< String , Integer > transform ( Integer :: parseInt ) . enrichHeaders ( h -> h . headerFunction ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER , Message :: getPayload ) ) . resequence ( r -> r . releasePartialSequences ( true ) . correlationExpression ( STRING ) ) . headerFilter ( STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.correlation.IntegrationFlow org.springframework.integration.dsl.correlation.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING , true ) . split ( ) . channel ( MessageChannels . executor ( java.util.concurrent.Executor ( ) ) ) . resequence ( ) . aggregate ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.correlation.IntegrationFlow org.springframework.integration.dsl.correlation.IntegrationFlow ( ) { return flow -> flow . publishSubscribeChannel ( s -> s . applySequence ( true ) . subscribe ( f -> f . handle ( ( p , h ) -> STRING ) . channel ( STRING ) ) . subscribe ( f -> f . handle ( ( p , h ) -> STRING ) . channel ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.correlation.IntegrationFlow org.springframework.integration.dsl.correlation.IntegrationFlow ( ) { return flow -> flow . aggregate ( a -> a . outputProcessor ( g -> g . getMessages ( ) . stream ( ) . map ( m -> ( String ) m . getPayload ( ) ) . collect ( Collectors . joining ( STRING ) ) ) ) . channel ( MessageChannels . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.correlation.IntegrationFlow org.springframework.integration.dsl.correlation.IntegrationFlow ( ) { return f -> f . barrier ( NUMBER , b -> b . correlationStrategy ( new HeaderAttributeCorrelationStrategy ( BARRIER ) ) . outputProcessor ( g -> g . getMessages ( ) . stream ( ) . skip ( NUMBER ) . findFirst ( ) . get ( ) ) ) . channel ( MessageChannels . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ DependsOn ( STRING ) public org.springframework.integration.dsl.correlation.IntegrationFlow org.springframework.integration.dsl.correlation.IntegrationFlow ( MessageTriggerAction org.springframework.integration.dsl.correlation.MessageTriggerAction ) { return IntegrationFlows . from ( MessageChannels . queue ( STRING ) ) . trigger ( org.springframework.integration.dsl.correlation.MessageTriggerAction , e -> e . poller ( p -> p . fixedDelay ( NUMBER ) ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> ( ) { return java.util.Arrays . java.util.List<java.util.List<java.lang.String>> ( this . java.util.List<java.lang.String> , this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
