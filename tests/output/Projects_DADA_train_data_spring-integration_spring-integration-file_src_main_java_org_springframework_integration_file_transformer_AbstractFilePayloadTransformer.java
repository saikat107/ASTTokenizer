<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.file.transformer.BeanFactory ) throws org.springframework.integration.file.transformer.BeansException { this . org.springframework.integration.file.transformer.BeanFactory = org.springframework.integration.file.transformer.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.file.transformer.MessageBuilderFactory org.springframework.integration.file.transformer.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.file.transformer.BeanFactory != null ) { this . org.springframework.integration.file.transformer.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.file.transformer.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.file.transformer.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.integration.file.transformer.Message<?> < ? > org.springframework.integration.file.transformer.Message<?> ( Message < ? > org.springframework.integration.file.transformer.Message<?> ) { try { Assert . notNull ( org.springframework.integration.file.transformer.Message<> , STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.file.transformer.Message<> . getPayload ( ) ; Assert . notNull ( java.lang.Object , STRING ) ; Assert . isInstanceOf ( java.io.File .class , java.lang.Object , STRING ) ; java.io.File java.io.File = ( java.io.File ) java.lang.Object ; T T = this . T ( java.io.File ) ; Message < ? > org.springframework.integration.file.transformer.Message<?> = org.springframework.integration.file.transformer.MessageBuilderFactory ( ) . withPayload ( T ) . copyHeaders ( org.springframework.integration.file.transformer.Message<> . getHeaders ( ) ) . setHeaderIfAbsent ( FileHeaders . ORIGINAL_FILE , java.io.File ) . setHeaderIfAbsent ( FileHeaders . FILENAME , java.io.File . java.lang.String ( ) ) . build ( ) ; if ( this . boolean ) { if ( ! java.io.File . boolean ( ) && this . org.springframework.integration.file.transformer.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.file.transformer.Log . warn ( STRING + java.io.File + STRING ) ; } } return org.springframework.integration.file.transformer.Message<> ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( org.springframework.integration.file.transformer.Message<> , STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected abstract T T ( java.io.File java.io.File ) throws java.lang.Exception ;  <METHOD_END>
