<METHOD_START> public void ( byte [] byte[] , HttpStatus org.springframework.mock.http.client.HttpStatus ) { super( byte[] ); Assert . notNull ( org.springframework.mock.http.client.HttpStatus , STRING ) ; this . org.springframework.mock.http.client.HttpStatus = org.springframework.mock.http.client.HttpStatus ; }  <METHOD_END>
<METHOD_START> public void ( java.io.InputStream java.io.InputStream , HttpStatus org.springframework.mock.http.client.HttpStatus ) { super( java.io.InputStream ); Assert . notNull ( org.springframework.mock.http.client.HttpStatus , STRING ) ; this . org.springframework.mock.http.client.HttpStatus = org.springframework.mock.http.client.HttpStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.HttpStatus org.springframework.mock.http.client.HttpStatus ( ) java.io.IOException { return this . org.springframework.mock.http.client.HttpStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.io.IOException { return this . org.springframework.mock.http.client.HttpStatus . value ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.io.IOException { return this . org.springframework.mock.http.client.HttpStatus . getReasonPhrase ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.io.InputStream java.io.InputStream = getBody ( ) ; if ( java.io.InputStream != null ) { java.io.InputStream . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { } }  <METHOD_END>
