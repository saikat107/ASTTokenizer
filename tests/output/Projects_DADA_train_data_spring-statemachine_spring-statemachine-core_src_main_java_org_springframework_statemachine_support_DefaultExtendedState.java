<METHOD_START> public void ( ) { this . java.util.Map<java.lang.Object,java.lang.Object> = new ObservableMap < java.lang.Object , java.lang.Object > ( new java.util.concurrent.ConcurrentHashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) , new org.springframework.statemachine.support.DefaultExtendedState.LocalMapChangeListener ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { this . java.util.Map<java.lang.Object,java.lang.Object> = java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ) { return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.Object java.lang.Object = this . java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object ) ; if ( java.lang.Object == null ) { return null ; } if ( ! java.lang.Class<T> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING + java.lang.Class<T> + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ExtendedStateChangeListener org.springframework.statemachine.support.ExtendedStateChangeListener ) { this . org.springframework.statemachine.support.ExtendedStateChangeListener = org.springframework.statemachine.support.ExtendedStateChangeListener ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.Map<java.lang.Object,java.lang.Object> + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( org.springframework.statemachine.support.ExtendedStateChangeListener != null ) { org.springframework.statemachine.support.ExtendedStateChangeListener . changed ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( org.springframework.statemachine.support.ExtendedStateChangeListener != null ) { org.springframework.statemachine.support.ExtendedStateChangeListener . changed ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( org.springframework.statemachine.support.ExtendedStateChangeListener != null ) { org.springframework.statemachine.support.ExtendedStateChangeListener . changed ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
