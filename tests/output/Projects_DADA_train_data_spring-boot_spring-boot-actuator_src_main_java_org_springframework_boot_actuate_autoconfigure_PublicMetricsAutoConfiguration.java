<METHOD_START> public void ( @ ExportMetricReader ObjectProvider < java.util.List<org.springframework.boot.actuate.autoconfigure.MetricReader> < MetricReader > > org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.List<org.springframework.boot.actuate.autoconfigure.MetricReader>> ) { this . java.util.List<org.springframework.boot.actuate.autoconfigure.MetricReader> = org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.List<org.springframework.boot.actuate.autoconfigure.MetricReader>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.SystemPublicMetrics org.springframework.boot.actuate.autoconfigure.SystemPublicMetrics ( ) { return new SystemPublicMetrics ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.MetricReaderPublicMetrics org.springframework.boot.actuate.autoconfigure.MetricReaderPublicMetrics ( ) { return new MetricReaderPublicMetrics ( new CompositeMetricReader ( this . java.util.List<org.springframework.boot.actuate.autoconfigure.MetricReader> == null ? new MetricReader [ NUMBER ] : this . java.util.List<org.springframework.boot.actuate.autoconfigure.MetricReader> . toArray ( new MetricReader [ this . java.util.List<org.springframework.boot.actuate.autoconfigure.MetricReader> . size ( ) ] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( RichGaugeReader .class ) public org.springframework.boot.actuate.autoconfigure.RichGaugeReaderPublicMetrics org.springframework.boot.actuate.autoconfigure.RichGaugeReaderPublicMetrics ( RichGaugeReader org.springframework.boot.actuate.autoconfigure.RichGaugeReader ) { return new RichGaugeReaderPublicMetrics ( org.springframework.boot.actuate.autoconfigure.RichGaugeReader ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnBean ( DataSourcePoolMetadataProvider .class ) public org.springframework.boot.actuate.autoconfigure.DataSourcePublicMetrics org.springframework.boot.actuate.autoconfigure.DataSourcePublicMetrics ( ) { return new DataSourcePublicMetrics ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.actuate.autoconfigure.TomcatPublicMetrics org.springframework.boot.actuate.autoconfigure.TomcatPublicMetrics ( ) { return new TomcatPublicMetrics ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnBean ( CacheStatisticsProvider .class ) public org.springframework.boot.actuate.autoconfigure.CachePublicMetrics org.springframework.boot.actuate.autoconfigure.CachePublicMetrics ( ) { return new CachePublicMetrics ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME ) @ ConditionalOnMissingBean ( value = IntegrationManagementConfigurer .class , name = IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME , search = SearchStrategy . CURRENT ) public org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer ( ) { IntegrationManagementConfigurer org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer = new IntegrationManagementConfigurer ( ) ; org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer . setDefaultCountsEnabled ( true ) ; org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer . setDefaultStatsEnabled ( true ) ; return org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.MetricReaderPublicMetrics org.springframework.boot.actuate.autoconfigure.MetricReaderPublicMetrics ( IntegrationManagementConfigurer org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer ) { return new MetricReaderPublicMetrics ( new SpringIntegrationMetricReader ( org.springframework.boot.actuate.autoconfigure.IntegrationManagementConfigurer ) ) ; }  <METHOD_END>
