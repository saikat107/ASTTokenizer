<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return MongoRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mongodb.repository.config.Document>> ( Document .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( MongoRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.mongodb.repository.config.BeanDefinitionBuilder , XmlRepositoryConfigurationSource org.springframework.data.mongodb.repository.config.XmlRepositoryConfigurationSource ) { org.w3c.dom.Element org.w3c.dom.Element = org.springframework.data.mongodb.repository.config.XmlRepositoryConfigurationSource . getElement ( ) ; ParsingUtils . setPropertyReference ( org.springframework.data.mongodb.repository.config.BeanDefinitionBuilder , org.w3c.dom.Element , java.lang.String , STRING ) ; ParsingUtils . setPropertyValue ( org.springframework.data.mongodb.repository.config.BeanDefinitionBuilder , org.w3c.dom.Element , java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.mongodb.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.mongodb.repository.config.AnnotationRepositoryConfigurationSource ) { AnnotationAttributes org.springframework.data.mongodb.repository.config.AnnotationAttributes = org.springframework.data.mongodb.repository.config.AnnotationRepositoryConfigurationSource . getAttributes ( ) ; org.springframework.data.mongodb.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , org.springframework.data.mongodb.repository.config.AnnotationAttributes . getString ( STRING ) ) ; org.springframework.data.mongodb.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.mongodb.repository.config.AnnotationAttributes . getBoolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.data.mongodb.repository.config.BeanDefinitionRegistry , RepositoryConfigurationSource org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource ) { super. registerBeansForRoot ( org.springframework.data.mongodb.repository.config.BeanDefinitionRegistry , org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource ) ; if ( ! org.springframework.data.mongodb.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( BeanNames . MAPPING_CONTEXT_BEAN_NAME ) ) { RootBeanDefinition org.springframework.data.mongodb.repository.config.RootBeanDefinition = new RootBeanDefinition ( MongoMappingContext .class ) ; org.springframework.data.mongodb.repository.config.RootBeanDefinition . setRole ( AbstractBeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.data.mongodb.repository.config.RootBeanDefinition . setSource ( org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource . getSource ( ) ) ; org.springframework.data.mongodb.repository.config.BeanDefinitionRegistry . registerBeanDefinition ( BeanNames . MAPPING_CONTEXT_BEAN_NAME , org.springframework.data.mongodb.repository.config.RootBeanDefinition ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( RepositoryMetadata org.springframework.data.mongodb.repository.config.RepositoryMetadata ) { return ! org.springframework.data.mongodb.repository.config.RepositoryMetadata . isReactiveRepository ( ) ; }  <METHOD_END>
