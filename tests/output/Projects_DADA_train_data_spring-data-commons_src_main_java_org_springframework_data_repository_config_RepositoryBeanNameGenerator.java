<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( BeanDefinition org.springframework.data.repository.config.BeanDefinition , BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry ) { AnnotatedBeanDefinition org.springframework.data.repository.config.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( java.lang.Class<?> ( org.springframework.data.repository.config.BeanDefinition ) ) ; return org.springframework.data.repository.config.BeanNameGenerator . generateBeanName ( org.springframework.data.repository.config.AnnotatedBeanDefinition , org.springframework.data.repository.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( BeanDefinition org.springframework.data.repository.config.BeanDefinition ) { java.lang.Object java.lang.Object = org.springframework.data.repository.config.BeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , java.lang.Class .class ) . getValue ( ) ; if ( java.lang.Object instanceof java.lang.Class<?> < ? > ) { return ( java.lang.Class<?> < ? > ) java.lang.Object ; } else { try { return ClassUtils . forName ( java.lang.Object . java.lang.String ( ) , java.lang.ClassLoader ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } }  <METHOD_END>
