<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . session . execute ( STRING ) ; this . org.springframework.cassandra.core.DefaultBridgedReactiveSession = new DefaultBridgedReactiveSession ( this . session , Schedulers . elastic ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING ; Mono < ReactiveResultSet > org.springframework.cassandra.core.Mono<org.springframework.cassandra.core.ReactiveResultSet> = org.springframework.cassandra.core.DefaultBridgedReactiveSession . execute ( java.lang.String ) ; KeyspaceMetadata org.springframework.cassandra.core.KeyspaceMetadata = org.springframework.cassandra.core.KeyspaceMetadata ( ) ; assertThat ( org.springframework.cassandra.core.KeyspaceMetadata . getTable ( STRING ) ) . isNull ( ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<org.springframework.cassandra.core.ReactiveResultSet> ) . consumeNextWith ( actual -> { assertThat ( actual . wasApplied ( ) ) . isTrue ( ) ; } ) . verifyComplete ( ) ; assertThat ( org.springframework.cassandra.core.KeyspaceMetadata . getTable ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.DefaultBridgedReactiveSession . execute ( STRING ) ) . expectError ( SyntaxError .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { session . execute ( STRING + STRING + STRING + STRING ) ; session . execute ( STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.DefaultBridgedReactiveSession . execute ( STRING ) ) . consumeNextWith ( actual -> { StepVerifier . create ( actual . rows ( ) ) . consumeNextWith ( row -> { assertThat ( row . getString ( STRING ) ) . isEqualTo ( STRING ) ; } ) . verifyComplete ( ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { session . execute ( STRING + STRING + STRING + STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.DefaultBridgedReactiveSession . prepare ( STRING ) ) . consumeNextWith ( actual -> { assertThat ( actual . getQueryString ( ) ) . isEqualTo ( STRING ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.core.KeyspaceMetadata org.springframework.cassandra.core.KeyspaceMetadata ( ) { return cluster . getMetadata ( ) . getKeyspace ( this . session . getLoggedKeyspace ( ) ) ; }  <METHOD_END>
