<METHOD_START> public void ( MongoClient org.springframework.data.mongodb.core.MongoClient , java.lang.String java.lang.String ) { this( new SimpleReactiveMongoDatabaseFactory ( org.springframework.data.mongodb.core.MongoClient , java.lang.String ) , null ); }  <METHOD_END>
<METHOD_START> public void ( ReactiveMongoDatabaseFactory org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory ) { this( org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory , null ); }  <METHOD_END>
<METHOD_START> public void ( ReactiveMongoDatabaseFactory org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory , MongoConverter org.springframework.data.mongodb.core.MongoConverter ) { Assert . notNull ( org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory , STRING ) ; this . org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory = org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory ; this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory . getExceptionTranslator ( ) ; this . org.springframework.data.mongodb.core.MongoConverter = org.springframework.data.mongodb.core.MongoConverter == null ? org.springframework.data.mongodb.core.MappingMongoConverter ( ) : org.springframework.data.mongodb.core.MongoConverter ; this . org.springframework.data.mongodb.core.QueryMapper = new QueryMapper ( this . org.springframework.data.mongodb.core.MongoConverter ) ; this . org.springframework.data.mongodb.core.UpdateMapper = new UpdateMapper ( this . org.springframework.data.mongodb.core.MongoConverter ) ; org.springframework.data.mongodb.core.MappingContext<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.MongoPersistentProperty> = this . org.springframework.data.mongodb.core.MongoConverter . getMappingContext ( ) ; if ( null != org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> && org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> instanceof MongoMappingContext ) { org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator = new MongoPersistentEntityIndexCreator ( ( MongoMappingContext ) org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> , ( collectionName ) -> IndexOperationsAdapter . blocking ( indexOps ( collectionName ) ) ) ; org.springframework.data.mongodb.core.ApplicationEventPublisher = new MongoMappingEventPublisher ( org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator ) ; if ( org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> instanceof ApplicationEventPublisherAware ) { ( ( ApplicationEventPublisherAware ) org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> ) . setApplicationEventPublisher ( org.springframework.data.mongodb.core.ApplicationEventPublisher ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( WriteResultChecking org.springframework.data.mongodb.core.WriteResultChecking ) { this . org.springframework.data.mongodb.core.WriteResultChecking = org.springframework.data.mongodb.core.WriteResultChecking == null ? org.springframework.data.mongodb.core.WriteResultChecking : org.springframework.data.mongodb.core.WriteResultChecking ; }  <METHOD_END>
<METHOD_START> public void void ( WriteConcern org.springframework.data.mongodb.core.WriteConcern ) { this . org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ; }  <METHOD_END>
<METHOD_START> public void void ( WriteConcernResolver org.springframework.data.mongodb.core.WriteConcernResolver ) { this . org.springframework.data.mongodb.core.WriteConcernResolver = org.springframework.data.mongodb.core.WriteConcernResolver ; }  <METHOD_END>
<METHOD_START> public void void ( ReadPreference org.springframework.data.mongodb.core.ReadPreference ) { this . org.springframework.data.mongodb.core.ReadPreference = org.springframework.data.mongodb.core.ReadPreference ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.data.mongodb.core.ApplicationContext ) throws org.springframework.data.mongodb.core.BeansException { void ( org.springframework.data.mongodb.core.ApplicationContext ) ; org.springframework.data.mongodb.core.ApplicationEventPublisher = org.springframework.data.mongodb.core.ApplicationContext ; if ( org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> instanceof ApplicationEventPublisherAware ) { ( ( ApplicationEventPublisherAware ) org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> ) . setApplicationEventPublisher ( org.springframework.data.mongodb.core.ApplicationEventPublisher ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.data.mongodb.core.ApplicationContext ) { java.lang.String [] java.lang.String[] = org.springframework.data.mongodb.core.ApplicationContext . getBeanNamesForType ( MongoPersistentEntityIndexCreator .class ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { MongoPersistentEntityIndexCreator org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator = org.springframework.data.mongodb.core.ApplicationContext . getBean ( java.lang.String , MongoPersistentEntityIndexCreator .class ) ; if ( org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator . isIndexCreatorFor ( org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> ) ) { return; } } if ( org.springframework.data.mongodb.core.ApplicationContext instanceof ConfigurableApplicationContext ) { ( ( ConfigurableApplicationContext ) org.springframework.data.mongodb.core.ApplicationContext ) . addApplicationListener ( org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoConverter org.springframework.data.mongodb.core.MongoConverter ( ) { return this . org.springframework.data.mongodb.core.MongoConverter ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.ReactiveIndexOperations org.springframework.data.mongodb.core.ReactiveIndexOperations ( java.lang.String java.lang.String ) { return new DefaultReactiveIndexOperations ( this , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.ReactiveIndexOperations org.springframework.data.mongodb.core.ReactiveIndexOperations ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new DefaultReactiveIndexOperations ( this , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . java.lang.String ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.Document> ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.Document> ( Document . parse ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.Document> ( final Document org.springframework.data.mongodb.core.Document ) { Assert . notNull ( org.springframework.data.mongodb.core.Document , STRING ) ; return org.springframework.data.mongodb.core.Flux<T> ( db -> readPreference != null ? db . runCommand ( command , readPreference ) : db . runCommand ( command ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.Document> ( final Document org.springframework.data.mongodb.core.Document , final ReadPreference org.springframework.data.mongodb.core.ReadPreference ) { Assert . notNull ( org.springframework.data.mongodb.core.Document , STRING ) ; return org.springframework.data.mongodb.core.Flux<T> ( db -> readPreference != null ? db . runCommand ( command , readPreference ) : db . runCommand ( command ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.Class<?> < ? > java.lang.Class<?> , ReactiveCollectionCallback < T > org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> ) { return org.springframework.data.mongodb.core.Flux ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( ReactiveDatabaseCallback < T > org.springframework.data.mongodb.core.ReactiveDatabaseCallback<T> ) { return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.ReactiveDatabaseCallback<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.String java.lang.String , ReactiveCollectionCallback < T > org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> , STRING ) ; return org.springframework.data.mongodb.core.Flux ( java.lang.String , org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( ReactiveDatabaseCallback < T > org.springframework.data.mongodb.core.ReactiveDatabaseCallback<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.ReactiveDatabaseCallback<T> , STRING ) ; return Flux . defer ( ( ) callback . doInDB ( getMongoDatabase ( ) ) ) . onErrorResumeWith ( java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Publisher<? extends java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( final ReactiveDatabaseCallback < T > org.springframework.data.mongodb.core.ReactiveDatabaseCallback<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.ReactiveDatabaseCallback<T> , STRING ) ; return Mono . defer ( ( ) Mono . from ( callback . doInDB ( getMongoDatabase ( ) ) ) ) . otherwise ( java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Mono<? extends java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.String java.lang.String , ReactiveCollectionCallback < T > org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> , STRING ) ; Mono < MongoCollection < Document > > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> = Mono . fromCallable ( ( ) getAndPrepareCollection ( getMongoDatabase ( ) , collectionName ) ) ; return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> . flatMap ( org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> :: doInCollection ) . onErrorResumeWith ( java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Publisher<? extends java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.String java.lang.String , ReactiveCollectionCallback < T > org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.ReactiveCollectionCallback<T> , STRING ) ; Mono < MongoCollection < Document > > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> = Mono . fromCallable ( ( ) getAndPrepareCollection ( getMongoDatabase ( ) , collectionName ) ) ; return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> . then ( collection -> Mono . from ( callback . doInCollection ( collection ) ) ) . otherwise ( java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Mono<? extends java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> < MongoCollection < Document > > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> < MongoCollection < Document > > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( java.lang.Class<T> < T > java.lang.Class<T> , CollectionOptions org.springframework.data.mongodb.core.CollectionOptions ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( java.lang.String ( java.lang.Class<T> ) , org.springframework.data.mongodb.core.CollectionOptions ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> < MongoCollection < Document > > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( java.lang.String , new CreateCollectionOptions ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> < MongoCollection < Document > > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( final java.lang.String java.lang.String , final CollectionOptions org.springframework.data.mongodb.core.CollectionOptions ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( java.lang.String , org.springframework.data.mongodb.core.CreateCollectionOptions ( org.springframework.data.mongodb.core.CollectionOptions ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( ( org.springframework.data.mongodb.core.ReactiveMongoTemplate.MongoDatabaseCallback<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> < MongoCollection < Document > > ) org.springframework.data.mongodb.core.MongoDatabase -> org.springframework.data.mongodb.core.MongoDatabase . getCollection ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<T> ( db -> Flux . from ( db . listCollectionNames ( ) ) . filter ( s -> s . equals ( collectionName ) ) . map ( s -> true ) . single ( false ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.mongodb.core.Mono<java.lang.Void> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono<java.lang.Void> ( java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.mongodb.core.Mono<java.lang.Void> ( final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<T> ( db -> db . getCollection ( collectionName ) . drop ( ) ) . doOnSuccess ( success -> { if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( STRING + collectionName + STRING ) ; } } ) . then ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Flux<java.lang.String> < java.lang.String > org.springframework.data.mongodb.core.Flux<java.lang.String> ( ) { return org.springframework.data.mongodb.core.Flux ( MongoDatabase :: listCollectionNames ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ( ) { return org.springframework.data.mongodb.core.ReactiveMongoDatabaseFactory . getMongoDatabase ( ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.Query . getSortObject ( ) == null ) { return org.springframework.data.mongodb.core.Mono ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , java.lang.Class<T> ) ; } org.springframework.data.mongodb.core.Query . limit ( NUMBER ) ; return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ) . next ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( org.springframework.data.mongodb.core.Query , java.lang.Class<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.core.Mono<java.lang.Boolean> ( final Query org.springframework.data.mongodb.core.Query , final java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.Query == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } return org.springframework.data.mongodb.core.Flux<T> ( java.lang.String , collection -> { Document mappedQuery = queryMapper . getMappedObject ( query . getQueryObject ( ) , getPersistentEntity ( entityClass ) ) ; return collection . find ( mappedQuery ) . limit ( NUMBER ) ; } ) . hasElements ( ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( final Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.Query == null ) { return org.springframework.data.mongodb.core.Flux<T> ( java.lang.Class<T> , java.lang.String ) ; } return org.springframework.data.mongodb.core.Flux ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , java.lang.Class<T> , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.QueryFindPublisherPreparer ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono<T> ( java.lang.Object , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; MongoPersistentProperty org.springframework.data.mongodb.core.MongoPersistentProperty = java.util.Optional<> . boolean ( ) ? java.util.Optional<> . get ( ) . getIdProperty ( ) . orElse ( null ) : null ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoPersistentProperty == null ? java.lang.String : org.springframework.data.mongodb.core.MongoPersistentProperty . getName ( ) ; return org.springframework.data.mongodb.core.Mono ( java.lang.String , new Document ( java.lang.String , java.lang.Object ) , null , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.GeoResult<T>> < GeoResult < T > > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.GeoResult<T>> ( NearQuery org.springframework.data.mongodb.core.NearQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.NearQuery , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.GeoResult<T>> < GeoResult < T > > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.GeoResult<T>> ( NearQuery org.springframework.data.mongodb.core.NearQuery , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.NearQuery == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } if ( java.lang.Class<T> == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } java.lang.String java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ( java.lang.Class<T> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.NearQuery . toDocument ( ) ; Document org.springframework.data.mongodb.core.Document = new Document ( STRING , java.lang.String ) ; org.springframework.data.mongodb.core.Document . putAll ( org.springframework.data.mongodb.core.Document ) ; return Flux . defer ( ( ) { if ( nearDbObject . containsKey ( STRING ) ) { Document query = ( Document ) nearDbObject . get ( STRING ) ; command . put ( STRING , queryMapper . getMappedObject ( query , getPersistentEntity ( entityClass ) ) ) ; } if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( STRING , serializeToJsonSafely ( command ) , entityClass , collectionName ) ; } GeoNearResultDbObjectCallback < T > callback = new GeoNearResultDbObjectCallback < T > ( new ReadDocumentCallback < T > ( mongoConverter , entityClass , collectionName ) , near . getMetric ( ) ) ; return executeCommand ( command , this . readPreference ) . flatMap ( document -> { List < Document > l = document . get ( STRING , List .class ) ; if ( l == null ) { return Flux . empty ( ) ; } return Flux . fromIterable ( l ) ; } ) . skip ( near . getSkip ( ) != null ? near . getSkip ( ) : NUMBER ) . map ( new Function < Document , GeoResult < T > > ( ) { @ Override public GeoResult < T > apply ( Document object ) { return callback . doWith ( object ) ; } } ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Override public GeoResult < T > apply ( Document object ) { return callback . doWith ( object ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) , java.lang.Class<T> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.FindAndModifyOptions , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) , java.lang.Class<T> , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.FindAndModifyOptions ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Mono ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Long> < java.lang.Long > org.springframework.data.mongodb.core.Mono<java.lang.Long> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return org.springframework.data.mongodb.core.Mono<java.lang.Long> ( org.springframework.data.mongodb.core.Query , java.lang.Class<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Long> < java.lang.Long > org.springframework.data.mongodb.core.Mono<java.lang.Long> ( final Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<java.lang.Long> ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<java.lang.Long> < java.lang.Long > org.springframework.data.mongodb.core.Mono<java.lang.Long> ( final Query org.springframework.data.mongodb.core.Query , final java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return org.springframework.data.mongodb.core.Mono<T> ( java.lang.String , collection -> { final Document Document = query == null ? null : queryMapper . getMappedObject ( query . getQueryObject ( ) , entityClass == null ? Optional . empty ( ) : mappingContext . getPersistentEntity ( entityClass ) ) ; return collection . count ( Document ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Mono < ? extends T > org.springframework.data.mongodb.core.Mono<? extends T> ) { return org.springframework.data.mongodb.core.Mono<> . then ( this :: insert ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Mono < ? extends java.util.Collection<? extends T> < ? extends T > > org.springframework.data.mongodb.core.Mono<? extends java.util.Collection<? extends T>> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.Mono<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Mono < ? extends java.util.Collection<? extends T> < ? extends T > > org.springframework.data.mongodb.core.Mono<? extends java.util.Collection<? extends T>> , java.lang.String java.lang.String ) { return Flux . from ( org.springframework.data.mongodb.core.Mono<> ) . flatMap ( collection -> insert ( collection , collectionName ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( T T ) { void ( T ) ; return org.springframework.data.mongodb.core.Mono<T> ( T , java.lang.String ( T ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( T T , java.lang.String java.lang.String ) { void ( T ) ; return org.springframework.data.mongodb.core.Mono ( java.lang.String , T , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.String java.lang.String , T T , MongoWriter < java.lang.Object > org.springframework.data.mongodb.core.MongoWriter<java.lang.Object> ) { void ( T ) ; return Mono . defer ( ( ) { initializeVersionProperty ( objectToSave ) ; maybeEmitEvent ( new BeforeConvertEvent < T > ( objectToSave , collectionName ) ) ; Document dbDoc = toDbObject ( objectToSave , writer ) ; maybeEmitEvent ( new BeforeSaveEvent < T > ( objectToSave , dbDoc , collectionName ) ) ; Mono < T > afterInsert = insertDBObject ( collectionName , dbDoc , objectToSave . getClass ( ) ) . then ( id -> { populateIdIfNecessary ( objectToSave , id ) ; maybeEmitEvent ( new AfterSaveEvent < T > ( objectToSave , dbDoc , collectionName ) ) ; return Mono . just ( objectToSave ) ; } ) ; return afterInsert ; } ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.util.Collection<? extends T> < ? extends T > java.util.Collection<? extends T> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.Flux ( java.lang.String ( java.lang.Class<> ) , java.util.Collection<> , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.util.Collection<? extends T> < ? extends T > java.util.Collection<? extends T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Flux ( java.lang.String , java.util.Collection<> , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.util.Collection<? extends T> < ? extends T > java.util.Collection<? extends T> ) { return org.springframework.data.mongodb.core.Flux ( java.util.Collection<> , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Mono < ? extends java.util.Collection<? extends T> < ? extends T > > org.springframework.data.mongodb.core.Mono<? extends java.util.Collection<? extends T>> ) { return Flux . from ( org.springframework.data.mongodb.core.Mono<> ) . flatMap ( this :: insertAll ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.util.Collection<? extends T> < ? extends T > java.util.Collection<? extends T> , MongoWriter < java.lang.Object > org.springframework.data.mongodb.core.MongoWriter<java.lang.Object> ) { final java.util.Map<java.lang.String,java.util.List<T>> < java.lang.String , java.util.List<T> < T > > java.util.Map<java.lang.String,java.util.List<T>> = new java.util.HashMap<java.lang.String,java.util.List<T>> < java.lang.String , java.util.List<T> < T > > ( ) ; java.util.Collection<> . void ( element -> { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getRequiredPersistentEntity ( element . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoPersistentEntity<> . getCollection ( ) ; java.util.List<T> < T > java.util.List<T> = java.util.Map<java.lang.String,java.util.List<T>> . java.util.List<T> ( java.lang.String ) ; if ( null == java.util.List<T> ) { java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; java.util.Map<java.lang.String,java.util.List<T>> . java.util.List<T> ( java.lang.String , java.util.List<T> ) ; } java.util.List<T> . boolean ( element ) ; } ) ; return Flux . fromIterable ( java.util.Map<java.lang.String,java.util.List<T>> . java.util.Set<java.lang.String> ( ) ) . flatMap ( collectionName -> doInsertBatch ( collectionName , elementsByCollection . get ( collectionName ) , writer ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( final java.lang.String java.lang.String , final java.util.Collection<? extends T> < ? extends T > java.util.Collection<? extends T> , final MongoWriter < java.lang.Object > org.springframework.data.mongodb.core.MongoWriter<java.lang.Object> ) { Assert . notNull ( org.springframework.data.mongodb.core.MongoWriter<java.lang.Object> , STRING ) ; Mono < java.util.List<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>> < Tuple2 < T , Document > > > org.springframework.data.mongodb.core.Mono<java.util.List<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>>> = Flux . fromIterable ( java.util.Collection<> ) . flatMap ( new java.util.function.Function<T,org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>>> < T , Flux < Tuple2 < T , Document > > > ( ) { @ java.lang.Override public org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>> < Tuple2 < T , Document > > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>> ( T T ) { void ( T ) ; void ( new BeforeConvertEvent < T > ( T , java.lang.String ) ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( T , org.springframework.data.mongodb.core.MongoWriter<java.lang.Object> ) ; void ( new BeforeSaveEvent < T > ( T , org.springframework.data.mongodb.core.Document , java.lang.String ) ) ; return Flux . zip ( Mono . just ( T ) , Mono . just ( org.springframework.data.mongodb.core.Document ) ) ; } } ) . collectList ( ) ; Flux < Tuple2 < T , Document > > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>> = org.springframework.data.mongodb.core.Mono<java.util.List<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>>> . flatMap ( tuples -> { List < Document > dbObjects = tuples . stream ( ) . map ( Tuple2 :: getT2 ) . collect ( Collectors . toList ( ) ) ; return insertDocumentList ( collectionName , dbObjects ) . thenMany ( Flux . fromIterable ( tuples ) ) ; } ) ; return org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>> . map ( tuple -> { populateIdIfNecessary ( tuple . getT1 ( ) , tuple . getT2 ( ) . get ( ID_FIELD ) ) ; maybeEmitEvent ( new AfterSaveEvent < T > ( tuple . getT1 ( ) , tuple . getT2 ( ) , collectionName ) ) ; return tuple . getT1 ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>> < Tuple2 < T , Document > > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Tuple2<T,org.springframework.data.mongodb.core.Document>> ( T T ) { void ( T ) ; void ( new BeforeConvertEvent < T > ( T , java.lang.String ) ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( T , org.springframework.data.mongodb.core.MongoWriter<java.lang.Object> ) ; void ( new BeforeSaveEvent < T > ( T , org.springframework.data.mongodb.core.Document , java.lang.String ) ) ; return Flux . zip ( Mono . just ( T ) , Mono . just ( org.springframework.data.mongodb.core.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Mono < ? extends T > org.springframework.data.mongodb.core.Mono<? extends T> ) { return org.springframework.data.mongodb.core.Mono<> . then ( this :: save ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( Mono < ? extends T > org.springframework.data.mongodb.core.Mono<? extends T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<> . then ( o -> save ( o , collectionName ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( T T ) { Assert . notNull ( T , STRING ) ; return org.springframework.data.mongodb.core.Mono<T> ( T , java.lang.String ( T ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( T T , java.lang.String java.lang.String ) { Assert . notNull ( T , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MongoPersistentEntity<?> ( T . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( org.springframework.data.mongodb.core.MongoPersistentEntity<> == null || ! org.springframework.data.mongodb.core.MongoPersistentEntity<> . hasVersionProperty ( ) ) { return org.springframework.data.mongodb.core.Mono ( java.lang.String , T , this . org.springframework.data.mongodb.core.MongoConverter ) ; } return org.springframework.data.mongodb.core.Mono ( T , org.springframework.data.mongodb.core.MongoPersistentEntity<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( T T , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<T> ( java.lang.String , collection -> { ConvertingPropertyAccessor convertingAccessor = new ConvertingPropertyAccessor ( entity . getPropertyAccessor ( objectToSave ) , mongoConverter . getConversionService ( ) ) ; MongoPersistentProperty idProperty = entity . getIdProperty ( ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) ; MongoPersistentProperty versionProperty = entity . getVersionProperty ( ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) ; ; Optional < Object > version = convertingAccessor . getProperty ( versionProperty ) ; Optional < Number > versionNumber = convertingAccessor . getProperty ( versionProperty , Number .class ) ; if ( ! version . isPresent ( ) ) { return doInsert ( collectionName , objectToSave , mongoConverter ) ; } ReactiveMongoTemplate .this . assertUpdateableIdIfNotSet ( objectToSave ) ; Optional < Object > id = convertingAccessor . getProperty ( idProperty ) ; Query query = new Query ( Criteria . where ( idProperty . getName ( ) ) . is ( id . get ( ) ) . and ( versionProperty . getName ( ) ) . is ( version . get ( ) ) ) ; convertingAccessor . setProperty ( versionProperty , Optional . of ( versionNumber . orElse ( NUMBER ) . longValue ( ) + NUMBER ) ) ; ReactiveMongoTemplate .this . maybeEmitEvent ( new BeforeConvertEvent < T > ( objectToSave , collectionName ) ) ; Document document = ReactiveMongoTemplate .this . toDbObject ( objectToSave , mongoConverter ) ; ReactiveMongoTemplate .this . maybeEmitEvent ( new BeforeSaveEvent < T > ( objectToSave , document , collectionName ) ) ; Update update = Update . fromDocument ( document , ID_FIELD ) ; return doUpdate ( collectionName , query , update , objectToSave . getClass ( ) , false , false ) . map ( updateResult -> { maybeEmitEvent ( new AfterSaveEvent < T > ( objectToSave , document , collectionName ) ) ; return objectToSave ; } ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.String java.lang.String , T T , MongoWriter < java.lang.Object > org.springframework.data.mongodb.core.MongoWriter<java.lang.Object> ) { void ( T ) ; return org.springframework.data.mongodb.core.Mono<T> ( java.lang.String , collection -> { maybeEmitEvent ( new BeforeConvertEvent < T > ( objectToSave , collectionName ) ) ; Document dbDoc = toDbObject ( objectToSave , writer ) ; maybeEmitEvent ( new BeforeSaveEvent < T > ( objectToSave , dbDoc , collectionName ) ) ; return saveDocument ( collectionName , dbDoc , objectToSave . getClass ( ) ) . map ( id -> { populateIdIfNecessary ( objectToSave , id ) ; maybeEmitEvent ( new AfterSaveEvent < T > ( objectToSave , dbDoc , collectionName ) ) ; return objectToSave ; } ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.Mono<java.lang.Object> < java.lang.Object > org.springframework.data.mongodb.core.Mono<java.lang.Object> ( final java.lang.String java.lang.String , final Document org.springframework.data.mongodb.core.Document , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING + org.springframework.data.mongodb.core.Document . keySet ( ) + STRING + java.lang.String ) ; } final Document org.springframework.data.mongodb.core.Document = new Document ( org.springframework.data.mongodb.core.Document ) ; Flux < Success > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Success> = org.springframework.data.mongodb.core.Flux<T> ( java.lang.String , collection -> { MongoAction mongoAction = new MongoAction ( writeConcern , MongoActionOperation . INSERT , collectionName , entityClass , dbDoc , null ) ; WriteConcern writeConcernToUse = prepareWriteConcern ( mongoAction ) ; MongoCollection < Document > collectionToUse = prepareCollection ( collection , writeConcernToUse ) ; return collectionToUse . insertOne ( document ) ; } ) ; return Flux . from ( org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Success> ) . last ( ) . map ( success -> document . get ( ID_FIELD ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.ObjectId> < ObjectId > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.ObjectId> ( final java.lang.String java.lang.String , final java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> ) { if ( java.util.List<org.springframework.data.mongodb.core.Document> . isEmpty ( ) ) { return Flux . empty ( ) ; } if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING + java.util.List<org.springframework.data.mongodb.core.Document> . size ( ) + STRING ) ; } final java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.Document> <> ( ) ; return org.springframework.data.mongodb.core.Flux<T> ( java.lang.String , collection -> { MongoAction mongoAction = new MongoAction ( writeConcern , MongoActionOperation . INSERT_LIST , collectionName , null , null , null ) ; WriteConcern writeConcernToUse = prepareWriteConcern ( mongoAction ) ; MongoCollection < Document > collectionToUse = prepareCollection ( collection , writeConcernToUse ) ; documents . addAll ( toDocuments ( dbDocList ) ) ; return collectionToUse . insertMany ( documents ) ; } ) . flatMap ( s -> { List < Document > documentsWithIds = documents . stream ( ) . filter ( document -> document . get ( ID_FIELD ) instanceof ObjectId ) . collect ( Collectors . toList ( ) ) ; return Flux . fromIterable ( documentsWithIds ) ; } ) . map ( document -> document . get ( ID_FIELD , ObjectId .class ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> , WriteConcern org.springframework.data.mongodb.core.WriteConcern ) { MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; if ( org.springframework.data.mongodb.core.WriteConcern != null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.Mono<java.lang.Object> < java.lang.Object > org.springframework.data.mongodb.core.Mono<java.lang.Object> ( final java.lang.String java.lang.String , final Document org.springframework.data.mongodb.core.Document , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING + org.springframework.data.mongodb.core.Document . keySet ( ) ) ; } return org.springframework.data.mongodb.core.Mono<T> ( java.lang.String , collection -> { MongoAction mongoAction = new MongoAction ( writeConcern , MongoActionOperation . SAVE , collectionName , entityClass , dbDoc , null ) ; WriteConcern writeConcernToUse = prepareWriteConcern ( mongoAction ) ; Publisher < ? > publisher ; if ( ! dbDoc . containsKey ( ID_FIELD ) ) { if ( writeConcernToUse == null ) { publisher = collection . insertOne ( dbDoc ) ; } else { publisher = collection . withWriteConcern ( writeConcernToUse ) . insertOne ( dbDoc ) ; } } else if ( writeConcernToUse == null ) { publisher = collection . replaceOne ( Filters . eq ( ID_FIELD , dbDoc . get ( ID_FIELD ) ) , dbDoc , new UpdateOptions ( ) . upsert ( true ) ) ; } else { publisher = collection . withWriteConcern ( writeConcernToUse ) . replaceOne ( Filters . eq ( ID_FIELD , dbDoc . get ( ID_FIELD ) ) , dbDoc , new UpdateOptions ( ) . upsert ( true ) ) ; } return Mono . from ( publisher ) . map ( o -> dbDoc . get ( ID_FIELD ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , true , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , true , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , true , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , false , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , false , true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , true ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> < UpdateResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.UpdateResult> ( final java.lang.String java.lang.String , final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , final java.lang.Class<?> < ? > java.lang.Class<?> , final boolean boolean , final boolean boolean ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = java.lang.Class<> == null ? null : org.springframework.data.mongodb.core.MongoPersistentEntity<?> ( java.lang.Class<> ) ; Flux < UpdateResult > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.UpdateResult> = org.springframework.data.mongodb.core.Flux<T> ( java.lang.String , collection -> { increaseVersionForUpdateIfNecessary ( entity , update ) ; Document queryObj = query == null ? new Document ( ) : queryMapper . getMappedObject ( query . getQueryObject ( ) , entity ) ; Document updateObj = update == null ? new Document ( ) : updateMapper . getMappedObject ( update . getUpdateObject ( ) , entity ) ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( String . format ( STRING , serializeToJsonSafely ( queryObj ) , serializeToJsonSafely ( updateObj ) , collectionName ) ) ; } MongoAction mongoAction = new MongoAction ( writeConcern , MongoActionOperation . UPDATE , collectionName , entityClass , updateObj , queryObj ) ; WriteConcern writeConcernToUse = prepareWriteConcern ( mongoAction ) ; MongoCollection < Document > collectionToUse = prepareCollection ( collection , writeConcernToUse ) ; UpdateOptions updateOptions = new UpdateOptions ( ) . upsert ( upsert ) ; if ( ! UpdateMapper . isUpdateObject ( updateObj ) ) { return collectionToUse . replaceOne ( queryObj , updateObj , updateOptions ) ; } if ( multi ) { return collectionToUse . updateMany ( queryObj , updateObj , updateOptions ) ; } return collectionToUse . updateOne ( queryObj , updateObj , updateOptions ) ; } ) . doOnNext ( updateResult -> { if ( entity != null && entity . hasVersionProperty ( ) && ! multi ) { if ( updateResult . wasAcknowledged ( ) && updateResult . getMatchedCount ( ) == NUMBER ) { Document queryObj = query == null ? new Document ( ) : queryMapper . getMappedObject ( query . getQueryObject ( ) , entity ) ; Document updateObj = update == null ? new Document ( ) : updateMapper . getMappedObject ( update . getUpdateObject ( ) , entity ) ; if ( dbObjectContainsVersionProperty ( queryObj , entity ) ) throw new OptimisticLockingFailureException ( STRING + updateObj . toString ( ) + STRING + collectionName ) ; } } } ) ; return org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.UpdateResult> . next ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> , Update org.springframework.data.mongodb.core.Update ) { if ( org.springframework.data.mongodb.core.MongoPersistentEntity<> != null && org.springframework.data.mongodb.core.MongoPersistentEntity<> . hasVersionProperty ( ) ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoPersistentEntity<> . getVersionProperty ( ) . get ( ) . getFieldName ( ) ; if ( ! org.springframework.data.mongodb.core.Update . modifies ( java.lang.String ) ) { org.springframework.data.mongodb.core.Update . inc ( java.lang.String , NUMBER ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Document org.springframework.data.mongodb.core.Document , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> ) { if ( org.springframework.data.mongodb.core.MongoPersistentEntity<> == null || ! org.springframework.data.mongodb.core.MongoPersistentEntity<> . hasVersionProperty ( ) ) { return false ; } return org.springframework.data.mongodb.core.Document . containsKey ( org.springframework.data.mongodb.core.MongoPersistentEntity<> . getVersionProperty ( ) . get ( ) . getFieldName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( Mono < ? extends java.lang.Object > org.springframework.data.mongodb.core.Mono<? extends java.lang.Object> ) { return org.springframework.data.mongodb.core.Mono<> . then ( this :: remove ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( Mono < ? extends java.lang.Object > org.springframework.data.mongodb.core.Mono<? extends java.lang.Object> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<> . then ( o -> remove ( objectToRemove , collection ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( org.springframework.data.mongodb.core.Query ( java.lang.Object ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; if ( java.lang.Object == null ) { return null ; } return org.springframework.data.mongodb.core.Mono ( java.lang.String , org.springframework.data.mongodb.core.Query ( java.lang.Object ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( java.lang.Object instanceof Document ) { return java.util.Collections . java.util.Map ( java.lang.String , ( ( Document ) java.lang.Object ) . get ( java.lang.String ) ) . entrySet ( ) . iterator ( ) . next ( ) ; } java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) ; MongoPersistentProperty org.springframework.data.mongodb.core.MongoPersistentProperty = java.util.Optional<> . boolean ( ) ? java.util.Optional<> . get ( ) . getIdProperty ( ) . orElse ( null ) : null ; if ( org.springframework.data.mongodb.core.MongoPersistentProperty == null ) { throw new MappingException ( STRING + java.lang.Class<> ) ; } java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<> . get ( ) . getPropertyAccessor ( java.lang.Object ) . getProperty ( org.springframework.data.mongodb.core.MongoPersistentProperty ) ; return java.util.Collections . java.util.Map ( org.springframework.data.mongodb.core.MongoPersistentProperty . getFieldName ( ) , java.util.Optional<java.lang.Object> . java.lang.Object ( ) ) . entrySet ( ) . iterator ( ) . next ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.Query org.springframework.data.mongodb.core.Query ( java.lang.Object java.lang.Object ) { java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = java.util.Map.Entry<java.lang.String,java.lang.Object> ( java.lang.Object ) ; return new Query ( where ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) . is ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.Query org.springframework.data.mongodb.core.Query ( java.util.Collection<?> < ? > java.util.Collection<?> ) { Assert . notEmpty ( java.util.Collection<> , STRING ) ; java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Collection<> . java.util.Iterator<> ( ) ; java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = java.util.Map.Entry<java.lang.String,java.lang.Object> ( java.util.Iterator<> . next ( ) ) ; java.util.ArrayList<java.lang.Object> < java.lang.Object > java.util.ArrayList<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.Collection<> . int ( ) ) ; java.util.ArrayList<java.lang.Object> . boolean ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; while ( java.util.Iterator<> . boolean ( ) ) { java.util.ArrayList<java.lang.Object> . boolean ( java.util.Map.Entry<java.lang.String,java.lang.Object> ( java.util.Iterator<> . next ( ) ) . java.lang.Object ( ) ) ; } return new Query ( where ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) . in ( java.util.ArrayList<java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> = java.util.Optional<> . boolean ( ) ? java.util.Optional<> . get ( ) . getIdProperty ( ) : java.util.Optional . java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> ( ) ; if ( ! java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> . isPresent ( ) ) { return; } java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<> . get ( ) . getPropertyAccessor ( java.lang.Object ) . getProperty ( java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> . get ( ) ) ; if ( ! java.util.Optional<java.lang.Object> . boolean ( ) && ! MongoSimpleTypes . AUTOGENERATED_ID_TYPES . contains ( java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> . get ( ) . getType ( ) ) ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> . get ( ) . getType ( ) . getName ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( org.springframework.data.mongodb.core.Query , java.lang.Class<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono ( java.lang.String , org.springframework.data.mongodb.core.Query , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> < DeleteResult > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.DeleteResult> ( final java.lang.String java.lang.String , final Query org.springframework.data.mongodb.core.Query , final java.lang.Class<T> < T > java.lang.Class<T> ) { if ( org.springframework.data.mongodb.core.Query == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } Assert . hasText ( java.lang.String , STRING ) ; final Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Query . getQueryObject ( ) ; final MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MongoPersistentEntity<?> ( java.lang.Class<T> ) ; return org.springframework.data.mongodb.core.Flux<T> ( java.lang.String , collection -> { maybeEmitEvent ( new BeforeDeleteEvent < T > ( queryObject , entityClass , collectionName ) ) ; Document dboq = queryMapper . getMappedObject ( queryObject , entity ) ; MongoAction mongoAction = new MongoAction ( writeConcern , MongoActionOperation . REMOVE , collectionName , entityClass , null , queryObject ) ; WriteConcern writeConcernToUse = prepareWriteConcern ( mongoAction ) ; MongoCollection < Document > collectionToUse = prepareCollection ( collection , writeConcernToUse ) ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( STRING , new Object [] { serializeToJsonSafely ( dboq ) , collectionName } ) ; } return collectionToUse . deleteMany ( dboq ) ; } ) . doOnNext ( deleteResult -> maybeEmitEvent ( new AfterDeleteEvent < T > ( queryObject , entityClass , collectionName ) ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Flux<T> ( java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Flux<T> ( new org.springframework.data.mongodb.core.ReactiveMongoTemplate.FindCallback ( null ) , null , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Flux ( java.lang.String , org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.Query == null ) { org.springframework.data.mongodb.core.Logger . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<T> , java.lang.String ) ) ; return org.springframework.data.mongodb.core.Flux<T> ( collection -> new FindCallback ( null ) . doInCollection ( collection ) . cursorType ( CursorType . TailableAwait ) , null , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; } return org.springframework.data.mongodb.core.Flux ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , java.lang.Class<T> , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.TailingQueryFindPublisherPreparer ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.String java.lang.String , Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { Flux < T > org.springframework.data.mongodb.core.Flux<T> = org.springframework.data.mongodb.core.Flux ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ) ; return Flux . from ( org.springframework.data.mongodb.core.Flux<T> ) . collectList ( ) . flatMap ( list -> Flux . from ( remove ( getIdInQueryFor ( list ) , entityClass , collectionName ) ) . flatMap ( deleteResult -> Flux . fromIterable ( list ) ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> < MongoCollection < Document > > org.springframework.data.mongodb.core.Mono<org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document>> ( final java.lang.String java.lang.String , final CreateCollectionOptions org.springframework.data.mongodb.core.CreateCollectionOptions ) { return org.springframework.data.mongodb.core.Mono<T> ( db -> db . createCollection ( collectionName , collectionOptions ) ) . map ( success -> { if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( STRING , collectionName ) ; } return getCollection ( collectionName ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document == null ? null : org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( java.lang.String . java.lang.String ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; } return org.springframework.data.mongodb.core.Mono<T> ( new org.springframework.data.mongodb.core.ReactiveMongoTemplate.FindOneCallback ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReadDocumentCallback<T> < T > ( this . org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.Flux ( java.lang.String , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , null , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReadDocumentCallback<T> < T > ( this . org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> , FindPublisherPreparer org.springframework.data.mongodb.core.FindPublisherPreparer ) { return org.springframework.data.mongodb.core.Flux ( java.lang.String , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , org.springframework.data.mongodb.core.FindPublisherPreparer , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected < S , T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<S> < S > java.lang.Class<S> , FindPublisherPreparer org.springframework.data.mongodb.core.FindPublisherPreparer , org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<S> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedFields ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( java.lang.String . java.lang.String ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , java.lang.Class<S> , java.lang.String ) ) ; } return org.springframework.data.mongodb.core.Flux ( new org.springframework.data.mongodb.core.ReactiveMongoTemplate.FindCallback ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.FindPublisherPreparer , org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.CreateCollectionOptions org.springframework.data.mongodb.core.CreateCollectionOptions ( CollectionOptions org.springframework.data.mongodb.core.CollectionOptions ) { CreateCollectionOptions org.springframework.data.mongodb.core.CreateCollectionOptions = new CreateCollectionOptions ( ) ; if ( org.springframework.data.mongodb.core.CollectionOptions != null ) { if ( org.springframework.data.mongodb.core.CollectionOptions . getCapped ( ) != null ) { org.springframework.data.mongodb.core.CreateCollectionOptions = org.springframework.data.mongodb.core.CreateCollectionOptions . capped ( org.springframework.data.mongodb.core.CollectionOptions . getCapped ( ) ) ; } if ( org.springframework.data.mongodb.core.CollectionOptions . getSize ( ) != null ) { org.springframework.data.mongodb.core.CreateCollectionOptions = org.springframework.data.mongodb.core.CreateCollectionOptions . sizeInBytes ( org.springframework.data.mongodb.core.CollectionOptions . getSize ( ) ) ; } if ( org.springframework.data.mongodb.core.CollectionOptions . getMaxDocuments ( ) != null ) { org.springframework.data.mongodb.core.CreateCollectionOptions = org.springframework.data.mongodb.core.CreateCollectionOptions . maxDocuments ( org.springframework.data.mongodb.core.CollectionOptions . getMaxDocuments ( ) ) ; } } return org.springframework.data.mongodb.core.CreateCollectionOptions ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( java.lang.String . java.lang.String ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; } java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; return org.springframework.data.mongodb.core.Mono<T> ( new org.springframework.data.mongodb.core.ReactiveMongoTemplate.FindAndRemoveCallback ( org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) , new org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReadDocumentCallback<T> < T > ( this . org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> , Update org.springframework.data.mongodb.core.Update , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions ) { FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions ; if ( org.springframework.data.mongodb.core.FindAndModifyOptions == null ) { org.springframework.data.mongodb.core.FindAndModifyOptions = new FindAndModifyOptions ( ) ; } else { org.springframework.data.mongodb.core.FindAndModifyOptions = org.springframework.data.mongodb.core.FindAndModifyOptions ; } java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; return Mono . defer ( ( ) { increaseVersionForUpdateIfNecessary ( entity . get ( ) , update ) ; Document mappedQuery = queryMapper . getMappedObject ( query , entity ) ; Document mappedUpdate = updateMapper . getMappedObject ( update . getUpdateObject ( ) , entity ) ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( String . format ( STRING + STRING , serializeToJsonSafely ( mappedQuery ) , fields , sort , entityClass , serializeToJsonSafely ( mappedUpdate ) , collectionName ) ) ; } return executeFindOneInternal ( new FindAndModifyCallback ( mappedQuery , fields , sort , mappedUpdate , optionsToUse ) , new ReadDocumentCallback < T > ( this . mongoConverter , entityClass , collectionName ) , collectionName ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected < T > void void ( MongoMappingEvent < T > org.springframework.data.mongodb.core.MongoMappingEvent<T> ) { if ( null != org.springframework.data.mongodb.core.ApplicationEventPublisher ) { org.springframework.data.mongodb.core.ApplicationEventPublisher . publishEvent ( org.springframework.data.mongodb.core.MongoMappingEvent<T> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return; } if ( java.lang.Object instanceof Document ) { Document org.springframework.data.mongodb.core.Document = ( Document ) java.lang.Object ; org.springframework.data.mongodb.core.Document . put ( java.lang.String , java.lang.Object ) ; return; } MongoPersistentProperty org.springframework.data.mongodb.core.MongoPersistentProperty = org.springframework.data.mongodb.core.MongoPersistentProperty ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( org.springframework.data.mongodb.core.MongoPersistentProperty == null ) { return; } ConversionService org.springframework.data.mongodb.core.ConversionService = org.springframework.data.mongodb.core.MongoConverter . getConversionService ( ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; PersistentPropertyAccessor org.springframework.data.mongodb.core.PersistentPropertyAccessor = org.springframework.data.mongodb.core.MongoPersistentEntity<> . getPropertyAccessor ( java.lang.Object ) ; if ( org.springframework.data.mongodb.core.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.core.MongoPersistentProperty ) . isPresent ( ) ) { return; } new ConvertingPropertyAccessor ( org.springframework.data.mongodb.core.PersistentPropertyAccessor , org.springframework.data.mongodb.core.ConversionService ) . setProperty ( org.springframework.data.mongodb.core.MongoPersistentProperty , java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase , java.lang.String java.lang.String ) { try { MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoDatabase . getCollection ( java.lang.String ) ; return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { if ( null != java.lang.Object ) { boolean boolean = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ; if ( ! boolean ) { for ( java.lang.Class java.lang.Class : java.util.Collection<java.lang.Class<?>> ) { if ( java.lang.Class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) . boolean ( java.lang.Class . java.lang.String ( ) ) ) { boolean = true ; break; } } } if ( boolean ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) { if ( this . org.springframework.data.mongodb.core.ReadPreference != null ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withReadPreference ( org.springframework.data.mongodb.core.ReadPreference ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.WriteConcern org.springframework.data.mongodb.core.WriteConcern ( MongoAction org.springframework.data.mongodb.core.MongoAction ) { WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcernResolver . resolve ( org.springframework.data.mongodb.core.MongoAction ) ; return org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.WriteConcern org.springframework.data.mongodb.core.WriteConcern ( WriteConcern org.springframework.data.mongodb.core.WriteConcern ) { if ( ObjectUtils . nullSafeEquals ( WriteResultChecking . EXCEPTION , org.springframework.data.mongodb.core.WriteResultChecking ) && MongoClientVersion . isMongo3Driver ( ) ) { if ( org.springframework.data.mongodb.core.WriteConcern == null || org.springframework.data.mongodb.core.WriteConcern . getWObject ( ) == null || ( org.springframework.data.mongodb.core.WriteConcern . getWObject ( ) instanceof java.lang.Number && ( ( java.lang.Number ) org.springframework.data.mongodb.core.WriteConcern . getWObject ( ) ) . int ( ) < NUMBER ) ) { return WriteConcern . ACKNOWLEDGED ; } } return org.springframework.data.mongodb.core.WriteConcern ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.mongodb.core.Mono<T> < T > org.springframework.data.mongodb.core.Mono<T> ( ReactiveCollectionCallback < Document > org.springframework.data.mongodb.core.ReactiveCollectionCallback<org.springframework.data.mongodb.core.Document> , org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Mono<T> ( java.lang.String , collection -> Mono . from ( collectionCallback . doInCollection ( collection ) ) . map ( objectCallback :: doWith ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.mongodb.core.Flux<T> < T > org.springframework.data.mongodb.core.Flux<T> ( org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReactiveCollectionQueryCallback<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.ReactiveMongoTemplate.ReactiveCollectionQueryCallback<org.springframework.data.mongodb.core.Document> , FindPublisherPreparer org.springframework.data.mongodb.core.FindPublisherPreparer , org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.Flux<T> ( java.lang.String , collection -> { FindPublisher < Document > findPublisher = collectionCallback . doInCollection ( collection ) ; if ( preparer != null ) { findPublisher = preparer . prepare ( findPublisher ) ; } return Flux . from ( findPublisher ) . map ( objectCallback :: doWith ) ; } ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( org.springframework.data.mongodb.core.ReactiveMongoTemplate.MongoDatabaseCallback<T> < T > org.springframework.data.mongodb.core.ReactiveMongoTemplate.MongoDatabaseCallback<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.ReactiveMongoTemplate.MongoDatabaseCallback<T> , STRING ) ; try { MongoDatabase org.springframework.data.mongodb.core.MongoDatabase = this . org.springframework.data.mongodb.core.MongoDatabase ( ) ; return org.springframework.data.mongodb.core.ReactiveMongoTemplate.MongoDatabaseCallback<T> . T ( org.springframework.data.mongodb.core.MongoDatabase ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> private < T > java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Publisher<? extends T>> < java.lang.Throwable , Publisher < ? extends T > > java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Publisher<? extends T>> ( ) { return java.lang.Throwable -> { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { return Flux . error ( java.lang.RuntimeException ( ( java.lang.RuntimeException ) java.lang.Throwable , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ) ; } return Flux . error ( java.lang.Throwable ) ; } ; }  <METHOD_END>
<METHOD_START> private < T > java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Mono<? extends T>> < java.lang.Throwable , Mono < ? extends T > > java.util.function.Function<java.lang.Throwable,org.springframework.data.mongodb.core.Mono<? extends T>> ( ) { return java.lang.Throwable -> { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { return Mono . error ( java.lang.RuntimeException ( ( java.lang.RuntimeException ) java.lang.Throwable , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ) ; } return Mono . error ( java.lang.Throwable ) ; } ; }  <METHOD_END>
<METHOD_START> private static java.lang.RuntimeException java.lang.RuntimeException ( java.lang.RuntimeException java.lang.RuntimeException , PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) { java.lang.RuntimeException java.lang.RuntimeException = org.springframework.data.mongodb.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ; return java.lang.RuntimeException == null ? java.lang.RuntimeException : java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoPersistentEntity<?> < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> == null ? null : org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoPersistentProperty org.springframework.data.mongodb.core.MongoPersistentProperty ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) ; return java.util.Optional<> . boolean ( ) ? java.util.Optional<> . get ( ) . getIdProperty ( ) . orElse ( null ) : null ; }  <METHOD_END>
<METHOD_START> private < T > java.lang.String java.lang.String ( T T ) { if ( null != T ) { return java.lang.String ( T . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<> ) ; return org.springframework.data.mongodb.core.MongoPersistentEntity<> . getCollection ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.MappingMongoConverter org.springframework.data.mongodb.core.MappingMongoConverter ( ) { MappingMongoConverter org.springframework.data.mongodb.core.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.DbRefResolver , new MongoMappingContext ( ) ) ; org.springframework.data.mongodb.core.MappingMongoConverter . afterPropertiesSet ( ) ; return org.springframework.data.mongodb.core.MappingMongoConverter ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.mongodb.core.Query == null || org.springframework.data.mongodb.core.Query . getSortObject ( ) == null ) { return null ; } return org.springframework.data.mongodb.core.QueryMapper . getMappedSort ( org.springframework.data.mongodb.core.Query . getSortObject ( ) , org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( T T , MongoWriter < T > org.springframework.data.mongodb.core.MongoWriter<T> ) { if ( T instanceof Document ) { return ( Document ) T ; } if ( ! ( T instanceof java.lang.String ) ) { Document org.springframework.data.mongodb.core.Document = new Document ( ) ; org.springframework.data.mongodb.core.MongoWriter<T> . write ( T , org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.Document . containsKey ( java.lang.String ) && org.springframework.data.mongodb.core.Document . get ( java.lang.String ) == null ) { org.springframework.data.mongodb.core.Document . remove ( java.lang.String ) ; } return org.springframework.data.mongodb.core.Document ; } else { try { return Document . parse ( ( java.lang.String ) T ) ; } catch ( JSONParseException | org . org.bson . org.bson . org.bson java.lang.Object ) { throw new MappingException ( STRING , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MongoPersistentEntity<?> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( org.springframework.data.mongodb.core.MongoPersistentEntity<> != null && org.springframework.data.mongodb.core.MongoPersistentEntity<> . hasVersionProperty ( ) ) { ConvertingPropertyAccessor org.springframework.data.mongodb.core.ConvertingPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.mongodb.core.MongoPersistentEntity<> . getPropertyAccessor ( java.lang.Object ) , org.springframework.data.mongodb.core.MongoConverter . getConversionService ( ) ) ; org.springframework.data.mongodb.core.ConvertingPropertyAccessor . setProperty ( org.springframework.data.mongodb.core.MongoPersistentEntity<> . getVersionProperty ( ) . get ( ) , java.util.Optional . java.util.Optional<java.lang.Integer> ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.Publisher<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.Publisher<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )				throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { if ( org.springframework.data.mongodb.core.Document == null ) { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( java.lang.String . java.lang.String ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getFullName ( ) ) ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) . limit ( NUMBER ) . first ( ) ; } else { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( java.lang.String . java.lang.String ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getFullName ( ) ) ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) . projection ( org.springframework.data.mongodb.core.Document ) . limit ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> void ( Document org.springframework.data.mongodb.core.Document ) { this( org.springframework.data.mongodb.core.Document , null ); }  <METHOD_END>
<METHOD_START> void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.FindPublisher<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.FindPublisher<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) { FindPublisher < Document > org.springframework.data.mongodb.core.FindPublisher<org.springframework.data.mongodb.core.Document> ; if ( org.springframework.data.mongodb.core.Document == null || org.springframework.data.mongodb.core.Document . isEmpty ( ) ) { org.springframework.data.mongodb.core.FindPublisher<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( ) ; } else { org.springframework.data.mongodb.core.FindPublisher<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) ; } if ( org.springframework.data.mongodb.core.Document == null || org.springframework.data.mongodb.core.Document . isEmpty ( ) ) { return org.springframework.data.mongodb.core.FindPublisher<org.springframework.data.mongodb.core.Document> ; } else { return org.springframework.data.mongodb.core.FindPublisher<org.springframework.data.mongodb.core.Document> . projection ( org.springframework.data.mongodb.core.Document ) ; } }  <METHOD_END>
<METHOD_START> void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.Publisher<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.Publisher<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )				throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { FindOneAndDeleteOptions org.springframework.data.mongodb.core.FindOneAndDeleteOptions = org.springframework.data.mongodb.core.FindOneAndDeleteOptions ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) ; return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . findOneAndDelete ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.FindOneAndDeleteOptions ) ; }  <METHOD_END>
<METHOD_START> void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.FindAndModifyOptions = org.springframework.data.mongodb.core.FindAndModifyOptions ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.Publisher<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.Publisher<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )				throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { if ( org.springframework.data.mongodb.core.FindAndModifyOptions . isRemove ( ) ) { FindOneAndDeleteOptions org.springframework.data.mongodb.core.FindOneAndDeleteOptions = org.springframework.data.mongodb.core.FindOneAndDeleteOptions ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) ; return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . findOneAndDelete ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.FindOneAndDeleteOptions ) ; } FindOneAndUpdateOptions org.springframework.data.mongodb.core.FindOneAndUpdateOptions = org.springframework.data.mongodb.core.FindOneAndUpdateOptions ( org.springframework.data.mongodb.core.FindAndModifyOptions , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) ; return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . findOneAndUpdate ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.FindOneAndUpdateOptions ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.FindOneAndUpdateOptions org.springframework.data.mongodb.core.FindOneAndUpdateOptions ( FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { FindOneAndUpdateOptions org.springframework.data.mongodb.core.FindOneAndUpdateOptions = new FindOneAndUpdateOptions ( ) ; org.springframework.data.mongodb.core.FindOneAndUpdateOptions = org.springframework.data.mongodb.core.FindOneAndUpdateOptions . projection ( org.springframework.data.mongodb.core.Document ) . sort ( org.springframework.data.mongodb.core.Document ) . upsert ( org.springframework.data.mongodb.core.FindAndModifyOptions . isUpsert ( ) ) ; if ( org.springframework.data.mongodb.core.FindAndModifyOptions . isReturnNew ( ) ) { org.springframework.data.mongodb.core.FindOneAndUpdateOptions = org.springframework.data.mongodb.core.FindOneAndUpdateOptions . returnDocument ( ReturnDocument . AFTER ) ; } else { org.springframework.data.mongodb.core.FindOneAndUpdateOptions = org.springframework.data.mongodb.core.FindOneAndUpdateOptions . returnDocument ( ReturnDocument . BEFORE ) ; } return org.springframework.data.mongodb.core.FindOneAndUpdateOptions ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.FindOneAndDeleteOptions org.springframework.data.mongodb.core.FindOneAndDeleteOptions ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { FindOneAndDeleteOptions org.springframework.data.mongodb.core.FindOneAndDeleteOptions = new FindOneAndDeleteOptions ( ) ; org.springframework.data.mongodb.core.FindOneAndDeleteOptions = org.springframework.data.mongodb.core.FindOneAndDeleteOptions . projection ( org.springframework.data.mongodb.core.Document ) . sort ( org.springframework.data.mongodb.core.Document ) ; return org.springframework.data.mongodb.core.FindOneAndDeleteOptions ; }  <METHOD_END>
<METHOD_START> T T ( Document org.springframework.data.mongodb.core.Document );  <METHOD_END>
<METHOD_START> T T ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.FindPublisher<T> < T > org.springframework.data.mongodb.core.FindPublisher<T> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException ;  <METHOD_END>
<METHOD_START> void ( EntityReader < ? super T , Bson > org.springframework.data.mongodb.core.EntityReader<? super T,org.springframework.data.mongodb.core.Bson> , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; this . org.springframework.data.mongodb.core.EntityReader<? super T,org.springframework.data.mongodb.core.Bson> = org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> ; this . java.lang.Class<T> = java.lang.Class<T> ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public T T ( Document org.springframework.data.mongodb.core.Document ) { if ( null != org.springframework.data.mongodb.core.Document ) { void ( new AfterLoadEvent < T > ( org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; } T T = org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> . read ( java.lang.Class<T> , org.springframework.data.mongodb.core.Document ) ; if ( null != T ) { void ( new AfterConvertEvent < T > ( org.springframework.data.mongodb.core.Document , T , java.lang.String ) ) ; } return T ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> , Metric org.springframework.data.mongodb.core.Metric ) { Assert . notNull ( org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> , STRING ) ; this . org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> = org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> ; this . org.springframework.data.mongodb.core.Metric = org.springframework.data.mongodb.core.Metric ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.GeoResult<T> < T > org.springframework.data.mongodb.core.GeoResult<T> ( Document org.springframework.data.mongodb.core.Document ) { double double = ( java.lang.Double ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; Document org.springframework.data.mongodb.core.Document = ( Document ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; T T = org.springframework.data.mongodb.core.ReactiveMongoTemplate.DocumentCallback<T> . T ( org.springframework.data.mongodb.core.Document ) ; return new GeoResult < T > ( T , new Distance ( double , org.springframework.data.mongodb.core.Metric ) ) ; }  <METHOD_END>
<METHOD_START> void ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.data.mongodb.core.Query = org.springframework.data.mongodb.core.Query ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.FindPublisher<T> < T > org.springframework.data.mongodb.core.FindPublisher<T> ( FindPublisher < T > org.springframework.data.mongodb.core.FindPublisher<T> ) { if ( org.springframework.data.mongodb.core.Query == null ) { return org.springframework.data.mongodb.core.FindPublisher<T> ; } if ( org.springframework.data.mongodb.core.Query . getSkip ( ) <= NUMBER && org.springframework.data.mongodb.core.Query . getLimit ( ) <= NUMBER && org.springframework.data.mongodb.core.Query . getSortObject ( ) == null && ! StringUtils . hasText ( org.springframework.data.mongodb.core.Query . getHint ( ) ) && ! org.springframework.data.mongodb.core.Query . getMeta ( ) . hasValues ( ) ) { return org.springframework.data.mongodb.core.FindPublisher<T> ; } FindPublisher < T > org.springframework.data.mongodb.core.FindPublisher<T> = org.springframework.data.mongodb.core.FindPublisher<T> ; try { if ( org.springframework.data.mongodb.core.Query . getSkip ( ) > NUMBER ) { org.springframework.data.mongodb.core.FindPublisher<T> = org.springframework.data.mongodb.core.FindPublisher<T> . skip ( ( int ) org.springframework.data.mongodb.core.Query . getSkip ( ) ) ; } if ( org.springframework.data.mongodb.core.Query . getLimit ( ) > NUMBER ) { org.springframework.data.mongodb.core.FindPublisher<T> = org.springframework.data.mongodb.core.FindPublisher<T> . limit ( org.springframework.data.mongodb.core.Query . getLimit ( ) ) ; } if ( org.springframework.data.mongodb.core.Query . getSortObject ( ) != null ) { Document org.springframework.data.mongodb.core.Document = java.lang.Class<> != null ? org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Query , java.lang.Class<> ) : org.springframework.data.mongodb.core.Query . getSortObject ( ) ; org.springframework.data.mongodb.core.FindPublisher<T> = org.springframework.data.mongodb.core.FindPublisher<T> . sort ( org.springframework.data.mongodb.core.Document ) ; } BasicDBObject org.springframework.data.mongodb.core.BasicDBObject = new BasicDBObject ( ) ; if ( StringUtils . hasText ( org.springframework.data.mongodb.core.Query . getHint ( ) ) ) { org.springframework.data.mongodb.core.BasicDBObject . append ( STRING , org.springframework.data.mongodb.core.Query . getHint ( ) ) ; } if ( org.springframework.data.mongodb.core.Query . getMeta ( ) . hasValues ( ) ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.data.mongodb.core.Query . getMeta ( ) . values ( ) ) { org.springframework.data.mongodb.core.BasicDBObject . append ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } if ( ! org.springframework.data.mongodb.core.BasicDBObject . isEmpty ( ) ) { org.springframework.data.mongodb.core.FindPublisher<T> = org.springframework.data.mongodb.core.FindPublisher<T> . modifiers ( org.springframework.data.mongodb.core.BasicDBObject ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } return org.springframework.data.mongodb.core.FindPublisher<T> ; }  <METHOD_END>
<METHOD_START> void ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( org.springframework.data.mongodb.core.Query , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.FindPublisher<T> < T > org.springframework.data.mongodb.core.FindPublisher<T> ( FindPublisher < T > org.springframework.data.mongodb.core.FindPublisher<T> ) { return super. org.springframework.data.mongodb.core.FindPublisher ( org.springframework.data.mongodb.core.FindPublisher<T> . cursorType ( CursorType . TailableAwait ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<? extends org.springframework.data.mongodb.core.Document> < ? extends Document > java.util.List<? extends org.springframework.data.mongodb.core.Document> ( final java.util.Collection<? extends org.springframework.data.mongodb.core.Document> < ? extends Document > java.util.Collection<? extends org.springframework.data.mongodb.core.Document> ) { return new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MongoPersistentProperty org.springframework.data.mongodb.core.MongoPersistentProperty , DBRef org.springframework.data.mongodb.core.DBRef , DbRefResolverCallback org.springframework.data.mongodb.core.DbRefResolverCallback , DbRefProxyHandler org.springframework.data.mongodb.core.DbRefProxyHandler ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.DBRef org.springframework.data.mongodb.core.DBRef ( org . springframework . data . mongodb . core . org.springframework.data.mongodb.core.mapping . org.springframework.data.mongodb.core.mapping org.springframework.data.mongodb.core.mapping.DBRef , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> , java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( DBRef org.springframework.data.mongodb.core.DBRef ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> ( java.util.List<org.springframework.data.mongodb.core.DBRef> < DBRef > java.util.List<org.springframework.data.mongodb.core.DBRef> ) { return null ; }  <METHOD_END>
