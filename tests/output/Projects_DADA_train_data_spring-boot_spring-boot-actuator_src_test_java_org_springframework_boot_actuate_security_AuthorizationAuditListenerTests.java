<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.security.AuthorizationAuditListener . setApplicationEventPublisher ( this . org.springframework.boot.actuate.security.ApplicationEventPublisher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent = org.springframework.boot.actuate.security.AuditApplicationEvent ( new AuthenticationCredentialsNotFoundEvent ( this , java.util.Collections .< ConfigAttribute > java.util.List<org.springframework.boot.actuate.security.ConfigAttribute> ( new SecurityConfig ( STRING ) ) , new AuthenticationCredentialsNotFoundException ( STRING ) ) ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getType ( ) ) . isEqualTo ( AuthenticationAuditListener . AUTHENTICATION_FAILURE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent = org.springframework.boot.actuate.security.AuditApplicationEvent ( new AuthorizationFailureEvent ( this , java.util.Collections .< ConfigAttribute > java.util.List<org.springframework.boot.actuate.security.ConfigAttribute> ( new SecurityConfig ( STRING ) ) , new UsernamePasswordAuthenticationToken ( STRING , STRING ) , new AccessDeniedException ( STRING ) ) ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getType ( ) ) . isEqualTo ( AuthorizationAuditListener . AUTHORIZATION_FAILURE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; UsernamePasswordAuthenticationToken org.springframework.boot.actuate.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( STRING , STRING ) ; org.springframework.boot.actuate.security.UsernamePasswordAuthenticationToken . setDetails ( java.lang.Object ) ; AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent = org.springframework.boot.actuate.security.AuditApplicationEvent ( new AuthorizationFailureEvent ( this , java.util.Collections .< ConfigAttribute > java.util.List<org.springframework.boot.actuate.security.ConfigAttribute> ( new SecurityConfig ( STRING ) ) , org.springframework.boot.actuate.security.UsernamePasswordAuthenticationToken , new AccessDeniedException ( STRING ) ) ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getType ( ) ) . isEqualTo ( AuthorizationAuditListener . AUTHORIZATION_FAILURE ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getData ( ) ) . containsEntry ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.security.AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent ( AbstractAuthorizationEvent org.springframework.boot.actuate.security.AbstractAuthorizationEvent ) { ArgumentCaptor < AuditApplicationEvent > org.springframework.boot.actuate.security.ArgumentCaptor<org.springframework.boot.actuate.security.AuditApplicationEvent> = ArgumentCaptor . forClass ( AuditApplicationEvent .class ) ; this . org.springframework.boot.actuate.security.AuthorizationAuditListener . onApplicationEvent ( org.springframework.boot.actuate.security.AbstractAuthorizationEvent ) ; verify ( this . org.springframework.boot.actuate.security.ApplicationEventPublisher ) . publishEvent ( org.springframework.boot.actuate.security.ArgumentCaptor<org.springframework.boot.actuate.security.AuditApplicationEvent> . capture ( ) ) ; return org.springframework.boot.actuate.security.ArgumentCaptor<org.springframework.boot.actuate.security.AuditApplicationEvent> . getValue ( ) ; }  <METHOD_END>
