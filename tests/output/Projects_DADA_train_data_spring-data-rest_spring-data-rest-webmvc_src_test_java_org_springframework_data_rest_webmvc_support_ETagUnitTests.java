<METHOD_START> @ Test ( expected = ETagDoesntMatchException .class ) public void void ( ) java.lang.Exception { ETag org.springframework.data.rest.webmvc.support.ETag = ETag . from ( STRING ) ; org.springframework.data.rest.webmvc.support.ETag . verify ( org.springframework.data.rest.webmvc.support.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample .class ) , new org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ETag . from ( STRING ) . verify ( org.springframework.data.rest.webmvc.support.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample .class ) , new org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.support.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.support.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample .class ) ; ETag org.springframework.data.rest.webmvc.support.ETag = ETag . from ( PersistentEntityResource . build ( new org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample ( NUMBER ) , org.springframework.data.rest.webmvc.support.PersistentEntity<,> ) . build ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.support.ETag . toString ( ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ETag . from ( STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ETag . from ( ( java.lang.String ) null ) ) . isEqualTo ( ETag . NO_ETAG ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( java.lang.IllegalArgumentException .class ) . isThrownBy ( ( ) { ETag . from ( ( PersistentEntityResource ) null ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ETag org.springframework.data.rest.webmvc.support.ETag = ETag . from ( STRING ) ; ETag org.springframework.data.rest.webmvc.support.ETag = ETag . from ( STRING ) ; ETag org.springframework.data.rest.webmvc.support.ETag = ETag . from ( ( java.lang.String ) null ) ; assertThat ( org.springframework.data.rest.webmvc.support.ETag . equals ( org.springframework.data.rest.webmvc.support.ETag ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.ETag . equals ( org.springframework.data.rest.webmvc.support.ETag ) ) . isFalse ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.ETag . equals ( org.springframework.data.rest.webmvc.support.ETag ) ) . isFalse ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.ETag . equals ( org.springframework.data.rest.webmvc.support.ETag ) ) . isFalse ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.ETag . equals ( org.springframework.data.rest.webmvc.support.ETag ) ) . isFalse ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.ETag . equals ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.support.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.support.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.support.ETagUnitTests.SampleWithoutVersion .class ) ; assertThat ( ETag . from ( PersistentEntityResource . build ( new org.springframework.data.rest.webmvc.support.ETagUnitTests.SampleWithoutVersion ( ) , org.springframework.data.rest.webmvc.support.PersistentEntity<,> ) . build ( ) ) ) . isEqualTo ( ETag . NO_ETAG ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ETag . NO_ETAG . toString ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ETag . NO_ETAG . verify ( org.springframework.data.rest.webmvc.support.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample .class ) , new org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ETag . from ( STRING ) . verify ( org.springframework.data.rest.webmvc.support.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.support.ETagUnitTests.Sample .class ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ETag . from ( STRING ) ) . isEqualTo ( ETag . from ( STRING ) ) ; assertThat ( ETag . from ( STRING ) ) . isEqualTo ( ETag . from ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.data.rest.webmvc.support.HttpHeaders = ETag . from ( STRING ) . addTo ( new HttpHeaders ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.support.HttpHeaders . getETag ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.data.rest.webmvc.support.HttpHeaders = ETag . NO_ETAG . addTo ( new HttpHeaders ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.support.HttpHeaders . containsKey ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
