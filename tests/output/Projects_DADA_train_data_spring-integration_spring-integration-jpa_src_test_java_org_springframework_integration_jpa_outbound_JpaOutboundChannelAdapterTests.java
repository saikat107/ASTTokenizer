<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.jpa.outbound.JdbcTemplate . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; JpaExecutor org.springframework.integration.jpa.outbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.outbound.EntityManager ) ; org.springframework.integration.jpa.outbound.JpaExecutor . setEntityClass ( StudentDomain .class ) ; org.springframework.integration.jpa.outbound.JpaExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jpa.outbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaOutboundGateway org.springframework.integration.jpa.outbound.JpaOutboundGateway = new JpaOutboundGateway ( org.springframework.integration.jpa.outbound.JpaExecutor ) ; org.springframework.integration.jpa.outbound.JpaOutboundGateway . setProducesReply ( false ) ; StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; final Message < StudentDomain > org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> = MessageBuilder . withPayload ( org.springframework.integration.jpa.outbound.StudentDomain ) . build ( ) ; TransactionTemplate org.springframework.integration.jpa.outbound.TransactionTemplate = new TransactionTemplate ( this . org.springframework.integration.jpa.outbound.PlatformTransactionManager ) ; org.springframework.integration.jpa.outbound.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jpa.outbound.TransactionStatus ) { org.springframework.integration.jpa.outbound.JpaOutboundGateway . handleMessage ( org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> ) ; } } ) ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; Assert . assertNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jpa.outbound.TransactionStatus ) { org.springframework.integration.jpa.outbound.JpaOutboundGateway . handleMessage ( org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; JpaExecutor org.springframework.integration.jpa.outbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.outbound.EntityManager ) ; org.springframework.integration.jpa.outbound.JpaExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jpa.outbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaOutboundGateway org.springframework.integration.jpa.outbound.JpaOutboundGateway = new JpaOutboundGateway ( org.springframework.integration.jpa.outbound.JpaExecutor ) ; org.springframework.integration.jpa.outbound.JpaOutboundGateway . setProducesReply ( false ) ; StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; final Message < StudentDomain > org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> = MessageBuilder . withPayload ( org.springframework.integration.jpa.outbound.StudentDomain ) . build ( ) ; TransactionTemplate org.springframework.integration.jpa.outbound.TransactionTemplate = new TransactionTemplate ( this . org.springframework.integration.jpa.outbound.PlatformTransactionManager ) ; org.springframework.integration.jpa.outbound.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jpa.outbound.TransactionStatus ) { org.springframework.integration.jpa.outbound.JpaOutboundGateway . handleMessage ( org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> ) ; } } ) ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; Assert . assertNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jpa.outbound.TransactionStatus ) { org.springframework.integration.jpa.outbound.JpaOutboundGateway . handleMessage ( org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; JpaExecutor org.springframework.integration.jpa.outbound.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.outbound.EntityManager ) ; org.springframework.integration.jpa.outbound.JpaExecutor . setEntityClass ( StudentDomain .class ) ; org.springframework.integration.jpa.outbound.JpaExecutor . setPersistMode ( PersistMode . PERSIST ) ; org.springframework.integration.jpa.outbound.JpaExecutor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jpa.outbound.JpaExecutor . afterPropertiesSet ( ) ; final JpaOutboundGateway org.springframework.integration.jpa.outbound.JpaOutboundGateway = new JpaOutboundGateway ( org.springframework.integration.jpa.outbound.JpaExecutor ) ; org.springframework.integration.jpa.outbound.JpaOutboundGateway . setProducesReply ( false ) ; StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; Assert . assertNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; final Message < StudentDomain > org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> = MessageBuilder . withPayload ( org.springframework.integration.jpa.outbound.StudentDomain ) . build ( ) ; org.springframework.integration.jpa.outbound.JpaOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jpa.outbound.JpaOutboundGateway . afterPropertiesSet ( ) ; TransactionTemplate org.springframework.integration.jpa.outbound.TransactionTemplate = new TransactionTemplate ( this . org.springframework.integration.jpa.outbound.PlatformTransactionManager ) ; org.springframework.integration.jpa.outbound.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jpa.outbound.TransactionStatus ) { org.springframework.integration.jpa.outbound.JpaOutboundGateway . handleMessage ( org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> ) ; } } ) ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jpa.outbound.TransactionStatus ) { org.springframework.integration.jpa.outbound.JpaOutboundGateway . handleMessage ( org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; Assert . assertNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; this . org.springframework.integration.jpa.outbound.MessageChannel . send ( MessageBuilder . withPayload ( org.springframework.integration.jpa.outbound.StudentDomain ) . build ( ) ) ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.jpa.outbound.JdbcTemplate . queryForList ( STRING ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
