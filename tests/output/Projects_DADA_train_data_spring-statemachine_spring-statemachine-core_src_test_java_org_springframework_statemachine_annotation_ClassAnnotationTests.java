<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( BaseConfig .class , org.springframework.statemachine.annotation.ClassAnnotationTests.BeanConfig1 .class , org.springframework.statemachine.annotation.ClassAnnotationTests.FooConfig .class , org.springframework.statemachine.annotation.ClassAnnotationTests.BarConfig .class ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . getBean ( STRING , ObjectStateMachine .class ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . getBean ( STRING , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean = org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean .class ) ; org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean = org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean .class ) ; org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean . void ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean . void ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( BaseConfig .class , org.springframework.statemachine.annotation.ClassAnnotationTests.BeanConfig2 .class , org.springframework.statemachine.annotation.ClassAnnotationTests.JeeConfig .class , org.springframework.statemachine.annotation.ClassAnnotationTests.FooConfig .class ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . getBean ( STRING , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.ClassAnnotationTests.JeeBean org.springframework.statemachine.annotation.ClassAnnotationTests.JeeBean = org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.statemachine.annotation.ClassAnnotationTests.JeeBean .class ) ; org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean = org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean .class ) ; org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean . void ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.ClassAnnotationTests.JeeBean . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; org.springframework.statemachine.annotation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( source = STRING , target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( source = STRING , target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( source = STRING , target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean ( ) { return new org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean ( ) { return new org.springframework.statemachine.annotation.ClassAnnotationTests.BarBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean ( ) { return new org.springframework.statemachine.annotation.ClassAnnotationTests.FooBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.ClassAnnotationTests.JeeBean org.springframework.statemachine.annotation.ClassAnnotationTests.JeeBean ( ) { return new org.springframework.statemachine.annotation.ClassAnnotationTests.JeeBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guard ( org.springframework.statemachine.annotation.TestGuard ( ) ) . action ( org.springframework.statemachine.annotation.TestAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestGuard org.springframework.statemachine.annotation.TestGuard ( ) { return new TestGuard ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestAction org.springframework.statemachine.annotation.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guard ( org.springframework.statemachine.annotation.TestGuard ( ) ) . action ( org.springframework.statemachine.annotation.TestAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestGuard org.springframework.statemachine.annotation.TestGuard ( ) { return new TestGuard ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestAction org.springframework.statemachine.annotation.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guard ( org.springframework.statemachine.annotation.TestGuard ( ) ) . action ( org.springframework.statemachine.annotation.TestAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestGuard org.springframework.statemachine.annotation.TestGuard ( ) { return new TestGuard ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestAction org.springframework.statemachine.annotation.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
