<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { ConfigurableApplicationContext org.springframework.integration.ip.tcp.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( org.springframework.integration.ip.tcp.ConnectionToConnectionTests .class . java.lang.Package ( ) . java.lang.String ( ) . java.lang.String ( STRING , STRING ) + STRING ) ; org.springframework.integration.ip.tcp.ConfigurableApplicationContext . close ( ) ; org.springframework.integration.ip.tcp.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( org.springframework.integration.ip.tcp.ConnectionToConnectionTests .class . java.lang.Package ( ) . java.lang.String ( ) . java.lang.String ( STRING , STRING ) + STRING ) ; org.springframework.integration.ip.tcp.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory , this . org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , STRING , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory , this . org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.AbstractClientConnectionFactory , AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , java.lang.String java.lang.String , boolean boolean ) throws java.lang.Exception { TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TcpConnection org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.TcpConnection . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; MessageHistory org.springframework.integration.ip.tcp.MessageHistory = MessageHistory . read ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.ip.tcp.MessageHistory , java.lang.String , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertTrue ( java.util.Properties . java.lang.Object ( STRING ) . boolean ( STRING ) ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; } int int = NUMBER ; int int = NUMBER ; int int = NUMBER ; int int = NUMBER ; int int = NUMBER ; Message < TcpConnectionEvent > org.springframework.integration.ip.tcp.Message<org.springframework.integration.ip.tcp.TcpConnectionEvent> ; int int = NUMBER ; while ( int ++ < ( boolean ? NUMBER : NUMBER ) && ( org.springframework.integration.ip.tcp.Message<org.springframework.integration.ip.tcp.TcpConnectionEvent> = ( Message < TcpConnectionEvent > ) org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) != null ) { TcpConnectionEvent org.springframework.integration.ip.tcp.TcpConnectionEvent = org.springframework.integration.ip.tcp.Message<org.springframework.integration.ip.tcp.TcpConnectionEvent> . getPayload ( ) ; if ( org.springframework.integration.ip.tcp.TcpConnectionEvent . getConnectionFactoryName ( ) . startsWith ( STRING ) ) { if ( org.springframework.integration.ip.tcp.TcpConnectionEvent instanceof TcpConnectionOpenEvent ) { int ++ ; } else if ( org.springframework.integration.ip.tcp.TcpConnectionEvent instanceof TcpConnectionCloseEvent ) { int ++ ; } else if ( org.springframework.integration.ip.tcp.TcpConnectionEvent instanceof TcpConnectionExceptionEvent ) { int ++ ; } } else if ( org.springframework.integration.ip.tcp.TcpConnectionEvent . getConnectionFactoryName ( ) . startsWith ( STRING ) ) { if ( org.springframework.integration.ip.tcp.TcpConnectionEvent instanceof TcpConnectionOpenEvent ) { int ++ ; } else if ( org.springframework.integration.ip.tcp.TcpConnectionEvent instanceof TcpConnectionCloseEvent ) { int ++ ; } } } assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; if ( boolean ) { assertEquals ( NUMBER , int ) ; } assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayRawSerializer org.springframework.integration.ip.tcp.ByteArrayRawSerializer = new ByteArrayRawSerializer ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayRawSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayRawSerializer ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.TcpConnection . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; MessageHistory org.springframework.integration.ip.tcp.MessageHistory = MessageHistory . read ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.ip.tcp.MessageHistory , STRING , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertTrue ( java.util.Properties . java.lang.Object ( STRING ) . boolean ( STRING ) ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . getConnection ( ) ; assertFalse ( org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) . contains ( STRING ) ) ; org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . setLookupHost ( true ) ; org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . getConnection ( ) ; assertTrue ( org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) . contains ( STRING ) ) ; org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . setLookupHost ( false ) ; org.springframework.integration.ip.tcp.TcpConnection = org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . getConnection ( ) ; assertFalse ( org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) . contains ( STRING ) ) ; org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; }  <METHOD_END>
