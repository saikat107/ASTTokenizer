<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( LinkedMultiValueMap .class , org.springframework.integration.http.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; LinkedMultiValueMap < java.lang.String , java.lang.String > org.springframework.integration.http.inbound.LinkedMultiValueMap<java.lang.String,java.lang.String> = ( LinkedMultiValueMap < java.lang.String , java.lang.String > ) org.springframework.integration.http.inbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.LinkedMultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.LinkedMultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestPayloadType ( java.lang.String .class ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( java.lang.String .class , org.springframework.integration.http.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; } } ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setStatusCodeExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestPayloadType ( java.lang.String .class ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; if ( boolean ) { org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; } org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; } } ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestPayloadType ( java.lang.String .class ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ) ; assertNull ( org.springframework.integration.http.inbound.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return org.springframework.integration.http.inbound.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) { @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.http.inbound.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setConvertExceptions ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setMessageConverters ( java.util.Arrays .< HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ( new org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestHttpMessageConverter ( ) ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.http.inbound.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> . getPayload ( ) ) ; assertEquals ( LinkedMultiValueMap .class , org.springframework.integration.http.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) LinkedMultiValueMap < java.lang.String , java.lang.String > org.springframework.integration.http.inbound.LinkedMultiValueMap<java.lang.String,java.lang.String> = ( LinkedMultiValueMap < java.lang.String , java.lang.String > ) org.springframework.integration.http.inbound.Message<> . getPayload ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.http.inbound.LinkedMultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.http.inbound.LinkedMultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestPayloadType ( org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean .class ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new SerializingHttpMessageConverter ( ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setMessageConverters ( java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean = new org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean . void ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean . void ( NUMBER ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( SerializationUtils . serialize ( org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean ) ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; byte [] byte[] = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsByteArray ( ) ; assertNotNull ( byte[] ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean .class , org.springframework.integration.http.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean = ( org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean ) org.springframework.integration.http.inbound.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean . java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.TestBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return MessageBuilder . withPayload ( STRING . byte[] ( ) ) . setHeader ( STRING , STRING ) . build ( ) ; } } ) ; final java.util.List<org.springframework.integration.http.inbound.MediaType> < MediaType > java.util.List<org.springframework.integration.http.inbound.MediaType> = new java.util.ArrayList<org.springframework.integration.http.inbound.MediaType> < MediaType > ( ) ; java.util.List<org.springframework.integration.http.inbound.MediaType> . add ( MediaType . TEXT_HTML ) ; final ByteArrayHttpMessageConverter org.springframework.integration.http.inbound.ByteArrayHttpMessageConverter = new ByteArrayHttpMessageConverter ( ) ; org.springframework.integration.http.inbound.ByteArrayHttpMessageConverter . setSupportedMediaTypes ( java.util.List<org.springframework.integration.http.inbound.MediaType> ) ; final java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( org.springframework.integration.http.inbound.ByteArrayHttpMessageConverter ) ; final HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setMessageConverters ( java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; final MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; final org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.ContentTypeCheckingMockHttpServletResponse org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.ContentTypeCheckingMockHttpServletResponse = new org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.ContentTypeCheckingMockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.ContentTypeCheckingMockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.ContentTypeCheckingMockHttpServletResponse . getContentAsString ( ) ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGatewayTests.ContentTypeCheckingMockHttpServletResponse . java.util.List<java.lang.String> ( ) ; assertEquals ( STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer . java.lang.Integer ( java.util.List<java.lang.String> . int ( ) ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return MessageBuilder . withPayload ( STRING . byte[] ( ) ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setReplyTimeout ( NUMBER ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setReplyTimeout ( NUMBER ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setStatusCodeExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setReplyTimeout ( NUMBER ) ; DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return new GenericMessage < java.lang.String > ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( HttpHeaders . STATUS_CODE , HttpStatus . GATEWAY_TIMEOUT ) ) ; } } ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setErrorChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.http.inbound.Message<?> ) { return new GenericMessage < java.lang.String > ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( HttpHeaders . STATUS_CODE , HttpStatus . GATEWAY_TIMEOUT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setReplyTimeout ( NUMBER ) ; QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setErrorChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setStatusCodeExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.http.inbound.MockHttpServletResponse . getStatus ( ) ) ; assertThat ( org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) , Matchers . containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } super. addHeader ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> void ( ) { setSupportedMediaTypes ( java.util.Arrays . java.util.List ( MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Exception java.lang.Exception ( java.lang.Class<? extends java.lang.Exception> < ? extends java.lang.Exception > java.lang.Class<? extends java.lang.Exception> , HttpInputMessage org.springframework.integration.http.inbound.HttpInputMessage ) throws java.io.IOException , org.springframework.integration.http.inbound.HttpMessageNotReadableException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Exception java.lang.Exception , HttpOutputMessage org.springframework.integration.http.inbound.HttpOutputMessage ) throws java.io.IOException , org.springframework.integration.http.inbound.HttpMessageNotWritableException { new java.io.PrintWriter ( org.springframework.integration.http.inbound.HttpOutputMessage . getBody ( ) ) . java.io.PrintWriter ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int * NUMBER ; }  <METHOD_END>
