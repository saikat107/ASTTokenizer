<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.store.MessageGroup ) ; assertTrue ( org.springframework.integration.gemfire.store.MessageGroup instanceof SimpleMessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . addMessageToGroup ( NUMBER , org.springframework.integration.gemfire.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . addMessageToGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . addMessageToGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , org.springframework.integration.gemfire.store.Message<> ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . addMessageToGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessagesFromGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , org.springframework.integration.gemfire.store.Message<> ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . addMessageToGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , org.springframework.integration.gemfire.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessageGroup ( NUMBER ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertNotSame ( org.springframework.integration.gemfire.store.MessageGroup , org.springframework.integration.gemfire.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessagesFromGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessagesFromGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , org.springframework.integration.gemfire.store.Message<> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . completeGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertTrue ( org.springframework.integration.gemfire.store.MessageGroup . isComplete ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , org.springframework.integration.gemfire.store.Message<> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . setLastReleasedSequenceNumberForGroup ( org.springframework.integration.gemfire.store.MessageGroup . getGroupId ( ) , NUMBER ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . getLastReleasedMessageSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( NUMBER , org.springframework.integration.gemfire.store.Message<> ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . addMessageToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . getMessages ( ) . size ( ) ) ; GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.gemfire.store.Message<> ) ; org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageGroup . getMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; DirectChannel org.springframework.integration.gemfire.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.gemfire.store.DirectChannel . setBeanName ( STRING ) ; DirectChannel org.springframework.integration.gemfire.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.gemfire.store.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.gemfire.store.Message<?> = MessageHistory . write ( org.springframework.integration.gemfire.store.Message<> , org.springframework.integration.gemfire.store.DirectChannel ) ; org.springframework.integration.gemfire.store.Message<?> = MessageHistory . write ( org.springframework.integration.gemfire.store.Message<> , org.springframework.integration.gemfire.store.DirectChannel ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( NUMBER , org.springframework.integration.gemfire.store.Message<> ) ; org.springframework.integration.gemfire.store.Message<?> = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) . getMessages ( ) . iterator ( ) . next ( ) ; MessageHistory org.springframework.integration.gemfire.store.MessageHistory = MessageHistory . read ( org.springframework.integration.gemfire.store.Message<> ) ; assertNotNull ( org.springframework.integration.gemfire.store.MessageHistory ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.store.MessageHistory . size ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.gemfire.store.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) , new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.Iterator<org.springframework.integration.gemfire.store.MessageGroup> < MessageGroup > java.util.Iterator<org.springframework.integration.gemfire.store.MessageGroup> = org.springframework.integration.gemfire.store.GemfireMessageStore . iterator ( ) ; int int = NUMBER ; while ( java.util.Iterator<org.springframework.integration.gemfire.store.MessageGroup> . hasNext ( ) ) { java.util.Iterator<org.springframework.integration.gemfire.store.MessageGroup> . next ( ) ; int ++ ; } assertEquals ( NUMBER , int ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessageGroup ( NUMBER ) ; java.util.Iterator<org.springframework.integration.gemfire.store.MessageGroup> = org.springframework.integration.gemfire.store.GemfireMessageStore . iterator ( ) ; int = NUMBER ; while ( java.util.Iterator<org.springframework.integration.gemfire.store.MessageGroup> . hasNext ( ) ) { java.util.Iterator<org.springframework.integration.gemfire.store.MessageGroup> . next ( ) ; int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { final GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; final GemfireMessageStore org.springframework.integration.gemfire.store.GemfireMessageStore = new GemfireMessageStore ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . afterPropertiesSet ( ) ; final Message < ? > org.springframework.integration.gemfire.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = null ; final java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; java.util.concurrent.ExecutorService . void ( ( ) { MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . addMessageToGroup ( NUMBER , org.springframework.integration.gemfire.store.Message<> ) ; if ( org.springframework.integration.gemfire.store.MessageGroup . getMessages ( ) . size ( ) != NUMBER ) { java.util.List<java.lang.Object> . boolean ( STRING ) ; throw new AssertionFailedError ( STRING ) ; } } ) ; java.util.concurrent.ExecutorService . void ( ( ) { org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.gemfire.store.Message<> ) ; MessageGroup org.springframework.integration.gemfire.store.MessageGroup = org.springframework.integration.gemfire.store.GemfireMessageStore . getMessageGroup ( NUMBER ) ; if ( org.springframework.integration.gemfire.store.MessageGroup . getMessages ( ) . size ( ) != NUMBER ) { java.util.List<java.lang.Object> . boolean ( STRING ) ; throw new AssertionFailedError ( STRING ) ; } } ) ; java.util.concurrent.ExecutorService . void ( ) ; java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.integration.gemfire.store.GemfireMessageStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.gemfire.store.Message<> ) ; } assertTrue ( java.util.List<java.lang.Object> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gemfire.store.GemfireGroupStoreTests> ( ) ) ; MessageChannel org.springframework.integration.gemfire.store.MessageChannel = org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.gemfire.store.QueueChannel = org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; org.springframework.integration.gemfire.store.MessageChannel . send ( org.springframework.integration.gemfire.store.Message<> ) ; assertNull ( org.springframework.integration.gemfire.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.store.MessageChannel . send ( org.springframework.integration.gemfire.store.Message<> ) ; assertNull ( org.springframework.integration.gemfire.store.QueueChannel . receive ( NUMBER ) ) ; ClassPathXmlApplicationContext org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gemfire.store.GemfireGroupStoreTests> ( ) ) ; MessageChannel org.springframework.integration.gemfire.store.MessageChannel = org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.gemfire.store.QueueChannel = org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.gemfire.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; org.springframework.integration.gemfire.store.MessageChannel . send ( org.springframework.integration.gemfire.store.Message<> ) ; assertNotNull ( org.springframework.integration.gemfire.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gemfire.store.GemfireGroupStoreTests> ( ) ) ; QueueChannel org.springframework.integration.gemfire.store.QueueChannel = org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; QueueChannel org.springframework.integration.gemfire.store.QueueChannel = org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.gemfire.store.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertNotNull ( org.springframework.integration.gemfire.store.QueueChannel . receive ( NUMBER ) ) ; } assertNull ( org.springframework.integration.gemfire.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.store.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { if ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> != null ) { org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> . clear ( ) ; } }  <METHOD_END>
<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.gemfire.store.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.integration.gemfire.store.CacheFactoryBean . afterPropertiesSet ( ) ; Cache org.springframework.integration.gemfire.store.Cache = org.springframework.integration.gemfire.store.CacheFactoryBean . getObject ( ) ; org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> = org.springframework.integration.gemfire.store.Cache . createRegionFactory ( ) . setScope ( Scope . LOCAL ) . create ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { if ( org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> != null ) { org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> . close ( ) ; } if ( org.springframework.integration.gemfire.store.CacheFactoryBean != null ) { org.springframework.integration.gemfire.store.CacheFactoryBean . destroy ( ) ; } }  <METHOD_END>
