<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.autoconfigure.web.client.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.test.autoconfigure.web.client.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_HTML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.autoconfigure.web.client.MockServerRestTemplateCustomizer . getServer ( this . org.springframework.boot.test.autoconfigure.web.client.ExampleRestClient . getRestTemplate ( ) ) . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_HTML ) ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.web.client.ExampleRestClient . test ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.autoconfigure.web.client.MockServerRestTemplateCustomizer . getServer ( this . org.springframework.boot.test.autoconfigure.web.client.AnotherExampleRestClient . getRestTemplate ( ) ) . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_HTML ) ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.web.client.AnotherExampleRestClient . test ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
