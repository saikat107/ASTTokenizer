<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { super( boolean ); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . isTrue ( StringUtils . hasText ( java.lang.String ) , STRING ) ; this . org.springframework.integration.http.inbound.Expression = new LiteralExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = ( java.lang.String != null ) ? java.lang.String : java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.http.inbound.Expression ) { this . org.springframework.integration.http.inbound.Expression = org.springframework.integration.http.inbound.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; this . org.springframework.integration.http.inbound.StandardEvaluationContext = this . createEvaluationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.integration.http.inbound.ModelAndView org.springframework.integration.http.inbound.ModelAndView ( HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest , HttpServletResponse org.springframework.integration.http.inbound.HttpServletResponse )			throws java.lang.Exception { ModelAndView org.springframework.integration.http.inbound.ModelAndView = new ModelAndView ( ) ; try { Message < ? > org.springframework.integration.http.inbound.Message<?> = super. doHandleRequest ( org.springframework.integration.http.inbound.HttpServletRequest , org.springframework.integration.http.inbound.HttpServletResponse ) ; ServletServerHttpResponse org.springframework.integration.http.inbound.ServletServerHttpResponse = new ServletServerHttpResponse ( org.springframework.integration.http.inbound.HttpServletResponse ) ; if ( org.springframework.integration.http.inbound.Message<> != null ) { java.lang.Object java.lang.Object = setupResponseAndConvertReply ( org.springframework.integration.http.inbound.ServletServerHttpResponse , org.springframework.integration.http.inbound.Message<> ) ; org.springframework.integration.http.inbound.ServletServerHttpResponse . close ( ) ; org.springframework.integration.http.inbound.ModelAndView . addObject ( this . java.lang.String , java.lang.Object ) ; } else { setStatusCodeIfNeeded ( org.springframework.integration.http.inbound.ServletServerHttpResponse ) ; } if ( this . org.springframework.integration.http.inbound.Expression != null ) { java.lang.Object java.lang.Object ; if ( org.springframework.integration.http.inbound.Message<> != null ) { java.lang.Object = this . org.springframework.integration.http.inbound.Expression . getValue ( this . org.springframework.integration.http.inbound.StandardEvaluationContext , org.springframework.integration.http.inbound.Message<> ) ; } else { java.lang.Object = this . org.springframework.integration.http.inbound.Expression . getValue ( this . org.springframework.integration.http.inbound.StandardEvaluationContext ) ; } if ( java.lang.Object instanceof View ) { org.springframework.integration.http.inbound.ModelAndView . setView ( ( View ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.inbound.ModelAndView . setViewName ( ( java.lang.String ) java.lang.Object ) ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { MapBindingResult org.springframework.integration.http.inbound.MapBindingResult = new MapBindingResult ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , STRING ) ; java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( new java.io.StringWriter ( ) ) ; java.lang.Exception . void ( java.io.PrintWriter ) ; org.springframework.integration.http.inbound.MapBindingResult . reject ( this . java.lang.String , new java.lang.Object [] { java.lang.Exception , java.lang.Exception . java.lang.String ( ) , java.io.PrintWriter . java.lang.String ( ) } , STRING + java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) + STRING + java.lang.Exception . java.lang.String ( ) + STRING ) ; org.springframework.integration.http.inbound.ModelAndView . addObject ( this . java.lang.String , org.springframework.integration.http.inbound.MapBindingResult ) ; } return org.springframework.integration.http.inbound.ModelAndView ; }  <METHOD_END>
