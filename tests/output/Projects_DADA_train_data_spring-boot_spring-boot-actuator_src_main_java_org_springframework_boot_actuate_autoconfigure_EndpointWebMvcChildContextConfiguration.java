<METHOD_START> @ Bean ( name = DispatcherServletAutoConfiguration . DEFAULT_DISPATCHER_SERVLET_BEAN_NAME ) public org.springframework.boot.actuate.autoconfigure.DispatcherServlet org.springframework.boot.actuate.autoconfigure.DispatcherServlet ( ) { DispatcherServlet org.springframework.boot.actuate.autoconfigure.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.boot.actuate.autoconfigure.DispatcherServlet . setDetectAllHandlerAdapters ( false ) ; org.springframework.boot.actuate.autoconfigure.DispatcherServlet . setDetectAllHandlerExceptionResolvers ( false ) ; org.springframework.boot.actuate.autoconfigure.DispatcherServlet . setDetectAllHandlerMappings ( false ) ; org.springframework.boot.actuate.autoconfigure.DispatcherServlet . setDetectAllViewResolvers ( false ) ; return org.springframework.boot.actuate.autoconfigure.DispatcherServlet ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = DispatcherServlet . HANDLER_MAPPING_BEAN_NAME ) public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerMapping ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = DispatcherServlet . HANDLER_ADAPTER_BEAN_NAME ) public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerAdapter org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerAdapter ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = DispatcherServlet . HANDLER_EXCEPTION_RESOLVER_BEAN_NAME ) public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerExceptionResolver org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerExceptionResolver ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.CompositeHandlerExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.ServerFactoryCustomization org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.ServerFactoryCustomization ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.ServerFactoryCustomization ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.UndertowAccessLogCustomizer org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.UndertowAccessLogCustomizer ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.UndertowAccessLogCustomizer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnClass ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.TomcatAccessLogCustomizer org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.TomcatAccessLogCustomizer ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.TomcatAccessLogCustomizer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( ErrorAttributes .class ) public org.springframework.boot.actuate.autoconfigure.ManagementErrorEndpoint org.springframework.boot.actuate.autoconfigure.ManagementErrorEndpoint ( ErrorAttributes org.springframework.boot.actuate.autoconfigure.ErrorAttributes ) { return new ManagementErrorEndpoint ( org.springframework.boot.actuate.autoconfigure.ErrorAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( MvcEndpoints org.springframework.boot.actuate.autoconfigure.MvcEndpoints , ListableBeanFactory org.springframework.boot.actuate.autoconfigure.ListableBeanFactory , EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ) { org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . setDetectHandlerMethodsInAncestorContexts ( true ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.Filter org.springframework.boot.actuate.autoconfigure.Filter ( HierarchicalBeanFactory org.springframework.boot.actuate.autoconfigure.HierarchicalBeanFactory ) { BeanFactory org.springframework.boot.actuate.autoconfigure.BeanFactory = org.springframework.boot.actuate.autoconfigure.HierarchicalBeanFactory . getParentBeanFactory ( ) ; return org.springframework.boot.actuate.autoconfigure.BeanFactory . getBean ( STRING , Filter .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableServletWebServerFactory org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory ) { if ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties == null ) { this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = BeanFactoryUtils . beanOfTypeIncludingAncestors ( this . org.springframework.boot.actuate.autoconfigure.ListableBeanFactory , ManagementServerProperties .class ) ; this . org.springframework.boot.actuate.autoconfigure.ServerProperties = BeanFactoryUtils . beanOfTypeIncludingAncestors ( this . org.springframework.boot.actuate.autoconfigure.ListableBeanFactory , ServerProperties .class ) ; this . org.springframework.boot.actuate.autoconfigure.DefaultServletWebServerFactoryCustomizer = BeanFactoryUtils . beanOfTypeIncludingAncestors ( this . org.springframework.boot.actuate.autoconfigure.ListableBeanFactory , DefaultServletWebServerFactoryCustomizer .class ) ; } this . org.springframework.boot.actuate.autoconfigure.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory ) ; org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory . setErrorPages ( java.util.Collections .< ErrorPage > java.util.Set<org.springframework.boot.actuate.autoconfigure.ErrorPage> ( ) ) ; org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory . setContextPath ( STRING ) ; org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory . setPort ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getPort ( ) ) ; if ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSsl ( ) != null ) { org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory . setSsl ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSsl ( ) ) ; } org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory . setServerHeader ( this . org.springframework.boot.actuate.autoconfigure.ServerProperties . getServerHeader ( ) ) ; org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory . setAddress ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getAddress ( ) ) ; org.springframework.boot.actuate.autoconfigure.ConfigurableServletWebServerFactory . addErrorPages ( new ErrorPage ( this . org.springframework.boot.actuate.autoconfigure.ServerProperties . getError ( ) . getPath ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.HandlerExecutionChain org.springframework.boot.actuate.autoconfigure.HandlerExecutionChain ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest )				throws java.lang.Exception { if ( this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> == null ) { this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> = java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> ( ) ; } for ( HandlerMapping org.springframework.boot.actuate.autoconfigure.HandlerMapping : this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> ) { HandlerExecutionChain org.springframework.boot.actuate.autoconfigure.HandlerExecutionChain = org.springframework.boot.actuate.autoconfigure.HandlerMapping . getHandler ( org.springframework.boot.actuate.autoconfigure.HttpServletRequest ) ; if ( org.springframework.boot.actuate.autoconfigure.HandlerExecutionChain != null ) { return org.springframework.boot.actuate.autoconfigure.HandlerExecutionChain ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> ( ) { java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> < HandlerMapping > java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> = new java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.HandlerMapping> <> ( ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> . addAll ( this . org.springframework.boot.actuate.autoconfigure.ListableBeanFactory . getBeansOfType ( HandlerMapping .class ) . values ( ) ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> . remove ( this ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> ) ; return java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerMapping> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> < HandlerAdapter > java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ( ) { java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> < HandlerAdapter > java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> = new java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> <> ( ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> . addAll ( this . org.springframework.boot.actuate.autoconfigure.ListableBeanFactory . getBeansOfType ( HandlerAdapter .class ) . values ( ) ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> . remove ( this ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ) ; return java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> == null ) { this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> = java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ( ) ; } for ( HandlerAdapter org.springframework.boot.actuate.autoconfigure.HandlerAdapter : this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ) { if ( org.springframework.boot.actuate.autoconfigure.HandlerAdapter . supports ( java.lang.Object ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.ModelAndView org.springframework.boot.actuate.autoconfigure.ModelAndView ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.autoconfigure.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> == null ) { this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> = java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ( ) ; } for ( HandlerAdapter org.springframework.boot.actuate.autoconfigure.HandlerAdapter : this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ) { if ( org.springframework.boot.actuate.autoconfigure.HandlerAdapter . supports ( java.lang.Object ) ) { return org.springframework.boot.actuate.autoconfigure.HandlerAdapter . handle ( org.springframework.boot.actuate.autoconfigure.HttpServletRequest , org.springframework.boot.actuate.autoconfigure.HttpServletResponse , java.lang.Object ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest , java.lang.Object java.lang.Object ) { if ( this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> == null ) { this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> = java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ( ) ; } for ( HandlerAdapter org.springframework.boot.actuate.autoconfigure.HandlerAdapter : this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerAdapter> ) { if ( org.springframework.boot.actuate.autoconfigure.HandlerAdapter . supports ( java.lang.Object ) ) { return org.springframework.boot.actuate.autoconfigure.HandlerAdapter . getLastModified ( org.springframework.boot.actuate.autoconfigure.HttpServletRequest , java.lang.Object ) ; } } return NUMBER ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> ( ) { java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> = new java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> <> ( ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> . addAll ( this . org.springframework.boot.actuate.autoconfigure.ListableBeanFactory . getBeansOfType ( HandlerExceptionResolver .class ) . values ( ) ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> . remove ( this ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> ) ; return java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.ModelAndView org.springframework.boot.actuate.autoconfigure.ModelAndView ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.autoconfigure.HttpServletResponse , java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception ) { if ( this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> == null ) { this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> = java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> ( ) ; } for ( HandlerExceptionResolver org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver : this . java.util.List<org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver> ) { ModelAndView org.springframework.boot.actuate.autoconfigure.ModelAndView = org.springframework.boot.actuate.autoconfigure.HandlerExceptionResolver . resolveException ( org.springframework.boot.actuate.autoconfigure.HttpServletRequest , org.springframework.boot.actuate.autoconfigure.HttpServletResponse , java.lang.Object , java.lang.Exception ) ; if ( org.springframework.boot.actuate.autoconfigure.ModelAndView != null ) { return org.springframework.boot.actuate.autoconfigure.ModelAndView ; } } return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TomcatServletWebServerFactory org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory ) { AccessLogValve org.springframework.boot.actuate.autoconfigure.AccessLogValve = org.springframework.boot.actuate.autoconfigure.AccessLogValve ( org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory ) ; if ( org.springframework.boot.actuate.autoconfigure.AccessLogValve == null ) { return; } org.springframework.boot.actuate.autoconfigure.AccessLogValve . setPrefix ( java.lang.String ( org.springframework.boot.actuate.autoconfigure.AccessLogValve . getPrefix ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.AccessLogValve org.springframework.boot.actuate.autoconfigure.AccessLogValve ( TomcatServletWebServerFactory org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory ) { for ( Valve org.springframework.boot.actuate.autoconfigure.Valve : org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory . getEngineValves ( ) ) { if ( org.springframework.boot.actuate.autoconfigure.Valve instanceof AccessLogValve ) { return ( AccessLogValve ) org.springframework.boot.actuate.autoconfigure.Valve ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( UndertowServletWebServerFactory org.springframework.boot.actuate.autoconfigure.UndertowServletWebServerFactory ) { org.springframework.boot.actuate.autoconfigure.UndertowServletWebServerFactory . setAccessLogPrefix ( java.lang.String ( org.springframework.boot.actuate.autoconfigure.UndertowServletWebServerFactory . getAccessLogPrefix ( ) ) ) ; }  <METHOD_END>
