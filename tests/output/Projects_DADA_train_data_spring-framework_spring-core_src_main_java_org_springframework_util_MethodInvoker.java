<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; if ( java.lang.Object != null ) { this . java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object [] java.lang.Object[] ) { this . java.lang.Object[] = ( java.lang.Object[] != null ? java.lang.Object[] : new java.lang.Object [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object [] java.lang.Object[] ( ) { return this . java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.ClassNotFoundException , java.lang.NoSuchMethodException { if ( this . java.lang.String != null ) { int int = this . java.lang.String . int ( '.' ) ; if ( int == - NUMBER || int == this . java.lang.String . int ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } java.lang.String java.lang.String = this . java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = this . java.lang.String . java.lang.String ( int + NUMBER ) ; this . java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; this . java.lang.String = java.lang.String ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( ) ; java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.Class<> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.Object[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; ++ int ) { java.lang.Class<?>[] [ int ] = ( java.lang.Object[] [ int ] != null ? java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) : java.lang.Object .class ) ; } try { this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { this . java.lang.reflect.Method = java.lang.reflect.Method ( ) ; if ( this . java.lang.reflect.Method == null ) { throw java.lang.NoSuchMethodException ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { return ClassUtils . forName ( java.lang.String , ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Method java.lang.reflect.Method ( ) { java.lang.String java.lang.String = java.lang.String ( ) ; java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( ) ; int int = java.lang.Object[] . int ; java.lang.reflect.Method [] java.lang.reflect.Method[] = ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<?> ( ) ) ; int int = java.lang.Integer . int ; java.lang.reflect.Method java.lang.reflect.Method = null ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int == int ) { int int = int ( java.lang.Class<?>[] , java.lang.Object[] ) ; if ( int < int ) { int = int ; java.lang.reflect.Method = java.lang.reflect.Method ; } } } } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( ) java.lang.IllegalStateException { if ( this . java.lang.reflect.Method == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . java.lang.reflect.Method != null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) java.lang.reflect.InvocationTargetException , java.lang.IllegalAccessException { java.lang.Object java.lang.Object = java.lang.Object ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( ) ; if ( java.lang.Object == null && ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public static int int ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Object [] java.lang.Object[] ) { int int = NUMBER ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { if ( ! ClassUtils . isAssignableValue ( java.lang.Class<?>[] [ int ] , java.lang.Object[] [ int ] ) ) { return java.lang.Integer . int ; } if ( java.lang.Object[] [ int ] != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?>[] [ int ] ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<? super > ( ) ; while ( java.lang.Class<> != null ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { int = int + NUMBER ; java.lang.Class<?> = null ; } else if ( ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Class<> ) ) { int = int + NUMBER ; java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } else { java.lang.Class<?> = null ; } } if ( java.lang.Class<> . boolean ( ) ) { int = int + NUMBER ; } } } return int ; }  <METHOD_END>
