<METHOD_START> public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration . setDefaultPageSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET , path = STRING ) @ ResponseBody org.springframework.data.rest.webmvc.jpa.Page<org.springframework.data.rest.webmvc.jpa.Book> < Book > org.springframework.data.rest.webmvc.jpa.Page<org.springframework.data.rest.webmvc.jpa.Book> ( Pageable org.springframework.data.rest.webmvc.jpa.Pageable ) { if ( org.springframework.data.rest.webmvc.jpa.Pageable != null ) { return new PageImpl < Book > ( java.util.Collections . java.util.List ( new Book ( ) ) , org.springframework.data.rest.webmvc.jpa.Pageable , NUMBER ) ; } return new PageImpl < Book > ( java.util.Collections . java.util.List<java.lang.Object> ( ) , org.springframework.data.rest.webmvc.jpa.Pageable , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.rest.webmvc.jpa.TestDataPopulator . populateRepositories ( ) ; super. setUp ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . getVariableNames ( ) ) . contains ( STRING , STRING ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( NUMBER ) ) . andExpect ( jsonPath ( STRING ) . value ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( NUMBER ) ) . andExpect ( jsonPath ( STRING ) . value ( NUMBER ) ) ; }  <METHOD_END>
