<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.Class<?>[] = null ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return this . java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.bsh.ScriptSource , java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws java.io.IOException , org.springframework.scripting.bsh.ScriptCompilationException { java.lang.Class<?> < ? > java.lang.Class<?> ; try { synchronized ( this . java.lang.Object ) { boolean boolean = ( this . boolean && this . java.lang.Class<> == null ) ; this . boolean = false ; if ( org.springframework.scripting.bsh.ScriptSource . isModified ( ) || boolean ) { java.lang.Object java.lang.Object = BshScriptUtils . evaluateBshScript ( org.springframework.scripting.bsh.ScriptSource . getScriptAsString ( ) , java.lang.Class<?>[] , this . java.lang.ClassLoader ) ; if ( java.lang.Object instanceof java.lang.Class ) { this . java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object ; } else { return java.lang.Object ; } } java.lang.Class<?> = this . java.lang.Class<> ; } } catch ( EvalError org.springframework.scripting.bsh.EvalError ) { this . java.lang.Class<?> = null ; throw new ScriptCompilationException ( org.springframework.scripting.bsh.ScriptSource , org.springframework.scripting.bsh.EvalError ) ; } if ( java.lang.Class<> != null ) { try { return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ScriptCompilationException ( org.springframework.scripting.bsh.ScriptSource , STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.Throwable ) ; } } else { try { return BshScriptUtils . createBshObject ( org.springframework.scripting.bsh.ScriptSource . getScriptAsString ( ) , java.lang.Class<?>[] , this . java.lang.ClassLoader ) ; } catch ( EvalError org.springframework.scripting.bsh.EvalError ) { throw new ScriptCompilationException ( org.springframework.scripting.bsh.ScriptSource , org.springframework.scripting.bsh.EvalError ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ScriptSource org.springframework.scripting.bsh.ScriptSource )			throws java.io.IOException , org.springframework.scripting.bsh.ScriptCompilationException { synchronized ( this . java.lang.Object ) { try { if ( org.springframework.scripting.bsh.ScriptSource . isModified ( ) ) { this . boolean = true ; this . java.lang.Class<?> = BshScriptUtils . determineBshObjectType ( org.springframework.scripting.bsh.ScriptSource . getScriptAsString ( ) , this . java.lang.ClassLoader ) ; } return this . java.lang.Class<> ; } catch ( EvalError org.springframework.scripting.bsh.EvalError ) { this . java.lang.Class<?> = null ; throw new ScriptCompilationException ( org.springframework.scripting.bsh.ScriptSource , org.springframework.scripting.bsh.EvalError ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ScriptSource org.springframework.scripting.bsh.ScriptSource ) { synchronized ( this . java.lang.Object ) { return ( org.springframework.scripting.bsh.ScriptSource . isModified ( ) || this . boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING ; }  <METHOD_END>
