<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = ArrayUtils . asArray ( ) ; assertThat ( java.lang.Object[] ) . isNotNull ( ) ; assertThat ( java.lang.Object[] . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = ArrayUtils . asArray ( NUMBER , NUMBER , NUMBER ) ; assertThat ( java.lang.Object[] ) . isNotNull ( ) ; assertThat ( java.lang.Object[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { NUMBER , NUMBER , NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = ArrayUtils . asArray ( NUMBER ) ; assertThat ( java.lang.Object[] ) . isNotNull ( ) ; assertThat ( java.lang.Object[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING } ; java.lang.Object [] java.lang.Object[] = { STRING } ; assertThat ( ArrayUtils . defaultIfEmpty ( java.lang.Object[] , java.lang.Object[] ) ) . isSameAs ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = {} ; java.lang.Object [] java.lang.Object[] = { STRING } ; assertThat ( ArrayUtils . defaultIfEmpty ( java.lang.Object[] , java.lang.Object[] ) ) . isSameAs ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING } ; assertThat ( ArrayUtils . defaultIfEmpty ( null , java.lang.Object[] ) ) . isSameAs ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ArrayUtils . defaultIfEmpty ( null , null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ArrayUtils . getFirst ( ArrayUtils . asArray ( NUMBER , NUMBER , NUMBER ) ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ( java.lang.Object ) ArrayUtils . getFirst ( null ) ) . isNull ( ) ; assertThat ( ( java.lang.Object ) ArrayUtils . getFirst ( new java.lang.Object [ NUMBER ] ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ArrayUtils . getFirst ( ( java.lang.Object [] ) null , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( ArrayUtils . getFirst ( new java.lang.Object [ NUMBER ] , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , STRING } ; java.lang.Object [] java.lang.Object[] = ArrayUtils . insert ( java.lang.Object[] , NUMBER , STRING ) ; assertThat ( java.lang.Object[] ) . isNotSameAs ( java.lang.Object[] ) ; assertThat ( java.util.Arrays . boolean ( java.lang.Object[] , java.lang.Object[] ) ) . isFalse ( ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { STRING , STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , STRING } ; java.lang.Object [] java.lang.Object[] = ArrayUtils . insert ( java.lang.Object[] , NUMBER , STRING ) ; assertThat ( java.lang.Object[] ) . isNotSameAs ( java.lang.Object[] ) ; assertThat ( java.util.Arrays . boolean ( java.lang.Object[] , java.lang.Object[] ) ) . isFalse ( ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { STRING , STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , STRING } ; java.lang.Object [] java.lang.Object[] = ArrayUtils . insert ( java.lang.Object[] , NUMBER , STRING ) ; assertThat ( java.lang.Object[] ) . isNotSameAs ( java.lang.Object[] ) ; assertThat ( java.util.Arrays . boolean ( java.lang.Object[] , java.lang.Object[] ) ) . isFalse ( ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { STRING , STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ArrayUtils . isEmpty ( ArrayUtils . asArray ( STRING , STRING , STRING ) ) ) . isFalse ( ) ; assertThat ( ArrayUtils . isEmpty ( ArrayUtils . asArray ( STRING ) ) ) . isFalse ( ) ; assertThat ( ArrayUtils . isEmpty ( ArrayUtils . asArray ( STRING ) ) ) . isFalse ( ) ; assertThat ( ArrayUtils . isEmpty ( ArrayUtils . asArray ( null , null , null ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ArrayUtils . isEmpty ( new java.lang.Object [ NUMBER ] ) ) . isTrue ( ) ; assertThat ( ArrayUtils . isEmpty ( null ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ArrayUtils . length ( ArrayUtils . asArray ( STRING , STRING , STRING ) ) ) . isEqualTo ( NUMBER ) ; assertThat ( ArrayUtils . length ( ArrayUtils . asArray ( STRING ) ) ) . isEqualTo ( NUMBER ) ; assertThat ( ArrayUtils . length ( ArrayUtils . asArray ( STRING ) ) ) . isEqualTo ( NUMBER ) ; assertThat ( ArrayUtils . length ( ArrayUtils . asArray ( null , null , null ) ) ) . isEqualTo ( NUMBER ) ; assertThat ( ArrayUtils . length ( new java.lang.Object [ NUMBER ] ) ) . isEqualTo ( NUMBER ) ; assertThat ( ArrayUtils . length ( null ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; assertThat ( ArrayUtils . nullSafeArray ( java.lang.String[] , java.lang.String .class ) ) . isSameAs ( java.lang.String[] ) ; java.lang.Integer [] java.lang.Integer[] = { NUMBER , NUMBER , NUMBER } ; assertThat ( ArrayUtils . nullSafeArray ( java.lang.Integer[] , java.lang.Integer .class ) ) . isSameAs ( java.lang.Integer[] ) ; java.lang.Double [] java.lang.Double[] = {} ; assertThat ( ArrayUtils . nullSafeArray ( java.lang.Double[] , java.lang.Double .class ) ) . isSameAs ( java.lang.Double[] ) ; java.lang.Character [] java.lang.Character[] = { 'A' , 'B' , 'C' } ; assertThat ( ArrayUtils . nullSafeArray ( java.lang.Character[] , java.lang.Character .class ) ) . isSameAs ( java.lang.Character[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = ArrayUtils . nullSafeArray ( null , java.lang.String .class ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.lang.String [] .class ) ; assertThat ( ( ( java.lang.String [] ) java.lang.Object ) . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , STRING , STRING } ; java.lang.Object [] java.lang.Object[] = ArrayUtils . remove ( java.lang.Object[] , NUMBER ) ; assertThat ( java.lang.Object[] ) . isNotSameAs ( java.lang.Object[] ) ; assertThat ( java.util.Arrays . boolean ( java.lang.Object[] , java.lang.Object[] ) ) . isFalse ( ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , STRING , STRING } ; java.lang.Object [] java.lang.Object[] = ArrayUtils . remove ( java.lang.Object[] , NUMBER ) ; assertThat ( java.lang.Object[] ) . isNotSameAs ( java.lang.Object[] ) ; assertThat ( java.util.Arrays . boolean ( java.lang.Object[] , java.lang.Object[] ) ) . isFalse ( ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , STRING , STRING } ; java.lang.Object [] java.lang.Object[] = ArrayUtils . remove ( java.lang.Object[] , NUMBER ) ; assertThat ( java.lang.Object[] ) . isNotSameAs ( java.lang.Object[] ) ; assertThat ( java.util.Arrays . boolean ( java.lang.Object[] , java.lang.Object[] ) ) . isFalse ( ) ; assertThat ( java.lang.Object[] ) . isEqualTo ( new java.lang.Object [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Comparable [] java.lang.Comparable[] = new java.lang.Comparable [] { NUMBER , NUMBER , NUMBER } ; java.lang.Comparable [] java.lang.Comparable[] = ArrayUtils . sort ( java.lang.Comparable[] ) ; assertThat ( java.lang.Comparable[] ) . isSameAs ( java.lang.Comparable[] ) ; assertThat ( java.lang.Comparable[] ) . isEqualTo ( new java.lang.Comparable [] { NUMBER , NUMBER , NUMBER } ) ; }  <METHOD_END>
