<METHOD_START> @ Bean @ java.lang.Override public org.springframework.data.rest.webmvc.json.ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ( ) { ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = super. objectMapper ( ) ; org.springframework.data.rest.webmvc.json.ObjectMapper . registerModule ( new JacksonSerializers ( new EnumTranslator ( new MessageSourceAccessor ( new StaticMessageSource ( ) ) ) ) ) ; return org.springframework.data.rest.webmvc.json.ObjectMapper ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { RequestContextHolder . setRequestAttributes ( new ServletWebRequest ( new MockHttpServletRequest ( ) ) ) ; this . org.springframework.data.rest.webmvc.json.LinkDiscoverer = new HalLinkDiscoverer ( ) ; this . org.springframework.data.rest.webmvc.json.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.ObjectMapper . readValue ( java.lang.String , Person .class ) ; assertThat ( org.springframework.data.rest.webmvc.json.Person . getFirstName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.Person . getLastName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.Person . getSiblings ( ) ) . isEqualTo ( java.util.Collections . java.util.List ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.ObjectMapper . readValue ( java.lang.String , Person .class ) ; assertThat ( org.springframework.data.rest.webmvc.json.Person . getFirstName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.Person . getLastName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.lang.InterruptedException { PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.json.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.json.Repositories . getPersistentEntity ( Person .class ) ; Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.PersonRepository . save ( new Person ( STRING , STRING ) ) ; PersistentEntityResource org.springframework.data.rest.webmvc.json.PersistentEntityResource = PersistentEntityResource . build ( org.springframework.data.rest.webmvc.json.Person , org.springframework.data.rest.webmvc.json.PersistentEntity<,> ) . withLink ( new Link ( STRING + org.springframework.data.rest.webmvc.json.Person . getId ( ) ) ) . build ( ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; org.springframework.data.rest.webmvc.json.ObjectMapper . writeValue ( java.io.StringWriter , org.springframework.data.rest.webmvc.json.PersistentEntityResource ) ; java.lang.String java.lang.String = java.io.StringWriter . java.lang.String ( ) ; Link org.springframework.data.rest.webmvc.json.Link = org.springframework.data.rest.webmvc.json.LinkDiscoverer . findLinkWithRel ( STRING , java.lang.String ) ; assertThat ( org.springframework.data.rest.webmvc.json.Link . getHref ( ) , endsWith ( new UriTemplate ( STRING ) . expand ( org.springframework.data.rest.webmvc.json.Person . getId ( ) ) . toString ( ) ) ) ; Link org.springframework.data.rest.webmvc.json.Link = org.springframework.data.rest.webmvc.json.LinkDiscoverer . findLinkWithRel ( STRING , java.lang.String ) ; assertThat ( org.springframework.data.rest.webmvc.json.Link . getHref ( ) , endsWith ( new UriTemplate ( STRING ) . expand ( org.springframework.data.rest.webmvc.json.Person . getId ( ) ) . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.PersonRepository . save ( new Person ( STRING , STRING ) ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , org.springframework.data.rest.webmvc.json.Person . getId ( ) ) ; Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.ObjectMapper . readValue ( java.lang.String , Person .class ) ; assertThat ( org.springframework.data.rest.webmvc.json.Person . getFather ( ) ) . isEqualTo ( org.springframework.data.rest.webmvc.json.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.PersonRepository . save ( new Person ( STRING , STRING ) ) ; Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.PersonRepository . save ( new Person ( STRING , STRING ) ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , org.springframework.data.rest.webmvc.json.Person . getId ( ) , org.springframework.data.rest.webmvc.json.Person . getId ( ) ) ; Person org.springframework.data.rest.webmvc.json.Person = org.springframework.data.rest.webmvc.json.ObjectMapper . readValue ( java.lang.String , Person .class ) ; assertThat ( org.springframework.data.rest.webmvc.json.Person . getSiblings ( ) ) . contains ( org.springframework.data.rest.webmvc.json.Person , org.springframework.data.rest.webmvc.json.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = TestUtils . readFileFromClasspath ( STRING ) ; Order org.springframework.data.rest.webmvc.json.Order = org.springframework.data.rest.webmvc.json.ObjectMapper . readValue ( java.lang.String , Order .class ) ; assertThat ( org.springframework.data.rest.webmvc.json.Order . getLineItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.rest.webmvc.json.Person = new Person ( STRING , STRING ) ; Order org.springframework.data.rest.webmvc.json.Order = new Order ( org.springframework.data.rest.webmvc.json.Person ) ; org.springframework.data.rest.webmvc.json.Order . add ( new LineItem ( STRING ) ) ; org.springframework.data.rest.webmvc.json.Order . add ( new LineItem ( STRING ) ) ; PersistentEntityResource org.springframework.data.rest.webmvc.json.PersistentEntityResource = PersistentEntityResource . build ( org.springframework.data.rest.webmvc.json.Order , org.springframework.data.rest.webmvc.json.Repositories . getPersistentEntity ( Order .class ) ) . withLink ( new Link ( STRING ) ) . build ( ) ; PagedResources < PersistentEntityResource > org.springframework.data.rest.webmvc.json.PagedResources<org.springframework.data.rest.webmvc.json.PersistentEntityResource> = new PagedResources < PersistentEntityResource > ( java.util.Arrays . java.util.List ( org.springframework.data.rest.webmvc.json.PersistentEntityResource ) , new PageMetadata ( NUMBER , NUMBER , NUMBER ) ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.json.PagedResources<org.springframework.data.rest.webmvc.json.PersistentEntityResource> ) ; assertThat ( JsonPath .< java.lang.Object > read ( java.lang.String , STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.rest.webmvc.json.Person = new Person ( STRING , STRING ) ; org.springframework.data.rest.webmvc.json.Person . setId ( NUMBER ) ; Person org.springframework.data.rest.webmvc.json.Person = new Person ( STRING , STRING ) ; org.springframework.data.rest.webmvc.json.Person . setId ( NUMBER ) ; org.springframework.data.rest.webmvc.json.Person . setFather ( org.springframework.data.rest.webmvc.json.Person ) ; UserExcerpt org.springframework.data.rest.webmvc.json.UserExcerpt = org.springframework.data.rest.webmvc.json.ProjectionFactory . createProjection ( UserExcerpt .class , org.springframework.data.rest.webmvc.json.Person ) ; EmbeddedWrapper org.springframework.data.rest.webmvc.json.EmbeddedWrapper = new EmbeddedWrappers ( false ) . wrap ( org.springframework.data.rest.webmvc.json.UserExcerpt , STRING ) ; PersistentEntityResource org.springframework.data.rest.webmvc.json.PersistentEntityResource = PersistentEntityResource . build ( org.springframework.data.rest.webmvc.json.Person , org.springframework.data.rest.webmvc.json.Repositories . getPersistentEntity ( Person .class ) ) . withEmbedded ( java.util.Arrays . java.util.List ( org.springframework.data.rest.webmvc.json.EmbeddedWrapper ) ) . build ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.json.PersistentEntityResource ) ; assertThat ( JsonPath .< java.lang.Object > read ( java.lang.String , STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.rest.webmvc.json.Person = new Person ( STRING , STRING ) ; PersistentEntityResource org.springframework.data.rest.webmvc.json.PersistentEntityResource = PersistentEntityResource . build ( org.springframework.data.rest.webmvc.json.Person , org.springframework.data.rest.webmvc.json.Repositories . getPersistentEntity ( Person .class ) ) . withLink ( new Link ( STRING ) ) . withLink ( new Link ( STRING , STRING ) ) . build ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.json.PersistentEntityResource ) ; assertThat ( JsonPath .< java.lang.Object > read ( java.lang.String , STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.rest.webmvc.json.Person = new Person ( STRING , STRING ) ; org.springframework.data.rest.webmvc.json.Person . setId ( NUMBER ) ; ProjectionFactory org.springframework.data.rest.webmvc.json.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; PersonSummary org.springframework.data.rest.webmvc.json.PersonSummary = org.springframework.data.rest.webmvc.json.ProjectionFactory . createProjection ( PersonSummary .class , org.springframework.data.rest.webmvc.json.Person ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.ObjectMapper . writeValueAsString ( new Resource < PersonSummary > ( org.springframework.data.rest.webmvc.json.PersonSummary ) ) ; assertThat ( JsonPath .< java.lang.Object > read ( java.lang.String , STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CreditCard org.springframework.data.rest.webmvc.json.CreditCard = new CreditCard ( new CreditCard . CreditCard ( STRING ) ) ; assertThat ( JsonPath .< java.lang.Object > read ( org.springframework.data.rest.webmvc.json.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.json.CreditCard ) , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Suite org.springframework.data.rest.webmvc.json.Suite = new Suite ( ) ; org.springframework.data.rest.webmvc.json.Suite . setSuiteCode ( STRING ) ; Dinner org.springframework.data.rest.webmvc.json.Dinner = new Dinner ( ) ; org.springframework.data.rest.webmvc.json.Dinner . setDinnerCode ( STRING ) ; Guest org.springframework.data.rest.webmvc.json.Guest = new Guest ( ) ; org.springframework.data.rest.webmvc.json.Guest . setRoom ( org.springframework.data.rest.webmvc.json.Suite ) ; org.springframework.data.rest.webmvc.json.Guest . addMeal ( org.springframework.data.rest.webmvc.json.Dinner ) ; PersistentEntityResource org.springframework.data.rest.webmvc.json.PersistentEntityResource = PersistentEntityResource . build ( org.springframework.data.rest.webmvc.json.Guest , org.springframework.data.rest.webmvc.json.JpaMetamodelMappingContext . getRequiredPersistentEntity ( Guest .class ) ) . withLink ( new Link ( STRING ) ) . build ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.json.PersistentEntityResource ) ; assertThat ( JsonPath .< java.lang.Object > read ( java.lang.String , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( JsonPath .< java.lang.Object > read ( java.lang.String , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
