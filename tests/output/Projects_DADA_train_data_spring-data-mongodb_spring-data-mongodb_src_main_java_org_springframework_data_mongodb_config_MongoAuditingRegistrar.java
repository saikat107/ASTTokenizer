<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return EnableMongoAuditing .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.mongodb.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.mongodb.config.BeanDefinitionRegistry ) { Assert . notNull ( org.springframework.data.mongodb.config.AnnotationMetadata , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.config.BeanDefinitionRegistry , STRING ) ; super. registerBeanDefinitions ( org.springframework.data.mongodb.config.AnnotationMetadata , org.springframework.data.mongodb.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.config.BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder ( AuditingConfiguration org.springframework.data.mongodb.config.AuditingConfiguration ) { Assert . notNull ( org.springframework.data.mongodb.config.AuditingConfiguration , STRING ) ; BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( IsNewAwareAuditingHandler .class ) ; BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.data.mongodb.config.MongoAuditingRegistrar.MongoMappingContextLookup .class ) ; org.springframework.data.mongodb.config.BeanDefinitionBuilder . setAutowireMode ( AbstractBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.mongodb.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; return configureDefaultAuditHandlerAttributes ( org.springframework.data.mongodb.config.AuditingConfiguration , org.springframework.data.mongodb.config.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeanDefinition org.springframework.data.mongodb.config.BeanDefinition , BeanDefinitionRegistry org.springframework.data.mongodb.config.BeanDefinitionRegistry ) { Assert . notNull ( org.springframework.data.mongodb.config.BeanDefinition , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.config.BeanDefinitionRegistry , STRING ) ; BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AuditingEventListener .class ) ; org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgValue ( ParsingUtils . getObjectFactoryBeanDefinition ( java.lang.String ( ) , org.springframework.data.mongodb.config.BeanDefinitionRegistry ) ) ; registerInfrastructureBeanWithId ( org.springframework.data.mongodb.config.BeanDefinitionBuilder . getBeanDefinition ( ) , AuditingEventListener .class . java.lang.String ( ) , org.springframework.data.mongodb.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> public void ( MappingMongoConverter org.springframework.data.mongodb.config.MappingMongoConverter ) { this . org.springframework.data.mongodb.config.MappingMongoConverter = org.springframework.data.mongodb.config.MappingMongoConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.config.MappingContext<? extends org.springframework.data.mongodb.config.MongoPersistentEntity<?>,org.springframework.data.mongodb.config.MongoPersistentProperty> < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.config.MappingContext<? extends org.springframework.data.mongodb.config.MongoPersistentEntity<?>,org.springframework.data.mongodb.config.MongoPersistentProperty> ( ) java.lang.Exception { return org.springframework.data.mongodb.config.MappingMongoConverter . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return MappingContext .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
