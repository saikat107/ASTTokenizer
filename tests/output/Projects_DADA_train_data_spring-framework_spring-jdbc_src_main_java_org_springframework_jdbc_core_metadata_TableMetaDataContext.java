<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.jdbc.core.metadata.TableMetaDataProvider . isGetGeneratedKeysSupported ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.jdbc.core.metadata.TableMetaDataProvider . isGetGeneratedKeysSimulated ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return this . org.springframework.jdbc.core.metadata.TableMetaDataProvider . getSimpleQueryForGetGeneratedKey ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.jdbc.core.metadata.TableMetaDataProvider . isGeneratedKeysColumnNameArraySupported ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.lang.String [] java.lang.String[] ) { this . org.springframework.jdbc.core.metadata.TableMetaDataProvider = TableMetaDataProviderFactory . createMetaDataProvider ( javax.sql.DataSource , this ) ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.lang.String [] java.lang.String[] ) { if ( java.lang.String[] . int > NUMBER ) { this . boolean = true ; } if ( java.util.List<java.lang.String> . int ( ) > NUMBER ) { return new java.util.ArrayList<java.lang.String> <> ( java.util.List<java.lang.String> ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( TableParameterMetaData org.springframework.jdbc.core.metadata.TableParameterMetaData : org.springframework.jdbc.core.metadata.TableMetaDataProvider . getTableParameterMetaData ( ) ) { if ( ! java.util.Set<java.lang.String> . boolean ( org.springframework.jdbc.core.metadata.TableParameterMetaData . getParameterName ( ) . toUpperCase ( ) ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.jdbc.core.metadata.TableParameterMetaData . getParameterName ( ) ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( SqlParameterSource org.springframework.jdbc.core.metadata.SqlParameterSource ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = SqlParameterSourceUtils . extractCaseInsensitiveParameterNames ( org.springframework.jdbc.core.metadata.SqlParameterSource ) ; for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { if ( org.springframework.jdbc.core.metadata.SqlParameterSource . hasValue ( java.lang.String ) ) { java.util.List<java.lang.Object> . boolean ( SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { java.lang.String java.lang.String = java.lang.String . java.lang.String ( ) ; if ( org.springframework.jdbc.core.metadata.SqlParameterSource . hasValue ( java.lang.String ) ) { java.util.List<java.lang.Object> . boolean ( SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { java.lang.String java.lang.String = JdbcUtils . convertUnderscoreNameToPropertyName ( java.lang.String ) ; if ( org.springframework.jdbc.core.metadata.SqlParameterSource . hasValue ( java.lang.String ) ) { java.util.List<java.lang.Object> . boolean ( SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { if ( java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String ) ) { java.util.List<java.lang.Object> . boolean ( SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ) ) ; } else { java.util.List<java.lang.Object> . boolean ( null ) ; } } } } } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( java.util.Map<java.lang.String,> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String . java.lang.String ( ) , java.util.Map<java.lang.String,> . get ( java.lang.String ) ) ; } for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { java.util.List<java.lang.Object> . boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String . java.lang.String ( ) ) ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( java.lang.String ( ) != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; int int = NUMBER ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ( ) ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ) { int ++ ; if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( int < NUMBER ) { if ( this . boolean ) { org.springframework.jdbc.core.metadata.Log . info ( STRING + java.lang.String ( ) + STRING ) ; } else { throw new InvalidDataAccessApiUsageException ( STRING + java.lang.String ( ) + STRING ) ; } } for ( int int = NUMBER ; int < int ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { int [] int[] = new int [ java.util.List<java.lang.String> ( ) . int ( ) ] ; java.util.List<org.springframework.jdbc.core.metadata.TableParameterMetaData> < TableParameterMetaData > java.util.List<org.springframework.jdbc.core.metadata.TableParameterMetaData> = this . org.springframework.jdbc.core.metadata.TableMetaDataProvider . getTableParameterMetaData ( ) ; java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.TableParameterMetaData> < java.lang.String , TableParameterMetaData > java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.TableParameterMetaData> = new java.util.LinkedHashMap <> ( java.util.List<org.springframework.jdbc.core.metadata.TableParameterMetaData> . size ( ) ) ; for ( TableParameterMetaData org.springframework.jdbc.core.metadata.TableParameterMetaData : java.util.List<org.springframework.jdbc.core.metadata.TableParameterMetaData> ) { java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.TableParameterMetaData> . put ( org.springframework.jdbc.core.metadata.TableParameterMetaData . getParameterName ( ) . toUpperCase ( ) , org.springframework.jdbc.core.metadata.TableParameterMetaData ) ; } int int = NUMBER ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ( ) ) { if ( java.lang.String == null ) { int[] [ int ] = SqlTypeValue . TYPE_UNKNOWN ; } else { TableParameterMetaData org.springframework.jdbc.core.metadata.TableParameterMetaData = java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.TableParameterMetaData> . get ( java.lang.String . java.lang.String ( ) ) ; if ( org.springframework.jdbc.core.metadata.TableParameterMetaData != null ) { int[] [ int ] = org.springframework.jdbc.core.metadata.TableParameterMetaData . getSqlType ( ) ; } else { int[] [ int ] = SqlTypeValue . TYPE_UNKNOWN ; } } int ++ ; } return int[] ; }  <METHOD_END>
