<METHOD_START> public void ( javax.xml.transform.Templates javax.xml.transform.Templates ) { this( javax.xml.transform.Templates , null ); }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.integration.xml.transformer.Resource ) { this( org.springframework.integration.xml.transformer.Resource , null , null ); }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.integration.xml.transformer.Resource , ResultTransformer org.springframework.integration.xml.transformer.ResultTransformer ) { this( org.springframework.integration.xml.transformer.Resource , org.springframework.integration.xml.transformer.ResultTransformer , null ); }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.integration.xml.transformer.Resource , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.xml.transformer.Resource , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.xml.transformer.Resource = org.springframework.integration.xml.transformer.Resource ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.xml.transformer.ResultTransformer = null ; }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.integration.xml.transformer.Resource , ResultTransformer org.springframework.integration.xml.transformer.ResultTransformer , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.xml.transformer.Resource , STRING ) ; this . org.springframework.integration.xml.transformer.Resource = org.springframework.integration.xml.transformer.Resource ; this . org.springframework.integration.xml.transformer.ResultTransformer = org.springframework.integration.xml.transformer.ResultTransformer ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( javax.xml.transform.Templates javax.xml.transform.Templates , ResultTransformer org.springframework.integration.xml.transformer.ResultTransformer ) { Assert . notNull ( javax.xml.transform.Templates , STRING ) ; this . javax.xml.transform.Templates = javax.xml.transform.Templates ; this . org.springframework.integration.xml.transformer.ResultTransformer = org.springframework.integration.xml.transformer.ResultTransformer ; }  <METHOD_END>
<METHOD_START> public void void ( SourceFactory org.springframework.integration.xml.transformer.SourceFactory ) { Assert . notNull ( org.springframework.integration.xml.transformer.SourceFactory , STRING ) ; this . org.springframework.integration.xml.transformer.SourceFactory = org.springframework.integration.xml.transformer.SourceFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResultFactory org.springframework.integration.xml.transformer.ResultFactory ) { super. setResultFactory ( org.springframework.integration.xml.transformer.ResultFactory ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.Expression> ) { this . java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.Expression> = java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.Expression> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { super. setResultType ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { super. setResultFactoryName ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; this . org.springframework.integration.xml.transformer.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; if ( this . javax.xml.transform.Templates == null ) { javax.xml.transform.TransformerFactory javax.xml.transform.TransformerFactory ; if ( this . java.lang.String != null ) { javax.xml.transform.TransformerFactory = javax.xml.transform.TransformerFactory . javax.xml.transform.TransformerFactory ( this . java.lang.String , this . java.lang.ClassLoader ) ; } else { javax.xml.transform.TransformerFactory = javax.xml.transform.TransformerFactory . javax.xml.transform.TransformerFactory ( ) ; } this . javax.xml.transform.Templates = javax.xml.transform.TransformerFactory . javax.xml.transform.Templates ( javax.xml.transform.stream.StreamSource ( this . org.springframework.integration.xml.transformer.Resource ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.xml.transformer.Message<?> ) throws java.lang.Exception { javax.xml.transform.Transformer javax.xml.transform.Transformer = javax.xml.transform.Transformer ( org.springframework.integration.xml.transformer.Message<> ) ; java.lang.Object java.lang.Object ; if ( this . boolean ) { java.lang.Object = this . org.springframework.integration.xml.transformer.SourceFactory . createSource ( org.springframework.integration.xml.transformer.Message<> . getPayload ( ) ) ; } else { java.lang.Object = org.springframework.integration.xml.transformer.Message<> . getPayload ( ) ; } java.lang.Object java.lang.Object = null ; if ( this . boolean ) { java.lang.Object = java.lang.Object ( java.lang.Object , javax.xml.transform.Transformer ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.Object = java.lang.String ( ( java.lang.String ) java.lang.Object , javax.xml.transform.Transformer ) ; } else if ( java.lang.Object instanceof org.w3c.dom.Document ) { java.lang.Object = org.w3c.dom.Document ( ( org.w3c.dom.Document ) java.lang.Object , javax.xml.transform.Transformer ) ; } else if ( java.lang.Object instanceof javax.xml.transform.Source ) { java.lang.Object = java.lang.Object ( ( javax.xml.transform.Source ) java.lang.Object , java.lang.Object , javax.xml.transform.Transformer ) ; } else { java.lang.Object = java.lang.Object ( java.lang.Object , javax.xml.transform.Transformer ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , javax.xml.transform.Transformer javax.xml.transform.Transformer ) throws javax.xml.transform.TransformerException { javax.xml.transform.Source javax.xml.transform.Source ; if ( this . boolean ) { javax.xml.transform.Source = this . org.springframework.integration.xml.transformer.SourceFactory . createSource ( java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { javax.xml.transform.Source = new StringSource ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof org.w3c.dom.Document ) { javax.xml.transform.Source = new javax.xml.transform.dom.DOMSource ( ( org.w3c.dom.Document ) java.lang.Object ) ; } else if ( java.lang.Object instanceof javax.xml.transform.Source ) { javax.xml.transform.Source = ( javax.xml.transform.Source ) java.lang.Object ; } else { javax.xml.transform.Source = this . org.springframework.integration.xml.transformer.SourceFactory . createSource ( java.lang.Object ) ; } return java.lang.Object ( javax.xml.transform.Source , java.lang.Object , javax.xml.transform.Transformer ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( javax.xml.transform.Source javax.xml.transform.Source , java.lang.Object java.lang.Object , javax.xml.transform.Transformer javax.xml.transform.Transformer ) throws javax.xml.transform.TransformerException { javax.xml.transform.Result javax.xml.transform.Result ; if ( ! this . boolean && STRING . boolean ( javax.xml.transform.Transformer . java.util.Properties ( ) . java.lang.String ( STRING ) ) ) { javax.xml.transform.Result = new StringResult ( ) ; } else { javax.xml.transform.Result = this . getResultFactory ( ) . createResult ( java.lang.Object ) ; } javax.xml.transform.Transformer . void ( javax.xml.transform.Source , javax.xml.transform.Result ) ; if ( this . org.springframework.integration.xml.transformer.ResultTransformer != null ) { return this . org.springframework.integration.xml.transformer.ResultTransformer . transformResult ( javax.xml.transform.Result ) ; } return javax.xml.transform.Result ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , javax.xml.transform.Transformer javax.xml.transform.Transformer ) throws javax.xml.transform.TransformerException { StringResult org.springframework.integration.xml.transformer.StringResult = new StringResult ( ) ; javax.xml.transform.Source javax.xml.transform.Source ; if ( this . boolean ) { javax.xml.transform.Source = this . org.springframework.integration.xml.transformer.SourceFactory . createSource ( java.lang.String ) ; } else { javax.xml.transform.Source = new StringSource ( java.lang.String ) ; } javax.xml.transform.Transformer . void ( javax.xml.transform.Source , org.springframework.integration.xml.transformer.StringResult ) ; return org.springframework.integration.xml.transformer.StringResult . toString ( ) ; }  <METHOD_END>
<METHOD_START> private org.w3c.dom.Document org.w3c.dom.Document ( org.w3c.dom.Document org.w3c.dom.Document , javax.xml.transform.Transformer javax.xml.transform.Transformer ) throws javax.xml.transform.TransformerException { javax.xml.transform.Source javax.xml.transform.Source ; if ( this . boolean ) { javax.xml.transform.Source = this . org.springframework.integration.xml.transformer.SourceFactory . createSource ( org.w3c.dom.Document ) ; } else { javax.xml.transform.Source = new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Document ) ; } javax.xml.transform.Result javax.xml.transform.Result = this . getResultFactory ( ) . createResult ( org.w3c.dom.Document ) ; if ( ! javax.xml.transform.dom.DOMResult .class . boolean ( javax.xml.transform.Result . java.lang.Class<? extends javax.xml.transform.Result> ( ) ) ) { throw new MessagingException ( STRING ) ; } javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = ( javax.xml.transform.dom.DOMResult ) javax.xml.transform.Result ; javax.xml.transform.Transformer . void ( javax.xml.transform.Source , javax.xml.transform.dom.DOMResult ) ; return ( org.w3c.dom.Document ) javax.xml.transform.dom.DOMResult . org.w3c.dom.Node ( ) ; }  <METHOD_END>
<METHOD_START> private javax.xml.transform.Transformer javax.xml.transform.Transformer ( Message < ? > org.springframework.integration.xml.transformer.Message<?> ) throws javax.xml.transform.TransformerException { javax.xml.transform.Transformer javax.xml.transform.Transformer = this . javax.xml.transform.Templates . javax.xml.transform.Transformer ( ) ; if ( this . java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.Expression> != null ) { for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.xml.transformer.Expression> < java.lang.String , Expression > java.util.Map.Entry<java.lang.String,org.springframework.integration.xml.transformer.Expression> : this . java.util.Map<java.lang.String,org.springframework.integration.xml.transformer.Expression> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.integration.xml.transformer.Expression> . getKey ( ) ; Expression org.springframework.integration.xml.transformer.Expression = java.util.Map.Entry<java.lang.String,org.springframework.integration.xml.transformer.Expression> . getValue ( ) ; try { java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.Expression . getValue ( this . org.springframework.integration.xml.transformer.StandardEvaluationContext , org.springframework.integration.xml.transformer.Message<> ) ; javax.xml.transform.Transformer . void ( java.lang.String , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.integration.xml.transformer.Expression . getExpressionString ( ) + STRING + java.lang.String + STRING ) ; } } } } if ( ! ObjectUtils . isEmpty ( this . java.lang.String[] ) ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.integration.xml.transformer.Message<> . getHeaders ( ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; if ( PatternMatchUtils . simpleMatch ( this . java.lang.String[] , java.lang.String ) ) { javax.xml.transform.Transformer . void ( java.lang.String , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } } return javax.xml.transform.Transformer ; }  <METHOD_END>
<METHOD_START> private static javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource ( Resource org.springframework.integration.xml.transformer.Resource ) throws java.io.IOException { try { java.lang.String java.lang.String = org.springframework.integration.xml.transformer.Resource . getURI ( ) . toString ( ) ; return new javax.xml.transform.stream.StreamSource ( org.springframework.integration.xml.transformer.Resource . getInputStream ( ) , java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { return new javax.xml.transform.stream.StreamSource ( org.springframework.integration.xml.transformer.Resource . getInputStream ( ) ) ; } }  <METHOD_END>
