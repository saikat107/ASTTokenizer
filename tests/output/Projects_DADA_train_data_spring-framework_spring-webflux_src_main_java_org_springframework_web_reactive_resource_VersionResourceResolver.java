<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> < java.lang.String , VersionStrategy > java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ) { this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . clear ( ) ; this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . putAll ( java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> < java.lang.String , VersionStrategy > java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ( ) { return this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver ( java.lang.String ... java.lang.String[] ) { org.springframework.web.reactive.resource.VersionResourceResolver ( new ContentVersionStrategy ( ) , java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.lang.String[] . int ) ; java.lang.String java.lang.String = STRING + java.lang.String ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; if ( ! java.lang.String . boolean ( java.lang.String ) && ! java.util.List<java.lang.String> . boolean ( java.lang.String + java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String + java.lang.String ) ; } } return org.springframework.web.reactive.resource.VersionResourceResolver ( new FixedVersionStrategy ( java.lang.String ) , java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver ( VersionStrategy org.springframework.web.reactive.resource.VersionStrategy , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ( ) . put ( java.lang.String , org.springframework.web.reactive.resource.VersionStrategy ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> , ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { return org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , java.util.List<> ) . otherwiseIfEmpty ( Mono . defer ( ( ) resolveVersionedResource ( exchange , requestPath , locations , chain ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> , ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { VersionStrategy org.springframework.web.reactive.resource.VersionStrategy = org.springframework.web.reactive.resource.VersionStrategy ( java.lang.String ) ; if ( org.springframework.web.reactive.resource.VersionStrategy == null ) { return Mono . empty ( ) ; } java.lang.String java.lang.String = org.springframework.web.reactive.resource.VersionStrategy . extractVersion ( java.lang.String ) ; if ( StringUtils . isEmpty ( java.lang.String ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING ) ; } return Mono . empty ( ) ; } java.lang.String java.lang.String = org.springframework.web.reactive.resource.VersionStrategy . removeVersion ( java.lang.String , java.lang.String ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING ) ; } return org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , java.util.List<> ) . then ( baseResource -> { String actualVersion = versionStrategy . getResourceVersion ( baseResource ) ; if ( candidateVersion . equals ( actualVersion ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + candidateVersion + STRING ) ; } return Mono . just ( new FileNameVersionedResource ( baseResource , candidateVersion ) ) ; } else { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + requestPath + STRING + candidateVersion + STRING ) ; } return Mono . empty ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.resource.Mono<java.lang.String> < java.lang.String > org.springframework.web.reactive.resource.Mono<java.lang.String> ( java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> , ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { return org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , java.util.List<> ) . then ( baseUrl -> { if ( StringUtils . hasText ( baseUrl ) ) { VersionStrategy versionStrategy = getStrategyForPath ( resourceUrlPath ) ; if ( versionStrategy == null ) { return Mono . just ( baseUrl ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + STRING + resourceUrlPath + STRING ) ; } return chain . resolveResource ( null , baseUrl , locations ) . map ( resource -> { String version = versionStrategy . getResourceVersion ( resource ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + version + STRING + resource ) ; } return versionStrategy . addVersion ( baseUrl , version ) ; } ) ; } return Mono . empty ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.resource.VersionStrategy org.springframework.web.reactive.resource.VersionStrategy ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = STRING . java.lang.String ( java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . keySet ( ) ) { if ( this . org.springframework.web.reactive.resource.AntPathMatcher . match ( java.lang.String , java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( ! java.util.List<java.lang.String> . boolean ( ) ) { java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> = this . org.springframework.web.reactive.resource.AntPathMatcher . getPatternComparator ( java.lang.String ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; return this . java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . get ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.web.reactive.resource.Resource , java.lang.String java.lang.String ) { this . org.springframework.web.reactive.resource.Resource = org.springframework.web.reactive.resource.Resource ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . exists ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . isReadable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . isOpen ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . isFile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . getURL ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . getURI ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.File java.io.File ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . getFile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.reactive.resource.Resource . getFilename ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . contentLength ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . lastModified ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.resource.Resource org.springframework.web.reactive.resource.Resource ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . createRelative ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.web.reactive.resource.Resource . getDescription ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return org.springframework.web.reactive.resource.Resource . getInputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.resource.HttpHeaders org.springframework.web.reactive.resource.HttpHeaders ( ) { HttpHeaders org.springframework.web.reactive.resource.HttpHeaders ; if( this . org.springframework.web.reactive.resource.Resource instanceof HttpResource ) { org.springframework.web.reactive.resource.HttpHeaders = ( ( HttpResource ) this . org.springframework.web.reactive.resource.Resource ) . getResponseHeaders ( ) ; } else { org.springframework.web.reactive.resource.HttpHeaders = new HttpHeaders ( ) ; } org.springframework.web.reactive.resource.HttpHeaders . setETag ( STRING + this . java.lang.String + STRING ) ; return org.springframework.web.reactive.resource.HttpHeaders ; }  <METHOD_END>
