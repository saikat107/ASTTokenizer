<METHOD_START> @ java.lang.Override public org.springframework.boot.test.context.TestContext org.springframework.boot.test.context.TestContext ( ) { TestContext org.springframework.boot.test.context.TestContext = super. buildTestContext ( ) ; void ( org.springframework.boot.test.context.TestContext . getTestClass ( ) ) ; WebEnvironment org.springframework.boot.test.context.WebEnvironment = org.springframework.boot.test.context.WebEnvironment ( org.springframework.boot.test.context.TestContext . getTestClass ( ) ) ; if ( org.springframework.boot.test.context.WebEnvironment == WebEnvironment . MOCK && org.springframework.boot.test.context.WebApplicationType ( ) == WebApplicationType . SERVLET ) { org.springframework.boot.test.context.TestContext . setAttribute ( java.lang.String , true ) ; } else if ( org.springframework.boot.test.context.WebEnvironment != null && org.springframework.boot.test.context.WebEnvironment . isEmbedded ( ) ) { org.springframework.boot.test.context.TestContext . setAttribute ( java.lang.String , false ) ; } return org.springframework.boot.test.context.TestContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener>> < java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener> < ? extends TestExecutionListener > > java.util.Set<java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener>> ( ) { java.util.Set<java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener>> < java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener> < ? extends TestExecutionListener > > java.util.Set<java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener>> = super. getDefaultTestExecutionListenerClasses ( ) ; java.util.List<org.springframework.boot.test.context.DefaultTestExecutionListenersPostProcessor> < DefaultTestExecutionListenersPostProcessor > java.util.List<org.springframework.boot.test.context.DefaultTestExecutionListenersPostProcessor> = SpringFactoriesLoader . loadFactories ( DefaultTestExecutionListenersPostProcessor .class , java.lang.Class<? extends org.springframework.boot.test.context.SpringBootTestContextBootstrapper> ( ) . java.lang.ClassLoader ( ) ) ; for ( DefaultTestExecutionListenersPostProcessor org.springframework.boot.test.context.DefaultTestExecutionListenersPostProcessor : java.util.List<org.springframework.boot.test.context.DefaultTestExecutionListenersPostProcessor> ) { java.util.Set<java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener>> = org.springframework.boot.test.context.DefaultTestExecutionListenersPostProcessor . postProcessDefaultTestExecutionListeners ( java.util.Set<java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener>> ) ; } return java.util.Set<java.lang.Class<? extends org.springframework.boot.test.context.TestExecutionListener>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.test.context.ContextLoader org.springframework.boot.test.context.ContextLoader ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.List<org.springframework.boot.test.context.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.boot.test.context.ContextConfigurationAttributes> ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<?>[] ( java.lang.Class<> ) ; if ( ! ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ) { for ( ContextConfigurationAttributes org.springframework.boot.test.context.ContextConfigurationAttributes : java.util.List<org.springframework.boot.test.context.ContextConfigurationAttributes> ) { void ( org.springframework.boot.test.context.ContextConfigurationAttributes , java.lang.Class<?>[] ) ; } } return super. resolveContextLoader ( java.lang.Class<> , java.util.List<org.springframework.boot.test.context.ContextConfigurationAttributes> ) ; }  <METHOD_END>
<METHOD_START> private void void ( ContextConfigurationAttributes org.springframework.boot.test.context.ContextConfigurationAttributes , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; java.util.List<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; if ( org.springframework.boot.test.context.ContextConfigurationAttributes . getClasses ( ) != null ) { java.util.List<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List ( org.springframework.boot.test.context.ContextConfigurationAttributes . getClasses ( ) ) ) ; } org.springframework.boot.test.context.ContextConfigurationAttributes . setClasses ( java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends org.springframework.boot.test.context.ContextLoader> < ? extends ContextLoader > java.lang.Class<? extends org.springframework.boot.test.context.ContextLoader> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return SpringBootContextLoader .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.test.context.MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<?>[] ( org.springframework.boot.test.context.MergedContextConfiguration ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.boot.test.context.MergedContextConfiguration ) ; org.springframework.boot.test.context.MergedContextConfiguration = org.springframework.boot.test.context.MergedContextConfiguration ( org.springframework.boot.test.context.MergedContextConfiguration , java.lang.Class<?>[] , java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; WebEnvironment org.springframework.boot.test.context.WebEnvironment = org.springframework.boot.test.context.WebEnvironment ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) ) ; if ( org.springframework.boot.test.context.WebEnvironment != null ) { WebApplicationType org.springframework.boot.test.context.WebApplicationType = org.springframework.boot.test.context.WebApplicationType ( org.springframework.boot.test.context.MergedContextConfiguration ) ; if ( org.springframework.boot.test.context.WebApplicationType == WebApplicationType . SERVLET && ( org.springframework.boot.test.context.WebEnvironment . isEmbedded ( ) || org.springframework.boot.test.context.WebEnvironment == WebEnvironment . MOCK ) ) { WebAppConfiguration org.springframework.boot.test.context.WebAppConfiguration = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) , WebAppConfiguration .class ) ; java.lang.String java.lang.String = ( org.springframework.boot.test.context.WebAppConfiguration == null ? STRING : org.springframework.boot.test.context.WebAppConfiguration . value ( ) ) ; org.springframework.boot.test.context.MergedContextConfiguration = new WebMergedContextConfiguration ( org.springframework.boot.test.context.MergedContextConfiguration , java.lang.String ) ; } else if ( org.springframework.boot.test.context.WebApplicationType == WebApplicationType . REACTIVE && ( org.springframework.boot.test.context.WebEnvironment . isEmbedded ( ) || org.springframework.boot.test.context.WebEnvironment == WebEnvironment . MOCK ) ) { return new ReactiveWebMergedContextConfiguration ( org.springframework.boot.test.context.MergedContextConfiguration ) ; } } return org.springframework.boot.test.context.MergedContextConfiguration ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.context.WebApplicationType org.springframework.boot.test.context.WebApplicationType ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { WebApplicationType org.springframework.boot.test.context.WebApplicationType = org.springframework.boot.test.context.WebApplicationType ( org.springframework.boot.test.context.MergedContextConfiguration ) ; if ( org.springframework.boot.test.context.WebApplicationType != null ) { return org.springframework.boot.test.context.WebApplicationType ; } return org.springframework.boot.test.context.WebApplicationType ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.context.WebApplicationType org.springframework.boot.test.context.WebApplicationType ( ) { if ( ClassUtils . isPresent ( java.lang.String , null ) && ! ClassUtils . isPresent ( java.lang.String , null ) ) { return WebApplicationType . REACTIVE ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! ClassUtils . isPresent ( java.lang.String , null ) ) { return WebApplicationType . NONE ; } } return WebApplicationType . SERVLET ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.context.WebApplicationType org.springframework.boot.test.context.WebApplicationType ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { PropertySources org.springframework.boot.test.context.PropertySources = org.springframework.boot.test.context.PropertySources ( org.springframework.boot.test.context.MergedContextConfiguration . getPropertySourceProperties ( ) ) ; RelaxedPropertyResolver org.springframework.boot.test.context.RelaxedPropertyResolver = new RelaxedPropertyResolver ( new PropertySourcesPropertyResolver ( org.springframework.boot.test.context.PropertySources ) , STRING ) ; java.lang.String java.lang.String = org.springframework.boot.test.context.RelaxedPropertyResolver . getProperty ( STRING ) ; return ( java.lang.String != null ? WebApplicationType . valueOf ( java.lang.String . java.lang.String ( ) ) : null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.context.PropertySources org.springframework.boot.test.context.PropertySources ( java.lang.String [] java.lang.String[] ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = TestPropertySourceUtils . convertInlinedPropertiesToMap ( java.lang.String[] ) ; MutablePropertySources org.springframework.boot.test.context.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.test.context.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; return org.springframework.boot.test.context.MutablePropertySources ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.boot.test.context.MergedContextConfiguration . getClasses ( ) ; if ( boolean ( java.lang.Class<?>[] ) || org.springframework.boot.test.context.MergedContextConfiguration . hasLocations ( ) || ! org.springframework.boot.test.context.MergedContextConfiguration . getContextInitializerClasses ( ) . isEmpty ( ) ) { return java.lang.Class<?>[] ; } java.lang.Class<?> < ? > java.lang.Class<?> = new SpringBootConfigurationFinder ( ) . findFromClass ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) ) ; Assert . state ( java.lang.Class<> != null , STRING + STRING + STRING ) ; org.springframework.boot.test.context.Log . info ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) ) ; return java.lang.Class<?>[] ( java.lang.Class<> , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( ! AnnotatedElementUtils . isAnnotated ( java.lang.Class<> , TestConfiguration .class ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.Class<?>[] . int + NUMBER ] ; java.lang.Class<?>[] [ NUMBER ] = java.lang.Class<> ; java.lang.System . void ( java.lang.Class<?>[] , NUMBER , java.lang.Class<?>[] , NUMBER , java.lang.Class<?>[] . int ) ; return java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( java.util.Arrays . java.util.List ( org.springframework.boot.test.context.MergedContextConfiguration . getPropertySourceProperties ( ) ) ) ; java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } void ( org.springframework.boot.test.context.MergedContextConfiguration , java.util.List<java.lang.String> ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.boot.test.context.SpringBootTestContextBootstrapper> ( ) . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> protected void void ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.Class<> ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { java.util.List<java.lang.String> . boolean ( NUMBER , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } if ( org.springframework.boot.test.context.WebEnvironment ( java.lang.Class<> ) == WebEnvironment . RANDOM_PORT ) { java.util.List<java.lang.String> . boolean ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.test.context.WebEnvironment org.springframework.boot.test.context.WebEnvironment ( java.lang.Class<?> < ? > java.lang.Class<?> ) { SpringBootTest org.springframework.boot.test.context.SpringBootTest = org.springframework.boot.test.context.SpringBootTest ( java.lang.Class<> ) ; return ( org.springframework.boot.test.context.SpringBootTest == null ? null : org.springframework.boot.test.context.SpringBootTest . webEnvironment ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { SpringBootTest org.springframework.boot.test.context.SpringBootTest = org.springframework.boot.test.context.SpringBootTest ( java.lang.Class<> ) ; return ( org.springframework.boot.test.context.SpringBootTest == null ? null : org.springframework.boot.test.context.SpringBootTest . classes ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { SpringBootTest org.springframework.boot.test.context.SpringBootTest = org.springframework.boot.test.context.SpringBootTest ( java.lang.Class<> ) ; return ( org.springframework.boot.test.context.SpringBootTest == null ? null : org.springframework.boot.test.context.SpringBootTest . properties ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.test.context.SpringBootTest org.springframework.boot.test.context.SpringBootTest ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotatedElementUtils . getMergedAnnotation ( java.lang.Class<> , SpringBootTest .class ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { SpringBootTest org.springframework.boot.test.context.SpringBootTest = org.springframework.boot.test.context.SpringBootTest ( java.lang.Class<> ) ; if ( org.springframework.boot.test.context.SpringBootTest != null && ( org.springframework.boot.test.context.SpringBootTest . webEnvironment ( ) == WebEnvironment . DEFINED_PORT || org.springframework.boot.test.context.SpringBootTest . webEnvironment ( ) == WebEnvironment . RANDOM_PORT ) && T ( WebAppConfiguration .class , java.lang.Class<> ) != null ) { throw new java.lang.IllegalStateException ( STRING + STRING + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> private < T extends java.lang.annotation.Annotation > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotatedElementUtils . getMergedAnnotation ( java.lang.Class<> , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.test.context.MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { return org.springframework.boot.test.context.MergedContextConfiguration ( org.springframework.boot.test.context.MergedContextConfiguration , java.lang.Class<?>[] , org.springframework.boot.test.context.MergedContextConfiguration . getPropertySourceProperties ( ) ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.test.context.MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String [] java.lang.String[] ) { return new MergedContextConfiguration ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) , org.springframework.boot.test.context.MergedContextConfiguration . getLocations ( ) , java.lang.Class<?>[] , org.springframework.boot.test.context.MergedContextConfiguration . getContextInitializerClasses ( ) , org.springframework.boot.test.context.MergedContextConfiguration . getActiveProfiles ( ) , org.springframework.boot.test.context.MergedContextConfiguration . getPropertySourceLocations ( ) , java.lang.String[] , org.springframework.boot.test.context.MergedContextConfiguration . getContextCustomizers ( ) , org.springframework.boot.test.context.MergedContextConfiguration . getContextLoader ( ) , getCacheAwareContextLoaderDelegate ( ) , org.springframework.boot.test.context.MergedContextConfiguration . getParent ( ) ) ; }  <METHOD_END>
