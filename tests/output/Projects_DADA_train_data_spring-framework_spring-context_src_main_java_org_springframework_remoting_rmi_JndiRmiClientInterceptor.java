<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( RemoteInvocationFactory org.springframework.remoting.rmi.RemoteInvocationFactory ) { this . org.springframework.remoting.rmi.RemoteInvocationFactory = org.springframework.remoting.rmi.RemoteInvocationFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.remoting.rmi.RemoteInvocationFactory org.springframework.remoting.rmi.RemoteInvocationFactory ( ) { return this . org.springframework.remoting.rmi.RemoteInvocationFactory ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.naming.NamingException { super. afterPropertiesSet ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.remoting.rmi.RemoteLookupFailureException { if ( this . boolean ) { java.lang.Object java.lang.Object = java.lang.Object ( ) ; if ( logger . isDebugEnabled ( ) ) { if ( java.lang.Object instanceof RmiInvocationHandler ) { logger . debug ( STRING + getJndiName ( ) + STRING ) ; } else if ( java.lang.Class<?> ( ) != null ) { boolean boolean = java.lang.Class<?> ( ) . boolean ( java.lang.Object ) ; logger . debug ( STRING + java.lang.Class<?> ( ) . java.lang.String ( ) + STRING + getJndiName ( ) + STRING + ( ! boolean ? STRING : STRING ) + STRING ) ; } } if ( this . boolean ) { this . java.lang.Object = java.lang.Object ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) org.springframework.remoting.rmi.RemoteLookupFailureException { try { return lookup ( ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new RemoteLookupFailureException ( STRING + getJndiName ( ) + STRING , javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException , org.springframework.remoting.rmi.RemoteLookupFailureException { if ( ! this . boolean || ( this . boolean && ! this . boolean ) ) { return ( this . java.lang.Object != null ? this . java.lang.Object : java.lang.Object ( ) ) ; } else { synchronized ( this . java.lang.Object ) { if ( this . java.lang.Object == null ) { this . java.lang.Object = java.lang.Object ( ) ; } return this . java.lang.Object ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object ; try { java.lang.Object = java.lang.Object ( ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new RemoteLookupFailureException ( STRING + getJndiName ( ) + STRING , javax.naming.NamingException ) ; } javax.naming.Context javax.naming.Context = ( this . boolean ? getJndiTemplate ( ) . getContext ( ) : null ) ; try { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , java.lang.Object ) ; } catch ( RemoteConnectFailureException org.springframework.remoting.rmi.RemoteConnectFailureException ) { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , org.springframework.remoting.rmi.RemoteConnectFailureException ) ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { if ( boolean ( java.rmi.RemoteException ) ) { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , java.rmi.RemoteException ) ; } else { throw java.rmi.RemoteException ; } } finally { getJndiTemplate ( ) . releaseContext ( javax.naming.Context ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.rmi.RemoteException java.rmi.RemoteException ) { return RmiClientInterceptorUtils . isConnectFailure ( java.rmi.RemoteException ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation , java.lang.Exception java.lang.Exception ) throws java.lang.Throwable { if ( this . boolean ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getJndiName ( ) + STRING , java.lang.Exception ) ; } else if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + getJndiName ( ) + STRING ) ; } return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation ) ; } else { throw java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object ; synchronized ( this . java.lang.Object ) { this . java.lang.Object = null ; java.lang.Object = java.lang.Object ( ) ; if ( this . boolean ) { this . java.lang.Object = java.lang.Object ; } } return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation , java.lang.Object java.lang.Object ) throws java.lang.Throwable { if ( java.lang.Object instanceof RmiInvocationHandler ) { try { return java.lang.Object ( org.springframework.remoting.rmi.MethodInvocation , ( RmiInvocationHandler ) java.lang.Object ) ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { throw java.lang.Exception ( java.rmi.RemoteException , org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new RemoteInvocationFailureException ( STRING + org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) + STRING + getJndiName ( ) + STRING , java.lang.Throwable ) ; } } else { try { return RmiClientInterceptorUtils . invokeRemoteMethod ( org.springframework.remoting.rmi.MethodInvocation , java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( java.lang.Throwable instanceof java.rmi.RemoteException ) { throw java.lang.Exception ( ( java.rmi.RemoteException ) java.lang.Throwable , org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) ) ; } else { throw java.lang.Throwable ; } } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation , RmiInvocationHandler org.springframework.remoting.rmi.RmiInvocationHandler )			throws java.rmi.RemoteException , java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { if ( AopUtils . isToStringMethod ( org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) ) ) { return STRING + getJndiName ( ) + STRING ; } return org.springframework.remoting.rmi.RmiInvocationHandler . invoke ( org.springframework.remoting.rmi.RemoteInvocation ( org.springframework.remoting.rmi.MethodInvocation ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.rmi.RemoteInvocation org.springframework.remoting.rmi.RemoteInvocation ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation ) { return org.springframework.remoting.rmi.RemoteInvocationFactory ( ) . createRemoteInvocation ( org.springframework.remoting.rmi.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Exception java.lang.Exception ( java.rmi.RemoteException java.rmi.RemoteException , java.lang.reflect.Method java.lang.reflect.Method ) { return RmiClientInterceptorUtils . convertRmiAccessException ( java.lang.reflect.Method , java.rmi.RemoteException , boolean ( java.rmi.RemoteException ) , getJndiName ( ) ) ; }  <METHOD_END>
