<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . consistencyLevel ( ConsistencyLevel . ANY ) . retryPolicy ( RetryPolicy . DEFAULT ) . readTimeout ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . fetchSize ( NUMBER ) . tracing ( true ) . build ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getClass ( ) ) . isEqualTo ( QueryOptions .class ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) ) . isEqualTo ( RetryPolicy . DEFAULT ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getConsistencyLevel ( ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getDriverConsistencyLevel ( ) ) . isEqualTo ( ConsistencyLevel . ANY ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getReadTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getFetchSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getTracing ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . retryPolicy ( new LoggingRetryPolicy ( DefaultRetryPolicy . INSTANCE ) ) . build ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) ) . isInstanceOf ( LoggingRetryPolicy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . retryPolicy ( RetryPolicy . DOWNGRADING_CONSISTENCY ) . build ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) ) . isEqualTo ( RetryPolicy . DOWNGRADING_CONSISTENCY ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { QueryOptions . builder ( ) . retryPolicy ( RetryPolicy . DEFAULT ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { QueryOptions . builder ( ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) . retryPolicy ( RetryPolicy . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = new QueryOptions ( ) ; org.springframework.cassandra.core.QueryOptions . setRetryPolicy ( RetryPolicy . DEFAULT ) ; org.springframework.cassandra.core.QueryOptions . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = new QueryOptions ( ) ; org.springframework.cassandra.core.QueryOptions . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; org.springframework.cassandra.core.QueryOptions . setRetryPolicy ( RetryPolicy . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = new QueryOptions ( ) ; org.springframework.cassandra.core.QueryOptions . setConsistencyLevel ( org . springframework . cassandra . core . ConsistencyLevel . ANY ) ; org.springframework.cassandra.core.QueryOptions . setConsistencyLevel ( ConsistencyLevel . ANY ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = new QueryOptions ( ) ; org.springframework.cassandra.core.QueryOptions . setConsistencyLevel ( ConsistencyLevel . ANY ) ; org.springframework.cassandra.core.QueryOptions . setConsistencyLevel ( org . springframework . cassandra . core . ConsistencyLevel . ANY ) ; }  <METHOD_END>
