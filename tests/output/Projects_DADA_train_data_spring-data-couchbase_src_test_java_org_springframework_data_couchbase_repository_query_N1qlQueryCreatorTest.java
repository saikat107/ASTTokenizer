<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . BETWEEN ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , STRING , NUMBER , NUMBER , STRING , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . IS_NOT_NULL ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . IS_NULL ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . LESS_THAN ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . LESS_THAN_EQUAL ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . GREATER_THAN ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . GREATER_THAN_EQUAL ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . BEFORE ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . AFTER ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . NOT_LIKE ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . LIKE ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . STARTING_WITH ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . ENDING_WITH ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . NOT_CONTAINING ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . CONTAINING ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . NOT_IN ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . NOT_IN ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , STRING ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( java.util.List<java.lang.Object> , java.util.List<java.lang.Object> ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . NOT_IN ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( java.lang.String[] , java.lang.String[] ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . IN ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . IN ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , STRING ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( java.util.List<java.lang.Object> , java.util.List<java.lang.Object> ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . IN ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( java.lang.String[] , java.lang.String[] ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . NEAR ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . WITHIN ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . REGEX ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . EXISTS ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . TRUE ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . FALSE ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . NEGATING_SIMPLE_PROPERTY ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Part . Part Part.Type = Part . Type . SIMPLE_PROPERTY ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , STRING ) . java.util.Iterator<java.lang.Object> ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , false , java.util.Iterator<java.lang.Object> ) ; Expression org.springframework.data.couchbase.repository.query.Expression = createExpression ( Part.Type , STRING , true , java.util.Iterator<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.query.Expression . toString ( ) ) ; }  <METHOD_END>
