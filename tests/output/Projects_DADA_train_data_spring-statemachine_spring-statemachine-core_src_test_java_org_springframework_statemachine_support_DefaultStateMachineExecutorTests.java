<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { SyncTaskExecutor org.springframework.statemachine.support.SyncTaskExecutor = new SyncTaskExecutor ( ) ; Message < java.lang.String > org.springframework.statemachine.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; EventTrigger < java.lang.String , java.lang.String > org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> = new EventTrigger < java.lang.String , java.lang.String > ( STRING ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getSource ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTarget ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTrigger ( ) ) . thenReturn ( org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . transit ( any ( ) ) ) . thenReturn ( true ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> = mock ( StateMachine .class ) ; when ( org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> . getState ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Transition < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Trigger < java.lang.String , java.lang.String > , Transition < java.lang.String , java.lang.String > > java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.HashMap<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . put ( org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Transition < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; Message < java.lang.String > org.springframework.statemachine.support.Message<java.lang.String> = null ; DefaultStateMachineExecutor < java.lang.String , java.lang.String > org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> = new DefaultStateMachineExecutor <> ( org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> , org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> , java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Message<java.lang.String> ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . setTaskExecutor ( org.springframework.statemachine.support.SyncTaskExecutor ) ; org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit = new org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit ( ) ; org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . void ( NUMBER ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . setStateMachineExecutorTransit ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . queueEvent ( org.springframework.statemachine.support.Message<java.lang.String> ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . execute ( ) ; assertThat ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { SyncTaskExecutor org.springframework.statemachine.support.SyncTaskExecutor = new SyncTaskExecutor ( ) ; ConcurrentTaskScheduler org.springframework.statemachine.support.ConcurrentTaskScheduler = new ConcurrentTaskScheduler ( ) ; EventTrigger < java.lang.String , java.lang.String > org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> = new EventTrigger < java.lang.String , java.lang.String > ( STRING ) ; TimerTrigger < java.lang.String , java.lang.String > org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> = new TimerTrigger <> ( NUMBER , NUMBER ) ; org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> . setTaskScheduler ( org.springframework.statemachine.support.ConcurrentTaskScheduler ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getSource ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTarget ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTrigger ( ) ) . thenReturn ( org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . transit ( any ( ) ) ) . thenReturn ( true ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getSource ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTarget ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTrigger ( ) ) . thenReturn ( org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . transit ( any ( ) ) ) . thenReturn ( true ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> = mock ( StateMachine .class ) ; when ( org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> . getState ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Transition < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Trigger < java.lang.String , java.lang.String > , Transition < java.lang.String , java.lang.String > > java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.HashMap<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . put ( org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . put ( org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Transition < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; Message < java.lang.String > org.springframework.statemachine.support.Message<java.lang.String> = null ; DefaultStateMachineExecutor < java.lang.String , java.lang.String > org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> = new DefaultStateMachineExecutor <> ( org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> , org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> , java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Message<java.lang.String> ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . setTaskExecutor ( org.springframework.statemachine.support.SyncTaskExecutor ) ; org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit = new org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit ( ) ; org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . void ( NUMBER ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . setStateMachineExecutorTransit ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> . arm ( ) ; assertThat ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { SyncTaskExecutor org.springframework.statemachine.support.SyncTaskExecutor = new SyncTaskExecutor ( ) ; ConcurrentTaskScheduler org.springframework.statemachine.support.ConcurrentTaskScheduler = new ConcurrentTaskScheduler ( ) ; EventTrigger < java.lang.String , java.lang.String > org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> = new EventTrigger < java.lang.String , java.lang.String > ( STRING ) ; TimerTrigger < java.lang.String , java.lang.String > org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> = new TimerTrigger <> ( NUMBER ) ; org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> . setTaskScheduler ( org.springframework.statemachine.support.ConcurrentTaskScheduler ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.support.State<java.lang.String,java.lang.String> = mock ( State .class ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> . getIds ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getSource ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTarget ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTrigger ( ) ) . thenReturn ( org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . transit ( any ( ) ) ) . thenReturn ( true ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getSource ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTarget ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . getTrigger ( ) ) . thenReturn ( org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> ) ; when ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> . transit ( any ( ) ) ) . thenReturn ( true ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> = mock ( StateMachine .class ) ; when ( org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> . getState ( ) ) . thenReturn ( org.springframework.statemachine.support.State<java.lang.String,java.lang.String> ) ; java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Transition < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Trigger < java.lang.String , java.lang.String > , Transition < java.lang.String , java.lang.String > > java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.HashMap<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . put ( org.springframework.statemachine.support.EventTrigger<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . put ( org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> < Transition < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> <> ( ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; Message < java.lang.String > org.springframework.statemachine.support.Message<java.lang.String> = null ; DefaultStateMachineExecutor < java.lang.String , java.lang.String > org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> = new DefaultStateMachineExecutor <> ( org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> , org.springframework.statemachine.support.StateMachine<java.lang.String,java.lang.String> , java.util.Collection<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , java.util.Map<org.springframework.statemachine.support.Trigger<java.lang.String,java.lang.String>,org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , java.util.List<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> , org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> , org.springframework.statemachine.support.Message<java.lang.String> ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . setTaskExecutor ( org.springframework.statemachine.support.SyncTaskExecutor ) ; org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit = new org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit ( ) ; org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . void ( NUMBER ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . setStateMachineExecutorTransit ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.support.TimerTrigger<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.support.DefaultStateMachineExecutorTests.TestStateMachineExecutorTransit . java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < java.lang.String , java.lang.String > org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> , StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.support.StateContext<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.support.Message<java.lang.String> ) { java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.ArrayList<org.springframework.statemachine.support.Transition<java.lang.String,java.lang.String>> . clear ( ) ; }  <METHOD_END>
