<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . LOCATION , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) . andExpect ( jsonPath ( STRING ) . isArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( MvcEndpoint org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint : this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) ) { java.lang.String java.lang.String = org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint . getPath ( ) ; if ( STRING . boolean ( java.lang.String ) ) { continue; } java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String . java.lang.String ( NUMBER ) : java.lang.String ; java.lang.String = java.lang.String . int ( ) > NUMBER ? java.lang.String : STRING ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING , java.lang.String ) . value ( STRING + org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint . getPath ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.boot.actuate.endpoint.mvc.ResourceSupport org.springframework.boot.actuate.endpoint.mvc.ResourceSupport ( ) { ResourceSupport org.springframework.boot.actuate.endpoint.mvc.ResourceSupport = new ResourceSupport ( ) ; org.springframework.boot.actuate.endpoint.mvc.ResourceSupport . add ( linkTo ( org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpointManagementContextPathIntegrationTests.SpringBootHypermediaApplication .class ) . slash ( STRING ) . withSelfRel ( ) ) ; return org.springframework.boot.actuate.endpoint.mvc.ResourceSupport ; }  <METHOD_END>
