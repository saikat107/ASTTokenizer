<METHOD_START> @ Before @ java.lang.Override public void void ( ) { super. setUp ( ) ; SecurityContextHolder . getContext ( ) . setAuthentication ( new UsernamePasswordAuthenticationToken ( STRING , STRING , AuthorityUtils . createAuthorityList ( STRING , STRING ) ) ) ; org.springframework.data.rest.tests.security.SecuredPersonRepository . deleteAll ( ) ; org.springframework.data.rest.tests.security.PreAuthorizedOrderRepository . deleteAll ( ) ; Person org.springframework.data.rest.tests.security.Person = org.springframework.data.rest.tests.security.SecuredPersonRepository . save ( new Person ( STRING , STRING ) ) ; org.springframework.data.rest.tests.security.PreAuthorizedOrderRepository . save ( new Order ( org.springframework.data.rest.tests.security.Person ) ) ; SecurityContextHolder . clearContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . mvc = MockMvcBuilders . webAppContextSetup ( org.springframework.data.rest.tests.security.WebApplicationContext ) . defaultRequest ( get ( STRING ) . accept ( TestMvcClient . DEFAULT_MEDIA_TYPE ) ) . apply ( springSecurity ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ; MockHttpServletResponse org.springframework.data.rest.tests.security.MockHttpServletResponse = mvc . perform ( get ( java.lang.String ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = assertHasJsonPathValue ( STRING , org.springframework.data.rest.tests.security.MockHttpServletResponse ) ; SecurityContextHolder . clearContext ( ) ; mvc . perform ( delete ( java.lang.String ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.security.MockHttpServletResponse = mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = assertHasJsonPathValue ( STRING , org.springframework.data.rest.tests.security.MockHttpServletResponse ) ; SecurityContextHolder . clearContext ( ) ; mvc . perform ( delete ( java.lang.String ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andExpect ( status ( ) . isForbidden ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.security.MockHttpServletResponse = mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING , STRING ) ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = assertHasJsonPathValue ( STRING , org.springframework.data.rest.tests.security.MockHttpServletResponse ) ; SecurityContextHolder . clearContext ( ) ; mvc . perform ( delete ( java.lang.String ) . with ( user ( STRING ) . roles ( STRING , STRING ) ) ) . andExpect ( status ( ) . is ( HttpStatus . NO_CONTENT . value ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING , STRING ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.security.MockHttpServletResponse = mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = assertHasJsonPathValue ( STRING , org.springframework.data.rest.tests.security.MockHttpServletResponse ) ; SecurityContextHolder . clearContext ( ) ; mvc . perform ( delete ( java.lang.String ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.security.MockHttpServletResponse = mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = assertHasJsonPathValue ( STRING , org.springframework.data.rest.tests.security.MockHttpServletResponse ) ; mvc . perform ( delete ( java.lang.String ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andExpect ( status ( ) . isForbidden ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.security.MockHttpServletResponse = mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = assertHasJsonPathValue ( STRING , org.springframework.data.rest.tests.security.MockHttpServletResponse ) ; SecurityContextHolder . clearContext ( ) ; mvc . perform ( delete ( java.lang.String ) . with ( user ( STRING ) . roles ( STRING , STRING ) ) ) . andExpect ( status ( ) . is ( HttpStatus . NO_CONTENT . value ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { mvc . perform ( get ( client . discoverUnique ( STRING ) . expand ( ) . getHref ( ) ) . with ( user ( STRING ) . roles ( STRING , STRING ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
