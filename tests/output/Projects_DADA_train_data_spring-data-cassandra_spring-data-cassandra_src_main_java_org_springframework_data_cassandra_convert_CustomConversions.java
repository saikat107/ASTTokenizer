<METHOD_START> void ( ) { this( new java.util.ArrayList<java.lang.Object> <> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<?> < ? > java.util.List<?> ) { Assert . notNull ( java.util.List<> , STRING ) ; this . java.util.Set<org.springframework.data.cassandra.convert.ConvertiblePair> = new java.util.LinkedHashSet <> ( ) ; this . java.util.Set<org.springframework.data.cassandra.convert.ConvertiblePair> = new java.util.LinkedHashSet <> ( ) ; this . java.util.Map<org.springframework.data.cassandra.convert.ConvertiblePair,java.util.Optional<java.lang.Class<?>>> = new java.util.concurrent.ConcurrentHashMap <> ( ) ; this . java.util.Map<org.springframework.data.cassandra.convert.ConvertiblePair,java.util.Optional<java.lang.Class<?>>> = new java.util.concurrent.ConcurrentHashMap <> ( ) ; this . java.util.Map<java.lang.Class<?>,java.util.Optional<java.lang.Class<?>>> = new java.util.concurrent.ConcurrentHashMap<java.lang.Class<?>,java.util.Optional<java.lang.Class<?>>> <> ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<> ) ; java.util.List<java.lang.Object> . boolean ( CassandraConverters . getConvertersToRegister ( ) ) ; java.util.List<java.lang.Object> . boolean ( CassandraJodaTimeConverters . getConvertersToRegister ( ) ) ; java.util.List<java.lang.Object> . boolean ( CassandraJsr310Converters . getConvertersToRegister ( ) ) ; java.util.List<java.lang.Object> . boolean ( CassandraThreeTenBackPortConverters . getConvertersToRegister ( ) ) ; java.util.List<java.lang.Object> . boolean ( JodaTimeConverters . getConvertersToRegister ( ) ) ; java.util.List<java.lang.Object> . boolean ( Jsr310Converters . getConvertersToRegister ( ) ) ; java.util.List<java.lang.Object> . boolean ( ThreeTenBackPortConverters . getConvertersToRegister ( ) ) ; java.util.List<java.lang.Object> . void ( this :: void ) ; java.util.Collections . void ( java.util.List<java.lang.Object> ) ; this . java.util.List<java.lang.Object> = java.util.Collections . java.util.List<java.lang.Object> ( java.util.List<java.lang.Object> ) ; this . org.springframework.data.cassandra.convert.CassandraSimpleTypeHolder = new CassandraSimpleTypeHolder ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.SimpleTypeHolder org.springframework.data.cassandra.convert.SimpleTypeHolder ( ) { return org.springframework.data.cassandra.convert.CassandraSimpleTypeHolder ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.cassandra.convert.CassandraSimpleTypeHolder . isSimpleType ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( GenericConversionService org.springframework.data.cassandra.convert.GenericConversionService ) { for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { boolean boolean = false ; if ( java.lang.Object instanceof Converter ) { org.springframework.data.cassandra.convert.GenericConversionService . addConverter ( ( Converter < ? , ? > ) java.lang.Object ) ; boolean = true ; } if ( java.lang.Object instanceof ConverterFactory ) { org.springframework.data.cassandra.convert.GenericConversionService . addConverterFactory ( ( ConverterFactory < ? , ? > ) java.lang.Object ) ; boolean = true ; } if ( java.lang.Object instanceof GenericConverter ) { org.springframework.data.cassandra.convert.GenericConversionService . addConverter ( ( GenericConverter ) java.lang.Object ) ; boolean = true ; } if ( ! boolean ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; boolean boolean = java.lang.Class<> . boolean ( ReadingConverter .class ) ; boolean boolean = java.lang.Class<> . boolean ( WritingConverter .class ) ; if ( java.lang.Object instanceof GenericConverter ) { GenericConverter org.springframework.data.cassandra.convert.GenericConverter = ( GenericConverter ) java.lang.Object ; for ( ConvertiblePair org.springframework.data.cassandra.convert.ConvertiblePair : org.springframework.data.cassandra.convert.GenericConverter . getConvertibleTypes ( ) ) { void ( new ConverterRegistration ( org.springframework.data.cassandra.convert.ConvertiblePair , boolean , boolean ) ) ; } } else if ( java.lang.Object instanceof ConverterFactory ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = GenericTypeResolver . resolveTypeArguments ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , ConverterFactory .class ) ; void ( new ConverterRegistration ( java.lang.Class<?>[] [ NUMBER ] , java.lang.Class<?>[] [ NUMBER ] , boolean , boolean ) ) ; } else if ( java.lang.Object instanceof Converter ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = GenericTypeResolver . resolveTypeArguments ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , Converter .class ) ; void ( new ConverterRegistration ( java.lang.Class<?>[] [ NUMBER ] , java.lang.Class<?>[] [ NUMBER ] , boolean , boolean ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConverterRegistration org.springframework.data.cassandra.convert.ConverterRegistration ) { ConvertiblePair org.springframework.data.cassandra.convert.ConvertiblePair = org.springframework.data.cassandra.convert.ConverterRegistration . getConvertiblePair ( ) ; if ( org.springframework.data.cassandra.convert.ConverterRegistration . isReading ( ) ) { java.util.Set<org.springframework.data.cassandra.convert.ConvertiblePair> . add ( org.springframework.data.cassandra.convert.ConvertiblePair ) ; if ( org.springframework.data.cassandra.convert.Logger . isWarnEnabled ( ) && ! org.springframework.data.cassandra.convert.ConverterRegistration . isSimpleSourceType ( ) ) { org.springframework.data.cassandra.convert.Logger . warn ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.cassandra.convert.ConvertiblePair . getSourceType ( ) , org.springframework.data.cassandra.convert.ConvertiblePair . getTargetType ( ) ) ) ; } } if ( org.springframework.data.cassandra.convert.ConverterRegistration . isWriting ( ) ) { java.util.Set<org.springframework.data.cassandra.convert.ConvertiblePair> . add ( org.springframework.data.cassandra.convert.ConvertiblePair ) ; if ( org.springframework.data.cassandra.convert.Logger . isWarnEnabled ( ) && ! org.springframework.data.cassandra.convert.ConverterRegistration . isSimpleTargetType ( ) ) { org.springframework.data.cassandra.convert.Logger . warn ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.cassandra.convert.ConvertiblePair . getSourceType ( ) , org.springframework.data.cassandra.convert.ConvertiblePair . getTargetType ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,java.util.Optional<java.lang.Class<?>>> . java.util.Optional<java.lang.Class<?>> ( java.lang.Class<> , java.lang.Class<?> -> java.util.Optional<java.lang.Class<?>> ( java.lang.Class<> , null , java.util.Set<org.springframework.data.cassandra.convert.ConvertiblePair> ) ) . java.lang.Class<?> ( null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null ) { return java.lang.Class<?> ( java.lang.Class<> ) ; } return java.util.Map<org.springframework.data.cassandra.convert.ConvertiblePair,java.util.Optional<java.lang.Class<?>>> . computeIfAbsent ( new ConvertiblePair ( java.lang.Class<> , java.lang.Class<> ) , it -> getCustomTarget ( sourceType , requestedTargetType , writingPairs ) ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> ) != null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> ) != null ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null ) { return null ; } return java.util.Map<org.springframework.data.cassandra.convert.ConvertiblePair,java.util.Optional<java.lang.Class<?>>> . computeIfAbsent ( new ConvertiblePair ( java.lang.Class<> , java.lang.Class<> ) , it -> getCustomTarget ( sourceType , requestedTargetType , readingPairs ) ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<org.springframework.data.cassandra.convert.ConvertiblePair> < ConvertiblePair > java.util.Collection<org.springframework.data.cassandra.convert.ConvertiblePair> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.util.Collection<org.springframework.data.cassandra.convert.ConvertiblePair> , STRING ) ; if ( java.lang.Class<> != null && java.util.Collection<org.springframework.data.cassandra.convert.ConvertiblePair> . contains ( new ConvertiblePair ( java.lang.Class<> , java.lang.Class<> ) ) ) { return java.util.Optional . java.util.Optional<java.lang.Class<?>> ( java.lang.Class<> ) ; } for ( ConvertiblePair org.springframework.data.cassandra.convert.ConvertiblePair : java.util.Collection<org.springframework.data.cassandra.convert.ConvertiblePair> ) { if ( org.springframework.data.cassandra.convert.ConvertiblePair . getSourceType ( ) . isAssignableFrom ( java.lang.Class<> ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.cassandra.convert.ConvertiblePair . getTargetType ( ) ; if ( java.lang.Class<> == null || java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return java.util.Optional . java.util.Optional<java.lang.Class<?>> ( java.lang.Class<> ) ; } } } return java.util.Optional . java.util.Optional<java.lang.Class<?>> ( ) ; }  <METHOD_END>
