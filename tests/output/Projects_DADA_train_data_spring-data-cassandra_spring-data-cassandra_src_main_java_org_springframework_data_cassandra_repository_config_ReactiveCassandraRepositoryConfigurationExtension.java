<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ReactiveCassandraRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.cassandra.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.cassandra.repository.config.AnnotationRepositoryConfigurationSource ) { java.lang.String java.lang.String = org.springframework.data.cassandra.repository.config.AnnotationRepositoryConfigurationSource . getAttributes ( ) . getString ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.cassandra.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( ReactiveCassandraRepository .class ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( RepositoryMetadata org.springframework.data.cassandra.repository.config.RepositoryMetadata ) { return org.springframework.data.cassandra.repository.config.RepositoryMetadata . isReactiveRepository ( ) ; }  <METHOD_END>
