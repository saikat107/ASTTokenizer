<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.config.ApplicationContext org.springframework.cache.jcache.config.ApplicationContext ( ) { return new AnnotationConfigApplicationContext ( org.springframework.cache.jcache.config.JCacheJavaConfigTests.EnableCachingConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.cache.jcache.config.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.jcache.config.JCacheJavaConfigTests.FullCachingConfig .class ) ; DefaultJCacheOperationSource org.springframework.cache.jcache.config.DefaultJCacheOperationSource = org.springframework.cache.jcache.config.AnnotationConfigApplicationContext . getBean ( DefaultJCacheOperationSource .class ) ; assertSame ( org.springframework.cache.jcache.config.AnnotationConfigApplicationContext . getBean ( KeyGenerator .class ) , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getKeyGenerator ( ) ) ; assertSame ( org.springframework.cache.jcache.config.AnnotationConfigApplicationContext . getBean ( STRING , CacheResolver .class ) , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getCacheResolver ( ) ) ; assertSame ( org.springframework.cache.jcache.config.AnnotationConfigApplicationContext . getBean ( STRING , CacheResolver .class ) , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getExceptionCacheResolver ( ) ) ; JCacheInterceptor org.springframework.cache.jcache.config.JCacheInterceptor = org.springframework.cache.jcache.config.AnnotationConfigApplicationContext . getBean ( JCacheInterceptor .class ) ; assertSame ( org.springframework.cache.jcache.config.AnnotationConfigApplicationContext . getBean ( STRING , CacheErrorHandler .class ) , org.springframework.cache.jcache.config.JCacheInterceptor . getErrorHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.cache.jcache.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.jcache.config.JCacheJavaConfigTests.EmptyConfigSupportConfig .class ) ; DefaultJCacheOperationSource org.springframework.cache.jcache.config.DefaultJCacheOperationSource = org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( DefaultJCacheOperationSource .class ) ; assertNotNull ( org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getCacheResolver ( ) ) ; assertEquals ( SimpleCacheResolver .class , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getCacheResolver ( ) . getClass ( ) ) ; assertSame ( org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( CacheManager .class ) , ( ( SimpleCacheResolver ) org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getCacheResolver ( ) ) . getCacheManager ( ) ) ; assertNull ( org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getExceptionCacheResolver ( ) ) ; org.springframework.cache.jcache.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.cache.jcache.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.jcache.config.JCacheJavaConfigTests.FullCachingConfigSupport .class ) ; DefaultJCacheOperationSource org.springframework.cache.jcache.config.DefaultJCacheOperationSource = org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( DefaultJCacheOperationSource .class ) ; assertSame ( org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getCacheResolver ( ) ) ; assertSame ( org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getKeyGenerator ( ) ) ; assertSame ( org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getExceptionCacheResolver ( ) ) ; org.springframework.cache.jcache.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.cache.jcache.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.jcache.config.JCacheJavaConfigTests.NoExceptionCacheResolverConfig .class ) ; try { DefaultJCacheOperationSource org.springframework.cache.jcache.config.DefaultJCacheOperationSource = org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( DefaultJCacheOperationSource .class ) ; assertSame ( org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.cache.jcache.config.DefaultJCacheOperationSource . getCacheResolver ( ) ) ; JCacheableService < ? > org.springframework.cache.jcache.config.JCacheableService<?> = org.springframework.cache.jcache.config.ConfigurableApplicationContext . getBean ( JCacheableService .class ) ; org.springframework.cache.jcache.config.JCacheableService<> . cache ( STRING ) ; org.springframework.cache.jcache.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.cache.jcache.config.JCacheableService<> . cacheWithException ( STRING , false ) ; } finally { org.springframework.cache.jcache.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.config.CacheManager org.springframework.cache.jcache.config.CacheManager ( ) { SimpleCacheManager org.springframework.cache.jcache.config.SimpleCacheManager = new SimpleCacheManager ( ) ; org.springframework.cache.jcache.config.SimpleCacheManager . setCaches ( java.util.Arrays . java.util.List ( org.springframework.cache.jcache.config.Cache ( ) , new ConcurrentMapCache ( STRING ) , new ConcurrentMapCache ( STRING ) , new ConcurrentMapCache ( STRING ) ) ) ; return org.springframework.cache.jcache.config.SimpleCacheManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.config.JCacheableService<?> < ? > org.springframework.cache.jcache.config.JCacheableService<?> ( ) { return new AnnotatedJCacheableService ( org.springframework.cache.jcache.config.Cache ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.config.Cache org.springframework.cache.jcache.config.Cache ( ) { return new ConcurrentMapCache ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheManager org.springframework.cache.jcache.config.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.KeyGenerator org.springframework.cache.jcache.config.KeyGenerator ( ) { return new SimpleKeyGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheErrorHandler org.springframework.cache.jcache.config.CacheErrorHandler ( ) { return new SimpleCacheErrorHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheResolver org.springframework.cache.jcache.config.CacheResolver ( ) { return new SimpleCacheResolver ( org.springframework.cache.jcache.config.CacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheResolver org.springframework.cache.jcache.config.CacheResolver ( ) { return new SimpleCacheResolver ( org.springframework.cache.jcache.config.CacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.config.CacheManager org.springframework.cache.jcache.config.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheManager org.springframework.cache.jcache.config.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.KeyGenerator org.springframework.cache.jcache.config.KeyGenerator ( ) { return new SomeKeyGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheResolver org.springframework.cache.jcache.config.CacheResolver ( ) { return new NamedCacheResolver ( org.springframework.cache.jcache.config.CacheManager ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheResolver org.springframework.cache.jcache.config.CacheResolver ( ) { return new NamedCacheResolver ( org.springframework.cache.jcache.config.CacheManager ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.config.CacheResolver org.springframework.cache.jcache.config.CacheResolver ( ) { return new NamedCacheResolver ( new ConcurrentMapCacheManager ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.config.JCacheableService<?> < ? > org.springframework.cache.jcache.config.JCacheableService<?> ( ) { return new AnnotatedJCacheableService ( new ConcurrentMapCache ( STRING ) ) ; }  <METHOD_END>
