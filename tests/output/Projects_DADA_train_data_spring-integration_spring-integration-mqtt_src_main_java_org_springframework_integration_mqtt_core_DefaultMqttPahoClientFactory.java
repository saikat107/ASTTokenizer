<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( javax.net.SocketFactory javax.net.SocketFactory ) { this . javax.net.SocketFactory = javax.net.SocketFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will ) { this . org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will = org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will ; }  <METHOD_END>
<METHOD_START> public void void ( MqttClientPersistence org.springframework.integration.mqtt.core.MqttClientPersistence ) { this . org.springframework.integration.mqtt.core.MqttClientPersistence = org.springframework.integration.mqtt.core.MqttClientPersistence ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.core.ConsumerStopAction org.springframework.integration.mqtt.core.ConsumerStopAction ( ) { return this . org.springframework.integration.mqtt.core.ConsumerStopAction ; }  <METHOD_END>
<METHOD_START> public void void ( ConsumerStopAction org.springframework.integration.mqtt.core.ConsumerStopAction ) { this . org.springframework.integration.mqtt.core.ConsumerStopAction = org.springframework.integration.mqtt.core.ConsumerStopAction ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.core.IMqttClient org.springframework.integration.mqtt.core.IMqttClient ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.integration.mqtt.core.MqttException { return new MqttClient ( java.lang.String == null ? STRING : java.lang.String , java.lang.String , this . org.springframework.integration.mqtt.core.MqttClientPersistence ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.core.IMqttAsyncClient org.springframework.integration.mqtt.core.IMqttAsyncClient ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.integration.mqtt.core.MqttException { return new MqttAsyncClient ( java.lang.String == null ? STRING : java.lang.String , java.lang.String , this . org.springframework.integration.mqtt.core.MqttClientPersistence ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.core.MqttConnectOptions org.springframework.integration.mqtt.core.MqttConnectOptions ( ) { MqttConnectOptions org.springframework.integration.mqtt.core.MqttConnectOptions = new MqttConnectOptions ( ) ; if ( this . java.lang.Boolean != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setCleanSession ( this . java.lang.Boolean ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setConnectionTimeout ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setKeepAliveInterval ( this . java.lang.Integer ) ; } if ( this . java.lang.String != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setPassword ( this . java.lang.String . char[] ( ) ) ; } if ( this . javax.net.SocketFactory != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setSocketFactory ( this . javax.net.SocketFactory ) ; } if ( this . java.util.Properties != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setSSLProperties ( this . java.util.Properties ) ; } if ( this . java.lang.String != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setUserName ( this . java.lang.String ) ; } if ( this . org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setWill ( this . org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will . java.lang.String ( ) , this . org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will . byte[] ( ) , this . org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will . int ( ) , this . org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory.Will . boolean ( ) ) ; } if ( this . java.lang.String[] != null ) { org.springframework.integration.mqtt.core.MqttConnectOptions . setServerURIs ( this . java.lang.String[] ) ; } return org.springframework.integration.mqtt.core.MqttConnectOptions ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , byte [] byte[] , int int , boolean boolean ) { this . java.lang.String = java.lang.String ; this . byte[] = byte[] ; this . int = int ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected byte [] byte[] ( ) { return this . byte[] ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
