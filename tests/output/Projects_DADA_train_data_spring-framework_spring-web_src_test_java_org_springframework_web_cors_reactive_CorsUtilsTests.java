<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.web.cors.reactive.MockServerHttpRequest = get ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . build ( ) ; assertTrue ( CorsUtils . isCorsRequest ( org.springframework.web.cors.reactive.MockServerHttpRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.web.cors.reactive.MockServerHttpRequest = get ( STRING ) . build ( ) ; assertFalse ( CorsUtils . isCorsRequest ( org.springframework.web.cors.reactive.MockServerHttpRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.web.cors.reactive.MockServerHttpRequest = options ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) . build ( ) ; assertTrue ( CorsUtils . isPreFlightRequest ( org.springframework.web.cors.reactive.MockServerHttpRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.web.cors.reactive.MockServerHttpRequest = get ( STRING ) . build ( ) ; assertFalse ( CorsUtils . isPreFlightRequest ( org.springframework.web.cors.reactive.MockServerHttpRequest ) ) ; org.springframework.web.cors.reactive.MockServerHttpRequest = options ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . build ( ) ; assertFalse ( CorsUtils . isPreFlightRequest ( org.springframework.web.cors.reactive.MockServerHttpRequest ) ) ; org.springframework.web.cors.reactive.MockServerHttpRequest = options ( STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) . build ( ) ; assertFalse ( CorsUtils . isPreFlightRequest ( org.springframework.web.cors.reactive.MockServerHttpRequest ) ) ; }  <METHOD_END>
