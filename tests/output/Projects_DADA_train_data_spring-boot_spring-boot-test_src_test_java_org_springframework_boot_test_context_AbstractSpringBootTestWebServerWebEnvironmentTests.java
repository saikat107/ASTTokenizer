<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.context.WebApplicationContext org.springframework.boot.test.context.WebApplicationContext ( ) { return this . org.springframework.boot.test.context.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.context.TestRestTemplate org.springframework.boot.test.context.TestRestTemplate ( ) { return this . org.springframework.boot.test.context.TestRestTemplate ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . int ) . isNotEqualTo ( NUMBER ) . isNotEqualTo ( NUMBER ) ; java.lang.String java.lang.String = new RestTemplate ( ) . getForObject ( STRING + this . int + STRING , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = this . org.springframework.boot.test.context.TestRestTemplate . getForObject ( STRING , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.test.context.WebApplicationContext ) . isSameAs ( WebApplicationContextUtils . getWebApplicationContext ( this . org.springframework.boot.test.context.ServletContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.context.DispatcherServlet org.springframework.boot.test.context.DispatcherServlet ( ) { return new DispatcherServlet ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.context.ServletWebServerFactory org.springframework.boot.test.context.ServletWebServerFactory ( ) { TomcatServletWebServerFactory org.springframework.boot.test.context.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; org.springframework.boot.test.context.TomcatServletWebServerFactory . setPort ( this . int ) ; return org.springframework.boot.test.context.TomcatServletWebServerFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.boot.test.context.PropertySourcesPlaceholderConfigurer org.springframework.boot.test.context.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
