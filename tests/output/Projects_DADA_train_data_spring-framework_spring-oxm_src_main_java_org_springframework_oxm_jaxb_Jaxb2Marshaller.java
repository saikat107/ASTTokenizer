<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.lang.String = StringUtils . arrayToDelimitedString ( java.lang.String[] , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notEmpty ( java.lang.Class<?>[] , STRING ) ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return this . java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( javax.xml.bind.Marshaller . javax.xml.bind.Marshaller.Listener javax.xml.bind.Marshaller.Listener ) { this . javax.xml.bind.Marshaller.Listener = javax.xml.bind.Marshaller.Listener ; }  <METHOD_END>
<METHOD_START> public void void ( javax.xml.bind.Unmarshaller . javax.xml.bind.Unmarshaller.Listener javax.xml.bind.Unmarshaller.Listener ) { this . javax.xml.bind.Unmarshaller.Listener = javax.xml.bind.Unmarshaller.Listener ; }  <METHOD_END>
<METHOD_START> public void void ( javax.xml.bind.ValidationEventHandler javax.xml.bind.ValidationEventHandler ) { this . javax.xml.bind.ValidationEventHandler = javax.xml.bind.ValidationEventHandler ; }  <METHOD_END>
<METHOD_START> public void void ( javax.xml.bind.annotation.adapters.XmlAdapter<?,?> < ? , ? > ... javax.xml.bind.annotation.adapters.XmlAdapter<?,?>[] ) { this . javax.xml.bind.annotation.adapters.XmlAdapter<?,?>[] = javax.xml.bind.annotation.adapters.XmlAdapter<?,?>[] ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.oxm.jaxb.Resource ) { this . org.springframework.oxm.jaxb.Resource[] = new Resource [] { org.springframework.oxm.jaxb.Resource } ; }  <METHOD_END>
<METHOD_START> public void void ( Resource ... org.springframework.oxm.jaxb.Resource[] ) { this . org.springframework.oxm.jaxb.Resource[] = org.springframework.oxm.jaxb.Resource[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( org.w3c.dom.ls.LSResourceResolver org.w3c.dom.ls.LSResourceResolver ) { this . org.w3c.dom.ls.LSResourceResolver = org.w3c.dom.ls.LSResourceResolver ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; if ( boolean ) { void ( true ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { boolean boolean = StringUtils . hasLength ( this . java.lang.String ) ; boolean boolean = ! ObjectUtils . isEmpty ( this . java.lang.Class<?>[] ) ; boolean boolean = ! ObjectUtils . isEmpty ( this . java.lang.String[] ) ; if ( boolean && ( boolean || boolean ) || ( boolean && boolean ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } if ( ! boolean && ! boolean && ! boolean ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } if ( ! this . boolean ) { javax.xml.bind.JAXBContext ( ) ; } if ( ! ObjectUtils . isEmpty ( this . org.springframework.oxm.jaxb.Resource[] ) ) { this . javax.xml.validation.Schema = javax.xml.validation.Schema ( this . org.springframework.oxm.jaxb.Resource[] , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext ( ) { if ( this . javax.xml.bind.JAXBContext != null ) { return this . javax.xml.bind.JAXBContext ; } synchronized ( this . java.lang.Object ) { if ( this . javax.xml.bind.JAXBContext == null ) { try { if ( StringUtils . hasLength ( this . java.lang.String ) ) { this . javax.xml.bind.JAXBContext = javax.xml.bind.JAXBContext ( ) ; } else if ( ! ObjectUtils . isEmpty ( this . java.lang.Class<?>[] ) ) { this . javax.xml.bind.JAXBContext = javax.xml.bind.JAXBContext ( ) ; } else if ( ! ObjectUtils . isEmpty ( this . java.lang.String[] ) ) { this . javax.xml.bind.JAXBContext = javax.xml.bind.JAXBContext ( ) ; } } catch ( javax.xml.bind.JAXBException javax.xml.bind.JAXBException ) { throw org.springframework.oxm.jaxb.XmlMappingException ( javax.xml.bind.JAXBException ) ; } } return this . javax.xml.bind.JAXBContext ; } }  <METHOD_END>
<METHOD_START> private javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext ( ) javax.xml.bind.JAXBException { if ( org.springframework.oxm.jaxb.Log . isInfoEnabled ( ) ) { org.springframework.oxm.jaxb.Log . info ( STRING + this . java.lang.String + STRING ) ; } if ( this . java.util.Map<java.lang.String,> != null ) { if ( this . java.lang.ClassLoader != null ) { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( this . java.lang.String , this . java.lang.ClassLoader , this . java.util.Map<java.lang.String,> ) ; } else { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( this . java.lang.String , java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) , this . java.util.Map<java.lang.String,> ) ; } } else { if ( this . java.lang.ClassLoader != null ) { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( this . java.lang.String , this . java.lang.ClassLoader ) ; } else { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( this . java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext ( ) javax.xml.bind.JAXBException { if ( org.springframework.oxm.jaxb.Log . isInfoEnabled ( ) ) { org.springframework.oxm.jaxb.Log . info ( STRING + StringUtils . arrayToCommaDelimitedString ( this . java.lang.Class<?>[] ) + STRING ) ; } if ( this . java.util.Map<java.lang.String,> != null ) { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( this . java.lang.Class<?>[] , this . java.util.Map<java.lang.String,> ) ; } else { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( this . java.lang.Class<?>[] ) ; } }  <METHOD_END>
<METHOD_START> private javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext ( ) javax.xml.bind.JAXBException { if ( org.springframework.oxm.jaxb.Log . isInfoEnabled ( ) ) { org.springframework.oxm.jaxb.Log . info ( STRING + StringUtils . arrayToCommaDelimitedString ( this . java.lang.String[] ) + STRING ) ; } ClassPathJaxb2TypeScanner org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner = new ClassPathJaxb2TypeScanner ( this . java.lang.ClassLoader , this . java.lang.String[] ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner . scanPackages ( ) ; if ( org.springframework.oxm.jaxb.Log . isDebugEnabled ( ) ) { org.springframework.oxm.jaxb.Log . debug ( STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.Class<?>[] ) + STRING ) ; } this . java.lang.Class<?>[] = java.lang.Class<?>[] ; if ( this . java.util.Map<java.lang.String,> != null ) { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( java.lang.Class<?>[] , this . java.util.Map<java.lang.String,> ) ; } else { return javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( java.lang.Class<?>[] ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private javax.xml.validation.Schema javax.xml.validation.Schema ( Resource [] org.springframework.oxm.jaxb.Resource[] , java.lang.String java.lang.String ) throws java.io.IOException , org.xml.sax.SAXException { if ( org.springframework.oxm.jaxb.Log . isDebugEnabled ( ) ) { org.springframework.oxm.jaxb.Log . debug ( STRING + StringUtils . arrayToCommaDelimitedString ( this . org.springframework.oxm.jaxb.Resource[] ) ) ; } Assert . notEmpty ( org.springframework.oxm.jaxb.Resource[] , STRING ) ; Assert . hasLength ( java.lang.String , STRING ) ; javax.xml.transform.Source [] javax.xml.transform.Source[] = new javax.xml.transform.Source [ resources . length ] ; org.xml.sax.XMLReader org.xml.sax.XMLReader = org . xml . sax . helpers . org.xml.sax.helpers.XMLReaderFactory . org.xml.sax.XMLReader ( ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; for ( int int = NUMBER ; int < resources . length ; int ++ ) { Assert . notNull ( org.springframework.oxm.jaxb.Resource[] [ int ] , STRING ) ; Assert . isTrue ( org.springframework.oxm.jaxb.Resource[] [ int ] . exists ( ) , STRING + org.springframework.oxm.jaxb.Resource[] [ int ] + STRING ) ; org.xml.sax.InputSource org.xml.sax.InputSource = SaxResourceUtils . createInputSource ( org.springframework.oxm.jaxb.Resource[] [ int ] ) ; javax.xml.transform.Source[] [ int ] = new javax.xml.transform.sax.SAXSource ( org.xml.sax.XMLReader , org.xml.sax.InputSource ) ; } javax.xml.validation.SchemaFactory javax.xml.validation.SchemaFactory = javax.xml.validation.SchemaFactory . javax.xml.validation.SchemaFactory ( java.lang.String ) ; if ( this . org.w3c.dom.ls.LSResourceResolver != null ) { javax.xml.validation.SchemaFactory . void ( this . org.w3c.dom.ls.LSResourceResolver ) ; } return javax.xml.validation.SchemaFactory . javax.xml.validation.Schema ( javax.xml.transform.Source[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( ( this . boolean && javax.xml.bind.JAXBElement .class . boolean ( java.lang.Class<> ) ) || boolean ( java.lang.Class<> , this . boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Type java.lang.reflect.Type ) { if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ; if ( javax.xml.bind.JAXBElement .class == java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) && java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) . int == NUMBER ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ; if ( java.lang.reflect.Type instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; return ( ( ( java.lang.Class<> . boolean ( ) && java.lang.Byte . java.lang.Class<java.lang.Byte> == java.lang.Class<> . java.lang.Class<?> ( ) ) ) || boolean ( java.lang.Class<> ) || boolean ( java.lang.Class<> ) || boolean ( java.lang.Class<> , false ) ) ; } else if ( java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType ) { java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ( java.lang.reflect.GenericArrayType ) java.lang.reflect.Type ; return ( java.lang.Byte . java.lang.Class<java.lang.Byte> == java.lang.reflect.GenericArrayType . java.lang.reflect.Type ( ) ) ; } } } else if ( java.lang.reflect.Type instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; return boolean ( java.lang.Class<> , this . boolean ) ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { if ( boolean && AnnotationUtils . findAnnotation ( java.lang.Class<> , javax.xml.bind.annotation.XmlRootElement .class ) == null ) { return false ; } if ( StringUtils . hasLength ( this . java.lang.String ) ) { java.lang.String java.lang.String = ClassUtils . getPackageName ( java.lang.Class<> ) ; java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( this . java.lang.String , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; } else if ( ! ObjectUtils . isEmpty ( this . java.lang.Class<?>[] ) ) { return java.util.Arrays . java.util.List<java.lang.Class<?>> ( this . java.lang.Class<?>[] ) . boolean ( java.lang.Class<> ) ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.Boolean .class == java.lang.Class<> || java.lang.Byte .class == java.lang.Class<> || java.lang.Short .class == java.lang.Class<> || java.lang.Integer .class == java.lang.Class<> || java.lang.Long .class == java.lang.Class<> || java.lang.Float .class == java.lang.Class<> || java.lang.Double .class == java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.String .class == java.lang.Class<> || java.math.BigInteger .class . boolean ( java.lang.Class<> ) || java.math.BigDecimal .class . boolean ( java.lang.Class<> ) || java.util.Calendar .class . boolean ( java.lang.Class<> ) || java.util.Date .class . boolean ( java.lang.Class<> ) || javax.xml.namespace.QName .class . boolean ( java.lang.Class<> ) || java.net.URI .class == java.lang.Class<> || javax.xml.datatype.XMLGregorianCalendar .class . boolean ( java.lang.Class<> ) || javax.xml.datatype.Duration .class . boolean ( java.lang.Class<> ) || java.awt.Image .class == java.lang.Class<> || javax.activation.DataHandler .class == java.lang.Class<> || java.util.UUID .class == java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , javax.xml.transform.Result javax.xml.transform.Result ) throws org.springframework.oxm.jaxb.XmlMappingException { void ( java.lang.Object , javax.xml.transform.Result , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , javax.xml.transform.Result javax.xml.transform.Result , MimeContainer org.springframework.oxm.jaxb.MimeContainer ) throws org.springframework.oxm.jaxb.XmlMappingException { try { javax.xml.bind.Marshaller javax.xml.bind.Marshaller = javax.xml.bind.Marshaller ( ) ; if ( this . boolean && org.springframework.oxm.jaxb.MimeContainer != null ) { javax.xml.bind.Marshaller . void ( new org.springframework.oxm.jaxb.Jaxb2Marshaller.Jaxb2AttachmentMarshaller ( org.springframework.oxm.jaxb.MimeContainer ) ) ; } if ( StaxUtils . isStaxResult ( javax.xml.transform.Result ) ) { void ( javax.xml.bind.Marshaller , java.lang.Object , javax.xml.transform.Result ) ; } else { javax.xml.bind.Marshaller . void ( java.lang.Object , javax.xml.transform.Result ) ; } } catch ( javax.xml.bind.JAXBException javax.xml.bind.JAXBException ) { throw org.springframework.oxm.jaxb.XmlMappingException ( javax.xml.bind.JAXBException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.bind.Marshaller javax.xml.bind.Marshaller , java.lang.Object java.lang.Object , javax.xml.transform.Result javax.xml.transform.Result ) throws javax.xml.bind.JAXBException { javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLStreamWriter = StaxUtils . getXMLStreamWriter ( javax.xml.transform.Result ) ; if ( javax.xml.stream.XMLStreamWriter != null ) { javax.xml.bind.Marshaller . void ( java.lang.Object , javax.xml.stream.XMLStreamWriter ) ; } else { javax.xml.stream.XMLEventWriter javax.xml.stream.XMLEventWriter = StaxUtils . getXMLEventWriter ( javax.xml.transform.Result ) ; if ( javax.xml.stream.XMLEventWriter != null ) { javax.xml.bind.Marshaller . void ( java.lang.Object , javax.xml.stream.XMLEventWriter ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected javax.xml.bind.Marshaller javax.xml.bind.Marshaller ( ) { try { javax.xml.bind.Marshaller javax.xml.bind.Marshaller = javax.xml.bind.JAXBContext ( ) . javax.xml.bind.Marshaller ( ) ; void ( javax.xml.bind.Marshaller ) ; return javax.xml.bind.Marshaller ; } catch ( javax.xml.bind.JAXBException javax.xml.bind.JAXBException ) { throw org.springframework.oxm.jaxb.XmlMappingException ( javax.xml.bind.JAXBException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( javax.xml.bind.Marshaller javax.xml.bind.Marshaller ) throws javax.xml.bind.JAXBException { if ( this . java.util.Map<java.lang.String,> != null ) { for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { javax.xml.bind.Marshaller . void ( java.lang.String , this . java.util.Map<java.lang.String,> . get ( java.lang.String ) ) ; } } if ( this . javax.xml.bind.Marshaller.Listener != null ) { javax.xml.bind.Marshaller . void ( this . javax.xml.bind.Marshaller.Listener ) ; } if ( this . javax.xml.bind.ValidationEventHandler != null ) { javax.xml.bind.Marshaller . void ( this . javax.xml.bind.ValidationEventHandler ) ; } if ( this . javax.xml.bind.annotation.adapters.XmlAdapter<?,?>[] != null ) { for ( javax.xml.bind.annotation.adapters.XmlAdapter<?,?> < ? , ? > javax.xml.bind.annotation.adapters.XmlAdapter<?,?> : this . javax.xml.bind.annotation.adapters.XmlAdapter<?,?>[] ) { javax.xml.bind.Marshaller . void ( javax.xml.bind.annotation.adapters.XmlAdapter<,> ) ; } } if ( this . javax.xml.validation.Schema != null ) { javax.xml.bind.Marshaller . void ( this . javax.xml.validation.Schema ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax.xml.transform.Source javax.xml.transform.Source ) throws org.springframework.oxm.jaxb.XmlMappingException { return java.lang.Object ( javax.xml.transform.Source , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax.xml.transform.Source javax.xml.transform.Source , MimeContainer org.springframework.oxm.jaxb.MimeContainer ) throws org.springframework.oxm.jaxb.XmlMappingException { javax.xml.transform.Source = javax.xml.transform.Source ( javax.xml.transform.Source ) ; try { javax.xml.bind.Unmarshaller javax.xml.bind.Unmarshaller = javax.xml.bind.Unmarshaller ( ) ; if ( this . boolean && org.springframework.oxm.jaxb.MimeContainer != null ) { javax.xml.bind.Unmarshaller . void ( new org.springframework.oxm.jaxb.Jaxb2Marshaller.Jaxb2AttachmentUnmarshaller ( org.springframework.oxm.jaxb.MimeContainer ) ) ; } if ( StaxUtils . isStaxSource ( javax.xml.transform.Source ) ) { return java.lang.Object ( javax.xml.bind.Unmarshaller , javax.xml.transform.Source ) ; } else if ( this . java.lang.Class<> != null ) { return javax.xml.bind.Unmarshaller . javax.xml.bind.JAXBElement<> ( javax.xml.transform.Source , this . java.lang.Class<> ) . getValue ( ) ; } else { return javax.xml.bind.Unmarshaller . java.lang.Object ( javax.xml.transform.Source ) ; } } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { if ( ! boolean ( ) ) { throw new UnmarshallingFailureException ( STRING + STRING , java.lang.NullPointerException ) ; } throw java.lang.NullPointerException ; } catch ( javax.xml.bind.JAXBException javax.xml.bind.JAXBException ) { throw org.springframework.oxm.jaxb.XmlMappingException ( javax.xml.bind.JAXBException ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( javax.xml.bind.Unmarshaller javax.xml.bind.Unmarshaller , javax.xml.transform.Source javax.xml.transform.Source ) throws javax.xml.bind.JAXBException { javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = StaxUtils . getXMLStreamReader ( javax.xml.transform.Source ) ; if ( javax.xml.stream.XMLStreamReader != null ) { return ( this . java.lang.Class<> != null ? javax.xml.bind.Unmarshaller . javax.xml.bind.JAXBElement<> ( javax.xml.stream.XMLStreamReader , this . java.lang.Class<> ) . getValue ( ) : javax.xml.bind.Unmarshaller . java.lang.Object ( javax.xml.stream.XMLStreamReader ) ) ; } else { javax.xml.stream.XMLEventReader javax.xml.stream.XMLEventReader = StaxUtils . getXMLEventReader ( javax.xml.transform.Source ) ; if ( javax.xml.stream.XMLEventReader != null ) { return ( this . java.lang.Class<> != null ? javax.xml.bind.Unmarshaller . javax.xml.bind.JAXBElement<> ( javax.xml.stream.XMLEventReader , this . java.lang.Class<> ) . getValue ( ) : javax.xml.bind.Unmarshaller . java.lang.Object ( javax.xml.stream.XMLEventReader ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private javax.xml.transform.Source javax.xml.transform.Source ( javax.xml.transform.Source javax.xml.transform.Source ) { if ( StaxUtils . isStaxSource ( javax.xml.transform.Source ) || javax.xml.transform.Source instanceof javax.xml.transform.dom.DOMSource ) { return javax.xml.transform.Source ; } org.xml.sax.XMLReader org.xml.sax.XMLReader = null ; org.xml.sax.InputSource org.xml.sax.InputSource = null ; if ( javax.xml.transform.Source instanceof javax.xml.transform.sax.SAXSource ) { javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource = ( javax.xml.transform.sax.SAXSource ) javax.xml.transform.Source ; org.xml.sax.XMLReader = javax.xml.transform.sax.SAXSource . org.xml.sax.XMLReader ( ) ; org.xml.sax.InputSource = javax.xml.transform.sax.SAXSource . org.xml.sax.InputSource ( ) ; } else if ( javax.xml.transform.Source instanceof javax.xml.transform.stream.StreamSource ) { javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = ( javax.xml.transform.stream.StreamSource ) javax.xml.transform.Source ; if ( javax.xml.transform.stream.StreamSource . java.io.InputStream ( ) != null ) { org.xml.sax.InputSource = new org.xml.sax.InputSource ( javax.xml.transform.stream.StreamSource . java.io.InputStream ( ) ) ; } else if ( javax.xml.transform.stream.StreamSource . java.io.Reader ( ) != null ) { org.xml.sax.InputSource = new org.xml.sax.InputSource ( javax.xml.transform.stream.StreamSource . java.io.Reader ( ) ) ; } else { org.xml.sax.InputSource = new org.xml.sax.InputSource ( javax.xml.transform.stream.StreamSource . java.lang.String ( ) ) ; } } try { if ( org.xml.sax.XMLReader == null ) { org.xml.sax.XMLReader = org . xml . sax . helpers . org.xml.sax.helpers.XMLReaderFactory . org.xml.sax.XMLReader ( ) ; } org.xml.sax.XMLReader . void ( STRING , ! boolean ( ) ) ; java.lang.String java.lang.String = STRING ; org.xml.sax.XMLReader . void ( java.lang.String , boolean ( ) ) ; if ( ! boolean ( ) ) { org.xml.sax.XMLReader . void ( org.xml.sax.EntityResolver ) ; } return new javax.xml.transform.sax.SAXSource ( org.xml.sax.XMLReader , org.xml.sax.InputSource ) ; } catch ( org.xml.sax.SAXException org.xml.sax.SAXException ) { org.springframework.oxm.jaxb.Log . warn ( STRING , org.xml.sax.SAXException ) ; return javax.xml.transform.Source ; } }  <METHOD_END>
<METHOD_START> protected javax.xml.bind.Unmarshaller javax.xml.bind.Unmarshaller ( ) { try { javax.xml.bind.Unmarshaller javax.xml.bind.Unmarshaller = javax.xml.bind.JAXBContext ( ) . javax.xml.bind.Unmarshaller ( ) ; void ( javax.xml.bind.Unmarshaller ) ; return javax.xml.bind.Unmarshaller ; } catch ( javax.xml.bind.JAXBException javax.xml.bind.JAXBException ) { throw org.springframework.oxm.jaxb.XmlMappingException ( javax.xml.bind.JAXBException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( javax.xml.bind.Unmarshaller javax.xml.bind.Unmarshaller ) throws javax.xml.bind.JAXBException { if ( this . java.util.Map<java.lang.String,> != null ) { for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { javax.xml.bind.Unmarshaller . void ( java.lang.String , this . java.util.Map<java.lang.String,> . get ( java.lang.String ) ) ; } } if ( this . javax.xml.bind.Unmarshaller.Listener != null ) { javax.xml.bind.Unmarshaller . void ( this . javax.xml.bind.Unmarshaller.Listener ) ; } if ( this . javax.xml.bind.ValidationEventHandler != null ) { javax.xml.bind.Unmarshaller . void ( this . javax.xml.bind.ValidationEventHandler ) ; } if ( this . javax.xml.bind.annotation.adapters.XmlAdapter<?,?>[] != null ) { for ( javax.xml.bind.annotation.adapters.XmlAdapter<?,?> < ? , ? > javax.xml.bind.annotation.adapters.XmlAdapter<?,?> : this . javax.xml.bind.annotation.adapters.XmlAdapter<?,?>[] ) { javax.xml.bind.Unmarshaller . void ( javax.xml.bind.annotation.adapters.XmlAdapter<,> ) ; } } if ( this . javax.xml.validation.Schema != null ) { javax.xml.bind.Unmarshaller . void ( this . javax.xml.validation.Schema ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.oxm.jaxb.XmlMappingException org.springframework.oxm.jaxb.XmlMappingException ( javax.xml.bind.JAXBException javax.xml.bind.JAXBException ) { if ( javax.xml.bind.JAXBException instanceof javax.xml.bind.ValidationException ) { return new ValidationFailureException ( STRING , javax.xml.bind.JAXBException ) ; } else if ( javax.xml.bind.JAXBException instanceof javax.xml.bind.MarshalException ) { return new MarshallingFailureException ( STRING , javax.xml.bind.JAXBException ) ; } else if ( javax.xml.bind.JAXBException instanceof javax.xml.bind.UnmarshalException ) { return new UnmarshallingFailureException ( STRING , javax.xml.bind.JAXBException ) ; } else { return new UncategorizedMappingException ( STRING , javax.xml.bind.JAXBException ) ; } }  <METHOD_END>
<METHOD_START> public void ( MimeContainer org.springframework.oxm.jaxb.MimeContainer ) { this . org.springframework.oxm.jaxb.MimeContainer = org.springframework.oxm.jaxb.MimeContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( byte [] byte[] , int int , int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { org.springframework.oxm.jaxb.Jaxb2Marshaller.ByteArrayDataSource org.springframework.oxm.jaxb.Jaxb2Marshaller.ByteArrayDataSource = new org.springframework.oxm.jaxb.Jaxb2Marshaller.ByteArrayDataSource ( java.lang.String , byte[] , int , int ) ; return java.lang.String ( new javax.activation.DataHandler ( org.springframework.oxm.jaxb.Jaxb2Marshaller.ByteArrayDataSource ) , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( javax.activation.DataHandler javax.activation.DataHandler , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , javax.activation.DataHandler ) ; java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) + STRING + java.lang.String ; this . org.springframework.oxm.jaxb.MimeContainer . addAttachment ( STRING + java.lang.String + STRING , javax.activation.DataHandler ) ; try { java.lang.String = java.net.URLEncoder . java.lang.String ( java.lang.String , STRING ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { } return java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , javax.activation.DataHandler javax.activation.DataHandler ) { try { java.net.URI java.net.URI = new java.net.URI ( java.lang.String ) ; return java.net.URI . java.lang.String ( ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { } return javax.activation.DataHandler . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( javax.activation.DataHandler javax.activation.DataHandler ) { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) + STRING + javax.activation.DataHandler . java.lang.String ( ) ; this . org.springframework.oxm.jaxb.MimeContainer . addAttachment ( java.lang.String , javax.activation.DataHandler ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.oxm.jaxb.MimeContainer . convertToXopPackage ( ) ; }  <METHOD_END>
<METHOD_START> public void ( MimeContainer org.springframework.oxm.jaxb.MimeContainer ) { this . org.springframework.oxm.jaxb.MimeContainer = org.springframework.oxm.jaxb.MimeContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.String java.lang.String ) { try { javax.activation.DataHandler javax.activation.DataHandler = javax.activation.DataHandler ( java.lang.String ) ; return FileCopyUtils . copyToByteArray ( javax.activation.DataHandler . java.io.InputStream ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new UnmarshallingFailureException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.activation.DataHandler javax.activation.DataHandler ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; try { java.lang.String = java.net.URLDecoder . java.lang.String ( java.lang.String , STRING ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { } java.lang.String = '<' + java.lang.String + '>' ; } return this . org.springframework.oxm.jaxb.MimeContainer . getAttachment ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.oxm.jaxb.MimeContainer . isXopPackage ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , byte [] byte[] , int int , int int ) { this . java.lang.String = java.lang.String ; this . byte[] = byte[] ; this . int = int ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( this . byte[] , this . int , this . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.xml.sax.InputSource org.xml.sax.InputSource ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new org.xml.sax.InputSource ( new java.io.StringReader ( STRING ) ) ; }  <METHOD_END>
