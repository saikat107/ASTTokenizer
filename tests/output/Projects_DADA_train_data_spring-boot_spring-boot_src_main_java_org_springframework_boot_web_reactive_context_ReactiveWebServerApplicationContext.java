<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { super( java.lang.Class<?>[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) org.springframework.boot.web.reactive.context.BeansException , java.lang.IllegalStateException { try { super. refresh ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onRefresh ( ) ; try { void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ApplicationContextException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. finishRefresh ( ) ; WebServer org.springframework.boot.web.reactive.context.WebServer = org.springframework.boot.web.reactive.context.WebServer ( ) ; if ( org.springframework.boot.web.reactive.context.WebServer != null ) { publishEvent ( new ReactiveWebServerInitializedEvent ( org.springframework.boot.web.reactive.context.WebServer , this ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onClose ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { WebServer org.springframework.boot.web.reactive.context.WebServer = this . org.springframework.boot.web.reactive.context.WebServer ; if ( org.springframework.boot.web.reactive.context.WebServer == null ) { this . org.springframework.boot.web.reactive.context.WebServer = org.springframework.boot.web.reactive.context.ReactiveWebServerFactory ( ) . getWebServer ( org.springframework.boot.web.reactive.context.HttpHandler ( ) ) ; } initPropertySources ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.reactive.context.ReactiveWebServerFactory org.springframework.boot.web.reactive.context.ReactiveWebServerFactory ( ) { java.lang.String [] java.lang.String[] = getBeanFactory ( ) . getBeanNamesForType ( ReactiveWebServerFactory .class ) ; if ( java.lang.String[] . int == NUMBER ) { throw new ApplicationContextException ( STRING + STRING ) ; } if ( java.lang.String[] . int > NUMBER ) { throw new ApplicationContextException ( STRING + STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; } return getBeanFactory ( ) . getBean ( java.lang.String[] [ NUMBER ] , ReactiveWebServerFactory .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.reactive.context.HttpHandler org.springframework.boot.web.reactive.context.HttpHandler ( ) { java.lang.String [] java.lang.String[] = getBeanFactory ( ) . getBeanNamesForType ( HttpHandler .class ) ; if ( java.lang.String[] . int == NUMBER ) { throw new ApplicationContextException ( STRING ) ; } if ( java.lang.String[] . int > NUMBER ) { throw new ApplicationContextException ( STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; } return getBeanFactory ( ) . getBean ( java.lang.String[] [ NUMBER ] , HttpHandler .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.reactive.context.WebServer org.springframework.boot.web.reactive.context.WebServer ( ) { WebServer org.springframework.boot.web.reactive.context.WebServer = this . org.springframework.boot.web.reactive.context.WebServer ; if ( org.springframework.boot.web.reactive.context.WebServer != null ) { org.springframework.boot.web.reactive.context.WebServer . start ( ) ; } return org.springframework.boot.web.reactive.context.WebServer ; }  <METHOD_END>
<METHOD_START> private void void ( ) { WebServer org.springframework.boot.web.reactive.context.WebServer = this . org.springframework.boot.web.reactive.context.WebServer ; if ( org.springframework.boot.web.reactive.context.WebServer != null ) { try { org.springframework.boot.web.reactive.context.WebServer . stop ( ) ; this . org.springframework.boot.web.reactive.context.WebServer = null ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } } }  <METHOD_END>
