<METHOD_START> public void void ( boolean boolean ) { this . int = ( boolean ? DeliveryMode . PERSISTENT : DeliveryMode . NON_PERSISTENT ) ; }  <METHOD_END>
<METHOD_START> public void void ( ConnectionFactory org.springframework.integration.jms.ConnectionFactory ) { this . org.springframework.integration.jms.ConnectionFactory = org.springframework.integration.jms.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( Destination org.springframework.integration.jms.Destination ) { if ( org.springframework.integration.jms.Destination instanceof Topic ) { this . boolean = true ; } this . org.springframework.integration.jms.Destination = org.springframework.integration.jms.Destination ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.jms.Expression ) { Assert . notNull ( org.springframework.integration.jms.Expression , STRING ) ; this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<?> = new ExpressionEvaluatingMessageProcessor < java.lang.Object > ( org.springframework.integration.jms.Expression ) ; setPrimaryExpression ( org.springframework.integration.jms.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( Destination org.springframework.integration.jms.Destination ) { if ( org.springframework.integration.jms.Destination instanceof Topic ) { this . boolean = true ; } this . org.springframework.integration.jms.Destination = org.springframework.integration.jms.Destination ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.jms.Expression ) { Assert . notNull ( org.springframework.integration.jms.Expression , STRING ) ; this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<?> = new ExpressionEvaluatingMessageProcessor < java.lang.Object > ( org.springframework.integration.jms.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( DestinationResolver org.springframework.integration.jms.DestinationResolver ) { this . org.springframework.integration.jms.DestinationResolver = org.springframework.integration.jms.DestinationResolver ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.integration.jms.MessageConverter ) { Assert . notNull ( org.springframework.integration.jms.MessageConverter , STRING ) ; this . org.springframework.integration.jms.MessageConverter = org.springframework.integration.jms.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( JmsHeaderMapper org.springframework.integration.jms.JmsHeaderMapper ) { this . org.springframework.integration.jms.JmsHeaderMapper = org.springframework.integration.jms.JmsHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.jms.MessageChannel ) { this . setOutputChannel ( org.springframework.integration.jms.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties ) { this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties = org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { super. setRequiresReply ( boolean ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) { this . long = java.util.concurrent.TimeUnit . long ( long ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.Destination org.springframework.integration.jms.Destination ( Message < ? > org.springframework.integration.jms.Message<?> , Session org.springframework.integration.jms.Session ) throws org.springframework.integration.jms.JMSException { if ( this . org.springframework.integration.jms.Destination != null ) { return this . org.springframework.integration.jms.Destination ; } if ( this . java.lang.String != null ) { return this . org.springframework.integration.jms.Destination ( this . java.lang.String , org.springframework.integration.jms.Session ) ; } if ( this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null ) { java.lang.Object java.lang.Object = this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . processMessage ( org.springframework.integration.jms.Message<> ) ; if ( java.lang.Object instanceof Destination ) { return ( Destination ) java.lang.Object ; } if ( java.lang.Object instanceof java.lang.String ) { return this . org.springframework.integration.jms.Destination ( ( java.lang.String ) java.lang.Object , org.springframework.integration.jms.Session ) ; } throw new MessageDeliveryException ( org.springframework.integration.jms.Message<> , STRING + STRING + java.lang.Object ) ; } throw new MessageDeliveryException ( org.springframework.integration.jms.Message<> , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.Destination org.springframework.integration.jms.Destination ( java.lang.String java.lang.String , Session org.springframework.integration.jms.Session ) throws org.springframework.integration.jms.JMSException { Assert . notNull ( this . org.springframework.integration.jms.DestinationResolver , STRING ) ; return this . org.springframework.integration.jms.DestinationResolver . resolveDestinationName ( org.springframework.integration.jms.Session , java.lang.String , this . boolean ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.Destination org.springframework.integration.jms.Destination ( Message < ? > org.springframework.integration.jms.Message<?> , Session org.springframework.integration.jms.Session ) throws org.springframework.integration.jms.JMSException { if ( this . org.springframework.integration.jms.Destination != null ) { return this . org.springframework.integration.jms.Destination ; } if ( this . java.lang.String != null ) { return this . org.springframework.integration.jms.Destination ( this . java.lang.String , org.springframework.integration.jms.Session ) ; } if ( this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null ) { java.lang.Object java.lang.Object = this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . processMessage ( org.springframework.integration.jms.Message<> ) ; if ( java.lang.Object instanceof Destination ) { return ( Destination ) java.lang.Object ; } if ( java.lang.Object instanceof java.lang.String ) { return this . org.springframework.integration.jms.Destination ( ( java.lang.String ) java.lang.Object , org.springframework.integration.jms.Session ) ; } throw new MessageDeliveryException ( org.springframework.integration.jms.Message<> , STRING + STRING + java.lang.Object ) ; } return org.springframework.integration.jms.Session . createTemporaryQueue ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.Destination org.springframework.integration.jms.Destination ( java.lang.String java.lang.String , Session org.springframework.integration.jms.Session ) throws org.springframework.integration.jms.JMSException { Assert . notNull ( this . org.springframework.integration.jms.DestinationResolver , STRING ) ; return this . org.springframework.integration.jms.DestinationResolver . resolveDestinationName ( org.springframework.integration.jms.Session , java.lang.String , this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } Assert . notNull ( this . org.springframework.integration.jms.ConnectionFactory , STRING ) ; Assert . isTrue ( this . org.springframework.integration.jms.Destination != null ^ this . java.lang.String != null ^ this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null , STRING + STRING ) ; ConversionService org.springframework.integration.jms.ConversionService = getConversionService ( ) ; if ( this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null ) { this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . setBeanFactory ( getBeanFactory ( ) ) ; if ( org.springframework.integration.jms.ConversionService != null ) { this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . setConversionService ( org.springframework.integration.jms.ConversionService ) ; } } if ( this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null ) { this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . setBeanFactory ( getBeanFactory ( ) ) ; if ( org.springframework.integration.jms.ConversionService != null ) { this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . setConversionService ( org.springframework.integration.jms.ConversionService ) ; } } if ( this . boolean && ( this . java.lang.String == null && ( this . org.springframework.integration.jms.Destination != null || this . java.lang.String != null ) || this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ; } this . boolean = false ; } if ( this . boolean ) { Assert . state ( ! STRING . boolean ( this . java.lang.String ) , STRING + STRING ) ; org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer = new org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer ( ) ; void ( org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer ) ; org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer = org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer ; if ( isAsync ( ) && this . java.lang.String == null ) { logger . warn ( STRING ) ; setAsync ( false ) ; } } else { if ( isAsync ( ) ) { logger . warn ( STRING ) ; setAsync ( false ) ; } } this . boolean = true ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setConnectionFactory ( this . org.springframework.integration.jms.ConnectionFactory ) ; if ( this . org.springframework.integration.jms.Destination != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setDestination ( this . org.springframework.integration.jms.Destination ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setDestinationName ( this . java.lang.String ) ; } if ( this . org.springframework.integration.jms.DestinationResolver != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setDestinationResolver ( this . org.springframework.integration.jms.DestinationResolver ) ; } org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setPubSubDomain ( this . boolean ) ; if ( this . java.lang.String != null ) { java.lang.String java.lang.String = this . java.lang.String + STRING + this . java.lang.String + STRING ; org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setMessageSelector ( java.lang.String ) ; } org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setMessageListener ( this ) ; if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties != null ) { if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Boolean ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setSessionTransacted ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Boolean ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setCacheLevel ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setConcurrentConsumers ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setIdleConsumerLimit ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setIdleTaskExecutionLimit ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setMaxConcurrentConsumers ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setMaxMessagesPerTask ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Long ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setReceiveTimeout ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Long ( ) ) ; } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Long ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setRecoveryInterval ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Long ( ) ) ; } if ( StringUtils . hasText ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.String ( ) ) ) { java.lang.Integer java.lang.Integer = JmsAdapterUtils . parseAcknowledgeMode ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.String ( ) ) ; if ( java.lang.Integer != null ) { if ( JmsAdapterUtils . SESSION_TRANSACTED == java.lang.Integer ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setSessionTransacted ( true ) ; } else { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setSessionAcknowledgeMode ( java.lang.Integer ) ; } } } else if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) != null ) { java.lang.Integer java.lang.Integer = this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.lang.Integer ( ) ; if ( Session . SESSION_TRANSACTED == java.lang.Integer ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setSessionTransacted ( true ) ; } else { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setSessionAcknowledgeMode ( java.lang.Integer ) ; } } if ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.util.concurrent.Executor ( ) != null ) { org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setTaskExecutor ( this . org.springframework.integration.jms.JmsOutboundGateway.ReplyContainerProperties . java.util.concurrent.Executor ( ) ) ; } else { java.lang.String java.lang.String = this . getComponentName ( ) ; java.lang.String = ( ( ! StringUtils . hasText ( java.lang.String ) ? STRING + ObjectUtils . getIdentityHexString ( this ) : java.lang.String ) + STRING ) ; org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . setBeanName ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer != null ) { TaskScheduler org.springframework.integration.jms.TaskScheduler = getTaskScheduler ( ) ; if ( this . long <= NUMBER ) { this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . start ( ) ; } else { Assert . state ( org.springframework.integration.jms.TaskScheduler != null , STRING ) ; } if ( ! isAsync ( ) && this . long >= NUMBER ) { Assert . state ( org.springframework.integration.jms.TaskScheduler != null , STRING ) ; this . java.util.concurrent.ScheduledFuture<?> = org.springframework.integration.jms.TaskScheduler . schedule ( new org.springframework.integration.jms.JmsOutboundGateway.LateReplyReaper ( ) , new java.util.Date ( ) ) ; } } this . boolean = true ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer != null ) { this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . stop ( ) ; this . void ( this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . getDestination ( ) ) ; if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( false ) ; } } if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } this . boolean = false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( final Message < ? > org.springframework.integration.jms.Message<?> ) { if ( ! this . boolean ) { afterPropertiesSet ( ) ; } try { java.lang.Object java.lang.Object ; if ( this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer == null ) { java.lang.Object = javax.jms.Message ( org.springframework.integration.jms.Message<> ) ; } else { if ( this . long > NUMBER ) { synchronized ( this . java.lang.Object ) { this . long = java.lang.System . long ( ) ; if ( ! this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . isRunning ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( this . getComponentName ( ) + STRING ) ; } this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . start ( ) ; this . java.util.concurrent.ScheduledFuture<?> = getTaskScheduler ( ) . scheduleAtFixedRate ( new org.springframework.integration.jms.JmsOutboundGateway.IdleContainerStopper ( ) , this . long / NUMBER ) ; } } } java.lang.Object = this . java.lang.Object ( org.springframework.integration.jms.Message<> ) ; } if ( java.lang.Object == null ) { if ( this . boolean ) { throw new MessageTimeoutException ( org.springframework.integration.jms.Message<> , STRING + this . long + STRING ) ; } else { return null ; } } if ( java.lang.Object instanceof javax . javax.jms . javax.jms ) { return org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?> ( ( javax . javax.jms . javax.jms ) java.lang.Object ) ; } else { return java.lang.Object ; } } catch ( JMSException org.springframework.integration.jms.JMSException ) { throw new MessageHandlingException ( org.springframework.integration.jms.Message<> , org.springframework.integration.jms.JMSException ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?> < ? > org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?> ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.integration.jms.JMSException { java.lang.Object java.lang.Object = javax.jms.Message ; if ( this . boolean ) { java.lang.Object = this . org.springframework.integration.jms.MessageConverter . fromMessage ( javax.jms.Message ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + javax.jms.Message + STRING + java.lang.Object + STRING ) ; } } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jms.JmsHeaderMapper . toHeaders ( javax.jms.Message ) ; if ( this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer != null && this . java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( this . java.lang.String ) ; } if ( java.lang.Object instanceof Message ) { return getMessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; } else { return getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.jms.Message<?> ) throws org.springframework.integration.jms.JMSException { Connection org.springframework.integration.jms.Connection = this . org.springframework.integration.jms.Connection ( ) ; Session org.springframework.integration.jms.Session = null ; Destination org.springframework.integration.jms.Destination = this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . org.springframework.integration.jms.Destination ( ) ; try { org.springframework.integration.jms.Session = this . org.springframework.integration.jms.Session ( org.springframework.integration.jms.Connection ) ; java.lang.Object java.lang.Object = org.springframework.integration.jms.Message<> ; if ( this . boolean ) { java.lang.Object = org.springframework.integration.jms.Message<> . getPayload ( ) ; } javax . javax.jms . javax.jms javax.jms.Message = this . org.springframework.integration.jms.MessageConverter . toMessage ( java.lang.Object , org.springframework.integration.jms.Session ) ; this . org.springframework.integration.jms.JmsHeaderMapper . fromHeaders ( org.springframework.integration.jms.Message<> . getHeaders ( ) , javax.jms.Message ) ; javax.jms.Message . setJMSReplyTo ( org.springframework.integration.jms.Destination ) ; org.springframework.integration.jms.Connection . start ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.jms.Destination ) ; } java.lang.Integer java.lang.Integer = new IntegrationMessageHeaderAccessor ( org.springframework.integration.jms.Message<> ) . getPriority ( ) ; if ( java.lang.Integer == null ) { java.lang.Integer = this . int ; } Destination org.springframework.integration.jms.Destination = this . org.springframework.integration.jms.Destination ( org.springframework.integration.jms.Message<> , org.springframework.integration.jms.Session ) ; java.lang.Object java.lang.Object = null ; if ( this . java.lang.String == null ) { javax.jms.Message . setJMSCorrelationID ( null ) ; java.lang.Object = javax.jms.Message ( org.springframework.integration.jms.Destination , javax.jms.Message , org.springframework.integration.jms.Session , java.lang.Integer ) ; } else { java.lang.Object = java.lang.Object ( org.springframework.integration.jms.Destination , javax.jms.Message , org.springframework.integration.jms.Session , java.lang.Integer ) ; } if ( java.lang.Object instanceof javax . javax.jms . javax.jms ) { ( ( javax . javax.jms . javax.jms ) java.lang.Object ) . setJMSCorrelationID ( null ) ; } return java.lang.Object ; } finally { JmsUtils . closeSession ( org.springframework.integration.jms.Session ) ; ConnectionFactoryUtils . releaseConnection ( org.springframework.integration.jms.Connection , this . org.springframework.integration.jms.ConnectionFactory , true ) ; } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( Message < ? > org.springframework.integration.jms.Message<?> ) throws org.springframework.integration.jms.JMSException { Connection org.springframework.integration.jms.Connection = this . org.springframework.integration.jms.Connection ( ) ; Session org.springframework.integration.jms.Session = null ; Destination org.springframework.integration.jms.Destination = null ; try { org.springframework.integration.jms.Session = this . org.springframework.integration.jms.Session ( org.springframework.integration.jms.Connection ) ; java.lang.Object java.lang.Object = org.springframework.integration.jms.Message<> ; if ( this . boolean ) { java.lang.Object = org.springframework.integration.jms.Message<> . getPayload ( ) ; } javax . javax.jms . javax.jms javax.jms.Message = this . org.springframework.integration.jms.MessageConverter . toMessage ( java.lang.Object , org.springframework.integration.jms.Session ) ; this . org.springframework.integration.jms.JmsHeaderMapper . fromHeaders ( org.springframework.integration.jms.Message<> . getHeaders ( ) , javax.jms.Message ) ; org.springframework.integration.jms.Destination = this . org.springframework.integration.jms.Destination ( org.springframework.integration.jms.Message<> , org.springframework.integration.jms.Session ) ; javax.jms.Message . setJMSReplyTo ( org.springframework.integration.jms.Destination ) ; org.springframework.integration.jms.Connection . start ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.jms.Destination ) ; } java.lang.Integer java.lang.Integer = new IntegrationMessageHeaderAccessor ( org.springframework.integration.jms.Message<> ) . getPriority ( ) ; if ( java.lang.Integer == null ) { java.lang.Integer = this . int ; } javax . javax.jms . javax.jms javax.jms.Message = null ; Destination org.springframework.integration.jms.Destination = this . org.springframework.integration.jms.Destination ( org.springframework.integration.jms.Message<> , org.springframework.integration.jms.Session ) ; if ( this . java.lang.String != null ) { javax.jms.Message = javax.jms.Message ( org.springframework.integration.jms.Destination , javax.jms.Message , org.springframework.integration.jms.Destination , org.springframework.integration.jms.Session , java.lang.Integer ) ; } else if ( org.springframework.integration.jms.Destination instanceof TemporaryQueue || org.springframework.integration.jms.Destination instanceof TemporaryTopic ) { javax.jms.Message = javax.jms.Message ( org.springframework.integration.jms.Destination , javax.jms.Message , org.springframework.integration.jms.Destination , org.springframework.integration.jms.Session , java.lang.Integer ) ; } else { javax.jms.Message = javax.jms.Message ( org.springframework.integration.jms.Destination , javax.jms.Message , org.springframework.integration.jms.Destination , org.springframework.integration.jms.Session , java.lang.Integer ) ; } return javax.jms.Message ; } finally { JmsUtils . closeSession ( org.springframework.integration.jms.Session ) ; this . void ( org.springframework.integration.jms.Destination ) ; ConnectionFactoryUtils . releaseConnection ( org.springframework.integration.jms.Connection , this . org.springframework.integration.jms.ConnectionFactory , true ) ; } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( Destination org.springframework.integration.jms.Destination , javax . javax.jms . javax.jms javax.jms.Message , Destination org.springframework.integration.jms.Destination , Session org.springframework.integration.jms.Session , int int ) throws org.springframework.integration.jms.JMSException { MessageProducer org.springframework.integration.jms.MessageProducer = null ; try { org.springframework.integration.jms.MessageProducer = org.springframework.integration.jms.Session . createProducer ( org.springframework.integration.jms.Destination ) ; Assert . state ( this . java.lang.String != null , STRING ) ; java.lang.String java.lang.String = null ; if ( ! this . java.lang.String . boolean ( STRING ) || javax.jms.Message . getJMSCorrelationID ( ) == null ) { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ; if ( this . java.lang.String . boolean ( STRING ) ) { javax.jms.Message . setJMSCorrelationID ( java.lang.String ) ; java.lang.String = STRING + java.lang.String + STRING ; } else { javax.jms.Message . setStringProperty ( this . java.lang.String , java.lang.String ) ; javax.jms.Message . setJMSCorrelationID ( null ) ; java.lang.String = this . java.lang.String + STRING + java.lang.String + STRING ; } } else { java.lang.String = STRING + javax.jms.Message . getJMSCorrelationID ( ) + STRING ; } this . void ( javax.jms.Message , org.springframework.integration.jms.MessageProducer , int ) ; return javax.jms.Message ( org.springframework.integration.jms.Session , org.springframework.integration.jms.Destination , java.lang.String ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.integration.jms.MessageProducer ) ; } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( Destination org.springframework.integration.jms.Destination , javax . javax.jms . javax.jms javax.jms.Message , Destination org.springframework.integration.jms.Destination , Session org.springframework.integration.jms.Session , int int ) throws org.springframework.integration.jms.JMSException { MessageProducer org.springframework.integration.jms.MessageProducer = null ; MessageConsumer org.springframework.integration.jms.MessageConsumer = null ; try { org.springframework.integration.jms.MessageProducer = org.springframework.integration.jms.Session . createProducer ( org.springframework.integration.jms.Destination ) ; org.springframework.integration.jms.MessageConsumer = org.springframework.integration.jms.Session . createConsumer ( org.springframework.integration.jms.Destination ) ; this . void ( javax.jms.Message , org.springframework.integration.jms.MessageProducer , int ) ; return this . javax.jms.Message ( org.springframework.integration.jms.MessageConsumer ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.integration.jms.MessageProducer ) ; JmsUtils . closeMessageConsumer ( org.springframework.integration.jms.MessageConsumer ) ; } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( Destination org.springframework.integration.jms.Destination , javax . javax.jms . javax.jms javax.jms.Message , Destination org.springframework.integration.jms.Destination , Session org.springframework.integration.jms.Session , int int ) throws org.springframework.integration.jms.JMSException { if ( org.springframework.integration.jms.Destination instanceof Topic && logger . isWarnEnabled ( ) ) { logger . warn ( STRING + STRING + STRING + STRING + STRING ) ; } MessageProducer org.springframework.integration.jms.MessageProducer = null ; try { org.springframework.integration.jms.MessageProducer = org.springframework.integration.jms.Session . createProducer ( org.springframework.integration.jms.Destination ) ; this . void ( javax.jms.Message , org.springframework.integration.jms.MessageProducer , int ) ; java.lang.String java.lang.String = javax.jms.Message . getJMSMessageID ( ) . replaceAll ( STRING , STRING ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING ; return javax.jms.Message ( org.springframework.integration.jms.Session , org.springframework.integration.jms.Destination , java.lang.String ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.integration.jms.MessageProducer ) ; } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( Session org.springframework.integration.jms.Session , Destination org.springframework.integration.jms.Destination , java.lang.String java.lang.String )			throws org.springframework.integration.jms.JMSException { Connection org.springframework.integration.jms.Connection = null ; Session org.springframework.integration.jms.Session = org.springframework.integration.jms.Session ; MessageConsumer org.springframework.integration.jms.MessageConsumer = null ; JMSException org.springframework.integration.jms.JMSException = null ; boolean boolean = org.springframework.integration.jms.Destination instanceof TemporaryQueue || org.springframework.integration.jms.Destination instanceof TemporaryTopic ; long long = boolean ? java.lang.Long . long : this . long < NUMBER ? java.lang.Long . long : java.lang.System . long ( ) + this . long ; try { do { try { org.springframework.integration.jms.MessageConsumer = org.springframework.integration.jms.Session . createConsumer ( org.springframework.integration.jms.Destination , java.lang.String ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( org.springframework.integration.jms.MessageConsumer ) ; if ( javax.jms.Message == null ) { if ( long > java.lang.System . long ( ) ) { throw new JMSException ( STRING ) ; } } return javax.jms.Message ; } catch ( JMSException org.springframework.integration.jms.JMSException ) { org.springframework.integration.jms.JMSException = org.springframework.integration.jms.JMSException ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.jms.JMSException . getMessage ( ) ) ; } do { try { org.springframework.integration.jms.Connection = org.springframework.integration.jms.Connection ( ) ; org.springframework.integration.jms.Session = org.springframework.integration.jms.Session ( org.springframework.integration.jms.Connection ) ; break; } catch ( JMSException org.springframework.integration.jms.JMSException ) { org.springframework.integration.jms.JMSException = org.springframework.integration.jms.JMSException ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.jms.JMSException . getMessage ( ) ) ; } try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; return null ; } } } while ( long > java.lang.System . long ( ) ); } } while ( long > java.lang.System . long ( ) ); if ( boolean ) { return null ; } else { throw org.springframework.integration.jms.JMSException ; } } finally { if ( org.springframework.integration.jms.Session != org.springframework.integration.jms.Session ) { JmsUtils . closeSession ( org.springframework.integration.jms.Session ) ; JmsUtils . closeConnection ( org.springframework.integration.jms.Connection ) ; } JmsUtils . closeMessageConsumer ( org.springframework.integration.jms.MessageConsumer ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Destination org.springframework.integration.jms.Destination , javax . javax.jms . javax.jms javax.jms.Message , Session org.springframework.integration.jms.Session , int int ) throws org.springframework.integration.jms.JMSException { java.lang.String java.lang.String = null ; MessageProducer org.springframework.integration.jms.MessageProducer = null ; try { org.springframework.integration.jms.MessageProducer = org.springframework.integration.jms.Session . createProducer ( org.springframework.integration.jms.Destination ) ; java.lang.String = this . java.lang.String + STRING + java.lang.Long . java.lang.String ( this . java.util.concurrent.atomic.AtomicLong . long ( ) ) ; if ( this . java.lang.String . boolean ( STRING ) ) { javax.jms.Message . setJMSCorrelationID ( java.lang.String ) ; } else { javax.jms.Message . setStringProperty ( this . java.lang.String , java.lang.String ) ; javax.jms.Message . setJMSCorrelationID ( null ) ; } java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> < javax . javax.jms . javax.jms > java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> = null ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( this . getComponentName ( ) + STRING + java.lang.String ) ; } SettableListenableFuture < AbstractIntegrationMessageBuilder < ? > > org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> = null ; boolean boolean = isAsync ( ) ; if ( ! boolean ) { java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> = new java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> < javax . javax.jms . javax.jms > ( NUMBER ) ; this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . put ( java.lang.String , java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> ) ; } else { org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> = org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> ( java.lang.String ) ; } this . void ( javax.jms.Message , org.springframework.integration.jms.MessageProducer , int ) ; if ( boolean ) { return org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> ; } else { return javax.jms.Message ( java.lang.String , java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> ) ; } } finally { JmsUtils . closeMessageProducer ( org.springframework.integration.jms.MessageProducer ) ; if ( java.lang.String != null && ! isAsync ( ) ) { this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . remove ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( Destination org.springframework.integration.jms.Destination , javax . javax.jms . javax.jms javax.jms.Message , Session org.springframework.integration.jms.Session , int int ) throws org.springframework.integration.jms.JMSException { java.lang.String java.lang.String = null ; MessageProducer org.springframework.integration.jms.MessageProducer = null ; try { org.springframework.integration.jms.MessageProducer = org.springframework.integration.jms.Session . createProducer ( org.springframework.integration.jms.Destination ) ; java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> < javax . javax.jms . javax.jms > java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> = new java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> < javax . javax.jms . javax.jms > ( NUMBER ) ; this . void ( javax.jms.Message , org.springframework.integration.jms.MessageProducer , int ) ; java.lang.String = javax.jms.Message . getJMSMessageID ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( this . getComponentName ( ) + STRING + java.lang.String ) ; } this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . put ( java.lang.String , java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> ) ; synchronized ( this . java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> ) { org.springframework.integration.jms.JmsOutboundGateway.TimedReply org.springframework.integration.jms.JmsOutboundGateway.TimedReply = this . java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> . org.springframework.integration.jms.JmsOutboundGateway.TimedReply ( java.lang.String ) ; if ( org.springframework.integration.jms.JmsOutboundGateway.TimedReply != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ) ; } java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> . add ( org.springframework.integration.jms.JmsOutboundGateway.TimedReply . javax.jms.Message ( ) ) ; } } return javax.jms.Message ( java.lang.String , java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.integration.jms.MessageProducer ) ; if ( java.lang.String != null ) { this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . remove ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( java.lang.String java.lang.String , java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> < javax . javax.jms . javax.jms > java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> ) { javax . javax.jms . javax.jms javax.jms.Message = null ; if ( this . long < NUMBER ) { javax.jms.Message = java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> . poll ( ) ; } else { try { javax.jms.Message = java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> . poll ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { logger . error ( STRING , java.lang.InterruptedException ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } if ( logger . isDebugEnabled ( ) ) { if ( javax.jms.Message == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( this . getComponentName ( ) + STRING + java.lang.String ) ; } } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( this . getComponentName ( ) + STRING + java.lang.String ) ; } } } return javax.jms.Message ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> < AbstractIntegrationMessageBuilder < ? > > org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> ( final java.lang.String java.lang.String ) { SettableListenableFuture < AbstractIntegrationMessageBuilder < ? > > org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> = new SettableListenableFuture < AbstractIntegrationMessageBuilder < ? > > ( ) ; this . java.util.Map<java.lang.String,org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>>> . put ( java.lang.String , org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> ) ; if ( this . long > NUMBER ) { getTaskScheduler ( ) . schedule ( ( java.lang.Runnable ) ( ) void ( java.lang.String ) , new java.util.Date ( java.lang.System . long ( ) + this . long ) ) ; } return org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { final SettableListenableFuture < AbstractIntegrationMessageBuilder < ? > > org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> = this . java.util.Map<java.lang.String,org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>>> . remove ( java.lang.String ) ; if ( org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> != null ) { try { if ( getRequiresReply ( ) ) { org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> . setException ( new JmsTimeoutException ( STRING + this . long + STRING ) ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.jms . javax.jms javax.jms.Message , MessageProducer org.springframework.integration.jms.MessageProducer , int int )			throws org.springframework.integration.jms.JMSException { if ( this . boolean ) { org.springframework.integration.jms.MessageProducer . send ( javax.jms.Message , this . int , int , this . long ) ; } else { org.springframework.integration.jms.MessageProducer . send ( javax.jms.Message ) ; } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( MessageConsumer org.springframework.integration.jms.MessageConsumer ) throws org.springframework.integration.jms.JMSException { return ( this . long >= NUMBER ) ? org.springframework.integration.jms.MessageConsumer . receive ( this . long ) : org.springframework.integration.jms.MessageConsumer . receive ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( Destination org.springframework.integration.jms.Destination ) { try { if ( org.springframework.integration.jms.Destination instanceof TemporaryQueue ) { ( ( TemporaryQueue ) org.springframework.integration.jms.Destination ) . delete ( ) ; } else if ( org.springframework.integration.jms.Destination instanceof TemporaryTopic ) { ( ( TemporaryTopic ) org.springframework.integration.jms.Destination ) . delete ( ) ; } } catch ( JMSException org.springframework.integration.jms.JMSException ) { } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.jms.Connection org.springframework.integration.jms.Connection ( ) org.springframework.integration.jms.JMSException { return this . org.springframework.integration.jms.ConnectionFactory . createConnection ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.jms.Session org.springframework.integration.jms.Session ( Connection org.springframework.integration.jms.Connection ) throws org.springframework.integration.jms.JMSException { return org.springframework.integration.jms.Connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax . javax.jms . javax.jms javax.jms.Message ) { java.lang.String java.lang.String = null ; try { if ( logger . isTraceEnabled ( ) ) { logger . trace ( this . getComponentName ( ) + STRING + javax.jms.Message ) ; } if ( this . java.lang.String == null || this . java.lang.String . boolean ( STRING ) || this . java.lang.String . boolean ( STRING ) ) { java.lang.String = javax.jms.Message . getJMSCorrelationID ( ) ; } else { java.lang.String = javax.jms.Message . getStringProperty ( this . java.lang.String ) ; } Assert . state ( java.lang.String != null , STRING ) ; if ( isAsync ( ) ) { void ( javax.jms.Message , java.lang.String ) ; } else { void ( javax.jms.Message , java.lang.String ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.String , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.jms . javax.jms javax.jms.Message , java.lang.String java.lang.String ) throws java.lang.Exception { SettableListenableFuture < AbstractIntegrationMessageBuilder < ? > > org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> = this . java.util.Map<java.lang.String,org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>>> . remove ( java.lang.String ) ; if ( org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> != null ) { javax.jms.Message . setJMSCorrelationID ( null ) ; org.springframework.integration.jms.SettableListenableFuture<org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?>> . set ( org.springframework.integration.jms.AbstractIntegrationMessageBuilder<?> ( javax.jms.Message ) ) ; } else { logger . warn ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.jms . javax.jms javax.jms.Message , java.lang.String java.lang.String ) { try { java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> < javax . javax.jms . javax.jms > java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> = this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . get ( java.lang.String ) ; if ( java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> == null ) { if ( this . java.lang.String != null ) { Log org.springframework.integration.jms.Log = LogFactory . getLog ( STRING ) ; if ( org.springframework.integration.jms.Log . isDebugEnabled ( ) ) { java.lang.Object java.lang.Object = this . org.springframework.integration.jms.MessageConverter . fromMessage ( javax.jms.Message ) ; org.springframework.integration.jms.Log . debug ( STRING + java.lang.Object + STRING + java.lang.String + STRING + this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . keySet ( ) ) ; } throw new java.lang.RuntimeException ( STRING ) ; } synchronized ( this . java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> ) { java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> = this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . get ( java.lang.String ) ; if ( java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } this . java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> . org.springframework.integration.jms.JmsOutboundGateway.TimedReply ( java.lang.String , new org.springframework.integration.jms.JmsOutboundGateway.TimedReply ( javax.jms.Message ) ) ; } } } if ( java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ) ; } java.util.concurrent.LinkedBlockingQueue<javax.jms.Message> . add ( javax.jms.Message ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.String , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.jms.Destination org.springframework.integration.jms.Destination ( Session org.springframework.integration.jms.Session , java.lang.String java.lang.String ) throws org.springframework.integration.jms.JMSException { if ( ! StringUtils . hasText ( java.lang.String ) ) { this . org.springframework.integration.jms.Destination = org.springframework.integration.jms.Session . createTemporaryQueue ( ) ; } else { this . org.springframework.integration.jms.Destination = super. resolveDestinationName ( org.springframework.integration.jms.Session , java.lang.String ) ; } return this . org.springframework.integration.jms.Destination ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( isSubscriptionDurable ( ) && ! isPubSubDomain ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } synchronized ( this . lifecycleMonitor ) { if ( isSubscriptionDurable ( ) && this . getConcurrentConsumers ( ) != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.jms.Destination org.springframework.integration.jms.Destination ( ) { Destination org.springframework.integration.jms.Destination = this . getDestination ( ) ; if ( org.springframework.integration.jms.Destination == null ) { org.springframework.integration.jms.Destination = this . org.springframework.integration.jms.Destination ; } if ( org.springframework.integration.jms.Destination != null ) { return org.springframework.integration.jms.Destination ; } else { int int = NUMBER ; while ( this . org.springframework.integration.jms.Destination == null && int ++ < NUMBER ) { logger . debug ( STRING ) ; try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( STRING ) ; } } if ( this . org.springframework.integration.jms.Destination == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } else { return this . org.springframework.integration.jms.Destination ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { if ( this . org.springframework.integration.jms.Destination instanceof TemporaryQueue ) { return STRING + this . org.springframework.integration.jms.Destination . toString ( ) ; } else if ( super. getDestination ( ) != null ) { try { return super. getDestinationDescription ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } return null ; } } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . org.springframework.integration.jms.Destination ) ; } this . org.springframework.integration.jms.Destination = null ; super. recoverAfterListenerSetupFailure ( ) ; }  <METHOD_END>
<METHOD_START> void ( javax . javax.jms . javax.jms javax.jms.Message ) { this . javax.jms.Message = javax.jms.Message ; }  <METHOD_END>
<METHOD_START> private long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( ) { return this . javax.jms.Message ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING ) ; } java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> < java.lang.String , org.springframework.integration.jms.JmsOutboundGateway.TimedReply > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply>> = org.springframework.integration.jms.JmsOutboundGateway .this . java.util.concurrent.ConcurrentHashMap<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply>> ( ) ; long long = java.lang.System . long ( ) ; long long = long - ( org.springframework.integration.jms.JmsOutboundGateway .this . long * NUMBER ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply>> . boolean ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> < java.lang.String , org.springframework.integration.jms.JmsOutboundGateway.TimedReply > java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply>> . java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> ( ) ; if ( java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> . org.springframework.integration.jms.JmsOutboundGateway.TimedReply ( ) . long ( ) < long ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply> . java.lang.String ( ) ) ; } java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jms.JmsOutboundGateway.TimedReply>> . void ( ) ; } } if ( org.springframework.integration.jms.JmsOutboundGateway .this . long >= NUMBER ) { org.springframework.integration.jms.JmsOutboundGateway .this . java.util.concurrent.ScheduledFuture<?> = getTaskScheduler ( ) . schedule ( this , new java.util.Date ( long + org.springframework.integration.jms.JmsOutboundGateway .this . long ) ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( org.springframework.integration.jms.JmsOutboundGateway .this . java.lang.Object ) { if ( java.lang.System . long ( ) - org.springframework.integration.jms.JmsOutboundGateway .this . long > org.springframework.integration.jms.JmsOutboundGateway .this . long && org.springframework.integration.jms.JmsOutboundGateway .this . java.util.Map<java.lang.String,java.util.concurrent.LinkedBlockingQueue<javax.jms.Message>> . size ( ) == NUMBER ) { if ( org.springframework.integration.jms.JmsOutboundGateway .this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . isRunning ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( getComponentName ( ) + STRING ) ; } org.springframework.integration.jms.JmsOutboundGateway .this . org.springframework.integration.jms.JmsOutboundGateway.GatewayReplyListenerContainer . stop ( ) ; org.springframework.integration.jms.JmsOutboundGateway .this . java.util.concurrent.ScheduledFuture<> . boolean ( false ) ; org.springframework.integration.jms.JmsOutboundGateway .this . java.util.concurrent.ScheduledFuture<?> = null ; } } } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return this . java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return this . java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.Executor java.util.concurrent.Executor ( ) { return this . java.util.concurrent.Executor ; }  <METHOD_END>
