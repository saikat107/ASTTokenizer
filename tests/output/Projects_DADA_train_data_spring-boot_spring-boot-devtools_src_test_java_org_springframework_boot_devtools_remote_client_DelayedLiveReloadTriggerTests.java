<METHOD_START> @ Before public void void ( ) java.io.IOException { MockitoAnnotations . initMocks ( this ) ; given ( this . org.springframework.boot.devtools.remote.client.ClientHttpRequest . execute ( ) ) . willReturn ( this . org.springframework.boot.devtools.remote.client.ClientHttpResponse ) ; given ( this . org.springframework.boot.devtools.remote.client.ClientHttpRequest . execute ( ) ) . willReturn ( this . org.springframework.boot.devtools.remote.client.ClientHttpResponse ) ; given ( this . org.springframework.boot.devtools.remote.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . INTERNAL_SERVER_ERROR ) ; given ( this . org.springframework.boot.devtools.remote.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; this . org.springframework.boot.devtools.remote.client.DelayedLiveReloadTrigger = new DelayedLiveReloadTrigger ( this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer , this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new DelayedLiveReloadTrigger ( null , this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new DelayedLiveReloadTrigger ( this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new DelayedLiveReloadTrigger ( this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer , this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new DelayedLiveReloadTrigger ( this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer , this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( java.lang.String ) , HttpMethod . GET ) ) . willThrow ( new java.io.IOException ( ) ) . willReturn ( this . org.springframework.boot.devtools.remote.client.ClientHttpRequest , this . org.springframework.boot.devtools.remote.client.ClientHttpRequest ) ; long long = java.lang.System . long ( ) ; this . org.springframework.boot.devtools.remote.client.DelayedLiveReloadTrigger . setTimings ( NUMBER , NUMBER , NUMBER ) ; this . org.springframework.boot.devtools.remote.client.DelayedLiveReloadTrigger . run ( ) ; assertThat ( java.lang.System . long ( ) - long ) . isGreaterThan ( NUMBER ) ; verify ( this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer ) . triggerReload ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( java.lang.String ) , HttpMethod . GET ) ) . willThrow ( new java.io.IOException ( ) ) ; this . org.springframework.boot.devtools.remote.client.DelayedLiveReloadTrigger . setTimings ( NUMBER , NUMBER , NUMBER ) ; this . org.springframework.boot.devtools.remote.client.DelayedLiveReloadTrigger . run ( ) ; verify ( this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer , never ( ) ) . triggerReload ( ) ; }  <METHOD_END>
