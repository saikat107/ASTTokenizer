<METHOD_START> public void ( ) { this . java.lang.String = java.lang.Class<? extends org.springframework.messaging.support.AbstractMessageChannel> ( ) . java.lang.String ( ) + STRING + ObjectUtils . getIdentityHexString ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.messaging.support.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.messaging.support.ChannelInterceptor> ) { this . java.util.List<org.springframework.messaging.support.ChannelInterceptor> . clear ( ) ; this . java.util.List<org.springframework.messaging.support.ChannelInterceptor> . addAll ( java.util.List<org.springframework.messaging.support.ChannelInterceptor> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor ) { this . java.util.List<org.springframework.messaging.support.ChannelInterceptor> . add ( org.springframework.messaging.support.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor ) { this . java.util.List<org.springframework.messaging.support.ChannelInterceptor> . add ( int , org.springframework.messaging.support.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.messaging.support.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.messaging.support.ChannelInterceptor> ( ) { return java.util.Collections . java.util.List<org.springframework.messaging.support.ChannelInterceptor> ( this . java.util.List<org.springframework.messaging.support.ChannelInterceptor> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor ) { return this . java.util.List<org.springframework.messaging.support.ChannelInterceptor> . remove ( org.springframework.messaging.support.ChannelInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.support.ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor ( int int ) { return this . java.util.List<org.springframework.messaging.support.ChannelInterceptor> . remove ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( Message < ? > org.springframework.messaging.support.Message<?> ) { return boolean ( org.springframework.messaging.support.Message<> , INDEFINITE_TIMEOUT ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( Message < ? > org.springframework.messaging.support.Message<?> , long long ) { Assert . notNull ( org.springframework.messaging.support.Message<> , STRING ) ; org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain = new org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain ( ) ; boolean boolean = false ; try { org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain . org.springframework.messaging.support.Message<?> ( org.springframework.messaging.support.Message<> , this ) ; if ( org.springframework.messaging.support.Message<> == null ) { return false ; } boolean = boolean ( org.springframework.messaging.support.Message<> , long ) ; org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain . void ( org.springframework.messaging.support.Message<> , this , boolean ) ; org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain . void ( org.springframework.messaging.support.Message<> , this , boolean , null ) ; return boolean ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain . void ( org.springframework.messaging.support.Message<> , this , boolean , java.lang.Exception ) ; if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } throw new MessageDeliveryException ( org.springframework.messaging.support.Message<> , STRING + this , java.lang.Exception ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { MessageDeliveryException org.springframework.messaging.support.MessageDeliveryException = new MessageDeliveryException ( org.springframework.messaging.support.Message<> , STRING + this , java.lang.Throwable ) ; org.springframework.messaging.support.AbstractMessageChannel.ChannelInterceptorChain . void ( org.springframework.messaging.support.Message<> , this , boolean , org.springframework.messaging.support.MessageDeliveryException ) ; throw org.springframework.messaging.support.MessageDeliveryException ; } }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( Message < ? > org.springframework.messaging.support.Message<?> , long long );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.messaging.support.AbstractMessageChannel> ( ) . java.lang.String ( ) + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.Message<?> < ? > org.springframework.messaging.support.Message<?> ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel ) { Message < ? > org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.Message<> ; for ( ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor : java.util.List<org.springframework.messaging.support.ChannelInterceptor> ) { Message < ? > org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.ChannelInterceptor . preSend ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel ) ; if ( org.springframework.messaging.support.Message<> == null ) { java.lang.String java.lang.String = org.springframework.messaging.support.ChannelInterceptor . getClass ( ) . getSimpleName ( ) ; if ( org.springframework.messaging.support.Log . isDebugEnabled ( ) ) { org.springframework.messaging.support.Log . debug ( java.lang.String + STRING ) ; } void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , false , null ) ; return null ; } org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.Message<> ; this . int ++ ; } return org.springframework.messaging.support.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { for ( ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor : java.util.List<org.springframework.messaging.support.ChannelInterceptor> ) { org.springframework.messaging.support.ChannelInterceptor . postSend ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; } }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { for ( int int = this . int ; int >= NUMBER ; int -- ) { ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor = java.util.List<org.springframework.messaging.support.ChannelInterceptor> . get ( int ) ; try { org.springframework.messaging.support.ChannelInterceptor . afterSendCompletion ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean , java.lang.Exception ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.messaging.support.Log . error ( STRING + org.springframework.messaging.support.ChannelInterceptor , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( MessageChannel org.springframework.messaging.support.MessageChannel ) { for ( ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor : java.util.List<org.springframework.messaging.support.ChannelInterceptor> ) { if ( ! org.springframework.messaging.support.ChannelInterceptor . preReceive ( org.springframework.messaging.support.MessageChannel ) ) { void ( null , org.springframework.messaging.support.MessageChannel , null ) ; return false ; } this . int ++ ; } return true ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.Message<?> < ? > org.springframework.messaging.support.Message<?> ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel ) { for ( ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor : java.util.List<org.springframework.messaging.support.ChannelInterceptor> ) { org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.ChannelInterceptor . postReceive ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel ) ; if ( org.springframework.messaging.support.Message<> == null ) { return null ; } } return org.springframework.messaging.support.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , java.lang.Exception java.lang.Exception ) { for ( int int = this . int ; int >= NUMBER ; int -- ) { ChannelInterceptor org.springframework.messaging.support.ChannelInterceptor = java.util.List<org.springframework.messaging.support.ChannelInterceptor> . get ( int ) ; try { org.springframework.messaging.support.ChannelInterceptor . afterReceiveCompletion ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , java.lang.Exception ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.messaging.support.Log . isErrorEnabled ( ) ) { org.springframework.messaging.support.Log . error ( STRING + org.springframework.messaging.support.ChannelInterceptor , java.lang.Throwable ) ; } } } }  <METHOD_END>
