<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.AutoConfigurationExcludeFilterTests.Config .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( java.lang.String .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AnnotationConfigApplicationContext . getBean ( java.lang.String .class ) ) . isEqualTo ( STRING ) ; this . org.springframework.boot.autoconfigure.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.AnnotationConfigApplicationContext . getBean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
