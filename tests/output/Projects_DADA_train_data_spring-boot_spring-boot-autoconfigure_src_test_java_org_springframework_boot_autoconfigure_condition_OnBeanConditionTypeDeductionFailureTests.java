<METHOD_START> @ Test public void void ( ) { try { new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.OnBeanConditionTypeDeductionFailureTests.ImportingConfiguration .class ) . close ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Throwable ( java.lang.Exception , BeanTypeDeductionException .class ) ; assertThat ( java.lang.Throwable ) . hasMessage ( STRING + org.springframework.boot.autoconfigure.condition.OnBeanConditionTypeDeductionFailureTests.OnMissingBeanConfiguration .class . java.lang.String ( ) + STRING ) ; assertThat ( java.lang.Throwable ( java.lang.Throwable , java.lang.NoClassDefFoundError .class ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Throwable java.lang.Throwable ( java.lang.Throwable java.lang.Throwable , java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { java.lang.Throwable java.lang.Throwable = java.lang.Throwable ; while ( java.lang.Throwable != null ) { if ( java.lang.Class<> . boolean ( java.lang.Throwable ) ) { return java.lang.Throwable ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.condition.ObjectMapper org.springframework.boot.autoconfigure.condition.ObjectMapper ( ) { return new ObjectMapper ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.boot.autoconfigure.condition.AnnotationMetadata ) { return new java.lang.String [] { org.springframework.boot.autoconfigure.condition.OnBeanConditionTypeDeductionFailureTests.OnMissingBeanConfiguration .class . java.lang.String ( ) } ; }  <METHOD_END>
