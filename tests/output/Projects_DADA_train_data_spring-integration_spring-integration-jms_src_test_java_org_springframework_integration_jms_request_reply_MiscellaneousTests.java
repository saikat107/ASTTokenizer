<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.MiscellaneousTests> ( ) ) ; final RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; StopWatch org.springframework.integration.jms.request_reply.StopWatch = new StopWatch ( ) ; org.springframework.integration.jms.request_reply.StopWatch . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . void ( java.util.concurrent.CountDownLatch , org.springframework.integration.jms.request_reply.RequestReplyExchanger , java.util.concurrent.atomic.AtomicInteger ) ; } java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.integration.jms.request_reply.StopWatch . stop ( ) ; assertTrue ( org.springframework.integration.jms.request_reply.StopWatch . getTotalTimeMillis ( ) <= NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch , final RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger , final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ) { new java.lang.Thread ( ( ) { try { org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } java.util.concurrent.CountDownLatch . void ( ) ; } ) . void ( ) ; }  <METHOD_END>
