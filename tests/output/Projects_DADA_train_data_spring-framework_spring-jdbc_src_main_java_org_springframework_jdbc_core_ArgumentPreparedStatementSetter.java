<METHOD_START> public void ( java.lang.Object [] java.lang.Object[] ) { this . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement ) throws java.sql.SQLException { if ( this . java.lang.Object[] != null ) { for ( int int = NUMBER ; int < this . java.lang.Object[] . int ; int ++ ) { java.lang.Object java.lang.Object = this . java.lang.Object[] [ int ] ; void ( java.sql.PreparedStatement , int + NUMBER , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.lang.Object java.lang.Object ) throws java.sql.SQLException { if ( java.lang.Object instanceof SqlParameterValue ) { SqlParameterValue org.springframework.jdbc.core.SqlParameterValue = ( SqlParameterValue ) java.lang.Object ; StatementCreatorUtils . setParameterValue ( java.sql.PreparedStatement , int , org.springframework.jdbc.core.SqlParameterValue , org.springframework.jdbc.core.SqlParameterValue . getValue ( ) ) ; } else { StatementCreatorUtils . setParameterValue ( java.sql.PreparedStatement , int , SqlTypeValue . TYPE_UNKNOWN , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { StatementCreatorUtils . cleanupParameters ( this . java.lang.Object[] ) ; }  <METHOD_END>
