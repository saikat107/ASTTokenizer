<METHOD_START> protected void ( org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ) { Assert . notNull ( org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer , STRING ) ; this . org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer = org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) { return this . org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( ! boolean ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.codec.AbstractCodecConfigurer.CustomCodecConfigurer org.springframework.http.codec.AbstractCodecConfigurer.CustomCodecConfigurer ( ) { return this . org.springframework.http.codec.AbstractCodecConfigurer.CustomCodecConfigurer ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ( ) { java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> = new java.util.ArrayList<org.springframework.http.codec.HttpMessageReader<?>> <> ( ) ; void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; org.springframework.http.codec.AbstractCodecConfigurer.CustomCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; org.springframework.http.codec.AbstractCodecConfigurer.CustomCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; return java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ByteArrayDecoder .class , ByteArrayDecoder ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ByteBufferDecoder .class , ByteBufferDecoder ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , DataBufferDecoder .class , DataBufferDecoder ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ResourceDecoder .class , ResourceDecoder ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { if ( boolean ) { org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , Jaxb2XmlDecoder .class , Jaxb2XmlDecoder ::new ) ; } if ( boolean ) { org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , Jackson2JsonDecoder .class , Jackson2JsonDecoder ::new ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ( ) { java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> = new java.util.ArrayList<org.springframework.http.codec.HttpMessageWriter<?>> <> ( ) ; void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; org.springframework.http.codec.AbstractCodecConfigurer.CustomCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; org.springframework.http.codec.AbstractCodecConfigurer.CustomCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; return java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , ByteArrayEncoder .class , ByteArrayEncoder ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , ByteBufferEncoder .class , ByteBufferEncoder ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , DataBufferEncoder .class , DataBufferEncoder ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , ResourceHttpMessageWriter ::new ) ; org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { if ( boolean ) { org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , Jaxb2XmlEncoder .class , Jaxb2XmlEncoder ::new ) ; } if ( boolean ) { org.springframework.http.codec.AbstractCodecConfigurer.DefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , Jackson2JsonEncoder .class , Jackson2JsonEncoder ::new ) ; } }  <METHOD_END>
<METHOD_START> public void void ( Jackson2JsonDecoder org.springframework.http.codec.Jackson2JsonDecoder ) { this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageReader<?>> . put ( Jackson2JsonDecoder .class , new DecoderHttpMessageReader <> ( org.springframework.http.codec.Jackson2JsonDecoder ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Jackson2JsonEncoder org.springframework.http.codec.Jackson2JsonEncoder ) { this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageWriter<?>> . put ( Jackson2JsonEncoder .class , new EncoderHttpMessageWriter <> ( org.springframework.http.codec.Jackson2JsonEncoder ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageReader<?>> < java.lang.Class<?> < ? > , HttpMessageReader < ? > > java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageReader<?>> ( ) { return this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageReader<?>> ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageWriter<?>> < java.lang.Class<?> < ? > , HttpMessageWriter < ? > > java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageWriter<?>> ( ) { return this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageWriter<?>> ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected < T , D extends org.springframework.http.codec.Decoder<T> < T > > void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , java.lang.Class<D> < D > java.lang.Class<D> , java.util.function.Supplier<D> < D > java.util.function.Supplier<D> ) { void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ( ) findDecoderReader ( key , fallback ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , java.util.function.Supplier<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.function.Supplier<org.springframework.http.codec.HttpMessageReader<?>> ) { if ( ! this . boolean ) { java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . add ( java.util.function.Supplier<org.springframework.http.codec.HttpMessageReader<?>> . get ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected < T , D extends org.springframework.http.codec.Decoder<T> < T > > org.springframework.http.codec.DecoderHttpMessageReader<?> < ? > org.springframework.http.codec.DecoderHttpMessageReader<?> ( java.lang.Class<D> < D > java.lang.Class<D> , java.util.function.Supplier<D> < D > java.util.function.Supplier<D> ) { DecoderHttpMessageReader < ? > org.springframework.http.codec.DecoderHttpMessageReader<?> = ( DecoderHttpMessageReader < ? > ) this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageReader<?>> . get ( java.lang.Class<D> ) ; return org.springframework.http.codec.DecoderHttpMessageReader<> != null ? org.springframework.http.codec.DecoderHttpMessageReader<> : new DecoderHttpMessageReader <> ( java.util.function.Supplier<D> . D ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.http.codec.HttpMessageReader<?> < ? > org.springframework.http.codec.HttpMessageReader<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.function.Supplier<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.function.Supplier<org.springframework.http.codec.HttpMessageReader<?>> ) { return this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageReader<?>> . containsKey ( java.lang.Class<> ) ? this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageReader<?>> . get ( java.lang.Class<> ) : java.util.function.Supplier<org.springframework.http.codec.HttpMessageReader<?>> . get ( ) ; }  <METHOD_END>
<METHOD_START> protected < T , E extends org.springframework.http.codec.Encoder<T> < T > > void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , java.lang.Class<E> < E > java.lang.Class<E> , java.util.function.Supplier<E> < E > java.util.function.Supplier<E> ) { void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , ( ) findEncoderWriter ( key , fallback ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , java.util.function.Supplier<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.function.Supplier<org.springframework.http.codec.HttpMessageWriter<?>> ) { if ( ! this . boolean ) { java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . add ( java.util.function.Supplier<org.springframework.http.codec.HttpMessageWriter<?>> . get ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected < T , E extends org.springframework.http.codec.Encoder<T> < T > > org.springframework.http.codec.EncoderHttpMessageWriter<?> < ? > org.springframework.http.codec.EncoderHttpMessageWriter<?> ( java.lang.Class<E> < E > java.lang.Class<E> , java.util.function.Supplier<E> < E > java.util.function.Supplier<E> ) { EncoderHttpMessageWriter < ? > org.springframework.http.codec.EncoderHttpMessageWriter<?> = ( EncoderHttpMessageWriter < ? > ) this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageWriter<?>> . get ( java.lang.Class<E> ) ; return org.springframework.http.codec.EncoderHttpMessageWriter<> != null ? org.springframework.http.codec.EncoderHttpMessageWriter<> : new EncoderHttpMessageWriter <> ( java.util.function.Supplier<E> . E ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.http.codec.HttpMessageWriter<?> < ? > org.springframework.http.codec.HttpMessageWriter<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.function.Supplier<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.function.Supplier<org.springframework.http.codec.HttpMessageWriter<?>> ) { return this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageWriter<?>> . containsKey ( java.lang.Class<> ) ? this . java.util.Map<java.lang.Class<?>,org.springframework.http.codec.HttpMessageWriter<?>> . get ( java.lang.Class<> ) : java.util.function.Supplier<org.springframework.http.codec.HttpMessageWriter<?>> . get ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> );  <METHOD_END>
<METHOD_START> protected abstract void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> );  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , ( ) new EncoderHttpMessageWriter <> ( CharSequenceEncoder . textPlainOnly ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , ( ) new EncoderHttpMessageWriter <> ( CharSequenceEncoder . allMimeTypes ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Decoder < ? > org.springframework.http.codec.Decoder<?> ) { void ( new DecoderHttpMessageReader <> ( org.springframework.http.codec.Decoder<> ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Encoder < ? > org.springframework.http.codec.Encoder<?> ) { void ( new EncoderHttpMessageWriter <> ( org.springframework.http.codec.Encoder<> ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpMessageReader < ? > org.springframework.http.codec.HttpMessageReader<?> ) { boolean boolean = org.springframework.http.codec.HttpMessageReader<> . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ; ( boolean ? this . java.util.List<org.springframework.http.codec.HttpMessageReader<?>> : this . java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) . add ( org.springframework.http.codec.HttpMessageReader<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> ) { boolean boolean = org.springframework.http.codec.HttpMessageWriter<> . canWrite ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ; ( boolean ? this . java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> : this . java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) . add ( org.springframework.http.codec.HttpMessageWriter<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . addAll ( this . java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { java.util.List<org.springframework.http.codec.HttpMessageReader<?>> . addAll ( this . java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . addAll ( this . java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> . addAll ( this . java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; }  <METHOD_END>
