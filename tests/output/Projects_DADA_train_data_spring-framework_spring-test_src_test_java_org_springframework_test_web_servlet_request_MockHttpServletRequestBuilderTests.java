<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getScheme ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getQueryString ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getServerName ( ) ) ; assertEquals ( NUMBER , org.springframework.test.web.servlet.request.MockHttpServletRequest . getServerPort ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getRequestURI ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getRequestURL ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getRequestURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , new java.net.URI ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getRequestURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getContextPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getServletPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getPathInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . contextPath ( STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getContextPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getServletPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getPathInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . contextPath ( STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . servletPath ( STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getContextPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getServletPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getPathInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . contextPath ( STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . servletPath ( STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getContextPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getServletPath ( ) ) ; assertNull ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getPathInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . servletPath ( STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . pathInfo ( null ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getContextPath ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getServletPath ( ) ) ; assertNull ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getPathInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . contextPath ( java.lang.String ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . servletPath ( java.lang.String ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.String , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getRequestURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . param ( STRING , STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameterMap ( ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameterMap ( ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getQueryString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getQueryString ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameter ( STRING ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getQueryString ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameterMap ( ) ; assertArrayEquals ( new java.lang.String [] { null } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getQueryString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . POST , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . params ( org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameterMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = new MockHttpServletRequestBuilder ( HttpMethod . POST , STRING ) . contentType ( java.lang.String ) . content ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameterMap ( ) . get ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameterMap ( ) . get ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { null } , org.springframework.test.web.servlet.request.MockHttpServletRequest . getParameterMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . accept ( MediaType . TEXT_HTML , MediaType . APPLICATION_XML ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.ArrayList ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getHeaders ( STRING ) ) ; java.util.List<org.springframework.test.web.servlet.request.MediaType> < MediaType > java.util.List<org.springframework.test.web.servlet.request.MediaType> = MediaType . parseMediaTypes ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.test.web.servlet.request.MediaType> . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.test.web.servlet.request.MediaType> . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . contentType ( MediaType . TEXT_HTML ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequest . getContentType ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.ArrayList ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getHeaders ( STRING ) ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . contentType ( STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequest . getContentType ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.ArrayList ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getHeaders ( STRING ) ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . header ( STRING , MediaType . TEXT_HTML_VALUE ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequest . getContentType ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . header ( STRING , MediaType . TEXT_HTML_VALUE , MediaType . ALL_VALUE ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = STRING . byte[] ( STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . content ( byte[] ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getInputStream ( ) ) ; assertArrayEquals ( byte[] , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . header ( STRING , STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.ArrayList ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getHeaders ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.test.web.servlet.request.HttpHeaders = new HttpHeaders ( ) ; org.springframework.test.web.servlet.request.HttpHeaders . setContentType ( MediaType . APPLICATION_JSON ) ; org.springframework.test.web.servlet.request.HttpHeaders . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . headers ( org.springframework.test.web.servlet.request.HttpHeaders ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.ArrayList ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getHeaders ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( MediaType . APPLICATION_JSON . toString ( ) , org.springframework.test.web.servlet.request.MockHttpServletRequest . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cookie org.springframework.test.web.servlet.request.Cookie = new Cookie ( STRING , STRING ) ; Cookie org.springframework.test.web.servlet.request.Cookie = new Cookie ( STRING , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . cookie ( org.springframework.test.web.servlet.request.Cookie , org.springframework.test.web.servlet.request.Cookie ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; Cookie [] org.springframework.test.web.servlet.request.Cookie[] = org.springframework.test.web.servlet.request.MockHttpServletRequest . getCookies ( ) ; assertEquals ( NUMBER , cookies . length ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.Cookie[] [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.Cookie[] [ NUMBER ] . getValue ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.Cookie[] [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.Cookie[] [ NUMBER ] . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertNull ( org.springframework.test.web.servlet.request.MockHttpServletRequest . getCookies ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Locale java.util.Locale = new java.util.Locale ( STRING , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . locale ( java.util.Locale ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( java.util.Locale , org.springframework.test.web.servlet.request.MockHttpServletRequest . getLocale ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . characterEncoding ( java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequest . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . requestAttr ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . sessionAttr ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getSession ( ) . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . sessionAttrs ( java.util.Map<java.lang.String,java.lang.Object> ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getSession ( ) . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpSession org.springframework.test.web.servlet.request.MockHttpSession = new MockHttpSession ( this . org.springframework.test.web.servlet.request.ServletContext ) ; org.springframework.test.web.servlet.request.MockHttpSession . setAttribute ( STRING , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . session ( org.springframework.test.web.servlet.request.MockHttpSession ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . sessionAttr ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( org.springframework.test.web.servlet.request.MockHttpSession , org.springframework.test.web.servlet.request.MockHttpServletRequest . getSession ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getSession ( ) . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getSession ( ) . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . flashAttr ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; FlashMap org.springframework.test.web.servlet.request.FlashMap = new SessionFlashMapManager ( ) . retrieveAndUpdate ( org.springframework.test.web.servlet.request.MockHttpServletRequest , null ) ; assertNotNull ( org.springframework.test.web.servlet.request.FlashMap ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.FlashMap . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.User org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.User = new org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.User ( ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . principal ( org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.User ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.User , org.springframework.test.web.servlet.request.MockHttpServletRequest . getUserPrincipal ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( HttpMethod . GET , STRING ) . with ( org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( java.lang.String ) . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( STRING ) ) . with ( org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( java.lang.String ) . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( java.lang.String ) ) ; org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . merge ( org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( org.springframework.test.web.servlet.request.ServletContext ) ; org.springframework.test.web.servlet.request.MockHttpServletRequest = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . postProcessRequest ( org.springframework.test.web.servlet.request.MockHttpServletRequest ) ; assertEquals ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequest . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.net.URI java.net.URI = UriComponentsBuilder . fromPath ( STRING ) . buildAndExpand ( NUMBER ) . toUri ( ) ; this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = new MockHttpServletRequestBuilder ( java.lang.String , java.net.URI ) ; MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = this . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.request.ServletContext ) ; assertEquals ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequest . getMethod ( ) ) ; assertEquals ( STRING , org.springframework.test.web.servlet.request.MockHttpServletRequest . getPathInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( java.lang.String java.lang.String ) { return new org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( ) . org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor org.springframework.test.web.servlet.request.MockHttpServletRequestBuilderTests.RequestAttributePostProcessor ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest ( MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setAttribute ( java.lang.String , java.lang.String ) ; return org.springframework.test.web.servlet.request.MockHttpServletRequest ; }  <METHOD_END>
