<METHOD_START> @ Test public void void ( ) { RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new MyRuntimeException ( STRING ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = new java.util.LinkedList<org.springframework.transaction.interceptor.RollbackRuleAttribute> <> ( ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new RollbackRuleAttribute ( java.io.IOException .class . java.lang.String ( ) ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new MyRuntimeException ( STRING ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = new java.util.LinkedList<org.springframework.transaction.interceptor.RollbackRuleAttribute> <> ( ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new NoRollbackRuleAttribute ( MyRuntimeException .class . java.lang.String ( ) ) ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new RollbackRuleAttribute ( java.io.IOException .class . java.lang.String ( ) ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new MyRuntimeException ( STRING ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = new java.util.LinkedList<org.springframework.transaction.interceptor.RollbackRuleAttribute> <> ( ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new RollbackRuleAttribute ( java . rmi . java.rmi.RemoteException .class . java.lang.String ( ) ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; void ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = java.util.Collections . java.util.List ( new RollbackRuleAttribute ( java.rmi.RemoteException .class ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; void ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute ) ; }  <METHOD_END>
<METHOD_START> private void void ( RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute ) { assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.rmi.RemoteException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = new java.util.LinkedList<org.springframework.transaction.interceptor.RollbackRuleAttribute> <> ( ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new RollbackRuleAttribute ( STRING ) ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new NoRollbackRuleAttribute ( STRING ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = new java.util.LinkedList<org.springframework.transaction.interceptor.RollbackRuleAttribute> <> ( ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new NoRollbackRuleAttribute ( STRING ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Throwable ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new MyRuntimeException ( STRING ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = new java.util.LinkedList<org.springframework.transaction.interceptor.RollbackRuleAttribute> <> ( ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new NoRollbackRuleAttribute ( STRING ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; TransactionAttributeEditor org.springframework.transaction.interceptor.TransactionAttributeEditor = new TransactionAttributeEditor ( ) ; org.springframework.transaction.interceptor.TransactionAttributeEditor . setAsText ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . toString ( ) ) ; org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = ( RuleBasedTransactionAttribute ) org.springframework.transaction.interceptor.TransactionAttributeEditor . getValue ( ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Throwable ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new MyRuntimeException ( STRING ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> = new java.util.LinkedList<org.springframework.transaction.interceptor.RollbackRuleAttribute> <> ( ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new NoRollbackRuleAttribute ( org.springframework.transaction.interceptor.RuleBasedTransactionAttributeTests.MyBusinessWarningException .class ) ) ; java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> . add ( new RollbackRuleAttribute ( org.springframework.transaction.interceptor.RuleBasedTransactionAttributeTests.MyBusinessException .class ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.interceptor.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED , java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> ) ; assertTrue ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new org.springframework.transaction.interceptor.RuleBasedTransactionAttributeTests.MyBusinessException ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.RuleBasedTransactionAttribute . rollbackOn ( new org.springframework.transaction.interceptor.RuleBasedTransactionAttributeTests.MyBusinessWarningException ( ) ) ) ; }  <METHOD_END>
