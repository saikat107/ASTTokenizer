<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.aop.target.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( this . org.springframework.aop.target.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.target.Resource ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . org.springframework.aop.target.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; ITestBean org.springframework.aop.target.ITestBean = ( ITestBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.aop.target.ITestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.aop.target.ITestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ThreadLocalTargetSourceStats org.springframework.aop.target.ThreadLocalTargetSourceStats = ( ThreadLocalTargetSourceStats ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.target.ThreadLocalTargetSourceStats . getInvocationCount ( ) ) ; SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( NUMBER , org.springframework.aop.target.ThreadLocalTargetSourceStats . getInvocationCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.target.ThreadLocalTargetSourceStats . getHitCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( NUMBER , org.springframework.aop.target.ThreadLocalTargetSourceStats . getInvocationCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.target.ThreadLocalTargetSourceStats . getHitCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.target.ThreadLocalTargetSourceStats . getObjectCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; class Runner implements java.lang.Runnable { public org.springframework.aop.target.SideEffectBean org.springframework.aop.target.SideEffectBean ; @ java.lang.Override public void void ( ) { this . org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; } } Runner r = new Runner ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( r ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( ) ; assertNotNull ( r ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; assertEquals ( int + NUMBER , r . org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; assertEquals ( NUMBER , ( ( ThreadLocalTargetSourceStats ) org.springframework.aop.target.SideEffectBean ) . getObjectCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ThreadLocalTargetSource org.springframework.aop.target.ThreadLocalTargetSource = ( ThreadLocalTargetSource ) this . org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.target.ThreadLocalTargetSource . getTarget ( ) ; org.springframework.aop.target.ThreadLocalTargetSource . destroy ( ) ; try { org.springframework.aop.target.ThreadLocalTargetSource . getTarget ( ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { fail ( STRING ) ; } }  <METHOD_END>
