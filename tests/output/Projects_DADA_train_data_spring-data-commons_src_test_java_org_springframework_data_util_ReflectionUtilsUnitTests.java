<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.lang.reflect.Field = org.springframework.data.util.ReflectionUtilsUnitTests.Sample .class . java.lang.reflect.Field ( STRING ) ; this . java.lang.reflect.Constructor = org.springframework.data.util.ReflectionUtilsUnitTests.ConstructorDetection .class . java.lang.reflect.Constructor<org.springframework.data.util.ReflectionUtilsUnitTests.ConstructorDetection> ( int .class , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.util.ReflectionUtilsUnitTests.Sample .class , ( FieldFilter ) new org.springframework.data.util.ReflectionUtilsUnitTests.FieldNameFieldFilter ( STRING ) ) ; assertThat ( java.lang.reflect.Field ) . isEqualTo ( java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.util.ReflectionUtilsUnitTests.Sample .class , ( FieldFilter ) new org.springframework.data.util.ReflectionUtilsUnitTests.FieldNameFieldFilter ( STRING ) ) ; assertThat ( java.lang.reflect.Field ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { ReflectionUtils . findField ( org.springframework.data.util.ReflectionUtilsUnitTests.Sample .class , new ReflectionUtils . ReflectionUtils ( Autowired .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.util.ReflectionUtilsUnitTests.Sample .class , new org.springframework.data.util.ReflectionUtilsUnitTests.FieldNameFieldFilter ( STRING ) , false ) ; assertThat ( java.lang.reflect.Field ) . isEqualTo ( java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class Subclass extends org.springframework.data.util.ReflectionUtilsUnitTests.Sample {		} java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( Subclass .class , new org.springframework.data.util.ReflectionUtilsUnitTests.FieldNameFieldFilter ( STRING ) ) ; assertThat ( java.lang.reflect.Field ) . isEqualTo ( java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.util.ReflectionUtilsUnitTests.Sample org.springframework.data.util.ReflectionUtilsUnitTests.Sample = new org.springframework.data.util.ReflectionUtilsUnitTests.Sample ( ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.util.ReflectionUtilsUnitTests.Sample .class , new org.springframework.data.util.ReflectionUtilsUnitTests.FieldNameFieldFilter ( STRING ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.data.util.ReflectionUtilsUnitTests.Sample , STRING ) ; assertThat ( org.springframework.data.util.ReflectionUtilsUnitTests.Sample . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ReflectionUtils . findConstructor ( org.springframework.data.util.ReflectionUtilsUnitTests.ConstructorDetection .class , NUMBER , STRING ) ) . hasValue ( java.lang.reflect.Constructor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ReflectionUtils . findConstructor ( org.springframework.data.util.ReflectionUtilsUnitTests.ConstructorDetection .class , NUMBER , null ) ) . hasValue ( java.lang.reflect.Constructor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ReflectionUtils . findConstructor ( org.springframework.data.util.ReflectionUtilsUnitTests.ConstructorDetection .class , NUMBER , STRING , STRING ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ReflectionUtils . findConstructor ( org.springframework.data.util.ReflectionUtilsUnitTests.ConstructorDetection .class , null , STRING ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.reflect.Field java.lang.reflect.Field ) { return java.lang.reflect.Field . java.lang.String ( ) . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( int int , java.lang.String java.lang.String ) {}  <METHOD_END>
