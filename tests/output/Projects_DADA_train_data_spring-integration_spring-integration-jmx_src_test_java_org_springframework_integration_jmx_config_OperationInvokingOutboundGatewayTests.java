<METHOD_START> @ After public void void ( ) { org.springframework.integration.jmx.config.TestBean . messages . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.jmx.config.PollableChannel . receive ( ) . getPayload ( ) ) . int ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.jmx.config.PollableChannel . receive ( ) . getPayload ( ) ) . int ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.jmx.config.PollableChannel . receive ( ) . getPayload ( ) ) . int ( ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.Object [] > ( new java.lang.Object [] { true , NUMBER , NUMBER } ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( false ) ; java.util.List<java.lang.Object> . boolean ( NUMBER ) ; java.util.List<java.lang.Object> . boolean ( NUMBER ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.util.List<java.lang.Object> < java.lang.Object > > ( java.util.List<java.lang.Object> ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; try { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessagingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.config.MessageHandler , STRING , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; java.lang.Object java.lang.Object = java.util.List<> . get ( NUMBER ) ; assertTrue ( java.lang.Object instanceof OperationInvokingMessageHandler ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.jmx.config.PollableChannel . receive ( ) . getPayload ( ) ) . int ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.jmx.config.PollableChannel . receive ( ) . getPayload ( ) ) . int ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.jmx.config.PollableChannel . receive ( ) . getPayload ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jmx.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jmx.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.jmx.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
