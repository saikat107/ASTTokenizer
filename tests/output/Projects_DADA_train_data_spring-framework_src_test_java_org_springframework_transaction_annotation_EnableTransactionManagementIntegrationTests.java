<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.Config .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; try { void ( org.springframework.transaction.annotation.AnnotationConfigApplicationContext ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { assertThat ( java.lang.AssertionError . java.lang.String ( ) , equalTo ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.Config .class , org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.DefaultTxManagerNameConfig .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; void ( org.springframework.transaction.annotation.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.Config .class , org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.CustomTxManagerNameConfig .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; void ( org.springframework.transaction.annotation.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.Config .class , org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.NonConventionalTxManagerNameConfig .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; void ( org.springframework.transaction.annotation.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.Config .class , org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.ProxyTargetClassTxConfig .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; void ( org.springframework.transaction.annotation.AnnotationConfigApplicationContext ) ; assertThat ( AopUtils . isCglibProxy ( org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository .class ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.Config .class , org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.AspectJTxConfig .class ) ; try { org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.ImplicitTxManagerConfig .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository . java.util.List<java.lang.Object> ( ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( CallCountingTransactionManager .class ) ; assertThat ( txManager . begun , equalTo ( NUMBER ) ) ; assertThat ( txManager . commits , equalTo ( NUMBER ) ) ; assertThat ( txManager . rollbacks , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.ExplicitTxManagerConfig .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository .class ) ; org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository . java.util.List<java.lang.Object> ( ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( STRING , CallCountingTransactionManager .class ) ; assertThat ( txManager1 . begun , equalTo ( NUMBER ) ) ; assertThat ( txManager1 . commits , equalTo ( NUMBER ) ) ; assertThat ( txManager1 . rollbacks , equalTo ( NUMBER ) ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( STRING , CallCountingTransactionManager .class ) ; assertThat ( txManager2 . begun , equalTo ( NUMBER ) ) ; assertThat ( txManager2 . commits , equalTo ( NUMBER ) ) ; assertThat ( txManager2 . rollbacks , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.EnableTxAndCachingConfig .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository ( ) { return new org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.DummyFooRepository ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.CacheManager org.springframework.transaction.annotation.CacheManager ( ) { SimpleCacheManager org.springframework.transaction.annotation.SimpleCacheManager = new SimpleCacheManager ( ) ; java.util.ArrayList<org.springframework.transaction.annotation.Cache> < Cache > java.util.ArrayList<org.springframework.transaction.annotation.Cache> = new java.util.ArrayList<org.springframework.transaction.annotation.Cache> <> ( ) ; java.util.ArrayList<org.springframework.transaction.annotation.Cache> . add ( new ConcurrentMapCache ( STRING ) ) ; org.springframework.transaction.annotation.SimpleCacheManager . setCaches ( java.util.ArrayList<org.springframework.transaction.annotation.Cache> ) ; return org.springframework.transaction.annotation.SimpleCacheManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository ( ) { return new org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.DummyFooRepository ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( ) { return org.springframework.transaction.annotation.PlatformTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository ( ) { return new org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.DummyFooRepository ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext ) { org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository .class ) ; boolean boolean = false ; if ( AopUtils . isAopProxy ( org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository ) ) { for ( Advisor org.springframework.transaction.annotation.Advisor : ( ( Advised ) org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository ) . getAdvisors ( ) ) { if ( org.springframework.transaction.annotation.Advisor instanceof BeanFactoryTransactionAttributeSourceAdvisor ) { boolean = true ; break; } } } assertTrue ( STRING , boolean ) ; org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository . java.util.List<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( javax.sql.DataSource javax.sql.DataSource ) { return new DataSourceTransactionManager ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( javax.sql.DataSource javax.sql.DataSource ) { return new DataSourceTransactionManager ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( javax.sql.DataSource javax.sql.DataSource ) { return new DataSourceTransactionManager ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( javax.sql.DataSource javax.sql.DataSource ) { return new DataSourceTransactionManager ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.transaction.annotation.PlatformTransactionManager org.springframework.transaction.annotation.PlatformTransactionManager ( javax.sql.DataSource javax.sql.DataSource ) { return new DataSourceTransactionManager ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.FooRepository ( ) { org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.JdbcFooRepository org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.JdbcFooRepository = new org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.JdbcFooRepository ( ) ; org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.JdbcFooRepository . void ( javax.sql.DataSource ( ) ) ; return org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests.JdbcFooRepository ; }  <METHOD_END>
<METHOD_START> @ Bean javax.sql.DataSource javax.sql.DataSource ( ) { return new EmbeddedDatabaseBuilder ( ) . setType ( EmbeddedDatabaseType . HSQL ) . build ( ) ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( )  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return java.util.Collections . java.util.List<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return java.util.Collections . java.util.List<java.lang.Object> ( ) ; }  <METHOD_END>
