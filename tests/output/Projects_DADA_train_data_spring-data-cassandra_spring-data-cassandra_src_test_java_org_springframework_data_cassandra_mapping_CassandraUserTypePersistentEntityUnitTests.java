<METHOD_START> @ Test public void void ( ) { CassandraUserTypePersistentEntity < org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt > org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt> = org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt> ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt> . isUserDefinedType ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraUserTypePersistentEntity < org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt > org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt> = org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt> ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt> . getTableName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING ) ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.MappedUdt> . getTableName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraUserTypePersistentEntity < org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithName > org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithName> = org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithName> ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithName .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithName> . getTableName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING ) ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithName> . getTableName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraUserTypePersistentEntity < org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithForceQuote > org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithForceQuote> = org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithForceQuote> ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithForceQuote .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithForceQuote> . getTableName ( ) ) . isNotEqualTo ( CqlIdentifier . cqlId ( STRING , true ) ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.WithForceQuote> . getTableName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraUserTypePersistentEntity < org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.TypeWithComposedAnnotation > org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.TypeWithComposedAnnotation> = org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.TypeWithComposedAnnotation> ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.TypeWithComposedAnnotation .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntityUnitTests.TypeWithComposedAnnotation> . getTableName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING , true ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<T> < T > org.springframework.data.cassandra.mapping.CassandraUserTypePersistentEntity<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new CassandraUserTypePersistentEntity <> ( ClassTypeInformation . from ( java.lang.Class<T> ) , org.springframework.data.cassandra.mapping.CassandraMappingContext , null , org.springframework.data.cassandra.mapping.UserTypeResolver ) ; }  <METHOD_END>
