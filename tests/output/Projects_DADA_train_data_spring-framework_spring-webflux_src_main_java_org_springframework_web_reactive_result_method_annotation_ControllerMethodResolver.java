<METHOD_START> void ( ArgumentResolverConfigurer org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , ServerCodecConfigurer org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , ConfigurableApplicationContext org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) { Assert . notNull ( org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , STRING ) ; Assert . notNull ( org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer , STRING ) ; Assert . notNull ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , STRING ) ; Assert . notNull ( org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext , STRING ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar.Builder ( org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) . basic ( ) ; void ( org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.SyncHandlerMethodArgumentResolver> = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . java.util.List<org.springframework.web.reactive.result.method.annotation.SyncHandlerMethodArgumentResolver> ( ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar.Builder ( org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) . modelAttributeSupport ( ) ; void ( org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ( ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar.Builder ( org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) . fullSupport ( org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer ) ; void ( org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ( ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar.Builder ( org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) . basic ( ) ; void ( org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> = org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ( ) ; void ( org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , ConfigurableApplicationContext org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) { ConfigurableListableBeanFactory org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory = org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext . getBeanFactory ( ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new RequestParamMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , false ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new RequestParamMapMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new PathVariableMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new PathVariableMapMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> -> new RequestBodyArgumentResolver ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( ( ) new ModelAttributeMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , false ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new RequestHeaderMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new RequestHeaderMapMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new CookieValueMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new ExpressionValueMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new SessionAttributeMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new RequestAttributeMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> -> new HttpEntityArgumentResolver ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new ModelArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( ( ) new ErrorsMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new ServerWebExchangeArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new PrincipalArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new WebSessionArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( new RequestParamMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ConfigurableListableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , true ) ) ; org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar . void ( ( ) new ModelAttributeMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , true ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ) { if ( org.springframework.web.reactive.result.method.annotation.ApplicationContext == null ) { return; } if ( org.springframework.web.reactive.result.method.annotation.Log . isInfoEnabled ( ) ) { org.springframework.web.reactive.result.method.annotation.Log . info ( STRING + org.springframework.web.reactive.result.method.annotation.ApplicationContext ) ; } java.util.List<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean> < ControllerAdviceBean > java.util.List<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean> = ControllerAdviceBean . findAnnotatedBeans ( org.springframework.web.reactive.result.method.annotation.ApplicationContext ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean> ) ; for ( ControllerAdviceBean org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean : java.util.List<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean . getBeanType ( ) ; java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = selectMethods ( java.lang.Class<> , ReflectionUtils.MethodFilter ) ; if ( ! java.util.Set<java.lang.reflect.Method> . boolean ( ) ) { this . java.util.Map<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . put ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean , java.util.Set<java.lang.reflect.Method> ) ; if ( org.springframework.web.reactive.result.method.annotation.Log . isInfoEnabled ( ) ) { org.springframework.web.reactive.result.method.annotation.Log . info ( STRING + org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean ) ; } } java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = selectMethods ( java.lang.Class<> , ReflectionUtils.MethodFilter ) ; if ( ! java.util.Set<java.lang.reflect.Method> . boolean ( ) ) { this . java.util.Map<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . put ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean , java.util.Set<java.lang.reflect.Method> ) ; if ( org.springframework.web.reactive.result.method.annotation.Log . isInfoEnabled ( ) ) { org.springframework.web.reactive.result.method.annotation.Log . info ( STRING + org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean ) ; } } ExceptionHandlerMethodResolver org.springframework.web.reactive.result.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( java.lang.Class<> ) ; if ( org.springframework.web.reactive.result.method.annotation.ExceptionHandlerMethodResolver . hasExceptionMappings ( ) ) { this . java.util.Map<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean,org.springframework.web.reactive.result.method.annotation.ExceptionHandlerMethodResolver> . put ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean , org.springframework.web.reactive.result.method.annotation.ExceptionHandlerMethodResolver ) ; if ( org.springframework.web.reactive.result.method.annotation.Log . isInfoEnabled ( ) ) { org.springframework.web.reactive.result.method.annotation.Log . info ( STRING + org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean ) ; } } } }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ( HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod ) { InvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod = new InvocableHandlerMethod ( org.springframework.web.reactive.result.method.annotation.HandlerMethod ) ; org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod . setArgumentResolvers ( this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ) ; return org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> < SyncInvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> ( HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod ) { java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> < SyncInvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> = new java.util.ArrayList<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> <> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.HandlerMethod . getBeanType ( ) ; this . java.util.Map<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . entrySet ( ) . forEach ( entry -> { if ( entry . getKey ( ) . isApplicableToBeanType ( handlerType ) ) { Object bean = entry . getKey ( ) . resolveBean ( ) ; entry . getValue ( ) . forEach ( method -> result . add ( getInitBinderMethod ( bean , method ) ) ) ; } } ) ; this . java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.reflect.Method>> . java.util.Set<java.lang.reflect.Method> ( java.lang.Class<> , java.lang.Class<?> -> selectMethods ( java.lang.Class<> , ReflectionUtils.MethodFilter ) ) . void ( java.lang.reflect.Method -> { java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.HandlerMethod . getBean ( ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> . add ( org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ) ; } ) ; return java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { SyncInvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod = new SyncInvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod . setArgumentResolvers ( this . java.util.List<org.springframework.web.reactive.result.method.annotation.SyncHandlerMethodArgumentResolver> ) ; return org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> ( HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod ) { java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> = new java.util.ArrayList<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> <> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.HandlerMethod . getBeanType ( ) ; this . java.util.Map<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean,java.util.Set<java.lang.reflect.Method>> . entrySet ( ) . forEach ( entry -> { if ( entry . getKey ( ) . isApplicableToBeanType ( handlerType ) ) { Object bean = entry . getKey ( ) . resolveBean ( ) ; entry . getValue ( ) . forEach ( method -> result . add ( createAttributeMethod ( bean , method ) ) ) ; } } ) ; this . java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.reflect.Method>> . java.util.Set<java.lang.reflect.Method> ( java.lang.Class<> , java.lang.Class<?> -> selectMethods ( java.lang.Class<> , ReflectionUtils.MethodFilter ) ) . void ( java.lang.reflect.Method -> { java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.HandlerMethod . getBean ( ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> . add ( org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ) ; } ) ; return java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { InvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod . setArgumentResolvers ( this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ) ; return org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.Optional<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> ( java.lang.Throwable java.lang.Throwable , HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.HandlerMethod . getBeanType ( ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.HandlerMethod . getBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = this . java.util.Map<java.lang.Class<?>,org.springframework.web.reactive.result.method.annotation.ExceptionHandlerMethodResolver> . computeIfAbsent ( java.lang.Class<> , ExceptionHandlerMethodResolver ::new ) . resolveMethodByThrowable ( java.lang.Throwable ) ; if ( java.lang.reflect.Method == null ) { for ( ControllerAdviceBean org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean : this . java.util.Map<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean,org.springframework.web.reactive.result.method.annotation.ExceptionHandlerMethodResolver> . keySet ( ) ) { if ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean . isApplicableToBeanType ( java.lang.Class<> ) ) { java.lang.Object = org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean . resolveBean ( ) ; java.lang.reflect.Method = this . java.util.Map<org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean,org.springframework.web.reactive.result.method.annotation.ExceptionHandlerMethodResolver> . get ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceBean ) . resolveMethodByThrowable ( java.lang.Throwable ) ; if ( java.lang.reflect.Method != null ) { break; } } } } if ( java.lang.reflect.Method == null ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> ( ) ; } InvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod . setArgumentResolvers ( this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ) ; return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ) ; }  <METHOD_END>
<METHOD_START> private void ( ArgumentResolverConfigurer org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , ServerCodecConfigurer org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer , boolean boolean ) { this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> = org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer . getCustomResolvers ( ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> = org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer != null ? org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer . getReaders ( ) : null ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( HandlerMethodArgumentResolver org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver ) { this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> . add ( org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.function.Function<java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>>,org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> < java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> < HttpMessageReader < ? > > , HandlerMethodArgumentResolver > java.util.function.Function<java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>>,org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ) { if ( this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> != null ) { void ( java.util.function.Function<java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>>,org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> . apply ( this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.function.Supplier<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.function.Supplier<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ) { if ( this . boolean ) { void ( java.util.function.Supplier<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> . get ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> . forEach ( this :: void ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.method.annotation.SyncHandlerMethodArgumentResolver> < SyncHandlerMethodArgumentResolver > java.util.List<org.springframework.web.reactive.result.method.annotation.SyncHandlerMethodArgumentResolver> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.annotation.HandlerMethodArgumentResolver> . stream ( ) . filter ( resolver -> resolver instanceof SyncHandlerMethodArgumentResolver ) . map ( resolver -> ( SyncHandlerMethodArgumentResolver ) resolver ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar.Builder org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar.Builder ( ArgumentResolverConfigurer org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) { return new org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar.Builder ( org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) ; }  <METHOD_END>
<METHOD_START> public void ( ArgumentResolverConfigurer org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) { this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer = org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar ( ServerCodecConfigurer org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer ) { return new org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar ( this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer , true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar ( ) { return new org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar ( this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , null , true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar ( ) { return new org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.ArgumentResolverRegistrar ( this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , null , false ) ; }  <METHOD_END>
