<METHOD_START> public void ( ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver ) { Assert . notNull ( org.springframework.integration.mail.ImapMailReceiver , STRING ) ; this . org.springframework.integration.mail.ImapMailReceiver = org.springframework.integration.mail.ImapMailReceiver ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionSynchronizationFactory org.springframework.integration.mail.TransactionSynchronizationFactory ) { this . org.springframework.integration.mail.TransactionSynchronizationFactory = org.springframework.integration.mail.TransactionSynchronizationFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.mail.Advice> < Advice > java.util.List<org.springframework.integration.mail.Advice> ) { this . java.util.List<org.springframework.integration.mail.Advice> = java.util.List<org.springframework.integration.mail.Advice> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { Assert . notNull ( java.util.concurrent.Executor , STRING ) ; this . java.util.concurrent.Executor = java.util.concurrent.Executor ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.mail.ApplicationEventPublisher ) { this . org.springframework.integration.mail.ApplicationEventPublisher = org.springframework.integration.mail.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { final TaskScheduler org.springframework.integration.mail.TaskScheduler = this . getTaskScheduler ( ) ; Assert . notNull ( org.springframework.integration.mail.TaskScheduler , STRING ) ; if ( this . java.util.concurrent.Executor == null ) { this . java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; } this . java.util.concurrent.ScheduledFuture<?> = org.springframework.integration.mail.TaskScheduler . schedule ( new org.springframework.integration.mail.ImapIdleChannelAdapter.ReceivingTask ( ) , this . org.springframework.integration.mail.ImapIdleChannelAdapter.ExceptionAwarePeriodicTrigger ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; try { this . org.springframework.integration.mail.ImapMailReceiver . destroy ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + this . org.springframework.integration.mail.ImapMailReceiver , java.lang.Exception ) ; } if ( ! this . boolean && this . java.util.concurrent.Executor != null ) { ( ( java.util.concurrent.ExecutorService ) this . java.util.concurrent.Executor ) . void ( ) ; this . java.util.concurrent.Executor = null ; } }  <METHOD_END>
<METHOD_START> private java.lang.Runnable java.lang.Runnable ( final java.lang.Object java.lang.Object ) { java.lang.Runnable java.lang.Runnable = ( ) { @ SuppressWarnings ( STRING ) org . springframework . org.springframework.messaging . org.springframework.messaging < ? > message = java.lang.Object instanceof Message ? org.springframework.integration.mail.ImapIdleChannelAdapter .this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . build ( ) : ( org . springframework . org.springframework.messaging . org.springframework.messaging < java.lang.Object > ) java.lang.Object ; if ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) { if ( org.springframework.integration.mail.ImapIdleChannelAdapter .this . org.springframework.integration.mail.TransactionSynchronizationFactory != null ) { TransactionSynchronization org.springframework.integration.mail.TransactionSynchronization = org.springframework.integration.mail.ImapIdleChannelAdapter .this . org.springframework.integration.mail.TransactionSynchronizationFactory . create ( org.springframework.integration.mail.ImapIdleChannelAdapter .this ) ; TransactionSynchronizationManager . registerSynchronization ( org.springframework.integration.mail.TransactionSynchronization ) ; if ( org.springframework.integration.mail.TransactionSynchronization instanceof IntegrationResourceHolderSynchronization ) { IntegrationResourceHolder org.springframework.integration.mail.IntegrationResourceHolder = ( ( IntegrationResourceHolderSynchronization ) org.springframework.integration.mail.TransactionSynchronization ) . getResourceHolder ( ) ; org.springframework.integration.mail.IntegrationResourceHolder . setMessage ( message ) ; } } } sendMessage ( message ) ; } ; if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.mail.Advice> ) ) { ProxyFactory org.springframework.integration.mail.ProxyFactory = new ProxyFactory ( java.lang.Runnable ) ; if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.mail.Advice> ) ) { for ( Advice org.springframework.integration.mail.Advice : this . java.util.List<org.springframework.integration.mail.Advice> ) { org.springframework.integration.mail.ProxyFactory . addAdvice ( org.springframework.integration.mail.Advice ) ; } } java.lang.Runnable = ( java.lang.Runnable ) org.springframework.integration.mail.ProxyFactory . getProxy ( this . java.lang.ClassLoader ) ; } return java.lang.Runnable ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Exception java.lang.Exception ) { if ( this . org.springframework.integration.mail.ApplicationEventPublisher != null ) { this . org.springframework.integration.mail.ApplicationEventPublisher . publishEvent ( new org.springframework.integration.mail.ImapIdleChannelAdapter.ImapIdleExceptionEvent ( java.lang.Exception ) ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { org.springframework.integration.mail.ImapIdleChannelAdapter .this . org.springframework.integration.mail.ImapIdleChannelAdapter.IdleTask . void ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) { logger . warn ( STRING + org.springframework.integration.mail.ImapIdleChannelAdapter .this . long + STRING , java.lang.Exception ) ; org.springframework.integration.mail.ImapIdleChannelAdapter .this . org.springframework.integration.mail.ImapIdleChannelAdapter.ExceptionAwarePeriodicTrigger . void ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter .this . void ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { final TaskScheduler org.springframework.integration.mail.TaskScheduler = getTaskScheduler ( ) ; Assert . notNull ( org.springframework.integration.mail.TaskScheduler , STRING ) ; Assert . state ( org.springframework.integration.mail.ImapIdleChannelAdapter .this . java.util.concurrent.Executor != null , STRING ) ; try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } org.springframework.integration.mail.ImapIdleChannelAdapter .this . org.springframework.integration.mail.ImapMailReceiver . waitForNewMessages ( ) ; if ( org.springframework.integration.mail.ImapIdleChannelAdapter .this . org.springframework.integration.mail.ImapMailReceiver . getFolder ( ) . isOpen ( ) ) { java.lang.Object [] java.lang.Object[] = org.springframework.integration.mail.ImapIdleChannelAdapter .this . org.springframework.integration.mail.ImapMailReceiver . receive ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Object[] . int + STRING ) ; } for ( final java.lang.Object java.lang.Object : java.lang.Object[] ) { java.lang.Runnable java.lang.Runnable = java.lang.Runnable ( java.lang.Object ) ; org.springframework.integration.mail.ImapIdleChannelAdapter .this . java.util.concurrent.Executor . void ( java.lang.Runnable ) ; } } } catch ( MessagingException org.springframework.integration.mail.MessagingException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING , org.springframework.integration.mail.MessagingException ) ; } if ( org.springframework.integration.mail.ImapIdleChannelAdapter .this . boolean ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.integration.mail.MessagingException ) ; } else { throw new org . springframework . org.springframework.messaging . org.springframework.messaging ( STRING , org.springframework.integration.mail.MessagingException ) ; } } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( TriggerContext org.springframework.integration.mail.TriggerContext ) { if ( this . boolean ) { this . boolean = false ; return new java.util.Date ( java.lang.System . long ( ) + org.springframework.integration.mail.ImapIdleChannelAdapter .this . long ) ; } else { return new java.util.Date ( java.lang.System . long ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Exception java.lang.Exception ) { super( org.springframework.integration.mail.ImapIdleChannelAdapter .this , java.lang.Exception ); }  <METHOD_END>
