<METHOD_START> public void ( RepositoryConfigurationExtension org.springframework.data.repository.config.RepositoryConfigurationExtension ) { Assert . notNull ( org.springframework.data.repository.config.RepositoryConfigurationExtension , STRING ) ; this . org.springframework.data.repository.config.RepositoryConfigurationExtension = org.springframework.data.repository.config.RepositoryConfigurationExtension ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.config.BeanDefinition org.springframework.data.repository.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.repository.config.ParserContext ) { XmlReaderContext org.springframework.data.repository.config.XmlReaderContext = org.springframework.data.repository.config.ParserContext . getReaderContext ( ) ; try { Environment org.springframework.data.repository.config.Environment = org.springframework.data.repository.config.XmlReaderContext . getEnvironment ( ) ; ResourceLoader org.springframework.data.repository.config.ResourceLoader = org.springframework.data.repository.config.XmlReaderContext . getResourceLoader ( ) ; BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry = org.springframework.data.repository.config.ParserContext . getRegistry ( ) ; XmlRepositoryConfigurationSource org.springframework.data.repository.config.XmlRepositoryConfigurationSource = new XmlRepositoryConfigurationSource ( org.w3c.dom.Element , org.springframework.data.repository.config.ParserContext , org.springframework.data.repository.config.Environment ) ; RepositoryConfigurationDelegate org.springframework.data.repository.config.RepositoryConfigurationDelegate = new RepositoryConfigurationDelegate ( org.springframework.data.repository.config.XmlRepositoryConfigurationSource , org.springframework.data.repository.config.ResourceLoader , org.springframework.data.repository.config.Environment ) ; RepositoryConfigurationUtils . exposeRegistration ( org.springframework.data.repository.config.RepositoryConfigurationExtension , org.springframework.data.repository.config.BeanDefinitionRegistry , org.springframework.data.repository.config.XmlRepositoryConfigurationSource ) ; for ( BeanComponentDefinition org.springframework.data.repository.config.BeanComponentDefinition : org.springframework.data.repository.config.RepositoryConfigurationDelegate . registerRepositoriesIn ( org.springframework.data.repository.config.BeanDefinitionRegistry , org.springframework.data.repository.config.RepositoryConfigurationExtension ) ) { org.springframework.data.repository.config.XmlReaderContext . fireComponentRegistered ( org.springframework.data.repository.config.BeanComponentDefinition ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( java.lang.RuntimeException , org.w3c.dom.Element , org.springframework.data.repository.config.XmlReaderContext ) ; } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Exception java.lang.Exception , org.w3c.dom.Element org.w3c.dom.Element , ReaderContext org.springframework.data.repository.config.ReaderContext ) { org.springframework.data.repository.config.ReaderContext . error ( java.lang.Exception . java.lang.String ( ) , org.springframework.data.repository.config.ReaderContext . extractSource ( org.w3c.dom.Element ) , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> protected static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , GENERATED_BEAN_NAME_SEPARATOR ) ; return org.springframework.data.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ; }  <METHOD_END>
