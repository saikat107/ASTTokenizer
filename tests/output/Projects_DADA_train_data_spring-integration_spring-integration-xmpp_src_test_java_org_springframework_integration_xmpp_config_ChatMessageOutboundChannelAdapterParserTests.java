<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; QueueChannel org.springframework.integration.xmpp.config.QueueChannel = ( QueueChannel ) TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( STRING , org.springframework.integration.xmpp.config.QueueChannel . getComponentName ( ) ) ; assertTrue ( java.lang.Object instanceof PollingConsumer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof SubscribableChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.xmpp.config.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) , STRING , MessageHandler .class ) ; org.springframework.integration.xmpp.config.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; DefaultXmppHeaderMapper org.springframework.integration.xmpp.config.DefaultXmppHeaderMapper = TestUtils . getPropertyValue ( java.lang.Object , STRING , DefaultXmppHeaderMapper .class ) ; AbstractHeaderMapper . AbstractHeaderMapper AbstractHeaderMapper.HeaderMatcher = TestUtils . getPropertyValue ( org.springframework.integration.xmpp.config.DefaultXmppHeaderMapper , STRING , AbstractHeaderMapper . AbstractHeaderMapper .class ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; MessageHandler org.springframework.integration.xmpp.config.MessageHandler = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING , MessageHandler .class ) ; assertSame ( this . org.springframework.integration.xmpp.config.ExtensionElementProvider<> , TestUtils . getPropertyValue ( org.springframework.integration.xmpp.config.MessageHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof PollingConsumer ) ; assertEquals ( org.springframework.integration.xmpp.config.XmppHeaderMapper , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; MessageChannel org.springframework.integration.xmpp.config.MessageChannel = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.xmpp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( XmppHeaders . TO , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; XMPPConnection org.springframework.integration.xmpp.config.XMPPConnection = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING , XMPPConnection .class ) ; doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . jivesoftware . smack . packet . Message xmppMessage = ( org . jivesoftware . smack . packet . Message ) args [ NUMBER ] ; assertEquals ( STRING , xmppMessage . getTo ( ) ) ; assertEquals ( STRING , JivePropertiesManager . getProperty ( xmppMessage , STRING ) ) ; return null ; } ) . when ( org.springframework.integration.xmpp.config.XMPPConnection ) . sendStanza ( Mockito . any ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware .class ) ) ; org.springframework.integration.xmpp.config.MessageChannel . send ( org.springframework.integration.xmpp.config.Message<> ) ; verify ( org.springframework.integration.xmpp.config.XMPPConnection , times ( NUMBER ) ) . sendStanza ( Mockito . any ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware .class ) ) ; Mockito . reset ( org.springframework.integration.xmpp.config.XMPPConnection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageChannel org.springframework.integration.xmpp.config.MessageChannel = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.xmpp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( XmppHeaders . TO , STRING ) . build ( ) ; XMPPConnection org.springframework.integration.xmpp.config.XMPPConnection = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING , XMPPConnection .class ) ; doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . jivesoftware . smack . packet . Message xmppMessage = ( org . jivesoftware . smack . packet . Message ) args [ NUMBER ] ; assertEquals ( STRING , xmppMessage . getTo ( ) ) ; assertEquals ( STRING , xmppMessage . getBody ( ) ) ; return null ; } ) . when ( org.springframework.integration.xmpp.config.XMPPConnection ) . sendStanza ( Mockito . any ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware .class ) ) ; org.springframework.integration.xmpp.config.MessageChannel . send ( org.springframework.integration.xmpp.config.Message<> ) ; verify ( org.springframework.integration.xmpp.config.XMPPConnection , times ( NUMBER ) ) . sendStanza ( Mockito . any ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware .class ) ) ; Mockito . reset ( org.springframework.integration.xmpp.config.XMPPConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.xmpp.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.xmpp.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
