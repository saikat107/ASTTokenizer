<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.rest.core.support.EntityLinks . linkToSingleResource ( ( java.lang.Class<?> < ? > ) any ( ) , any ( ) ) ) . then ( invocation -> { Class < ? > type = invocation . getArgument ( NUMBER ) ; Serializable id = invocation . getArgument ( NUMBER ) ; return new Link ( STRING . concat ( type . getName ( ) ) . concat ( STRING ) . concat ( id . toString ( ) ) ) ; } ) ; KeyValueMappingContext < ? , ? > org.springframework.data.rest.core.support.KeyValueMappingContext<?,?> = new KeyValueMappingContext <> ( ) ; org.springframework.data.rest.core.support.KeyValueMappingContext<,> . getPersistentEntity ( Profile .class ) ; org.springframework.data.rest.core.support.KeyValueMappingContext<,> . afterPropertiesSet ( ) ; this . org.springframework.data.rest.core.support.PersistentEntities = new PersistentEntities ( java.util.Arrays . java.util.List ( org.springframework.data.rest.core.support.KeyValueMappingContext<,> ) ) ; this . java.util.List<org.springframework.data.rest.core.support.EntityLookup<?>> = java.util.Collections . java.util.List<java.lang.Object> ( ) ; this . org.springframework.data.rest.core.support.SelfLinkProvider = new DefaultSelfLinkProvider ( org.springframework.data.rest.core.support.PersistentEntities , org.springframework.data.rest.core.support.EntityLinks , java.util.List<org.springframework.data.rest.core.support.EntityLookup<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultSelfLinkProvider ( null , org.springframework.data.rest.core.support.EntityLinks , java.util.List<org.springframework.data.rest.core.support.EntityLookup<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultSelfLinkProvider ( org.springframework.data.rest.core.support.PersistentEntities , null , java.util.List<org.springframework.data.rest.core.support.EntityLookup<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultSelfLinkProvider ( org.springframework.data.rest.core.support.PersistentEntities , org.springframework.data.rest.core.support.EntityLinks , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Profile org.springframework.data.rest.core.support.Profile = new Profile ( STRING , STRING ) ; Link org.springframework.data.rest.core.support.Link = org.springframework.data.rest.core.support.SelfLinkProvider . createSelfLinkFor ( org.springframework.data.rest.core.support.Profile ) ; assertThat ( org.springframework.data.rest.core.support.Link . getHref ( ) , Matchers . endsWith ( org.springframework.data.rest.core.support.Profile . getId ( ) . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EntityLookup < java.lang.Object > org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> = mock ( EntityLookup .class ) ; when ( org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> . supports ( Profile .class ) ) . thenReturn ( true ) ; when ( org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> . getResourceIdentifier ( any ( Profile .class ) ) ) . thenReturn ( STRING ) ; this . org.springframework.data.rest.core.support.SelfLinkProvider = new DefaultSelfLinkProvider ( org.springframework.data.rest.core.support.PersistentEntities , org.springframework.data.rest.core.support.EntityLinks , java.util.Arrays . java.util.List ( org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> ) ) ; Link org.springframework.data.rest.core.support.Link = org.springframework.data.rest.core.support.SelfLinkProvider . createSelfLinkFor ( new Profile ( STRING , STRING ) ) ; assertThat ( org.springframework.data.rest.core.support.Link . getHref ( ) , Matchers . endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.core.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.rest.core.support.ExpectedException . expectMessage ( java.lang.Object .class . java.lang.String ( ) ) ; org.springframework.data.rest.core.support.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.rest.core.support.SelfLinkProvider . createSelfLinkFor ( new java.lang.Object ( ) ) ; }  <METHOD_END>
