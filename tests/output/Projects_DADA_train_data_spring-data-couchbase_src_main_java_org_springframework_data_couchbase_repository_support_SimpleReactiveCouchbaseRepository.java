<METHOD_START> public void ( final CouchbaseEntityInformation < T , java.lang.String > org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> , final RxJavaCouchbaseOperations org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations ) ; Assert . notNull ( org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> ) ; this . org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> = org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> ; this . org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations = org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations ; }  <METHOD_END>
<METHOD_START> public void void ( final ViewMetadataProvider org.springframework.data.couchbase.repository.support.ViewMetadataProvider ) { this . org.springframework.data.couchbase.repository.support.ViewMetadataProvider = org.springframework.data.couchbase.repository.support.ViewMetadataProvider ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.repository.support.Mono org.springframework.data.couchbase.repository.support.Mono ( Single org.springframework.data.couchbase.repository.support.Single ) { return ReactiveWrapperConverters . toWrapper ( org.springframework.data.couchbase.repository.support.Single , Mono .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.repository.support.Flux org.springframework.data.couchbase.repository.support.Flux ( Observable org.springframework.data.couchbase.repository.support.Observable ) { return ReactiveWrapperConverters . toWrapper ( org.springframework.data.couchbase.repository.support.Observable , Flux .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < S extends T > org.springframework.data.couchbase.repository.support.Mono<S> < S > org.springframework.data.couchbase.repository.support.Mono<S> ( S S ) { Assert . notNull ( S , STRING ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . save ( S ) . toSingle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < S extends T > org.springframework.data.couchbase.repository.support.Flux<S> < S > org.springframework.data.couchbase.repository.support.Flux<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { Assert . notNull ( java.lang.Iterable<S> , STRING ) ; return org.springframework.data.couchbase.repository.support.Flux ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . save ( java.lang.Iterable<S> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < S extends T > org.springframework.data.couchbase.repository.support.Flux<S> < S > org.springframework.data.couchbase.repository.support.Flux<S> ( Publisher < S > org.springframework.data.couchbase.repository.support.Publisher<S> ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.Publisher<S> , STRING ) ; return Flux . from ( org.springframework.data.couchbase.repository.support.Publisher<S> ) . flatMap ( object -> save ( object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<T> < T > org.springframework.data.couchbase.repository.support.Mono<T> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . findById ( ID . java.lang.String ( ) , org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> . getJavaType ( ) ) . toSingle ( ) ) . otherwise ( throwable -> { if( throwable instanceof NullPointerException ) { return Mono . empty ( ) ; } return Mono . just ( throwable ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<T> < T > org.springframework.data.couchbase.repository.support.Mono<T> ( Mono < ID > org.springframework.data.couchbase.repository.support.Mono<ID> ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.Mono<ID> , STRING ) ; return org.springframework.data.couchbase.repository.support.Mono<ID> . then ( id -> findOne ( id ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.couchbase.repository.support.Mono<java.lang.Boolean> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . exists ( ID . java.lang.String ( ) ) . toSingle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.couchbase.repository.support.Mono<java.lang.Boolean> ( Mono < ID > org.springframework.data.couchbase.repository.support.Mono<ID> ) { return org.springframework.data.couchbase.repository.support.Mono<ID> . then ( id -> exists ( id ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Flux<T> < T > org.springframework.data.couchbase.repository.support.Flux<T> ( ) { final org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView = org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView ( ) ; ViewQuery org.springframework.data.couchbase.repository.support.ViewQuery = ViewQuery . from ( org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) , org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) ) ; org.springframework.data.couchbase.repository.support.ViewQuery . reduce ( false ) ; org.springframework.data.couchbase.repository.support.ViewQuery . stale ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getDefaultConsistency ( ) . viewConsistency ( ) ) ; return org.springframework.data.couchbase.repository.support.Flux ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . findByView ( org.springframework.data.couchbase.repository.support.ViewQuery , org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> . getJavaType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Flux<T> < T > org.springframework.data.couchbase.repository.support.Flux<T> ( final java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> ) { final org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView = org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView ( ) ; ViewQuery org.springframework.data.couchbase.repository.support.ViewQuery = ViewQuery . from ( org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) , org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) ) ; org.springframework.data.couchbase.repository.support.ViewQuery . reduce ( false ) ; org.springframework.data.couchbase.repository.support.ViewQuery . stale ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getDefaultConsistency ( ) . viewConsistency ( ) ) ; JsonArray org.springframework.data.couchbase.repository.support.JsonArray = JsonArray . create ( ) ; for ( ID ID : java.lang.Iterable<ID> ) { org.springframework.data.couchbase.repository.support.JsonArray . add ( ID ) ; } org.springframework.data.couchbase.repository.support.ViewQuery . keys ( org.springframework.data.couchbase.repository.support.JsonArray ) ; return org.springframework.data.couchbase.repository.support.Flux ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . findByView ( org.springframework.data.couchbase.repository.support.ViewQuery , org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> . getJavaType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Flux<T> < T > org.springframework.data.couchbase.repository.support.Flux<T> ( Publisher < ID > org.springframework.data.couchbase.repository.support.Publisher<ID> ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.Publisher<ID> , STRING ) ; return Flux . from ( org.springframework.data.couchbase.repository.support.Publisher<ID> ) . flatMap ( entity -> findOne ( entity ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . remove ( ID . java.lang.String ( ) ) . map ( res -> Observable .< Void > empty ( ) ) . toSingle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> ( T T ) { Assert . notNull ( T , STRING ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . remove ( T ) . map ( res -> Observable .< Void > empty ( ) ) . toSingle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { Assert . notNull ( java.lang.Iterable<> , STRING ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . remove ( java.lang.Iterable<> ) . last ( ) . map ( res -> Observable .< Void > empty ( ) ) . toSingle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> ( Publisher < ? extends T > org.springframework.data.couchbase.repository.support.Publisher<? extends T> ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.Publisher<> , STRING ) ; return Flux . from ( org.springframework.data.couchbase.repository.support.Publisher<> ) . flatMap ( entity -> delete ( entity ) ) . single ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Long> < java.lang.Long > org.springframework.data.couchbase.repository.support.Mono<java.lang.Long> ( ) { final org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView = org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView ( ) ; ViewQuery org.springframework.data.couchbase.repository.support.ViewQuery = ViewQuery . from ( org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) , org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) ) ; org.springframework.data.couchbase.repository.support.ViewQuery . reduce ( true ) ; org.springframework.data.couchbase.repository.support.ViewQuery . stale ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getDefaultConsistency ( ) . viewConsistency ( ) ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . queryView ( org.springframework.data.couchbase.repository.support.ViewQuery ) . flatMap ( AsyncViewResult :: rows ) . map ( asyncViewRow -> Long . valueOf ( asyncViewRow . value ( ) . toString ( ) ) ) . toSingle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Mono<java.lang.Void> ( ) { final org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView = org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView ( ) ; ViewQuery org.springframework.data.couchbase.repository.support.ViewQuery = ViewQuery . from ( org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) , org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView . java.lang.String ( ) ) ; org.springframework.data.couchbase.repository.support.ViewQuery . reduce ( false ) ; org.springframework.data.couchbase.repository.support.ViewQuery . stale ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getDefaultConsistency ( ) . viewConsistency ( ) ) ; return org.springframework.data.couchbase.repository.support.Mono ( org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . queryView ( org.springframework.data.couchbase.repository.support.ViewQuery ) . map ( AsyncViewResult :: rows ) . flatMap ( row -> { AsyncViewRow asyncViewRow = ( AsyncViewRow ) row ; return operations . remove ( asyncViewRow . id ( ) ) . onErrorResumeNext ( throwable -> { if ( throwable instanceof DocumentDoesNotExistException ) { return Observable . empty ( ) ; } return Observable . error ( throwable ) ; } ) ; } ) . toList ( ) . map ( list -> Observable .< Void > empty ( ) ) . toSingle ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> < T , java.lang.String > org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> ( ) { return org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView ( ) { java.lang.String java.lang.String = StringUtils . uncapitalize ( org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> . getJavaType ( ) . getSimpleName ( ) ) ; java.lang.String java.lang.String = STRING ; final View org.springframework.data.couchbase.repository.support.View = org.springframework.data.couchbase.repository.support.ViewMetadataProvider . getView ( ) ; if ( org.springframework.data.couchbase.repository.support.View != null ) { java.lang.String = org.springframework.data.couchbase.repository.support.View . designDocument ( ) ; java.lang.String = org.springframework.data.couchbase.repository.support.View . viewName ( ) ; } return new org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository<T,ID>.ResolvedView ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations ( ) { return org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations ; }  <METHOD_END>
<METHOD_START> public void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
