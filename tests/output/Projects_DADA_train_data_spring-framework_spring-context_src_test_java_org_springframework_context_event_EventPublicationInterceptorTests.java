<METHOD_START> @ Before public void void ( ) { this . org.springframework.context.event.ApplicationEventPublisher = mock ( ApplicationEventPublisher .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { EventPublicationInterceptor org.springframework.context.event.EventPublicationInterceptor = new EventPublicationInterceptor ( ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventPublisher ( this . org.springframework.context.event.ApplicationEventPublisher ) ; org.springframework.context.event.EventPublicationInterceptor . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { EventPublicationInterceptor org.springframework.context.event.EventPublicationInterceptor = new EventPublicationInterceptor ( ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventPublisher ( this . org.springframework.context.event.ApplicationEventPublisher ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventClass ( java.lang.Class<? extends org.springframework.context.event.EventPublicationInterceptorTests> ( ) ) ; org.springframework.context.event.EventPublicationInterceptor . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { EventPublicationInterceptor org.springframework.context.event.EventPublicationInterceptor = new EventPublicationInterceptor ( ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventPublisher ( this . org.springframework.context.event.ApplicationEventPublisher ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventClass ( ApplicationEvent .class ) ; org.springframework.context.event.EventPublicationInterceptor . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { EventPublicationInterceptor org.springframework.context.event.EventPublicationInterceptor = new EventPublicationInterceptor ( ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventPublisher ( this . org.springframework.context.event.ApplicationEventPublisher ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventClass ( org.springframework.context.event.EventPublicationInterceptorTests.TestEventWithNoValidOneArgObjectCtor .class ) ; org.springframework.context.event.EventPublicationInterceptor . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.context.event.TestBean = new TestBean ( ) ; final TestListener org.springframework.context.event.TestListener = new TestListener ( ) ; class TestContext extends StaticApplicationContext { @ java.lang.Override protected void void ( ) org.springframework.context.event.BeansException { addApplicationListener ( org.springframework.context.event.TestListener ) ; } } StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new TestContext ( ) ; MutablePropertyValues org.springframework.context.event.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.context.event.MutablePropertyValues . add ( STRING , TestEvent .class . java.lang.String ( ) ) ; org.springframework.context.event.StaticApplicationContext . registerSingleton ( STRING , EventPublicationInterceptor .class , org.springframework.context.event.MutablePropertyValues ) ; org.springframework.context.event.StaticApplicationContext . registerSingleton ( STRING , org.springframework.context.event.EventPublicationInterceptorTests.FactoryBeanTestListener .class ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; EventPublicationInterceptor org.springframework.context.event.EventPublicationInterceptor = ( EventPublicationInterceptor ) org.springframework.context.event.StaticApplicationContext . getBean ( STRING ) ; ProxyFactory org.springframework.context.event.ProxyFactory = new ProxyFactory ( org.springframework.context.event.TestBean ) ; org.springframework.context.event.ProxyFactory . addAdvice ( NUMBER , org.springframework.context.event.EventPublicationInterceptor ) ; ITestBean org.springframework.context.event.ITestBean = ( ITestBean ) org.springframework.context.event.ProxyFactory . getProxy ( ) ; org.springframework.context.event.ITestBean . getAge ( ) ; assertTrue ( STRING , org.springframework.context.event.TestListener . getEventCount ( ) == NUMBER ) ; TestListener org.springframework.context.event.TestListener = ( TestListener ) org.springframework.context.event.StaticApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.context.event.TestListener . getEventCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.context.event.BeansException { addApplicationListener ( org.springframework.context.event.TestListener ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<java.lang.String> < java.lang.String > java.lang.Class<java.lang.String> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
