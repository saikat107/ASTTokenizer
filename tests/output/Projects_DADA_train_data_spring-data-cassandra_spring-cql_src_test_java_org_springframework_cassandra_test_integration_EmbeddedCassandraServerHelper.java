<METHOD_START> public static java.lang.String java.lang.String ( ) { return DatabaseDescriptor . getClusterName ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return DatabaseDescriptor . getRpcAddress ( ) . getHostName ( ) ; }  <METHOD_END>
<METHOD_START> public static int int ( ) { return DatabaseDescriptor . getRpcPort ( ) ; }  <METHOD_END>
<METHOD_START> public static int int ( ) { return DatabaseDescriptor . getNativeTransportPort ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , long long ) throws java.lang.Exception { void ( java.lang.String , java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , long long ) throws java.lang.Exception { if ( java.util.concurrent.atomic.AtomicReference<org.springframework.cassandra.test.integration.CassandraDaemon> . get ( ) != null ) { return; } if ( ! java.util.concurrent.atomic.AtomicReference<java.lang.Object> . boolean ( null , new java.lang.Object ( ) ) ) { return; } java.io.File java.io.File = new java.io.File ( java.lang.String , new java.io.File ( java.lang.String ) . java.lang.String ( ) ) ; void ( java.lang.String , java.lang.String , java.io.File ) ; void ( java.io.File , long ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.io.File java.io.File )			throws java.io.IOException { java.io.File java.io.File = new java.io.File ( java.lang.String ) ; void ( java.io.File ) ; void ( java.lang.String , java.io.File ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.File java.io.File , long long ) throws java.lang.Exception { void ( java.io.File . java.lang.String ( ) ) ; org.springframework.cassandra.test.integration.Logger . debug ( STRING ) ; org.springframework.cassandra.test.integration.Logger . debug ( STRING ) ; java.lang.System . java.lang.String ( STRING , STRING + java.io.File . java.lang.String ( ) ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; void ( ) ; final CassandraDaemon org.springframework.cassandra.test.integration.CassandraDaemon = new CassandraDaemon ( ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = java.util.concurrent.ExecutorService . java.util.concurrent.Future<?> ( ( ) { org.springframework.cassandra.test.integration.CassandraDaemon . activate ( ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.cassandra.test.integration.CassandraDaemon> . compareAndSet ( null , org.springframework.cassandra.test.integration.CassandraDaemon ) ; } ) ; try { java.util.concurrent.Future<> . get ( long , java.util.concurrent.TimeUnit ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { org.springframework.cassandra.test.integration.Logger . error ( STRING + long + STRING ) ; throw new java.lang.IllegalStateException ( STRING , java.util.concurrent.ExecutionException ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { org.springframework.cassandra.test.integration.Logger . error ( STRING , java.lang.InterruptedException ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } finally { java.util.concurrent.ExecutorService . void ( ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( ) java.io.IOException { void ( ) ; void ( ) ; void ( ) ; CommitLog org.springframework.cassandra.test.integration.CommitLog = CommitLog . instance ; org.springframework.cassandra.test.integration.CommitLog . getCurrentPosition ( ) ; org.springframework.cassandra.test.integration.CommitLog . resetUnsafe ( true ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) java.io.IOException { void ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; void ( DatabaseDescriptor . getAllDataFileLocations ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String ) { boolean boolean = java.util.concurrent.atomic.AtomicReference<org.springframework.cassandra.test.integration.CassandraDaemon> . get ( ) != null ; if ( boolean && ! java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.io.File java.io.File ) throws java.io.IOException { FileUtils . createDirectory ( java.io.File ) ; java.io.File java.io.File = new java.io.File ( java.io.File , new java.io.File ( java.lang.String ) . java.lang.String ( ) ) ; java.io.InputStream java.io.InputStream = org.springframework.cassandra.test.integration.EmbeddedCassandraServerHelper .class . java.lang.ClassLoader ( ) . java.io.InputStream ( java.lang.String ) ; java.io.OutputStream java.io.OutputStream = new java.io.FileOutputStream ( java.io.File ) ; FileCopyUtils . copy ( java.io.InputStream , java.io.OutputStream ) ; java.io.OutputStream . void ( ) ; java.io.InputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { DatabaseDescriptor . createAllDirectories ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String ... java.lang.String[] ) throws java.io.IOException { for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( new java.io.File ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.io.File ... java.io.File[] ) throws java.io.IOException { java.util.Arrays . java.util.stream.Stream<java.io.File> ( java.io.File[] ) . java.util.stream.Stream<java.io.File> ( java.io.File :: boolean ) . void ( FileUtils :: deleteRecursive ) ; }  <METHOD_END>
