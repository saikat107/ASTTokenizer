<METHOD_START> @ java.lang.Override public void void ( MessageChannel org.springframework.integration.rmi.MessageChannel ) { Assert . notNull ( org.springframework.integration.rmi.MessageChannel , STRING ) ; Assert . isTrue ( org.springframework.integration.rmi.MessageChannel instanceof NamedComponent && StringUtils . hasText ( ( ( NamedComponent ) org.springframework.integration.rmi.MessageChannel ) . getComponentName ( ) ) , STRING ) ; this . java.lang.String = ( ( NamedComponent ) org.springframework.integration.rmi.MessageChannel ) . getComponentName ( ) ; super. setRequestChannel ( org.springframework.integration.rmi.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( RemoteInvocationExecutor org.springframework.integration.rmi.RemoteInvocationExecutor ) { this . org.springframework.integration.rmi.RemoteInvocationExecutor = org.springframework.integration.rmi.RemoteInvocationExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.integration.rmi.RmiServiceExporter == null ) { RmiServiceExporter org.springframework.integration.rmi.RmiServiceExporter = new RmiServiceExporter ( ) ; if ( this . java.lang.String != null ) { org.springframework.integration.rmi.RmiServiceExporter . setRegistryHost ( this . java.lang.String ) ; } org.springframework.integration.rmi.RmiServiceExporter . setRegistryPort ( this . int ) ; if ( this . org.springframework.integration.rmi.RemoteInvocationExecutor != null ) { org.springframework.integration.rmi.RmiServiceExporter . setRemoteInvocationExecutor ( this . org.springframework.integration.rmi.RemoteInvocationExecutor ) ; } org.springframework.integration.rmi.RmiServiceExporter . setService ( this ) ; org.springframework.integration.rmi.RmiServiceExporter . setServiceInterface ( RequestReplyExchanger .class ) ; org.springframework.integration.rmi.RmiServiceExporter . setServiceName ( java.lang.String + this . java.lang.String ) ; org.springframework.integration.rmi.RmiServiceExporter . afterPropertiesSet ( ) ; this . org.springframework.integration.rmi.RmiServiceExporter = org.springframework.integration.rmi.RmiServiceExporter ; } } super. onInit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.rmi.Message<?> < ? > org.springframework.integration.rmi.Message<?> ( Message < ? > org.springframework.integration.rmi.Message<?> ) { if ( this . boolean ) { return this . sendAndReceiveMessage ( org.springframework.integration.rmi.Message<> ) ; } this . send ( org.springframework.integration.rmi.Message<> ) ; return null ; }  <METHOD_END>
