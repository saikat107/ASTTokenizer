<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.devtools.restart.server.HttpRestartServer = new HttpRestartServer ( this . org.springframework.boot.devtools.restart.server.RestartServer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.server.ExpectedException . expectMessage ( STRING ) ; new HttpRestartServer ( ( SourceFolderUrlFilter ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.server.ExpectedException . expectMessage ( STRING ) ; new HttpRestartServer ( ( RestartServer ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.boot.devtools.restart.server.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.boot.devtools.restart.server.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.server.ClassLoaderFiles = new ClassLoaderFiles ( ) ; org.springframework.boot.devtools.restart.server.ClassLoaderFiles . addFile ( STRING , new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ) ; byte [] byte[] = byte[] ( org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) ; org.springframework.boot.devtools.restart.server.MockHttpServletRequest . setContent ( byte[] ) ; this . org.springframework.boot.devtools.restart.server.HttpRestartServer . handle ( new ServletServerHttpRequest ( org.springframework.boot.devtools.restart.server.MockHttpServletRequest ) , new ServletServerHttpResponse ( org.springframework.boot.devtools.restart.server.MockHttpServletResponse ) ) ; verify ( this . org.springframework.boot.devtools.restart.server.RestartServer ) . updateAndRestart ( this . org.springframework.boot.devtools.restart.server.ArgumentCaptor<org.springframework.boot.devtools.restart.server.ClassLoaderFiles> . capture ( ) ) ; assertThat ( this . org.springframework.boot.devtools.restart.server.ArgumentCaptor<org.springframework.boot.devtools.restart.server.ClassLoaderFiles> . getValue ( ) . getFile ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.devtools.restart.server.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.boot.devtools.restart.server.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.boot.devtools.restart.server.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.boot.devtools.restart.server.HttpRestartServer . handle ( new ServletServerHttpRequest ( org.springframework.boot.devtools.restart.server.MockHttpServletRequest ) , new ServletServerHttpResponse ( org.springframework.boot.devtools.restart.server.MockHttpServletResponse ) ) ; verifyZeroInteractions ( this . org.springframework.boot.devtools.restart.server.RestartServer ) ; assertThat ( org.springframework.boot.devtools.restart.server.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.boot.devtools.restart.server.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.boot.devtools.restart.server.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.devtools.restart.server.MockHttpServletRequest . setContent ( new byte [] { NUMBER , NUMBER , NUMBER } ) ; this . org.springframework.boot.devtools.restart.server.HttpRestartServer . handle ( new ServletServerHttpRequest ( org.springframework.boot.devtools.restart.server.MockHttpServletRequest ) , new ServletServerHttpResponse ( org.springframework.boot.devtools.restart.server.MockHttpServletResponse ) ) ; verifyZeroInteractions ( this . org.springframework.boot.devtools.restart.server.RestartServer ) ; assertThat ( org.springframework.boot.devtools.restart.server.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( java.lang.Object java.lang.Object ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( java.lang.Object ) ; java.io.ObjectOutputStream . void ( ) ; return java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
