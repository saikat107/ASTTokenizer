<METHOD_START> public void void ( MessageSource < ? > org.springframework.integration.endpoint.MessageSource<?> ) { this . org.springframework.integration.endpoint.MessageSource<?> = org.springframework.integration.endpoint.MessageSource<> ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.integration.endpoint.MessageSource<> ) ; this . org.springframework.integration.endpoint.MessageSource<?> = java.lang.Object != null ? ( MessageSource < ? > ) java.lang.Object : org.springframework.integration.endpoint.MessageSource<> ; if ( org.springframework.integration.endpoint.MessageSource<> instanceof ExpressionCapable ) { setPrimaryExpression ( ( ( ExpressionCapable ) org.springframework.integration.endpoint.MessageSource<> ) . getExpression ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.endpoint.MessageChannel ) { this . org.springframework.integration.endpoint.MessageChannel = org.springframework.integration.endpoint.MessageChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.endpoint.MessageSource<?> < ? > org.springframework.integration.endpoint.MessageSource<?> ( ) { return this . org.springframework.integration.endpoint.MessageSource<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.endpoint.MessagingTemplate . setSendTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . org.springframework.integration.endpoint.MessageSource<> instanceof NamedComponent ) ? ( ( NamedComponent ) this . org.springframework.integration.endpoint.MessageSource<> ) . getComponentType ( ) : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Advice org.springframework.integration.endpoint.Advice ) { return org.springframework.integration.endpoint.Advice instanceof AbstractMessageSourceAdvice ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Collection<org.springframework.integration.endpoint.Advice> < Advice > java.util.Collection<org.springframework.integration.endpoint.Advice> ) { if ( ! CollectionUtils . isEmpty ( java.util.Collection<org.springframework.integration.endpoint.Advice> ) ) { if ( AopUtils . isAopProxy ( this . org.springframework.integration.endpoint.MessageSource<> ) ) { Advised org.springframework.integration.endpoint.Advised = ( Advised ) this . org.springframework.integration.endpoint.MessageSource<> ; this . java.util.Collection<org.springframework.integration.endpoint.Advice> . forEach ( org.springframework.integration.endpoint.Advised :: removeAdvice ) ; for ( Advice org.springframework.integration.endpoint.Advice : java.util.Collection<org.springframework.integration.endpoint.Advice> ) { org.springframework.integration.endpoint.Advised . addAdvisor ( org.springframework.integration.endpoint.NameMatchMethodPointcutAdvisor ( org.springframework.integration.endpoint.Advice ) ) ; } } else { ProxyFactory org.springframework.integration.endpoint.ProxyFactory = new ProxyFactory ( this . org.springframework.integration.endpoint.MessageSource<> ) ; for ( Advice org.springframework.integration.endpoint.Advice : java.util.Collection<org.springframework.integration.endpoint.Advice> ) { org.springframework.integration.endpoint.ProxyFactory . addAdvisor ( org.springframework.integration.endpoint.NameMatchMethodPointcutAdvisor ( org.springframework.integration.endpoint.Advice ) ) ; } this . org.springframework.integration.endpoint.MessageSource<?> = ( MessageSource < ? > ) org.springframework.integration.endpoint.ProxyFactory . getProxy ( getBeanClassLoader ( ) ) ; } this . java.util.Collection<org.springframework.integration.endpoint.Advice> . clear ( ) ; this . java.util.Collection<org.springframework.integration.endpoint.Advice> . addAll ( java.util.Collection<org.springframework.integration.endpoint.Advice> ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.endpoint.NameMatchMethodPointcutAdvisor org.springframework.integration.endpoint.NameMatchMethodPointcutAdvisor ( Advice org.springframework.integration.endpoint.Advice ) { NameMatchMethodPointcutAdvisor org.springframework.integration.endpoint.NameMatchMethodPointcutAdvisor = new NameMatchMethodPointcutAdvisor ( org.springframework.integration.endpoint.Advice ) ; org.springframework.integration.endpoint.NameMatchMethodPointcutAdvisor . addMethodName ( STRING ) ; return org.springframework.integration.endpoint.NameMatchMethodPointcutAdvisor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.endpoint.MessageSource<> instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.endpoint.MessageSource<> ) . start ( ) ; } super. doStart ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStop ( ) ; if ( this . org.springframework.integration.endpoint.MessageSource<> instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.endpoint.MessageSource<> ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . notNull ( this . org.springframework.integration.endpoint.MessageSource<> , STRING ) ; Assert . state ( ( this . java.lang.String == null && this . org.springframework.integration.endpoint.MessageChannel != null ) || ( this . java.lang.String != null && this . org.springframework.integration.endpoint.MessageChannel == null ) , STRING ) ; super. onInit ( ) ; if ( this . getBeanFactory ( ) != null ) { this . org.springframework.integration.endpoint.MessagingTemplate . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.endpoint.MessageChannel org.springframework.integration.endpoint.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.endpoint.MessageChannel = getChannelResolver ( ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.endpoint.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { if ( this . boolean ) { org.springframework.integration.endpoint.Message<?> = MessageHistory . write ( org.springframework.integration.endpoint.Message<> , this , this . getMessageBuilderFactory ( ) ) ; } try { this . org.springframework.integration.endpoint.MessagingTemplate . send ( org.springframework.integration.endpoint.MessageChannel ( ) , org.springframework.integration.endpoint.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } else { throw new MessagingException ( org.springframework.integration.endpoint.Message<> , STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( ) { return this . org.springframework.integration.endpoint.MessageSource<> . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return this . org.springframework.integration.endpoint.MessageSource<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return IntegrationResourceHolder . MESSAGE_SOURCE ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof Advised ) ) { return java.lang.Object ; } Advised org.springframework.integration.endpoint.Advised = ( Advised ) java.lang.Object ; if ( org.springframework.integration.endpoint.Advised . getTargetSource ( ) == null ) { return null ; } try { return java.lang.Object ( org.springframework.integration.endpoint.Advised . getTargetSource ( ) . getTarget ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanCreationException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
