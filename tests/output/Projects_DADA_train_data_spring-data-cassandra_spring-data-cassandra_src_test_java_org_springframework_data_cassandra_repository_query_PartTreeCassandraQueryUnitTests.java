<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.cassandra.repository.query.BasicCassandraMappingContext = new BasicCassandraMappingContext ( ) ; this . org.springframework.data.cassandra.repository.query.BasicCassandraMappingContext . setUserTypeResolver ( org.springframework.data.cassandra.repository.query.UserTypeResolver ) ; this . org.springframework.data.cassandra.repository.query.CassandraConverter = new MappingCassandraConverter ( org.springframework.data.cassandra.repository.query.BasicCassandraMappingContext ) ; when ( org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.CassandraConverter ) ; when ( org.springframework.data.cassandra.repository.query.UDTValue . getType ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.UserType ) ; when ( org.springframework.data.cassandra.repository.query.UserType . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , org.springframework.data.cassandra.repository.query.PartTreeCassandraQueryUnitTests.PersonProjection .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , new java.lang.Class [] { java.util.Collection .class } , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.repository.query.UserTypeResolver . resolveType ( CqlIdentifier . cqlId ( STRING ) ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.UserType ) ; when ( org.springframework.data.cassandra.repository.query.UserType . newValue ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.UDTValue ) ; java.lang.String java.lang.String = java.lang.String ( STRING , new Address ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , org.springframework.data.cassandra.repository.query.UDTValue ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , new java.lang.Class [] { java.util.Collection .class } , java.util.Collections . java.util.Set ( org.springframework.data.cassandra.repository.query.UDTValue ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.Object[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Class<?>[] [ int ] = ClassUtils . getUserClass ( java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return java.lang.String ( java.lang.String , java.lang.Class<?>[] , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Object ... java.lang.Object[] ) { PartTreeCassandraQuery org.springframework.data.cassandra.repository.query.PartTreeCassandraQuery = org.springframework.data.cassandra.repository.query.PartTreeCassandraQuery ( java.lang.String , java.lang.Class<?>[] ) ; CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.PartTreeCassandraQuery . getQueryMethod ( ) , java.lang.Object[] ) ; return org.springframework.data.cassandra.repository.query.PartTreeCassandraQuery . createQuery ( new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.PartTreeCassandraQuery org.springframework.data.cassandra.repository.query.PartTreeCassandraQuery ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.util.Arrays . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.Class<?>[] ) . java.util.stream.Stream<java.lang.Class<? extends java.lang.Object>> ( java.lang.Class<?> -> java.lang.Class<> . java.lang.String ( ) . boolean ( STRING ) ? java.lang.Class<> . java.lang.Class<? super > ( ) : java.lang.Class<> ) . java.lang.Class<?>[] ( int -> new java.lang.Class<?> < ? > [ int ] ) ; try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.PartTreeCassandraQueryUnitTests.Repo .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; ProjectionFactory org.springframework.data.cassandra.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; CassandraQueryMethod org.springframework.data.cassandra.repository.query.CassandraQueryMethod = new CassandraQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.cassandra.repository.query.PartTreeCassandraQueryUnitTests.Repo .class ) , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.BasicCassandraMappingContext ) ; return new PartTreeCassandraQuery ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod , org.springframework.data.cassandra.repository.query.CassandraOperations ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalArgumentException ( java.lang.NoSuchMethodException . java.lang.String ( ) , java.lang.NoSuchMethodException ) ; } catch ( java.lang.SecurityException java.lang.SecurityException ) { throw new java.lang.IllegalArgumentException ( java.lang.SecurityException . java.lang.String ( ) , java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Query ( ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( )  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( Address org.springframework.data.cassandra.repository.query.Address );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( UDTValue org.springframework.data.cassandra.repository.query.UDTValue );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.util.Collection<org.springframework.data.cassandra.repository.query.Address> < Address > java.util.Collection<org.springframework.data.cassandra.repository.query.Address> );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.PartTreeCassandraQueryUnitTests.PersonProjection org.springframework.data.cassandra.repository.query.PartTreeCassandraQueryUnitTests.PersonProjection ( )  <METHOD_END>
<METHOD_START> < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
