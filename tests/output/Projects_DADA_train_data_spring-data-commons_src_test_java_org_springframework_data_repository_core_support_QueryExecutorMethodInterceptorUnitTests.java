<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { when ( org.springframework.data.repository.core.support.RepositoryInformation . hasQueryMethods ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.repository.core.support.RepositoryFactorySupport . getQueryLookupStrategy ( any ( ) , any ( ) ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; org.springframework.data.repository.core.support.RepositoryFactorySupport .new QueryExecutorMethodInterceptor ( org.springframework.data.repository.core.support.RepositoryInformation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ) . thenReturn ( Streamable . empty ( ) ) ; when ( org.springframework.data.repository.core.support.RepositoryFactorySupport . getQueryLookupStrategy ( any ( ) , any ( ) ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.repository.core.support.QueryLookupStrategy ) ) ; org.springframework.data.repository.core.support.RepositoryFactorySupport .new QueryExecutorMethodInterceptor ( org.springframework.data.repository.core.support.RepositoryInformation ) ; verify ( org.springframework.data.repository.core.support.QueryLookupStrategy , times ( NUMBER ) ) . resolveQuery ( any ( ) , any ( ) , any ( ) , any ( ) ) ; }  <METHOD_END>
