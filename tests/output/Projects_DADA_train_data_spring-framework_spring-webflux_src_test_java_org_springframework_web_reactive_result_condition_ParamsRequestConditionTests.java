<METHOD_START> @ Test public void void ( ) { assertEquals ( new ParamsRequestCondition ( STRING ) , new ParamsRequestCondition ( STRING ) ) ; assertFalse ( new ParamsRequestCondition ( STRING ) . equals ( new ParamsRequestCondition ( STRING ) ) ) ; assertFalse ( new ParamsRequestCondition ( STRING ) . equals ( new ParamsRequestCondition ( STRING ) ) ) ; assertEquals ( new ParamsRequestCondition ( STRING ) , new ParamsRequestCondition ( STRING ) ) ; assertFalse ( new ParamsRequestCondition ( STRING ) . equals ( new ParamsRequestCondition ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ) ; assertNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; assertNotNull ( new ParamsRequestCondition ( STRING ) . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( get ( STRING ) . toExchange ( ) ) ) ; assertNull ( org.springframework.web.reactive.result.condition.ParamsRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = get ( STRING ) . toExchange ( ) ; ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING , STRING , STRING ) ; ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING , STRING ) ; int int = org.springframework.web.reactive.result.condition.ParamsRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ParamsRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.ParamsRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ParamsRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; ParamsRequestCondition org.springframework.web.reactive.result.condition.ParamsRequestCondition = org.springframework.web.reactive.result.condition.ParamsRequestCondition . combine ( org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.web.reactive.result.condition.ParamsRequestCondition . getContent ( ) ; assertEquals ( NUMBER , java.util.Collection<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.reactive.result.condition.MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange ( java.lang.String java.lang.String ) { return MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_FORM_URLENCODED ) . body ( java.lang.String ) . toExchange ( ) ; }  <METHOD_END>
