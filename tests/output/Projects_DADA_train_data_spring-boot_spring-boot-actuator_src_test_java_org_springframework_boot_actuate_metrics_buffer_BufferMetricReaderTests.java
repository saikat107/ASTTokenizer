<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.buffer.GaugeBuffers . set ( STRING , NUMBER ) ; this . org.springframework.boot.actuate.metrics.buffer.CounterBuffers . increment ( STRING , NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.metrics.buffer.BufferMetricReader . count ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.buffer.GaugeBuffers . set ( STRING , NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.metrics.buffer.BufferMetricReader . findOne ( STRING ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.buffer.BufferMetricReader . count ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.buffer.CounterBuffers . increment ( STRING , NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.metrics.buffer.BufferMetricReader . findOne ( STRING ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.buffer.BufferMetricReader . count ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
