<METHOD_START> @ Before public void void ( ) java.lang.Exception { RepositoryFactorySupport org.springframework.data.couchbase.repository.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) ; org.springframework.data.couchbase.repository.PartyPagingRepository = org.springframework.data.couchbase.repository.RepositoryFactorySupport . getRepository ( PartyPagingRepository .class ) ; org.springframework.data.couchbase.repository.PartyRepository = org.springframework.data.couchbase.repository.RepositoryFactorySupport . getRepository ( PartyRepository .class ) ; org.springframework.data.couchbase.repository.ItemRepository = org.springframework.data.couchbase.repository.RepositoryFactorySupport . getRepository ( ItemRepository .class ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( new Party ( java.lang.String , STRING , STRING , null , NUMBER , null ) ) ; org.springframework.data.couchbase.repository.ItemRepository . save ( new Item ( java.lang.String , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { try { org.springframework.data.couchbase.repository.ItemRepository . delete ( java.lang.String ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) {} try { org.springframework.data.couchbase.repository.PartyRepository . delete ( java.lang.String ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) {} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.Party> < Party > java.lang.Iterable<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyPagingRepository . findAll ( new Sort ( Sort . Direction . DESC , STRING ) ) ; long long = java.lang.Long . long ; for ( Party org.springframework.data.couchbase.repository.Party : java.lang.Iterable<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) <= long ) ; long = org.springframework.data.couchbase.repository.Party . getAttendees ( ) ; } assertFalse ( STRING , long == java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.Party> < Party > java.lang.Iterable<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyPagingRepository . findAll ( new Sort ( Sort . Direction . DESC , STRING ) ) ; java.lang.String java.lang.String = null ; for ( Party org.springframework.data.couchbase.repository.Party : java.lang.Iterable<org.springframework.data.couchbase.repository.Party> ) { if ( java.lang.String != null ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . compareTo ( java.lang.String ) <= NUMBER ) ; } java.lang.String = org.springframework.data.couchbase.repository.Party . getDescription ( ) ; } assertNotNull ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.Party> < Party > java.lang.Iterable<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyPagingRepository . findAll ( new Sort ( new Sort . Sort ( Sort . Direction . DESC , STRING ) . ignoreCase ( ) ) ) ; java.lang.String java.lang.String = null ; for ( Party org.springframework.data.couchbase.repository.Party : java.lang.Iterable<org.springframework.data.couchbase.repository.Party> ) { if ( java.lang.String != null ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . compareToIgnoreCase ( java.lang.String ) <= NUMBER ) ; } java.lang.String = org.springframework.data.couchbase.repository.Party . getDescription ( ) ; } assertNotNull ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.couchbase.repository.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < Party > org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyPagingRepository . findAll ( org.springframework.data.couchbase.repository.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getTotalElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getNumberOfElements ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.couchbase.repository.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ; Page < Party > org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyPagingRepository . findAll ( org.springframework.data.couchbase.repository.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getTotalElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getNumberOfElements ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getContent ( ) ; java.lang.Long java.lang.Long = null ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { if ( java.lang.Long != null ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) <= java.lang.Long ) ; } java.lang.Long = org.springframework.data.couchbase.repository.Party . getAttendees ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findByDescriptionOrName ( STRING , STRING ) ; assertTrue ( java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.couchbase.repository.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ; Page < Party > org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findPartiesWithAttendee ( NUMBER , org.springframework.data.couchbase.repository.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getTotalElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getNumberOfElements ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getContent ( ) ; java.lang.Long java.lang.Long = null ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { if ( java.lang.Long != null ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) <= java.lang.Long ) ; } java.lang.Long = org.springframework.data.couchbase.repository.Party . getAttendees ( ) ; } Page < Party > org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findPartiesWithAttendee ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getNumberOfElements ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.Page<org.springframework.data.couchbase.repository.Party> . getContent ( ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { if ( java.lang.Long != null ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) <= java.lang.Long ) ; } java.lang.Long = org.springframework.data.couchbase.repository.Party . getAttendees ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingInstantiationException .class ) public void void ( ) { Sort org.springframework.data.couchbase.repository.Sort = new Sort ( Sort . Direction . DESC , STRING ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findParties ( org.springframework.data.couchbase.repository.Sort ) ; }  <METHOD_END>
