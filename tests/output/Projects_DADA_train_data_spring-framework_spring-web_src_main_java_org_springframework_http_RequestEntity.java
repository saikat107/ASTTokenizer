<METHOD_START> public void ( HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI ) { this( null , null , org.springframework.http.HttpMethod , java.net.URI ); }  <METHOD_END>
<METHOD_START> public void ( T T , HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI ) { this( T , null , org.springframework.http.HttpMethod , java.net.URI , null ); }  <METHOD_END>
<METHOD_START> public void ( T T , HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI , java.lang.reflect.Type java.lang.reflect.Type ) { this( T , null , org.springframework.http.HttpMethod , java.net.URI , java.lang.reflect.Type ); }  <METHOD_END>
<METHOD_START> public void ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> , HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI ) { this( null , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> , org.springframework.http.HttpMethod , java.net.URI , null ); }  <METHOD_END>
<METHOD_START> public void ( T T , MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> , HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI ) { this( T , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> , org.springframework.http.HttpMethod , java.net.URI , null ); }  <METHOD_END>
<METHOD_START> public void ( T T , MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> , HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI , java.lang.reflect.Type java.lang.reflect.Type ) { super( T , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ); this . org.springframework.http.HttpMethod = org.springframework.http.HttpMethod ; this . java.net.URI = java.net.URI ; this . java.lang.reflect.Type = java.lang.reflect.Type ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.HttpMethod org.springframework.http.HttpMethod ( ) { return this . org.springframework.http.HttpMethod ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Type java.lang.reflect.Type ( ) { if ( this . java.lang.reflect.Type == null ) { T T = getBody ( ) ; if ( T != null ) { return T . java.lang.Class<? extends java.lang.Object> ( ) ; } } return this . java.lang.reflect.Type ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! super. boolean ( java.lang.Object ) ) { return false ; } org.springframework.http.RequestEntity<?> < ? > org.springframework.http.RequestEntity<?> = ( org.springframework.http.RequestEntity<?> < ? > ) java.lang.Object ; return ( ObjectUtils . nullSafeEquals ( org.springframework.http.HttpMethod ( ) , org.springframework.http.RequestEntity<> . org.springframework.http.HttpMethod ( ) ) && ObjectUtils . nullSafeEquals ( java.net.URI ( ) , org.springframework.http.RequestEntity<> . java.net.URI ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = super. int ( ) ; int = NUMBER * int + ObjectUtils . nullSafeHashCode ( this . org.springframework.http.HttpMethod ) ; int = NUMBER * int + ObjectUtils . nullSafeHashCode ( this . java.net.URI ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.http.HttpMethod ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ' ' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.net.URI ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ',' ) ; T T = getBody ( ) ; HttpHeaders org.springframework.http.HttpHeaders = getHeaders ( ) ; if ( T != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( T ) ; if ( org.springframework.http.HttpHeaders != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( ',' ) ; } } if ( org.springframework.http.HttpHeaders != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.http.HttpHeaders ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( '>' ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI ) { return new org.springframework.http.RequestEntity.DefaultBodyBuilder ( org.springframework.http.HttpMethod , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.HeadersBuilder<?> < ? > org.springframework.http.RequestEntity.HeadersBuilder<?> ( java.net.URI java.net.URI ) { return org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod . GET , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.HeadersBuilder<?> < ? > org.springframework.http.RequestEntity.HeadersBuilder<?> ( java.net.URI java.net.URI ) { return org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod . HEAD , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( java.net.URI java.net.URI ) { return org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod . POST , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( java.net.URI java.net.URI ) { return org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod . PUT , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( java.net.URI java.net.URI ) { return org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod . PATCH , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.HeadersBuilder<?> < ? > org.springframework.http.RequestEntity.HeadersBuilder<?> ( java.net.URI java.net.URI ) { return org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod . DELETE , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.RequestEntity.HeadersBuilder<?> < ? > org.springframework.http.RequestEntity.HeadersBuilder<?> ( java.net.URI java.net.URI ) { return org.springframework.http.RequestEntity.BodyBuilder ( HttpMethod . OPTIONS , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> B B ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] );  <METHOD_END>
<METHOD_START> B B ( MediaType ... org.springframework.http.MediaType[] );  <METHOD_END>
<METHOD_START> B B ( java.nio.charset.Charset ... java.nio.charset.Charset[] );  <METHOD_END>
<METHOD_START> B B ( long long );  <METHOD_END>
<METHOD_START> B B ( java.lang.String ... java.lang.String[] );  <METHOD_END>
<METHOD_START> org.springframework.http.RequestEntity<java.lang.Void> < java.lang.Void > org.springframework.http.RequestEntity<java.lang.Void> ( )  <METHOD_END>
<METHOD_START> org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( long long );  <METHOD_END>
<METHOD_START> org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( MediaType org.springframework.http.MediaType );  <METHOD_END>
<METHOD_START> < T > org.springframework.http.RequestEntity<T> < T > org.springframework.http.RequestEntity<T> ( T T );  <METHOD_END>
<METHOD_START> < T > org.springframework.http.RequestEntity<T> < T > org.springframework.http.RequestEntity<T> ( T T , java.lang.reflect.Type java.lang.reflect.Type );  <METHOD_END>
<METHOD_START> public void ( HttpMethod org.springframework.http.HttpMethod , java.net.URI java.net.URI ) { this . org.springframework.http.HttpMethod = org.springframework.http.HttpMethod ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.http.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( MediaType ... org.springframework.http.MediaType[] ) { this . org.springframework.http.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( org.springframework.http.MediaType[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( java.nio.charset.Charset ... java.nio.charset.Charset[] ) { this . org.springframework.http.HttpHeaders . setAcceptCharset ( java.util.Arrays . java.util.List<java.nio.charset.Charset> ( java.nio.charset.Charset[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( long long ) { this . org.springframework.http.HttpHeaders . setContentLength ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( MediaType org.springframework.http.MediaType ) { this . org.springframework.http.HttpHeaders . setContentType ( org.springframework.http.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( long long ) { this . org.springframework.http.HttpHeaders . setIfModifiedSince ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity.BodyBuilder org.springframework.http.RequestEntity.BodyBuilder ( java.lang.String ... java.lang.String[] ) { this . org.springframework.http.HttpHeaders . setIfNoneMatch ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.RequestEntity<java.lang.Void> < java.lang.Void > org.springframework.http.RequestEntity<java.lang.Void> ( ) { return new org.springframework.http.RequestEntity <> ( this . org.springframework.http.HttpHeaders , this . org.springframework.http.HttpMethod , this . java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.http.RequestEntity<T> < T > org.springframework.http.RequestEntity<T> ( T T ) { return new org.springframework.http.RequestEntity <> ( T , this . org.springframework.http.HttpHeaders , this . org.springframework.http.HttpMethod , this . java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.http.RequestEntity<T> < T > org.springframework.http.RequestEntity<T> ( T T , java.lang.reflect.Type java.lang.reflect.Type ) { return new org.springframework.http.RequestEntity <> ( T , this . org.springframework.http.HttpHeaders , this . org.springframework.http.HttpMethod , this . java.net.URI , java.lang.reflect.Type ) ; }  <METHOD_END>
