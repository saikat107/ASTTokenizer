<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Session org.springframework.integration.mail.config.Session ) { this . org.springframework.integration.mail.config.Session = org.springframework.integration.mail.config.Session ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( Authenticator org.springframework.integration.mail.config.Authenticator ) { this . org.springframework.integration.mail.config.Authenticator = org.springframework.integration.mail.config.Authenticator ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return this . java.lang.Boolean != null && this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.mail.config.Expression ) { this . org.springframework.integration.mail.config.Expression = org.springframework.integration.mail.config.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( SearchTermStrategy org.springframework.integration.mail.config.SearchTermStrategy ) { this . org.springframework.integration.mail.config.SearchTermStrategy = org.springframework.integration.mail.config.SearchTermStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( HeaderMapper < MimeMessage > org.springframework.integration.mail.config.HeaderMapper<org.springframework.integration.mail.config.MimeMessage> ) { this . org.springframework.integration.mail.config.HeaderMapper<org.springframework.integration.mail.config.MimeMessage> = org.springframework.integration.mail.config.HeaderMapper<org.springframework.integration.mail.config.MimeMessage> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.mail.config.BeanFactory ) throws org.springframework.integration.mail.config.BeansException { this . org.springframework.integration.mail.config.BeanFactory = org.springframework.integration.mail.config.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mail.config.MailReceiver org.springframework.integration.mail.config.MailReceiver ( ) java.lang.Exception { if ( this . org.springframework.integration.mail.config.MailReceiver == null ) { this . org.springframework.integration.mail.config.MailReceiver = this . org.springframework.integration.mail.config.MailReceiver ( ) ; } return this . org.springframework.integration.mail.config.MailReceiver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( this . org.springframework.integration.mail.config.MailReceiver != null ) ? this . org.springframework.integration.mail.config.MailReceiver . getClass ( ) : MailReceiver .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( StringUtils . hasText ( this . java.lang.String ) ) { URLName org.springframework.integration.mail.config.URLName = new URLName ( this . java.lang.String ) ; if ( this . java.lang.String == null ) { this . java.lang.String = org.springframework.integration.mail.config.URLName . getProtocol ( ) ; } else { Assert . isTrue ( this . java.lang.String . boolean ( org.springframework.integration.mail.config.URLName . getProtocol ( ) ) , STRING ) ; } } else { Assert . hasText ( this . java.lang.String , STRING ) ; } Assert . hasText ( this . java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mail.config.MailReceiver org.springframework.integration.mail.config.MailReceiver ( ) { this . void ( ) ; boolean boolean = this . java.lang.String . java.lang.String ( ) . boolean ( STRING ) ; boolean boolean = this . java.lang.String . java.lang.String ( ) . boolean ( STRING ) ; Assert . isTrue ( boolean || boolean , STRING ) ; AbstractMailReceiver org.springframework.integration.mail.config.AbstractMailReceiver = boolean ? new Pop3MailReceiver ( this . java.lang.String ) : new ImapMailReceiver ( this . java.lang.String ) ; if ( this . org.springframework.integration.mail.config.Session != null ) { Assert . isNull ( this . java.util.Properties , STRING ) ; Assert . isNull ( this . org.springframework.integration.mail.config.Authenticator , STRING ) ; org.springframework.integration.mail.config.AbstractMailReceiver . setSession ( this . org.springframework.integration.mail.config.Session ) ; } if ( this . org.springframework.integration.mail.config.SearchTermStrategy != null ) { Assert . isTrue ( boolean , STRING ) ; ( ( ImapMailReceiver ) org.springframework.integration.mail.config.AbstractMailReceiver ) . setSearchTermStrategy ( this . org.springframework.integration.mail.config.SearchTermStrategy ) ; } if ( this . java.util.Properties != null ) { org.springframework.integration.mail.config.AbstractMailReceiver . setJavaMailProperties ( this . java.util.Properties ) ; } if ( this . org.springframework.integration.mail.config.Authenticator != null ) { org.springframework.integration.mail.config.AbstractMailReceiver . setJavaMailAuthenticator ( this . org.springframework.integration.mail.config.Authenticator ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.mail.config.AbstractMailReceiver . setShouldDeleteMessages ( this . java.lang.Boolean ) ; } org.springframework.integration.mail.config.AbstractMailReceiver . setMaxFetchSize ( this . int ) ; org.springframework.integration.mail.config.AbstractMailReceiver . setSelectorExpression ( this . org.springframework.integration.mail.config.Expression ) ; if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.mail.config.AbstractMailReceiver . setUserFlag ( this . java.lang.String ) ; } if ( boolean ) { if ( this . java.lang.Boolean ( ) && this . org.springframework.integration.mail.config.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.mail.config.Log . warn ( STRING ) ; } } else if ( boolean ) { ( ( ImapMailReceiver ) org.springframework.integration.mail.config.AbstractMailReceiver ) . setShouldMarkMessagesAsRead ( this . java.lang.Boolean ) ; } if ( this . org.springframework.integration.mail.config.BeanFactory != null ) { org.springframework.integration.mail.config.AbstractMailReceiver . setBeanFactory ( this . org.springframework.integration.mail.config.BeanFactory ) ; } if ( this . org.springframework.integration.mail.config.HeaderMapper<org.springframework.integration.mail.config.MimeMessage> != null ) { org.springframework.integration.mail.config.AbstractMailReceiver . setHeaderMapper ( this . org.springframework.integration.mail.config.HeaderMapper<org.springframework.integration.mail.config.MimeMessage> ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.mail.config.AbstractMailReceiver . setEmbeddedPartsAsBytes ( this . java.lang.Boolean ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.mail.config.AbstractMailReceiver . setSimpleContent ( this . java.lang.Boolean ) ; } org.springframework.integration.mail.config.AbstractMailReceiver . afterPropertiesSet ( ) ; return org.springframework.integration.mail.config.AbstractMailReceiver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.integration.mail.config.MailReceiver != null && this . org.springframework.integration.mail.config.MailReceiver instanceof DisposableBean ) { ( ( DisposableBean ) this . org.springframework.integration.mail.config.MailReceiver ) . destroy ( ) ; } }  <METHOD_END>
