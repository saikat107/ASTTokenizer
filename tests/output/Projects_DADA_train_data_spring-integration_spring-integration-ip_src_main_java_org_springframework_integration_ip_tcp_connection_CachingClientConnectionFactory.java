<METHOD_START> public void ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , int int ) { super( STRING , NUMBER ); org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSingleUse ( true ) ; this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ; this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> = new SimplePool < TcpConnectionSupport > ( int , new SimplePool . SimplePool < TcpConnectionSupport > ( ) { @ Override public TcpConnectionSupport createForPool ( ) { try { return CachingClientConnectionFactory .this . targetConnectionFactory . getConnection ( ) ; } catch ( Exception e ) { throw new MessagingException ( STRING , e ) ; } } @ Override public boolean isStale ( TcpConnectionSupport connection ) { return ! connection . isOpen ( ) ; } @ Override public void removedFromPool ( TcpConnectionSupport connection ) { connection . close ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ Override public TcpConnectionSupport createForPool ( ) { try { return CachingClientConnectionFactory .this . targetConnectionFactory . getConnection ( ) ; } catch ( Exception e ) { throw new MessagingException ( STRING , e ) ; } }  <METHOD_END>
<METHOD_START> @ Override public boolean isStale ( TcpConnectionSupport connection ) { return ! connection . isOpen ( ) ; }  <METHOD_END>
<METHOD_START> @ Override public void removedFromPool ( TcpConnectionSupport connection ) { connection . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . setWaitTimeout ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . setPoolSize ( int ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . getPoolSize ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . getIdleCount ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . getActiveCount ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . getAllocatedCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.Exception { return new org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory.CachedConnection ( this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . getItem ( ) , getListener ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setComponentName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getComponentType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) java.lang.Object ; return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . equals ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getSoTimeout ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoTimeout ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getSoReceiveBufferSize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoReceiveBufferSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getSoSendBufferSize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoSendBufferSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isSoTcpNoDelay ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoTcpNoDelay ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getSoLinger ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoLinger ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isSoKeepAlive ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoKeepAlive ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getSoTrafficClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoTrafficClass ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getHost ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getPort ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getSender ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.Serializer<?> < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getSerializer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.Deserializer<?> < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getDeserializer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getMapper ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ) { super. registerListener ( org.springframework.integration.ip.tcp.connection.TcpListener ) ; this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . enableManualListenerRegistration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerSender ( org.springframework.integration.ip.tcp.connection.TcpSender ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setTaskExecutor ( java.util.concurrent.Executor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Deserializer < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.connection.Deserializer<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Serializer < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.connection.Serializer<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setMapper ( org.springframework.integration.ip.tcp.connection.TcpMessageMapper ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { if ( ! boolean && logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnectionInterceptorFactoryChain org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactoryChain ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setInterceptorFactoryChain ( org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactoryChain ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setLookupHost ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isLookupHost ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { if ( org.springframework.integration.ip.tcp.connection.TcpConnection instanceof org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory.CachedConnection ) { ( ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory.CachedConnection ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . void ( ) ; } super. forceClose ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. enableManualListenerRegistration ( ) ; this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . enableManualListenerRegistration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { setActive ( true ) ; this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . start ( ) ; super. start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . stop ( ) ; this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . removeAllIdleItems ( ) ; }  <METHOD_END>
<METHOD_START> private void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ) { super. setTheConnection ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; void ( org.springframework.integration.ip.tcp.connection.TcpListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( ) + STRING ) ; } } else { if ( ! boolean ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( ) ) ; } super. close ( ) ; } org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory .this . org.springframework.integration.ip.tcp.connection.SimplePool<org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . releaseItem ( getTheConnection ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + super. getConnectionId ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) { Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ; if ( org.springframework.integration.ip.tcp.connection.Message<> instanceof ErrorMessage ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IpHeaders . CONNECTION_ID , java.lang.String ( ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IpHeaders . ACTUAL_CONNECTION_ID ) == null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IpHeaders . ACTUAL_CONNECTION_ID , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; } org.springframework.integration.ip.tcp.connection.Message<?> = new ErrorMessage ( ( java.lang.Throwable ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; } else { AbstractIntegrationMessageBuilder < ? > org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<?> = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory .this . getMessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.ip.tcp.connection.Message<> ) . setHeader ( IpHeaders . CONNECTION_ID , java.lang.String ( ) ) ; if ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . ACTUAL_CONNECTION_ID ) == null ) { org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . setHeader ( IpHeaders . ACTUAL_CONNECTION_ID , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; } org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . build ( ) ; } TcpListener org.springframework.integration.ip.tcp.connection.TcpListener = getListener ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpListener != null ) { org.springframework.integration.ip.tcp.connection.TcpListener . onMessage ( org.springframework.integration.ip.tcp.connection.Message<> ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.ip.tcp.connection.Message<> ) ; } } return true ; }  <METHOD_END>
<METHOD_START> private void void ( ) { getTheConnection ( ) . close ( ) ; }  <METHOD_END>
