<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = this . org.springframework.integration.channel.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertThat ( this . org.springframework.integration.channel.MessageChannel , instanceOf ( FixedSubscriberChannel .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanCreationException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( BeanInstantiationException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) , instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanDefinitionParsingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanDefinitionParsingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanDefinitionParsingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanDefinitionParsingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanDefinitionParsingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.ConfigurableApplicationContext = null ; try { org.springframework.integration.channel.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.channel.FixedSubscriberChannelTests> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanDefinitionParsingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } if ( org.springframework.integration.channel.ConfigurableApplicationContext != null ) { org.springframework.integration.channel.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
