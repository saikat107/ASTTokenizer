<METHOD_START> @ java.lang.Override public void void ( AbstractAuthorizationEvent org.springframework.boot.actuate.security.AbstractAuthorizationEvent ) { if ( org.springframework.boot.actuate.security.AbstractAuthorizationEvent instanceof AuthenticationCredentialsNotFoundEvent ) { void ( ( AuthenticationCredentialsNotFoundEvent ) org.springframework.boot.actuate.security.AbstractAuthorizationEvent ) ; } else if ( org.springframework.boot.actuate.security.AbstractAuthorizationEvent instanceof AuthorizationFailureEvent ) { void ( ( AuthorizationFailureEvent ) org.springframework.boot.actuate.security.AbstractAuthorizationEvent ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AuthenticationCredentialsNotFoundEvent org.springframework.boot.actuate.security.AuthenticationCredentialsNotFoundEvent ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthenticationCredentialsNotFoundEvent . getCredentialsNotFoundException ( ) . getClass ( ) . getName ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthenticationCredentialsNotFoundEvent . getCredentialsNotFoundException ( ) . getMessage ( ) ) ; publish ( new AuditEvent ( STRING , AuthenticationAuditListener . AUTHENTICATION_FAILURE , java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AuthorizationFailureEvent org.springframework.boot.actuate.security.AuthorizationFailureEvent ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthorizationFailureEvent . getAccessDeniedException ( ) . getClass ( ) . getName ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthorizationFailureEvent . getAccessDeniedException ( ) . getMessage ( ) ) ; if ( org.springframework.boot.actuate.security.AuthorizationFailureEvent . getAuthentication ( ) . getDetails ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthorizationFailureEvent . getAuthentication ( ) . getDetails ( ) ) ; } publish ( new AuditEvent ( org.springframework.boot.actuate.security.AuthorizationFailureEvent . getAuthentication ( ) . getName ( ) , java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
