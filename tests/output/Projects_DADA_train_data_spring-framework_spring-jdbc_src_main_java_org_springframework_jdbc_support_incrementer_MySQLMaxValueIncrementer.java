<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( javax.sql.DataSource , java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected synchronized long long ( ) org.springframework.jdbc.support.incrementer.DataAccessException { if ( this . long == this . long ) { java.sql.Connection java.sql.Connection = null ; java.sql.Statement java.sql.Statement = null ; boolean boolean = false ; try { if ( this . boolean ) { java.sql.Connection = getDataSource ( ) . getConnection ( ) ; if ( java.sql.Connection . boolean ( ) ) { boolean = true ; java.sql.Connection . void ( false ) ; } } else { java.sql.Connection = DataSourceUtils . getConnection ( getDataSource ( ) ) ; } java.sql.Statement = java.sql.Connection . java.sql.Statement ( ) ; if ( ! this . boolean ) { DataSourceUtils . applyTransactionTimeout ( java.sql.Statement , getDataSource ( ) ) ; } java.lang.String java.lang.String = getColumnName ( ) ; try { java.sql.Statement . int ( STRING + getIncrementerName ( ) + STRING + java.lang.String + STRING + java.lang.String + STRING + getCacheSize ( ) + STRING ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { throw new DataAccessResourceFailureException ( STRING + java.lang.String + STRING + getIncrementerName ( ) + STRING , java.sql.SQLException ) ; } java.sql.ResultSet java.sql.ResultSet = java.sql.Statement . java.sql.ResultSet ( java.lang.String ) ; try { if ( ! java.sql.ResultSet . boolean ( ) ) { throw new DataAccessResourceFailureException ( STRING ) ; } this . long = java.sql.ResultSet . long ( NUMBER ) ; } finally { JdbcUtils . closeResultSet ( java.sql.ResultSet ) ; } this . long = this . long - getCacheSize ( ) + NUMBER ; } catch ( java.sql.SQLException java.sql.SQLException ) { throw new DataAccessResourceFailureException ( STRING , java.sql.SQLException ) ; } finally { JdbcUtils . closeStatement ( java.sql.Statement ) ; if ( java.sql.Connection != null ) { if ( this . boolean ) { try { java.sql.Connection . void ( ) ; if ( boolean ) { java.sql.Connection . void ( true ) ; } } catch ( java.sql.SQLException java.sql.SQLException ) { throw new DataAccessResourceFailureException ( STRING + getIncrementerName ( ) ) ; } JdbcUtils . closeConnection ( java.sql.Connection ) ; } else { DataSourceUtils . releaseConnection ( java.sql.Connection , getDataSource ( ) ) ; } } } } else { this . long ++ ; } return this . long ; }  <METHOD_END>
