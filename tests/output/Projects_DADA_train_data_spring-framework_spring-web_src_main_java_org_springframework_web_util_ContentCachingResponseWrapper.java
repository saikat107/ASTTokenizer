<METHOD_START> public void ( HttpServletResponse org.springframework.web.util.HttpServletResponse ) { super( org.springframework.web.util.HttpServletResponse ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { super. setStatus ( int ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public void void ( int int , java.lang.String java.lang.String ) { super. setStatus ( int , java.lang.String ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.io.IOException { void ( false ) ; try { super. sendError ( int ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { super. setStatus ( int ) ; } this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( int int , java.lang.String java.lang.String ) throws java.io.IOException { void ( false ) ; try { super. sendError ( int , java.lang.String ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { super. setStatus ( int , java.lang.String ) ; } this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.io.IOException { void ( false ) ; super. sendRedirect ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.util.ServletOutputStream org.springframework.web.util.ServletOutputStream ( ) java.io.IOException { if ( this . org.springframework.web.util.ServletOutputStream == null ) { this . org.springframework.web.util.ServletOutputStream = new org.springframework.web.util.ContentCachingResponseWrapper.ResponseServletOutputStream ( getResponse ( ) . getOutputStream ( ) ) ; } return this . org.springframework.web.util.ServletOutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.PrintWriter java.io.PrintWriter ( ) java.io.IOException { if ( this . java.io.PrintWriter == null ) { java.lang.String java.lang.String = getCharacterEncoding ( ) ; this . java.io.PrintWriter = ( java.lang.String != null ? new org.springframework.web.util.ContentCachingResponseWrapper.ResponsePrintWriter ( java.lang.String ) : new org.springframework.web.util.ContentCachingResponseWrapper.ResponsePrintWriter ( WebUtils . DEFAULT_CHARACTER_ENCODING ) ) ; } return this . java.io.PrintWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { if ( int > this . org.springframework.web.util.FastByteArrayOutputStream . size ( ) ) { this . org.springframework.web.util.FastByteArrayOutputStream . resize ( int ) ; } this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { if ( long > java.lang.Integer . int ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Integer . int + STRING + long ) ; } int int = ( int ) long ; if ( int > this . org.springframework.web.util.FastByteArrayOutputStream . size ( ) ) { this . org.springframework.web.util.FastByteArrayOutputStream . resize ( int ) ; } this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { if ( int > this . org.springframework.web.util.FastByteArrayOutputStream . size ( ) ) { this . org.springframework.web.util.FastByteArrayOutputStream . resize ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.util.FastByteArrayOutputStream . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. reset ( ) ; this . org.springframework.web.util.FastByteArrayOutputStream . reset ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return this . org.springframework.web.util.FastByteArrayOutputStream . toByteArray ( ) ; }  <METHOD_END>
<METHOD_START> public java.io.InputStream java.io.InputStream ( ) { return this . org.springframework.web.util.FastByteArrayOutputStream . getInputStream ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . org.springframework.web.util.FastByteArrayOutputStream . size ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { void ( true ) ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) throws java.io.IOException { if ( this . org.springframework.web.util.FastByteArrayOutputStream . size ( ) > NUMBER ) { HttpServletResponse org.springframework.web.util.HttpServletResponse = ( HttpServletResponse ) getResponse ( ) ; if ( ( boolean || this . java.lang.Integer != null ) && ! org.springframework.web.util.HttpServletResponse . isCommitted ( ) ) { org.springframework.web.util.HttpServletResponse . setContentLength ( boolean ? this . org.springframework.web.util.FastByteArrayOutputStream . size ( ) : this . java.lang.Integer ) ; this . java.lang.Integer = null ; } this . org.springframework.web.util.FastByteArrayOutputStream . writeTo ( org.springframework.web.util.HttpServletResponse . getOutputStream ( ) ) ; this . org.springframework.web.util.FastByteArrayOutputStream . reset ( ) ; if ( boolean ) { super. flushBuffer ( ) ; } } }  <METHOD_END>
<METHOD_START> public void ( ServletOutputStream org.springframework.web.util.ServletOutputStream ) { this . org.springframework.web.util.ServletOutputStream = org.springframework.web.util.ServletOutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.io.IOException { org.springframework.web.util.FastByteArrayOutputStream . write ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] , int int , int int ) throws java.io.IOException { org.springframework.web.util.FastByteArrayOutputStream . write ( byte[] , int , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.util.ServletOutputStream . isReady ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WriteListener org.springframework.web.util.WriteListener ) { this . org.springframework.web.util.ServletOutputStream . setWriteListener ( org.springframework.web.util.WriteListener ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) throws java.io.UnsupportedEncodingException { super( new java.io.OutputStreamWriter ( org.springframework.web.util.FastByteArrayOutputStream , java.lang.String ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( char char[] [] , int int , int int ) { super. void ( char[] , int , int ) ; super. void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int , int int ) { super. void ( java.lang.String , int , int ) ; super. void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { super. void ( int ) ; super. void ( ) ; }  <METHOD_END>
