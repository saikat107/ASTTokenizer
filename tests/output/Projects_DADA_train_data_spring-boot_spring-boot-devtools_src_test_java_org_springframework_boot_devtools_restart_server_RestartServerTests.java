<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.server.ExpectedException . expectMessage ( STRING ) ; new RestartServer ( ( SourceFolderUrlFilter ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING ) ; java.net.URL java.net.URL = new java.net.URL ( STRING ) ; java.net.URL java.net.URL = new java.net.URL ( STRING ) ; java.net.URL java.net.URL = new java.net.URL ( STRING ) ; java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { java.net.URL , java.net.URL } ) ; java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { java.net.URL , java.net.URL } , java.net.URLClassLoader ) ; SourceFolderUrlFilter org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter = new DefaultSourceFolderUrlFilter ( ) ; org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer = new org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer ( org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter , java.net.URLClassLoader ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.server.ClassLoaderFiles = new ClassLoaderFiles ( ) ; ClassLoaderFile org.springframework.boot.devtools.restart.server.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; ClassLoaderFile org.springframework.boot.devtools.restart.server.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; org.springframework.boot.devtools.restart.server.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.server.ClassLoaderFile ) ; org.springframework.boot.devtools.restart.server.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.server.ClassLoaderFile ) ; org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer . updateAndRestart ( org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) ; java.util.Set<java.net.URL> < java.net.URL > java.util.Set<java.net.URL> = new java.util.LinkedHashSet<java.net.URL> <> ( java.util.Arrays . java.util.List<java.net.URL> ( java.net.URL , java.net.URL ) ) ; assertThat ( org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer . java.util.Set<java.net.URL> ) . isEqualTo ( java.util.Set<java.net.URL> ) ; assertThat ( org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer . org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) . isEqualTo ( org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.lang.System . long ( ) ; java.io.File java.io.File = this . org.springframework.boot.devtools.restart.server.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; new java.io.FileOutputStream ( java.io.File ) . void ( ) ; java.io.File . boolean ( NUMBER ) ; java.net.URL java.net.URL = java.io.File . java.net.URI ( ) . java.net.URL ( ) ; java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { java.net.URL } ) ; SourceFolderUrlFilter org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter = new DefaultSourceFolderUrlFilter ( ) ; org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer = new org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer ( org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter , java.net.URLClassLoader ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.server.ClassLoaderFiles = new ClassLoaderFiles ( ) ; ClassLoaderFile org.springframework.boot.devtools.restart.server.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; org.springframework.boot.devtools.restart.server.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.server.ClassLoaderFile ) ; org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer . updateAndRestart ( org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) ; assertThat ( java.io.File . long ( ) ) . isGreaterThan ( long - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.restart.server.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; java.net.URL java.net.URL = java.io.File . java.net.URI ( ) . java.net.URL ( ) ; java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { java.net.URL } ) ; SourceFolderUrlFilter org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter = new DefaultSourceFolderUrlFilter ( ) ; org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer = new org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer ( org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter , java.net.URLClassLoader ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.server.ClassLoaderFiles = new ClassLoaderFiles ( ) ; ClassLoaderFile org.springframework.boot.devtools.restart.server.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , STRING . byte[] ( ) ) ; org.springframework.boot.devtools.restart.server.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.server.ClassLoaderFile ) ; org.springframework.boot.devtools.restart.server.RestartServerTests.MockRestartServer . updateAndRestart ( org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) ; assertThat ( FileCopyUtils . copyToByteArray ( java.io.File ) ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( SourceFolderUrlFilter org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter , java.lang.ClassLoader java.lang.ClassLoader ) { super( org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter , java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Set<java.net.URL> < java.net.URL > java.util.Set<java.net.URL> , ClassLoaderFiles org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) { this . java.util.Set<java.net.URL> = java.util.Set<java.net.URL> ; this . org.springframework.boot.devtools.restart.server.ClassLoaderFiles = org.springframework.boot.devtools.restart.server.ClassLoaderFiles ; }  <METHOD_END>
