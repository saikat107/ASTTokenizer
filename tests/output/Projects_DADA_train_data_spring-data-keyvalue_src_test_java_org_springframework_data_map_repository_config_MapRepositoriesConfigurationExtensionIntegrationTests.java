<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.map.repository.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.map.repository.config.MapRepositoriesConfigurationExtensionIntegrationTests.Config .class ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.data.map.repository.config.ConfigurableApplicationContext . getBeanDefinitionNames ( ) ) , hasItem ( STRING ) ) ; org.springframework.data.map.repository.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.map.repository.config.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.map.repository.config.MapRepositoriesConfigurationExtensionIntegrationTests.ConfigWithCustomTemplateReference .class ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.data.map.repository.config.ConfigurableApplicationContext . getBeanDefinitionNames ( ) ) , not ( hasItem ( STRING ) ) ) ; org.springframework.data.map.repository.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( java.util.concurrent.ConcurrentSkipListMap .class , new AnnotationConfigApplicationContext ( org.springframework.data.map.repository.config.MapRepositoriesConfigurationExtensionIntegrationTests.ConfigWithCustomizedMapType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( java.util.concurrent.ConcurrentHashMap .class , new AnnotationConfigApplicationContext ( org.springframework.data.map.repository.config.MapRepositoriesConfigurationExtensionIntegrationTests.ConfigWithCustomizedMapTypeAndExplicitDefinitionOfKeyValueTemplate .class ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , ApplicationContext org.springframework.data.map.repository.config.ApplicationContext ) { KeyValueTemplate org.springframework.data.map.repository.config.KeyValueTemplate = org.springframework.data.map.repository.config.ApplicationContext . getBean ( KeyValueTemplate .class ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.data.map.repository.config.KeyValueTemplate , STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( MapKeyValueAdapter .class ) ) ) ; assertThat ( ReflectionTestUtils . getField ( java.lang.Object , STRING ) , is ( instanceOf ( java.lang.Class<> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.map.repository.config.KeyValueTemplate org.springframework.data.map.repository.config.KeyValueTemplate ( ) { return new KeyValueTemplate ( new MapKeyValueAdapter ( ) ) ; }  <METHOD_END>
