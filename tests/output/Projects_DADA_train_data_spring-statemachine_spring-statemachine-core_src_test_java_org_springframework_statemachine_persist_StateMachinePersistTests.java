<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.persist.AnnotationConfigApplicationContext org.springframework.statemachine.persist.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config2 .class ) ; context . refresh ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . start ( ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist2 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist2 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist2 ( ) ; StateMachinePersister < TestStates , TestEvents , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist2 ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; org.springframework.statemachine.persist.StateMachinePersister<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 ) ) ; org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S3 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . put ( STRING , STRING ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . remove ( STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . get ( STRING , java.lang.String .class ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config3 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config4 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config51 .class , org.springframework.statemachine.persist.StateMachinePersistTests.Config52 .class ) ; context . refresh ( ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config61 .class , org.springframework.statemachine.persist.StateMachinePersistTests.Config62 .class ) ; context . refresh ( ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> ) ; assertThat ( java.lang.Object , is ( STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; java.lang.Object = java.lang.Object ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> ) ; assertThat ( java.lang.Object , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config71 .class , org.springframework.statemachine.persist.StateMachinePersistTests.Config72 .class ) ; context . refresh ( ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests.Config8 .class ) ; context . refresh ( ) ; org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests.InMemoryStateMachinePersist1 ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> = context . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . isComplete ( ) , is ( true ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . isComplete ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . state ( STRING ) . history ( STRING , History . SHALLOW ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . history ( STRING , History . SHALLOW ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . history ( STRING , History . SHALLOW ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . end ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> , java.lang.String java.lang.String ) throws java.lang.Exception { java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String>> . put ( java.lang.String , org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) throws java.lang.Exception { return java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String>> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> , java.lang.String java.lang.String ) throws java.lang.Exception { java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . put ( java.lang.String , org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents> ( java.lang.String java.lang.String ) throws java.lang.Exception { return java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<org.springframework.statemachine.persist.TestStates,org.springframework.statemachine.persist.TestEvents>> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.lang.Exception { java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.lang.Object ) ; if ( java.lang.Object instanceof HistoryPseudoState ) { java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.lang.Object ) ; if ( java.lang.Object != null ) { return TestUtils . callMethod ( STRING , java.lang.Object ) ; } } return null ; }  <METHOD_END>
