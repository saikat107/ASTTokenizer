<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . java.lang.String = STRING + this . int ; this . java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; this . java.nio.channels.WritableByteChannel = java.nio.channels.Channels . java.nio.channels.WritableByteChannel ( this . java.io.ByteArrayOutputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelConnection ( null , this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelConnection ( STRING , this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelConnection ( STRING , this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.client.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelConnection ( this . java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . willRespondAfterDelay ( NUMBER , HttpStatus . GONE ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = org.springframework.boot.devtools.tunnel.client.TunnelChannel ( false ) ; assertThat ( java.nio.channels.WritableByteChannel . boolean ( ) ) . isTrue ( ) ; java.nio.channels.WritableByteChannel . void ( ) ; assertThat ( java.nio.channels.WritableByteChannel . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . willRespondAfterDelay ( NUMBER , HttpStatus . GONE ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = org.springframework.boot.devtools.tunnel.client.TunnelChannel ( false ) ; verify ( this . java.io.Closeable , never ( ) ) . close ( ) ; java.nio.channels.WritableByteChannel . void ( ) ; java.nio.channels.WritableByteChannel . void ( ) ; verify ( this . java.io.Closeable , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . willRespond ( STRING , STRING , STRING ) ; TunnelChannel org.springframework.boot.devtools.tunnel.client.TunnelChannel = org.springframework.boot.devtools.tunnel.client.TunnelChannel ( true ) ; void ( org.springframework.boot.devtools.tunnel.client.TunnelChannel , STRING ) ; void ( org.springframework.boot.devtools.tunnel.client.TunnelChannel , STRING ) ; void ( org.springframework.boot.devtools.tunnel.client.TunnelChannel , STRING ) ; assertThat ( this . java.io.ByteArrayOutputStream . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . willRespond ( HttpStatus . NO_CONTENT ) ; } this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . willRespond ( STRING ) ; TunnelChannel org.springframework.boot.devtools.tunnel.client.TunnelChannel = org.springframework.boot.devtools.tunnel.client.TunnelChannel ( true ) ; void ( org.springframework.boot.devtools.tunnel.client.TunnelChannel , STRING ) ; assertThat ( this . java.io.ByteArrayOutputStream . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . getExecutedRequests ( ) . size ( ) ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . willRespond ( HttpStatus . SERVICE_UNAVAILABLE ) ; TunnelChannel org.springframework.boot.devtools.tunnel.client.TunnelChannel = org.springframework.boot.devtools.tunnel.client.TunnelChannel ( true ) ; assertThat ( org.springframework.boot.devtools.tunnel.client.TunnelChannel . isOpen ( ) ) . isFalse ( ) ; this . org.springframework.boot.devtools.tunnel.client.OutputCapture . expect ( containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory . willRespond ( new java.net.ConnectException ( ) ) ; TunnelChannel org.springframework.boot.devtools.tunnel.client.TunnelChannel = org.springframework.boot.devtools.tunnel.client.TunnelChannel ( true ) ; assertThat ( org.springframework.boot.devtools.tunnel.client.TunnelChannel . isOpen ( ) ) . isFalse ( ) ; this . org.springframework.boot.devtools.tunnel.client.OutputCapture . expect ( containsString ( STRING + this . int ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( TunnelChannel org.springframework.boot.devtools.tunnel.client.TunnelChannel , java.lang.String java.lang.String ) throws java.io.IOException { org.springframework.boot.devtools.tunnel.client.TunnelChannel . write ( java.nio.ByteBuffer . java.nio.ByteBuffer ( java.lang.String . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.tunnel.client.TunnelChannel org.springframework.boot.devtools.tunnel.client.TunnelChannel ( boolean boolean ) throws java.lang.Exception { HttpTunnelConnection org.springframework.boot.devtools.tunnel.client.HttpTunnelConnection = new HttpTunnelConnection ( this . java.lang.String , this . org.springframework.boot.devtools.tunnel.client.MockClientHttpRequestFactory , ( boolean ? new org.springframework.boot.devtools.tunnel.client.HttpTunnelConnectionTests.CurrentThreadExecutor ( ) : null ) ) ; return org.springframework.boot.devtools.tunnel.client.HttpTunnelConnection . open ( this . java.nio.channels.WritableByteChannel , this . java.io.Closeable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { java.lang.Runnable . void ( ) ; }  <METHOD_END>
