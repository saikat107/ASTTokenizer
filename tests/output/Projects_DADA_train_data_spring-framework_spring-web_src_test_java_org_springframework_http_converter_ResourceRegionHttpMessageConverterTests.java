<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canRead ( Resource .class , MediaType . APPLICATION_OCTET_STREAM ) ) ; assertFalse ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canRead ( Resource .class , MediaType . ALL ) ) ; assertFalse ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canRead ( java.util.List .class , MediaType . APPLICATION_OCTET_STREAM ) ) ; assertFalse ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canRead ( java.util.List .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canWrite ( ResourceRegion .class , null , MediaType . APPLICATION_OCTET_STREAM ) ) ; assertTrue ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canWrite ( ResourceRegion .class , null , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Type java.lang.reflect.Type = new ParameterizedTypeReference < java.util.List<org.springframework.http.converter.ResourceRegion> < ResourceRegion > > ( ) {} . getType ( ) ; assertTrue ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canWrite ( java.lang.reflect.Type , null , MediaType . APPLICATION_OCTET_STREAM ) ) ; assertTrue ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canWrite ( java.lang.reflect.Type , null , MediaType . ALL ) ) ; assertFalse ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canWrite ( java.util.List .class , MediaType . APPLICATION_OCTET_STREAM ) ) ; assertFalse ( org.springframework.http.converter.ResourceRegionHttpMessageConverter . canWrite ( java.util.List .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.ResourceRegionHttpMessageConverterTests> ( ) ) ; ResourceRegion org.springframework.http.converter.ResourceRegion = HttpRange . createByteRange ( NUMBER , NUMBER ) . toResourceRegion ( org.springframework.http.converter.Resource ) ; org.springframework.http.converter.ResourceRegionHttpMessageConverter . write ( org.springframework.http.converter.ResourceRegion , MediaType . TEXT_PLAIN , org.springframework.http.converter.MockHttpOutputMessage ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) ; assertThat ( org.springframework.http.converter.HttpHeaders . getContentType ( ) , is ( MediaType . TEXT_PLAIN ) ) ; assertThat ( org.springframework.http.converter.HttpHeaders . getContentLength ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.http.converter.HttpHeaders . get ( HttpHeaders . CONTENT_RANGE ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.http.converter.HttpHeaders . get ( HttpHeaders . CONTENT_RANGE ) . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.ResourceRegionHttpMessageConverterTests> ( ) ) ; ResourceRegion org.springframework.http.converter.ResourceRegion = HttpRange . createByteRange ( NUMBER ) . toResourceRegion ( org.springframework.http.converter.Resource ) ; org.springframework.http.converter.ResourceRegionHttpMessageConverter . write ( org.springframework.http.converter.ResourceRegion , MediaType . TEXT_PLAIN , org.springframework.http.converter.MockHttpOutputMessage ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) ; assertThat ( org.springframework.http.converter.HttpHeaders . getContentType ( ) , is ( MediaType . TEXT_PLAIN ) ) ; assertThat ( org.springframework.http.converter.HttpHeaders . getContentLength ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.http.converter.HttpHeaders . get ( HttpHeaders . CONTENT_RANGE ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.http.converter.HttpHeaders . get ( HttpHeaders . CONTENT_RANGE ) . get ( NUMBER ) , is ( STRING ) ) ; assertThat ( org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.ResourceRegionHttpMessageConverterTests> ( ) ) ; java.util.List<org.springframework.http.converter.HttpRange> < HttpRange > java.util.List<org.springframework.http.converter.HttpRange> = HttpRange . parseRanges ( STRING ) ; java.util.List<org.springframework.http.converter.ResourceRegion> < ResourceRegion > java.util.List<org.springframework.http.converter.ResourceRegion> = new java.util.ArrayList<org.springframework.http.converter.ResourceRegion> <> ( ) ; for( HttpRange org.springframework.http.converter.HttpRange : java.util.List<org.springframework.http.converter.HttpRange> ) { java.util.List<org.springframework.http.converter.ResourceRegion> . add ( org.springframework.http.converter.HttpRange . toResourceRegion ( org.springframework.http.converter.Resource ) ) ; } org.springframework.http.converter.ResourceRegionHttpMessageConverter . write ( java.util.List<org.springframework.http.converter.ResourceRegion> , MediaType . TEXT_PLAIN , org.springframework.http.converter.MockHttpOutputMessage ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) ; assertThat ( org.springframework.http.converter.HttpHeaders . getContentType ( ) . toString ( ) , Matchers . startsWith ( STRING ) ) ; java.lang.String java.lang.String = STRING + org.springframework.http.converter.HttpHeaders . getContentType ( ) . toString ( ) . substring ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING , false , true ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( java.lang.String ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( java.lang.String ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( java.lang.String ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( java.lang.String ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; ClassPathResource org.springframework.http.converter.ClassPathResource = Mockito . mock ( ClassPathResource .class ) ; BDDMockito . given ( org.springframework.http.converter.ClassPathResource . getFilename ( ) ) . willReturn ( STRING ) ; BDDMockito . given ( org.springframework.http.converter.ClassPathResource . contentLength ( ) ) . willReturn ( NUMBER ) ; BDDMockito . given ( org.springframework.http.converter.ClassPathResource . getInputStream ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; HttpRange org.springframework.http.converter.HttpRange = HttpRange . createByteRange ( NUMBER , NUMBER ) ; ResourceRegion org.springframework.http.converter.ResourceRegion = org.springframework.http.converter.HttpRange . toResourceRegion ( org.springframework.http.converter.ClassPathResource ) ; org.springframework.http.converter.ResourceRegionHttpMessageConverter . write ( java.util.Collections . java.util.List ( org.springframework.http.converter.ResourceRegion ) , null , org.springframework.http.converter.MockHttpOutputMessage ) ; assertThat ( org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) , is ( MediaType . APPLICATION_OCTET_STREAM ) ) ; assertThat ( org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getFirst ( HttpHeaders . CONTENT_RANGE ) , is ( STRING ) ) ; assertThat ( org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , is ( STRING ) ) ; }  <METHOD_END>
