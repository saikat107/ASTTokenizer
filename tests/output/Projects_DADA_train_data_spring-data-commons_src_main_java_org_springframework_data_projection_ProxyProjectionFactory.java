<METHOD_START> protected void ( ) { this . java.util.List<org.springframework.data.projection.MethodInterceptorFactory> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.data.projection.MethodInterceptorFactory> . add ( org.springframework.data.projection.ProxyProjectionFactory.MapAccessingMethodInterceptorFactory . org.springframework.data.projection.ProxyProjectionFactory.MapAccessingMethodInterceptorFactory ) ; this . java.util.List<org.springframework.data.projection.MethodInterceptorFactory> . add ( org.springframework.data.projection.ProxyProjectionFactory.PropertyAccessingMethodInvokerFactory . org.springframework.data.projection.ProxyProjectionFactory.PropertyAccessingMethodInvokerFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public void void ( ResourceLoader org.springframework.data.projection.ResourceLoader ) { this . java.lang.ClassLoader = org.springframework.data.projection.ResourceLoader . getClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public void void ( MethodInterceptorFactory org.springframework.data.projection.MethodInterceptorFactory ) { Assert . notNull ( org.springframework.data.projection.MethodInterceptorFactory , STRING ) ; this . java.util.List<org.springframework.data.projection.MethodInterceptorFactory> . add ( NUMBER , org.springframework.data.projection.MethodInterceptorFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . isTrue ( java.lang.Class<T> . boolean ( ) , STRING ) ; if ( java.lang.Object == null ) { return null ; } ProxyFactory org.springframework.data.projection.ProxyFactory = new ProxyFactory ( ) ; org.springframework.data.projection.ProxyFactory . setTarget ( java.lang.Object ) ; org.springframework.data.projection.ProxyFactory . setOpaque ( true ) ; org.springframework.data.projection.ProxyFactory . setInterfaces ( java.lang.Class<T> , TargetAware .class ) ; if ( boolean ) { org.springframework.data.projection.ProxyFactory . addAdvice ( new DefaultMethodInvokingMethodInterceptor ( ) ) ; } org.springframework.data.projection.ProxyFactory . addAdvice ( new org.springframework.data.projection.ProxyProjectionFactory.TargetAwareMethodInterceptor ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; org.springframework.data.projection.ProxyFactory . addAdvice ( org.springframework.data.projection.MethodInterceptor ( java.lang.Object , java.lang.Class<T> ) ) ; return ( T ) org.springframework.data.projection.ProxyFactory . getProxy ( java.lang.ClassLoader == null ? ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; return T ( java.lang.Class<T> , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : org.springframework.data.projection.ProjectionInformation ( java.lang.Class<> ) . getInputProperties ( ) ) { java.util.List<java.lang.String> . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.projection.ProjectionInformation org.springframework.data.projection.ProjectionInformation ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new DefaultProjectionInformation ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.projection.MethodInterceptor org.springframework.data.projection.MethodInterceptor ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { MethodInterceptor org.springframework.data.projection.MethodInterceptor = org.springframework.data.projection.MethodInterceptorFactory ( java.lang.Object , java.lang.Class<> ) . createMethodInterceptor ( java.lang.Object , java.lang.Class<> ) ; return new ProjectingMethodInterceptor ( this , org.springframework.data.projection.MethodInterceptor ( org.springframework.data.projection.MethodInterceptor , java.lang.Object , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.projection.MethodInterceptorFactory org.springframework.data.projection.MethodInterceptorFactory ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( MethodInterceptorFactory org.springframework.data.projection.MethodInterceptorFactory : java.util.List<org.springframework.data.projection.MethodInterceptorFactory> ) { if ( org.springframework.data.projection.MethodInterceptorFactory . supports ( java.lang.Object , java.lang.Class<> ) ) { return org.springframework.data.projection.MethodInterceptorFactory ; } } throw new java.lang.IllegalStateException ( STRING . java.lang.String ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.projection.MethodInterceptor org.springframework.data.projection.MethodInterceptor ( MethodInterceptor org.springframework.data.projection.MethodInterceptor , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.projection.MethodInterceptor ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.projection.MethodInvocation ) throws java.lang.Throwable { if ( org.springframework.data.projection.MethodInvocation . getMethod ( ) . equals ( java.lang.reflect.Method ) ) { return java.lang.Class<> ; } else if ( org.springframework.data.projection.MethodInvocation . getMethod ( ) . equals ( java.lang.reflect.Method ) ) { return org.springframework.data.projection.MethodInvocation . getThis ( ) ; } return org.springframework.data.projection.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.projection.MethodInterceptor org.springframework.data.projection.MethodInterceptor ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { return new MapAccessingMethodInterceptor ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map .class . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.projection.MethodInterceptor org.springframework.data.projection.MethodInterceptor ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { return new PropertyAccessingMethodInterceptor ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
