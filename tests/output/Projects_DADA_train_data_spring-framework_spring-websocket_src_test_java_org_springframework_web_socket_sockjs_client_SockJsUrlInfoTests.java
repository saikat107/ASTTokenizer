<METHOD_START> @ Test public void void ( ) java.lang.Exception { SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo = new SockJsUrlInfo ( new java.net.URI ( STRING ) ) ; int int = java.lang.Integer . java.lang.Integer ( org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getServerId ( ) ) ; assertTrue ( STRING + int , int >= NUMBER && int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo = new SockJsUrlInfo ( new java.net.URI ( STRING ) ) ; assertEquals ( STRING + org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getSessionId ( ) , NUMBER , org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getSessionId ( ) . length ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo = new SockJsUrlInfo ( new java.net.URI ( java.lang.String + STRING ) ) ; Assert . assertThat ( org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getInfoUrl ( ) , is ( equalTo ( new java.net.URI ( java.lang.String + STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , TransportType . XHR_STREAMING ) ; void ( STRING , STRING , TransportType . WEBSOCKET ) ; void ( STRING , STRING , TransportType . XHR_STREAMING ) ; void ( STRING , STRING , TransportType . WEBSOCKET ) ; void ( STRING , STRING , TransportType . XHR_STREAMING ) ; void ( STRING , STRING , TransportType . WEBSOCKET ) ; void ( STRING , STRING , TransportType . XHR_STREAMING ) ; void ( STRING , STRING , TransportType . WEBSOCKET ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , TransportType org.springframework.web.socket.sockjs.client.TransportType ) throws java.lang.Exception { SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo = new SockJsUrlInfo ( new java.net.URI ( java.lang.String + STRING ) ) ; java.lang.String java.lang.String = org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getServerId ( ) ; java.lang.String java.lang.String = org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getSessionId ( ) ; java.lang.String java.lang.String = org.springframework.web.socket.sockjs.client.TransportType . toString ( ) . toLowerCase ( ) ; java.net.URI java.net.URI = new java.net.URI ( java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String ) ; assertThat ( org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getTransportUrl ( org.springframework.web.socket.sockjs.client.TransportType ) , equalTo ( java.net.URI ) ) ; }  <METHOD_END>
