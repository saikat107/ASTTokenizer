<METHOD_START> public void ( int int , TunnelConnection org.springframework.boot.devtools.tunnel.client.TunnelConnection ) { Assert . isTrue ( int > NUMBER , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.tunnel.client.TunnelConnection , STRING ) ; this . int = int ; this . org.springframework.boot.devtools.tunnel.client.TunnelConnection = org.springframework.boot.devtools.tunnel.client.TunnelConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread == null ) { try { void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } } } }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { synchronized ( this . java.lang.Object ) { Assert . state ( this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread == null , STRING ) ; java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel = java.nio.channels.ServerSocketChannel . java.nio.channels.ServerSocketChannel ( ) ; java.nio.channels.ServerSocketChannel . java.net.ServerSocket ( ) . void ( new java.net.InetSocketAddress ( this . int ) ) ; org.springframework.boot.devtools.tunnel.client.Log . trace ( STRING + this . int ) ; this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread = new org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread ( java.nio.channels.ServerSocketChannel ) ; this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread != null ) { org.springframework.boot.devtools.tunnel.client.Log . trace ( STRING + this . int ) ; this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread . void ( ) ; try { this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread = null ; } } }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread ( ) { synchronized ( this . java.lang.Object ) { return this . org.springframework.boot.devtools.tunnel.client.TunnelClient.ServerThread ; } }  <METHOD_END>
<METHOD_START> public void void ( TunnelClientListener org.springframework.boot.devtools.tunnel.client.TunnelClientListener ) { this . org.springframework.boot.devtools.tunnel.client.TunnelClientListeners . addListener ( org.springframework.boot.devtools.tunnel.client.TunnelClientListener ) ; }  <METHOD_END>
<METHOD_START> public void void ( TunnelClientListener org.springframework.boot.devtools.tunnel.client.TunnelClientListener ) { this . org.springframework.boot.devtools.tunnel.client.TunnelClientListeners . removeListener ( org.springframework.boot.devtools.tunnel.client.TunnelClientListener ) ; }  <METHOD_END>
<METHOD_START> public void ( java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel ) { this . java.nio.channels.ServerSocketChannel = java.nio.channels.ServerSocketChannel ; void ( STRING ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { this . java.nio.channels.ServerSocketChannel . void ( ) ; this . boolean = false ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { while ( this . boolean ) { java.nio.channels.SocketChannel java.nio.channels.SocketChannel = this . java.nio.channels.ServerSocketChannel . java.nio.channels.SocketChannel ( ) ; try { void ( java.nio.channels.SocketChannel ) ; } catch ( java.nio.channels.AsynchronousCloseException java.nio.channels.AsynchronousCloseException ) { } finally { java.nio.channels.SocketChannel . void ( ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.devtools.tunnel.client.Log . trace ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.nio.channels.SocketChannel java.nio.channels.SocketChannel ) throws java.lang.Exception { java.io.Closeable java.io.Closeable = new org.springframework.boot.devtools.tunnel.client.TunnelClient.SocketCloseable ( java.nio.channels.SocketChannel ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = org.springframework.boot.devtools.tunnel.client.TunnelClient .this . org.springframework.boot.devtools.tunnel.client.TunnelConnection . open ( java.nio.channels.SocketChannel , java.io.Closeable ) ; org.springframework.boot.devtools.tunnel.client.TunnelClient .this . org.springframework.boot.devtools.tunnel.client.TunnelClientListeners . fireOpenEvent ( java.nio.channels.SocketChannel ) ; try { org.springframework.boot.devtools.tunnel.client.Log . trace ( STRING + java.nio.channels.SocketChannel . java.net.Socket ( ) . java.net.SocketAddress ( ) ) ; while ( true ) { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; int int = java.nio.channels.SocketChannel . int ( java.nio.ByteBuffer ) ; if ( int == - NUMBER ) { java.nio.channels.WritableByteChannel . void ( ) ; return; } if ( int > NUMBER ) { java.nio.ByteBuffer . java.nio.Buffer ( ) ; java.nio.channels.WritableByteChannel . int ( java.nio.ByteBuffer ) ; } } } finally { java.nio.channels.WritableByteChannel . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> void ( java.nio.channels.SocketChannel java.nio.channels.SocketChannel ) { this . java.nio.channels.SocketChannel = java.nio.channels.SocketChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { if ( ! this . boolean ) { this . java.nio.channels.SocketChannel . void ( ) ; org.springframework.boot.devtools.tunnel.client.TunnelClient .this . org.springframework.boot.devtools.tunnel.client.TunnelClientListeners . fireCloseEvent ( this . java.nio.channels.SocketChannel ) ; this . boolean = true ; } }  <METHOD_END>
