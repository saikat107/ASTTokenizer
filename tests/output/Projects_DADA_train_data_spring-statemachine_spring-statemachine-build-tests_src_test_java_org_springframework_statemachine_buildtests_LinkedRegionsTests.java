<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.buildtests.LinkedRegionsTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.buildtests.LinkedRegionsTests.TestListener org.springframework.statemachine.buildtests.LinkedRegionsTests.TestListener = new org.springframework.statemachine.buildtests.LinkedRegionsTests.TestListener ( ) ; org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.buildtests.LinkedRegionsTests.TestListener ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; assertThat ( org.springframework.statemachine.buildtests.LinkedRegionsTests.TestListener . java.util.ArrayList<java.lang.String> , not ( hasItem ( startsWith ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.buildtests.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.buildtests.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.buildtests.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.State<java.lang.String,java.lang.String> ) { java.util.ArrayList<java.lang.String> . boolean ( org.springframework.statemachine.buildtests.State<java.lang.String,java.lang.String> . getId ( ) ) ; if ( org.springframework.statemachine.buildtests.State<java.lang.String,java.lang.String> . getId ( ) . startsWith ( STRING ) ) { java.lang.System . java.io.PrintStream . void ( org.springframework.statemachine.buildtests.State<java.lang.String,java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> void void ( ) { java.util.ArrayList<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.System . java.io.PrintStream :: void ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.buildtests.AnnotationConfigApplicationContext org.springframework.statemachine.buildtests.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
