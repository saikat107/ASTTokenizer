<METHOD_START> @ Test public void void ( ) { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = SQLErrorCodesFactory . getInstance ( ) . getErrorCodes ( STRING ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) . length == NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) . length == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = SQLErrorCodesFactory . getInstance ( ) . getErrorCodes ( STRING ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> private void void ( SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ) { assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) . length > NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertFalse ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ) { assertThat ( org.springframework.jdbc.support.SQLErrorCodes . getDatabaseProductName ( ) , equalTo ( STRING ) ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertFalse ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getPermissionDeniedCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getPermissionDeniedCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDuplicateKeyCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDuplicateKeyCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDuplicateKeyCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDataAccessResourceFailureCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDataAccessResourceFailureCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getCannotAcquireLockCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getCannotAcquireLockCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDeadlockLoserCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDeadlockLoserCodes ( ) , STRING ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ) { assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) . length > NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertFalse ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ) { assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) . length > NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) . length > NUMBER ) ; assertFalse ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ) { assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) . length > NUMBER ) ; assertTrue ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) . length > NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getPermissionDeniedCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDuplicateKeyCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDataAccessResourceFailureCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getInvalidResultSetAccessCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getCannotAcquireLockCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getCannotSerializeTransactionCodes ( ) , STRING ) >= NUMBER ) ; assertTrue ( java.util.Arrays . int ( org.springframework.jdbc.support.SQLErrorCodes . getDeadlockLoserCodes ( ) , STRING ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class TestSQLErrorCodesFactory extends SQLErrorCodesFactory { private int int = NUMBER ; @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { ++ int ; if ( int == NUMBER ) { assertEquals ( SQLErrorCodesFactory . SQL_ERROR_CODE_DEFAULT_PATH , java.lang.String ) ; return null ; } else { assertEquals ( NUMBER , int ) ; assertEquals ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH , java.lang.String ) ; return null ; } } } TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory ( ) ; assertTrue ( sf . getErrorCodes ( STRING ) . getBadSqlGrammarCodes ( ) . length == NUMBER ) ; assertTrue ( sf . getErrorCodes ( STRING ) . getDataIntegrityViolationCodes ( ) . length == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { ++ int ; if ( int == NUMBER ) { assertEquals ( SQLErrorCodesFactory . SQL_ERROR_CODE_DEFAULT_PATH , java.lang.String ) ; return null ; } else { assertEquals ( NUMBER , int ) ; assertEquals ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH , java.lang.String ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class TestSQLErrorCodesFactory extends SQLErrorCodesFactory { @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; } } TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory ( ) ; assertTrue ( sf . getErrorCodes ( STRING ) . getBadSqlGrammarCodes ( ) . length == NUMBER ) ; assertEquals ( NUMBER , sf . getErrorCodes ( STRING ) . getBadSqlGrammarCodes ( ) . length ) ; assertEquals ( STRING , sf . getErrorCodes ( STRING ) . getBadSqlGrammarCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , sf . getErrorCodes ( STRING ) . getBadSqlGrammarCodes ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class TestSQLErrorCodesFactory extends SQLErrorCodesFactory { @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; } } TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory ( ) ; assertTrue ( sf . getErrorCodes ( STRING ) . getBadSqlGrammarCodes ( ) . length == NUMBER ) ; assertEquals ( NUMBER , sf . getErrorCodes ( STRING ) . getBadSqlGrammarCodes ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class TestSQLErrorCodesFactory extends SQLErrorCodesFactory { @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; } } TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory ( ) ; assertEquals ( NUMBER , sf . getErrorCodes ( STRING ) . getCustomTranslations ( ) . length ) ; CustomSQLErrorCodesTranslation org.springframework.jdbc.support.CustomSQLErrorCodesTranslation = sf . getErrorCodes ( STRING ) . getCustomTranslations ( ) [ NUMBER ] ; assertEquals ( CustomErrorCodeException .class , org.springframework.jdbc.support.CustomSQLErrorCodesTranslation . getExceptionClass ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.support.CustomSQLErrorCodesTranslation . getErrorCodes ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = SQLErrorCodesFactory . getInstance ( ) . getErrorCodes ( javax.sql.DataSource ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( ) ; javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willThrow ( java.sql.SQLException ) ; SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = SQLErrorCodesFactory . getInstance ( ) . getErrorCodes ( javax.sql.DataSource ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> private void void ( SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ) { assertEquals ( NUMBER , org.springframework.jdbc.support.SQLErrorCodes . getBadSqlGrammarCodes ( ) . length ) ; assertEquals ( NUMBER , org.springframework.jdbc.support.SQLErrorCodes . getDataIntegrityViolationCodes ( ) . length ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jdbc.support.SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ( java.lang.String java.lang.String , SQLErrorCodesFactory org.springframework.jdbc.support.SQLErrorCodesFactory ) throws java.lang.Exception { java.sql.DatabaseMetaData java.sql.DatabaseMetaData = mock ( java.sql.DatabaseMetaData .class ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( java.lang.String ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( java.sql.Connection . java.sql.DatabaseMetaData ( ) ) . willReturn ( java.sql.DatabaseMetaData ) ; javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; SQLErrorCodesFactory org.springframework.jdbc.support.SQLErrorCodesFactory = null ; if ( org.springframework.jdbc.support.SQLErrorCodesFactory != null ) { org.springframework.jdbc.support.SQLErrorCodesFactory = org.springframework.jdbc.support.SQLErrorCodesFactory ; } else { org.springframework.jdbc.support.SQLErrorCodesFactory = SQLErrorCodesFactory . getInstance ( ) ; } SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodesFactory . getErrorCodes ( javax.sql.DataSource ) ; SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodesFactory . getErrorCodes ( javax.sql.DataSource ) ; assertSame ( STRING , org.springframework.jdbc.support.SQLErrorCodes , org.springframework.jdbc.support.SQLErrorCodes ) ; verify ( java.sql.Connection ) . close ( ) ; return org.springframework.jdbc.support.SQLErrorCodes ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , null ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , null ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , null ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , null ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , null ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , null ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , null ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory { @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; } } WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory ( ) ; SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( STRING , factory ) ; void ( org.springframework.jdbc.support.SQLErrorCodes ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { if ( SQLErrorCodesFactory . SQL_ERROR_CODE_OVERRIDE_PATH . equals ( java.lang.String ) ) { return new ClassPathResource ( STRING , org.springframework.jdbc.support.SQLErrorCodesFactoryTests .class ) ; } return null ; }  <METHOD_END>
