<METHOD_START> public void ( java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> < java.lang.String , java.util.Set<java.util.regex.Pattern> < java.util.regex.Pattern > > java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> ) { this( java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> , null ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> < java.lang.String , java.util.Set<java.util.regex.Pattern> < java.util.regex.Pattern > > java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> , java.util.Map<java.lang.String,java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy>> < java.lang.String , java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> < java.util.regex.Pattern , ChannelAccessPolicy > > java.util.Map<java.lang.String,java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy>> ) { this . java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> = java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> ; this . java.util.Map<java.lang.String,java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy>> = java.util.Map<java.lang.String,java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( this . java.util.Map<java.lang.String,java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy>> != null && java.lang.Object instanceof ChannelSecurityInterceptor && this . java.util.Map<java.lang.String,java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy>> . containsKey ( java.lang.String ) ) { java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> < java.util.regex.Pattern , ChannelAccessPolicy > java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> = this . java.util.Map<java.lang.String,java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy>> . get ( java.lang.String ) ; ChannelSecurityMetadataSource org.springframework.integration.security.config.ChannelSecurityMetadataSource = ( ChannelSecurityMetadataSource ) ( ( ChannelSecurityInterceptor ) java.lang.Object ) . obtainSecurityMetadataSource ( ) ; for ( java.util.Map . java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> < java.util.regex.Pattern , ChannelAccessPolicy > java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> : java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> . entrySet ( ) ) { org.springframework.integration.security.config.ChannelSecurityMetadataSource . addPatternMapping ( java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> . getKey ( ) , java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> . getValue ( ) ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object [] java.lang.Object[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , TargetSource org.springframework.integration.security.config.TargetSource ) throws org.springframework.integration.security.config.BeansException { if ( MessageChannel .class . boolean ( java.lang.Class<> ) ) { java.util.List<org.springframework.integration.security.config.Advisor> < Advisor > java.util.List<org.springframework.integration.security.config.Advisor> = new java.util.ArrayList<org.springframework.integration.security.config.Advisor> < Advisor > ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.Set<java.util.regex.Pattern>> < java.lang.String , java.util.Set<java.util.regex.Pattern> < java.util.regex.Pattern > > java.util.Map.Entry<java.lang.String,java.util.Set<java.util.regex.Pattern>> : this . java.util.Map<java.lang.String,java.util.Set<java.util.regex.Pattern>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.Set<java.util.regex.Pattern>>> ( ) ) { if ( boolean ( java.lang.String , java.util.Map.Entry<java.lang.String,java.util.Set<java.util.regex.Pattern>> . java.util.Set<java.util.regex.Pattern> ( ) ) ) { DefaultBeanFactoryPointcutAdvisor org.springframework.integration.security.config.DefaultBeanFactoryPointcutAdvisor = new DefaultBeanFactoryPointcutAdvisor ( ) ; org.springframework.integration.security.config.DefaultBeanFactoryPointcutAdvisor . setAdviceBeanName ( java.util.Map.Entry<java.lang.String,java.util.Set<java.util.regex.Pattern>> . java.lang.String ( ) ) ; org.springframework.integration.security.config.DefaultBeanFactoryPointcutAdvisor . setBeanFactory ( getBeanFactory ( ) ) ; java.util.List<org.springframework.integration.security.config.Advisor> . add ( org.springframework.integration.security.config.DefaultBeanFactoryPointcutAdvisor ) ; } } if ( ! java.util.List<org.springframework.integration.security.config.Advisor> . isEmpty ( ) ) { return java.util.List<org.springframework.integration.security.config.Advisor> . toArray ( ) ; } } return DO_NOT_PROXY ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.util.Set<java.util.regex.Pattern> < java.util.regex.Pattern > java.util.Set<java.util.regex.Pattern> ) { for ( java.util.regex.Pattern java.util.regex.Pattern : java.util.Set<java.util.regex.Pattern> ) { if ( java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) { return true ; } } return false ; }  <METHOD_END>
