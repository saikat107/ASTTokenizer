<METHOD_START> public void ( AbstractBeanFactory org.springframework.beans.factory.support.AbstractBeanFactory , java.lang.String java.lang.String , BeanDefinition org.springframework.beans.factory.support.BeanDefinition , TypeConverter org.springframework.beans.factory.support.TypeConverter ) { this . org.springframework.beans.factory.support.AbstractBeanFactory = org.springframework.beans.factory.support.AbstractBeanFactory ; this . java.lang.String = java.lang.String ; this . org.springframework.beans.factory.support.BeanDefinition = org.springframework.beans.factory.support.BeanDefinition ; this . org.springframework.beans.factory.support.TypeConverter = org.springframework.beans.factory.support.TypeConverter ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof RuntimeBeanReference ) { RuntimeBeanReference org.springframework.beans.factory.support.RuntimeBeanReference = ( RuntimeBeanReference ) java.lang.Object ; return java.lang.Object ( java.lang.Object , org.springframework.beans.factory.support.RuntimeBeanReference ) ; } else if ( java.lang.Object instanceof RuntimeBeanNameReference ) { java.lang.String java.lang.String = ( ( RuntimeBeanNameReference ) java.lang.Object ) . getBeanName ( ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.Object ( java.lang.String ) ) ; if ( ! this . org.springframework.beans.factory.support.AbstractBeanFactory . containsBean ( java.lang.String ) ) { throw new BeanDefinitionStoreException ( STRING + java.lang.String + STRING + java.lang.Object ) ; } return java.lang.String ; } else if ( java.lang.Object instanceof BeanDefinitionHolder ) { BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder = ( BeanDefinitionHolder ) java.lang.Object ; return java.lang.Object ( java.lang.Object , org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanName ( ) , org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanDefinition ( ) ) ; } else if ( java.lang.Object instanceof BeanDefinition ) { BeanDefinition org.springframework.beans.factory.support.BeanDefinition = ( BeanDefinition ) java.lang.Object ; java.lang.String java.lang.String = STRING + BeanFactoryUtils . GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils . getIdentityHexString ( org.springframework.beans.factory.support.BeanDefinition ) ; return java.lang.Object ( java.lang.Object , java.lang.String , org.springframework.beans.factory.support.BeanDefinition ) ; } else if ( java.lang.Object instanceof ManagedArray ) { ManagedArray org.springframework.beans.factory.support.ManagedArray = ( ManagedArray ) java.lang.Object ; java.lang.Class<?> < ? > java.lang.Class<?> = array . resolvedElementType ; if ( java.lang.Class<> == null ) { java.lang.String java.lang.String = org.springframework.beans.factory.support.ManagedArray . getElementTypeName ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { try { java.lang.Class<?> = ClassUtils . forName ( java.lang.String , this . org.springframework.beans.factory.support.AbstractBeanFactory . getBeanClassLoader ( ) ) ; array . resolvedElementType = java.lang.Class<> ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( this . org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , this . java.lang.String , STRING + java.lang.Object , java.lang.Throwable ) ; } } else { java.lang.Class<?> = java.lang.Object .class ; } } return java.lang.Object ( java.lang.Object , ( java.util.List<?> < ? > ) java.lang.Object , java.lang.Class<> ) ; } else if ( java.lang.Object instanceof ManagedList ) { return java.util.List<?> ( java.lang.Object , ( java.util.List<?> < ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof ManagedSet ) { return java.util.Set<?> ( java.lang.Object , ( java.util.Set<?> < ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof ManagedMap ) { return java.util.Map<?,?> ( java.lang.Object , ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof ManagedProperties ) { java.util.Properties java.util.Properties = ( java.util.Properties ) java.lang.Object ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Properties . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof TypedStringValue ) { java.lang.Object = java.lang.Object ( ( TypedStringValue ) java.lang.Object ) ; } if ( java.lang.Object instanceof TypedStringValue ) { java.lang.Object = java.lang.Object ( ( TypedStringValue ) java.lang.Object ) ; } java.util.Properties . java.lang.Object ( java.lang.Object , java.lang.Object ) ; } return java.util.Properties ; } else if ( java.lang.Object instanceof TypedStringValue ) { TypedStringValue org.springframework.beans.factory.support.TypedStringValue = ( TypedStringValue ) java.lang.Object ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.beans.factory.support.TypedStringValue ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.beans.factory.support.TypedStringValue ) ; if ( java.lang.Class<> != null ) { return this . org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.lang.Object , java.lang.Class<> ) ; } else { return java.lang.Object ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( this . org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , this . java.lang.String , STRING + java.lang.Object , java.lang.Throwable ) ; } } else { return java.lang.Object ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( TypedStringValue org.springframework.beans.factory.support.TypedStringValue ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.beans.factory.support.TypedStringValue . getValue ( ) ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , org.springframework.beans.factory.support.TypedStringValue . getValue ( ) ) ) { org.springframework.beans.factory.support.TypedStringValue . setDynamic ( ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String ) { return java.lang.Object ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String [] ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.lang.Object ; boolean boolean = false ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; if ( java.lang.Object != java.lang.String ) { boolean = true ; } java.lang.Object[] [ int ] = java.lang.Object ; } return ( boolean ? java.lang.Object[] : java.lang.String[] ) ; } else { return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return this . org.springframework.beans.factory.support.AbstractBeanFactory . evaluateBeanDefinitionString ( java.lang.String , this . org.springframework.beans.factory.support.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( TypedStringValue org.springframework.beans.factory.support.TypedStringValue ) throws java.lang.ClassNotFoundException { if ( org.springframework.beans.factory.support.TypedStringValue . hasTargetType ( ) ) { return org.springframework.beans.factory.support.TypedStringValue . getTargetType ( ) ; } return org.springframework.beans.factory.support.TypedStringValue . resolveTargetType ( this . org.springframework.beans.factory.support.AbstractBeanFactory . getBeanClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , BeanDefinition org.springframework.beans.factory.support.BeanDefinition ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = null ; try { org.springframework.beans.factory.support.RootBeanDefinition = this . org.springframework.beans.factory.support.AbstractBeanFactory . getMergedBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition , this . org.springframework.beans.factory.support.BeanDefinition ) ; java.lang.String java.lang.String = java.lang.String ; if ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) { java.lang.String = java.lang.String ( java.lang.String ) ; } this . org.springframework.beans.factory.support.AbstractBeanFactory . registerContainedBean ( java.lang.String , this . java.lang.String ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.RootBeanDefinition . getDependsOn ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.beans.factory.support.AbstractBeanFactory . registerDependentBean ( java.lang.String , java.lang.String ) ; this . org.springframework.beans.factory.support.AbstractBeanFactory . getBean ( java.lang.String ) ; } } java.lang.Object java.lang.Object = this . org.springframework.beans.factory.support.AbstractBeanFactory . createBean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , null ) ; if ( java.lang.Object instanceof FactoryBean ) { boolean boolean = org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) ; return this . org.springframework.beans.factory.support.AbstractBeanFactory . getObjectFromFactoryBean ( ( FactoryBean < ? > ) java.lang.Object , java.lang.String , ! boolean ) ; } else { return java.lang.Object ; } } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { throw new BeanCreationException ( this . org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , this . java.lang.String , STRING + java.lang.String + STRING + ( org.springframework.beans.factory.support.RootBeanDefinition != null && org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) != null ? STRING + org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) + STRING : STRING ) + STRING + java.lang.Object , org.springframework.beans.factory.support.BeansException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ; int int = NUMBER ; while ( this . org.springframework.beans.factory.support.AbstractBeanFactory . isBeanNameInUse ( java.lang.String ) ) { int ++ ; java.lang.String = java.lang.String + BeanFactoryUtils . GENERATED_BEAN_NAME_SEPARATOR + int ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , RuntimeBeanReference org.springframework.beans.factory.support.RuntimeBeanReference ) { try { java.lang.String java.lang.String = org.springframework.beans.factory.support.RuntimeBeanReference . getBeanName ( ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.Object ( java.lang.String ) ) ; if ( org.springframework.beans.factory.support.RuntimeBeanReference . isToParent ( ) ) { if ( this . org.springframework.beans.factory.support.AbstractBeanFactory . getParentBeanFactory ( ) == null ) { throw new BeanCreationException ( this . org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , this . java.lang.String , STRING + java.lang.String + STRING ) ; } return this . org.springframework.beans.factory.support.AbstractBeanFactory . getParentBeanFactory ( ) . getBean ( java.lang.String ) ; } else { java.lang.Object java.lang.Object = this . org.springframework.beans.factory.support.AbstractBeanFactory . getBean ( java.lang.String ) ; this . org.springframework.beans.factory.support.AbstractBeanFactory . registerDependentBean ( java.lang.String , this . java.lang.String ) ; return java.lang.Object ; } } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { throw new BeanCreationException ( this . org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , this . java.lang.String , STRING + org.springframework.beans.factory.support.RuntimeBeanReference . getBeanName ( ) + STRING + java.lang.Object , org.springframework.beans.factory.support.BeansException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.util.List<?> < ? > java.util.List<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , java.util.List<> . int ( ) ) ; for ( int int = NUMBER ; int < java.util.List<> . int ( ) ; int ++ ) { java.lang.reflect.Array . void ( java.lang.Object , int , java.lang.Object ( new org.springframework.beans.factory.support.BeanDefinitionValueResolver.KeyedArgName ( java.lang.Object , int ) , java.util.List<> . get ( int ) ) ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.util.List<?> < ? > java.util.List<?> ( java.lang.Object java.lang.Object , java.util.List<?> < ? > java.util.List<?> ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( java.util.List<> . int ( ) ) ; for ( int int = NUMBER ; int < java.util.List<> . int ( ) ; int ++ ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ( new org.springframework.beans.factory.support.BeanDefinitionValueResolver.KeyedArgName ( java.lang.Object , int ) , java.util.List<> . get ( int ) ) ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.Set<?> < ? > java.util.Set<?> ( java.lang.Object java.lang.Object , java.util.Set<?> < ? > java.util.Set<?> ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.LinkedHashSet<java.lang.Object> <> ( java.util.Set<> . int ( ) ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.Set<> ) { java.util.Set<java.lang.Object> . boolean ( java.lang.Object ( new org.springframework.beans.factory.support.BeanDefinitionValueResolver.KeyedArgName ( java.lang.Object , int ) , java.lang.Object ) ) ; int ++ ; } return java.util.Set<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( java.lang.Object java.lang.Object , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> <> ( java.util.Map<,> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object , java.util.Map.Entry<,> . getKey ( ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( new org.springframework.beans.factory.support.BeanDefinitionValueResolver.KeyedArgName ( java.lang.Object , java.util.Map.Entry<,> . getKey ( ) ) , java.util.Map.Entry<,> . getValue ( ) ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.Object + STRING + BeanWrapper . PROPERTY_KEY_PREFIX + this . java.lang.Object + BeanWrapper . PROPERTY_KEY_SUFFIX ; }  <METHOD_END>
