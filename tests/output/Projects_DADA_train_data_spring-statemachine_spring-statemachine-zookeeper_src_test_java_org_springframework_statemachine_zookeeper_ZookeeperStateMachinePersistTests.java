<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . forPath ( STRING ) ; StateMachinePersist < java.lang.String , java.lang.String , Stat > org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> = new ZookeeperStateMachinePersist < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ; org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . write ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> , new Stat ( ) ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . read ( new Stat ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . forPath ( STRING ) ; ZookeeperStateMachinePersist < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachinePersist<java.lang.String,java.lang.String> = new ZookeeperStateMachinePersist < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING , STRING , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . creatingParentsIfNeeded ( ) . forPath ( STRING + int ) ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Stat org.springframework.statemachine.zookeeper.Stat = new Stat ( ) ; org.springframework.statemachine.zookeeper.Stat . setVersion ( int ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachinePersist<java.lang.String,java.lang.String> . write ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> , org.springframework.statemachine.zookeeper.Stat ) ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.ZookeeperStateMachinePersist<java.lang.String,java.lang.String> . readLog ( int , new Stat ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) , is ( STRING + int ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) , is ( STRING + int ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . forPath ( STRING ) ; StateMachinePersist < java.lang.String , java.lang.String , Stat > org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> = new ZookeeperStateMachinePersist < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , java.util.HashMap<java.lang.String,java.lang.Object> , new DefaultExtendedState ( ) ) ; org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . write ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> , new Stat ( ) ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . read ( new Stat ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEventHeaders ( ) . get ( STRING ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEventHeaders ( ) . get ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . forPath ( STRING ) ; StateMachinePersist < java.lang.String , java.lang.String , Stat > org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> = new ZookeeperStateMachinePersist < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MessageHeaders org.springframework.statemachine.zookeeper.MessageHeaders = new MessageHeaders ( java.util.HashMap<java.lang.String,java.lang.Object> ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , org.springframework.statemachine.zookeeper.MessageHeaders , new DefaultExtendedState ( ) ) ; org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . write ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> , new Stat ( ) ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . read ( new Stat ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEventHeaders ( ) . get ( STRING ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEventHeaders ( ) . get ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . forPath ( STRING ) ; StateMachinePersist < java.lang.String , java.lang.String , Stat > org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> = new ZookeeperStateMachinePersist < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.HashMap<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; java.util.HashMap<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , java.util.HashMap<java.lang.String,java.lang.Object> , new DefaultExtendedState ( java.util.HashMap<java.lang.Object,java.lang.Object> ) ) ; org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . write ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> , new Stat ( ) ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . read ( new Stat ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . get ( STRING ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . get ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . forPath ( STRING ) ; StateMachinePersist < java.lang.String , java.lang.String , Stat > org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> = new ZookeeperStateMachinePersist < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ; java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> < StateMachineContext < java.lang.String , java.lang.String > > ( ) ; java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = new DefaultStateMachineContext < java.lang.String , java.lang.String > ( java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> , STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ; org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . write ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> , new Stat ( ) ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachinePersist<java.lang.String,java.lang.String,org.springframework.statemachine.zookeeper.Stat> . read ( new Stat ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) , is ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getChilds ( ) . get ( NUMBER ) . getEvent ( ) , is ( STRING ) ) ; }  <METHOD_END>
