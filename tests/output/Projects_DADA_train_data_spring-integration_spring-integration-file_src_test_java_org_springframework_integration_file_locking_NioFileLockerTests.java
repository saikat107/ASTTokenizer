<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { super. create ( ) ; java.io.File = org.springframework.integration.file.locking.TemporaryFolder . newFolder ( org.springframework.integration.file.locking.NioFileLockerTests .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { NioFileLocker org.springframework.integration.file.locking.NioFileLocker = new NioFileLocker ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; assertThat ( org.springframework.integration.file.locking.NioFileLocker . filterFiles ( java.io.File . java.io.File[] ( ) ) . get ( NUMBER ) , is ( java.io.File ) ) ; org.springframework.integration.file.locking.NioFileLocker . lock ( java.io.File ) ; assertThat ( org.springframework.integration.file.locking.NioFileLocker . filterFiles ( java.io.File . java.io.File[] ( ) ) . get ( NUMBER ) , is ( java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { NioFileLocker org.springframework.integration.file.locking.NioFileLocker = new NioFileLocker ( ) ; FileListFilter < java.io.File > org.springframework.integration.file.locking.FileListFilter<java.io.File> = new NioFileLocker ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; assertThat ( org.springframework.integration.file.locking.NioFileLocker . filterFiles ( java.io.File . java.io.File[] ( ) ) . get ( NUMBER ) , is ( java.io.File ) ) ; org.springframework.integration.file.locking.NioFileLocker . lock ( java.io.File ) ; assertThat ( org.springframework.integration.file.locking.FileListFilter<java.io.File> . filterFiles ( java.io.File . java.io.File[] ( ) ) , is ( ( java.util.List<java.io.File> < java.io.File > ) new java.util.ArrayList<java.io.File> < java.io.File > ( ) ) ) ; }  <METHOD_END>
