<METHOD_START> public void void ( org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher ... org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher[] ) { this . java.util.List<org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher> = java.util.Arrays . java.util.List<org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher> ( org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod ) { Assert . notNull ( org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod , STRING ) ; this . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod = org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod ; }  <METHOD_END>
<METHOD_START> public void void ( Resource ... org.springframework.beans.factory.config.Resource[] ) { this . org.springframework.beans.factory.config.Resource[] = org.springframework.beans.factory.config.Resource[] ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.beans.factory.config.YamlProcessor.MatchCallback org.springframework.beans.factory.config.YamlProcessor.MatchCallback ) { Yaml org.springframework.beans.factory.config.Yaml = org.springframework.beans.factory.config.Yaml ( ) ; for ( Resource org.springframework.beans.factory.config.Resource : this . org.springframework.beans.factory.config.Resource[] ) { boolean boolean = boolean ( org.springframework.beans.factory.config.YamlProcessor.MatchCallback , org.springframework.beans.factory.config.Yaml , org.springframework.beans.factory.config.Resource ) ; if ( this . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod == org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod && boolean ) { return; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.config.Yaml org.springframework.beans.factory.config.Yaml ( ) { return new Yaml ( new org.springframework.beans.factory.config.YamlProcessor.StrictMapAppenderConstructor ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.beans.factory.config.YamlProcessor.MatchCallback org.springframework.beans.factory.config.YamlProcessor.MatchCallback , Yaml org.springframework.beans.factory.config.Yaml , Resource org.springframework.beans.factory.config.Resource ) { int int = NUMBER ; try { if ( org.springframework.beans.factory.config.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.config.Log . debug ( STRING + org.springframework.beans.factory.config.Resource ) ; } java.io.Reader java.io.Reader = new UnicodeReader ( org.springframework.beans.factory.config.Resource . getInputStream ( ) ) ; try { for ( java.lang.Object java.lang.Object : org.springframework.beans.factory.config.Yaml . loadAll ( java.io.Reader ) ) { if ( java.lang.Object != null && boolean ( java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object ) , org.springframework.beans.factory.config.YamlProcessor.MatchCallback ) ) { int ++ ; if ( this . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod == org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod ) { break; } } } if ( org.springframework.beans.factory.config.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.config.Log . debug ( STRING + int + STRING + ( int > NUMBER ? STRING : STRING ) + STRING + org.springframework.beans.factory.config.Resource ) ; } } finally { java.io.Reader . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { void ( org.springframework.beans.factory.config.Resource , java.io.IOException ) ; } return ( int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( Resource org.springframework.beans.factory.config.Resource , java.io.IOException java.io.IOException ) { if ( this . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod != org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod && this . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod != org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod . org.springframework.beans.factory.config.YamlProcessor.ResolutionMethod ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } if ( org.springframework.beans.factory.config.Log . isWarnEnabled ( ) ) { org.springframework.beans.factory.config.Log . warn ( STRING + org.springframework.beans.factory.config.Resource + STRING + java.io.IOException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object java.lang.Object ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( ! ( java.lang.Object instanceof java.util.Map ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; return java.util.Map<java.lang.String,java.lang.Object> ; } java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.util.Map ) { java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object ) ; } java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.lang.CharSequence ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.Object . java.lang.String ( ) , java.lang.Object ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING + java.lang.Object . java.lang.String ( ) + STRING , java.lang.Object ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , org.springframework.beans.factory.config.YamlProcessor.MatchCallback org.springframework.beans.factory.config.YamlProcessor.MatchCallback ) { java.util.Properties java.util.Properties = CollectionFactory . createStringAdaptingProperties ( ) ; java.util.Properties . void ( java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; if ( this . java.util.List<org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher> . boolean ( ) ) { if ( org.springframework.beans.factory.config.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.config.Log . debug ( STRING + java.util.Map<java.lang.String,java.lang.Object> ) ; } org.springframework.beans.factory.config.YamlProcessor.MatchCallback . void ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> ) ; return true ; } org.springframework.beans.factory.config.YamlProcessor.MatchStatus org.springframework.beans.factory.config.YamlProcessor.MatchStatus = org.springframework.beans.factory.config.YamlProcessor.MatchStatus . org.springframework.beans.factory.config.YamlProcessor.MatchStatus ; for ( org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher : this . java.util.List<org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher> ) { org.springframework.beans.factory.config.YamlProcessor.MatchStatus org.springframework.beans.factory.config.YamlProcessor.MatchStatus = org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher . org.springframework.beans.factory.config.YamlProcessor.MatchStatus ( java.util.Properties ) ; org.springframework.beans.factory.config.YamlProcessor.MatchStatus = org.springframework.beans.factory.config.YamlProcessor.MatchStatus . org.springframework.beans.factory.config.YamlProcessor.MatchStatus ( org.springframework.beans.factory.config.YamlProcessor.MatchStatus , org.springframework.beans.factory.config.YamlProcessor.MatchStatus ) ; if ( org.springframework.beans.factory.config.YamlProcessor.MatchStatus == org.springframework.beans.factory.config.YamlProcessor.MatchStatus . org.springframework.beans.factory.config.YamlProcessor.MatchStatus ) { if ( org.springframework.beans.factory.config.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.config.Log . debug ( STRING + java.util.Properties ) ; } org.springframework.beans.factory.config.YamlProcessor.MatchCallback . void ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> ) ; return true ; } } if ( org.springframework.beans.factory.config.YamlProcessor.MatchStatus == org.springframework.beans.factory.config.YamlProcessor.MatchStatus . org.springframework.beans.factory.config.YamlProcessor.MatchStatus && this . boolean ) { if ( org.springframework.beans.factory.config.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.config.Log . debug ( STRING + java.util.Map<java.lang.String,java.lang.Object> ) ; } org.springframework.beans.factory.config.YamlProcessor.MatchCallback . void ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> ) ; return true ; } if ( org.springframework.beans.factory.config.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.config.Log . debug ( STRING + java.util.Map<java.lang.String,java.lang.Object> ) ; } return false ; }  <METHOD_END>
<METHOD_START> protected final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> , null ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String + java.lang.String ; } else { java.lang.String = java.lang.String + '.' + java.lang.String ; } } java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Map ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> , java.lang.String ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.Collection<java.lang.Object> ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING + ( int ++ ) + STRING , java.lang.Object ) , java.lang.String ) ; } } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , ( java.lang.Object != null ? java.lang.Object : STRING ) ) ; } } }  <METHOD_END>
<METHOD_START> void void ( java.util.Properties java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.YamlProcessor.MatchStatus org.springframework.beans.factory.config.YamlProcessor.MatchStatus ( java.util.Properties java.util.Properties );  <METHOD_END>
<METHOD_START> public static org.springframework.beans.factory.config.YamlProcessor.MatchStatus org.springframework.beans.factory.config.YamlProcessor.MatchStatus ( org.springframework.beans.factory.config.YamlProcessor.MatchStatus org.springframework.beans.factory.config.YamlProcessor.MatchStatus , org.springframework.beans.factory.config.YamlProcessor.MatchStatus org.springframework.beans.factory.config.YamlProcessor.MatchStatus ) { return ( org.springframework.beans.factory.config.YamlProcessor.MatchStatus . int ( ) < org.springframework.beans.factory.config.YamlProcessor.MatchStatus . int ( ) ? org.springframework.beans.factory.config.YamlProcessor.MatchStatus : org.springframework.beans.factory.config.YamlProcessor.MatchStatus ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( MappingNode org.springframework.beans.factory.config.MappingNode ) { try { return super. constructMapping ( org.springframework.beans.factory.config.MappingNode ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new ParserException ( STRING , org.springframework.beans.factory.config.MappingNode . getStartMark ( ) , java.lang.IllegalStateException . java.lang.String ( ) , org.springframework.beans.factory.config.MappingNode . getEndMark ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ) { final java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = super. createDefaultMap ( ) ; return new java.util.AbstractMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.util.Map<java.lang.Object,java.lang.Object> . boolean ( java.lang.Object ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object ) ; } return java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; } @ java.lang.Override public java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> < java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > > java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) { return java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.util.Map<java.lang.Object,java.lang.Object> . boolean ( java.lang.Object ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object ) ; } return java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> < java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > > java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) { return java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ; }  <METHOD_END>
