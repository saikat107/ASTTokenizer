<METHOD_START> @ After public void void ( ) { java.lang.System . java.util.Properties ( ) . java.lang.Object ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING , STRING ) ; try { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; } finally { if ( java.lang.String != null ) { java.lang.System . java.lang.String ( STRING , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockEnvironment org.springframework.context.config.MockEnvironment = new MockEnvironment ( ) . withProperty ( STRING , STRING ) ; GenericXmlApplicationContext org.springframework.context.config.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.context.config.GenericXmlApplicationContext . setEnvironment ( org.springframework.context.config.MockEnvironment ) ; org.springframework.context.config.GenericXmlApplicationContext . load ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ) ; org.springframework.context.config.GenericXmlApplicationContext . refresh ( ) ; assertEquals ( STRING , org.springframework.context.config.GenericXmlApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.GenericXmlApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING + STRING + STRING ) ; try { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; } catch ( FatalBeanException org.springframework.context.config.FatalBeanException ) { assertTrue ( org.springframework.context.config.FatalBeanException . getRootCause ( ) instanceof java.io.FileNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , org.springframework.context.config.ApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.context.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.config.ContextNamespaceHandlerTests> ( ) ) ; java.util.Date java.util.Date = ( java.util.Date ) org.springframework.context.config.ApplicationContext . getBean ( STRING ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Date ) ; assertEquals ( NUMBER , java.util.Calendar . int ( java.util.Calendar . int ) ) ; }  <METHOD_END>
