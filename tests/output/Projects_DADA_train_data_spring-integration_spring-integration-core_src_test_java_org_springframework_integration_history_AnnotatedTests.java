<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.history.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.history.AnnotatedTests> ( ) ) ; ApplicationListener < ApplicationEvent > org.springframework.integration.history.ApplicationListener<org.springframework.integration.history.ApplicationEvent> = new ApplicationListener < ApplicationEvent > ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.history.ApplicationEvent ) { MessageHistory org.springframework.integration.history.MessageHistory = MessageHistory . read ( ( Message < ? > ) org.springframework.integration.history.ApplicationEvent . getSource ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.history.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; } } ; org.springframework.integration.history.ApplicationListener<org.springframework.integration.history.ApplicationEvent> = spy ( org.springframework.integration.history.ApplicationListener<org.springframework.integration.history.ApplicationEvent> ) ; org.springframework.integration.history.ClassPathXmlApplicationContext . addApplicationListener ( org.springframework.integration.history.ApplicationListener<org.springframework.integration.history.ApplicationEvent> ) ; MessageChannel org.springframework.integration.history.MessageChannel = org.springframework.integration.history.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; EventDrivenConsumer org.springframework.integration.history.EventDrivenConsumer = org.springframework.integration.history.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; MessageHandler org.springframework.integration.history.MessageHandler = ( MessageHandler ) TestUtils . getPropertyValue ( org.springframework.integration.history.EventDrivenConsumer , STRING ) ; java.lang.reflect.Field java.lang.reflect.Field = org.springframework.integration.history.EventDrivenConsumer . getClass ( ) . getDeclaredField ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.reflect.Field . void ( org.springframework.integration.history.EventDrivenConsumer , org.springframework.integration.history.MessageHandler ) ; org.springframework.integration.history.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; verify ( org.springframework.integration.history.ApplicationListener<org.springframework.integration.history.ApplicationEvent> , times ( NUMBER ) ) . onApplicationEvent ( ( ApplicationEvent ) Mockito . any ( ) ) ; org.springframework.integration.history.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.history.ApplicationEvent ) { MessageHistory org.springframework.integration.history.MessageHistory = MessageHistory . read ( ( Message < ? > ) org.springframework.integration.history.ApplicationEvent . getSource ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.history.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
