<METHOD_START> protected void ( java.lang.String java.lang.String , java.lang.String java.lang.String , OptionHandler org.springframework.boot.cli.command.archive.OptionHandler ) { super( java.lang.String , java.lang.String , org.springframework.boot.cli.command.archive.OptionHandler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + getName ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , Layout org.springframework.boot.cli.command.archive.Layout ) { this . java.lang.String = java.lang.String ; this . org.springframework.boot.cli.command.archive.Layout = org.springframework.boot.cli.command.archive.Layout ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.cli.command.archive.Layout org.springframework.boot.cli.command.archive.Layout ( ) { return this . org.springframework.boot.cli.command.archive.Layout ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.boot.cli.command.archive.OptionSpec<java.lang.String> = option ( STRING , STRING + STRING ) . withRequiredArg ( ) . withValuesSeparatedBy ( STRING ) . defaultsTo ( STRING ) ; this . org.springframework.boot.cli.command.archive.OptionSpec<java.lang.String> = option ( STRING , STRING + STRING + this . java.lang.String ) . withRequiredArg ( ) . withValuesSeparatedBy ( STRING ) . defaultsTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.cli.command.archive.ExitStatus org.springframework.boot.cli.command.archive.ExitStatus ( OptionSet org.springframework.boot.cli.command.archive.OptionSet ) throws java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( org.springframework.boot.cli.command.archive.OptionSet . nonOptionArguments ( ) ) ; Assert . isTrue ( java.util.List<> . int ( ) >= NUMBER , STRING + this . java.lang.String + STRING ) ; java.io.File java.io.File = new java.io.File ( ( java.lang.String ) java.util.List<> . remove ( NUMBER ) ) ; Assert . isTrue ( java.io.File . java.lang.String ( ) . java.lang.String ( ) . boolean ( STRING + this . java.lang.String ) , STRING + java.io.File + STRING + this . java.lang.String . java.lang.String ( ) + STRING ) ; void ( java.io.File ) ; GroovyCompiler org.springframework.boot.cli.command.archive.GroovyCompiler = org.springframework.boot.cli.command.archive.GroovyCompiler ( org.springframework.boot.cli.command.archive.OptionSet ) ; java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = java.util.List<java.net.URL> ( org.springframework.boot.cli.command.archive.GroovyCompiler ) ; java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> = java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ( java.util.List<java.net.URL> , org.springframework.boot.cli.command.archive.OptionSet ) ; java.lang.String [] java.lang.String[] = new SourceOptions ( java.util.List<> ) . getSourcesArray ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.boot.cli.command.archive.GroovyCompiler . compile ( java.lang.String[] ) ; java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = java.util.List<java.net.URL> ( org.springframework.boot.cli.command.archive.GroovyCompiler ) ; java.util.List<java.net.URL> . boolean ( java.util.List<java.net.URL> ) ; void ( java.io.File , java.lang.Class<?>[] , java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> , java.util.List<java.net.URL> ) ; return ExitStatus . OK ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File ) { if ( java.io.File . boolean ( ) && ! java.io.File . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + java.io.File . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.archive.GroovyCompiler org.springframework.boot.cli.command.archive.GroovyCompiler ( OptionSet org.springframework.boot.cli.command.archive.OptionSet ) { java.util.List<org.springframework.boot.cli.command.archive.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.command.archive.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; GroovyCompilerConfiguration org.springframework.boot.cli.command.archive.GroovyCompilerConfiguration = new OptionSetGroovyCompilerConfiguration ( org.springframework.boot.cli.command.archive.OptionSet , this , java.util.List<org.springframework.boot.cli.command.archive.RepositoryConfiguration> ) ; GroovyCompiler org.springframework.boot.cli.command.archive.GroovyCompiler = new GroovyCompiler ( org.springframework.boot.cli.command.archive.GroovyCompilerConfiguration ) ; org.springframework.boot.cli.command.archive.GroovyCompiler . getAstTransformations ( ) . add ( NUMBER , new org.springframework.boot.cli.command.archive.ArchiveCommand.GrabAnnotationTransform ( ) ) ; return org.springframework.boot.cli.command.archive.GroovyCompiler ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ( GroovyCompiler org.springframework.boot.cli.command.archive.GroovyCompiler ) { return new java.util.ArrayList <> ( java.util.Arrays . java.util.List ( org.springframework.boot.cli.command.archive.GroovyCompiler . getLoader ( ) . getURLs ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> , OptionSet org.springframework.boot.cli.command.archive.OptionSet ) throws java.io.IOException { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( org.springframework.boot.cli.command.archive.OptionSet . valuesOf ( this . org.springframework.boot.cli.command.archive.OptionSpec<java.lang.String> ) , org.springframework.boot.cli.command.archive.OptionSet . valuesOf ( this . org.springframework.boot.cli.command.archive.OptionSpec<java.lang.String> ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> <> ( ) ; for ( java.net.URL java.net.URL : java.util.List<java.net.URL> ) { java.util.List<java.io.File> . boolean ( new java.io.File ( java.net.URI . java.net.URI ( java.net.URL . java.lang.String ( ) ) ) ) ; } return org.springframework.boot.cli.command.archive.ResourceMatcher . find ( java.util.List<java.io.File> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> , java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> )						throws java.io.FileNotFoundException , java.io.IOException , java.net.URISyntaxException { final java.util.List<org.springframework.boot.cli.command.archive.Library> < Library > java.util.List<org.springframework.boot.cli.command.archive.Library> ; JarWriter org.springframework.boot.cli.command.archive.JarWriter = new JarWriter ( java.io.File ) ; try { void ( org.springframework.boot.cli.command.archive.JarWriter , java.lang.Class<?>[] ) ; void ( org.springframework.boot.cli.command.archive.JarWriter ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { void ( org.springframework.boot.cli.command.archive.JarWriter , java.lang.Class<> ) ; } java.util.List<org.springframework.boot.cli.command.archive.Library> = java.util.List<org.springframework.boot.cli.command.archive.Library> ( org.springframework.boot.cli.command.archive.JarWriter , java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ) ; } finally { org.springframework.boot.cli.command.archive.JarWriter . close ( ) ; } java.util.List<org.springframework.boot.cli.command.archive.Library> . addAll ( java.util.List<org.springframework.boot.cli.command.archive.Library> ( java.util.List<java.net.URL> ) ) ; Repackager org.springframework.boot.cli.command.archive.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.cli.command.archive.Repackager . setMainClass ( PackagedSpringApplicationLauncher .class . java.lang.String ( ) ) ; org.springframework.boot.cli.command.archive.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.cli.command.archive.LibraryCallback ) throws java.io.IOException { for ( Library org.springframework.boot.cli.command.archive.Library : java.util.List<org.springframework.boot.cli.command.archive.Library> ) { org.springframework.boot.cli.command.archive.LibraryCallback . library ( org.springframework.boot.cli.command.archive.Library ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.cli.command.archive.LibraryCallback ) throws java.io.IOException { for ( Library org.springframework.boot.cli.command.archive.Library : java.util.List<org.springframework.boot.cli.command.archive.Library> ) { org.springframework.boot.cli.command.archive.LibraryCallback . library ( org.springframework.boot.cli.command.archive.Library ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.command.archive.Library> < Library > java.util.List<org.springframework.boot.cli.command.archive.Library> ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> )				throws java.net.URISyntaxException { java.util.List<org.springframework.boot.cli.command.archive.Library> < Library > java.util.List<org.springframework.boot.cli.command.archive.Library> = new java.util.ArrayList<org.springframework.boot.cli.command.archive.Library> <> ( ) ; for ( java.net.URL java.net.URL : java.util.List<java.net.URL> ) { java.io.File java.io.File = new java.io.File ( java.net.URL . java.net.URI ( ) ) ; java.util.List<org.springframework.boot.cli.command.archive.Library> . add ( new Library ( java.io.File , org.springframework.boot.cli.command.archive.LibraryScope ( java.io.File ) ) ) ; } return java.util.List<org.springframework.boot.cli.command.archive.Library> ; }  <METHOD_END>
<METHOD_START> private void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter , java.lang.Class<?> < ? > [] java.lang.Class<?>[] )				throws java.io.IOException { java.util.jar.Manifest java.util.jar.Manifest = new java.util.jar.Manifest ( ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING , STRING ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( PackagedSpringApplicationLauncher . SOURCE_ENTRY , java.lang.String ( java.lang.Class<?>[] ) ) ; org.springframework.boot.cli.command.archive.JarWriter . writeManifest ( java.util.jar.Manifest ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( int == NUMBER ? STRING : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Class<?>[] [ int ] . java.lang.String ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter ) throws java.io.IOException { void ( org.springframework.boot.cli.command.archive.JarWriter , PackagedSpringApplicationLauncher .class ) ; void ( org.springframework.boot.cli.command.archive.JarWriter , SpringApplicationLauncher .class ) ; Resource [] org.springframework.boot.cli.command.archive.Resource[] = new PathMatchingResourcePatternResolver ( ) . getResources ( STRING ) ; for ( Resource org.springframework.boot.cli.command.archive.Resource : org.springframework.boot.cli.command.archive.Resource[] ) { java.lang.String java.lang.String = org.springframework.boot.cli.command.archive.Resource . getURL ( ) . toString ( ) ; void ( org.springframework.boot.cli.command.archive.JarWriter , org.springframework.boot.cli.command.archive.Resource , java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected final void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter , java.lang.Class<?> < ? > java.lang.Class<?> )				throws java.io.IOException { void ( org.springframework.boot.cli.command.archive.JarWriter , java.lang.Class<> . java.lang.ClassLoader ( ) , java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter , java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) throws java.io.IOException { if ( java.lang.ClassLoader == null ) { java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( '.' , '/' ) + STRING ; java.io.InputStream java.io.InputStream = java.lang.ClassLoader . java.io.InputStream ( java.lang.String ) ; org.springframework.boot.cli.command.archive.JarWriter . writeEntry ( this . org.springframework.boot.cli.command.archive.Layout . getClassesLocation ( ) + java.lang.String , java.io.InputStream ) ; }  <METHOD_END>
<METHOD_START> private void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter , Resource org.springframework.boot.cli.command.archive.Resource , java.lang.String java.lang.String )				throws java.io.IOException { java.io.InputStream java.io.InputStream = org.springframework.boot.cli.command.archive.Resource . getInputStream ( ) ; org.springframework.boot.cli.command.archive.JarWriter . writeEntry ( java.lang.String , java.io.InputStream ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.command.archive.Library> < Library > java.util.List<org.springframework.boot.cli.command.archive.Library> ( JarWriter org.springframework.boot.cli.command.archive.JarWriter , java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ) throws java.io.IOException { java.util.List<org.springframework.boot.cli.command.archive.Library> < Library > java.util.List<org.springframework.boot.cli.command.archive.Library> = new java.util.ArrayList<org.springframework.boot.cli.command.archive.Library> <> ( ) ; for ( MatchedResource org.springframework.boot.cli.command.archive.MatchedResource : java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ) { if ( org.springframework.boot.cli.command.archive.MatchedResource . isRoot ( ) ) { java.util.List<org.springframework.boot.cli.command.archive.Library> . add ( new Library ( org.springframework.boot.cli.command.archive.MatchedResource . getFile ( ) , LibraryScope . COMPILE ) ) ; } else { void ( org.springframework.boot.cli.command.archive.JarWriter , org.springframework.boot.cli.command.archive.MatchedResource ) ; } } return java.util.List<org.springframework.boot.cli.command.archive.Library> ; }  <METHOD_END>
<METHOD_START> protected void void ( JarWriter org.springframework.boot.cli.command.archive.JarWriter , MatchedResource org.springframework.boot.cli.command.archive.MatchedResource )				throws java.io.IOException { org.springframework.boot.cli.command.archive.JarWriter . writeEntry ( org.springframework.boot.cli.command.archive.MatchedResource . getName ( ) , new java.io.FileInputStream ( org.springframework.boot.cli.command.archive.MatchedResource . getFile ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.boot.cli.command.archive.LibraryScope org.springframework.boot.cli.command.archive.LibraryScope ( java.io.File java.io.File );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ASTNode [] org.springframework.boot.cli.command.archive.ASTNode[] , SourceUnit org.springframework.boot.cli.command.archive.SourceUnit ) { for ( ASTNode org.springframework.boot.cli.command.archive.ASTNode : org.springframework.boot.cli.command.archive.ASTNode[] ) { if ( org.springframework.boot.cli.command.archive.ASTNode instanceof ModuleNode ) { void ( ( ModuleNode ) org.springframework.boot.cli.command.archive.ASTNode ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ModuleNode org.springframework.boot.cli.command.archive.ModuleNode ) { for ( ClassNode org.springframework.boot.cli.command.archive.ClassNode : org.springframework.boot.cli.command.archive.ModuleNode . getClasses ( ) ) { AnnotationNode org.springframework.boot.cli.command.archive.AnnotationNode = new AnnotationNode ( new ClassNode ( Grab .class ) ) ; org.springframework.boot.cli.command.archive.AnnotationNode . addMember ( STRING , new ConstantExpression ( STRING ) ) ; org.springframework.boot.cli.command.archive.ClassNode . addAnnotation ( org.springframework.boot.cli.command.archive.AnnotationNode ) ; break; } void ( org.springframework.boot.cli.command.archive.ModuleNode . getClasses ( ) ) ; void ( org.springframework.boot.cli.command.archive.ModuleNode . getImports ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<? extends org.springframework.boot.cli.command.archive.AnnotatedNode> < ? extends AnnotatedNode > java.util.List<? extends org.springframework.boot.cli.command.archive.AnnotatedNode> ) { for ( AnnotatedNode org.springframework.boot.cli.command.archive.AnnotatedNode : java.util.List<> ) { java.util.List<org.springframework.boot.cli.command.archive.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.command.archive.AnnotationNode> = org.springframework.boot.cli.command.archive.AnnotatedNode . getAnnotations ( ) ; for ( AnnotationNode org.springframework.boot.cli.command.archive.AnnotationNode : new java.util.ArrayList <> ( java.util.List<org.springframework.boot.cli.command.archive.AnnotationNode> ) ) { if ( org.springframework.boot.cli.command.archive.AnnotationNode . getClassNode ( ) . getNameWithoutPackage ( ) . equals ( STRING ) ) { org.springframework.boot.cli.command.archive.AnnotationNode . setMember ( STRING , new ConstantExpression ( false ) ) ; } } } }  <METHOD_END>
