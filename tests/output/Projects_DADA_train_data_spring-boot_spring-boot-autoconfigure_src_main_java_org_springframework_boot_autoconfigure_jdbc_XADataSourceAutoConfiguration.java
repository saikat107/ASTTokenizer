<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) java.lang.Exception { javax.sql.XADataSource javax.sql.XADataSource = this . javax.sql.XADataSource ; if ( javax.sql.XADataSource == null ) { javax.sql.XADataSource = javax.sql.XADataSource ( ) ; } return this . org.springframework.boot.autoconfigure.jdbc.XADataSourceWrapper . wrapDataSource ( javax.sql.XADataSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> private javax.sql.XADataSource javax.sql.XADataSource ( ) { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getXa ( ) . getDataSourceClassName ( ) ; if ( ! StringUtils . hasLength ( java.lang.String ) ) { java.lang.String = DatabaseDriver . fromJdbcUrl ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) . getXaDataSourceClassName ( ) ; } Assert . state ( StringUtils . hasLength ( java.lang.String ) , STRING ) ; javax.sql.XADataSource javax.sql.XADataSource = javax.sql.XADataSource ( java.lang.String ) ; void ( javax.sql.XADataSource , this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ) ; return javax.sql.XADataSource ; }  <METHOD_END>
<METHOD_START> private javax.sql.XADataSource javax.sql.XADataSource ( java.lang.String java.lang.String ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; java.lang.Object java.lang.Object = BeanUtils . instantiateClass ( java.lang.Class<> ) ; Assert . isInstanceOf ( javax.sql.XADataSource .class , java.lang.Object ) ; return ( javax.sql.XADataSource ) java.lang.Object ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.sql.XADataSource javax.sql.XADataSource , DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ) { MutablePropertyValues org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues . add ( STRING , this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUsername ( ) ) ; org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues . add ( STRING , this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determinePassword ( ) ) ; org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues . add ( STRING , this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) ; org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues . addPropertyValues ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getXa ( ) . getProperties ( ) ) ; new RelaxedDataBinder ( javax.sql.XADataSource ) . withAlias ( STRING , STRING ) . bind ( org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues ) ; }  <METHOD_END>
