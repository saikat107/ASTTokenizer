<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , ApplicationEvent .class ) ; void ( true , java.lang.reflect.Method , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , ApplicationEvent .class ) ; void ( true , java.lang.reflect.Method , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; void ( true , java.lang.reflect.Method , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; void ( false , java.lang.reflect.Method , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; void ( true , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; void ( false , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; void ( true , java.lang.reflect.Method , ResolvableType . forClass ( PayloadApplicationEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; void ( true , java.lang.reflect.Method , ResolvableType . forClass ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.PayloadTestEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; void ( true , java.lang.reflect.Method , ResolvableType . forClass ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.PayloadStringTestEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING ) ; void ( true , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING ) ; void ( true , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; void ( true , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING ) ; void ( true , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.String .class ) ) ; void ( true , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.Integer .class ) ) ; void ( false , java.lang.reflect.Method , org.springframework.context.event.ResolvableType ( java.lang.Double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class , java.lang.String .class ) ; this . org.springframework.context.event.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING ) ; this . org.springframework.context.event.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class , java.lang.Integer .class ) ; this . org.springframework.context.event.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; ApplicationListenerMethodAdapter org.springframework.context.event.ApplicationListenerMethodAdapter = org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method ) ; assertEquals ( NUMBER , org.springframework.context.event.ApplicationListenerMethodAdapter . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , ApplicationEvent .class ) ; ApplicationListenerMethodAdapter org.springframework.context.event.ApplicationListenerMethodAdapter = org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method ) ; assertEquals ( NUMBER , org.springframework.context.event.ApplicationListenerMethodAdapter . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = createGenericTestEvent ( STRING ) ; void ( java.lang.reflect.Method , org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleGenericString ( org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = new SmartGenericTestEvent <> ( this , STRING ) ; void ( java.lang.reflect.Method , org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleGenericString ( org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper .class ) ; org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> < java.lang.String > org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> = new org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> <> ( STRING ) ; void ( java.lang.reflect.Method , new PayloadApplicationEvent <> ( this , org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> ) ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleGenericStringPayload ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper .class ) ; org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.Integer> < java.lang.Integer > org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.Integer> = new org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.Integer> <> ( NUMBER ) ; void ( java.lang.reflect.Method , new PayloadApplicationEvent <> ( this , org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.Integer> ) ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleGenericStringPayload ( any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper .class ) ; org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> < java.lang.String > org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> = new org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> <> ( STRING ) ; void ( java.lang.reflect.Method , new PayloadApplicationEvent <> ( this , org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> ) ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleGenericAnyPayload ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = createGenericTestEvent ( STRING ) ; this . org.springframework.context.event.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.context.event.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.context.event.ExpectedException . expectCause ( is ( ( java.lang.Throwable ) isNull ( ) ) ) ; void ( java.lang.reflect.Method , org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = createGenericTestEvent ( STRING ) ; this . org.springframework.context.event.ExpectedException . expect ( java.lang.reflect.UndeclaredThrowableException .class ) ; this . org.springframework.context.event.ExpectedException . expectCause ( is ( instanceOf ( java.io.IOException .class ) ) ) ; void ( java.lang.reflect.Method , org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.context.event.ApplicationListenerMethodAdapterTests.InvalidProxyTestBean ( ) ; ProxyFactory org.springframework.context.event.ProxyFactory = new ProxyFactory ( ) ; org.springframework.context.event.ProxyFactory . setTarget ( java.lang.Object ) ; org.springframework.context.event.ProxyFactory . addInterface ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SimpleService .class ) ; java.lang.Object java.lang.Object = org.springframework.context.event.ProxyFactory . getProxy ( java.lang.Class<? extends org.springframework.context.event.ApplicationListenerMethodAdapterTests> ( ) . java.lang.ClassLoader ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.InvalidProxyTestBean .class , STRING , ApplicationEvent .class ) ; org.springframework.context.event.ApplicationListenerMethodAdapterTests.StaticApplicationListenerMethodAdapter org.springframework.context.event.ApplicationListenerMethodAdapterTests.StaticApplicationListenerMethodAdapter = new org.springframework.context.event.ApplicationListenerMethodAdapterTests.StaticApplicationListenerMethodAdapter ( java.lang.reflect.Method , java.lang.Object ) ; this . org.springframework.context.event.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.context.event.ExpectedException . expectMessage ( STRING ) ; org.springframework.context.event.ApplicationListenerMethodAdapterTests.StaticApplicationListenerMethodAdapter . onApplicationEvent ( createGenericTestEvent ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; PayloadApplicationEvent < java.lang.String > org.springframework.context.event.PayloadApplicationEvent<java.lang.String> = new PayloadApplicationEvent <> ( this , STRING ) ; void ( java.lang.reflect.Method , org.springframework.context.event.PayloadApplicationEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleString ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; PayloadApplicationEvent < java.lang.Long > org.springframework.context.event.PayloadApplicationEvent<java.lang.Long> = new PayloadApplicationEvent <> ( this , NUMBER ) ; void ( java.lang.reflect.Method , org.springframework.context.event.PayloadApplicationEvent<java.lang.Long> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , never ( ) ) . handleString ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING ) ; PayloadApplicationEvent < java.lang.String > org.springframework.context.event.PayloadApplicationEvent<java.lang.String> = new PayloadApplicationEvent <> ( this , STRING ) ; void ( java.lang.reflect.Method , org.springframework.context.event.PayloadApplicationEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleStringAnnotationClasses ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , java.lang.String .class ) ; PayloadApplicationEvent < java.lang.String > org.springframework.context.event.PayloadApplicationEvent<java.lang.String> = new PayloadApplicationEvent <> ( this , STRING ) ; void ( java.lang.reflect.Method , org.springframework.context.event.PayloadApplicationEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleStringAnnotationValueAndParameter ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING ) ; PayloadApplicationEvent < java.lang.String > org.springframework.context.event.PayloadApplicationEvent<java.lang.String> = new PayloadApplicationEvent <> ( this , STRING ) ; void ( java.lang.reflect.Method , org.springframework.context.event.PayloadApplicationEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleStringOrInteger ( ) ; PayloadApplicationEvent < java.lang.Integer > org.springframework.context.event.PayloadApplicationEvent<java.lang.Integer> = new PayloadApplicationEvent <> ( this , NUMBER ) ; void ( java.lang.reflect.Method , org.springframework.context.event.PayloadApplicationEvent<java.lang.Integer> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleStringOrInteger ( ) ; PayloadApplicationEvent < java.lang.Double > org.springframework.context.event.PayloadApplicationEvent<java.lang.Double> = new PayloadApplicationEvent <> ( this , NUMBER ) ; void ( java.lang.reflect.Method , org.springframework.context.event.PayloadApplicationEvent<java.lang.Double> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleStringOrInteger ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents .class , STRING , GenericTestEvent .class ) ; when ( this . org.springframework.context.event.ApplicationContext . getBean ( STRING ) ) . thenReturn ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents ) ; ApplicationListenerMethodAdapter org.springframework.context.event.ApplicationListenerMethodAdapter = new ApplicationListenerMethodAdapter ( STRING , GenericTestEvent .class , java.lang.reflect.Method ) ; org.springframework.context.event.ApplicationListenerMethodAdapter . init ( this . org.springframework.context.event.ApplicationContext , new EventExpressionEvaluator ( ) ) ; GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = createGenericTestEvent ( STRING ) ; org.springframework.context.event.ApplicationListenerMethodAdapter . onApplicationEvent ( org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleGenericString ( org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationContext , times ( NUMBER ) ) . getBean ( STRING ) ; org.springframework.context.event.ApplicationListenerMethodAdapter . onApplicationEvent ( org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents , times ( NUMBER ) ) . handleGenericString ( org.springframework.context.event.GenericTestEvent<java.lang.String> ) ; verify ( this . org.springframework.context.event.ApplicationContext , times ( NUMBER ) ) . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , java.lang.reflect.Method java.lang.reflect.Method , ResolvableType org.springframework.context.event.ResolvableType ) { ApplicationListenerMethodAdapter org.springframework.context.event.ApplicationListenerMethodAdapter = org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method ) ; assertEquals ( STRING + org.springframework.context.event.ResolvableType + STRING + java.lang.reflect.Method , boolean , org.springframework.context.event.ApplicationListenerMethodAdapter . supportsEventType ( org.springframework.context.event.ResolvableType ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method , ApplicationEvent org.springframework.context.event.ApplicationEvent ) { ApplicationListenerMethodAdapter org.springframework.context.event.ApplicationListenerMethodAdapter = org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method ) ; org.springframework.context.event.ApplicationListenerMethodAdapter . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.event.ApplicationListenerMethodAdapter org.springframework.context.event.ApplicationListenerMethodAdapter ( java.lang.reflect.Method java.lang.reflect.Method ) { return new org.springframework.context.event.ApplicationListenerMethodAdapterTests.StaticApplicationListenerMethodAdapter ( java.lang.reflect.Method , this . org.springframework.context.event.ApplicationListenerMethodAdapterTests.SampleEvents ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.event.ResolvableType org.springframework.context.event.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ResolvableType . forClassWithGenerics ( PayloadApplicationEvent .class , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { super( STRING , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.reflect.Method ); this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ EventListener @ Order ( NUMBER ) public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ EventListener ( java.lang.String .class ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ EventListener ( classes = java.lang.String .class ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ EventListener ( java.lang.String .class ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ EventListener ( { java.lang.String .class , java.lang.Integer .class } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ EventListener ( { java.lang.String .class , java.lang.Integer .class } ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> < java.lang.String > org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<?> < ? > org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper<?> ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> ) { if ( STRING . boolean ( org.springframework.context.event.GenericTestEvent<java.lang.String> . getPayload ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> ) throws java.io.IOException { if ( STRING . boolean ( org.springframework.context.event.GenericTestEvent<java.lang.String> . getPayload ( ) ) ) { throw new java.io.IOException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent );  <METHOD_END>
<METHOD_START> public void ( T T ) { this . T = T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.event.ResolvableType org.springframework.context.event.ResolvableType ( ) { return ResolvableType . forClassWithGenerics ( java.lang.Class<? extends org.springframework.context.event.ApplicationListenerMethodAdapterTests.EntityWrapper> ( ) , this . T . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , T T , V V ) { super( java.lang.Object , T ); this . V = V ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Long java.lang.Long ) { super( java.lang.Object , java.lang.String , java.lang.Long ); }  <METHOD_END>
