<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Before public void void ( ) java.lang.Exception { SessionFactory < java.lang.Object > org.springframework.integration.file.remote.SessionFactory<java.lang.Object> = mock ( SessionFactory .class ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> = new RemoteFileTemplate < java.lang.Object > ( org.springframework.integration.file.remote.SessionFactory<java.lang.Object> ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . afterPropertiesSet ( ) ; this . org.springframework.integration.file.remote.Session<java.lang.Object> = mock ( Session .class ) ; when ( org.springframework.integration.file.remote.SessionFactory<java.lang.Object> . getSession ( ) ) . thenReturn ( this . org.springframework.integration.file.remote.Session<java.lang.Object> ) ; this . java.io.File = this . org.springframework.integration.file.remote.TemporaryFolder . newFile ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . send ( new GenericMessage < java.io.File > ( this . java.io.File ) , FileExistsMode . REPLACE ) ; verify ( this . org.springframework.integration.file.remote.Session<java.lang.Object> ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . setUseTemporaryFileName ( false ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . send ( new GenericMessage < java.io.File > ( this . java.io.File ) , FileExistsMode . APPEND ) ; verify ( this . org.springframework.integration.file.remote.Session<java.lang.Object> ) . append ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.file.remote.Session<java.lang.Object> . exists ( Mockito . anyString ( ) ) ) . thenReturn ( true ) ; try { this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . send ( new GenericMessage < java.io.File > ( this . java.io.File ) , FileExistsMode . FAIL ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.file.remote.MessagingException ) { assertThat ( org.springframework.integration.file.remote.MessagingException . getMessage ( ) , Matchers . containsString ( STRING ) ) ; } verify ( this . org.springframework.integration.file.remote.Session<java.lang.Object> , never ( ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.file.remote.Session<java.lang.Object> . exists ( Mockito . anyString ( ) ) ) . thenReturn ( true ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . send ( new GenericMessage < java.io.File > ( this . java.io.File ) , FileExistsMode . IGNORE ) ; verify ( this . org.springframework.integration.file.remote.Session<java.lang.Object> , never ( ) ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.file.remote.Session<java.lang.Object> . exists ( Mockito . anyString ( ) ) ) . thenReturn ( false ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . send ( new GenericMessage < java.io.File > ( this . java.io.File ) , FileExistsMode . FAIL ) ; verify ( this . org.springframework.integration.file.remote.Session<java.lang.Object> ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.file.remote.Session<java.lang.Object> . exists ( Mockito . anyString ( ) ) ) . thenReturn ( false ) ; this . org.springframework.integration.file.remote.RemoteFileTemplate<java.lang.Object> . send ( new GenericMessage < java.io.File > ( this . java.io.File ) , FileExistsMode . IGNORE ) ; verify ( this . org.springframework.integration.file.remote.Session<java.lang.Object> ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . anyString ( ) ) ; }  <METHOD_END>
