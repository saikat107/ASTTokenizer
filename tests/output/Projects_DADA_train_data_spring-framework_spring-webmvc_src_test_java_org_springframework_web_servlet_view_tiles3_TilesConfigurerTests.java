<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.servlet.view.tiles3.MockServletContext = new MockServletContext ( ) ; TilesConfigurer org.springframework.web.servlet.view.tiles3.TilesConfigurer = new TilesConfigurer ( ) ; org.springframework.web.servlet.view.tiles3.TilesConfigurer . setDefinitions ( STRING ) ; org.springframework.web.servlet.view.tiles3.TilesConfigurer . setCheckRefresh ( true ) ; org.springframework.web.servlet.view.tiles3.TilesConfigurer . setServletContext ( org.springframework.web.servlet.view.tiles3.MockServletContext ) ; org.springframework.web.servlet.view.tiles3.TilesConfigurer . afterPropertiesSet ( ) ; ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext = ServletUtil . getApplicationContext ( org.springframework.web.servlet.view.tiles3.MockServletContext ) ; BasicTilesContainer org.springframework.web.servlet.view.tiles3.BasicTilesContainer = ( BasicTilesContainer ) TilesAccess . getContainer ( org.springframework.web.servlet.view.tiles3.ApplicationContext ) ; Request org.springframework.web.servlet.view.tiles3.Request = new ServletRequest ( org.springframework.web.servlet.view.tiles3.BasicTilesContainer . getApplicationContext ( ) , new MockHttpServletRequest ( ) , new MockHttpServletResponse ( ) ) ; assertNotNull ( org.springframework.web.servlet.view.tiles3.BasicTilesContainer . getDefinitionsFactory ( ) . getDefinition ( STRING , org.springframework.web.servlet.view.tiles3.Request ) ) ; org.springframework.web.servlet.view.tiles3.TilesConfigurer . destroy ( ) ; }  <METHOD_END>
