<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus ) { Assert . notNull ( org.springframework.web.reactive.function.server.HttpStatus , STRING ) ; this . org.springframework.web.reactive.function.server.HttpStatus = org.springframework.web.reactive.function.server.HttpStatus ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof java.util.Collection && ( ( java.util.Collection<?> < ? > ) java.lang.Object ) . boolean ( ) ) { return this ; } return RenderingResponse.Builder ( Conventions . getVariableName ( java.lang.Object ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( java.lang.Object ... java.lang.Object[] ) { if ( java.lang.Object[] != null ) { RenderingResponse.Builder ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( java.util.Collection<?> < ? > java.util.Collection<?> ) { if ( java.util.Collection<> != null ) { java.util.Collection<> . void ( this :: RenderingResponse.Builder ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( java.util.Map<java.lang.String,> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.web.reactive.function.server.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public RenderingResponse . RenderingResponse.Builder RenderingResponse.Builder ( HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ) { if ( org.springframework.web.reactive.function.server.HttpHeaders != null ) { this . org.springframework.web.reactive.function.server.HttpHeaders . putAll ( org.springframework.web.reactive.function.server.HttpHeaders ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ( ) { return Mono . just ( new org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.DefaultRenderingResponse ( this . org.springframework.web.reactive.function.server.HttpStatus , this . org.springframework.web.reactive.function.server.HttpHeaders , this . java.lang.String , this . java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus , HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders , java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( org.springframework.web.reactive.function.server.HttpStatus , org.springframework.web.reactive.function.server.HttpHeaders ); this . java.lang.String = java.lang.String ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private static < K , V > java.util.Map<K,V> < K , V > java.util.Map<K,V> ( java.util.Map<? extends K,? extends V> < ? extends K , ? extends V > java.util.Map<? extends K,? extends V> ) { return java.util.Collections . java.util.Map<K,V> ( new java.util.LinkedHashMap<,> <> ( java.util.Map<,> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange , HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ) { ServerHttpResponse org.springframework.web.reactive.function.server.ServerHttpResponse = org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) ; writeStatusAndHeaders ( org.springframework.web.reactive.function.server.ServerHttpResponse ) ; MediaType org.springframework.web.reactive.function.server.MediaType = org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) . getHeaders ( ) . getContentType ( ) ; java.util.Locale java.util.Locale = java.util.Locale ( org.springframework.web.reactive.function.server.ServerWebExchange , org.springframework.web.reactive.function.server.HandlerStrategies ) ; java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> < ViewResolver > java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> = org.springframework.web.reactive.function.server.HandlerStrategies . viewResolvers ( ) . get ( ) ; return Flux . fromStream ( java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> ) . concatMap ( viewResolver -> viewResolver . resolveViewName ( name ( ) , locale ) ) . next ( ) . otherwiseIfEmpty ( Mono . error ( new java.lang.IllegalArgumentException ( STRING + java.lang.String ( ) + STRING ) ) ) . then ( view -> view . render ( model ( ) , contentType , exchange ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Locale java.util.Locale ( ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange , HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ) { ServerRequest org.springframework.web.reactive.function.server.ServerRequest = org.springframework.web.reactive.function.server.ServerWebExchange .< ServerRequest > getAttribute ( RouterFunctions . REQUEST_ATTRIBUTE ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) ; return org.springframework.web.reactive.function.server.HandlerStrategies . localeResolver ( ) . apply ( org.springframework.web.reactive.function.server.ServerRequest ) . orElse ( java.util.Locale . java.util.Locale ( ) ) ; }  <METHOD_END>
