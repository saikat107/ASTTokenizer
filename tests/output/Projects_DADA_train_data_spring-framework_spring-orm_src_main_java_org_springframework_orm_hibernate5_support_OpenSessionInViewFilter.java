<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.orm.hibernate5.support.HttpServletRequest , HttpServletResponse org.springframework.orm.hibernate5.support.HttpServletResponse , FilterChain org.springframework.orm.hibernate5.support.FilterChain )			throws org.springframework.orm.hibernate5.support.ServletException , java.io.IOException { SessionFactory org.springframework.orm.hibernate5.support.SessionFactory = org.springframework.orm.hibernate5.support.SessionFactory ( org.springframework.orm.hibernate5.support.HttpServletRequest ) ; boolean boolean = false ; WebAsyncManager org.springframework.orm.hibernate5.support.WebAsyncManager = WebAsyncUtils . getAsyncManager ( org.springframework.orm.hibernate5.support.HttpServletRequest ) ; java.lang.String java.lang.String = getAlreadyFilteredAttributeName ( ) ; if ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.hibernate5.support.SessionFactory ) ) { boolean = true ; } else { boolean boolean = ! isAsyncDispatch ( org.springframework.orm.hibernate5.support.HttpServletRequest ) ; if ( boolean || ! boolean ( org.springframework.orm.hibernate5.support.WebAsyncManager , java.lang.String ) ) { logger . debug ( STRING ) ; Session org.springframework.orm.hibernate5.support.Session = org.springframework.orm.hibernate5.support.Session ( org.springframework.orm.hibernate5.support.SessionFactory ) ; SessionHolder org.springframework.orm.hibernate5.support.SessionHolder = new SessionHolder ( org.springframework.orm.hibernate5.support.Session ) ; TransactionSynchronizationManager . bindResource ( org.springframework.orm.hibernate5.support.SessionFactory , org.springframework.orm.hibernate5.support.SessionHolder ) ; AsyncRequestInterceptor org.springframework.orm.hibernate5.support.AsyncRequestInterceptor = new AsyncRequestInterceptor ( org.springframework.orm.hibernate5.support.SessionFactory , org.springframework.orm.hibernate5.support.SessionHolder ) ; org.springframework.orm.hibernate5.support.WebAsyncManager . registerCallableInterceptor ( java.lang.String , org.springframework.orm.hibernate5.support.AsyncRequestInterceptor ) ; org.springframework.orm.hibernate5.support.WebAsyncManager . registerDeferredResultInterceptor ( java.lang.String , org.springframework.orm.hibernate5.support.AsyncRequestInterceptor ) ; } } try { org.springframework.orm.hibernate5.support.FilterChain . doFilter ( org.springframework.orm.hibernate5.support.HttpServletRequest , org.springframework.orm.hibernate5.support.HttpServletResponse ) ; } finally { if ( ! boolean ) { SessionHolder org.springframework.orm.hibernate5.support.SessionHolder = ( SessionHolder ) TransactionSynchronizationManager . unbindResource ( org.springframework.orm.hibernate5.support.SessionFactory ) ; if ( ! isAsyncStarted ( org.springframework.orm.hibernate5.support.HttpServletRequest ) ) { logger . debug ( STRING ) ; SessionFactoryUtils . closeSession ( org.springframework.orm.hibernate5.support.SessionHolder . getSession ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.hibernate5.support.SessionFactory org.springframework.orm.hibernate5.support.SessionFactory ( HttpServletRequest org.springframework.orm.hibernate5.support.HttpServletRequest ) { return org.springframework.orm.hibernate5.support.SessionFactory ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.hibernate5.support.SessionFactory org.springframework.orm.hibernate5.support.SessionFactory ( ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( ) + STRING ) ; } WebApplicationContext org.springframework.orm.hibernate5.support.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( getServletContext ( ) ) ; return org.springframework.orm.hibernate5.support.WebApplicationContext . getBean ( java.lang.String ( ) , SessionFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.orm.hibernate5.support.Session org.springframework.orm.hibernate5.support.Session ( SessionFactory org.springframework.orm.hibernate5.support.SessionFactory ) throws org.springframework.orm.hibernate5.support.DataAccessResourceFailureException { try { Session org.springframework.orm.hibernate5.support.Session = org.springframework.orm.hibernate5.support.SessionFactory . openSession ( ) ; org.springframework.orm.hibernate5.support.Session . setFlushMode ( FlushMode . MANUAL ) ; return org.springframework.orm.hibernate5.support.Session ; } catch ( HibernateException org.springframework.orm.hibernate5.support.HibernateException ) { throw new DataAccessResourceFailureException ( STRING , org.springframework.orm.hibernate5.support.HibernateException ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( WebAsyncManager org.springframework.orm.hibernate5.support.WebAsyncManager , java.lang.String java.lang.String ) { if ( org.springframework.orm.hibernate5.support.WebAsyncManager . getCallableInterceptor ( java.lang.String ) == null ) { return false ; } ( ( AsyncRequestInterceptor ) org.springframework.orm.hibernate5.support.WebAsyncManager . getCallableInterceptor ( java.lang.String ) ) . bindSession ( ) ; return true ; }  <METHOD_END>
