<METHOD_START> @ Test public void void ( ) java.lang.Exception { Topic org.springframework.jms.support.destination.Topic = new StubTopic ( ) ; TopicSession org.springframework.jms.support.destination.TopicSession = mock ( TopicSession .class ) ; given ( org.springframework.jms.support.destination.TopicSession . createTopic ( java.lang.String ) ) . willReturn ( org.springframework.jms.support.destination.Topic ) ; void ( org.springframework.jms.support.destination.TopicSession , org.springframework.jms.support.destination.Topic , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Topic org.springframework.jms.support.destination.Topic = new StubTopic ( ) ; Session org.springframework.jms.support.destination.Session = mock ( Session .class ) ; given ( org.springframework.jms.support.destination.Session . createTopic ( java.lang.String ) ) . willReturn ( org.springframework.jms.support.destination.Topic ) ; void ( org.springframework.jms.support.destination.Session , org.springframework.jms.support.destination.Topic , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Queue org.springframework.jms.support.destination.Queue = new StubQueue ( ) ; Session org.springframework.jms.support.destination.Session = mock ( QueueSession .class ) ; given ( org.springframework.jms.support.destination.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.support.destination.Queue ) ; void ( org.springframework.jms.support.destination.Session , org.springframework.jms.support.destination.Queue , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Queue org.springframework.jms.support.destination.Queue = new StubQueue ( ) ; Session org.springframework.jms.support.destination.Session = mock ( Session .class ) ; given ( org.springframework.jms.support.destination.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.support.destination.Queue ) ; void ( org.springframework.jms.support.destination.Session , org.springframework.jms.support.destination.Queue , false ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Session org.springframework.jms.support.destination.Session , Destination org.springframework.jms.support.destination.Destination , boolean boolean ) throws org.springframework.jms.support.destination.JMSException { DynamicDestinationResolver org.springframework.jms.support.destination.DynamicDestinationResolver = new DynamicDestinationResolver ( ) ; Destination org.springframework.jms.support.destination.Destination = org.springframework.jms.support.destination.DynamicDestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , boolean ) ; assertNotNull ( org.springframework.jms.support.destination.Destination ) ; assertSame ( org.springframework.jms.support.destination.Destination , org.springframework.jms.support.destination.Destination ) ; }  <METHOD_END>
