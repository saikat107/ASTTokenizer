<METHOD_START> public void ( org.springframework.web.reactive.result.condition.RequestCondition<?> < ? > ... org.springframework.web.reactive.result.condition.RequestCondition<?>[] ) { this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] = org.springframework.web.reactive.result.condition.RequestConditionHolder[] ( org.springframework.web.reactive.result.condition.RequestCondition<?>[] ) ; }  <METHOD_END>
<METHOD_START> private void ( RequestConditionHolder [] org.springframework.web.reactive.result.condition.RequestConditionHolder[] ) { this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] = org.springframework.web.reactive.result.condition.RequestConditionHolder[] ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.condition.RequestConditionHolder [] org.springframework.web.reactive.result.condition.RequestConditionHolder[] ( org.springframework.web.reactive.result.condition.RequestCondition<?> < ? > ... org.springframework.web.reactive.result.condition.RequestCondition<?>[] ) { RequestConditionHolder [] org.springframework.web.reactive.result.condition.RequestConditionHolder[] = new RequestConditionHolder [ rawConditions . length ] ; for ( int int = NUMBER ; int < rawConditions . length ; int ++ ) { org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] = new RequestConditionHolder ( org.springframework.web.reactive.result.condition.RequestCondition<?>[] [ int ] ) ; } return org.springframework.web.reactive.result.condition.RequestConditionHolder[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ObjectUtils . isEmpty ( this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> < RequestCondition < ? > > java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> ( ) { return java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> < RequestCondition < ? > > java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> ( ) { java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> < RequestCondition < ? > > java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> = new java.util.ArrayList<org.springframework.web.reactive.result.condition.RequestCondition<?>> <> ( ) ; for ( RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder : this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] ) { java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> . add ( org.springframework.web.reactive.result.condition.RequestConditionHolder . getCondition ( ) ) ; } return java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<?> < ? > java.util.Collection<?> ( ) { return ( boolean ( ) ) ? java.util.Collections . java.util.List<java.lang.Object> ( ) : java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> private int int ( ) { return this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] . length ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition ( org.springframework.web.reactive.result.condition.CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition ) { if ( boolean ( ) && org.springframework.web.reactive.result.condition.CompositeRequestCondition . boolean ( ) ) { return this ; } else if ( org.springframework.web.reactive.result.condition.CompositeRequestCondition . boolean ( ) ) { return this ; } else if ( boolean ( ) ) { return org.springframework.web.reactive.result.condition.CompositeRequestCondition ; } else { void ( org.springframework.web.reactive.result.condition.CompositeRequestCondition ) ; RequestConditionHolder [] org.springframework.web.reactive.result.condition.RequestConditionHolder[] = new RequestConditionHolder [ int ( ) ] ; for ( int int = NUMBER ; int < int ( ) ; int ++ ) { org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] = this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] . combine ( org.springframework.web.reactive.result.condition.CompositeRequestCondition . org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] ) ; } return new org.springframework.web.reactive.result.condition.CompositeRequestCondition ( org.springframework.web.reactive.result.condition.RequestConditionHolder[] ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.web.reactive.result.condition.CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition ) { Assert . isTrue ( int ( ) == org.springframework.web.reactive.result.condition.CompositeRequestCondition . int ( ) , STRING + ObjectUtils . nullSafeToString ( this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] ) + STRING + ObjectUtils . nullSafeToString ( org.springframework.web.reactive.result.condition.CompositeRequestCondition . org.springframework.web.reactive.result.condition.RequestConditionHolder[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { if ( boolean ( ) ) { return this ; } RequestConditionHolder [] org.springframework.web.reactive.result.condition.RequestConditionHolder[] = new RequestConditionHolder [ int ( ) ] ; for ( int int = NUMBER ; int < int ( ) ; int ++ ) { org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] = this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; if ( org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] == null ) { return null ; } } return new org.springframework.web.reactive.result.condition.CompositeRequestCondition ( org.springframework.web.reactive.result.condition.RequestConditionHolder[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.reactive.result.condition.CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition , ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { if ( boolean ( ) && org.springframework.web.reactive.result.condition.CompositeRequestCondition . boolean ( ) ) { return NUMBER ; } else if ( boolean ( ) ) { return NUMBER ; } else if ( org.springframework.web.reactive.result.condition.CompositeRequestCondition . boolean ( ) ) { return - NUMBER ; } else { void ( org.springframework.web.reactive.result.condition.CompositeRequestCondition ) ; for ( int int = NUMBER ; int < int ( ) ; int ++ ) { int int = this . org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] . compareTo ( org.springframework.web.reactive.result.condition.CompositeRequestCondition . org.springframework.web.reactive.result.condition.RequestConditionHolder[] [ int ] , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; if ( int != NUMBER ) { return int ; } } return NUMBER ; } }  <METHOD_END>
