<METHOD_START> public void void ( javax.management.MBeanServerConnection javax.management.MBeanServerConnection ) { this . javax.management.MBeanServerConnection = javax.management.MBeanServerConnection ; }  <METHOD_END>
<METHOD_START> public void void ( javax.management.ObjectName ... javax.management.ObjectName[] ) { Assert . isTrue ( ! ObjectUtils . isEmpty ( javax.management.ObjectName[] ) , STRING ) ; this . javax.management.ObjectName[] = javax.management.ObjectName[] ; }  <METHOD_END>
<METHOD_START> public void void ( javax.management.NotificationFilter javax.management.NotificationFilter ) { this . javax.management.NotificationFilter = javax.management.NotificationFilter ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.management.Notification javax.management.Notification , java.lang.Object java.lang.Object ) { if ( this . org.springframework.integration.jmx.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.jmx.Log . info ( STRING + javax.management.Notification + STRING + java.lang.Object ) ; } AbstractIntegrationMessageBuilder < ? > org.springframework.integration.jmx.AbstractIntegrationMessageBuilder<?> = this . getMessageBuilderFactory ( ) . withPayload ( javax.management.Notification ) ; if ( java.lang.Object != null ) { org.springframework.integration.jmx.AbstractIntegrationMessageBuilder<> . setHeader ( JmxHeaders . NOTIFICATION_HANDBACK , java.lang.Object ) ; } Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.AbstractIntegrationMessageBuilder<> . build ( ) ; this . sendMessage ( org.springframework.integration.jmx.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.integration.jmx.ContextRefreshedEvent ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) && isAutoStartup ( ) ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { return; } this . org.springframework.integration.jmx.Log . debug ( STRING ) ; try { Assert . notNull ( this . javax.management.MBeanServerConnection , STRING ) ; Assert . notNull ( this . javax.management.ObjectName[] , STRING ) ; java.util.Collection<javax.management.ObjectName> < javax.management.ObjectName > java.util.Collection<javax.management.ObjectName> = this . java.util.Collection<javax.management.ObjectName> ( ) ; if ( java.util.Collection<javax.management.ObjectName> . int ( ) < NUMBER ) { this . org.springframework.integration.jmx.Log . error ( STRING + java.util.Arrays . java.util.List<javax.management.ObjectName> ( this . javax.management.ObjectName[] ) ) ; } for ( javax.management.ObjectName javax.management.ObjectName : java.util.Collection<javax.management.ObjectName> ) { this . javax.management.MBeanServerConnection . void ( javax.management.ObjectName , this , this . javax.management.NotificationFilter , this . java.lang.Object ) ; } } catch ( javax.management.InstanceNotFoundException javax.management.InstanceNotFoundException ) { throw new java.lang.IllegalStateException ( STRING , javax.management.InstanceNotFoundException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.jmx.Log . debug ( STRING ) ; if ( this . javax.management.MBeanServerConnection != null && this . javax.management.ObjectName[] != null ) { java.util.Collection<javax.management.ObjectName> < javax.management.ObjectName > java.util.Collection<javax.management.ObjectName> = this . java.util.Collection<javax.management.ObjectName> ( ) ; for ( javax.management.ObjectName javax.management.ObjectName : java.util.Collection<javax.management.ObjectName> ) { try { this . javax.management.MBeanServerConnection . void ( javax.management.ObjectName , this , this . javax.management.NotificationFilter , this . java.lang.Object ) ; } catch ( javax.management.InstanceNotFoundException javax.management.InstanceNotFoundException ) { this . org.springframework.integration.jmx.Log . error ( STRING , javax.management.InstanceNotFoundException ) ; } catch ( javax.management.ListenerNotFoundException javax.management.ListenerNotFoundException ) { this . org.springframework.integration.jmx.Log . error ( STRING , javax.management.ListenerNotFoundException ) ; } catch ( java.io.IOException java.io.IOException ) { this . org.springframework.integration.jmx.Log . error ( STRING , java.io.IOException ) ; } } } }  <METHOD_END>
<METHOD_START> protected java.util.Collection<javax.management.ObjectName> < javax.management.ObjectName > java.util.Collection<javax.management.ObjectName> ( ) { java.util.List<javax.management.ObjectName> < javax.management.ObjectName > java.util.List<javax.management.ObjectName> = new java.util.ArrayList<javax.management.ObjectName> < javax.management.ObjectName > ( ) ; for ( javax.management.ObjectName javax.management.ObjectName : this . javax.management.ObjectName[] ) { java.util.Set<javax.management.ObjectInstance> < javax.management.ObjectInstance > java.util.Set<javax.management.ObjectInstance> ; try { java.util.Set<javax.management.ObjectInstance> = this . javax.management.MBeanServerConnection . java.util.Set<javax.management.ObjectInstance> ( javax.management.ObjectName , null ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } if ( java.util.Set<javax.management.ObjectInstance> . int ( ) == NUMBER && this . org.springframework.integration.jmx.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.jmx.Log . debug ( STRING + javax.management.ObjectName ) ; } for ( javax.management.ObjectInstance javax.management.ObjectInstance : java.util.Set<javax.management.ObjectInstance> ) { if ( this . org.springframework.integration.jmx.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.jmx.Log . debug ( STRING + javax.management.ObjectInstance . javax.management.ObjectName ( ) . java.lang.String ( ) ) ; } java.util.List<javax.management.ObjectName> . boolean ( javax.management.ObjectInstance . javax.management.ObjectName ( ) ) ; } } return java.util.List<javax.management.ObjectName> ; }  <METHOD_END>
