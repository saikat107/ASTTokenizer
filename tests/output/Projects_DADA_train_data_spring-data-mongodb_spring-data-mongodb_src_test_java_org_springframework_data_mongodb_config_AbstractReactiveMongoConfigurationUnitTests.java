<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { AbstractReactiveMongoConfiguration org.springframework.data.mongodb.config.AbstractReactiveMongoConfiguration = new org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration ( ) ; assertThat ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfiguration . getMappingBasePackages ( ) , hasItem ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration .class . java.lang.Package ( ) . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfiguration . getInitialEntitySet ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfiguration . getInitialEntitySet ( ) , hasItem ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.Entity .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { void ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.data.mongodb.config.AbstractApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration .class ) ; assertThat ( org.springframework.data.mongodb.config.AbstractApplicationContext . getBean ( SimpleReactiveMongoDatabaseFactory .class ) , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.config.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; org.springframework.data.mongodb.config.AbstractApplicationContext . getBean ( Mongo .class ) ; org.springframework.data.mongodb.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration = new org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration ( ) ; MongoMappingContext org.springframework.data.mongodb.config.MongoMappingContext = org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration . mongoMappingContext ( ) ; assertThat ( org.springframework.data.mongodb.config.MongoMappingContext . getPersistentEntities ( ) , is ( emptyIterable ( ) ) ) ; org.springframework.data.mongodb.config.MongoMappingContext . initialize ( ) ; assertThat ( org.springframework.data.mongodb.config.MongoMappingContext . getPersistentEntities ( ) , is ( not ( emptyIterable ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.data.mongodb.config.AbstractApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration .class ) ; MongoMappingContext org.springframework.data.mongodb.config.MongoMappingContext = org.springframework.data.mongodb.config.AbstractApplicationContext . getBean ( MongoMappingContext .class ) ; BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.config.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.config.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.Entity .class ) ; StandardEvaluationContext org.springframework.data.mongodb.config.StandardEvaluationContext = ( StandardEvaluationContext ) ReflectionTestUtils . getField ( org.springframework.data.mongodb.config.BasicMongoPersistentEntity<> , STRING ) ; assertThat ( org.springframework.data.mongodb.config.StandardEvaluationContext . getBeanResolver ( ) , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.data.mongodb.config.AbstractApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration .class ) ; MongoTypeMapper org.springframework.data.mongodb.config.MongoTypeMapper = org.springframework.data.mongodb.config.AbstractApplicationContext . getBean ( CustomMongoTypeMapper .class ) ; MappingMongoConverter org.springframework.data.mongodb.config.MappingMongoConverter = org.springframework.data.mongodb.config.AbstractApplicationContext . getBean ( MappingMongoConverter .class ) ; assertThat ( org.springframework.data.mongodb.config.MappingMongoConverter , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.config.MappingMongoConverter . getTypeMapper ( ) , is ( org.springframework.data.mongodb.config.MongoTypeMapper ) ) ; org.springframework.data.mongodb.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.ClassNotFoundException { org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.ConfigurationWithMultipleBasePackages org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.ConfigurationWithMultipleBasePackages = new org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.ConfigurationWithMultipleBasePackages ( ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.ConfigurationWithMultipleBasePackages . getInitialEntitySet ( ) ; assertThat ( java.util.Set<java.lang.Class<?>> , hasSize ( NUMBER ) ) ; assertThat ( java.util.Set<java.lang.Class<?>> , hasItems ( First .class , Second .class ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( final java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { AbstractReactiveMongoConfiguration org.springframework.data.mongodb.config.AbstractReactiveMongoConfiguration = new org.springframework.data.mongodb.config.AbstractReactiveMongoConfigurationUnitTests.SampleMongoConfiguration ( ) { @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ; } } ; assertThat ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfiguration . getMappingBasePackages ( ) , hasItem ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.config.AbstractReactiveMongoConfiguration . getInitialEntitySet ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.config.MongoClient org.springframework.data.mongodb.config.MongoClient ( ) { return MongoClients . create ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.data.mongodb.config.MappingMongoConverter org.springframework.data.mongodb.config.MappingMongoConverter ( ) java.lang.Exception { MappingMongoConverter org.springframework.data.mongodb.config.MappingMongoConverter = super. mappingMongoConverter ( ) ; org.springframework.data.mongodb.config.MappingMongoConverter . setTypeMapper ( org.springframework.data.mongodb.config.MongoTypeMapper ( ) ) ; return org.springframework.data.mongodb.config.MappingMongoConverter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.config.MongoTypeMapper org.springframework.data.mongodb.config.MongoTypeMapper ( ) { return new CustomMongoTypeMapper ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.config.MongoClient org.springframework.data.mongodb.config.MongoClient ( ) { return MongoClients . create ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; }  <METHOD_END>
