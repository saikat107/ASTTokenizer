<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { return NumberUtils . STANDARD_NUMBER_TYPES ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.format.number.Printer<java.lang.Number> < java.lang.Number > org.springframework.format.number.Printer<java.lang.Number> ( NumberFormat org.springframework.format.number.NumberFormat , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.format.number.Formatter<java.lang.Number> ( org.springframework.format.number.NumberFormat ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.format.number.Parser<java.lang.Number> < java.lang.Number > org.springframework.format.number.Parser<java.lang.Number> ( NumberFormat org.springframework.format.number.NumberFormat , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.format.number.Formatter<java.lang.Number> ( org.springframework.format.number.NumberFormat ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.format.number.Formatter<java.lang.Number> < java.lang.Number > org.springframework.format.number.Formatter<java.lang.Number> ( NumberFormat org.springframework.format.number.NumberFormat ) { if ( StringUtils . hasLength ( org.springframework.format.number.NumberFormat . pattern ( ) ) ) { return new NumberStyleFormatter ( resolveEmbeddedValue ( org.springframework.format.number.NumberFormat . pattern ( ) ) ) ; } else { Style org.springframework.format.number.Style = org.springframework.format.number.NumberFormat . style ( ) ; if ( org.springframework.format.number.Style == Style . CURRENCY ) { return new CurrencyStyleFormatter ( ) ; } else if ( org.springframework.format.number.Style == Style . PERCENT ) { return new PercentStyleFormatter ( ) ; } else { return new NumberStyleFormatter ( ) ; } } }  <METHOD_END>
