<METHOD_START> public void ( JpaParameters org.springframework.data.jpa.repository.query.JpaParameters , java.lang.Object [] java.lang.Object[] ) { Assert . notNull ( org.springframework.data.jpa.repository.query.JpaParameters , STRING ) ; Assert . notNull ( java.lang.Object[] , STRING ) ; Assert . isTrue ( org.springframework.data.jpa.repository.query.JpaParameters . getNumberOfParameters ( ) == java.lang.Object[] . int , STRING ) ; this . org.springframework.data.jpa.repository.query.JpaParameters = org.springframework.data.jpa.repository.query.JpaParameters ; this . java.lang.Object[] = java.lang.Object[] . java.lang.Object ( ) ; this . org.springframework.data.jpa.repository.query.ParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.jpa.repository.query.JpaParameters , this . java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> void ( JpaParameters org.springframework.data.jpa.repository.query.JpaParameters ) { this( org.springframework.data.jpa.repository.query.JpaParameters , new java.lang.Object [ NUMBER ] ); }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.Pageable org.springframework.data.jpa.repository.query.Pageable ( ) { return org.springframework.data.jpa.repository.query.ParameterAccessor . getPageable ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.Sort org.springframework.data.jpa.repository.query.Sort ( ) { return org.springframework.data.jpa.repository.query.ParameterAccessor . getSort ( ) ; }  <METHOD_END>
<METHOD_START> public < T extends org.springframework.data.jpa.repository.query.Query > T T ( T T ) { Assert . notNull ( T , STRING ) ; int int = NUMBER ; int int = NUMBER ; for ( JpaParameter org.springframework.data.jpa.repository.query.JpaParameter : org.springframework.data.jpa.repository.query.JpaParameters ) { if ( boolean ( org.springframework.data.jpa.repository.query.JpaParameter ) ) { java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.query.ParameterAccessor . getBindableValue ( int ) ; void ( T , org.springframework.data.jpa.repository.query.JpaParameter , java.lang.Object , int ++ ) ; int ++ ; } } return T ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( JpaParameter org.springframework.data.jpa.repository.query.JpaParameter ) { return org.springframework.data.jpa.repository.query.JpaParameter . isBindable ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Query org.springframework.data.jpa.repository.query.Query , JpaParameter org.springframework.data.jpa.repository.query.JpaParameter , java.lang.Object java.lang.Object , int int ) { if ( org.springframework.data.jpa.repository.query.JpaParameter . isTemporalParameter ( ) ) { if ( boolean ( org.springframework.data.jpa.repository.query.Query ) && org.springframework.data.jpa.repository.query.JpaParameter . isNamedParameter ( ) ) { org.springframework.data.jpa.repository.query.Query . setParameter ( org.springframework.data.jpa.repository.query.JpaParameter . getName ( ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) , ( java.util.Date ) java.lang.Object , org.springframework.data.jpa.repository.query.JpaParameter . getTemporalType ( ) ) ; } else { org.springframework.data.jpa.repository.query.Query . setParameter ( int , ( java.util.Date ) java.lang.Object , org.springframework.data.jpa.repository.query.JpaParameter . getTemporalType ( ) ) ; } return; } if ( boolean ( org.springframework.data.jpa.repository.query.Query ) && org.springframework.data.jpa.repository.query.JpaParameter . isNamedParameter ( ) ) { org.springframework.data.jpa.repository.query.Query . setParameter ( org.springframework.data.jpa.repository.query.JpaParameter . getName ( ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) , java.lang.Object ) ; } else { org.springframework.data.jpa.repository.query.Query . setParameter ( int , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( Query org.springframework.data.jpa.repository.query.Query ) { Assert . notNull ( org.springframework.data.jpa.repository.query.Query , STRING ) ; return org.springframework.data.jpa.repository.query.Query ( org.springframework.data.jpa.repository.query.Query , org.springframework.data.jpa.repository.query.JpaParameters ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( Query org.springframework.data.jpa.repository.query.Query ) { return QueryUtils . hasNamedParameter ( org.springframework.data.jpa.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( Query org.springframework.data.jpa.repository.query.Query , Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> ) { Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.Query ( org.springframework.data.jpa.repository.query.Query ) ; if ( ! org.springframework.data.jpa.repository.query.Parameters<,> . hasPageableParameter ( ) || org.springframework.data.jpa.repository.query.Pageable ( ) . isUnpaged ( ) ) { return org.springframework.data.jpa.repository.query.Query ; } org.springframework.data.jpa.repository.query.Query . setFirstResult ( ( int ) org.springframework.data.jpa.repository.query.Pageable ( ) . getOffset ( ) ) ; org.springframework.data.jpa.repository.query.Query . setMaxResults ( org.springframework.data.jpa.repository.query.Pageable ( ) . getPageSize ( ) ) ; return org.springframework.data.jpa.repository.query.Query ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.JpaParameters org.springframework.data.jpa.repository.query.JpaParameters ( ) { return org.springframework.data.jpa.repository.query.JpaParameters ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object [] java.lang.Object[] ( ) { return java.lang.Object[] ; }  <METHOD_END>
