<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFilter ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestPatternFilter ( STRING ) ) ; try { org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFilter ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestPatternFilter ( STRING ) ) ; try { org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> = ( MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . size ( ) ) ; assertSame ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { int int ; @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { if ( int ++ == NUMBER ) { assertEquals ( STRING , java.lang.String ) ; } else { assertEquals ( STRING , java.lang.String ) ; } java.io.OutputStream . void ( STRING . byte[] ( ) ) ; } @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( java.lang.String . java.lang.String ( STRING , STRING ) , NUMBER , false , false , NUMBER , STRING ) , new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( java.lang.String . java.lang.String ( STRING , STRING ) , NUMBER , false , false , NUMBER , STRING ) } ; } } ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.io.File> < java.io.File > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> = ( MessageBuilder < java.util.List<java.io.File> < java.io.File > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { if ( int ++ == NUMBER ) { assertEquals ( STRING , java.lang.String ) ; } else { assertEquals ( STRING , java.lang.String ) ; } java.io.OutputStream . void ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( java.lang.String . java.lang.String ( STRING , STRING ) , NUMBER , false , false , NUMBER , STRING ) , new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( java.lang.String . java.lang.String ( STRING , STRING ) , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; } @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; } } ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.io.File> < java.io.File > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> = ( MessageBuilder < java.util.List<java.io.File> < java.io.File > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> . getPayload ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.io.File>> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; } } ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; Session < ? > org.springframework.integration.file.remote.gateway.Session<?> = mock ( Session .class ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { Object [] arguments = invocation . getArguments ( ) ; args . set ( ( String ) arguments [ NUMBER ] + ( String ) arguments [ NUMBER ] ) ; return null ; } ) . when ( org.springframework.integration.file.remote.gateway.Session<> ) . rename ( anyString ( ) , anyString ( ) ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session<> ) ; Message < java.lang.String > org.springframework.integration.file.remote.gateway.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . RENAME_TO , STRING ) . build ( ) ; MessageBuilder < ? > org.springframework.integration.file.remote.gateway.MessageBuilder<?> = ( MessageBuilder < ? > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.remote.gateway.MessageBuilder<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setRenameExpression ( org.springframework.integration.file.remote.gateway.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; Session < ? > org.springframework.integration.file.remote.gateway.Session<?> = mock ( Session .class ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { Object [] arguments = invocation . getArguments ( ) ; args . set ( ( String ) arguments [ NUMBER ] + arguments [ NUMBER ] ) ; return null ; } ) . when ( org.springframework.integration.file.remote.gateway.Session<> ) . rename ( anyString ( ) , anyString ( ) ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session<> ) ; MessageBuilder < ? > org.springframework.integration.file.remote.gateway.MessageBuilder<?> = ( MessageBuilder < ? > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<> . getHeaders ( ) . get ( FileHeaders . RENAME_TO ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.remote.gateway.MessageBuilder<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setRenameExpression ( org.springframework.integration.file.remote.gateway.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; Session < ? > org.springframework.integration.file.remote.gateway.Session<?> = mock ( Session .class ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { Object [] arguments = invocation . getArguments ( ) ; args . set ( ( String ) arguments [ NUMBER ] + ( String ) arguments [ NUMBER ] ) ; return null ; } ) . when ( org.springframework.integration.file.remote.gateway.Session<> ) . rename ( anyString ( ) , anyString ( ) ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { madeDirs . add ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.file.remote.gateway.Session<> ) . mkdir ( anyString ( ) ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session<> ) ; Message < java.lang.String > org.springframework.integration.file.remote.gateway.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . RENAME_TO , STRING ) . build ( ) ; MessageBuilder < ? > org.springframework.integration.file.remote.gateway.MessageBuilder<?> = ( MessageBuilder < ? > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.remote.gateway.MessageBuilder<> . getPayload ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) { org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [ NUMBER ] ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , true , false , NUMBER , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , true , NUMBER , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , true , false , NUMBER , STRING ) ; return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> = ( MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . size ( ) ) ; assertSame ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] [ NUMBER ] , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) , new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , true , false , NUMBER , STRING ) , new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , true , false , NUMBER , STRING ) , new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> = ( MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> = ( MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [ NUMBER ] ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> = ( MessageBuilder < java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> . getPayload ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> = ( MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> = ( MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> = ( MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> = ( MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> = ( MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFilter ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestPatternFilter ( STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] = org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( ) ; when ( org.springframework.integration.file.remote.gateway.Session . list ( STRING ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> = ( MessageBuilder < java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; } @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; } } ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.io.File > org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> = ( MessageBuilder < java.io.File > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; java.io.File java.io.File = new java.io.File ( this . java.lang.String + STRING ) ; assertEquals ( java.io.File , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getPayload ( ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; java.io.File . boolean ( ) ; assertNull ( org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; java.io.File java.io.File = new java.io.File ( this . java.lang.String + STRING ) ; java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( java.io.File ) ; java.io.FileOutputStream . void ( STRING . byte[] ( ) ) ; java.io.FileOutputStream . void ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; } @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; } } ) ; MessageBuilder < java.io.File > org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> ; try { org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> = ( MessageBuilder < java.io.File > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.file.remote.gateway.MessageHandlingException ) { assertThat ( org.springframework.integration.file.remote.gateway.MessageHandlingException . getMessage ( ) , containsString ( STRING ) ) ; } org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . FAIL ) ; try { org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> = ( MessageBuilder < java.io.File > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.file.remote.gateway.MessageHandlingException ) { assertThat ( org.springframework.integration.file.remote.gateway.MessageHandlingException . getMessage ( ) , containsString ( STRING ) ) ; } org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . IGNORE ) ; org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> = ( MessageBuilder < java.io.File > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( java.io.File , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getPayload ( ) ) ; void ( STRING , java.io.File ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . APPEND ) ; org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> = ( MessageBuilder < java.io.File > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( java.io.File , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getPayload ( ) ) ; void ( STRING , java.io.File ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . REPLACE ) ; org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> = ( MessageBuilder < java.io.File > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( java.io.File , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getPayload ( ) ) ; void ( STRING , java.io.File ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.io.File java.io.File ) throws java.lang.Exception { java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader ( new java.io.FileReader ( java.io.File ) ) ; assertEquals ( java.lang.String , java.io.BufferedReader . java.lang.String ( ) ) ; java.io.BufferedReader . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; } @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream ) { throw new java.lang.RuntimeException ( STRING ) ; } } ) ; try { org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.file.remote.gateway.MessagingException ) { assertThat ( org.springframework.integration.file.remote.gateway.MessagingException . getCause ( ) , instanceOf ( java.lang.RuntimeException .class ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessagingException . getCause ( ) . getMessage ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) RemoteFileTemplate org.springframework.integration.file.remote.gateway.RemoteFileTemplate = new RemoteFileTemplate ( org.springframework.integration.file.remote.gateway.SessionFactory ) ; java.io.File java.io.File = new java.io.File ( this . java.lang.String + STRING + org.springframework.integration.file.remote.gateway.RemoteFileTemplate . getTemporaryFileSuffix ( ) ) ; assertFalse ( java.io.File . boolean ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Calendar . int , - NUMBER ) ; final java.util.Date java.util.Date = new java.util.Date ( java.util.Calendar . java.util.Date ( ) . long ( ) / NUMBER * NUMBER ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , java.util.Date . long ( ) , STRING ) } ; } @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; } } ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.io.File > org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> = ( MessageBuilder < java.io.File > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; java.io.File java.io.File = new java.io.File ( this . java.lang.String + STRING ) ; assertEquals ( java.io.File , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getPayload ( ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; assertEquals ( java.util.Date . long ( ) , java.io.File . long ( ) ) ; java.io.File . boolean ( ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.io.File> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , java.util.Date . long ( ) , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; new java.io.File ( this . java.lang.String + STRING ) . boolean ( ) ; SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setLocalDirectory ( new java.io.File ( this . java.lang.String + STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestSession ( ) { @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; } @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; } } ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.io.File java.io.File = new java.io.File ( this . java.lang.String + STRING ) ; assertTrue ( java.io.File . boolean ( ) ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] { new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( STRING , NUMBER , false , false , NUMBER , STRING ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )					throws java.io.IOException { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory = mock ( SessionFactory .class ) ; Session org.springframework.integration.file.remote.gateway.Session = mock ( Session .class ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.SessionFactory , STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session ) ; when ( org.springframework.integration.file.remote.gateway.Session . remove ( STRING ) ) . thenReturn ( java.lang.Boolean . java.lang.Boolean ) ; @ java.lang.SuppressWarnings ( STRING ) MessageBuilder < java.lang.Boolean > org.springframework.integration.file.remote.gateway.MessageBuilder<java.lang.Boolean> = ( MessageBuilder < java.lang.Boolean > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.remote.gateway.MessageBuilder<java.lang.Boolean> . getPayload ( ) ) ; verify ( org.springframework.integration.file.remote.gateway.Session ) . remove ( STRING ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.lang.Boolean> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.MessageBuilder<java.lang.Boolean> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) SessionFactory < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( SessionFactory .class ) ; @ java.lang.SuppressWarnings ( STRING ) Session < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( Session .class ) ; RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = new RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) { @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return false ; } } ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , STRING , null ) ; FileTransferringMessageHandler < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = new FileTransferringMessageHandler < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; Message < java.lang.String > org.springframework.integration.file.remote.gateway.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . build ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.String ) ; ArgumentCaptor < java.lang.String > org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) . write ( any ( java.io.InputStream .class ) , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . capture ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . getValue ( ) ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) . rename ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) SessionFactory < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( SessionFactory .class ) ; @ java.lang.SuppressWarnings ( STRING ) Session < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( Session .class ) ; RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = new RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) { @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return true ; } } ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , STRING , null ) ; FileTransferringMessageHandler < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = new FileTransferringMessageHandler < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.gateway.FileTransferringMessageHandler<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; Message < java.lang.String > org.springframework.integration.file.remote.gateway.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . build ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.String ) ; ArgumentCaptor < java.lang.String > org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) . write ( any ( java.io.InputStream .class ) , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . capture ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . getValue ( ) ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) . rename ( STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . FAIL ) ; try { java.lang.String = ( java.lang.String ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . REPLACE ) ; java.lang.String = ( java.lang.String ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , times ( NUMBER ) ) . write ( any ( java.io.InputStream .class ) , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . capture ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . getValue ( ) ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , times ( NUMBER ) ) . rename ( STRING , STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . APPEND ) ; java.lang.String = ( java.lang.String ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) . append ( any ( java.io.InputStream .class ) , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . capture ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.remote.gateway.ArgumentCaptor<java.lang.String> . getValue ( ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setFileExistsMode ( FileExistsMode . IGNORE ) ; java.lang.String = ( java.lang.String ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.String ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , times ( NUMBER ) ) . write ( any ( java.io.InputStream .class ) , anyString ( ) ) ; verify ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , times ( NUMBER ) ) . append ( any ( java.io.InputStream .class ) , anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) SessionFactory < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( SessionFactory .class ) ; @ java.lang.SuppressWarnings ( STRING ) Session < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( Session .class ) ; RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = new RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , STRING , null ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { written . set ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) . write ( any ( java.io.InputStream .class ) , anyString ( ) ) ; org.springframework.integration.file.remote.gateway.TemporaryFolder . newFile ( STRING ) ; org.springframework.integration.file.remote.gateway.TemporaryFolder . newFile ( STRING ) ; Message < java.io.File > org.springframework.integration.file.remote.gateway.Message<java.io.File> = MessageBuilder . withPayload ( org.springframework.integration.file.remote.gateway.TemporaryFolder . getRoot ( ) ) . build ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.io.File> ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , not ( equalTo ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) SessionFactory < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( SessionFactory .class ) ; @ java.lang.SuppressWarnings ( STRING ) Session < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = mock ( Session .class ) ; RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> = new RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . afterPropertiesSet ( ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway = new org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway ( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , STRING , null ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . setOptions ( STRING ) ; org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . afterPropertiesSet ( ) ; when ( org.springframework.integration.file.remote.gateway.SessionFactory<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { written . set ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.file.remote.gateway.Session<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) . write ( any ( java.io.InputStream .class ) , anyString ( ) ) ; org.springframework.integration.file.remote.gateway.TemporaryFolder . newFile ( STRING ) ; org.springframework.integration.file.remote.gateway.TemporaryFolder . newFile ( STRING ) ; java.io.File java.io.File = org.springframework.integration.file.remote.gateway.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING , java.io.File ) ; Message < java.io.File > org.springframework.integration.file.remote.gateway.Message<java.io.File> = MessageBuilder . withPayload ( org.springframework.integration.file.remote.gateway.TemporaryFolder . getRoot ( ) ) . build ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestRemoteFileOutboundGateway . handleRequestMessage ( org.springframework.integration.file.remote.gateway.Message<java.io.File> ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , not ( equalTo ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING + java.io.File . java.lang.String ( ) + STRING + java.io.File . java.lang.String ( ) ) ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING + java.io.File . java.lang.String ( ) + STRING + java.io.File . java.lang.String ( ) ) ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING + java.io.File . java.lang.String ( ) + STRING + java.io.File . java.lang.String ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry [] org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream )				throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String )				throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String )				throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String )				throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( SessionFactory org.springframework.integration.file.remote.gateway.SessionFactory , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( org.springframework.integration.file.remote.gateway.SessionFactory , Command . toCommand ( java.lang.String ) , java.lang.String ); this . setBeanFactory ( mock ( BeanFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> void ( RemoteFileTemplate < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( org.springframework.integration.file.remote.gateway.RemoteFileTemplate<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> , java.lang.String , java.lang.String ); this . setBeanFactory ( mock ( BeanFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ) { return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ) { return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ) { return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( AbstractFileInfo < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > org.springframework.integration.file.remote.gateway.AbstractFileInfo<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) { return org.springframework.integration.file.remote.gateway.AbstractFileInfo<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> . getFilename ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected long long ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ) { return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> < AbstractFileInfo < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > java.util.List<org.springframework.integration.file.remote.gateway.AbstractFileInfo<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> ( java.util.Collection<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > java.util.Collection<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) { return new java.util.ArrayList<org.springframework.integration.file.remote.gateway.AbstractFileInfo<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry>> < AbstractFileInfo < org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry > > ( java.util.Collection<org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry , java.lang.String java.lang.String ) { org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . void ( java.lang.String + org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . java.lang.String ( ) ) ; return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , long long , boolean boolean , boolean boolean , long long , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . long = long ; this . boolean = boolean ; this . boolean = boolean ; this . long = long ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ( ) { return this ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ) { return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry ) { return org.springframework.integration.file.remote.gateway.RemoteFileOutboundGatewayTests.TestLsEntry . boolean ( ) ; }  <METHOD_END>
