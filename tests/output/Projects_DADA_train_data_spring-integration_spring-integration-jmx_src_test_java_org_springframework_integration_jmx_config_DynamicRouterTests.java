<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( new java.lang.String [] { STRING , STRING } ) . build ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.jmx.config.MessageChannel . send ( MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jmx.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext @ Ignore public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.jmx.config.NullChannel . send ( null ) ; } }  <METHOD_END>
