<METHOD_START> @ Test public void void ( ) { ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies = ExchangeStrategies . empty ( ) . build ( ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) . get ( ) . findFirst ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.reactive.function.client.ExchangeStrategies . messageWriters ( ) . get ( ) . findFirst ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpMessageReader < ? > org.springframework.web.reactive.function.client.HttpMessageReader<?> = new org.springframework.web.reactive.function.client.ExchangeStrategiesTests.DummyMessageReader ( ) ; HttpMessageWriter < ? > org.springframework.web.reactive.function.client.HttpMessageWriter<?> = new org.springframework.web.reactive.function.client.ExchangeStrategiesTests.DummyMessageWriter ( ) ; ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies = ExchangeStrategies . of ( ( ) Stream . of ( messageReader ) , ( ) Stream . of ( messageWriter ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) . get ( ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.lang.Long> ( ) ) . longValue ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.client.HttpMessageReader<> ) , org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) . get ( ) . findFirst ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.function.client.ExchangeStrategies . messageWriters ( ) . get ( ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.lang.Long> ( ) ) . longValue ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.client.HttpMessageWriter<> ) , org.springframework.web.reactive.function.client.ExchangeStrategies . messageWriters ( ) . get ( ) . findFirst ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.web.reactive.function.client.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.web.reactive.function.client.StaticApplicationContext . registerSingleton ( STRING , org.springframework.web.reactive.function.client.ExchangeStrategiesTests.DummyMessageWriter .class ) ; org.springframework.web.reactive.function.client.StaticApplicationContext . registerSingleton ( STRING , org.springframework.web.reactive.function.client.ExchangeStrategiesTests.DummyMessageReader .class ) ; org.springframework.web.reactive.function.client.StaticApplicationContext . refresh ( ) ; ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies = ExchangeStrategies . of ( org.springframework.web.reactive.function.client.StaticApplicationContext ) ; assertTrue ( org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) . get ( ) . allMatch ( r -> r instanceof DummyMessageReader ) ) ; assertTrue ( org.springframework.web.reactive.function.client.ExchangeStrategies . messageWriters ( ) . get ( ) . allMatch ( r -> r instanceof DummyMessageWriter ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.web.reactive.function.client.ResolvableType , MediaType org.springframework.web.reactive.function.client.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.client.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.client.MediaType> ( ) { return java.util.Collections . java.util.List<org.springframework.web.reactive.function.client.MediaType> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.client.Mono<java.lang.Void> ( Publisher < ? > org.springframework.web.reactive.function.client.Publisher<?> , ResolvableType org.springframework.web.reactive.function.client.ResolvableType , MediaType org.springframework.web.reactive.function.client.MediaType , ReactiveHttpOutputMessage org.springframework.web.reactive.function.client.ReactiveHttpOutputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.web.reactive.function.client.ResolvableType , MediaType org.springframework.web.reactive.function.client.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.client.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.client.MediaType> ( ) { return java.util.Collections . java.util.List<org.springframework.web.reactive.function.client.MediaType> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.Flux<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.function.client.Flux<java.lang.Object> ( ResolvableType org.springframework.web.reactive.function.client.ResolvableType , ReactiveHttpInputMessage org.springframework.web.reactive.function.client.ReactiveHttpInputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return Flux . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.function.client.Mono<java.lang.Object> ( ResolvableType org.springframework.web.reactive.function.client.ResolvableType , ReactiveHttpInputMessage org.springframework.web.reactive.function.client.ReactiveHttpInputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return Mono . empty ( ) ; }  <METHOD_END>
