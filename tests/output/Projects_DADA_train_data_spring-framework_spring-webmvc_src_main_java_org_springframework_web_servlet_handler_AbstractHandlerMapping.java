<METHOD_START> public final void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.web.servlet.handler.UrlPathHelper . setAlwaysUseFullPath ( boolean ) ; this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . setAlwaysUseFullPath ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.web.servlet.handler.UrlPathHelper . setUrlDecode ( boolean ) ; this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . setUrlDecode ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.web.servlet.handler.UrlPathHelper . setRemoveSemicolonContent ( boolean ) ; this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . setRemoveSemicolonContent ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( UrlPathHelper org.springframework.web.servlet.handler.UrlPathHelper ) { Assert . notNull ( org.springframework.web.servlet.handler.UrlPathHelper , STRING ) ; this . org.springframework.web.servlet.handler.UrlPathHelper = org.springframework.web.servlet.handler.UrlPathHelper ; this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . setUrlPathHelper ( org.springframework.web.servlet.handler.UrlPathHelper ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.handler.UrlPathHelper org.springframework.web.servlet.handler.UrlPathHelper ( ) { return org.springframework.web.servlet.handler.UrlPathHelper ; }  <METHOD_END>
<METHOD_START> public void void ( PathMatcher org.springframework.web.servlet.handler.PathMatcher ) { Assert . notNull ( org.springframework.web.servlet.handler.PathMatcher , STRING ) ; this . org.springframework.web.servlet.handler.PathMatcher = org.springframework.web.servlet.handler.PathMatcher ; this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . setPathMatcher ( org.springframework.web.servlet.handler.PathMatcher ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.handler.PathMatcher org.springframework.web.servlet.handler.PathMatcher ( ) { return this . org.springframework.web.servlet.handler.PathMatcher ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object ... java.lang.Object[] ) { this . java.util.List<java.lang.Object> . boolean ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.web.servlet.handler.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.handler.CorsConfiguration> ) { this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . setCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.servlet.handler.CorsConfiguration> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.web.servlet.handler.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.handler.CorsConfiguration> ( ) { return this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . getCorsConfigurations ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( CorsProcessor org.springframework.web.servlet.handler.CorsProcessor ) { Assert . notNull ( org.springframework.web.servlet.handler.CorsProcessor , STRING ) ; this . org.springframework.web.servlet.handler.CorsProcessor = org.springframework.web.servlet.handler.CorsProcessor ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.handler.CorsProcessor org.springframework.web.servlet.handler.CorsProcessor ( ) { return this . org.springframework.web.servlet.handler.CorsProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.web.servlet.handler.BeansException { void ( this . java.util.List<java.lang.Object> ) ; void ( this . java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) {	}  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> < HandlerInterceptor > java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> ) { java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> . addAll ( BeanFactoryUtils . beansOfTypeIncludingAncestors ( getApplicationContext ( ) , MappedInterceptor .class , true , false ) . values ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( ! this . java.util.List<java.lang.Object> . boolean ( ) ) { for ( int int = NUMBER ; int < this . java.util.List<java.lang.Object> . int ( ) ; int ++ ) { java.lang.Object java.lang.Object = this . java.util.List<java.lang.Object> . java.lang.Object ( int ) ; if ( java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING + int + STRING ) ; } this . java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> . add ( org.springframework.web.servlet.handler.HandlerInterceptor ( java.lang.Object ) ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.handler.HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof HandlerInterceptor ) { return ( HandlerInterceptor ) java.lang.Object ; } else if ( java.lang.Object instanceof WebRequestInterceptor ) { return new WebRequestHandlerInterceptorAdapter ( ( WebRequestInterceptor ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.servlet.handler.HandlerInterceptor [] org.springframework.web.servlet.handler.HandlerInterceptor[] ( ) { int int = this . java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> . size ( ) ; return ( int > NUMBER ? this . java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> . toArray ( new HandlerInterceptor [ int ] ) : null ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.servlet.handler.MappedInterceptor [] org.springframework.web.servlet.handler.MappedInterceptor[] ( ) { java.util.List<org.springframework.web.servlet.handler.MappedInterceptor> < MappedInterceptor > java.util.List<org.springframework.web.servlet.handler.MappedInterceptor> = new java.util.ArrayList<org.springframework.web.servlet.handler.MappedInterceptor> <> ( ) ; for ( HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor : this . java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> ) { if ( org.springframework.web.servlet.handler.HandlerInterceptor instanceof MappedInterceptor ) { java.util.List<org.springframework.web.servlet.handler.MappedInterceptor> . add ( ( MappedInterceptor ) org.springframework.web.servlet.handler.HandlerInterceptor ) ; } } int int = java.util.List<org.springframework.web.servlet.handler.MappedInterceptor> . size ( ) ; return ( int > NUMBER ? java.util.List<org.springframework.web.servlet.handler.MappedInterceptor> . toArray ( new MappedInterceptor [ int ] ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.web.servlet.handler.HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) throws java.lang.Exception { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.servlet.handler.HttpServletRequest ) ; if ( java.lang.Object == null ) { java.lang.Object = java.lang.Object ( ) ; } if ( java.lang.Object == null ) { return null ; } if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.lang.Object = getApplicationContext ( ) . getBean ( java.lang.String ) ; } HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( java.lang.Object , org.springframework.web.servlet.handler.HttpServletRequest ) ; if ( CorsUtils . isCorsRequest ( org.springframework.web.servlet.handler.HttpServletRequest ) ) { CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = this . org.springframework.web.servlet.handler.UrlBasedCorsConfigurationSource . getCorsConfiguration ( org.springframework.web.servlet.handler.HttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = org.springframework.web.servlet.handler.CorsConfiguration ( java.lang.Object , org.springframework.web.servlet.handler.HttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = ( org.springframework.web.servlet.handler.CorsConfiguration != null ? org.springframework.web.servlet.handler.CorsConfiguration . combine ( org.springframework.web.servlet.handler.CorsConfiguration ) : org.springframework.web.servlet.handler.CorsConfiguration ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HttpServletRequest , org.springframework.web.servlet.handler.HandlerExecutionChain , org.springframework.web.servlet.handler.CorsConfiguration ) ; } return org.springframework.web.servlet.handler.HandlerExecutionChain ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.handler.HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain ( java.lang.Object java.lang.Object , HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = ( java.lang.Object instanceof HandlerExecutionChain ? ( HandlerExecutionChain ) java.lang.Object : new HandlerExecutionChain ( java.lang.Object ) ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.handler.UrlPathHelper . getLookupPathForRequest ( org.springframework.web.servlet.handler.HttpServletRequest ) ; for ( HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor : this . java.util.List<org.springframework.web.servlet.handler.HandlerInterceptor> ) { if ( org.springframework.web.servlet.handler.HandlerInterceptor instanceof MappedInterceptor ) { MappedInterceptor org.springframework.web.servlet.handler.MappedInterceptor = ( MappedInterceptor ) org.springframework.web.servlet.handler.HandlerInterceptor ; if ( org.springframework.web.servlet.handler.MappedInterceptor . matches ( java.lang.String , this . org.springframework.web.servlet.handler.PathMatcher ) ) { org.springframework.web.servlet.handler.HandlerExecutionChain . addInterceptor ( org.springframework.web.servlet.handler.MappedInterceptor . getInterceptor ( ) ) ; } } else { org.springframework.web.servlet.handler.HandlerExecutionChain . addInterceptor ( org.springframework.web.servlet.handler.HandlerInterceptor ) ; } } return org.springframework.web.servlet.handler.HandlerExecutionChain ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.handler.CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ( java.lang.Object java.lang.Object , HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { if ( java.lang.Object instanceof HandlerExecutionChain ) { java.lang.Object = ( ( HandlerExecutionChain ) java.lang.Object ) . getHandler ( ) ; } if ( java.lang.Object instanceof CorsConfigurationSource ) { return ( ( CorsConfigurationSource ) java.lang.Object ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HttpServletRequest ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.handler.HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain , CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ) { if ( CorsUtils . isPreFlightRequest ( org.springframework.web.servlet.handler.HttpServletRequest ) ) { HandlerInterceptor [] org.springframework.web.servlet.handler.HandlerInterceptor[] = org.springframework.web.servlet.handler.HandlerExecutionChain . getInterceptors ( ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = new HandlerExecutionChain ( new org.springframework.web.servlet.handler.AbstractHandlerMapping.PreFlightHandler ( org.springframework.web.servlet.handler.CorsConfiguration ) , org.springframework.web.servlet.handler.HandlerInterceptor[] ) ; } else { org.springframework.web.servlet.handler.HandlerExecutionChain . addInterceptor ( new org.springframework.web.servlet.handler.AbstractHandlerMapping.CorsInterceptor ( org.springframework.web.servlet.handler.CorsConfiguration ) ) ; } return org.springframework.web.servlet.handler.HandlerExecutionChain ; }  <METHOD_END>
<METHOD_START> public void ( CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ) { this . org.springframework.web.servlet.handler.CorsConfiguration = org.springframework.web.servlet.handler.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.handler.CorsProcessor . processRequest ( this . org.springframework.web.servlet.handler.CorsConfiguration , org.springframework.web.servlet.handler.HttpServletRequest , org.springframework.web.servlet.handler.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.handler.CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { return this . org.springframework.web.servlet.handler.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> public void ( CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ) { this . org.springframework.web.servlet.handler.CorsConfiguration = org.springframework.web.servlet.handler.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.handler.HttpServletResponse , java.lang.Object java.lang.Object )				throws java.lang.Exception { return org.springframework.web.servlet.handler.CorsProcessor . processRequest ( this . org.springframework.web.servlet.handler.CorsConfiguration , org.springframework.web.servlet.handler.HttpServletRequest , org.springframework.web.servlet.handler.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.handler.CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { return this . org.springframework.web.servlet.handler.CorsConfiguration ; }  <METHOD_END>
