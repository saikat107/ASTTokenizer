<METHOD_START> @ Before public void void ( ) { Flux < java.lang.Void > org.springframework.data.mongodb.core.Flux<java.lang.Void> = org.springframework.data.mongodb.core.ReactiveMongoOperations . dropCollection ( STRING ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoOperations . dropCollection ( STRING ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoOperations . dropCollection ( STRING ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoOperations . dropCollection ( STRING ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.Flux<java.lang.Void> ) . verifyComplete ( ) ; if ( org.springframework.data.mongodb.core.Version == null ) { org.springframework.data.mongodb.core.Version = org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) . map ( it -> it . get ( STRING ) . toString ( ) ) . map ( Version :: parse ) . block ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) . consumeNextWith ( actual -> { assertThat ( actual , hasKey ( STRING ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( new Document ( STRING , NUMBER ) ) ) . consumeNextWith ( actual -> { assertThat ( actual , hasKey ( STRING ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( org.springframework.data.mongodb.core.Version . isGreaterThan ( org.springframework.data.mongodb.core.Version ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) . consumeNextWith ( actual -> { assertThat ( actual . get ( STRING , Double .class ) , is ( closeTo ( NUMBER , NUMBER ) ) ) ; assertThat ( actual , hasKey ( STRING ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) . expectError ( InvalidDataAccessApiUsageException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( new Document ( STRING , NUMBER ) ) ) . expectError ( InvalidDataAccessApiUsageException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( new Document ( STRING , NUMBER ) , ReadPreference . nearest ( ) ) ) . expectError ( InvalidDataAccessApiUsageException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < Document > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Flux < Document > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.ReactiveMongoOperations . execute ( MongoDatabase :: listCollections ) ; StepVerifier . create ( org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> . filter ( document -> document . getString ( STRING ) . startsWith ( STRING ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.ReactiveMongoOperations . execute ( db -> { throw new MongoException ( NUMBER , STRING ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < Document > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.ReactiveMongoOperations . execute ( db -> { throw new MongoException ( NUMBER , STRING ) ; } ) ; StepVerifier . create ( org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> ) . expectError ( UncategorizedMongoDbException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . execute ( Person .class , MongoCollection :: find ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . executeCommand ( STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoOperations . execute ( STRING , MongoCollection :: find ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
