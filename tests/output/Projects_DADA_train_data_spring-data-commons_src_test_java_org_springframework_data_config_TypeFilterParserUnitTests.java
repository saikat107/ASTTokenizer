<METHOD_START> @ Before public void void ( ) org.xml.sax.SAXException , java.io.IOException , javax.xml.parsers.ParserConfigurationException { org.springframework.data.config.TypeFilterParser = new TypeFilterParser ( org.springframework.data.config.ReaderContext , java.lang.ClassLoader ) ; Resource org.springframework.data.config.Resource = new ClassPathResource ( STRING , org.springframework.data.config.TypeFilterParserUnitTests .class ) ; javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; org.w3c.dom.Element = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) . org.w3c.dom.Document ( org.springframework.data.config.Resource . getInputStream ( ) ) . getDocumentElement ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; java.lang.Iterable<org.springframework.data.config.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.config.TypeFilter> = org.springframework.data.config.TypeFilterParser . parseTypeFilters ( org.w3c.dom.Element , Type . INCLUDE ) ; assertThat ( java.lang.Iterable<org.springframework.data.config.TypeFilter> ) . hasAtLeastOneElementOfType ( AssignableTypeFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; java.lang.Iterable<org.springframework.data.config.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.config.TypeFilter> = org.springframework.data.config.TypeFilterParser . parseTypeFilters ( org.w3c.dom.Element , Type . EXCLUDE ) ; assertThat ( java.lang.Iterable<org.springframework.data.config.TypeFilter> ) . hasAtLeastOneElementOfType ( AssignableTypeFilter .class ) ; }  <METHOD_END>
