<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.convert.CassandraOperations = new CassandraTemplate ( session ) ; SchemaTestUtils . potentiallyCreateTableFor ( AllPossibleTypes .class , org.springframework.data.cassandra.convert.CassandraOperations ) ; SchemaTestUtils . potentiallyCreateTableFor ( TimeEntity .class , org.springframework.data.cassandra.convert.CassandraOperations ) ; SchemaTestUtils . truncate ( AllPossibleTypes .class , org.springframework.data.cassandra.convert.CassandraOperations ) ; SchemaTestUtils . truncate ( TimeEntity .class , org.springframework.data.cassandra.convert.CassandraOperations ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setInet ( java.net.InetAddress . java.net.InetAddress ( STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getInet ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getInet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setUuid ( java.util.UUID . java.util.UUID ( ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getUuid ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getUuid ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBoxedShort ( java.lang.Short . short ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedShort ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedShort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setPrimitiveShort ( java.lang.Short . short ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveShort ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveShort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBoxedByte ( java.lang.Byte . byte ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedByte ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedByte ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setPrimitiveByte ( java.lang.Byte . byte ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveByte ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveByte ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBoxedLong ( java.lang.Long . long ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedLong ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedLong ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setPrimitiveLong ( java.lang.Long . long ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveLong ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveLong ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBoxedInteger ( java.lang.Integer . int ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedInteger ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedInteger ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setPrimitiveInteger ( java.lang.Integer . int ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveInteger ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveInteger ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBoxedFloat ( java.lang.Float . float ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedFloat ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedFloat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setPrimitiveFloat ( java.lang.Float . float ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveFloat ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveFloat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBoxedDouble ( java.lang.Double . double ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedDouble ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedDouble ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setPrimitiveDouble ( java.lang.Double . double ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveDouble ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getPrimitiveDouble ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBoxedBoolean ( java.lang.Boolean . java.lang.Boolean ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedBoolean ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBoxedBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setPrimitiveBoolean ( java.lang.Boolean . java.lang.Boolean ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . isPrimitiveBoolean ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . isPrimitiveBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setTimestamp ( new java.util.Date ( NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getTimestamp ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setDate ( LocalDate . fromDaysSinceEpoch ( NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getDate ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBigInteger ( new java.math.BigInteger ( STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBigInteger ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBigInteger ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBigDecimal ( new java.math.BigDecimal ( STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBigDecimal ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBigDecimal ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBlob ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; java.nio.ByteBuffer java.nio.ByteBuffer = org.springframework.data.cassandra.convert.AllPossibleTypes . getBlob ( ) ; byte [] byte[] = new byte [ java.nio.ByteBuffer . int ( ) ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; assertThat ( new java.lang.String ( byte[] ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setSetOfString ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getSetOfString ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getSetOfString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setSetOfString ( new java.util.HashSet <> ( ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getSetOfString ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setListOfString ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getListOfString ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getListOfString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setListOfString ( new java.util.ArrayList <> ( ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getListOfString ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setMapOfString ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getMapOfString ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getMapOfString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setMapOfString ( new java.util.HashMap <> ( ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getMapOfString ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setAnEnum ( org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition . org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; Assertions . assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getAnEnum ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getAnEnum ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setListOfEnum ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition> ( org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition . org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.CassandraOperations . selectOneById ( org.springframework.data.cassandra.convert.AllPossibleTypes . getId ( ) , AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getListOfEnum ( ) ) . contains ( org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition . org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setSetOfEnum ( java.util.Collections . java.util.Set<org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition> ( org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition . org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.CassandraOperations . selectOneById ( org.springframework.data.cassandra.convert.AllPossibleTypes . getId ( ) , AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getSetOfEnum ( ) ) . contains ( org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition . org.springframework.data.cassandra.convert.CassandraTypeMappingIntegrationTest.Condition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; long long = NUMBER ; org.springframework.data.cassandra.convert.CassandraOperations . getCqlOperations ( ) . execute ( new SimpleStatement ( STRING , java.lang.String , long ) ) ; TimeEntity org.springframework.data.cassandra.convert.TimeEntity = org.springframework.data.cassandra.convert.CassandraOperations . selectOneById ( java.lang.String , TimeEntity .class ) ; assertThat ( org.springframework.data.cassandra.convert.TimeEntity . getTime ( ) ) . isEqualTo ( long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setLocalDate ( java . time . java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getLocalDate ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getLocalDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setLocalDateTime ( java . time . java.time.LocalDateTime . java.time.LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getLocalDateTime ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getLocalDateTime ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setLocalTime ( java . time . java.time.LocalTime . java.time.LocalTime ( NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getLocalTime ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getLocalTime ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setInstant ( java . time . java.time.Instant . java.time.Instant ( ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getInstant ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getInstant ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setZoneId ( java . time . java.time.ZoneId . java.time.ZoneId ( STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getZoneId ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getZoneId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setJodaLocalDate ( new org . org.joda . org.joda . org.joda ( NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getJodaLocalDate ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getJodaLocalDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setJodaDateMidnight ( new org . org.joda . org.joda . org.joda ( NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getJodaDateMidnight ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getJodaDateMidnight ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setJodaDateTime ( new org . org.joda . org.joda . org.joda ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getJodaDateTime ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getJodaDateTime ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBpLocalDate ( org . threeten . bp . LocalDate . of ( NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpLocalDate ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpLocalDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBpLocalDateTime ( org . threeten . bp . LocalDateTime . of ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpLocalDateTime ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpLocalDateTime ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBpLocalTime ( org . threeten . bp . LocalTime . of ( NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpLocalTime ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpLocalTime ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBpInstant ( org . threeten . bp . Instant . now ( ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpZoneId ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpZoneId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.convert.AllPossibleTypes . setBpZoneId ( org . threeten . bp . ZoneId . of ( STRING ) ) ; org.springframework.data.cassandra.convert.CassandraOperations . insert ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes = org.springframework.data.cassandra.convert.AllPossibleTypes ( org.springframework.data.cassandra.convert.AllPossibleTypes ) ; assertThat ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpZoneId ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.AllPossibleTypes . getBpZoneId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { CounterEntity org.springframework.data.cassandra.convert.CounterEntity = new CounterEntity ( STRING ) ; org.springframework.data.cassandra.convert.CounterEntity . setCount ( NUMBER ) ; org.springframework.data.cassandra.convert.CassandraOperations . update ( org.springframework.data.cassandra.convert.CounterEntity ) ; CounterEntity org.springframework.data.cassandra.convert.CounterEntity = org.springframework.data.cassandra.convert.CassandraOperations . selectOneById ( org.springframework.data.cassandra.convert.CounterEntity . getId ( ) , CounterEntity .class ) ; assertThat ( org.springframework.data.cassandra.convert.CounterEntity . getCount ( ) ) . isEqualTo ( org.springframework.data.cassandra.convert.CounterEntity . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.convert.AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes ( AllPossibleTypes org.springframework.data.cassandra.convert.AllPossibleTypes ) { return org.springframework.data.cassandra.convert.CassandraOperations . selectOneById ( org.springframework.data.cassandra.convert.AllPossibleTypes . getId ( ) , AllPossibleTypes .class ) ; }  <METHOD_END>
