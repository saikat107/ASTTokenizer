<METHOD_START> @ Before public void void ( ) java.lang.Exception { LocalValidatorFactoryBean org.springframework.web.reactive.result.method.annotation.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.web.reactive.result.method.annotation.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; ConfigurableWebBindingInitializer org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer . setValidator ( org.springframework.web.reactive.result.method.annotation.LocalValidatorFactoryBean ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelAttributeMethodArgumentResolver org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver = new ModelAttributeMethodArgumentResolver ( new ReactiveAdapterRegistry ( ) , false ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; assertTrue ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( ModelAttribute .class ) . arg ( Mono .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; assertTrue ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; assertFalse ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( Mono .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; assertFalse ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelAttributeMethodArgumentResolver org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver = new ModelAttributeMethodArgumentResolver ( new ReactiveAdapterRegistry ( ) , true ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; assertTrue ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( Mono .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; assertTrue ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( java.lang.String .class ) ; assertFalse ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( Mono .class , java.lang.String .class ) ; assertFalse ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) , value -> { assertEquals ( Foo .class , value . getClass ( ) ) ; return ( Foo ) value ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( Mono .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , mono -> { assertTrue ( mono . getClass ( ) . getName ( ) , mono instanceof Mono ) ; Object value = ( ( Mono < ? > ) mono ) . block ( Duration . ofSeconds ( NUMBER ) ) ; assertEquals ( Foo .class , value . getClass ( ) ) ; return ( Foo ) value ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( ModelAttribute .class ) . arg ( Single .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , single -> { assertTrue ( single . getClass ( ) . getName ( ) , single instanceof Single ) ; Object value = ( ( Single < ? > ) single ) . toBlocking ( ) . value ( ) ; assertEquals ( Foo .class , value . getClass ( ) ) ; return ( Foo ) value ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ( ) ; org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo . void ( STRING ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . addAttribute ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , value -> { assertEquals ( Foo .class , value . getClass ( ) ) ; return ( Foo ) value ; } ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo , this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ( ) ; org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo . void ( STRING ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . addAttribute ( STRING , Mono . just ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ) ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , value -> { assertEquals ( Foo .class , value . getClass ( ) ) ; return ( Foo ) value ; } ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo , this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ( ) ; org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo . void ( STRING ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . addAttribute ( STRING , Single . just ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ) ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , value -> { assertEquals ( Foo .class , value . getClass ( ) ) ; return ( Foo ) value ; } ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo , this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ( ) ; org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo . void ( STRING ) ; this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . addAttribute ( STRING , Mono . just ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ) ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( Mono .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , mono -> { assertTrue ( mono . getClass ( ) . getName ( ) , mono instanceof Mono ) ; Object value = ( ( Mono < ? > ) mono ) . block ( Duration . ofSeconds ( NUMBER ) ) ; assertEquals ( Foo .class , value . getClass ( ) ) ; return ( Foo ) value ; } ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , java.util.function.Function<java.lang.Object,org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo> < java.lang.Object , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo > java.util.function.Function<java.lang.Object,org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo> ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver ( ) . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ( STRING ) ) . block ( java.time.Duration . java.time.Duration ) ; org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo = java.util.function.Function<java.lang.Object,org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo> . org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo ( java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo . int ( ) ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = BindingResult . MODEL_KEY_PREFIX + java.lang.String ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.String ( ) , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) instanceof BindingResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , java.util.function.Function . java.util.function.Function<java.lang.Object,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( Mono .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , resolvedArgumentMono -> { Object value = resolvedArgumentMono . block ( Duration . ofSeconds ( NUMBER ) ) ; assertNotNull ( value ) ; assertTrue ( value instanceof Mono ) ; return ( Mono < ? > ) value ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( ModelAttribute .class ) . arg ( Single .class , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo .class ) ; void ( org.springframework.web.reactive.result.method.annotation.MethodParameter , resolvedArgumentMono -> { Object value = resolvedArgumentMono . block ( Duration . ofSeconds ( NUMBER ) ) ; assertNotNull ( value ) ; assertTrue ( value instanceof Single ) ; return Mono . from ( RxReactiveStreams . toPublisher ( ( Single < ? > ) value ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , java.util.function.Function<org.springframework.web.reactive.result.method.annotation.Mono<?>,org.springframework.web.reactive.result.method.annotation.Mono<?>> < Mono < ? > , Mono < ? > > java.util.function.Function<org.springframework.web.reactive.result.method.annotation.Mono<?>,org.springframework.web.reactive.result.method.annotation.Mono<?>> )			throws java.net.URISyntaxException { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = org.springframework.web.reactive.result.method.annotation.ServerWebExchange ( STRING ) ; Mono < ? > org.springframework.web.reactive.result.method.annotation.Mono<?> = org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver ( ) . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; org.springframework.web.reactive.result.method.annotation.Mono<?> = java.util.function.Function<org.springframework.web.reactive.result.method.annotation.Mono<?>,org.springframework.web.reactive.result.method.annotation.Mono<?>> . apply ( org.springframework.web.reactive.result.method.annotation.Mono<> ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<> ) . consumeErrorWith ( ex -> { assertTrue ( ex instanceof WebExchangeBindException ) ; WebExchangeBindException bindException = ( WebExchangeBindException ) ex ; assertEquals ( NUMBER , bindException . getErrorCount ( ) ) ; assertTrue ( bindException . hasFieldErrors ( STRING ) ) ; } ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( ModelAttribute .class ) . arg ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver ( ) . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ( STRING ) ) . block ( java.time.Duration . java.time.Duration ) ; org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar = ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar ) java.lang.Object ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar . int ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar . int ( ) ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = BindingResult . MODEL_KEY_PREFIX + java.lang.String ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.String ( ) , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) instanceof BindingResult ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver ( ) { return new ModelAttributeMethodArgumentResolver ( new ReactiveAdapterRegistry ( ) , false ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ( java.lang.String java.lang.String ) throws java.net.URISyntaxException { return MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_FORM_URLENCODED ) . body ( java.lang.String ) . toExchange ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void void ( @ ModelAttribute @ Validated org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo , @ ModelAttribute @ Validated Mono < org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo> , @ ModelAttribute @ Validated Single < org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo > org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo> , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo , java.lang.String java.lang.String , Mono < org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Foo> , Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> , org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolverTests.Bar ) {	}  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
