<METHOD_START> public void ( MongoConverter org.springframework.data.mongodb.core.convert.MongoConverter ) { super( org.springframework.data.mongodb.core.convert.MongoConverter ); this . org.springframework.data.mongodb.core.convert.MongoConverter = org.springframework.data.mongodb.core.convert.MongoConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Bson org.springframework.data.mongodb.core.convert.Bson , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { Document org.springframework.data.mongodb.core.convert.Document = super. getMappedObject ( org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; boolean boolean = false ; boolean boolean = false ; Document org.springframework.data.mongodb.core.convert.Document = null ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.convert.Document . keySet ( ) ) { if ( java.lang.String . boolean ( STRING ) ) { if ( java.lang.String . boolean ( STRING ) ) { org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String , Document .class ) ; } boolean = true ; } else { boolean = true ; } } if ( boolean && boolean ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Document == null ? new Document ( ) : org.springframework.data.mongodb.core.convert.Document ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.convert.Document . keySet ( ) ) { if ( java.lang.String . boolean ( STRING ) ) { org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String ) ) ; } else { org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String ) ) ; } } org.springframework.data.mongodb.core.convert.Document . put ( STRING , org.springframework.data.mongodb.core.convert.Document ) ; return org.springframework.data.mongodb.core.convert.Document ; } return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Document org.springframework.data.mongodb.core.convert.Document ) { if ( org.springframework.data.mongodb.core.convert.Document == null ) { return false ; } for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.convert.Document . keySet ( ) ) { if ( java.lang.String . boolean ( STRING ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { return org.springframework.data.mongodb.core.convert.MongoConverter . convertToMongoType ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> == null ? ClassTypeInformation . OBJECT : org.springframework.data.mongodb.core.convert.TypeInformation<?> ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ( Field org.springframework.data.mongodb.core.convert.Field , java.lang.Object java.lang.Object ) { if ( isDocument ( java.lang.Object ) ) { return createMapEntry ( org.springframework.data.mongodb.core.convert.Field , convertSimpleOrDocument ( java.lang.Object , org.springframework.data.mongodb.core.convert.Field . getPropertyEntity ( ) ) ) ; } if ( boolean ( java.lang.Object ) ) { return createMapEntry ( org.springframework.data.mongodb.core.convert.Field , super. getMappedObject ( ( ( Query ) java.lang.Object ) . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.Field . getPropertyEntity ( ) ) ) ; } if ( boolean ( java.lang.Object ) ) { return java.util.Map.Entry<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.Field , java.lang.Object ) ; } return super. getMappedObjectForField ( org.springframework.data.mongodb.core.convert.Field , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ( Field org.springframework.data.mongodb.core.convert.Field , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = null ; if ( java.lang.Object instanceof Modifier ) { java.lang.Object = org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Field , ( Modifier ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Modifiers ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; for ( Modifier org.springframework.data.mongodb.core.convert.Modifier : ( ( Modifiers ) java.lang.Object ) . getModifiers ( ) ) { org.springframework.data.mongodb.core.convert.Document . putAll ( org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Field , org.springframework.data.mongodb.core.convert.Modifier ) ) ; } java.lang.Object = org.springframework.data.mongodb.core.convert.Document ; } else { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; } return createMapEntry ( org.springframework.data.mongodb.core.convert.Field , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Field org.springframework.data.mongodb.core.convert.Field , java.lang.Object java.lang.Object ) { return super. isAssociationConversionNecessary ( org.springframework.data.mongodb.core.convert.Field , java.lang.Object ) || org.springframework.data.mongodb.core.convert.Field . containsAssociation ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof Modifier || java.lang.Object instanceof Modifiers ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof Query ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Field org.springframework.data.mongodb.core.convert.Field , Modifier org.springframework.data.mongodb.core.convert.Modifier ) { return new Document ( org.springframework.data.mongodb.core.convert.Modifier . getKey ( ) , java.lang.Object ( org.springframework.data.mongodb.core.convert.Field , org.springframework.data.mongodb.core.convert.Modifier ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Field org.springframework.data.mongodb.core.convert.Field , Modifier org.springframework.data.mongodb.core.convert.Modifier ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.Modifier . getValue ( ) ; if ( java.lang.Object instanceof Sort ) { Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Document ( ( Sort ) java.lang.Object ) ; return org.springframework.data.mongodb.core.convert.Field == null || org.springframework.data.mongodb.core.convert.Field . getPropertyEntity ( ) == null ? org.springframework.data.mongodb.core.convert.Document : getMappedSort ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.Field . getPropertyEntity ( ) ) ; } TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> = org.springframework.data.mongodb.core.convert.Field == null ? ClassTypeInformation . OBJECT : org.springframework.data.mongodb.core.convert.Field . getTypeHint ( ) ; return org.springframework.data.mongodb.core.convert.MongoConverter . convertToMongoType ( java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.convert.TypeInformation<?> < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> ( java.lang.Object java.lang.Object , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getTypeInformation ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getActualType ( ) . getType ( ) ; if ( java.lang.Object == null || java.lang.Class<> . boolean ( ) || java . lang . reflect . java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ) { return org.springframework.data.mongodb.core.convert.TypeInformation<> ; } if ( ! java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return org.springframework.data.mongodb.core.convert.TypeInformation<> ; } return NESTED_DOCUMENT ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.convert.Field org.springframework.data.mongodb.core.convert.Field ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , java.lang.String java.lang.String , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { return org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> == null ? super. createPropertyField ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , java.lang.String , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) : new org.springframework.data.mongodb.core.convert.UpdateMapper.MetadataBackedUpdateField ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , java.lang.String , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Sort org.springframework.data.mongodb.core.convert.Sort ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; for ( Order org.springframework.data.mongodb.core.convert.Order : org.springframework.data.mongodb.core.convert.Sort ) { org.springframework.data.mongodb.core.convert.Document . put ( org.springframework.data.mongodb.core.convert.Order . getProperty ( ) , org.springframework.data.mongodb.core.convert.Order . isAscending ( ) ? NUMBER : - NUMBER ) ; } return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> public void ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , java.lang.String java.lang.String , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { super( java.lang.String . java.lang.String ( STRING , STRING ) , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . getPath ( ) == null ? java.lang.String : super. getMappedKey ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> < MongoPersistentProperty , java.lang.String > org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> ( ) { return new PositionParameterRetainingPropertyKeyConverter ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> < MongoPersistentProperty , java.lang.String > org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> ( ) { return new org.springframework.data.mongodb.core.convert.UpdateMapper.MetadataBackedUpdateField.UpdateAssociationConverter ( getAssociation ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , java.lang.String java.lang.String ) { super( org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ); this . org.springframework.data.mongodb.core.convert.KeyMapper = new KeyMapper ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { return super. convert ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) == null ? null : org.springframework.data.mongodb.core.convert.KeyMapper . mapPropertyName ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; }  <METHOD_END>
