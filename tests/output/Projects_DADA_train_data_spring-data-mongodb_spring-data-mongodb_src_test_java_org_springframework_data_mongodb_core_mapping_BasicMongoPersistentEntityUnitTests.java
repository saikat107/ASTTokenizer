<METHOD_START> @ Test public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Person > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Person> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Person > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Person .class ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Person> . getCollection ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Company > org.springframework.data.mongodb.core.mapping.MongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Company> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Company > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Company .class ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.Company> . getCollection ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.CollectionProvider org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.CollectionProvider = new org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.CollectionProvider ( ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.CollectionProvider . java.lang.String = STRING ; when ( org.springframework.data.mongodb.core.mapping.ApplicationContext . getBean ( STRING ) ) . thenReturn ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.CollectionProvider ) ; when ( org.springframework.data.mongodb.core.mapping.ApplicationContext . containsBean ( STRING ) ) . thenReturn ( true ) ; BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DynamicallyMapped > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DynamicallyMapped> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DynamicallyMapped > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DynamicallyMapped .class ) ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DynamicallyMapped> . setApplicationContext ( org.springframework.data.mongodb.core.mapping.ApplicationContext ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DynamicallyMapped> . getCollection ( ) , is ( STRING ) ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.CollectionProvider . java.lang.String = STRING ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DynamicallyMapped> . getCollection ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithLanguage > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithLanguage> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithLanguage > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithLanguage .class ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithLanguage> . getLanguage ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test ( expected = MappingException .class ) public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument .class ) ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isExplicitLanguageProperty ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.Number .class ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . addPersistentProperty ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument .class ) ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isExplicitLanguageProperty ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.String .class ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . addPersistentProperty ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . verify ( ) ; verify ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , times ( NUMBER ) ) . isExplicitLanguageProperty ( ) ; verify ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , times ( NUMBER ) ) . getActualType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument .class ) ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isExplicitLanguageProperty ( ) ) . thenReturn ( false ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . addPersistentProperty ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . verify ( ) ; verify ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , times ( NUMBER ) ) . isExplicitLanguageProperty ( ) ; verify ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , never ( ) ) . getActualType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test ( expected = MappingException .class ) public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument .class ) ) ; org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef org.springframework.data.mongodb.core.mapping.DBRef = mock ( org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef .class ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isDbReference ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getDBRef ( ) ) . thenReturn ( org.springframework.data.mongodb.core.mapping.DBRef ) ; when ( org.springframework.data.mongodb.core.mapping.DBRef . lazy ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.Class .class ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . addPersistentProperty ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingException .class ) public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument .class ) ) ; org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef org.springframework.data.mongodb.core.mapping.DBRef = mock ( org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef .class ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isDbReference ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getDBRef ( ) ) . thenReturn ( org.springframework.data.mongodb.core.mapping.DBRef ) ; when ( org.springframework.data.mongodb.core.mapping.DBRef . lazy ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isArray ( ) ) . thenReturn ( true ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . addPersistentProperty ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument .class ) ) ; org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef org.springframework.data.mongodb.core.mapping.DBRef = mock ( org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef .class ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isDbReference ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getDBRef ( ) ) . thenReturn ( org.springframework.data.mongodb.core.mapping.DBRef ) ; when ( org.springframework.data.mongodb.core.mapping.DBRef . lazy ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.Object .class ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . addPersistentProperty ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . verify ( ) ; verify ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , times ( NUMBER ) ) . isDbReference ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument .class ) ) ; org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef org.springframework.data.mongodb.core.mapping.DBRef = mock ( org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.DBRef .class ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isDbReference ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getDBRef ( ) ) . thenReturn ( org.springframework.data.mongodb.core.mapping.DBRef ) ; when ( org.springframework.data.mongodb.core.mapping.DBRef . lazy ( ) ) . thenReturn ( false ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . addPersistentProperty ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.AnyDocument> . verify ( ) ; verify ( org.springframework.data.mongodb.core.mapping.DBRef , times ( NUMBER ) ) . lazy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithCustomAnnotation > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithCustomAnnotation> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithCustomAnnotation > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithCustomAnnotation .class ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithCustomAnnotation> . getCollection ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithComposedAnnotation > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithComposedAnnotation> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithComposedAnnotation > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithComposedAnnotation .class ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntityUnitTests.DocumentWithComposedAnnotation> . getCollection ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
