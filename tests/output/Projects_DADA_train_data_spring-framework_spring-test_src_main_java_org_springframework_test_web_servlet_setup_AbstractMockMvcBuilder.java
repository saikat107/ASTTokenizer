<METHOD_START> public final < T extends B > T T ( Filter ... org.springframework.test.web.servlet.setup.Filter[] ) { Assert . notNull ( org.springframework.test.web.servlet.setup.Filter[] , STRING ) ; for ( Filter org.springframework.test.web.servlet.setup.Filter : org.springframework.test.web.servlet.setup.Filter[] ) { Assert . notNull ( org.springframework.test.web.servlet.setup.Filter , STRING ) ; this . java.util.List<org.springframework.test.web.servlet.setup.Filter> . add ( org.springframework.test.web.servlet.setup.Filter ) ; } return T ( ) ; }  <METHOD_END>
<METHOD_START> public final < T extends B > T T ( Filter org.springframework.test.web.servlet.setup.Filter , java.lang.String ... java.lang.String[] ) { Assert . notNull ( org.springframework.test.web.servlet.setup.Filter , STRING ) ; Assert . notNull ( java.lang.String[] , STRING ) ; if ( java.lang.String[] . int > NUMBER ) { org.springframework.test.web.servlet.setup.Filter = new PatternMappingFilterProxy ( org.springframework.test.web.servlet.setup.Filter , java.lang.String[] ) ; } this . java.util.List<org.springframework.test.web.servlet.setup.Filter> . add ( org.springframework.test.web.servlet.setup.Filter ) ; return T ( ) ; }  <METHOD_END>
<METHOD_START> public final < T extends B > T T ( RequestBuilder org.springframework.test.web.servlet.setup.RequestBuilder ) { this . org.springframework.test.web.servlet.setup.RequestBuilder = org.springframework.test.web.servlet.setup.RequestBuilder ; return T ( ) ; }  <METHOD_END>
<METHOD_START> public final < T extends B > T T ( ResultMatcher org.springframework.test.web.servlet.setup.ResultMatcher ) { this . java.util.List<org.springframework.test.web.servlet.setup.ResultMatcher> . add ( org.springframework.test.web.servlet.setup.ResultMatcher ) ; return T ( ) ; }  <METHOD_END>
<METHOD_START> public final < T extends B > T T ( ResultHandler org.springframework.test.web.servlet.setup.ResultHandler ) { this . java.util.List<org.springframework.test.web.servlet.setup.ResultHandler> . add ( org.springframework.test.web.servlet.setup.ResultHandler ) ; return T ( ) ; }  <METHOD_END>
<METHOD_START> public final < T extends B > T T ( DispatcherServletCustomizer org.springframework.test.web.servlet.setup.DispatcherServletCustomizer ) { this . java.util.List<org.springframework.test.web.servlet.setup.DispatcherServletCustomizer> . add ( org.springframework.test.web.servlet.setup.DispatcherServletCustomizer ) ; return T ( ) ; }  <METHOD_END>
<METHOD_START> public final < T extends B > T T ( boolean boolean ) { return T ( dispatcherServlet -> dispatcherServlet . setDispatchOptionsRequest ( dispatchOptions ) ) ; }  <METHOD_END>
<METHOD_START> public final < T extends B > T T ( MockMvcConfigurer org.springframework.test.web.servlet.setup.MockMvcConfigurer ) { org.springframework.test.web.servlet.setup.MockMvcConfigurer . afterConfigurerAdded ( this ) ; this . java.util.List<org.springframework.test.web.servlet.setup.MockMvcConfigurer> . add ( org.springframework.test.web.servlet.setup.MockMvcConfigurer ) ; return T ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T extends B > T T ( ) { return ( T ) this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public final org.springframework.test.web.servlet.setup.MockMvc org.springframework.test.web.servlet.setup.MockMvc ( ) { WebApplicationContext org.springframework.test.web.servlet.setup.WebApplicationContext = org.springframework.test.web.servlet.setup.WebApplicationContext ( ) ; ServletContext org.springframework.test.web.servlet.setup.ServletContext = org.springframework.test.web.servlet.setup.WebApplicationContext . getServletContext ( ) ; MockServletConfig org.springframework.test.web.servlet.setup.MockServletConfig = new MockServletConfig ( org.springframework.test.web.servlet.setup.ServletContext ) ; for ( MockMvcConfigurer org.springframework.test.web.servlet.setup.MockMvcConfigurer : this . java.util.List<org.springframework.test.web.servlet.setup.MockMvcConfigurer> ) { RequestPostProcessor org.springframework.test.web.servlet.setup.RequestPostProcessor = org.springframework.test.web.servlet.setup.MockMvcConfigurer . beforeMockMvcCreated ( this , org.springframework.test.web.servlet.setup.WebApplicationContext ) ; if ( org.springframework.test.web.servlet.setup.RequestPostProcessor != null ) { if ( this . org.springframework.test.web.servlet.setup.RequestBuilder == null ) { this . org.springframework.test.web.servlet.setup.RequestBuilder = MockMvcRequestBuilders . get ( STRING ) ; } if ( this . org.springframework.test.web.servlet.setup.RequestBuilder instanceof ConfigurableSmartRequestBuilder ) { ( ( ConfigurableSmartRequestBuilder ) this . org.springframework.test.web.servlet.setup.RequestBuilder ) . with ( org.springframework.test.web.servlet.setup.RequestPostProcessor ) ; } } } Filter [] org.springframework.test.web.servlet.setup.Filter[] = this . java.util.List<org.springframework.test.web.servlet.setup.Filter> . toArray ( new Filter [ this . java.util.List<org.springframework.test.web.servlet.setup.Filter> . size ( ) ] ) ; return super. createMockMvc ( org.springframework.test.web.servlet.setup.Filter[] , org.springframework.test.web.servlet.setup.MockServletConfig , org.springframework.test.web.servlet.setup.WebApplicationContext , this . org.springframework.test.web.servlet.setup.RequestBuilder , this . java.util.List<org.springframework.test.web.servlet.setup.ResultMatcher> , this . java.util.List<org.springframework.test.web.servlet.setup.ResultHandler> , this . java.util.List<org.springframework.test.web.servlet.setup.DispatcherServletCustomizer> ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.test.web.servlet.setup.WebApplicationContext org.springframework.test.web.servlet.setup.WebApplicationContext ( )  <METHOD_END>
