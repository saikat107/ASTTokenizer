<METHOD_START> @ Before public void void ( ) { void ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.Config .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { ContextLoaderTestUtils . setCurrentWebApplicationContext ( null ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { AnnotationConfigWebApplicationContext org.springframework.web.socket.adapter.standard.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.socket.adapter.standard.AnnotationConfigWebApplicationContext . register ( java.lang.Class<> ) ; org.springframework.web.socket.adapter.standard.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.web.socket.adapter.standard.WebApplicationContext = org.springframework.web.socket.adapter.standard.AnnotationConfigWebApplicationContext ; ContextLoaderTestUtils . setCurrentWebApplicationContext ( this . org.springframework.web.socket.adapter.standard.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextEncoder ( ) . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.NoConvertersConfig .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expect ( EncodeException .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expectCause ( isA ( ConverterNotFoundException .class ) ) ; new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextEncoder ( ) . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoder ( ) . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) . array ( ) , equalTo ( java.nio.ByteBuffer . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.NoConvertersConfig .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expect ( EncodeException .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expectCause ( isA ( ConverterNotFoundException .class ) ) ; new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoder ( ) . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Decoder . Decoder < org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType > decoder = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextDecoder ( ) ; assertThat ( decoder . willDecode ( java.lang.String ) , is ( true ) ) ; assertThat ( decoder . decode ( java.lang.String ) , equalTo ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.NoConvertersConfig .class ) ; Decoder . Decoder < org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType > decoder = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextDecoder ( ) ; assertThat ( decoder . willDecode ( java.lang.String ) , is ( false ) ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expect ( DecodeException .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expectCause ( isA ( ConverterNotFoundException .class ) ) ; decoder . decode ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Decoder . Decoder < org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType > decoder = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryDecoder ( ) ; assertThat ( decoder . willDecode ( java.nio.ByteBuffer ) , is ( true ) ) ; assertThat ( decoder . decode ( java.nio.ByteBuffer ) , equalTo ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.NoConvertersConfig .class ) ; Decoder . Decoder < org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType > decoder = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryDecoder ( ) ; assertThat ( decoder . willDecode ( java.nio.ByteBuffer ) , is ( false ) ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expect ( DecodeException .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expectCause ( isA ( ConverterNotFoundException .class ) ) ; decoder . decode ( java.nio.ByteBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextEncoderDecoder org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextEncoderDecoder = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextEncoderDecoder ( ) ; java.lang.String java.lang.String = org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextEncoderDecoder . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ; assertThat ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTextEncoderDecoder . decode ( java.lang.String ) , equalTo ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoderDecoder org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoderDecoder = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoderDecoder ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoderDecoder . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ; assertThat ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoderDecoder . decode ( java.nio.ByteBuffer ) , equalTo ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire ( ) ; org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire . init ( null ) ; assertThat ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire . org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.Config , equalTo ( org.springframework.web.socket.adapter.standard.WebApplicationContext . getBean ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.Config .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContextLoaderTestUtils . setCurrentWebApplicationContext ( null ) ; org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire ( ) ; org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire . init ( null ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expectMessage ( STRING ) ; org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.WithAutowire . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.NoConfig .class ) ; org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoder org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoder = new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoder ( ) ; org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoder . init ( null ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.web.socket.adapter.standard.ExpectedException . expectMessage ( STRING ) ; org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyBinaryEncoder . encode ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.adapter.standard.ConversionService org.springframework.web.socket.adapter.standard.ConversionService ( ) { GenericConversionService org.springframework.web.socket.adapter.standard.GenericConversionService = new DefaultConversionService ( ) ; org.springframework.web.socket.adapter.standard.GenericConversionService . addConverter ( new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTypeToStringConverter ( ) ) ; org.springframework.web.socket.adapter.standard.GenericConversionService . addConverter ( new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyTypeToBytesConverter ( ) ) ; org.springframework.web.socket.adapter.standard.GenericConversionService . addConverter ( new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.StringToMyTypeConverter ( ) ) ; org.springframework.web.socket.adapter.standard.GenericConversionService . addConverter ( new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.BytesToMyTypeConverter ( ) ) ; return org.springframework.web.socket.adapter.standard.GenericConversionService ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.adapter.standard.ConversionService org.springframework.web.socket.adapter.standard.ConversionService ( ) { return new GenericConversionService ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) { return ( ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) java.lang.Object ) . java.lang.String . boolean ( java.lang.String ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) { return STRING + org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ) { return ( STRING + org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType . java.lang.String ( ) ) . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ( java.lang.String java.lang.String ) { return new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ( java.lang.String . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ( byte [] byte[] ) { return new org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupportTests.MyType ( new java.lang.String ( byte[] ) . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
