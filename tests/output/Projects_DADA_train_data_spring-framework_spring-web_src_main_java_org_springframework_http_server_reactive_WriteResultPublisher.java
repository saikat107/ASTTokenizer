<METHOD_START> @ java.lang.Override public final void void ( Subscriber < ? super java.lang.Void > org.springframework.http.server.reactive.Subscriber<? super java.lang.Void> ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> + STRING + org.springframework.http.server.reactive.Subscriber<> ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> . org.springframework.http.server.reactive.WriteResultPublisher.State ( ) . void ( this , org.springframework.http.server.reactive.Subscriber<> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.http.server.reactive.WriteResultPublisher.State org.springframework.http.server.reactive.WriteResultPublisher.State , org.springframework.http.server.reactive.WriteResultPublisher.State org.springframework.http.server.reactive.WriteResultPublisher.State ) { return this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> . boolean ( org.springframework.http.server.reactive.WriteResultPublisher.State , org.springframework.http.server.reactive.WriteResultPublisher.State ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> + STRING ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> . org.springframework.http.server.reactive.WriteResultPublisher.State ( ) . void ( this ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> + STRING + java.lang.Throwable ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> . org.springframework.http.server.reactive.WriteResultPublisher.State ( ) . void ( this , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher ) { this . org.springframework.http.server.reactive.WriteResultPublisher = org.springframework.http.server.reactive.WriteResultPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( long long ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( org.springframework.http.server.reactive.WriteResultPublisher.State ( ) + STRING + long ) ; } org.springframework.http.server.reactive.WriteResultPublisher.State ( ) . void ( this . org.springframework.http.server.reactive.WriteResultPublisher , long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( org.springframework.http.server.reactive.WriteResultPublisher.State ( ) + STRING ) ; } org.springframework.http.server.reactive.WriteResultPublisher.State ( ) . void ( this . org.springframework.http.server.reactive.WriteResultPublisher ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.server.reactive.WriteResultPublisher.State org.springframework.http.server.reactive.WriteResultPublisher.State ( ) { return this . org.springframework.http.server.reactive.WriteResultPublisher . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.WriteResultPublisher.State> . org.springframework.http.server.reactive.WriteResultPublisher.State ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , Subscriber < ? super java.lang.Void > org.springframework.http.server.reactive.Subscriber<? super java.lang.Void> ) { Assert . notNull ( org.springframework.http.server.reactive.Subscriber<> , STRING ) ; org.springframework.http.server.reactive.WriteResultPublisher . org.springframework.http.server.reactive.Subscriber<? super java.lang.Void> = org.springframework.http.server.reactive.Subscriber<> ; if ( org.springframework.http.server.reactive.WriteResultPublisher . boolean ( this , org.springframework.http.server.reactive.WriteResultPublisher.State ) ) { Subscription org.springframework.http.server.reactive.Subscription = new org.springframework.http.server.reactive.WriteResultPublisher.ResponseBodyWriteResultSubscription ( org.springframework.http.server.reactive.WriteResultPublisher ) ; org.springframework.http.server.reactive.Subscriber<> . onSubscribe ( org.springframework.http.server.reactive.Subscription ) ; if ( org.springframework.http.server.reactive.WriteResultPublisher . boolean ) { org.springframework.http.server.reactive.WriteResultPublisher . void ( ) ; } else if ( org.springframework.http.server.reactive.WriteResultPublisher . java.lang.Throwable != null ) { org.springframework.http.server.reactive.WriteResultPublisher . void ( org.springframework.http.server.reactive.WriteResultPublisher . java.lang.Throwable ) ; } } else { throw new java.lang.IllegalStateException ( java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher ) { org.springframework.http.server.reactive.WriteResultPublisher . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , java.lang.Throwable java.lang.Throwable ) { org.springframework.http.server.reactive.WriteResultPublisher . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , long long ) { Operators . checkRequest ( long , org.springframework.http.server.reactive.WriteResultPublisher . org.springframework.http.server.reactive.Subscriber<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher ) { if ( org.springframework.http.server.reactive.WriteResultPublisher . boolean ( this , org.springframework.http.server.reactive.WriteResultPublisher.State ) ) { org.springframework.http.server.reactive.WriteResultPublisher . org.springframework.http.server.reactive.Subscriber<> . onComplete ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.http.server.reactive.WriteResultPublisher . boolean ( this , org.springframework.http.server.reactive.WriteResultPublisher.State ) ) { org.springframework.http.server.reactive.WriteResultPublisher . org.springframework.http.server.reactive.Subscriber<> . onError ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , long long ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , java.lang.Throwable java.lang.Throwable ) { }  <METHOD_END>
<METHOD_START> void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , Subscriber < ? super java.lang.Void > org.springframework.http.server.reactive.Subscriber<? super java.lang.Void> ) { throw new java.lang.IllegalStateException ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , long long ) { throw new java.lang.IllegalStateException ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher ) { org.springframework.http.server.reactive.WriteResultPublisher . boolean ( this , org.springframework.http.server.reactive.WriteResultPublisher.State ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher ) { throw new java.lang.IllegalStateException ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.http.server.reactive.WriteResultPublisher org.springframework.http.server.reactive.WriteResultPublisher , java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( java.lang.String ( ) ) ; }  <METHOD_END>
