<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.devtools.restart.ClassLoaderFiles = new ClassLoaderFiles ( ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver = new ClassLoaderFilesResourcePatternResolver ( new GenericApplicationContext ( ) , this . org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getClassLoader ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.devtools.restart.Resource = this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getResource ( STRING ) ; assertThat ( org.springframework.boot.devtools.restart.Resource ) . isNotNull ( ) . isInstanceOf ( ClassPathResource .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericWebApplicationContext org.springframework.boot.devtools.restart.GenericWebApplicationContext = new GenericWebApplicationContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver = new ClassLoaderFilesResourcePatternResolver ( org.springframework.boot.devtools.restart.GenericWebApplicationContext , this . org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; Resource org.springframework.boot.devtools.restart.Resource = this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getResource ( STRING ) ; assertThat ( org.springframework.boot.devtools.restart.Resource ) . isNotNull ( ) . isInstanceOf ( ServletContextResource .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.restart.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = java.io.File ( java.io.File , STRING ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFiles . addFile ( java.io.File . java.lang.String ( ) , STRING , new ClassLoaderFile ( Kind . DELETED , null ) ) ; Resource org.springframework.boot.devtools.restart.Resource = this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getResource ( STRING + java.io.File . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.devtools.restart.Resource ) . isNotNull ( ) . isInstanceOf ( DeletedClassLoaderFileResource .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.restart.TemporaryFolder . newFolder ( ) ; java.io.File ( java.io.File , STRING ) ; Resource [] org.springframework.boot.devtools.restart.Resource[] = this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getResources ( STRING + java.io.File . java.lang.String ( ) + STRING ) ; assertThat ( org.springframework.boot.devtools.restart.Resource[] ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.restart.TemporaryFolder . newFolder ( ) ; java.io.File ( java.io.File , STRING ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFiles . addFile ( java.io.File . java.lang.String ( ) , STRING , new ClassLoaderFile ( Kind . DELETED , null ) ) ; Resource [] org.springframework.boot.devtools.restart.Resource[] = this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getResources ( STRING + java.io.File . java.lang.String ( ) + STRING ) ; assertThat ( org.springframework.boot.devtools.restart.Resource[] ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.boot.devtools.restart.GenericApplicationContext = new GenericApplicationContext ( ) ; ResourceLoader org.springframework.boot.devtools.restart.ResourceLoader = mock ( ResourceLoader .class ) ; org.springframework.boot.devtools.restart.GenericApplicationContext . setResourceLoader ( org.springframework.boot.devtools.restart.ResourceLoader ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver = new ClassLoaderFilesResourcePatternResolver ( org.springframework.boot.devtools.restart.GenericApplicationContext , this . org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getResource ( STRING ) ; verify ( org.springframework.boot.devtools.restart.ResourceLoader ) . getResource ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericWebApplicationContext org.springframework.boot.devtools.restart.GenericWebApplicationContext = new GenericWebApplicationContext ( new MockServletContext ( ) ) ; ResourceLoader org.springframework.boot.devtools.restart.ResourceLoader = mock ( ResourceLoader .class ) ; org.springframework.boot.devtools.restart.GenericWebApplicationContext . setResourceLoader ( org.springframework.boot.devtools.restart.ResourceLoader ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver = new ClassLoaderFilesResourcePatternResolver ( org.springframework.boot.devtools.restart.GenericWebApplicationContext , this . org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver . getResource ( STRING ) ; verify ( org.springframework.boot.devtools.restart.ResourceLoader ) . getResource ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.io.File java.io.File , java.lang.String java.lang.String ) throws java.io.IOException { java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; return java.io.File ; }  <METHOD_END>
