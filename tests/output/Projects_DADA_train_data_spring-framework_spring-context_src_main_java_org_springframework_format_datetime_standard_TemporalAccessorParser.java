<METHOD_START> public void ( java.lang.Class<? extends java.time.temporal.TemporalAccessor> < ? extends java.time.temporal.TemporalAccessor > java.lang.Class<? extends java.time.temporal.TemporalAccessor> , java.time.format.DateTimeFormatter java.time.format.DateTimeFormatter ) { this . java.lang.Class<? extends java.time.temporal.TemporalAccessor> = java.lang.Class<> ; this . java.time.format.DateTimeFormatter = java.time.format.DateTimeFormatter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.time.temporal.TemporalAccessor java.time.temporal.TemporalAccessor ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { java.time.format.DateTimeFormatter java.time.format.DateTimeFormatter = DateTimeContextHolder . getFormatter ( this . java.time.format.DateTimeFormatter , java.util.Locale ) ; if ( java.time.LocalDate .class == this . java.lang.Class<> ) { return java.time.LocalDate . java.time.LocalDate ( java.lang.String , java.time.format.DateTimeFormatter ) ; } else if ( java.time.LocalTime .class == this . java.lang.Class<> ) { return java.time.LocalTime . java.time.LocalTime ( java.lang.String , java.time.format.DateTimeFormatter ) ; } else if ( java.time.LocalDateTime .class == this . java.lang.Class<> ) { return java.time.LocalDateTime . java.time.LocalDateTime ( java.lang.String , java.time.format.DateTimeFormatter ) ; } else if ( java.time.ZonedDateTime .class == this . java.lang.Class<> ) { return java.time.ZonedDateTime . java.time.ZonedDateTime ( java.lang.String , java.time.format.DateTimeFormatter ) ; } else if ( java.time.OffsetDateTime .class == this . java.lang.Class<> ) { return java.time.OffsetDateTime . java.time.OffsetDateTime ( java.lang.String , java.time.format.DateTimeFormatter ) ; } else if ( java.time.OffsetTime .class == this . java.lang.Class<> ) { return java.time.OffsetTime . java.time.OffsetTime ( java.lang.String , java.time.format.DateTimeFormatter ) ; } else { throw new java.lang.IllegalStateException ( STRING + this . java.lang.Class<> ) ; } }  <METHOD_END>
