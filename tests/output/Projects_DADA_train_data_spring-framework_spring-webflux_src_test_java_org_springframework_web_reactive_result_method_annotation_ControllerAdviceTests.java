<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.IllegalAccessException ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.IllegalStateException ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.ArrayIndexOutOfBoundsException ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.AssertionError java.lang.AssertionError = new java.lang.AssertionError ( STRING ) ; void ( java.lang.AssertionError , java.lang.AssertionError . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.AssertionError java.lang.AssertionError = new java.lang.AssertionError ( STRING ) ; FatalBeanException org.springframework.web.reactive.result.method.annotation.FatalBeanException = new FatalBeanException ( STRING , java.lang.AssertionError ) ; void ( org.springframework.web.reactive.result.method.annotation.FatalBeanException , java.lang.AssertionError . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String ) throws java.lang.Exception { ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestConfig .class ) ; RequestMappingHandlerAdapter org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter = org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter ( org.springframework.web.reactive.result.method.annotation.ApplicationContext ) ; org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController = org.springframework.web.reactive.result.method.annotation.ApplicationContext . getBean ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController .class ) ; org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController . void ( java.lang.Throwable ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter , org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController , STRING ) . getReturnValue ( ) . orElse ( null ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestConfig .class ) ; RequestMappingHandlerAdapter org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter = org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter ( org.springframework.web.reactive.result.method.annotation.ApplicationContext ) ; org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController = org.springframework.web.reactive.result.method.annotation.ApplicationContext . getBean ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController .class ) ; Model org.springframework.web.reactive.result.method.annotation.Model = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter , org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController , STRING ) . getModel ( ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.Model . asMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.Model . asMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.Model . asMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestConfig .class ) ; RequestMappingHandlerAdapter org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter = org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter ( org.springframework.web.reactive.result.method.annotation.ApplicationContext ) ; org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController = org.springframework.web.reactive.result.method.annotation.ApplicationContext . getBean ( org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController .class ) ; Validator org.springframework.web.reactive.result.method.annotation.Validator = mock ( Validator .class ) ; org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController . void ( org.springframework.web.reactive.result.method.annotation.Validator ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter , org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController , STRING ) . getBindingContext ( ) ; WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , STRING ) ; assertEquals ( java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.Validator ) , org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder . getValidators ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter ( ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ) throws java.lang.Exception { RequestMappingHandlerAdapter org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter = new RequestMappingHandlerAdapter ( ) ; org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter . setApplicationContext ( org.springframework.web.reactive.result.method.annotation.ApplicationContext ) ; org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; return org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult ( RequestMappingHandlerAdapter org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.String ) ; HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod = new HandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; return org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter . handle ( this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerMethod ) . block ( java.time.Duration . java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController ( ) { return new org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.OneControllerAdvice org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.OneControllerAdvice ( ) { return new org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.OneControllerAdvice ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.SecondControllerAdvice org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.SecondControllerAdvice ( ) { return new org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests.SecondControllerAdvice ( ) ; }  <METHOD_END>
<METHOD_START> void void ( Validator org.springframework.web.reactive.result.method.annotation.Validator ) { this . org.springframework.web.reactive.result.method.annotation.Validator = org.springframework.web.reactive.result.method.annotation.Validator ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder ) { if ( this . org.springframework.web.reactive.result.method.annotation.Validator != null ) { org.springframework.web.reactive.result.method.annotation.WebDataBinder . addValidators ( this . org.springframework.web.reactive.result.method.annotation.Validator ) ; } }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( Model org.springframework.web.reactive.result.method.annotation.Model ) { org.springframework.web.reactive.result.method.annotation.Model . addAttribute ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping public void void ( ) java.lang.Throwable { if ( this . java.lang.Throwable != null ) { throw this . java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( Model org.springframework.web.reactive.result.method.annotation.Model ) { org.springframework.web.reactive.result.method.annotation.Model . addAttribute ( STRING , STRING ) ; org.springframework.web.reactive.result.method.annotation.Model . addAttribute ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return STRING + ClassUtils . getShortName ( java.lang.IllegalStateException . java.lang.Class<? extends java.lang.IllegalStateException> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.ArrayIndexOutOfBoundsException .class ) public java.lang.String java.lang.String ( HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod ) { return STRING + org.springframework.web.reactive.result.method.annotation.HandlerMethod . getMethod ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.AssertionError .class ) public java.lang.String java.lang.String ( java.lang.Error java.lang.Error ) { return java.lang.Error . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( { java.lang.IllegalStateException .class , java.lang.IllegalAccessException .class } ) public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return STRING + ClassUtils . getShortName ( java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ; }  <METHOD_END>
