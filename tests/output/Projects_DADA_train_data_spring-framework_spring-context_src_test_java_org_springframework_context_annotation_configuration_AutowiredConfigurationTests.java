<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.configuration.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests .class . java.lang.String ( ) + STRING , org.springframework.context.annotation.configuration.AutowiredConfigurationTests .class ) ; assertThat ( org.springframework.context.annotation.configuration.ClassPathXmlApplicationContext . getBean ( STRING , Colour .class ) , equalTo ( Colour . RED ) ) ; assertThat ( org.springframework.context.annotation.configuration.ClassPathXmlApplicationContext . getBean ( STRING , TestBean .class ) . getName ( ) , equalTo ( Colour . RED . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.AutowiredMethodConfig .class , org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ColorConfig .class ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( Colour .class ) , equalTo ( Colour . RED ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.OptionalAutowiredMethodConfig .class , org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ColorConfig .class ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( Colour .class ) , equalTo ( Colour . RED ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.OptionalAutowiredMethodConfig .class ) ; assertTrue ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeansOfType ( Colour .class ) . isEmpty ( ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , org.springframework.context.annotation.configuration.AutowiredConfigurationTests.AutowiredConstructorConfig .class ) ) ; GenericApplicationContext org.springframework.context.annotation.configuration.GenericApplicationContext = new GenericApplicationContext ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.AutowiredConstructorConfig .class ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ColorConfig .class ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.AutowiredConstructorConfig .class ) . colour , org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( Colour .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ObjectFactoryConstructorConfig .class ) ) ; GenericApplicationContext org.springframework.context.annotation.configuration.GenericApplicationContext = new GenericApplicationContext ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ObjectFactoryConstructorConfig .class ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ColorConfig .class ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ObjectFactoryConstructorConfig .class ) . colour , org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( Colour .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , org.springframework.context.annotation.configuration.AutowiredConfigurationTests.MultipleConstructorConfig .class ) ) ; GenericApplicationContext org.springframework.context.annotation.configuration.GenericApplicationContext = new GenericApplicationContext ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.MultipleConstructorConfig .class ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ColorConfig .class ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.MultipleConstructorConfig .class ) . colour , org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( Colour .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.configuration.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.context.annotation.configuration.AutowiredConfigurationTests .class ) ; void ( org.springframework.context.annotation.configuration.ClassPathXmlApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ValueConfigWithMetaAnnotation .class ) ; void ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ValueConfigWithAliasedMetaAnnotation .class ) ; void ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ValueConfigWithProviderFields .class ) ; void ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ValueConfigWithProviderConstructorArguments .class ) ; void ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.AutowiredConfigurationTests.ValueConfigWithProviderMethodArguments .class ) ; void ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanFactory org.springframework.context.annotation.configuration.BeanFactory ) { java.lang.System . java.lang.String ( STRING ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.BeanFactory . getBean ( STRING , TestBean .class ) ; assertNull ( org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.BeanFactory . getBean ( STRING , TestBean .class ) ; assertNull ( org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.BeanFactory . getBean ( STRING , TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.BeanFactory . getBean ( STRING , TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; java.lang.System . java.lang.String ( STRING ) ; org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.BeanFactory . getBean ( STRING , TestBean .class ) ; assertNull ( org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.BeanFactory . getBean ( STRING , TestBean .class ) ; assertNull ( org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ClassPathXmlApplicationContext org.springframework.context.annotation.configuration.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.context.annotation.configuration.AutowiredConfigurationTests .class ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.ClassPathXmlApplicationContext . getBean ( STRING , TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getAge ( ) , equalTo ( int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { GenericApplicationContext org.springframework.context.annotation.configuration.GenericApplicationContext = new GenericApplicationContext ( ) ; new XmlBeanDefinitionReader ( org.springframework.context.annotation.configuration.GenericApplicationContext ) . loadBeanDefinitions ( new ClassPathResource ( STRING , org.springframework.context.annotation.configuration.AutowiredConfigurationTests .class ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . refresh ( ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING , TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getAge ( ) , equalTo ( int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) java.io.IOException { return ( int ) new ClassPathResource ( STRING ) . contentLength ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.configuration.Colour . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( Colour org.springframework.context.annotation.configuration.Colour , java.util.List<org.springframework.context.annotation.configuration.Colour> < Colour > java.util.List<org.springframework.context.annotation.configuration.Colour> ) { return new TestBean ( org.springframework.context.annotation.configuration.Colour . toString ( ) + STRING + java.util.List<org.springframework.context.annotation.configuration.Colour> . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( java.util.Optional<org.springframework.context.annotation.configuration.Colour> < Colour > java.util.Optional<org.springframework.context.annotation.configuration.Colour> , java.util.Optional<java.util.List<org.springframework.context.annotation.configuration.Colour>> < java.util.List<org.springframework.context.annotation.configuration.Colour> < Colour > > java.util.Optional<java.util.List<org.springframework.context.annotation.configuration.Colour>> ) { if ( ! java.util.Optional<org.springframework.context.annotation.configuration.Colour> . isPresent ( ) && ! java.util.Optional<java.util.List<org.springframework.context.annotation.configuration.Colour>> . isPresent ( ) ) { return new TestBean ( STRING ) ; } else { return new TestBean ( java.util.Optional<org.springframework.context.annotation.configuration.Colour> . get ( ) . toString ( ) + STRING + java.util.Optional<java.util.List<org.springframework.context.annotation.configuration.Colour>> . get ( ) . get ( NUMBER ) . toString ( ) ) ; } }  <METHOD_END>
<METHOD_START> void ( Colour org.springframework.context.annotation.configuration.Colour ) { this . org.springframework.context.annotation.configuration.Colour = org.springframework.context.annotation.configuration.Colour ; }  <METHOD_END>
<METHOD_START> void ( ObjectFactory < Colour > org.springframework.context.annotation.configuration.ObjectFactory<org.springframework.context.annotation.configuration.Colour> ) { this . org.springframework.context.annotation.configuration.Colour = org.springframework.context.annotation.configuration.ObjectFactory<org.springframework.context.annotation.configuration.Colour> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Autowired void ( Colour org.springframework.context.annotation.configuration.Colour ) { this . org.springframework.context.annotation.configuration.Colour = org.springframework.context.annotation.configuration.Colour ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . org.springframework.context.annotation.configuration.Colour = new Colour ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.Colour org.springframework.context.annotation.configuration.Colour ( ) { return Colour . RED ; }  <METHOD_END>
<METHOD_START> @ Value ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.annotation.configuration.AutowiredConfigurationTests.MyProp public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.annotation.configuration.AutowiredConfigurationTests.AliasedProp ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Value ( STRING ) public void void ( Provider < java.lang.String > org.springframework.context.annotation.configuration.Provider<java.lang.String> ) { this . org.springframework.context.annotation.configuration.Provider<java.lang.String> = org.springframework.context.annotation.configuration.Provider<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.configuration.Provider<java.lang.String> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.configuration.Provider<java.lang.String> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( @ Value ( STRING ) Provider < java.lang.String > org.springframework.context.annotation.configuration.Provider<java.lang.String> , @ Value ( STRING ) Provider < java.lang.String > org.springframework.context.annotation.configuration.Provider<java.lang.String> ) { this . org.springframework.context.annotation.configuration.Provider<java.lang.String> = org.springframework.context.annotation.configuration.Provider<java.lang.String> ; this . org.springframework.context.annotation.configuration.Provider<java.lang.String> = org.springframework.context.annotation.configuration.Provider<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.configuration.Provider<java.lang.String> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.configuration.Provider<java.lang.String> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( @ Value ( STRING ) Provider < java.lang.String > org.springframework.context.annotation.configuration.Provider<java.lang.String> ) { return new TestBean ( org.springframework.context.annotation.configuration.Provider<java.lang.String> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( @ Value ( STRING ) Provider < java.lang.String > org.springframework.context.annotation.configuration.Provider<java.lang.String> ) { return new TestBean ( org.springframework.context.annotation.configuration.Provider<java.lang.String> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Value ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Value ( STRING ) public void void ( Resource org.springframework.context.annotation.configuration.Resource ) { this . org.springframework.context.annotation.configuration.Resource = org.springframework.context.annotation.configuration.Resource ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) java.io.IOException { return new TestBean ( java.lang.String , ( int ) org.springframework.context.annotation.configuration.Resource . contentLength ( ) ) ; }  <METHOD_END>
