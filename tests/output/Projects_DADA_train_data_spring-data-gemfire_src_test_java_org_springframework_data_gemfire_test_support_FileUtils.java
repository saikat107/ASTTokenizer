<METHOD_START> public static boolean boolean ( java.io.File java.io.File ) { return ( java.io.File != null && java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.io.File java.io.File ) { return ( java.io.File != null && java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.io.File java.io.File ( java.lang.String java.lang.String ) { return new java.io.File ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.io.File java.io.File ( java.io.File java.io.File , java.lang.String java.lang.String ) { return new java.io.File ( java.io.File , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static java.lang.String java.lang.String ( java.io.File java.io.File ) throws java.io.IOException { Assert . isTrue ( boolean ( java.io.File ) , java.lang.String . java.lang.String ( STRING , java.io.File ) ) ; java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader ( new java.io.FileReader ( java.io.File ) ) ; try { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String = java.io.BufferedReader . java.lang.String ( ) ; java.lang.String != null ; java.lang.String = java.io.BufferedReader . java.lang.String ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) . java.lang.String ( ) ; } finally { close ( java.io.BufferedReader ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.io.File java.io.File , java.lang.String java.lang.String ) throws java.io.IOException { Assert . notNull ( java.io.File , STRING ) ; Assert . isTrue ( StringUtils . hasText ( java.lang.String ) , java.lang.String . java.lang.String ( STRING , java.io.File ) ) ; java.io.BufferedWriter java.io.BufferedWriter = null ; try { java.io.BufferedWriter = new java.io.BufferedWriter ( new java.io.FileWriter ( java.io.File ) ) ; java.io.BufferedWriter . void ( java.lang.String ) ; java.io.BufferedWriter . void ( ) ; } finally { IOUtils . close ( java.io.BufferedWriter ) ; } }  <METHOD_END>
