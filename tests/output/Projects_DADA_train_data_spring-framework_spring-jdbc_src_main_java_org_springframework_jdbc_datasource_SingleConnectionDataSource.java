<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) { super( java.lang.String , java.lang.String , java.lang.String ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean ) { super( java.lang.String ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void ( java.sql.Connection java.sql.Connection , boolean boolean ) { Assert . notNull ( java.sql.Connection , STRING ) ; this . java.sql.Connection = java.sql.Connection ; this . boolean = boolean ; this . java.sql.Connection = ( boolean ? java.sql.Connection ( java.sql.Connection ) : java.sql.Connection ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = ( boolean ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Boolean java.lang.Boolean ( ) { return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { synchronized ( this . java.lang.Object ) { if ( this . java.sql.Connection == null ) { void ( ) ; } if ( this . java.sql.Connection . boolean ( ) ) { throw new java.sql.SQLException ( STRING + STRING ) ; } return this . java.sql.Connection ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.sql.SQLException { if ( ObjectUtils . nullSafeEquals ( java.lang.String , getUsername ( ) ) && ObjectUtils . nullSafeEquals ( java.lang.String , getPassword ( ) ) ) { return java.sql.Connection ( ) ; } else { throw new java.sql.SQLException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.sql.Connection java.sql.Connection ) { synchronized ( this . java.lang.Object ) { return ( java.sql.Connection != this . java.sql.Connection && java.sql.Connection != this . java.sql.Connection ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) java.sql.SQLException { if ( getUrl ( ) == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } synchronized ( this . java.lang.Object ) { void ( ) ; this . java.sql.Connection = getConnectionFromDriver ( getUsername ( ) , getPassword ( ) ) ; void ( this . java.sql.Connection ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . java.sql.Connection ) ; } this . java.sql.Connection = ( boolean ( ) ? java.sql.Connection ( this . java.sql.Connection ) : this . java.sql.Connection ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.lang.Object ) { void ( ) ; this . java.sql.Connection = null ; this . java.sql.Connection = null ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException { java.lang.Boolean java.lang.Boolean = java.lang.Boolean ( ) ; if ( java.lang.Boolean != null && java.sql.Connection . boolean ( ) != java.lang.Boolean ) { java.sql.Connection . void ( java.lang.Boolean ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.sql.Connection != null ) { try { this . java.sql.Connection . void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> protected java.sql.Connection java.sql.Connection ( java.sql.Connection java.sql.Connection ) { return ( java.sql.Connection ) java.lang.reflect.Proxy . java.lang.Object ( ConnectionProxy .class . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { ConnectionProxy .class } , new org.springframework.jdbc.datasource.SingleConnectionDataSource.CloseSuppressingInvocationHandler ( java.sql.Connection ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.sql.Connection java.sql.Connection ) { this . java.sql.Connection = java.sql.Connection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . boolean ( java.lang.Object ) ) { return java.lang.Object ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . boolean ( java.lang.Object ) ) { return true ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return false ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return this . java.sql.Connection ; } try { return java.lang.reflect.Method . java.lang.Object ( this . java.sql.Connection , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
