<METHOD_START> public void ( HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange , DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ) { super( java.net.URI ( org.springframework.http.server.reactive.HttpServerExchange ) , org.springframework.http.server.reactive.HttpHeaders ( org.springframework.http.server.reactive.HttpServerExchange ) ); this . org.springframework.http.server.reactive.HttpServerExchange = org.springframework.http.server.reactive.HttpServerExchange ; this . org.springframework.http.server.reactive.UndertowServerHttpRequest.RequestBodyPublisher = new org.springframework.http.server.reactive.UndertowServerHttpRequest.RequestBodyPublisher ( org.springframework.http.server.reactive.HttpServerExchange , org.springframework.http.server.reactive.DataBufferFactory ) ; this . org.springframework.http.server.reactive.UndertowServerHttpRequest.RequestBodyPublisher . void ( org.springframework.http.server.reactive.HttpServerExchange ) ; }  <METHOD_END>
<METHOD_START> private static java.net.URI java.net.URI ( HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange ) { Assert . notNull ( org.springframework.http.server.reactive.HttpServerExchange , STRING ) ; java.lang.String java.lang.String = org.springframework.http.server.reactive.HttpServerExchange . getRequestURL ( ) ; java.lang.String java.lang.String = org.springframework.http.server.reactive.HttpServerExchange . getQueryString ( ) ; java.lang.String java.lang.String = StringUtils . isEmpty ( java.lang.String ) ? java.lang.String : java.lang.String + STRING + java.lang.String ; return java.net.URI . java.net.URI ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange ) { HttpHeaders org.springframework.http.server.reactive.HttpHeaders = new HttpHeaders ( ) ; for ( HeaderValues org.springframework.http.server.reactive.HeaderValues : org.springframework.http.server.reactive.HttpServerExchange . getRequestHeaders ( ) ) { org.springframework.http.server.reactive.HttpHeaders . put ( org.springframework.http.server.reactive.HeaderValues . getHeaderName ( ) . toString ( ) , org.springframework.http.server.reactive.HeaderValues ) ; } return org.springframework.http.server.reactive.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange ( ) { return this . org.springframework.http.server.reactive.HttpServerExchange ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpMethod org.springframework.http.server.reactive.HttpMethod ( ) { return HttpMethod . valueOf ( this . org.springframework.http.server.reactive.HttpServerExchange ( ) . getRequestMethod ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ( ) { MultiValueMap < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> = new LinkedMultiValueMap <> ( ) ; for ( java.lang.String java.lang.String : this . org.springframework.http.server.reactive.HttpServerExchange . getRequestCookies ( ) . keySet ( ) ) { Cookie org.springframework.http.server.reactive.Cookie = this . org.springframework.http.server.reactive.HttpServerExchange . getRequestCookies ( ) . get ( java.lang.String ) ; HttpCookie org.springframework.http.server.reactive.HttpCookie = new HttpCookie ( java.lang.String , org.springframework.http.server.reactive.Cookie . getValue ( ) ) ; org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> . add ( java.lang.String , org.springframework.http.server.reactive.HttpCookie ) ; } return org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.Optional<java.net.InetSocketAddress> ( ) { return java.util.Optional . java.util.Optional ( this . org.springframework.http.server.reactive.HttpServerExchange . getSourceAddress ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> < DataBuffer > org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> ( ) { return Flux . from ( this . org.springframework.http.server.reactive.UndertowServerHttpRequest.RequestBodyPublisher ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange , DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ) { this . org.springframework.http.server.reactive.StreamSourceChannel = org.springframework.http.server.reactive.HttpServerExchange . getRequestChannel ( ) ; this . org.springframework.http.server.reactive.DataBufferFactory = org.springframework.http.server.reactive.DataBufferFactory ; this . org.springframework.http.server.reactive.ByteBufferPool = org.springframework.http.server.reactive.HttpServerExchange . getConnection ( ) . getByteBufferPool ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange ) { org.springframework.http.server.reactive.HttpServerExchange . addExchangeCompleteListener ( ( ex , next ) -> { onAllDataRead ( ) ; next . proceed ( ) ; } ) ; this . org.springframework.http.server.reactive.StreamSourceChannel . getReadSetter ( ) . set ( ( ChannelListener < StreamSourceChannel > ) c -> onDataAvailable ( ) ) ; this . org.springframework.http.server.reactive.StreamSourceChannel . getCloseSetter ( ) . set ( ( ChannelListener < StreamSourceChannel > ) c -> onAllDataRead ( ) ) ; this . org.springframework.http.server.reactive.StreamSourceChannel . resumeReads ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { onDataAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.DataBuffer org.springframework.http.server.reactive.DataBuffer ( ) java.io.IOException { if ( this . org.springframework.http.server.reactive.PooledByteBuffer == null ) { this . org.springframework.http.server.reactive.PooledByteBuffer = this . org.springframework.http.server.reactive.ByteBufferPool . allocate ( ) ; } java.nio.ByteBuffer java.nio.ByteBuffer = this . org.springframework.http.server.reactive.PooledByteBuffer . getBuffer ( ) ; int int = this . org.springframework.http.server.reactive.StreamSourceChannel . read ( java.nio.ByteBuffer ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + int ) ; } if ( int > NUMBER ) { java.nio.ByteBuffer . java.nio.Buffer ( ) ; return this . org.springframework.http.server.reactive.DataBufferFactory . wrap ( java.nio.ByteBuffer ) ; } else if ( int == - NUMBER ) { void ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.http.server.reactive.PooledByteBuffer != null && this . org.springframework.http.server.reactive.PooledByteBuffer . isOpen ( ) ) { this . org.springframework.http.server.reactive.PooledByteBuffer . close ( ) ; } super. onAllDataRead ( ) ; }  <METHOD_END>
