<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; void ( org.springframework.integration.gateway.QueueChannel ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.TestService . requestReply ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; void ( org.springframework.integration.gateway.QueueChannel ) ; GenericConversionService org.springframework.integration.gateway.GenericConversionService = new DefaultConversionService ( ) ; Converter < java.lang.String , byte [] > org.springframework.integration.gateway.Converter<java.lang.String,byte[]> = new Converter < java.lang.String , byte [] > ( ) { @ java.lang.Override public byte [] byte[] ( java.lang.String java.lang.String ) { return java.lang.String . byte[] ( ) ; } } ; org.springframework.integration.gateway.Converter<java.lang.String,byte[]> = spy ( org.springframework.integration.gateway.Converter<java.lang.String,byte[]> ) ; org.springframework.integration.gateway.GenericConversionService . addConverter ( org.springframework.integration.gateway.Converter<java.lang.String,byte[]> ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; DefaultListableBeanFactory org.springframework.integration.gateway.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.gateway.DefaultListableBeanFactory . registerSingleton ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME , org.springframework.integration.gateway.GenericConversionService ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( org.springframework.integration.gateway.DefaultListableBeanFactory ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; byte [] byte[] = org.springframework.integration.gateway.TestService . requestReplyInBytes ( STRING ) ; assertEquals ( NUMBER , byte[] . int ) ; Mockito . verify ( org.springframework.integration.gateway.Converter<java.lang.String,byte[]> , Mockito . times ( NUMBER ) ) . convert ( Mockito . any ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.String java.lang.String ) { return java.lang.String . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; org.springframework.integration.gateway.TestService . oneWay ( STRING ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.gateway.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( new DirectChannel ( ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultReplyChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.TestService . solicitResponse ( ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.gateway.QueueChannel . send ( new GenericMessage <> ( STRING ) ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultReplyChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; Message < java.lang.String > org.springframework.integration.gateway.Message<java.lang.String> = org.springframework.integration.gateway.TestService . getMessage ( ) ; assertNotNull ( org.springframework.integration.gateway.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<java.lang.String> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; new java.lang.Thread ( ( ) { Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( ) ; GenericMessage < java.lang.String > org.springframework.integration.gateway.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( org.springframework.integration.gateway.Message<> . getPayload ( ) + STRING ) ; ( ( MessageChannel ) org.springframework.integration.gateway.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . send ( org.springframework.integration.gateway.GenericMessage<java.lang.String> ) ; } ) . void ( ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; java.lang.Integer java.lang.Integer = org.springframework.integration.gateway.TestService . requestReplyWithIntegers ( NUMBER ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.gateway.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.gateway.GatewayProxyFactoryBeanTests .class ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.TestService . requestReply ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.gateway.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.gateway.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.gateway.GatewayProxyFactoryBeanTests .class ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.TestService . requestReply ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; TestChannelInterceptor org.springframework.integration.gateway.TestChannelInterceptor = ( TestChannelInterceptor ) org.springframework.integration.gateway.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.gateway.TestChannelInterceptor . getSentCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.gateway.TestChannelInterceptor . getReceivedCount ( ) ) ; org.springframework.integration.gateway.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.gateway.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.gateway.GatewayProxyFactoryBeanTests .class ) ; int int = NUMBER ; final TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.ClassPathXmlApplicationContext . getBean ( STRING ) ; final java.lang.String [] java.lang.String[] = new java.lang.String [ int ] ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { final int int = int ; java.util.concurrent.Executor . void ( ( ) { try { java.lang.Thread . void ( new java.util.Random ( ) . int ( NUMBER ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } java.lang.String[] [ int ] = org.springframework.integration.gateway.TestService . requestReply ( STRING + int ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; } java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; for ( int int = NUMBER ; int < int ; int ++ ) { assertEquals ( STRING + int + STRING , java.lang.String[] [ int ] ) ; } TestChannelInterceptor org.springframework.integration.gateway.TestChannelInterceptor = ( TestChannelInterceptor ) org.springframework.integration.gateway.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( int , org.springframework.integration.gateway.TestChannelInterceptor . getSentCount ( ) ) ; assertEquals ( int , org.springframework.integration.gateway.TestChannelInterceptor . getReceivedCount ( ) ) ; org.springframework.integration.gateway.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; void ( org.springframework.integration.gateway.QueueChannel ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.TestService . requestReplyWithMessageParameter ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; void ( org.springframework.integration.gateway.QueueChannel ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.TestService . requestReplyWithPayloadAnnotation ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; new java.lang.Thread ( ( ) { Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( ) ; GenericMessage < java.lang.String > org.springframework.integration.gateway.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( org.springframework.integration.gateway.Message<> . getPayload ( ) + STRING ) ; ( ( MessageChannel ) org.springframework.integration.gateway.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . send ( org.springframework.integration.gateway.GenericMessage<java.lang.String> ) ; } ) . void ( ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; TestService org.springframework.integration.gateway.TestService = ( TestService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.TestService . requestReplyWithMessageReturnValue ( STRING ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; int int = NUMBER ; try { org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; int ++ ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( java.lang.String .class ) ; int ++ ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( new DirectChannel ( ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( TestService .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , java.lang.Object . java.lang.String ( ) . java.lang.String ( NUMBER , java.lang.String . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestException .class ) public void void ( ) java.lang.Exception { GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = new DirectChannel ( ) ; EventDrivenConsumer org.springframework.integration.gateway.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.gateway.DirectChannel , new MessageHandler ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.gateway.Message<?> ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.integration.gateway.GatewayProxyFactoryBeanTests .class , STRING ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , this ) ; } } ) ; org.springframework.integration.gateway.EventDrivenConsumer . start ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.DirectChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestExceptionThrowingInterface .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestExceptionThrowingInterface org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestExceptionThrowingInterface = ( org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestExceptionThrowingInterface ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestExceptionThrowingInterface . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.gateway.Message<?> ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.integration.gateway.GatewayProxyFactoryBeanTests .class , STRING ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , this ) ; }  <METHOD_END>
<METHOD_START> private static void void ( final PollableChannel org.springframework.integration.gateway.PollableChannel ) { new java.lang.Thread ( ( ) { Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.PollableChannel . receive ( ) ; GenericMessage < java.lang.String > org.springframework.integration.gateway.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( org.springframework.integration.gateway.Message<> . getPayload ( ) + STRING ) ; ( ( MessageChannel ) org.springframework.integration.gateway.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . send ( org.springframework.integration.gateway.GenericMessage<java.lang.String> ) ; } ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestEchoService .class ) ; QueueChannel org.springframework.integration.gateway.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultReplyTimeout ( NUMBER ) ; GatewayMethodMetadata org.springframework.integration.gateway.GatewayMethodMetadata = new GatewayMethodMetadata ( ) ; org.springframework.integration.gateway.GatewayMethodMetadata . setHeaderExpressions ( java.util.Collections .< java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ( STRING , new LiteralExpression ( STRING ) ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setGlobalMethodMetadata ( org.springframework.integration.gateway.GatewayMethodMetadata ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; ( ( org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestEchoService ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ) . org.springframework.integration.gateway.Message<?> ( STRING ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ; assertNotNull ( java.lang.String ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.gateway.GatewayProxyFactoryBeanTests .class ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ) org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestException { throw new org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestException ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws org.springframework.integration.gateway.GatewayProxyFactoryBeanTests.TestException ;  <METHOD_END>
<METHOD_START> @ Autowired public void ( TestService org.springframework.integration.gateway.TestService ) { this . org.springframework.integration.gateway.TestService = org.springframework.integration.gateway.TestService ; }  <METHOD_END>
