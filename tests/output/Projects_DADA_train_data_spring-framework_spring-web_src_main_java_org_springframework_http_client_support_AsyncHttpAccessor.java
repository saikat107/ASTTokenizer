<METHOD_START> public void void ( org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequestFactory org.springframework.http.client.AsyncClientHttpRequestFactory ) { Assert . notNull ( org.springframework.http.client.AsyncClientHttpRequestFactory , STRING ) ; this . org.springframework.http.client.AsyncClientHttpRequestFactory = org.springframework.http.client.AsyncClientHttpRequestFactory ; }  <METHOD_END>
<METHOD_START> public org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequestFactory org.springframework.http.client.AsyncClientHttpRequestFactory ( ) { return this . org.springframework.http.client.AsyncClientHttpRequestFactory ; }  <METHOD_END>
<METHOD_START> protected org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.support.HttpMethod )			throws java.io.IOException { org . springframework . http . client . org.springframework.http.client.AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest = org.springframework.http.client.AsyncClientHttpRequestFactory ( ) . createAsyncRequest ( java.net.URI , org.springframework.http.client.support.HttpMethod ) ; if ( org.springframework.http.client.support.Log . isDebugEnabled ( ) ) { org.springframework.http.client.support.Log . debug ( STRING + org.springframework.http.client.support.HttpMethod . name ( ) + STRING + java.net.URI + STRING ) ; } return org.springframework.http.client.AsyncClientHttpRequest ; }  <METHOD_END>
