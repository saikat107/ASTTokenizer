<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.xml.Marshaller = mock ( Marshaller .class ) ; org.springframework.web.servlet.view.xml.MarshallingView = new MarshallingView ( org.springframework.web.servlet.view.xml.Marshaller ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , STRING , org.springframework.web.servlet.view.xml.MarshallingView . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , false , org.springframework.web.servlet.view.xml.MarshallingView . isExposePathVariables ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , false , new MarshallingView ( ) . isExposePathVariables ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.view.xml.MarshallingView . setModelKey ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; given ( org.springframework.web.servlet.view.xml.Marshaller . supports ( java.lang.Object .class ) ) . willReturn ( true ) ; org.springframework.web.servlet.view.xml.Marshaller . marshal ( eq ( java.lang.Object ) , isA ( javax.xml.transform.stream.StreamResult .class ) ) ; org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.view.xml.MarshallingView . setModelKey ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , new javax.xml.bind.JAXBElement<java.lang.String> <> ( new javax.xml.namespace.QName ( STRING ) , java.lang.String .class , java.lang.String ) ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; given ( org.springframework.web.servlet.view.xml.Marshaller . supports ( java.lang.String .class ) ) . willReturn ( true ) ; org.springframework.web.servlet.view.xml.Marshaller . marshal ( eq ( java.lang.String ) , isA ( javax.xml.transform.stream.StreamResult .class ) ) ; org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.view.xml.MarshallingView . setModelKey ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , null ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; try { org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.view.xml.MarshallingView . setModelKey ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; given ( org.springframework.web.servlet.view.xml.Marshaller . supports ( java.lang.Object .class ) ) . willReturn ( false ) ; try { org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; given ( org.springframework.web.servlet.view.xml.Marshaller . supports ( java.lang.Object .class ) ) . willReturn ( true ) ; org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; verify ( org.springframework.web.servlet.view.xml.Marshaller ) . marshal ( eq ( java.lang.Object ) , isA ( javax.xml.transform.stream.StreamResult .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + java.lang.String , new BeanPropertyBindingResult ( java.lang.Object , java.lang.String ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; given ( org.springframework.web.servlet.view.xml.Marshaller . supports ( BeanPropertyBindingResult .class ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.view.xml.Marshaller . supports ( java.lang.Object .class ) ) . willReturn ( true ) ; org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; verify ( org.springframework.web.servlet.view.xml.Marshaller ) . marshal ( eq ( java.lang.Object ) , isA ( javax.xml.transform.stream.StreamResult .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; MockHttpServletRequest org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; given ( org.springframework.web.servlet.view.xml.Marshaller . supports ( java.lang.Object .class ) ) . willReturn ( false ) ; try { org.springframework.web.servlet.view.xml.MarshallingView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
