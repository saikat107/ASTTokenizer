<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Before public void void ( ) { org.springframework.data.solr.repository.query.SimpleSolrMappingContext = new SimpleSolrMappingContext ( ) ; org.springframework.data.solr.repository.query.SolrConverter = new MappingSolrConverter ( org.springframework.data.solr.repository.query.SimpleSolrMappingContext ) ; org.springframework.data.solr.repository.query.SolrEntityInformationCreator = new org.springframework.data.solr.repository.query.SolrQueryTests.SolrEntityInformationCreatorImpl ( ) ; Mockito . when ( org.springframework.data.solr.repository.query.SolrPersistentEntity<org.springframework.data.solr.repository.query.ProductBean> . getType ( ) ) . thenReturn ( ProductBean .class ) ; Mockito . when ( org.springframework.data.solr.repository.query.SolrOperations . execute ( Mockito . any ( SolrCallback .class ) ) ) . thenReturn ( new PageImpl <> ( java.util.Collections .< ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( ) ) ) ; Mockito . when ( org.springframework.data.solr.repository.query.SolrOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.solr.repository.query.SolrConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , Pageable .class ) . execute ( new java.lang.Object [] { new PageRequest ( NUMBER , NUMBER ) } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ArgumentCaptor < HighlightQuery > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> = ArgumentCaptor . forClass ( HighlightQuery .class ) ; org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , Pageable .class ) . execute ( new java.lang.Object [] { new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForHighlightPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . capture ( ) , ( java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > ) Mockito . any ( ) ) ; HighlightOptions org.springframework.data.solr.repository.query.HighlightOptions = org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . getValue ( ) . getHighlightOptions ( ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.query.HighlightOptions ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ArgumentCaptor < HighlightQuery > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> = ArgumentCaptor . forClass ( HighlightQuery .class ) ; org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , Pageable .class ) . execute ( new java.lang.Object [] { new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForHighlightPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . capture ( ) , ( java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > ) Mockito . any ( ) ) ; HighlightOptions org.springframework.data.solr.repository.query.HighlightOptions = org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . getValue ( ) . getHighlightOptions ( ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.query.HighlightOptions ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getSimplePrefix ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getSimplePostfix ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getFields ( ) . get ( NUMBER ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getFields ( ) . get ( NUMBER ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getFormatter ( ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.HighlightOptions . getFragsize ( ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.HighlightOptions . getNrSnipplets ( ) ) ; Assert . assertEquals ( STRING , ( ( SimpleStringCriteria ) org.springframework.data.solr.repository.query.HighlightOptions . getQuery ( ) . getCriteria ( ) ) . getQueryString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ArgumentCaptor < HighlightQuery > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> = ArgumentCaptor . forClass ( HighlightQuery .class ) ; org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , java.lang.String .class , Pageable .class ) . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForHighlightPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . capture ( ) , ( java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > ) Mockito . any ( ) ) ; HighlightOptions org.springframework.data.solr.repository.query.HighlightOptions = org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . getValue ( ) . getHighlightOptions ( ) ; Assert . assertEquals ( STRING , ( ( SimpleStringCriteria ) org.springframework.data.solr.repository.query.HighlightOptions . getQuery ( ) . getCriteria ( ) ) . getQueryString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ArgumentCaptor < HighlightQuery > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> = ArgumentCaptor . forClass ( HighlightQuery .class ) ; org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , Pageable .class ) . execute ( new java.lang.Object [] { new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForHighlightPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . capture ( ) , ( java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > ) Mockito . any ( ) ) ; HighlightOptions org.springframework.data.solr.repository.query.HighlightOptions = org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.HighlightQuery> . getValue ( ) . getHighlightOptions ( ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.query.HighlightOptions ) ; Assert . assertNull ( org.springframework.data.solr.repository.query.HighlightOptions . getSimplePrefix ( ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.query.HighlightOptions . getSimplePrefix ( ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.query.HighlightOptions . getSimplePostfix ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getFormatter ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getHighlightParameterValue ( HighlightParams . TAG_PRE ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.query.HighlightOptions . getHighlightParameterValue ( HighlightParams . TAG_POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.SolrQueryTests.Repo1 .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( java.lang.reflect.Method ) ; PartTreeSolrQuery org.springframework.data.solr.repository.query.PartTreeSolrQuery = new PartTreeSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , this . org.springframework.data.solr.repository.query.SolrOperations ) ; org.springframework.data.solr.repository.query.PartTreeSolrQuery . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; ArgumentCaptor < Query > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . capture ( ) , ( java.lang.Class<?> < ? > ) Mockito . any ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . getValue ( ) . getPageRequest ( ) . getPageNumber ( ) , IsEqual . equalTo ( NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . getValue ( ) . getPageRequest ( ) . getPageSize ( ) , IsEqual . equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.SolrQueryTests.Repo1 .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( java.lang.reflect.Method ) ; PartTreeSolrQuery org.springframework.data.solr.repository.query.PartTreeSolrQuery = new PartTreeSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , this . org.springframework.data.solr.repository.query.SolrOperations ) ; org.springframework.data.solr.repository.query.PartTreeSolrQuery . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; ArgumentCaptor < Query > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . capture ( ) , ( java.lang.Class<?> < ? > ) Mockito . any ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . getValue ( ) . getPageRequest ( ) . getPageNumber ( ) , IsEqual . equalTo ( NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . getValue ( ) . getPageRequest ( ) . getPageSize ( ) , IsEqual . equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.SolrQueryTests.Repo1 .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( java.lang.reflect.Method ) ; PartTreeSolrQuery org.springframework.data.solr.repository.query.PartTreeSolrQuery = new PartTreeSolrQuery ( org.springframework.data.solr.repository.query.SolrQueryMethod , this . org.springframework.data.solr.repository.query.SolrOperations ) ; org.springframework.data.solr.repository.query.PartTreeSolrQuery . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . never ( ) ) . queryForPage ( Mockito . any ( Query .class ) , ( java.lang.Class<?> < ? > ) Mockito . any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , java.lang.String .class , Pageable .class ) . execute ( new java.lang.Object [] { STRING , new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForPage ( Mockito . any ( Query .class ) , Mockito .< java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > > any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ArgumentCaptor < Query > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , Pageable .class ) . execute ( new java.lang.Object [] { new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . capture ( ) , ( java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > ) Mockito . any ( ) ) ; StatsOptions org.springframework.data.solr.repository.query.StatsOptions = org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . getValue ( ) . getStatsOptions ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.query.StatsOptions . getFields ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.query.StatsOptions . getFields ( ) . containsAll ( java.util.Arrays . java.util.List ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.query.StatsOptions . getFacets ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.query.StatsOptions . getFacets ( ) . containsAll ( java.util.Arrays . java.util.List ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ) ) ; java.util.Collection<org.springframework.data.solr.repository.query.Field> < Field > java.util.Collection<org.springframework.data.solr.repository.query.Field> = org.springframework.data.solr.repository.query.StatsOptions . getSelectiveFacets ( ) . get ( new SimpleField ( STRING ) ) ; java.util.List<org.springframework.data.solr.repository.query.SimpleField> < SimpleField > java.util.List<org.springframework.data.solr.repository.query.SimpleField> = java.util.Arrays . java.util.List ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.query.StatsOptions . getSelectiveFacets ( ) . size ( ) ) ; Assert . assertTrue ( java.util.Collection<org.springframework.data.solr.repository.query.Field> . containsAll ( java.util.List<org.springframework.data.solr.repository.query.SimpleField> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ArgumentCaptor < Query > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , Pageable .class ) . execute ( new java.lang.Object [] { new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . capture ( ) , ( java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > ) Mockito . any ( ) ) ; StatsOptions org.springframework.data.solr.repository.query.StatsOptions = org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . getValue ( ) . getStatsOptions ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.query.StatsOptions . getFields ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.query.StatsOptions . getFields ( ) . containsAll ( java.util.Collections . java.util.List ( new SimpleField ( STRING ) ) ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.query.StatsOptions . getFacets ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.query.StatsOptions . getFacets ( ) . containsAll ( java.util.Arrays . java.util.List ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.query.StatsOptions . getSelectiveFacets ( ) . entrySet ( ) , IsEmptyIterable . emptyIterable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ArgumentCaptor < Query > org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> = ArgumentCaptor . forClass ( Query .class ) ; org.springframework.data.solr.repository.query.RepositoryQuery ( STRING , Pageable .class ) . execute ( new java.lang.Object [] { new PageRequest ( NUMBER , NUMBER ) } ) ; Mockito . verify ( org.springframework.data.solr.repository.query.SolrOperations , Mockito . times ( NUMBER ) ) . queryForPage ( org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . capture ( ) , ( java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > ) Mockito . any ( ) ) ; StatsOptions org.springframework.data.solr.repository.query.StatsOptions = org.springframework.data.solr.repository.query.ArgumentCaptor<org.springframework.data.solr.repository.query.Query> . getValue ( ) . getStatsOptions ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.query.StatsOptions . getFields ( ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.query.StatsOptions . getFields ( ) . containsAll ( java.util.Collections . java.util.List ( new SimpleField ( STRING ) ) ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.query.StatsOptions . getFacets ( ) , IsEmptyIterable . emptyIterable ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.query.StatsOptions . getSelectiveFacets ( ) . entrySet ( ) , IsEmptyIterable . emptyIterable ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.RepositoryQuery org.springframework.data.solr.repository.query.RepositoryQuery ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { try { return this . org.springframework.data.solr.repository.query.RepositoryQuery ( org.springframework.data.solr.repository.query.SolrQueryTests.Repo1 .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ) ; } catch ( java.lang.NoSuchMethodException | java.lang.SecurityException java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.RepositoryQuery org.springframework.data.solr.repository.query.RepositoryQuery ( java.lang.reflect.Method java.lang.reflect.Method ) { return new org.springframework.data.solr.repository.query.SolrQueryTests.SolrQueryImpl ( this . org.springframework.data.solr.repository.query.SolrOperations , org.springframework.data.solr.repository.query.SolrQueryMethod ( java.lang.reflect.Method ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod ( java.lang.reflect.Method java.lang.reflect.Method ) { return new SolrQueryMethod ( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , new SpelAwareProxyProjectionFactory ( ) , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; }  <METHOD_END>
<METHOD_START> @ Facet ( fields = { STRING } ) @ Highlight org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Highlight org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Highlight ( fields = { STRING , STRING } , fragsize = NUMBER , snipplets = NUMBER , prefix = STRING , postfix = STRING , query = STRING , formatter = STRING ) org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Highlight ( query = STRING ) org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String , Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Highlight ( formatter = STRING , prefix = STRING , postfix = STRING ) org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String , Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.solr.repository.query.Slice<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Slice<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String , Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Stats ( value = STRING , facets = { STRING , STRING } , selective = @ SelectiveStats ( field = STRING , facets = { STRING , STRING } ) ) org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Stats ( value = STRING , facets = { STRING , STRING } ) org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Stats ( value = STRING ) org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > org.springframework.data.solr.repository.query.Page<org.springframework.data.solr.repository.query.ProductBean> ( Pageable org.springframework.data.solr.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T , ID extends java.io.Serializable > org.springframework.data.solr.repository.query.SolrEntityInformation<T,ID> < T , ID > org.springframework.data.solr.repository.query.SolrEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return ( SolrEntityInformation < T , ID > ) new org.springframework.data.solr.repository.query.SolrQueryTests.SolrEntityInformationImpl ( org.springframework.data.solr.repository.query.SolrPersistentEntity<org.springframework.data.solr.repository.query.ProductBean> ) ; }  <METHOD_END>
<METHOD_START> public void ( SolrPersistentEntity < ProductBean > org.springframework.data.solr.repository.query.SolrPersistentEntity<org.springframework.data.solr.repository.query.ProductBean> ) { super( org.springframework.data.solr.repository.query.SolrPersistentEntity<org.springframework.data.solr.repository.query.ProductBean> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<java.lang.String> < java.lang.String > java.lang.Class<java.lang.String> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.lang.Class<org.springframework.data.solr.repository.query.ProductBean> ( ) { return ProductBean .class ; }  <METHOD_END>
<METHOD_START> public void ( SolrOperations org.springframework.data.solr.repository.query.SolrOperations , SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod ) { super( org.springframework.data.solr.repository.query.SolrOperations , org.springframework.data.solr.repository.query.SolrQueryMethod ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.solr.repository.query.Query org.springframework.data.solr.repository.query.Query ( SolrParameterAccessor org.springframework.data.solr.repository.query.SolrParameterAccessor ) { return new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; }  <METHOD_END>
