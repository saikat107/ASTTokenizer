<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.jdbc.SqlScriptsTestExecutionListenerTests.MissingValueAndScriptsAndStatementsAtClassLevel .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.jdbc.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.jdbc.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; void ( java.lang.Class<> . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.jdbc.SqlScriptsTestExecutionListenerTests.MissingValueAndScriptsAndStatementsAtMethodLevel .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.jdbc.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.jdbc.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; void ( java.lang.Class<> . java.lang.String ( ) + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.jdbc.SqlScriptsTestExecutionListenerTests.ValueAndScriptsDeclared .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.jdbc.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.jdbc.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.jdbc.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.test.context.jdbc.ExpectedException . expectMessage ( either ( containsString ( STRING ) ) . or ( containsString ( STRING ) ) ) ; org.springframework.test.context.jdbc.ExpectedException . expectMessage ( either ( containsString ( STRING ) ) . or ( containsString ( STRING ) ) ) ; org.springframework.test.context.jdbc.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener . beforeTestMethod ( org.springframework.test.context.jdbc.TestContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.test.context.jdbc.ApplicationContext = mock ( ApplicationContext .class ) ; given ( org.springframework.test.context.jdbc.ApplicationContext . getResource ( anyString ( ) ) ) . willReturn ( mock ( Resource .class ) ) ; given ( org.springframework.test.context.jdbc.ApplicationContext . getAutowireCapableBeanFactory ( ) ) . willReturn ( mock ( AutowireCapableBeanFactory .class ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.jdbc.SqlScriptsTestExecutionListenerTests.IsolatedWithoutTxMgr .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.jdbc.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.jdbc.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; given ( org.springframework.test.context.jdbc.TestContext . getApplicationContext ( ) ) . willReturn ( org.springframework.test.context.jdbc.ApplicationContext ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.test.context.jdbc.ApplicationContext = mock ( ApplicationContext .class ) ; given ( org.springframework.test.context.jdbc.ApplicationContext . getResource ( anyString ( ) ) ) . willReturn ( mock ( Resource .class ) ) ; given ( org.springframework.test.context.jdbc.ApplicationContext . getAutowireCapableBeanFactory ( ) ) . willReturn ( mock ( AutowireCapableBeanFactory .class ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.jdbc.SqlScriptsTestExecutionListenerTests.MissingDataSourceAndTxMgr .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.jdbc.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.jdbc.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; given ( org.springframework.test.context.jdbc.TestContext . getApplicationContext ( ) ) . willReturn ( org.springframework.test.context.jdbc.ApplicationContext ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { try { org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener . beforeTestMethod ( org.springframework.test.context.jdbc.TestContext ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.String , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Sql public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Sql ( value = STRING , scripts = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Sql ( scripts = STRING , config = @ SqlConfig ( transactionMode = TransactionMode . ISOLATED ) ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Sql ( STRING ) public void void ( ) {		}  <METHOD_END>
