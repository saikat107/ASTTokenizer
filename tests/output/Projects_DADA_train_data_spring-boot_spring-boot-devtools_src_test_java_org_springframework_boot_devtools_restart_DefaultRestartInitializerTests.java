<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer ( true ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . getInitialUrls ( java.lang.Thread . java.lang.Thread ( ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer ( false ) ; java.lang.ClassLoader java.lang.ClassLoader = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockAppClassLoader ( java.lang.Class<? extends org.springframework.boot.devtools.restart.DefaultRestartInitializerTests> ( ) . java.lang.ClassLoader ( ) ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) ; java.lang.Thread . void ( STRING ) ; java.lang.Thread . void ( java.lang.ClassLoader ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . isMain ( java.lang.Thread ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . getInitialUrls ( java.lang.Thread ) ) . isNotEqualTo ( nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer ( false ) ; java.lang.ClassLoader java.lang.ClassLoader = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockAppClassLoader ( java.lang.Class<? extends org.springframework.boot.devtools.restart.DefaultRestartInitializerTests> ( ) . java.lang.ClassLoader ( ) ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) ; java.lang.Thread . void ( STRING ) ; java.lang.Thread . void ( java.lang.ClassLoader ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . isMain ( java.lang.Thread ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . getInitialUrls ( java.lang.Thread ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer ( false ) ; java.lang.ClassLoader java.lang.ClassLoader = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockLauncherClassLoader ( java.lang.Class<? extends org.springframework.boot.devtools.restart.DefaultRestartInitializerTests> ( ) . java.lang.ClassLoader ( ) ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) ; java.lang.Thread . void ( STRING ) ; java.lang.Thread . void ( java.lang.ClassLoader ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . isMain ( java.lang.Thread ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . getInitialUrls ( java.lang.Thread ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , boolean boolean ) { org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer = new org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer ( true ) ; java.lang.StackTraceElement java.lang.StackTraceElement = new java.lang.StackTraceElement ( java.lang.String , STRING , STRING , NUMBER ) ; assertThat ( org.springframework.boot.devtools.restart.DefaultRestartInitializerTests.MockRestartInitializer . boolean ( java.lang.StackTraceElement ) ) . isEqualTo ( boolean ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.StackTraceElement java.lang.StackTraceElement ) { if ( ! this . boolean ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.URL [] java.net.URL[] ( java.lang.Thread java.lang.Thread ) { return new java.net.URL [ NUMBER ] ; }  <METHOD_END>
