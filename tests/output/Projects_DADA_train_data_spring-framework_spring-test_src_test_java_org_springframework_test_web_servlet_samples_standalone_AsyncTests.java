<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.test.web.servlet.samples.standalone.MvcResult = this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andExpect ( request ( ) . asyncResult ( new Person ( STRING ) ) ) . andReturn ( ) ; this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.standalone.MvcResult ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andDo ( MvcResult :: getAsyncResult ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andDo ( MvcResult :: getAsyncResult ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andDo ( MvcResult :: getAsyncResult ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.test.web.servlet.samples.standalone.MvcResult = this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andReturn ( ) ; this . org.springframework.test.web.servlet.samples.standalone.AsyncTests.AsyncController . void ( STRING ) ; this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.standalone.MvcResult ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.test.web.servlet.samples.standalone.MvcResult = this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andExpect ( request ( ) . asyncResult ( new Person ( STRING ) ) ) . andReturn ( ) ; this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.standalone.MvcResult ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.test.web.servlet.samples.standalone.MvcResult = this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andReturn ( ) ; this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.standalone.MvcResult ) ) . andExpect ( status ( ) . is5xxServerError ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.test.web.servlet.samples.standalone.MvcResult = this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andReturn ( ) ; this . org.springframework.test.web.servlet.samples.standalone.AsyncTests.AsyncController . void ( STRING ) ; this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.standalone.MvcResult ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.test.web.servlet.samples.standalone.MvcResult = this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andReturn ( ) ; this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.standalone.MvcResult ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; MvcResult org.springframework.test.web.servlet.samples.standalone.MvcResult = this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andDo ( print ( java.io.StringWriter ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andReturn ( ) ; assertTrue ( java.io.StringWriter . java.lang.String ( ) . boolean ( STRING ) ) ; java.io.StringWriter = new java.io.StringWriter ( ) ; this . org.springframework.test.web.servlet.samples.standalone.AsyncTests.AsyncController . void ( STRING ) ; this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.standalone.MvcResult ) ) . andDo ( print ( java.io.StringWriter ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) ) . andExpect ( content ( ) . string ( STRING ) ) ; assertTrue ( java.io.StringWriter . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public java.util.concurrent.Callable<org.springframework.test.web.servlet.samples.standalone.Person> < Person > java.util.concurrent.Callable<org.springframework.test.web.servlet.samples.standalone.Person> ( ) { return ( ) new Person ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public org.springframework.test.web.servlet.samples.standalone.StreamingResponseBody org.springframework.test.web.servlet.samples.standalone.StreamingResponseBody ( ) { return os -> os . write ( STRING . getBytes ( StandardCharsets . UTF_8 ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public org.springframework.test.web.servlet.samples.standalone.StreamingResponseBody org.springframework.test.web.servlet.samples.standalone.StreamingResponseBody ( ) { return os -> { os . write ( STRING . getBytes ( ) ) ; try { Thread . sleep ( NUMBER ) ; os . write ( STRING . getBytes ( StandardCharsets . UTF_8 ) ) ; } catch ( InterruptedException e ) { } } ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public org.springframework.test.web.servlet.samples.standalone.ResponseEntity<org.springframework.test.web.servlet.samples.standalone.StreamingResponseBody> < StreamingResponseBody > org.springframework.test.web.servlet.samples.standalone.ResponseEntity<org.springframework.test.web.servlet.samples.standalone.StreamingResponseBody> ( ) { return ResponseEntity . ok ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) . body ( os -> os . write ( STRING . getBytes ( StandardCharsets . UTF_8 ) ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> < Person > org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ( ) { DeferredResult < Person > org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> = new DeferredResult <> ( ) ; this . java.util.Collection<org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person>> . add ( org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ) ; return org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> < Person > org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ( ) { DeferredResult < Person > org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> = new DeferredResult <> ( ) ; org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> . setResult ( new Person ( STRING ) ) ; return org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> < Person > org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ( ) { final DeferredResult < Person > org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> = new DeferredResult <> ( ) ; new java.lang.Thread ( ) { public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> . setErrorResult ( new java.lang.RuntimeException ( STRING ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } } } . void ( ) ; return org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ; }  <METHOD_END>
<METHOD_START> public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> . setErrorResult ( new java.lang.RuntimeException ( STRING ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public org.springframework.test.web.servlet.samples.standalone.ListenableFuture<org.springframework.test.web.servlet.samples.standalone.Person> < Person > org.springframework.test.web.servlet.samples.standalone.ListenableFuture<org.springframework.test.web.servlet.samples.standalone.Person> ( ) { ListenableFutureTask < Person > org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person> = new ListenableFutureTask <> ( ( ) new Person ( STRING ) ) ; this . java.util.Collection<org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person>> . add ( org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person> ) ; return org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person> ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public java.util.concurrent.CompletableFuture<org.springframework.test.web.servlet.samples.standalone.Person> < Person > java.util.concurrent.CompletableFuture<org.springframework.test.web.servlet.samples.standalone.Person> ( ) { java.util.concurrent.CompletableFuture<org.springframework.test.web.servlet.samples.standalone.Person> < Person > java.util.concurrent.CompletableFuture<org.springframework.test.web.servlet.samples.standalone.Person> = new java.util.concurrent.CompletableFuture<org.springframework.test.web.servlet.samples.standalone.Person> <> ( ) ; java.util.concurrent.CompletableFuture<org.springframework.test.web.servlet.samples.standalone.Person> . complete ( new Person ( STRING ) ) ; return java.util.concurrent.CompletableFuture<org.springframework.test.web.servlet.samples.standalone.Person> ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseStatus ( HttpStatus . INTERNAL_SERVER_ERROR ) public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { for ( DeferredResult < Person > org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> : this . java.util.Collection<org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person>> ) { org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> . setResult ( new Person ( java.lang.String ) ) ; this . java.util.Collection<org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person>> . remove ( org.springframework.test.web.servlet.samples.standalone.DeferredResult<org.springframework.test.web.servlet.samples.standalone.Person> ) ; } for ( ListenableFutureTask < Person > org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person> : this . java.util.Collection<org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person>> ) { org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person> . run ( ) ; this . java.util.Collection<org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person>> . remove ( org.springframework.test.web.servlet.samples.standalone.ListenableFutureTask<org.springframework.test.web.servlet.samples.standalone.Person> ) ; } }  <METHOD_END>
