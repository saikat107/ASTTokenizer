<METHOD_START> @ BeforeClass public static void void ( ) { java.io.File = new java.io.File ( STRING ) ; assertTrue ( java.io.File . boolean ( ) || java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { FileSystemUtils . deleteRecursively ( java.io.File ) ; for ( java.lang.String java.lang.String : new java.io.File ( STRING ) . java.lang.String[] ( new java.io.FilenameFilter ( ) { @ java.lang.Override public boolean boolean ( java.io.File java.io.File , java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; } } ) ) { new java.io.File ( java.lang.String ) . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File , java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) ) ; org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.DiskStore ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.DiskStore . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.DiskStore . getQueueSize ( ) ) ; assertEquals ( true , org.springframework.data.gemfire.config.xml.DiskStore . getAutoCompact ( ) ) ; assertEquals ( DiskStoreFactory . DEFAULT_COMPACTION_THRESHOLD , org.springframework.data.gemfire.config.xml.DiskStore . getCompactionThreshold ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.DiskStore . getTimeInterval ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.DiskStore . getMaxOplogSize ( ) ) ; assertEquals ( java.io.File , org.springframework.data.gemfire.config.xml.DiskStore . getDiskDirs ( ) [ NUMBER ] ) ; Cache org.springframework.data.gemfire.config.xml.Cache = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Cache .class ) ; assertSame ( org.springframework.data.gemfire.config.xml.DiskStore , org.springframework.data.gemfire.config.xml.Cache . findDiskStore ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionFactoryBean instanceof ReplicatedRegionFactoryBean ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.config.xml.RegionFactoryBean . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.RegionFactoryBean . getDataPolicy ( ) . withPersistence ( ) ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; Region org.springframework.data.gemfire.config.xml.Region = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; assertEquals ( Scope . DISTRIBUTED_NO_ACK , org.springframework.data.gemfire.config.xml.RegionAttributes . getScope ( ) ) ; EvictionAttributes org.springframework.data.gemfire.config.xml.EvictionAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getEvictionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.EvictionAttributes ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAlgorithm ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.EvictionAttributes . getMaximum ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.EvictionAttributes . getObjectSizer ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionFactoryBean instanceof PartitionedRegionFactoryBean ) ; assertTrue ( ( java.lang.Boolean ) TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; EvictionAttributes org.springframework.data.gemfire.config.xml.EvictionAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getEvictionAttributes ( ) ; assertEquals ( EvictionAction . LOCAL_DESTROY , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAlgorithm ( ) ) ; ObjectSizer org.springframework.data.gemfire.config.xml.ObjectSizer = org.springframework.data.gemfire.config.xml.EvictionAttributes . getObjectSizer ( ) ; assertEquals ( SimpleObjectSizer .class , org.springframework.data.gemfire.config.xml.ObjectSizer . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getEntryTimeToLive ( ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; assertEquals ( ExpirationAction . DESTROY , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getEntryIdleTimeout ( ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; assertEquals ( ExpirationAction . INVALIDATE , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getRegionTimeToLive ( ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; assertEquals ( ExpirationAction . DESTROY , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getRegionIdleTimeout ( ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; assertEquals ( ExpirationAction . INVALIDATE , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes . getCustomEntryIdleTimeout ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes . getCustomEntryTimeToLive ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionAttributes . getCustomEntryIdleTimeout ( ) instanceof org.springframework.data.gemfire.config.xml.DiskStoreAndEvictionRegionParsingTest.TestCustomExpiry ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionAttributes . getCustomEntryTimeToLive ( ) instanceof org.springframework.data.gemfire.config.xml.DiskStoreAndEvictionRegionParsingTest.TestCustomExpiry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.xml.ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes ( Entry < K , V > org.springframework.data.gemfire.config.xml.Entry<K,V> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
