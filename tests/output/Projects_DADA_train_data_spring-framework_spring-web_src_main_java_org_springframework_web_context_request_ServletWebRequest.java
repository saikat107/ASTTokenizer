<METHOD_START> public void ( HttpServletRequest org.springframework.web.context.request.HttpServletRequest ) { super( org.springframework.web.context.request.HttpServletRequest ); }  <METHOD_END>
<METHOD_START> public void ( HttpServletRequest org.springframework.web.context.request.HttpServletRequest , HttpServletResponse org.springframework.web.context.request.HttpServletResponse ) { super( org.springframework.web.context.request.HttpServletRequest , org.springframework.web.context.request.HttpServletResponse ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return getRequest ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return getResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return WebUtils . getNativeRequest ( getRequest ( ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return WebUtils . getNativeResponse ( getResponse ( ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.context.request.HttpMethod org.springframework.web.context.request.HttpMethod ( ) { return HttpMethod . resolve ( getRequest ( ) . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return getRequest ( ) . getHeader ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = StringUtils . toStringArray ( getRequest ( ) . getHeaders ( java.lang.String ) ) ; return ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ? java.lang.String[] : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> ( ) { return CollectionUtils . toIterator ( getRequest ( ) . getHeaderNames ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return getRequest ( ) . getParameter ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return getRequest ( ) . getParameterValues ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> ( ) { return CollectionUtils . toIterator ( getRequest ( ) . getParameterNames ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ( ) { return getRequest ( ) . getParameterMap ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( ) { return getRequest ( ) . getLocale ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getRequest ( ) . getContextPath ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getRequest ( ) . getRemoteUser ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return getRequest ( ) . getUserPrincipal ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return getRequest ( ) . isUserInRole ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return getRequest ( ) . isSecure ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( long long ) { return boolean ( null , long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return boolean ( java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , long long ) { HttpServletResponse org.springframework.web.context.request.HttpServletResponse = getResponse ( ) ; if ( this . boolean || HttpStatus . OK . value ( ) != org.springframework.web.context.request.HttpServletResponse . getStatus ( ) ) { return this . boolean ; } if ( boolean ( long ) ) { if ( this . boolean ) { org.springframework.web.context.request.HttpServletResponse . setStatus ( HttpStatus . PRECONDITION_FAILED . value ( ) ) ; } return this . boolean ; } boolean boolean = boolean ( java.lang.String ) ; if ( ! boolean ) { boolean ( long ) ; } boolean boolean = java.util.List<java.lang.String> . boolean ( getRequest ( ) . getMethod ( ) ) ; if ( this . boolean ) { org.springframework.web.context.request.HttpServletResponse . setStatus ( boolean ? HttpStatus . NOT_MODIFIED . value ( ) : HttpStatus . PRECONDITION_FAILED . value ( ) ) ; } if ( boolean ) { if( long > NUMBER && long ( org.springframework.web.context.request.HttpServletResponse . getHeader ( java.lang.String ) ) == - NUMBER ) { org.springframework.web.context.request.HttpServletResponse . setDateHeader ( java.lang.String , long ) ; } if ( StringUtils . hasLength ( java.lang.String ) && org.springframework.web.context.request.HttpServletResponse . getHeader ( java.lang.String ) == null ) { org.springframework.web.context.request.HttpServletResponse . setHeader ( java.lang.String , java.lang.String ( java.lang.String ) ) ; } } return this . boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( long long ) { if ( long < NUMBER ) { return false ; } long long = long ( java.lang.String ) ; if ( long == - NUMBER ) { return false ; } this . boolean = ( long < ( long / NUMBER * NUMBER ) ) ; return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return false ; } java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ; try { java.util.Enumeration<java.lang.String> = getRequest ( ) . getHeaders ( java.lang.String ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return false ; } if ( ! java.util.Enumeration<java.lang.String> . boolean ( ) ) { return false ; } java.lang.String = java.lang.String ( java.lang.String ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { if ( StringUtils . hasLength ( java.util.regex.Matcher . java.lang.String ( ) ) && java.lang.String . java.lang.String ( STRING , STRING ) . boolean ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ) { this . boolean = true ; break; } } } return true ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return java.lang.String ; } if ( ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) && java.lang.String . boolean ( STRING ) ) { return java.lang.String ; } return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( long long ) { if ( long < NUMBER ) { return false ; } long long = long ( java.lang.String ) ; if ( long == - NUMBER ) { return false ; } this . boolean = long >= ( long / NUMBER * NUMBER ) ; return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String ) { long long = - NUMBER ; try { long = getRequest ( ) . getDateHeader ( java.lang.String ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; int int = java.lang.String . int ( ';' ) ; if ( int != - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; long = long ( java.lang.String ) ; } } return long ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return - NUMBER ; } if ( java.lang.String . int ( ) >= NUMBER ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone ) ; try { return java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) . long ( ) ; } catch ( java.text.ParseException java.text.ParseException ) { } } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( boolean boolean ) { HttpServletRequest org.springframework.web.context.request.HttpServletRequest = getRequest ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.web.context.request.HttpServletRequest . getRequestURI ( ) ) ; if ( boolean ) { java.lang.String java.lang.String = org.springframework.web.context.request.HttpServletRequest . getRemoteAddr ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) ; } HttpSession org.springframework.web.context.request.HttpSession = org.springframework.web.context.request.HttpServletRequest . getSession ( false ) ; if ( org.springframework.web.context.request.HttpSession != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.web.context.request.HttpSession . getId ( ) ) ; } java.lang.String java.lang.String = org.springframework.web.context.request.HttpServletRequest . getRemoteUser ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String ( true ) ; }  <METHOD_END>
