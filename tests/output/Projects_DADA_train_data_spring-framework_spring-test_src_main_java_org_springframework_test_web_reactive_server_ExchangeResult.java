<METHOD_START> protected void ( WiretapClientHttpRequest org.springframework.test.web.reactive.server.WiretapClientHttpRequest , WiretapClientHttpResponse org.springframework.test.web.reactive.server.WiretapClientHttpResponse ) { this . org.springframework.test.web.reactive.server.WiretapClientHttpRequest = org.springframework.test.web.reactive.server.WiretapClientHttpRequest ; this . org.springframework.test.web.reactive.server.WiretapClientHttpResponse = org.springframework.test.web.reactive.server.WiretapClientHttpResponse ; }  <METHOD_END>
<METHOD_START> protected void ( org.springframework.test.web.reactive.server.ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult ) { this . org.springframework.test.web.reactive.server.WiretapClientHttpRequest = org.springframework.test.web.reactive.server.ExchangeResult . org.springframework.test.web.reactive.server.WiretapClientHttpRequest ; this . org.springframework.test.web.reactive.server.WiretapClientHttpResponse = org.springframework.test.web.reactive.server.ExchangeResult . org.springframework.test.web.reactive.server.WiretapClientHttpResponse ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.HttpMethod org.springframework.test.web.reactive.server.HttpMethod ( ) { return this . org.springframework.test.web.reactive.server.WiretapClientHttpRequest . getMethod ( ) ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) { return this . org.springframework.test.web.reactive.server.WiretapClientHttpRequest . getURI ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.HttpHeaders org.springframework.test.web.reactive.server.HttpHeaders ( ) { return this . org.springframework.test.web.reactive.server.WiretapClientHttpRequest . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { MonoProcessor < byte [] > org.springframework.test.web.reactive.server.MonoProcessor<byte[]> = this . org.springframework.test.web.reactive.server.WiretapClientHttpRequest . getRecordedContent ( ) ; Assert . isTrue ( org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . isTerminated ( ) , STRING ) ; return org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . block ( java.time.Duration . java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.HttpStatus org.springframework.test.web.reactive.server.HttpStatus ( ) { return this . org.springframework.test.web.reactive.server.WiretapClientHttpResponse . getStatusCode ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.HttpHeaders org.springframework.test.web.reactive.server.HttpHeaders ( ) { return this . org.springframework.test.web.reactive.server.WiretapClientHttpResponse . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.MultiValueMap<java.lang.String,org.springframework.test.web.reactive.server.ResponseCookie> < java.lang.String , ResponseCookie > org.springframework.test.web.reactive.server.MultiValueMap<java.lang.String,org.springframework.test.web.reactive.server.ResponseCookie> ( ) { return this . org.springframework.test.web.reactive.server.MultiValueMap<java.lang.String,org.springframework.test.web.reactive.server.ResponseCookie> ( ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { MonoProcessor < byte [] > org.springframework.test.web.reactive.server.MonoProcessor<byte[]> = this . org.springframework.test.web.reactive.server.WiretapClientHttpResponse . getRecordedContent ( ) ; Assert . state ( org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . isTerminated ( ) , STRING ) ; return org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . block ( java.time.Duration . java.time.Duration ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable ) { try { java.lang.Runnable . void ( ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { throw new java.lang.AssertionError ( java.lang.AssertionError . java.lang.String ( ) + STRING + this , java.lang.AssertionError ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + org.springframework.test.web.reactive.server.HttpMethod ( ) + STRING + java.net.URI ( ) + STRING + STRING + java.lang.String ( org.springframework.test.web.reactive.server.HttpHeaders ( ) , STRING ) + STRING + STRING + java.lang.String ( org.springframework.test.web.reactive.server.HttpHeaders ( ) . getContentType ( ) , this . org.springframework.test.web.reactive.server.WiretapClientHttpRequest . getRecordedContent ( ) ) + STRING + STRING + STRING + org.springframework.test.web.reactive.server.HttpStatus ( ) + STRING + java.lang.String ( ) + STRING + STRING + java.lang.String ( org.springframework.test.web.reactive.server.HttpHeaders ( ) , STRING ) + STRING + STRING + java.lang.String ( org.springframework.test.web.reactive.server.HttpHeaders ( ) . getContentType ( ) , this . org.springframework.test.web.reactive.server.WiretapClientHttpResponse . getRecordedContent ( ) ) + STRING ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = STRING ; if ( org.springframework.test.web.reactive.server.HttpStatus ( ) != null && org.springframework.test.web.reactive.server.HttpStatus ( ) . getReasonPhrase ( ) != null ) { java.lang.String = org.springframework.test.web.reactive.server.HttpStatus ( ) . getReasonPhrase ( ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( HttpHeaders org.springframework.test.web.reactive.server.HttpHeaders , java.lang.String java.lang.String ) { return org.springframework.test.web.reactive.server.HttpHeaders . entrySet ( ) . stream ( ) . map ( entry -> entry . getKey ( ) + STRING + entry . getValue ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.CharSequence,?,java.lang.String> ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MediaType org.springframework.test.web.reactive.server.MediaType , MonoProcessor < byte [] > org.springframework.test.web.reactive.server.MonoProcessor<byte[]> ) { if ( org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . isSuccess ( ) ) { byte [] byte[] = org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . block ( java.time.Duration . java.time.Duration ) ; if ( byte[] . int == NUMBER ) { return STRING ; } if ( org.springframework.test.web.reactive.server.MediaType == null ) { return STRING + byte[] . int + STRING ; } java.nio.charset.Charset java.nio.charset.Charset = org.springframework.test.web.reactive.server.MediaType . getCharset ( ) ; if ( java.nio.charset.Charset != null ) { return new java.lang.String ( byte[] , java.nio.charset.Charset ) ; } if ( java.util.List<org.springframework.test.web.reactive.server.MediaType> . stream ( ) . anyMatch ( org.springframework.test.web.reactive.server.MediaType :: isCompatibleWith ) ) { return new java.lang.String ( byte[] , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; } return STRING + byte[] . int + STRING ; } else if ( org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . isError ( ) ) { return STRING + org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . getError ( ) . getMessage ( ) ; } else { return STRING ; } }  <METHOD_END>
