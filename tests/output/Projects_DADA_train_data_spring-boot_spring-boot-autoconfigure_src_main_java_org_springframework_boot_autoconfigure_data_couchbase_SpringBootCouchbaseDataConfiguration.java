<METHOD_START> void ( ApplicationContext org.springframework.boot.autoconfigure.data.couchbase.ApplicationContext , CouchbaseDataProperties org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties , ObjectProvider < CouchbaseConfigurer > org.springframework.boot.autoconfigure.data.couchbase.ObjectProvider<org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer> ) { this . org.springframework.boot.autoconfigure.data.couchbase.ApplicationContext = org.springframework.boot.autoconfigure.data.couchbase.ApplicationContext ; this . org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties = org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties ; this . org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer = org.springframework.boot.autoconfigure.data.couchbase.ObjectProvider<org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer ( ) { return this . org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.data.couchbase.Consistency org.springframework.boot.autoconfigure.data.couchbase.Consistency ( ) { return this . org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties . getConsistency ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) java.lang.ClassNotFoundException { return new EntityScanner ( this . org.springframework.boot.autoconfigure.data.couchbase.ApplicationContext ) . scan ( Document .class , Persistent .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ConditionalOnMissingBean ( name = BeanNames . COUCHBASE_TEMPLATE ) @ Bean ( name = BeanNames . COUCHBASE_TEMPLATE ) public org.springframework.boot.autoconfigure.data.couchbase.CouchbaseTemplate org.springframework.boot.autoconfigure.data.couchbase.CouchbaseTemplate ( ) java.lang.Exception { return super. couchbaseTemplate ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ConditionalOnMissingBean ( name = BeanNames . COUCHBASE_CUSTOM_CONVERSIONS ) @ Bean ( name = BeanNames . COUCHBASE_CUSTOM_CONVERSIONS ) public org.springframework.boot.autoconfigure.data.couchbase.CustomConversions org.springframework.boot.autoconfigure.data.couchbase.CustomConversions ( ) { return super. customConversions ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ConditionalOnMissingBean ( name = BeanNames . COUCHBASE_INDEX_MANAGER ) @ Bean ( name = BeanNames . COUCHBASE_INDEX_MANAGER ) public org.springframework.boot.autoconfigure.data.couchbase.IndexManager org.springframework.boot.autoconfigure.data.couchbase.IndexManager ( ) { if ( this . org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties . isAutoIndex ( ) ) { return new IndexManager ( true , true , true ) ; } return new IndexManager ( false , false , false ) ; }  <METHOD_END>
