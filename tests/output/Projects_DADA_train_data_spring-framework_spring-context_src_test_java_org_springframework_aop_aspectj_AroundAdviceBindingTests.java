<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.aop.aspectj.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.AroundAdviceBindingTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.AroundAdviceBindingTests> ( ) ) ; org.springframework.aop.aspectj.AroundAdviceBindingTestAspect org.springframework.aop.aspectj.AroundAdviceBindingTestAspect = ( ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect ) org.springframework.aop.aspectj.ApplicationContext . getBean ( STRING ) ) ; ITestBean org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.ITestBean ) ) ; this . org.springframework.aop.aspectj.ITestBean = org.springframework.aop.aspectj.ITestBean ; this . org.springframework.aop.aspectj.TestBean = ( TestBean ) ( ( Advised ) org.springframework.aop.aspectj.ITestBean ) . getTargetSource ( ) . getTarget ( ) ; org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator = mock ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator .class ) ; org.springframework.aop.aspectj.AroundAdviceBindingTestAspect . void ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; verify ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator ) . oneIntArg ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . getAge ( ) ; verify ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator ) . oneObjectArg ( this . org.springframework.aop.aspectj.TestBean ) ; ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; verify ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator ) . oneIntAndOneObject ( NUMBER , this . org.springframework.aop.aspectj.ITestBean ) ; ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ITestBean . getAge ( ) ; verify ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator ) . justJoinPoint ( STRING ) ; ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator ) { this . org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator = org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator ; }  <METHOD_END>
<METHOD_START> public void void ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint , int int ) throws java.lang.Throwable { this . org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator . void ( int ) ; org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint , java.lang.Object java.lang.Object ) throws java.lang.Throwable { this . org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator . void ( java.lang.Object ) ; return ( ( java.lang.Integer ) org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ) . int ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint , int int , java.lang.Object java.lang.Object ) throws java.lang.Throwable { this . org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator . void ( int , java.lang.Object ) ; org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint ) throws java.lang.Throwable { this . org.springframework.aop.aspectj.AroundAdviceBindingTestAspect.AroundAdviceBindingCollaborator . void ( org.springframework.aop.aspectj.ProceedingJoinPoint . getSignature ( ) . getName ( ) ) ; return ( ( java.lang.Integer ) org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ) . int ( ) ; }  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( int int , java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
