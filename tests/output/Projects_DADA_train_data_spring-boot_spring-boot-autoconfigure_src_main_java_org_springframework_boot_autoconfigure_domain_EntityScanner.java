<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.domain.ApplicationContext ) { Assert . notNull ( org.springframework.boot.autoconfigure.domain.ApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.domain.ApplicationContext = org.springframework.boot.autoconfigure.domain.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] )			throws java.lang.ClassNotFoundException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( ) ; if ( java.util.List<java.lang.String> . boolean ( ) ) { return java.util.Collections .< java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) ; } java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> <> ( ) ; ClassPathScanningCandidateComponentProvider org.springframework.boot.autoconfigure.domain.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.boot.autoconfigure.domain.ClassPathScanningCandidateComponentProvider . setEnvironment ( this . org.springframework.boot.autoconfigure.domain.ApplicationContext . getEnvironment ( ) ) ; org.springframework.boot.autoconfigure.domain.ClassPathScanningCandidateComponentProvider . setResourceLoader ( this . org.springframework.boot.autoconfigure.domain.ApplicationContext ) ; for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { org.springframework.boot.autoconfigure.domain.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( java.lang.Class<> ) ) ; } for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( StringUtils . hasText ( java.lang.String ) ) { for ( BeanDefinition org.springframework.boot.autoconfigure.domain.BeanDefinition : org.springframework.boot.autoconfigure.domain.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ) { java.util.Set<java.lang.Class<?>> . boolean ( ClassUtils . forName ( org.springframework.boot.autoconfigure.domain.BeanDefinition . getBeanClassName ( ) , this . org.springframework.boot.autoconfigure.domain.ApplicationContext . getClassLoader ( ) ) ) ; } } } return java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = EntityScanPackages . get ( this . org.springframework.boot.autoconfigure.domain.ApplicationContext ) . getPackageNames ( ) ; if ( java.util.List<java.lang.String> . boolean ( ) && AutoConfigurationPackages . has ( this . org.springframework.boot.autoconfigure.domain.ApplicationContext ) ) { java.util.List<java.lang.String> = AutoConfigurationPackages . get ( this . org.springframework.boot.autoconfigure.domain.ApplicationContext ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
