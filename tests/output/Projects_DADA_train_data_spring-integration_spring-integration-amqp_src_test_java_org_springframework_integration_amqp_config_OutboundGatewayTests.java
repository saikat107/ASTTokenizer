<METHOD_START> @ After public void void ( ) { org.springframework.integration.amqp.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.integration.amqp.config.ClassPathXmlApplicationContext . getBeanFactory ( ) . containsBeanDefinition ( STRING ) ) ; org.springframework.integration.amqp.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.integration.amqp.config.ClassPathXmlApplicationContext . getBeanFactory ( ) . containsBeanDefinition ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotNull ( ReflectionTestUtils . getField ( ReflectionTestUtils . getField ( java.lang.Object , STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ApplicationContext org.springframework.integration.amqp.config.ApplicationContext = mock ( ApplicationContext .class ) ; doAnswer ( invocation -> invocation . getArguments ( ) [ NUMBER ] + STRING ) . when ( org.springframework.integration.amqp.config.ApplicationContext ) . getBean ( anyString ( ) ) ; when ( org.springframework.integration.amqp.config.ApplicationContext . containsBean ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME ) ) . thenReturn ( true ) ; when ( org.springframework.integration.amqp.config.ApplicationContext . getBean ( SpelPropertyAccessorRegistrar .class ) ) . thenThrow ( NoSuchBeanDefinitionException .class ) ; IntegrationEvaluationContextFactoryBean org.springframework.integration.amqp.config.IntegrationEvaluationContextFactoryBean = new IntegrationEvaluationContextFactoryBean ( ) ; org.springframework.integration.amqp.config.IntegrationEvaluationContextFactoryBean . setApplicationContext ( org.springframework.integration.amqp.config.ApplicationContext ) ; org.springframework.integration.amqp.config.IntegrationEvaluationContextFactoryBean . afterPropertiesSet ( ) ; StandardEvaluationContext org.springframework.integration.amqp.config.StandardEvaluationContext = org.springframework.integration.amqp.config.IntegrationEvaluationContextFactoryBean . getObject ( ) ; when ( org.springframework.integration.amqp.config.ApplicationContext . getBean ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , StandardEvaluationContext .class ) ) . thenReturn ( org.springframework.integration.amqp.config.StandardEvaluationContext ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = spy ( new RabbitTemplate ( ) ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = new AmqpOutboundEndpoint ( org.springframework.integration.amqp.config.RabbitTemplate ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . setRoutingKeyExpression ( org.springframework.integration.amqp.config.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . setExchangeNameExpression ( org.springframework.integration.amqp.config.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . setConfirmCorrelationExpressionString ( STRING ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . setBeanFactory ( org.springframework.integration.amqp.config.ApplicationContext ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , MessageProcessor .class ) . processMessage ( org.springframework.integration.amqp.config.Message<> ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , MessageProcessor .class ) . processMessage ( org.springframework.integration.amqp.config.Message<> ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , MessageProcessor .class ) . processMessage ( org.springframework.integration.amqp.config.Message<> ) ) ; }  <METHOD_END>
