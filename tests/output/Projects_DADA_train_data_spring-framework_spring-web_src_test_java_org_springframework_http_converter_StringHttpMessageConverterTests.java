<METHOD_START> @ Before public void void ( ) { this . org.springframework.http.converter.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; this . org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.StringHttpMessageConverter . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.StringHttpMessageConverter . canWrite ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) ; assertTrue ( this . org.springframework.http.converter.StringHttpMessageConverter . canWrite ( java.lang.String .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentType ( org.springframework.http.converter.MediaType ) ; java.lang.String java.lang.String = this . org.springframework.http.converter.StringHttpMessageConverter . read ( java.lang.String .class , org.springframework.http.converter.MockHttpInputMessage ) ; assertEquals ( STRING , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; this . org.springframework.http.converter.StringHttpMessageConverter . write ( java.lang.String , null , this . org.springframework.http.converter.MockHttpOutputMessage ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = this . org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) ; assertEquals ( java.lang.String , this . org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; assertEquals ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.HttpHeaders . getContentType ( ) ) ; assertEquals ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) . int , org.springframework.http.converter.HttpHeaders . getContentLength ( ) ) ; assertFalse ( org.springframework.http.converter.HttpHeaders . getAcceptCharset ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; this . org.springframework.http.converter.StringHttpMessageConverter . write ( java.lang.String , org.springframework.http.converter.MediaType , this . org.springframework.http.converter.MockHttpOutputMessage ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = this . org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) ; assertEquals ( java.lang.String , this . org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; assertEquals ( org.springframework.http.converter.MediaType , org.springframework.http.converter.HttpHeaders . getContentType ( ) ) ; assertEquals ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) . int , org.springframework.http.converter.HttpHeaders . getContentLength ( ) ) ; assertFalse ( org.springframework.http.converter.HttpHeaders . getAcceptCharset ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING , STRING ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = this . org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) ; org.springframework.http.converter.HttpHeaders . setContentType ( org.springframework.http.converter.MediaType ) ; this . org.springframework.http.converter.StringHttpMessageConverter . write ( java.lang.String , org.springframework.http.converter.MediaType , this . org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( java.lang.String , this . org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; assertEquals ( org.springframework.http.converter.MediaType , org.springframework.http.converter.HttpHeaders . getContentType ( ) ) ; assertEquals ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) . int , org.springframework.http.converter.HttpHeaders . getContentLength ( ) ) ; assertFalse ( org.springframework.http.converter.HttpHeaders . getAcceptCharset ( ) . isEmpty ( ) ) ; }  <METHOD_END>
