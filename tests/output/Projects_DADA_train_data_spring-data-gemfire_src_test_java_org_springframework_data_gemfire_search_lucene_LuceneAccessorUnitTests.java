<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneAccessor = spy ( new LuceneAccessorSupport ( ) { } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getCache ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getLuceneService ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getIndexName ( ) ) . isNullOrEmpty ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegion ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegionPath ( ) ) . isNullOrEmpty ( ) ; doReturn ( org.springframework.data.gemfire.search.lucene.GemFireCache ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveCache ( ) ; doReturn ( org.springframework.data.gemfire.search.lucene.LuceneService ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveRegionPath ( ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getCache ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getLuceneService ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getIndexName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegion ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegionPath ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . resolveCache ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . resolveLuceneService ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . resolveRegionPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( org.springframework.data.gemfire.search.lucene.LuceneService ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneService . createLuceneQueryFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . createLuceneQueryFactory ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { doReturn ( org.springframework.data.gemfire.search.lucene.LuceneService ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneService . createLuceneQueryFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setPageSize ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setProjectionFields ( anyVararg ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setResultLimit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . createLuceneQueryFactory ( STRING , STRING ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( LuceneAccessor . DEFAULT_RESULT_LIMIT ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneAccessor . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { doReturn ( org.springframework.data.gemfire.search.lucene.LuceneService ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneService . createLuceneQueryFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setPageSize ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setProjectionFields ( anyVararg ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setResultLimit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . createLuceneQueryFactory ( NUMBER , STRING , STRING ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneAccessor . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { doReturn ( org.springframework.data.gemfire.search.lucene.LuceneService ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneService . createLuceneQueryFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setPageSize ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setProjectionFields ( anyVararg ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setResultLimit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . createLuceneQueryFactory ( NUMBER , NUMBER , STRING , STRING ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneAccessor . setCache ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getCache ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveCache ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneAccessor . setLuceneService ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getLuceneService ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveLuceneService ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( org.springframework.data.gemfire.search.lucene.GemFireCache ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveCache ( ) ; doReturn ( org.springframework.data.gemfire.search.lucene.LuceneService ) . when ( org.springframework.data.gemfire.search.lucene.LuceneAccessor ) . resolveLuceneService ( eq ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getLuceneService ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveLuceneService ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . resolveCache ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . resolveLuceneService ( eq ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.search.lucene.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveLuceneService ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneAccessor . setIndexName ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getIndexName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveIndexName ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , never ( ) ) . getLuceneIndex ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneAccessor . setLuceneIndex ( org.springframework.data.gemfire.search.lucene.LuceneIndex ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneIndex . getName ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getIndexName ( ) ) . isNullOrEmpty ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveIndexName ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . getLuceneIndex ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneIndex , times ( NUMBER ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getIndexName ( ) ) . isNullOrEmpty ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getLuceneIndex ( ) ) . isNull ( ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveIndexName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneAccessor . setRegionPath ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegionPath ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveRegionPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.Region<,> . getFullPath ( ) ) . thenReturn ( STRING ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . setRegion ( org.springframework.data.gemfire.search.lucene.Region<,> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveRegionPath ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . getRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneAccessor , times ( NUMBER ) ) . getRegion ( ) ; verify ( org.springframework.data.gemfire.search.lucene.Region<,> , times ( NUMBER ) ) . getFullPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegion ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegionPath ( ) ) . isNullOrEmpty ( ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . resolveRegionPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { LuceneQueryExecutor < java.lang.String > org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> = mock ( LuceneQueryExecutor .class ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> . execute ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . doFind ( org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> , STRING , STRING , STRING ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> , times ( NUMBER ) ) . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { LuceneQueryExecutor < java.lang.String > org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> = mock ( LuceneQueryExecutor .class ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> . execute ( ) ) . thenThrow ( new LuceneQueryException ( STRING ) ) ; try { org.springframework.data.gemfire.search.lucene.ExpectedException . expect ( DataRetrievalFailureException .class ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectCause ( isA ( LuceneQueryException .class ) ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . doFind ( org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> , STRING , STRING , STRING ) ; } finally { verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryExecutor<java.lang.String> , times ( NUMBER ) ) . execute ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneAccessor . setCache ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . setIndexName ( STRING ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . setLuceneIndex ( org.springframework.data.gemfire.search.lucene.LuceneIndex ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . setLuceneService ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . setRegion ( org.springframework.data.gemfire.search.lucene.Region<,> ) ; org.springframework.data.gemfire.search.lucene.LuceneAccessor . setRegionPath ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getCache ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getIndexName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getLuceneIndex ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.LuceneIndex ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getLuceneService ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegion ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.Region<,> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneAccessor . getRegionPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
