<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , boolean boolean , java.lang.String java.lang.String ) { this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( JacksonAutoConfiguration .class , this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( T ( ) . getId ( ) ) . isEqualTo ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( T ( ) . isSensitive ( ) ) . isEqualTo ( this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext , this . java.lang.String + STRING ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( T ( ) . getId ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; PropertySource < ? > org.springframework.boot.actuate.endpoint.PropertySource<?> = new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( this . java.lang.String + STRING , java.lang.String . java.lang.String ( ! this . boolean ) ) ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.PropertySource<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( T ( ) . isSensitive ( ) ) . isEqualTo ( ! this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , this . boolean ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( this . java.lang.String + STRING , java.lang.String . java.lang.String ( ! this . boolean ) ) ; PropertySource < ? > org.springframework.boot.actuate.endpoint.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.PropertySource<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( T ( ) . isSensitive ( ) ) . isEqualTo ( ! this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( T ( ) . isEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; PropertySource < ? > org.springframework.boot.actuate.endpoint.PropertySource<?> = new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( this . java.lang.String + STRING , false ) ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.PropertySource<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( T ( ) . isEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; PropertySource < ? > org.springframework.boot.actuate.endpoint.PropertySource<?> = new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( this . java.lang.String + STRING , false ) ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.PropertySource<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; ( ( AbstractEndpoint ) T ( ) ) . setEnabled ( true ) ; assertThat ( T ( ) . isEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; PropertySource < ? > org.springframework.boot.actuate.endpoint.PropertySource<?> = new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , false ) ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.PropertySource<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( T ( ) . isEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , false ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( this . java.lang.String + STRING , true ) ; PropertySource < ? > org.springframework.boot.actuate.endpoint.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.PropertySource<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( T ( ) . isEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = T ( ) . invoke ( ) ; if ( java.lang.Object != null ) { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getBean ( ObjectMapper .class ) . writeValue ( java.lang.System . java.io.PrintStream , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; PropertySource < ? > org.springframework.boot.actuate.endpoint.PropertySource<?> = new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , boolean ) ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.boot.actuate.endpoint.PropertySource<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( this . java.lang.Class<> ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( T ( ) . isSensitive ( ) ) . isEqualTo ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected T T ( ) { return ( T ) this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getBean ( this . java.lang.Class<> ) ; }  <METHOD_END>
