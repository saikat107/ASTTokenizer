<METHOD_START> protected void ( ) { this( new SimpleCacheErrorHandler ( ) ); }  <METHOD_END>
<METHOD_START> protected void ( CacheErrorHandler org.springframework.cache.interceptor.CacheErrorHandler ) { Assert . notNull ( org.springframework.cache.interceptor.CacheErrorHandler , STRING ) ; this . org.springframework.cache.interceptor.CacheErrorHandler = org.springframework.cache.interceptor.CacheErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( CacheErrorHandler org.springframework.cache.interceptor.CacheErrorHandler ) { this . org.springframework.cache.interceptor.CacheErrorHandler = org.springframework.cache.interceptor.CacheErrorHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.interceptor.CacheErrorHandler org.springframework.cache.interceptor.CacheErrorHandler ( ) { return this . org.springframework.cache.interceptor.CacheErrorHandler ; }  <METHOD_END>
<METHOD_START> protected Cache . Cache.ValueWrapper Cache.ValueWrapper ( Cache org.springframework.cache.interceptor.Cache , java.lang.Object java.lang.Object ) { try { return org.springframework.cache.interceptor.Cache . get ( java.lang.Object ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.cache.interceptor.CacheErrorHandler ( ) . handleCacheGetError ( java.lang.RuntimeException , org.springframework.cache.interceptor.Cache , java.lang.Object ) ; return null ; } }  <METHOD_END>
<METHOD_START> protected void void ( Cache org.springframework.cache.interceptor.Cache , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { try { org.springframework.cache.interceptor.Cache . put ( java.lang.Object , java.lang.Object ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.cache.interceptor.CacheErrorHandler ( ) . handleCachePutError ( java.lang.RuntimeException , org.springframework.cache.interceptor.Cache , java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Cache org.springframework.cache.interceptor.Cache , java.lang.Object java.lang.Object ) { try { org.springframework.cache.interceptor.Cache . evict ( java.lang.Object ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.cache.interceptor.CacheErrorHandler ( ) . handleCacheEvictError ( java.lang.RuntimeException , org.springframework.cache.interceptor.Cache , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Cache org.springframework.cache.interceptor.Cache ) { try { org.springframework.cache.interceptor.Cache . clear ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.cache.interceptor.CacheErrorHandler ( ) . handleCacheClearError ( java.lang.RuntimeException , org.springframework.cache.interceptor.Cache ) ; } }  <METHOD_END>
