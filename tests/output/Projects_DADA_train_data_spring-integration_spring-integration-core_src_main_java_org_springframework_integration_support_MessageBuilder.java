<METHOD_START> private void ( T T , Message < T > org.springframework.integration.support.Message<T> ) { Assert . notNull ( T , STRING ) ; this . T = T ; this . org.springframework.integration.support.Message<T> = org.springframework.integration.support.Message<T> ; this . org.springframework.integration.support.IntegrationMessageHeaderAccessor = new IntegrationMessageHeaderAccessor ( org.springframework.integration.support.Message<T> ) ; if ( org.springframework.integration.support.Message<T> != null ) { this . boolean = ( ! this . T . boolean ( org.springframework.integration.support.Message<T> . getPayload ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { return this . T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . toMap ( ) ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( Message < T > org.springframework.integration.support.Message<T> ) { Assert . notNull ( org.springframework.integration.support.Message<T> , STRING ) ; return new org.springframework.integration.support.MessageBuilder<T> < T > ( org.springframework.integration.support.Message<T> . getPayload ( ) , org.springframework.integration.support.Message<T> ) ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( T T ) { return new org.springframework.integration.support.MessageBuilder<T> < T > ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . setHeader ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . setHeaderIfAbsent ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.String ... java.lang.String[] ) { this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . removeHeaders ( java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.String java.lang.String ) { this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . removeHeader ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . copyHeaders ( java.util.Map<java.lang.String,> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . copyHeadersIfAbsent ( java.util.Map<java.lang.String,> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override protected java.util.List<java.util.List<java.lang.Object>> < java.util.List<java.lang.Object> < java.lang.Object > > java.util.List<java.util.List<java.lang.Object>> ( ) { return ( java.util.List<java.util.List<java.lang.Object>> < java.util.List<java.lang.Object> < java.lang.Object > > ) this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . getHeader ( IntegrationMessageHeaderAccessor . SEQUENCE_DETAILS ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . getCorrelationId ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . getSequenceNumber ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . getSequenceSize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.Object java.lang.Object , int int , int int ) { super. pushSequenceDetails ( java.lang.Object , int , int ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( ) { super. popSequenceDetails ( ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.Long java.lang.Long ) { super. setExpirationDate ( java.lang.Long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.util.Date java.util.Date ) { super. setExpirationDate ( java.util.Date ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.Object java.lang.Object ) { super. setCorrelationId ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( MessageChannel org.springframework.integration.support.MessageChannel ) { super. setReplyChannel ( org.springframework.integration.support.MessageChannel ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.String java.lang.String ) { super. setReplyChannelName ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( MessageChannel org.springframework.integration.support.MessageChannel ) { super. setErrorChannel ( org.springframework.integration.support.MessageChannel ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.String java.lang.String ) { super. setErrorChannelName ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.Integer java.lang.Integer ) { super. setSequenceNumber ( java.lang.Integer ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.Integer java.lang.Integer ) { super. setSequenceSize ( java.lang.Integer ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.Integer java.lang.Integer ) { super. setPriority ( java.lang.Integer ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.support.MessageBuilder<T> < T > org.springframework.integration.support.MessageBuilder<T> ( java.lang.String ... java.lang.String[] ) { this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . setReadOnlyHeaders ( java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.support.Message<T> < T > org.springframework.integration.support.Message<T> ( ) { if ( ! this . boolean && ! this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . isModified ( ) && this . org.springframework.integration.support.Message<T> != null ) { return this . org.springframework.integration.support.Message<T> ; } if ( this . T instanceof java.lang.Throwable ) { return ( Message < T > ) new ErrorMessage ( ( java.lang.Throwable ) this . T , this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . toMap ( ) ) ; } return new GenericMessage < T > ( this . T , this . org.springframework.integration.support.IntegrationMessageHeaderAccessor . toMap ( ) ) ; }  <METHOD_END>
