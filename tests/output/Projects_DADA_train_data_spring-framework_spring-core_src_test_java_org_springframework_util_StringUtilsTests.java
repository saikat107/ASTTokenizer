<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( false , StringUtils . hasText ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( false , StringUtils . hasText ( null ) ) ; assertEquals ( false , StringUtils . hasText ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( true , StringUtils . hasText ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( StringUtils . containsWhitespace ( null ) ) ; assertFalse ( StringUtils . containsWhitespace ( STRING ) ) ; assertFalse ( StringUtils . containsWhitespace ( STRING ) ) ; assertFalse ( StringUtils . containsWhitespace ( STRING ) ) ; assertTrue ( StringUtils . containsWhitespace ( STRING ) ) ; assertTrue ( StringUtils . containsWhitespace ( STRING ) ) ; assertTrue ( StringUtils . containsWhitespace ( STRING ) ) ; assertTrue ( StringUtils . containsWhitespace ( STRING ) ) ; assertTrue ( StringUtils . containsWhitespace ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( null , StringUtils . trimWhitespace ( null ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimWhitespace ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimAllWhitespace ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( null , StringUtils . trimLeadingWhitespace ( null ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimLeadingWhitespace ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( null , StringUtils . trimTrailingWhitespace ( null ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; assertEquals ( STRING , StringUtils . trimTrailingWhitespace ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( null , StringUtils . trimLeadingCharacter ( null , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimLeadingCharacter ( STRING , ' ' ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( null , StringUtils . trimTrailingCharacter ( null , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; assertEquals ( STRING , StringUtils . trimTrailingCharacter ( STRING , ' ' ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , StringUtils . countOccurrencesOf ( null , null ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( STRING , null ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( null , STRING ) == NUMBER ) ; java.lang.String java.lang.String = STRING ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; assertTrue ( STRING , StringUtils . countOccurrencesOf ( java.lang.String , STRING ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = StringUtils . replace ( java.lang.String , java.lang.String , java.lang.String ) ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String = StringUtils . replace ( java.lang.String , STRING , java.lang.String ) ; assertTrue ( STRING , java.lang.String . boolean ( java.lang.String ) ) ; java.lang.String = StringUtils . replace ( java.lang.String , java.lang.String , null ) ; assertTrue ( STRING , java.lang.String . boolean ( java.lang.String ) ) ; java.lang.String = StringUtils . replace ( java.lang.String , null , java.lang.String ) ; assertTrue ( STRING , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = StringUtils . delete ( java.lang.String , STRING ) ; assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = StringUtils . delete ( java.lang.String , STRING ) ; assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = StringUtils . delete ( java.lang.String , STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = StringUtils . delete ( java.lang.String , STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = StringUtils . delete ( java.lang.String , STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( java.lang.String ) ) ; java.lang.String java.lang.String = StringUtils . delete ( java.lang.String , STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = StringUtils . deleteAny ( java.lang.String , STRING ) ; assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String = StringUtils . deleteAny ( java.lang.String , STRING ) ; assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = StringUtils . deleteAny ( java.lang.String , STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( java.lang.String ) ) ; java.lang.String java.lang.String = STRING ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = StringUtils . deleteAny ( java.lang.String , STRING ) ; assertTrue ( STRING , ! java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING , ! java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING , ! java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING , java.lang.String . int ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , StringUtils . quote ( STRING ) ) ; assertEquals ( STRING , StringUtils . quote ( STRING ) ) ; assertNull ( StringUtils . quote ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , StringUtils . quoteIfString ( STRING ) ) ; assertEquals ( STRING , StringUtils . quoteIfString ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , StringUtils . quoteIfString ( NUMBER ) ) ; assertNull ( StringUtils . quoteIfString ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertEquals ( STRING , StringUtils . unqualify ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertEquals ( STRING , StringUtils . capitalize ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertEquals ( STRING , StringUtils . uncapitalize ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , StringUtils . getFilename ( null ) ) ; assertEquals ( STRING , StringUtils . getFilename ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilename ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilename ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilename ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilename ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilename ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilename ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , StringUtils . getFilenameExtension ( null ) ) ; assertEquals ( null , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( null , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( null , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( null , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . getFilenameExtension ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , StringUtils . stripFilenameExtension ( null ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; assertEquals ( STRING , StringUtils . stripFilenameExtension ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; assertEquals ( STRING , StringUtils . cleanPath ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertTrue ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertFalse ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertFalse ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertFalse ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertFalse ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; assertFalse ( STRING , StringUtils . pathEquals ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; java.lang.String [] java.lang.String[] = StringUtils . concatenateStringArrays ( java.lang.String[] , java.lang.String[] ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertArrayEquals ( java.lang.String[] , StringUtils . concatenateStringArrays ( java.lang.String[] , null ) ) ; assertArrayEquals ( java.lang.String[] , StringUtils . concatenateStringArrays ( null , java.lang.String[] ) ) ; assertNull ( StringUtils . concatenateStringArrays ( null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; java.lang.String [] java.lang.String[] = StringUtils . mergeStringArrays ( java.lang.String[] , java.lang.String[] ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertArrayEquals ( java.lang.String[] , StringUtils . mergeStringArrays ( java.lang.String[] , null ) ) ; assertArrayEquals ( java.lang.String[] , StringUtils . mergeStringArrays ( null , java.lang.String[] ) ) ; assertNull ( StringUtils . mergeStringArrays ( null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.lang.String[] = StringUtils . addStringToArray ( java.lang.String[] , STRING ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; StringUtils . sortStringArray ( java.lang.String[] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; java.lang.String[] = StringUtils . removeDuplicateStrings ( java.lang.String[] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; java.util.Properties java.util.Properties = StringUtils . splitArrayElementsIntoProperties ( java.lang.String[] , STRING ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; java.util.Properties java.util.Properties = StringUtils . splitArrayElementsIntoProperties ( java.lang.String[] , STRING , STRING ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( STRING , STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertTrue ( STRING , java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( STRING , STRING , true , false ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertTrue ( STRING , java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( STRING , STRING , false , true ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertTrue ( STRING , java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( null ) ; assertTrue ( STRING , java.lang.String[] != null ) ; assertTrue ( STRING , java.lang.String[] . int == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( STRING ) ; assertTrue ( STRING , java.lang.String[] != null ) ; assertTrue ( STRING , java.lang.String[] . int == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( STRING , STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( STRING , STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( STRING , STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( STRING , null ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; void ( java.lang.String[] ) ; void ( java.lang.String[] ) ; java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; void ( java.lang.String[] ) ; void ( java.lang.String[] ) ; java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING , STRING , STRING } ; void ( java.lang.String[] ) ; void ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String [] java.lang.String[] ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; assertEquals ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; assertTrue ( STRING , java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , java.lang.String[] [ NUMBER ] . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING , STRING , STRING } ; void ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( STRING ) ; assertEquals ( STRING , NUMBER , java.lang.String[] . int ) ; assertTrue ( STRING , java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) && java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING , STRING } ; void ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String [] java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { if ( int != NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String[] [ int ] ) ; } java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.StringBuilder . java.lang.String ( ) ) ; assertTrue ( STRING , java.lang.String[] != null ) ; assertEquals ( STRING , java.lang.String[] . int , java.lang.String[] . int ) ; assertTrue ( STRING , java.util.Arrays . boolean ( java.lang.String[] , java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertTrue ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; assertFalse ( StringUtils . endsWithIgnoreCase ( null , java.lang.String ) ) ; assertFalse ( StringUtils . endsWithIgnoreCase ( STRING , null ) ) ; assertFalse ( StringUtils . endsWithIgnoreCase ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.util.Locale . java.lang.String ( ) ) ; assertNotNull ( STRING , java.util.Locale ) ; assertEquals ( java.util.Locale , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( STRING ) ; assertNotNull ( STRING , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( STRING ) ; assertNull ( STRING , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { StringUtils . parseLocaleString ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , StringUtils . parseLocaleString ( STRING ) . toString ( ) ) ; assertEquals ( STRING , StringUtils . parseLocaleString ( STRING ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; java.util.Locale java.util.Locale = StringUtils . parseLocaleString ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , StringUtils . parseLocaleString ( STRING ) . toString ( ) ) ; }  <METHOD_END>
