<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; this . org.springframework.beans.factory.config.ExpectedException . expect ( ScannerException .class ) ; this . org.springframework.beans.factory.config.ExpectedException . expectMessage ( STRING ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) , new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setDocumentMatchers ( new DocumentMatcher ( ) { @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; } } ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setMatchDefault ( true ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setDocumentMatchers ( new DocumentMatcher ( ) { @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { if ( ! java.util.Properties . boolean ( STRING ) ) { return MatchStatus . ABSTAIN ; } return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; } } ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { if ( ! java.util.Properties . boolean ( STRING ) ) { return MatchStatus . ABSTAIN ; } return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setMatchDefault ( false ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setDocumentMatchers ( new DocumentMatcher ( ) { @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { if ( ! java.util.Properties . boolean ( STRING ) ) { return MatchStatus . ABSTAIN ; } return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; } } ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { if ( ! java.util.Properties . boolean ( STRING ) ) { return MatchStatus . ABSTAIN ; } return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setMatchDefault ( true ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setDocumentMatchers ( new DocumentMatcher ( ) { @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { if ( ! java.util.Properties . boolean ( STRING ) ) { return MatchStatus . ABSTAIN ; } return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; } } ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.config.MatchStatus org.springframework.beans.factory.config.MatchStatus ( java.util.Properties java.util.Properties ) { if ( ! java.util.Properties . boolean ( STRING ) ) { return MatchStatus . ABSTAIN ; } return ( STRING . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ? MatchStatus . FOUND : MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResolutionMethod ( ResolutionMethod . OVERRIDE_AND_IGNORE ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ClassPathResource ( STRING ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . int ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.Object ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.Object ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { YamlPropertiesFactoryBean org.springframework.beans.factory.config.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; org.springframework.beans.factory.config.YamlPropertiesFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.config.YamlPropertiesFactoryBean . getObject ( ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , equalTo ( STRING ) ) ; assertThat ( java.util.Properties . java.lang.Object ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { Yaml org.springframework.beans.factory.config.Yaml = new Yaml ( ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.beans.factory.config.Yaml . loadAs ( STRING , java.util.Map .class ) ; assertThat ( java.util.Map<java.lang.String,> . get ( STRING ) , equalTo ( ( java.lang.Object ) STRING ) ) ; assertThat ( ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,> . get ( STRING ) ) . java.lang.Object ( STRING ) , equalTo ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
