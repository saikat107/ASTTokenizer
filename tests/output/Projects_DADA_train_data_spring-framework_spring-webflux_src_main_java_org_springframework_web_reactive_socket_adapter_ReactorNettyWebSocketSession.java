<METHOD_START> public void ( WebsocketInbound org.springframework.web.reactive.socket.adapter.WebsocketInbound , WebsocketOutbound org.springframework.web.reactive.socket.adapter.WebsocketOutbound , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , NettyDataBufferFactory org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ) { super( new org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.WebSocketConnection ( org.springframework.web.reactive.socket.adapter.WebsocketInbound , org.springframework.web.reactive.socket.adapter.WebsocketOutbound ) , org.springframework.web.reactive.socket.adapter.HandshakeInfo , org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ( ) { return getDelegate ( ) . getInbound ( ) . aggregateFrames ( DEFAULT_FRAME_MAX_SIZE ) . receiveFrames ( ) . map ( super:: toMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> ( Publisher < WebSocketMessage > org.springframework.web.reactive.socket.adapter.Publisher<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ) { Flux < WebSocketFrame > org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketFrame> = Flux . from ( org.springframework.web.reactive.socket.adapter.Publisher<org.springframework.web.reactive.socket.adapter.WebSocketMessage> ) . map ( this :: toFrame ) ; return getDelegate ( ) . getOutbound ( ) . options ( NettyPipeline . SendOptions :: flushOnEach ) . sendObject ( org.springframework.web.reactive.socket.adapter.Flux<org.springframework.web.reactive.socket.adapter.WebSocketFrame> ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> ( CloseStatus org.springframework.web.reactive.socket.adapter.CloseStatus ) { return Mono . error ( new java.lang.UnsupportedOperationException ( STRING + STRING + STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( WebsocketInbound org.springframework.web.reactive.socket.adapter.WebsocketInbound , WebsocketOutbound org.springframework.web.reactive.socket.adapter.WebsocketOutbound ) { this . org.springframework.web.reactive.socket.adapter.WebsocketInbound = org.springframework.web.reactive.socket.adapter.WebsocketInbound ; this . org.springframework.web.reactive.socket.adapter.WebsocketOutbound = org.springframework.web.reactive.socket.adapter.WebsocketOutbound ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.adapter.WebsocketInbound org.springframework.web.reactive.socket.adapter.WebsocketInbound ( ) { return this . org.springframework.web.reactive.socket.adapter.WebsocketInbound ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.adapter.WebsocketOutbound org.springframework.web.reactive.socket.adapter.WebsocketOutbound ( ) { return this . org.springframework.web.reactive.socket.adapter.WebsocketOutbound ; }  <METHOD_END>
