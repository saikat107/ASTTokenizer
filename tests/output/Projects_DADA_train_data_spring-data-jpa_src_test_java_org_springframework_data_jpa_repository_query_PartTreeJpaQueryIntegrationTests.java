<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.jpa.repository.query.PersistenceProvider = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.String .class , Pageable .class ) ; PartTreeJpaQuery org.springframework.data.jpa.repository.query.PartTreeJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] { STRING , PageRequest . of ( NUMBER , NUMBER ) } ) ; org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] { STRING , PageRequest . of ( NUMBER , NUMBER ) } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.query.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.jpa.repository.query.ExpectedException . expectMessage ( STRING ) ; void ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.String .class , Pageable .class ) ; PartTreeJpaQuery org.springframework.data.jpa.repository.query.PartTreeJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] { STRING , PageRequest . of ( NUMBER , NUMBER ) } ) ; assertThat ( HibernateUtils . getHibernateQuery ( java.lang.Object ( org.springframework.data.jpa.repository.query.Query , java.lang.String ) ) , endsWith ( STRING ) ) ; org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] { null , PageRequest . of ( NUMBER , NUMBER ) } ) ; assertThat ( HibernateUtils . getHibernateQuery ( java.lang.Object ( org.springframework.data.jpa.repository.query.Query , java.lang.String ) ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.String .class ) ; PartTreeJpaQuery org.springframework.data.jpa.repository.query.PartTreeJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] { STRING } ) ; assertThat ( org.springframework.data.jpa.repository.query.Query . getMaxResults ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.String .class ) ; PartTreeJpaQuery org.springframework.data.jpa.repository.query.PartTreeJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] { STRING } ) ; assertThat ( HibernateUtils . getHibernateQuery ( java.lang.Object ( org.springframework.data.jpa.repository.query.Query , java.lang.String ) ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING ) ; PartTreeJpaQuery org.springframework.data.jpa.repository.query.PartTreeJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] {} ) ; assertThat ( HibernateUtils . getHibernateQuery ( java.lang.Object ( org.springframework.data.jpa.repository.query.Query , java.lang.String ) ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING ) ; PartTreeJpaQuery org.springframework.data.jpa.repository.query.PartTreeJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( new java.lang.Object [] {} ) ; assertThat ( HibernateUtils . getHibernateQuery ( java.lang.Object ( org.springframework.data.jpa.repository.query.Query , java.lang.String ) ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING ) ; AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( new java.lang.Object [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class [ java.lang.Object[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Class<?>[] [ int ] = java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) ; } JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( java.lang.String , java.lang.Class<?>[] ) ; PartTreeJpaQuery org.springframework.data.jpa.repository.query.PartTreeJpaQuery = new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ) ; org.springframework.data.jpa.repository.query.PartTreeJpaQuery . createQuery ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.PartTreeJpaQueryIntegrationTests.UserRepository .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; return new JpaQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.jpa.repository.query.PartTreeJpaQueryIntegrationTests.UserRepository .class ) , new SpelAwareProxyProjectionFactory ( ) , PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < T > T T ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) . java.util.Iterator<java.lang.String> ( ) ; java.lang.Object java.lang.Object = java.lang.Object ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.Object = getField ( java.lang.Object , java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( ) { return boolean ( ) || boolean ( ) ? STRING : STRING ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ) { return Version . getVersionString ( ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ) { return Version . getVersionString ( ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.Page<org.springframework.data.jpa.repository.query.User> < User > org.springframework.data.jpa.repository.query.Page<org.springframework.data.jpa.repository.query.User> ( java.lang.String java.lang.String , Pageable org.springframework.data.jpa.repository.query.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.User org.springframework.data.jpa.repository.query.User ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.User org.springframework.data.jpa.repository.query.User ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( @ Temporal ( TemporalType . TIMESTAMP ) @ Param ( STRING ) java.util.Date java.util.Date );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( )  <METHOD_END>
