<METHOD_START> org.springframework.data.jpa.repository.query.AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , EvaluationContextProvider org.springframework.data.jpa.repository.query.EvaluationContextProvider ) { org.springframework.data.jpa.repository.query.Logger . debug ( STRING , org.springframework.data.jpa.repository.query.JpaQueryMethod . getName ( ) ) ; return org.springframework.data.jpa.repository.query.AbstractJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.JpaQueryMethod . getAnnotatedQuery ( ) , org.springframework.data.jpa.repository.query.EvaluationContextProvider ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , java.lang.String java.lang.String , EvaluationContextProvider org.springframework.data.jpa.repository.query.EvaluationContextProvider ) { if ( java.lang.String == null ) { return null ; } return org.springframework.data.jpa.repository.query.JpaQueryMethod . isNativeQuery ( ) ? new NativeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , java.lang.String , org.springframework.data.jpa.repository.query.EvaluationContextProvider , org.springframework.data.jpa.repository.query.SpelExpressionParser ) : new SimpleJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , java.lang.String , org.springframework.data.jpa.repository.query.EvaluationContextProvider , org.springframework.data.jpa.repository.query.SpelExpressionParser ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.StoredProcedureJpaQuery org.springframework.data.jpa.repository.query.StoredProcedureJpaQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { if ( ! org.springframework.data.jpa.repository.query.JpaQueryMethod . isProcedureQuery ( ) ) { return null ; } return new StoredProcedureJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
