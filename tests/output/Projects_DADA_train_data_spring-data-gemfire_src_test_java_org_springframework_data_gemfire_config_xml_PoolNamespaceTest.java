<METHOD_START> protected void void ( ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList , java.lang.String java.lang.String , int int ) { assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList . size ( ) ) . isEqualTo ( NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList . get ( NUMBER ) , java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConnectionEndpoint org.springframework.data.gemfire.config.xml.ConnectionEndpoint , java.lang.String java.lang.String , int int ) { assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpoint ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpoint . getHost ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpoint . getPort ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList . isEmpty ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; PoolFactoryBean org.springframework.data.gemfire.config.xml.PoolFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , PoolFactoryBean .class ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; void ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; PoolFactoryBean org.springframework.data.gemfire.config.xml.PoolFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , PoolFactoryBean .class ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; void ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList , PoolParser . DEFAULT_HOST , PoolParser . DEFAULT_SERVER_PORT ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; void ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; PoolFactoryBean org.springframework.data.gemfire.config.xml.PoolFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , PoolFactoryBean .class ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList . size ( ) ) . isEqualTo ( NUMBER ) ; java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> < ConnectionEndpoint > java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> = org.springframework.data.gemfire.config.xml.ConnectionEndpointList . iterator ( ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , PoolParser . DEFAULT_LOCATOR_PORT ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; void ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; PoolFactoryBean org.springframework.data.gemfire.config.xml.PoolFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , PoolFactoryBean .class ) ; Pool org.springframework.data.gemfire.config.xml.Pool = org.springframework.data.gemfire.config.xml.PoolFactoryBean . getPool ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool ) . isInstanceOf ( PoolAdapter .class ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getFreeConnectionTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getIdleTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getLoadConditioningInterval ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Boolean . java.lang.Boolean . boolean ( TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getMaxConnections ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getMinConnections ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getMultiuserAuthentication ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getPingInterval ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getPRSingleHopEnabled ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getReadTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getRetryAttempts ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getServerGroup ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getSocketBufferSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getStatisticInterval ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getSubscriptionAckInterval ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getSubscriptionEnabled ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getSubscriptionMessageTrackingTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getSubscriptionRedundancy ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.Pool . getThreadLocalConnections ( ) ) . isFalse ( ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList . size ( ) ) . isEqualTo ( NUMBER ) ; java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> < ConnectionEndpoint > java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> = org.springframework.data.gemfire.config.xml.ConnectionEndpointList . iterator ( ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; PoolFactoryBean org.springframework.data.gemfire.config.xml.PoolFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , PoolFactoryBean .class ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList . size ( ) ) . isEqualTo ( NUMBER ) ; java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> < ConnectionEndpoint > java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> = org.springframework.data.gemfire.config.xml.ConnectionEndpointList . iterator ( ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; PoolFactoryBean org.springframework.data.gemfire.config.xml.PoolFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , PoolFactoryBean .class ) ; ConnectionEndpointList org.springframework.data.gemfire.config.xml.ConnectionEndpointList = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.PoolFactoryBean ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConnectionEndpointList . size ( ) ) . isEqualTo ( NUMBER ) ; java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> < ConnectionEndpoint > java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> = org.springframework.data.gemfire.config.xml.ConnectionEndpointList . iterator ( ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; void ( java.util.Iterator<org.springframework.data.gemfire.config.xml.ConnectionEndpoint> . next ( ) , STRING , NUMBER ) ; }  <METHOD_END>
