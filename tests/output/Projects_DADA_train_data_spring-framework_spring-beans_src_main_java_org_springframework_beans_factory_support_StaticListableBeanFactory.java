<METHOD_START> public void ( ) { this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { java.lang.String java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { throw new NoSuchBeanDefinitionException ( java.lang.String , STRING + StringUtils . collectionToCommaDelimitedString ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) + STRING ) ; } if ( BeanFactoryUtils . isFactoryDereference ( java.lang.String ) && ! ( java.lang.Object instanceof FactoryBean ) ) { throw new BeanIsNotAFactoryException ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } if ( java.lang.Object instanceof FactoryBean && ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { try { return ( ( FactoryBean < ? > ) java.lang.Object ) . getObject ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanCreationException ( java.lang.String , STRING , java.lang.Exception ) ; } } else { return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; if ( java.lang.Class<T> != null && ! java.lang.Class<T> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { throw new BeanNotOfRequiredTypeException ( java.lang.String , java.lang.Class<T> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.Class<T> ) ; if ( java.lang.String[] . int == NUMBER ) { return T ( java.lang.String[] [ NUMBER ] , java.lang.Class<T> ) ; } else if ( java.lang.String[] . int > NUMBER ) { throw new NoUniqueBeanDefinitionException ( java.lang.Class<T> , java.lang.String[] ) ; } else { throw new NoSuchBeanDefinitionException ( java.lang.Class<T> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.beans.factory.support.BeansException { if ( java.lang.Object[] != null ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } return java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.beans.factory.support.BeansException { if ( java.lang.Object[] != null ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } return T ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; return ( java.lang.Object instanceof FactoryBean && ( ( FactoryBean < ? > ) java.lang.Object ) . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; return ( ( java.lang.Object instanceof SmartFactoryBean && ( ( SmartFactoryBean < ? > ) java.lang.Object ) . isPrototype ( ) ) || ( java.lang.Object instanceof FactoryBean && ! ( ( FactoryBean < ? > ) java.lang.Object ) . isSingleton ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , ResolvableType org.springframework.beans.factory.support.ResolvableType ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; return ( java.lang.Class<> != null && org.springframework.beans.factory.support.ResolvableType . isAssignableFrom ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; return ( java.lang.Class<> == null || ( java.lang.Class<> != null && java.lang.Class<> . boolean ( java.lang.Class<> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.String java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { throw new NoSuchBeanDefinitionException ( java.lang.String , STRING + StringUtils . collectionToCommaDelimitedString ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) + STRING ) ; } if ( java.lang.Object instanceof FactoryBean && ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { return ( ( FactoryBean < ? > ) java.lang.Object ) . getObjectType ( ) ; } return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return new java.lang.String [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return StringUtils . toStringArray ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ResolvableType org.springframework.beans.factory.support.ResolvableType ) { boolean boolean = false ; if ( org.springframework.beans.factory.support.ResolvableType != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.ResolvableType . resolve ( ) ; if ( java.lang.Class<> != null && FactoryBean .class . boolean ( java.lang.Class<> ) ) { boolean = true ; } } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof FactoryBean && ! boolean ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( FactoryBean < ? > ) java.lang.Object ) . getObjectType ( ) ; if ( java.lang.Class<> != null && ( org.springframework.beans.factory.support.ResolvableType == null || org.springframework.beans.factory.support.ResolvableType . isAssignableFrom ( java.lang.Class<> ) ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } else { if ( org.springframework.beans.factory.support.ResolvableType == null || org.springframework.beans.factory.support.ResolvableType . isInstance ( java.lang.Object ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } return StringUtils . toStringArray ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String[] ( ResolvableType . forClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean , boolean boolean ) { return java.lang.String[] ( ResolvableType . forClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { return java.util.Map<java.lang.String,T> ( java.lang.Class<T> , true , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> , boolean boolean , boolean boolean )			throws org.springframework.beans.factory.support.BeansException { boolean boolean = ( java.lang.Class<T> != null && FactoryBean .class . boolean ( java.lang.Class<T> ) ) ; java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> = new java.util.LinkedHashMap<java.lang.String,T> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof FactoryBean && ! boolean ) { FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = ( FactoryBean < ? > ) java.lang.Object ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.FactoryBean<> . getObjectType ( ) ; if ( ( boolean || org.springframework.beans.factory.support.FactoryBean<> . isSingleton ( ) ) && java.lang.Class<> != null && ( java.lang.Class<T> == null || java.lang.Class<T> . boolean ( java.lang.Class<> ) ) ) { java.util.Map<java.lang.String,T> . T ( java.lang.String , T ( java.lang.String , java.lang.Class<T> ) ) ; } } else { if ( java.lang.Class<T> == null || java.lang.Class<T> . boolean ( java.lang.Object ) ) { if ( boolean ) { java.lang.String = FACTORY_BEAN_PREFIX + java.lang.String ; } java.util.Map<java.lang.String,T> . T ( java.lang.String , ( T ) java.lang.Object ) ; } } } return java.util.Map<java.lang.String,T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( findAnnotationOnBean ( java.lang.String , java.lang.Class<> ) != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> )			throws org.springframework.beans.factory.support.BeansException { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( findAnnotationOnBean ( java.lang.String , java.lang.Class<> ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ( java.lang.String ) ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < A extends java.lang.annotation.Annotation > A A ( java.lang.String java.lang.String , java.lang.Class<A> < A > java.lang.Class<A> )			throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { return AnnotationUtils . findAnnotation ( java.lang.Class<?> ( java.lang.String ) , java.lang.Class<A> ) ; }  <METHOD_END>
