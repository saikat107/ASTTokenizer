<METHOD_START> public void ( ) { this( ClassUtils . getDefaultClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; this . java.lang.reflect.Method = ClassUtils . getMethodIfAvailable ( this . java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) , java.lang.String , java.lang.instrument.ClassFileTransformer .class ) ; if ( this . java.lang.reflect.Method == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.String ( ) + STRING + STRING ) ; } this . java.lang.reflect.Method = ClassUtils . getMethodIfAvailable ( this . java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) , java.lang.String ) ; if ( this . java.lang.reflect.Method == null ) { if ( org.springframework.instrument.classloading.Log . isInfoEnabled ( ) ) { org.springframework.instrument.classloading.Log . info ( STRING + java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.String ( ) + STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { Assert . notNull ( java.lang.instrument.ClassFileTransformer , STRING ) ; ReflectionUtils . invokeMethod ( this . java.lang.reflect.Method , this . java.lang.ClassLoader , java.lang.instrument.ClassFileTransformer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { if ( this . java.lang.reflect.Method != null ) { java.lang.ClassLoader java.lang.ClassLoader = ( java.lang.ClassLoader ) ReflectionUtils . invokeMethod ( this . java.lang.reflect.Method , this . java.lang.ClassLoader ) ; return ( java.lang.ClassLoader instanceof DecoratingClassLoader ? java.lang.ClassLoader : new OverridingClassLoader ( this . java.lang.ClassLoader , java.lang.ClassLoader ) ) ; } else { return new SimpleThrowawayClassLoader ( this . java.lang.ClassLoader ) ; } }  <METHOD_END>
