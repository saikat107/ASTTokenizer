<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gateway.SubscribableChannel . subscribe ( message -> { Assert . assertEquals ( STRING , message . getPayload ( ) ) ; Assert . assertEquals ( STRING , message . getHeaders ( ) . get ( STRING ) ) ; Assert . assertEquals ( STRING , message . getHeaders ( ) . get ( STRING ) ) ; } ) ; org.springframework.integration.gateway.SubscribableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gateway.SubscribableChannel . subscribe ( message -> { Assert . assertEquals ( STRING , message . getPayload ( ) ) ; Assert . assertEquals ( STRING , message . getHeaders ( ) . get ( STRING ) ) ; Assert . assertEquals ( STRING , message . getHeaders ( ) . get ( STRING ) ) ; } ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SimpleGateway . java.lang.String ( STRING ) ; Assert . assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SimpleGateway . java.lang.String ( STRING ) ; Assert . assertNotNull ( java.lang.String ) ; Assert . assertEquals ( STRING , java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { Assert . fail ( ) ; } try { org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SimpleGateway . java.lang.String ( STRING ) ; Assert . fail ( ) ; } catch ( org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SampleRuntimeException org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SampleRuntimeException ) { Assert . assertEquals ( STRING , org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SampleRuntimeException . java.lang.String ( ) ) ; } try { org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SimpleGateway . java.lang.String ( STRING ) ; Assert . fail ( ) ; } catch ( MessageHandlingException org.springframework.integration.gateway.MessageHandlingException ) { Assert . assertEquals ( STRING , org.springframework.integration.gateway.MessageHandlingException . getFailedMessage ( ) . getPayload ( ) ) ; } try { java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SimpleGateway . java.lang.String ( STRING ) ; Assert . assertNotNull ( java.lang.String ) ; Assert . assertEquals ( STRING , java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { Assert . fail ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SimpleGateway . java.lang.String ( STRING ) ; Assert . fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { Assert . assertEquals ( org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SampleRuntimeException .class , java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { java.lang.Object java.lang.Object = org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SimpleGateway . java.lang.String ( STRING ) ; Assert . assertEquals ( STRING , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { Assert . fail ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { MessageHandlingException org.springframework.integration.gateway.MessageHandlingException = ( MessageHandlingException ) java.lang.Throwable ; return MessageBuilder . withPayload ( STRING + org.springframework.integration.gateway.MessageHandlingException . getFailedMessage ( ) . getPayload ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { throw new org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SampleRuntimeException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { throw new MessageHandlingException ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { throw new org.springframework.integration.gateway.GatewayInvokingMessageHandlerTests.SampleRuntimeException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
