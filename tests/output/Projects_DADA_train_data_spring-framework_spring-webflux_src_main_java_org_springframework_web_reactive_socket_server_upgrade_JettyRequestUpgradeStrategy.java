<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! boolean ( ) && this . org.springframework.web.reactive.socket.server.upgrade.ServletContext != null ) { this . boolean = true ; try { this . org.springframework.web.reactive.socket.server.upgrade.WebSocketServerFactory = new WebSocketServerFactory ( this . org.springframework.web.reactive.socket.server.upgrade.ServletContext ) ; this . org.springframework.web.reactive.socket.server.upgrade.WebSocketServerFactory . setCreator ( ( request , response ) -> { WebSocketHandlerContainer container = adapterHolder . get ( ) ; String protocol = container . getProtocol ( ) . orElse ( null ) ; if ( protocol != null ) { response . setAcceptedSubProtocol ( protocol ) ; } return container . getAdapter ( ) ; } ) ; this . org.springframework.web.reactive.socket.server.upgrade.WebSocketServerFactory . start ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( boolean ( ) ) { this . boolean = false ; try { this . org.springframework.web.reactive.socket.server.upgrade.WebSocketServerFactory . stop ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , WebSocketHandler org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getRequest ( ) ; ServerHttpResponse org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getResponse ( ) ; HttpServletRequest org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest = org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest ) ; HttpServletResponse org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse = org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse ) ; JettyWebSocketHandlerAdapter org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter = new JettyWebSocketHandlerAdapter ( org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , session -> { HandshakeInfo info = getHandshakeInfo ( exchange , subProtocol ) ; DataBufferFactory factory = response . bufferFactory ( ) ; return new JettyWebSocketSession ( session , info , factory ) ; } ) ; void ( org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ) ; boolean boolean = this . org.springframework.web.reactive.socket.server.upgrade.WebSocketServerFactory . isUpgradeRequest ( org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest , org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse ) ; Assert . isTrue ( boolean , STRING ) ; try { java.lang.ThreadLocal<org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.WebSocketHandlerContainer> . void ( new org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.WebSocketHandlerContainer ( org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter , java.util.Optional<java.lang.String> ) ) ; this . org.springframework.web.reactive.socket.server.upgrade.WebSocketServerFactory . acceptWebSocket ( org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest , org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse ) ; } catch ( java.io.IOException java.io.IOException ) { return Mono . error ( java.io.IOException ) ; } finally { java.lang.ThreadLocal<org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.WebSocketHandlerContainer> . void ( ) ; } return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ( ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest ) { Assert . isInstanceOf ( ServletServerHttpRequest .class , org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest , STRING ) ; return ( ( ServletServerHttpRequest ) org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest ) . getServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse ( ServerHttpResponse org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse ) { Assert . isInstanceOf ( ServletServerHttpResponse .class , org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse , STRING ) ; return ( ( ServletServerHttpResponse ) org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse ) . getServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getRequest ( ) ; Mono < java.security.Principal > org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getPrincipal ( ) ; return new HandshakeInfo ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getURI ( ) , org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getHeaders ( ) , org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> , java.util.Optional<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ) { if ( this . org.springframework.web.reactive.socket.server.upgrade.ServletContext != null ) { return; } synchronized ( this . java.lang.Object ) { if ( this . org.springframework.web.reactive.socket.server.upgrade.ServletContext == null ) { this . org.springframework.web.reactive.socket.server.upgrade.ServletContext = org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest . getServletContext ( ) ; void ( ) ; } } }  <METHOD_END>
<METHOD_START> public void ( JettyWebSocketHandlerAdapter org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { this . org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter = org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter ; this . java.util.Optional<java.lang.String> = java.util.Optional<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter ( ) { return this . org.springframework.web.reactive.socket.server.upgrade.JettyWebSocketHandlerAdapter ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return this . java.util.Optional<java.lang.String> ; }  <METHOD_END>
