<METHOD_START> @ java.lang.Override public void void ( StateMachineModel < S , E > org.springframework.statemachine.config.model.verifier.StateMachineModel<S,E> ) { if ( org.springframework.statemachine.config.model.verifier.StateMachineModel<S,E> . getTransitionsData ( ) . getTransitions ( ) . isEmpty ( ) ) { MalformedConfigurationException org.springframework.statemachine.config.model.verifier.MalformedConfigurationException = new MalformedConfigurationException ( STRING ) ; throw org.springframework.statemachine.config.model.verifier.MalformedConfigurationException ; } java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> < Node < StateData < S , E > > > java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> = java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> ( org.springframework.statemachine.config.model.verifier.StateMachineModel<S,E> . getStatesData ( ) ) ; while ( java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> . hasNext ( ) ) { Node < StateData < S , E > > org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> = java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> . next ( ) ; if ( org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getData ( ) == null ) { boolean boolean = false ; for ( Node < StateData < S , E > > org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> : org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getChildren ( ) ) { StateData < S , E > org.springframework.statemachine.config.model.verifier.StateData<S,E> = org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getData ( ) ; if ( org.springframework.statemachine.config.model.verifier.StateData<S,E> . isInitial ( ) ) { boolean = true ; } } if ( ! boolean ) { MalformedConfigurationException org.springframework.statemachine.config.model.verifier.MalformedConfigurationException = new MalformedConfigurationException ( STRING ) ; for ( Node < StateData < S , E > > org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> : org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getChildren ( ) ) { org.springframework.statemachine.config.model.verifier.MalformedConfigurationException . addTrace ( org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getData ( ) . toString ( ) ) ; } throw org.springframework.statemachine.config.model.verifier.MalformedConfigurationException ; } } } }  <METHOD_END>
<METHOD_START> private java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> < Node < StateData < S , E > > > java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> ( StatesData < S , E > org.springframework.statemachine.config.model.verifier.StatesData<S,E> ) { Tree < StateData < S , E > > org.springframework.statemachine.config.model.verifier.Tree<org.springframework.statemachine.config.model.verifier.StateData<S,E>> = new Tree < StateData < S , E > > ( ) ; for ( StateData < S , E > org.springframework.statemachine.config.model.verifier.StateData<S,E> : org.springframework.statemachine.config.model.verifier.StatesData<S,E> . getStateData ( ) ) { java.lang.Object java.lang.Object = org.springframework.statemachine.config.model.verifier.StateData<S,E> . getState ( ) ; java.lang.Object java.lang.Object = org.springframework.statemachine.config.model.verifier.StateData<S,E> . getParent ( ) ; org.springframework.statemachine.config.model.verifier.Tree<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . add ( org.springframework.statemachine.config.model.verifier.StateData<S,E> , java.lang.Object , java.lang.Object ) ; } TreeTraverser < Node < StateData < S , E > > > org.springframework.statemachine.config.model.verifier.TreeTraverser<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> = new TreeTraverser < Node < StateData < S , E > > > ( ) { @ java.lang.Override public java.lang.Iterable<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> < Node < StateData < S , E > > > java.lang.Iterable<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> ( Node < StateData < S , E > > org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> ) { return org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getChildren ( ) ; } } ; java.lang.Iterable<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> < Node < StateData < S , E > > > java.lang.Iterable<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> = org.springframework.statemachine.config.model.verifier.TreeTraverser<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> . postOrderTraversal ( org.springframework.statemachine.config.model.verifier.Tree<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getRoot ( ) ) ; java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> < Node < StateData < S , E > > > java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> = java.lang.Iterable<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> . iterator ( ) ; return java.util.Iterator<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> < Node < StateData < S , E > > > java.lang.Iterable<org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>>> ( Node < StateData < S , E > > org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> ) { return org.springframework.statemachine.config.model.verifier.Node<org.springframework.statemachine.config.model.verifier.StateData<S,E>> . getChildren ( ) ; }  <METHOD_END>
