<METHOD_START> @ After public void void ( ) { java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.Set<java.lang.String> ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( STRING , STRING ) ; assertThat ( java.util.Set<java.lang.String> ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertThat ( java.util.Set<java.lang.String> ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( STRING , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertThat ( java.util.Set<java.lang.String> ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplication .class . java.lang.String ( ) ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ NUMBER ] ; java.lang.String [] java.lang.String[] = new java.lang.String [ NUMBER ] ; new SpringApplicationLauncher ( java.lang.Class<? extends org.springframework.boot.cli.app.SpringApplicationLauncherTests> ( ) . java.lang.ClassLoader ( ) ) . launch ( java.lang.Object[] , java.lang.String[] ) ; assertThat ( java.lang.Object[] == org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplication . java.lang.Object[] ) . isTrue ( ) ; assertThat ( java.lang.String[] == org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplication . java.lang.String[] ) . isTrue ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplication . java.util.Map<java.lang.String,java.lang.String> ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . hasSize ( NUMBER ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestClassLoader org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestClassLoader = new org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestClassLoader ( java.lang.Class<? extends org.springframework.boot.cli.app.SpringApplicationLauncherTests> ( ) . java.lang.ClassLoader ( ) ) ; try { new org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplicationLauncher ( org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestClassLoader ) . launch ( new java.lang.Object [ NUMBER ] , new java.lang.String [ NUMBER ] ) ; } catch ( java.lang.Exception java.lang.Exception ) { } return org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestClassLoader . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , boolean boolean )				throws java.lang.ClassNotFoundException { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; return super. java.lang.Class<?> ( java.lang.String , boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; return super. java.lang.Class<?> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object [] java.lang.Object[] ) { org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplication . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplication . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { org.springframework.boot.cli.app.SpringApplicationLauncherTests.TestSpringApplication . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.springframework.boot.cli.app.SpringApplicationLauncherTests .this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { java.lang.String = super. getEnvironmentVariable ( java.lang.String ) ; } return java.lang.String ; }  <METHOD_END>
