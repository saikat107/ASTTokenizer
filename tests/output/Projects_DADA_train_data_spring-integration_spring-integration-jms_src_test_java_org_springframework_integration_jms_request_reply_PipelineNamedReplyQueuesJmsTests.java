<METHOD_START> @ Before public void void ( ) { LogManager . getLogger ( java.lang.Class<? extends org.springframework.integration.jms.request_reply.PipelineNamedReplyQueuesJmsTests> ( ) ) . setLevel ( Level . INFO ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . int ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . int ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = this . int ( STRING ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . int ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = this . int ( STRING , NUMBER ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = this . int ( STRING , NUMBER ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . int ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . int ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . int ( STRING ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) throws java.lang.Exception { return int ( java.lang.String , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String , final int int ) throws java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.PipelineNamedReplyQueuesJmsTests> ( ) ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; try { final RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; for ( int int = NUMBER ; int < NUMBER + int * NUMBER ; int += NUMBER ) { final int int = int ; java.util.concurrent.Executor . void ( ( ) { try { assertEquals ( int + int , org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.Integer > ( int ) ) . getPayload ( ) ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } catch ( MessageTimeoutException org.springframework.integration.jms.request_reply.MessageTimeoutException ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.integration.jms.request_reply.Log . error ( STRING , java.lang.Throwable ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( int , java.util.concurrent.atomic.AtomicInteger . int ( ) + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; return java.util.concurrent.atomic.AtomicInteger . int ( ) ; } finally { org.springframework.integration.jms.request_reply.Log . info ( STRING + java.lang.String ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; if ( java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER && org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . containsBean ( STRING ) ) { org.springframework.integration.jms.request_reply.Log . info ( org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( org.springframework.integration.jms.request_reply.PipelineNamedReplyQueuesJmsTests.Capture .class ) . messages ) ; } org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.jms.request_reply.Message<?> < ? > org.springframework.integration.jms.request_reply.Message<?> ( Message < ? > org.springframework.integration.jms.request_reply.Message<?> ) { java.util.concurrent.BlockingQueue<java.lang.String> . boolean ( STRING + java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) + STRING + org.springframework.integration.jms.request_reply.Message<> ) ; return org.springframework.integration.jms.request_reply.Message<> ; }  <METHOD_END>
