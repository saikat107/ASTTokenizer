<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.expression.spel.ExpressionWithConversionTests . org.springframework.expression.spel.TypeDescriptor = new TypeDescriptor ( org.springframework.expression.spel.ExpressionWithConversionTests .class . java.lang.reflect.Field ( STRING ) ) ; org.springframework.expression.spel.ExpressionWithConversionTests . org.springframework.expression.spel.TypeDescriptor = new TypeDescriptor ( org.springframework.expression.spel.ExpressionWithConversionTests .class . java.lang.reflect.Field ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.ExpressionWithConversionTests.TypeConvertorUsingConversionService org.springframework.expression.spel.ExpressionWithConversionTests.TypeConvertorUsingConversionService = new org.springframework.expression.spel.ExpressionWithConversionTests.TypeConvertorUsingConversionService ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ; assertEquals ( java.lang.String .class , java.lang.Class<> ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.expression.spel.ExpressionWithConversionTests.TypeConvertorUsingConversionService . java.lang.Object ( java.util.List<java.lang.Integer> , TypeDescriptor . forObject ( java.util.List<java.lang.Integer> ) , org.springframework.expression.spel.TypeDescriptor ) ; assertNotNull ( java.util.List<> ) ; java.lang.Class<?> = org.springframework.expression.spel.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ; assertEquals ( java.lang.Integer .class , java.lang.Class<> ) ; java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.expression.spel.ExpressionWithConversionTests.TypeConvertorUsingConversionService . java.lang.Object ( java.util.List<java.lang.String> , TypeDescriptor . forObject ( java.util.List<java.lang.String> ) , org.springframework.expression.spel.TypeDescriptor ) ; assertNotNull ( java.util.List<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) . intValue ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setTypeConverter ( new org.springframework.expression.spel.ExpressionWithConversionTests.TypeConvertorUsingConversionService ( ) ) ; parser . parseExpression ( STRING ) . setValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.List<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) . intValue ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Class .class ) ; assertEquals ( java.lang.Integer .class , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class TestTarget { @ java.lang.SuppressWarnings ( STRING ) public int int ( java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ) { int int = NUMBER ; for ( int int : java.util.Collection<java.lang.Integer> ) { int += int ; } return int ; } } StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; TypeDescriptor org.springframework.expression.spel.TypeDescriptor = new TypeDescriptor ( new MethodParameter ( TestTarget .class . java.lang.reflect.Method ( STRING , java.util.Collection .class ) , NUMBER ) ) ; assertTrue ( org.springframework.expression.spel.StandardEvaluationContext . getTypeConverter ( ) . canConvert ( TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.expression.spel.TypeDescriptor ) ) ; assertEquals ( STRING , org.springframework.expression.spel.StandardEvaluationContext . getTypeConverter ( ) . convertValue ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.expression.spel.TypeDescriptor ) . toString ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new TestTarget ( ) ) ; int int = ( java.lang.Integer ) parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertEquals ( STRING + int , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public int int ( java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ) { int int = NUMBER ; for ( int int : java.util.Collection<java.lang.Integer> ) { int += int ; } return int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.ExpressionWithConversionTests.Foo org.springframework.expression.spel.ExpressionWithConversionTests.Foo = new org.springframework.expression.spel.ExpressionWithConversionTests.Foo ( STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.ExpressionWithConversionTests.Foo ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Collection<java.lang.String> ) ; org.springframework.expression.spel.ExpressionWithConversionTests.Foo org.springframework.expression.spel.ExpressionWithConversionTests.Foo = org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . java.util.Iterator<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . org.springframework.expression.spel.ExpressionWithConversionTests.Foo ( ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , java.util.Collection<java.lang.String> ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; org.springframework.expression.spel.ExpressionWithConversionTests.Foo = org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . java.util.Iterator<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . org.springframework.expression.spel.ExpressionWithConversionTests.Foo ( ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; org.springframework.expression.spel.ExpressionWithConversionTests.Foo = org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . java.util.Iterator<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . org.springframework.expression.spel.ExpressionWithConversionTests.Foo ( ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; org.springframework.expression.spel.ExpressionWithConversionTests.Foo = org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . java.util.Iterator<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) . org.springframework.expression.spel.ExpressionWithConversionTests.Foo ( ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionWithConversionTests.Foo . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.expression.spel.TypeDescriptor , TypeDescriptor org.springframework.expression.spel.TypeDescriptor ) { return this . org.springframework.expression.spel.ConversionService . canConvert ( org.springframework.expression.spel.TypeDescriptor , org.springframework.expression.spel.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.expression.spel.TypeDescriptor , TypeDescriptor org.springframework.expression.spel.TypeDescriptor ) throws org.springframework.expression.spel.EvaluationException { return this . org.springframework.expression.spel.ConversionService . convert ( java.lang.Object , org.springframework.expression.spel.TypeDescriptor , org.springframework.expression.spel.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> < org.springframework.expression.spel.ExpressionWithConversionTests.Foo > java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ) { this . java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> = java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> < org.springframework.expression.spel.ExpressionWithConversionTests.Foo > java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ( ) { return this . java.util.Collection<org.springframework.expression.spel.ExpressionWithConversionTests.Foo> ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<?> < ? > java.util.Collection<?> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; }  <METHOD_END>
