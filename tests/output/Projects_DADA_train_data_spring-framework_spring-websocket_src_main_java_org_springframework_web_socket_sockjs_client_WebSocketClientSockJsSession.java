<METHOD_START> public void ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { super( org.springframework.web.socket.sockjs.client.TransportRequest , org.springframework.web.socket.sockjs.client.WebSocketHandler , org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.web.socket.sockjs.client.WebSocketSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { if ( java.lang.Class<T> != null ) { if ( java.lang.Class<T> . boolean ( this . org.springframework.web.socket.sockjs.client.WebSocketSession ) ) { return ( T ) this . org.springframework.web.socket.sockjs.client.WebSocketSession ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.client.WebSocketSession . getLocalAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.client.WebSocketSession . getRemoteAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.client.WebSocketSession . getAcceptedProtocol ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { void ( ) ; this . org.springframework.web.socket.sockjs.client.WebSocketSession . setTextMessageSizeLimit ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.client.WebSocketSession . getTextMessageSizeLimit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { void ( ) ; this . org.springframework.web.socket.sockjs.client.WebSocketSession . setBinaryMessageSizeLimit ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.client.WebSocketSession . getBinaryMessageSizeLimit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.sockjs.client.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.sockjs.client.WebSocketExtension> ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.client.WebSocketSession . getExtensions ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Assert . state ( this . org.springframework.web.socket.sockjs.client.WebSocketSession != null , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession ) { this . org.springframework.web.socket.sockjs.client.WebSocketSession = org.springframework.web.socket.sockjs.client.WebSocketSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) throws java.io.IOException { this . org.springframework.web.socket.sockjs.client.WebSocketSession . sendMessage ( org.springframework.web.socket.sockjs.client.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) throws java.io.IOException { if ( this . org.springframework.web.socket.sockjs.client.WebSocketSession != null ) { this . org.springframework.web.socket.sockjs.client.WebSocketSession . close ( org.springframework.web.socket.sockjs.client.CloseStatus ) ; } }  <METHOD_END>
