<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader == null ? ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.mongodb.repository.BeanFactory ) throws org.springframework.data.mongodb.repository.BeansException { this . org.springframework.data.mongodb.repository.BeanFactory = org.springframework.data.mongodb.repository.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory = new ReactiveMongoRepositoryFactory ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setRepositoryBaseClass ( SimpleReactiveMongoRepository .class ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setBeanClassLoader ( java.lang.ClassLoader ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setBeanFactory ( org.springframework.data.mongodb.repository.BeanFactory ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . setEvaluationContextProvider ( DefaultEvaluationContextProvider . INSTANCE ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository = org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . getRepository ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository .class ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactiveCappedCollectionRepository = org.springframework.data.mongodb.repository.ReactiveMongoRepositoryFactory . getRepository ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactiveCappedCollectionRepository .class ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setSkills ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setSkills ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.Person = new Person ( STRING , STRING , NUMBER , Sex . FEMALE ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( org.springframework.data.mongodb.repository.Person . getLastname ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Mono<org.springframework.data.mongodb.repository.Person> ( org.springframework.data.mongodb.repository.Person . getLastname ( ) ) ) . expectNext ( org.springframework.data.mongodb.repository.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Mono . just ( org.springframework.data.mongodb.repository.Person . getLastname ( ) ) ) ) . expectNext ( org.springframework.data.mongodb.repository.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Flux . just ( org.springframework.data.mongodb.repository.Person . getLastname ( ) , org.springframework.data.mongodb.repository.Person . getLastname ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Flux . just ( org.springframework.data.mongodb.repository.Person . getLastname ( ) , org.springframework.data.mongodb.repository.Person . getLastname ( ) ) , NUMBER ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Flux . just ( STRING , STRING ) , Mono . just ( NUMBER ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( STRING , Sort . by ( ASC , STRING ) ) ) . expectNext ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( STRING , Sort . by ( DESC , STRING ) ) ) . expectNext ( org.springframework.data.mongodb.repository.Person , org.springframework.data.mongodb.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . dropCollection ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped .class ) . then ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . createCollection ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped .class , new CollectionOptions ( NUMBER , NUMBER , true ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . insert ( new org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped ( STRING , java.lang.Math . double ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> < org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped > java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> = new java.util.concurrent.LinkedBlockingDeque<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> <> ( NUMBER ) ; Disposable org.springframework.data.mongodb.repository.Disposable = org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactiveCappedCollectionRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> ( STRING ) . doOnNext ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> :: boolean ) . subscribe ( ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> . org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( notNullValue ( ) ) ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . insert ( new org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped ( STRING , java.lang.Math . double ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> . org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( notNullValue ( ) ) ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> . boolean ( ) , is ( true ) ) ; org.springframework.data.mongodb.repository.Disposable . dispose ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . dropCollection ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped .class ) . then ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . createCollection ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped .class , new CollectionOptions ( NUMBER , NUMBER , true ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . insert ( new org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped ( STRING , java.lang.Math . double ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> < org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection > java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> = new java.util.concurrent.LinkedBlockingDeque<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> <> ( NUMBER ) ; Disposable org.springframework.data.mongodb.repository.Disposable = org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactiveCappedCollectionRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> ( STRING ) . doOnNext ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> :: boolean ) . subscribe ( ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection = java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> . org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection . double ( ) , is ( not ( NUMBER ) ) ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoTemplate . insert ( new org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped ( STRING , java.lang.Math . double ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection = java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> . org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection . double ( ) , is ( not ( NUMBER ) ) ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> . boolean ( ) , is ( true ) ) ; org.springframework.data.mongodb.repository.Disposable . dispose ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( new Circle ( - NUMBER , NUMBER , NUMBER ) ) ) . expectNext ( org.springframework.data.mongodb.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( new Circle ( - NUMBER , NUMBER , NUMBER ) , PageRequest . of ( NUMBER , NUMBER ) ) ) . expectNext ( org.springframework.data.mongodb.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.GeoResult<org.springframework.data.mongodb.repository.Person>> ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ) . consumeNextWith ( actual -> { assertThat ( actual . getDistance ( ) . getValue ( ) , is ( closeTo ( NUMBER , NUMBER ) ) ) ; assertThat ( actual . getContent ( ) , is ( equalTo ( dave ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.GeoResult<org.springframework.data.mongodb.repository.Person>> ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) , PageRequest . of ( NUMBER , NUMBER ) ) ) . consumeNextWith ( actual -> { assertThat ( actual . getDistance ( ) . getValue ( ) , is ( closeTo ( NUMBER , NUMBER ) ) ) ; assertThat ( actual . getContent ( ) , is ( equalTo ( dave ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.Point = new Point ( - NUMBER , NUMBER ) ; org.springframework.data.mongodb.repository.Person . setLocation ( org.springframework.data.mongodb.repository.Point ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.ReactivePersonRepository . org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( new Point ( - NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ) . expectNext ( org.springframework.data.mongodb.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Mono<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Mono<org.springframework.data.mongodb.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Mono<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Mono<org.springframework.data.mongodb.repository.Person> ( Publisher < java.lang.String > org.springframework.data.mongodb.repository.Publisher<java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Publisher < java.lang.String > org.springframework.data.mongodb.repository.Publisher<java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( java.lang.String java.lang.String , Sort org.springframework.data.mongodb.repository.Sort );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Flux < java.lang.String > org.springframework.data.mongodb.repository.Flux<java.lang.String> , int int );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Flux < java.lang.String > org.springframework.data.mongodb.repository.Flux<java.lang.String> , Mono < java.lang.Integer > org.springframework.data.mongodb.repository.Mono<java.lang.Integer> );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Circle org.springframework.data.mongodb.repository.Circle );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Circle org.springframework.data.mongodb.repository.Circle , Pageable org.springframework.data.mongodb.repository.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.GeoResult<org.springframework.data.mongodb.repository.Person>> < GeoResult < Person > > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.GeoResult<org.springframework.data.mongodb.repository.Person>> ( Point org.springframework.data.mongodb.repository.Point , Distance org.springframework.data.mongodb.repository.Distance );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.GeoResult<org.springframework.data.mongodb.repository.Person>> < GeoResult < Person > > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.GeoResult<org.springframework.data.mongodb.repository.Person>> ( Point org.springframework.data.mongodb.repository.Point , Distance org.springframework.data.mongodb.repository.Distance , Pageable org.springframework.data.mongodb.repository.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> < Person > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.Person> ( Point org.springframework.data.mongodb.repository.Point , Distance org.springframework.data.mongodb.repository.Distance );  <METHOD_END>
<METHOD_START> @ InfiniteStream org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> < org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.Capped> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ InfiniteStream org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> < org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection > org.springframework.data.mongodb.repository.Flux<org.springframework.data.mongodb.repository.ReactiveMongoRepositoryTests.CappedProjection> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , double double ) { this . java.lang.String = java.lang.String ; this . double = double ; }  <METHOD_END>
<METHOD_START> double double ( )  <METHOD_END>
