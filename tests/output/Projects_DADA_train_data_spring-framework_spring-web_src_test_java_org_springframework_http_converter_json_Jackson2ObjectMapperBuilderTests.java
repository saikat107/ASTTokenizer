<METHOD_START> @ Test public void void ( ) { Jackson2ObjectMapperBuilder . json ( ) . serializers ( ( org.springframework.http.converter.json.JsonSerializer<?> < ? > [] ) null ) . serializersByType ( null ) . deserializersByType ( null ) . featuresToEnable ( ( java.lang.Object [] ) null ) . featuresToDisable ( ( java.lang.Object [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = FatalBeanException .class ) public void void ( ) { Jackson2ObjectMapperBuilder . json ( ) . featuresToEnable ( java.lang.Boolean . java.lang.Boolean ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_FIELDS ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_IS_GETTERS ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_SETTERS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . FAIL_ON_EMPTY_BEANS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . autoDetectFields ( false ) . defaultViewInclusion ( true ) . failOnUnknownProperties ( true ) . failOnEmptyBeans ( false ) . autoDetectGettersSetters ( false ) . indentOutput ( true ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_FIELDS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_IS_GETTERS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_SETTERS ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . FAIL_ON_EMPTY_BEANS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . featuresToEnable ( MapperFeature . DEFAULT_VIEW_INCLUSION , DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES , SerializationFeature . INDENT_OUTPUT ) . featuresToDisable ( MapperFeature . AUTO_DETECT_FIELDS , MapperFeature . AUTO_DETECT_GETTERS , MapperFeature . AUTO_DETECT_SETTERS , SerializationFeature . FAIL_ON_EMPTY_BEANS ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_FIELDS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( MapperFeature . AUTO_DETECT_SETTERS ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . FAIL_ON_EMPTY_BEANS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . build ( ) ; assertSame ( JsonInclude . Include . ALWAYS , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getSerializationInclusion ( ) ) ; org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . serializationInclusion ( JsonInclude . Include . NON_NULL ) . build ( ) ; assertSame ( JsonInclude . Include . NON_NULL , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getSerializationInclusion ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . build ( ) ; assertSame ( JsonInclude . Include . ALWAYS , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getSerializationInclusion ( ) ) ; org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . serializationInclusion ( JsonInclude . Include . NON_DEFAULT ) . build ( ) ; assertSame ( JsonInclude . Include . NON_DEFAULT , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getSerializationInclusion ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . build ( ) ; assertSame ( JsonInclude . Include . ALWAYS , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getSerializationInclusion ( ) ) ; org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . serializationInclusion ( JsonInclude . Include . NON_EMPTY ) . build ( ) ; assertSame ( JsonInclude . Include . NON_EMPTY , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getSerializationInclusion ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . dateFormat ( java.text.SimpleDateFormat ) . build ( ) ; assertEquals ( java.text.SimpleDateFormat , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getDateFormat ( ) ) ; assertEquals ( java.text.SimpleDateFormat , org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . getDateFormat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . simpleDateFormat ( java.lang.String ) . build ( ) ; assertEquals ( java.text.SimpleDateFormat , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getDateFormat ( ) ) ; assertEquals ( java.text.SimpleDateFormat , org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . getDateFormat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . locale ( java.util.Locale . java.util.Locale ) . build ( ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getLocale ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . getLocale ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.TimeZone java.util.TimeZone = java.util.TimeZone . java.util.TimeZone ( STRING ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . timeZone ( java.util.TimeZone ) . build ( ) ; assertEquals ( java.util.TimeZone , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getTimeZone ( ) ) ; assertEquals ( java.util.TimeZone , org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . timeZone ( java.lang.String ) . build ( ) ; java.util.TimeZone java.util.TimeZone = java.util.TimeZone . java.util.TimeZone ( java.lang.String ) ; assertEquals ( java.util.TimeZone , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getTimeZone ( ) ) ; assertEquals ( java.util.TimeZone , org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.String java.lang.String = STRING ; Jackson2ObjectMapperBuilder . json ( ) . timeZone ( java.lang.String ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NumberSerializer org.springframework.http.converter.json.NumberSerializer = new NumberSerializer ( java.lang.Integer .class ) ; SimpleModule org.springframework.http.converter.json.SimpleModule = new SimpleModule ( ) ; org.springframework.http.converter.json.SimpleModule . addSerializer ( java.lang.Integer .class , org.springframework.http.converter.json.NumberSerializer ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modules ( org.springframework.http.converter.json.SimpleModule ) . build ( ) ; Serializers org.springframework.http.converter.json.Serializers = org.springframework.http.converter.json.SerializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . serializers ( ) . iterator ( ) . next ( ) ; assertSame ( org.springframework.http.converter.json.NumberSerializer , org.springframework.http.converter.json.Serializers . findSerializer ( null , SimpleType . construct ( java.lang.Integer .class ) , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modulesToInstall ( org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerModule .class ) . build ( ) ; Serializers org.springframework.http.converter.json.Serializers = org.springframework.http.converter.json.SerializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . serializers ( ) . iterator ( ) . next ( ) ; assertSame ( org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerSerializer .class , org.springframework.http.converter.json.Serializers . findSerializer ( null , SimpleType . construct ( java.lang.Integer .class ) , null ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modulesToInstall ( new org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerModule ( ) ) . build ( ) ; Serializers org.springframework.http.converter.json.Serializers = org.springframework.http.converter.json.SerializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . serializers ( ) . iterator ( ) . next ( ) ; assertSame ( org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerSerializer .class , org.springframework.http.converter.json.Serializers . findSerializer ( null , SimpleType . construct ( java.lang.Integer .class ) , null ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.http.converter.json.JsonProcessingException , java.io.UnsupportedEncodingException { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . build ( ) ; java.lang.Long java.lang.Long = NUMBER ; DateTime org.springframework.http.converter.json.DateTime = new DateTime ( java.lang.Long , DateTimeZone . UTC ) ; assertEquals ( java.lang.Long . java.lang.String ( ) , new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( org.springframework.http.converter.json.DateTime ) , STRING ) ) ; java.nio.file.Path java.nio.file.Path = java.nio.file.Paths . java.nio.file.Path ( STRING ) ; assertTrue ( new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( java.nio.file.Path ) , STRING ) . boolean ( STRING ) ) ; java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( java.util.Optional<java.lang.String> ) , STRING ) ) ; IntRange org.springframework.http.converter.json.IntRange = new IntRange ( NUMBER , NUMBER ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( org.springframework.http.converter.json.IntRange ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.http.converter.json.JsonProcessingException , java.io.UnsupportedEncodingException { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modulesToInstall ( new org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerModule ( ) ) . build ( ) ; DateTime org.springframework.http.converter.json.DateTime = new DateTime ( NUMBER , DateTimeZone . UTC ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( org.springframework.http.converter.json.DateTime ) , STRING ) ) ; assertThat ( new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( new java.lang.Integer ( NUMBER ) ) , STRING ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.http.converter.json.JsonProcessingException , java.io.UnsupportedEncodingException { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modulesToInstall ( org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerModule .class ) . build ( ) ; DateTime org.springframework.http.converter.json.DateTime = new DateTime ( NUMBER , DateTimeZone . UTC ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( org.springframework.http.converter.json.DateTime ) , STRING ) ) ; assertThat ( new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( new java.lang.Integer ( NUMBER ) ) , STRING ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.http.converter.json.JsonProcessingException , java.io.UnsupportedEncodingException { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . serializerByType ( java.lang.Integer .class , new org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerSerializer ( ) ) . build ( ) ; DateTime org.springframework.http.converter.json.DateTime = new DateTime ( NUMBER , DateTimeZone . UTC ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( org.springframework.http.converter.json.DateTime ) , STRING ) ) ; assertThat ( new java.lang.String ( org.springframework.http.converter.json.ObjectMapper . writeValueAsBytes ( new java.lang.Integer ( NUMBER ) ) , STRING ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.converter.json.SerializerFactoryConfig org.springframework.http.converter.json.SerializerFactoryConfig ( ObjectMapper org.springframework.http.converter.json.ObjectMapper ) { return ( ( BasicSerializerFactory ) org.springframework.http.converter.json.ObjectMapper . getSerializerFactory ( ) ) . getFactoryConfig ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.converter.json.DeserializerFactoryConfig org.springframework.http.converter.json.DeserializerFactoryConfig ( ObjectMapper org.springframework.http.converter.json.ObjectMapper ) { return ( ( BasicDeserializerFactory ) org.springframework.http.converter.json.ObjectMapper . getDeserializationContext ( ) . getFactory ( ) ) . getFactoryConfig ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyNamingStrategy org.springframework.http.converter.json.PropertyNamingStrategy = new PropertyNamingStrategy . PropertyNamingStrategy ( ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . propertyNamingStrategy ( org.springframework.http.converter.json.PropertyNamingStrategy ) . build ( ) ; assertSame ( org.springframework.http.converter.json.PropertyNamingStrategy , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getPropertyNamingStrategy ( ) ) ; assertSame ( org.springframework.http.converter.json.PropertyNamingStrategy , org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . getPropertyNamingStrategy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JsonSerializer < java.lang.Number > org.springframework.http.converter.json.JsonSerializer<java.lang.Number> = new NumberSerializer ( java.lang.Integer .class ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modules ( new java.util.ArrayList <> ( ) ) . serializerByType ( java.lang.Boolean .class , org.springframework.http.converter.json.JsonSerializer<java.lang.Number> ) . build ( ) ; assertTrue ( org.springframework.http.converter.json.SerializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . hasSerializers ( ) ) ; Serializers org.springframework.http.converter.json.Serializers = org.springframework.http.converter.json.SerializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . serializers ( ) . iterator ( ) . next ( ) ; assertSame ( org.springframework.http.converter.json.JsonSerializer<java.lang.Number> , org.springframework.http.converter.json.Serializers . findSerializer ( null , SimpleType . construct ( java.lang.Boolean .class ) , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.http.converter.json.JsonMappingException { JsonDeserializer < java.util.Date > org.springframework.http.converter.json.JsonDeserializer<java.util.Date> = new DateDeserializers . DateDeserializers ( ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modules ( new java.util.ArrayList <> ( ) ) . deserializerByType ( java.util.Date .class , org.springframework.http.converter.json.JsonDeserializer<java.util.Date> ) . build ( ) ; assertTrue ( org.springframework.http.converter.json.DeserializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . hasDeserializers ( ) ) ; Deserializers org.springframework.http.converter.json.Deserializers = org.springframework.http.converter.json.DeserializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . deserializers ( ) . iterator ( ) . next ( ) ; assertSame ( org.springframework.http.converter.json.JsonDeserializer<java.util.Date> , org.springframework.http.converter.json.Deserializers . findBeanDeserializer ( SimpleType . construct ( java.util.Date .class ) , null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.String .class ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object .class ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modules ( ) . mixIn ( java.lang.Class<> , java.lang.Class<> ) . build ( ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.ObjectMapper . mixInCount ( ) ) ; assertSame ( java.lang.Class<> , org.springframework.http.converter.json.ObjectMapper . findMixInClassFor ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.String .class ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object .class ; java.util.Map<java.lang.Class<?>,java.lang.Class<?>> < java.lang.Class<?> < ? > , java.lang.Class<?> < ? > > java.util.Map<java.lang.Class<?>,java.lang.Class<?>> = new java.util.HashMap<java.lang.Class<?>,java.lang.Class<?>> <> ( ) ; java.util.Map<java.lang.Class<?>,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . modules ( ) . mixIns ( java.util.Map<java.lang.Class<?>,java.lang.Class<?>> ) . build ( ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.ObjectMapper . mixInCount ( ) ) ; assertSame ( java.lang.Class<> , org.springframework.http.converter.json.ObjectMapper . findMixInClassFor ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.http.converter.json.JsonProcessingException { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . filters ( new SimpleFilterProvider ( ) . setFailOnUnknownId ( false ) ) . build ( ) ; org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.JacksonFilteredBean org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.JacksonFilteredBean = new org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.JacksonFilteredBean ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.ObjectMapper . writeValueAsString ( org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.JacksonFilteredBean ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . filters ( ( new SimpleFilterProvider ( ) . setFailOnUnknownId ( false ) . setDefaultFilter ( SimpleBeanPropertyFilter . serializeAllExcept ( STRING ) ) ) ) . build ( ) ; java.lang.String = org.springframework.http.converter.json.ObjectMapper . writeValueAsString ( org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.JacksonFilteredBean ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.http.converter.json.JsonMappingException { NopAnnotationIntrospector org.springframework.http.converter.json.NopAnnotationIntrospector = NopAnnotationIntrospector . instance ; java.util.Map<java.lang.Class<?>,org.springframework.http.converter.json.JsonDeserializer<?>> < java.lang.Class<?> < ? > , JsonDeserializer < ? > > java.util.Map<java.lang.Class<?>,org.springframework.http.converter.json.JsonDeserializer<?>> = new java.util.HashMap<java.lang.Class<?>,org.springframework.http.converter.json.JsonDeserializer<?>> <> ( ) ; JsonDeserializer < java.util.Date > org.springframework.http.converter.json.JsonDeserializer<java.util.Date> = new DateDeserializers . DateDeserializers ( ) ; java.util.Map<java.lang.Class<?>,org.springframework.http.converter.json.JsonDeserializer<?>> . put ( java.util.Date .class , org.springframework.http.converter.json.JsonDeserializer<java.util.Date> ) ; JsonSerializer < java.lang.Class<?> < ? > > org.springframework.http.converter.json.JsonSerializer<java.lang.Class<?>> = new ClassSerializer ( ) ; JsonSerializer < java.lang.Number > org.springframework.http.converter.json.JsonSerializer<java.lang.Number> = new NumberSerializer ( java.lang.Integer .class ) ; Jackson2ObjectMapperBuilder org.springframework.http.converter.json.Jackson2ObjectMapperBuilder = Jackson2ObjectMapperBuilder . json ( ) . modules ( new java.util.ArrayList <> ( ) ) . serializers ( org.springframework.http.converter.json.JsonSerializer<java.lang.Class<?>> ) . serializersByType ( java.util.Collections .< java.lang.Class<?> < ? > , JsonSerializer < ? > > java.util.Map<java.lang.Class<?>,org.springframework.http.converter.json.JsonSerializer<?>> ( java.lang.Boolean .class , org.springframework.http.converter.json.JsonSerializer<java.lang.Number> ) ) . deserializersByType ( java.util.Map<java.lang.Class<?>,org.springframework.http.converter.json.JsonDeserializer<?>> ) . annotationIntrospector ( org.springframework.http.converter.json.NopAnnotationIntrospector ) . featuresToEnable ( SerializationFeature . FAIL_ON_EMPTY_BEANS , DeserializationFeature . UNWRAP_ROOT_VALUE , JsonParser . Feature . ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER , JsonGenerator . Feature . WRITE_NUMBERS_AS_STRINGS ) . featuresToDisable ( MapperFeature . AUTO_DETECT_GETTERS , MapperFeature . AUTO_DETECT_FIELDS , JsonParser . Feature . AUTO_CLOSE_SOURCE , JsonGenerator . Feature . QUOTE_FIELD_NAMES ) . serializationInclusion ( JsonInclude . Include . NON_NULL ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = new ObjectMapper ( ) ; org.springframework.http.converter.json.Jackson2ObjectMapperBuilder . configure ( org.springframework.http.converter.json.ObjectMapper ) ; assertTrue ( org.springframework.http.converter.json.SerializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . hasSerializers ( ) ) ; assertTrue ( org.springframework.http.converter.json.DeserializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . hasDeserializers ( ) ) ; Serializers org.springframework.http.converter.json.Serializers = org.springframework.http.converter.json.SerializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . serializers ( ) . iterator ( ) . next ( ) ; assertSame ( org.springframework.http.converter.json.JsonSerializer<java.lang.Class<?>> , org.springframework.http.converter.json.Serializers . findSerializer ( null , SimpleType . construct ( java.lang.Class .class ) , null ) ) ; assertSame ( org.springframework.http.converter.json.JsonSerializer<java.lang.Number> , org.springframework.http.converter.json.Serializers . findSerializer ( null , SimpleType . construct ( java.lang.Boolean .class ) , null ) ) ; assertNull ( org.springframework.http.converter.json.Serializers . findSerializer ( null , SimpleType . construct ( java.lang.Number .class ) , null ) ) ; Deserializers org.springframework.http.converter.json.Deserializers = org.springframework.http.converter.json.DeserializerFactoryConfig ( org.springframework.http.converter.json.ObjectMapper ) . deserializers ( ) . iterator ( ) . next ( ) ; assertSame ( org.springframework.http.converter.json.JsonDeserializer<java.util.Date> , org.springframework.http.converter.json.Deserializers . findBeanDeserializer ( SimpleType . construct ( java.util.Date .class ) , null , null ) ) ; assertSame ( org.springframework.http.converter.json.NopAnnotationIntrospector , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getAnnotationIntrospector ( ) ) ; assertSame ( org.springframework.http.converter.json.NopAnnotationIntrospector , org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . getAnnotationIntrospector ( ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . isEnabled ( SerializationFeature . FAIL_ON_EMPTY_BEANS ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( DeserializationFeature . UNWRAP_ROOT_VALUE ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . isEnabled ( JsonParser . Feature . ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . isEnabled ( JsonGenerator . Feature . WRITE_NUMBERS_AS_STRINGS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . isEnabled ( MapperFeature . AUTO_DETECT_GETTERS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( MapperFeature . DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( MapperFeature . AUTO_DETECT_FIELDS ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . isEnabled ( JsonParser . Feature . AUTO_CLOSE_SOURCE ) ) ; assertFalse ( org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . isEnabled ( JsonGenerator . Feature . QUOTE_FIELD_NAMES ) ) ; assertSame ( JsonInclude . Include . NON_NULL , org.springframework.http.converter.json.ObjectMapper . getSerializationConfig ( ) . getSerializationInclusion ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . xml ( ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertEquals ( XmlMapper .class , org.springframework.http.converter.json.ObjectMapper . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Jackson2ObjectMapperBuilder org.springframework.http.converter.json.Jackson2ObjectMapperBuilder = Jackson2ObjectMapperBuilder . json ( ) . indentOutput ( true ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = org.springframework.http.converter.json.Jackson2ObjectMapperBuilder . build ( ) ; ObjectMapper org.springframework.http.converter.json.ObjectMapper = org.springframework.http.converter.json.Jackson2ObjectMapperBuilder . createXmlMapper ( true ) . build ( ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) ; assertTrue ( org.springframework.http.converter.json.ObjectMapper . getClass ( ) . isAssignableFrom ( XmlMapper .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.http.converter.json.JsonProcessingException { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . xml ( ) . defaultUseWrapper ( false ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertEquals ( XmlMapper .class , org.springframework.http.converter.json.ObjectMapper . getClass ( ) ) ; org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.ListContainer<java.lang.String> < java.lang.String > org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.ListContainer<java.lang.String> = new org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.ListContainer<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.ObjectMapper . writeValueAsString ( org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.ListContainer<java.lang.String> ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . smile ( ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertEquals ( SmileFactory .class , org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = Jackson2ObjectMapperBuilder . cbor ( ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertEquals ( CBORFactory .class , org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.converter.json.ObjectMapper = new Jackson2ObjectMapperBuilder ( ) . factory ( new SmileFactory ( ) ) . build ( ) ; assertNotNull ( org.springframework.http.converter.json.ObjectMapper ) ; assertEquals ( SmileFactory .class , org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.Class<? extends org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerModule> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.converter.json.Version org.springframework.http.converter.json.Version ( ) { return Version . unknownVersion ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SetupContext org.springframework.http.converter.json.SetupContext ) { SimpleSerializers org.springframework.http.converter.json.SimpleSerializers = new SimpleSerializers ( ) ; org.springframework.http.converter.json.SimpleSerializers . addSerializer ( java.lang.Integer .class , new org.springframework.http.converter.json.Jackson2ObjectMapperBuilderTests.CustomIntegerSerializer ( ) ) ; org.springframework.http.converter.json.SetupContext . addSerializers ( org.springframework.http.converter.json.SimpleSerializers ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Integer java.lang.Integer , JsonGenerator org.springframework.http.converter.json.JsonGenerator , SerializerProvider org.springframework.http.converter.json.SerializerProvider ) throws java.io.IOException { org.springframework.http.converter.json.JsonGenerator . writeStartObject ( ) ; org.springframework.http.converter.json.JsonGenerator . writeNumberField ( STRING , java.lang.Integer ) ; org.springframework.http.converter.json.JsonGenerator . writeEndObject ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.List<T> < T > java.util.List<T> ) { this . java.util.List<T> = java.util.List<T> ; }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( ) { return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<T> < T > java.util.List<T> ) { this . java.util.List<T> = java.util.List<T> ; }  <METHOD_END>
