<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ( java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ) { java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> < org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder > java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> = new java.util.ArrayList <> ( java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> . size ( ) ) ; for ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor : java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ) { java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> . boolean ( new org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder ( org.springframework.aop.aspectj.autoproxy.Advisor , java.util.Comparator<org.springframework.aop.aspectj.autoproxy.Advisor> ) ) ; } java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> < org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder > java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> = PartialOrder . sort ( java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> ) ; if ( java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> != null ) { java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> = new java.util.ArrayList <> ( java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> . size ( ) ) ; for ( org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder : java.util.List<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder> ) { java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> . add ( org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder . org.springframework.aop.aspectj.autoproxy.Advisor ( ) ) ; } return java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ; } else { return super. sortAdvisors ( java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ) { AspectJProxyUtils . makeAdvisorChainAspectJCapableIfNecessary ( java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> = findCandidateAdvisors ( ) ; for ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor : java.util.List<org.springframework.aop.aspectj.autoproxy.Advisor> ) { if ( org.springframework.aop.aspectj.autoproxy.Advisor instanceof AspectJPointcutAdvisor ) { if ( ( ( AbstractAspectJAdvice ) org.springframework.aop.aspectj.autoproxy.Advisor . getAdvice ( ) ) . getAspectName ( ) . equals ( java.lang.String ) ) { return true ; } } } return super. shouldSkip ( java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor , java.util.Comparator<org.springframework.aop.aspectj.autoproxy.Advisor> < Advisor > java.util.Comparator<org.springframework.aop.aspectj.autoproxy.Advisor> ) { this . org.springframework.aop.aspectj.autoproxy.Advisor = org.springframework.aop.aspectj.autoproxy.Advisor ; this . java.util.Comparator<org.springframework.aop.aspectj.autoproxy.Advisor> = java.util.Comparator<org.springframework.aop.aspectj.autoproxy.Advisor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { Advisor org.springframework.aop.aspectj.autoproxy.Advisor = ( ( org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.PartiallyComparableAdvisorHolder ) java.lang.Object ) . org.springframework.aop.aspectj.autoproxy.Advisor ; return this . java.util.Comparator<org.springframework.aop.aspectj.autoproxy.Advisor> . compare ( this . org.springframework.aop.aspectj.autoproxy.Advisor , org.springframework.aop.aspectj.autoproxy.Advisor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.aspectj.autoproxy.Advisor org.springframework.aop.aspectj.autoproxy.Advisor ( ) { return this . org.springframework.aop.aspectj.autoproxy.Advisor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; Advice org.springframework.aop.aspectj.autoproxy.Advice = this . org.springframework.aop.aspectj.autoproxy.Advisor . getAdvice ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ClassUtils . getShortName ( org.springframework.aop.aspectj.autoproxy.Advice . getClass ( ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( this . org.springframework.aop.aspectj.autoproxy.Advisor instanceof Ordered ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( ( ( Ordered ) this . org.springframework.aop.aspectj.autoproxy.Advisor ) . getOrder ( ) ) . append ( STRING ) ; } if ( org.springframework.aop.aspectj.autoproxy.Advice instanceof AbstractAspectJAdvice ) { AbstractAspectJAdvice org.springframework.aop.aspectj.autoproxy.AbstractAspectJAdvice = ( AbstractAspectJAdvice ) org.springframework.aop.aspectj.autoproxy.Advice ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.aop.aspectj.autoproxy.AbstractAspectJAdvice . getAspectName ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.aop.aspectj.autoproxy.AbstractAspectJAdvice . getDeclarationOrder ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
