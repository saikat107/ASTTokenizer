<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.context.event.ConfigurableApplicationContext != null ) { this . org.springframework.context.event.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; this . org.springframework.context.event.EventCollector . clear ( ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.context.event.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector = org.springframework.context.event.EventCollector ( this . org.springframework.context.event.ConfigurableApplicationContext ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.MetaAnnotationListenerTestBean .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.MetaAnnotationListenerTestBean org.springframework.context.event.AnnotationDrivenEventListenerTests.MetaAnnotationListenerTestBean = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.MetaAnnotationListenerTestBean .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.MetaAnnotationListenerTestBean ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.MetaAnnotationListenerTestBean , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ContextEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ContextEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ContextEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ContextEventListener .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = this . org.springframework.context.event.EventCollector . getEvents ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ContextEventListener ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; assertEquals ( ContextRefreshedEvent .class , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; this . org.springframework.context.event.ConfigurableApplicationContext . stop ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = this . org.springframework.context.event.EventCollector . getEvents ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ContextEventListener ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; assertEquals ( ContextStoppedEvent .class , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.event.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.event.AnnotationConfigApplicationContext . register ( org.springframework.context.event.AnnotationDrivenEventListenerTests.BasicConfiguration .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.InvalidMethodSignatureEventListener .class ) ; this . org.springframework.context.event.ExpectedException . expect ( BeanInitializationException .class ) ; this . org.springframework.context.event.ExpectedException . expectMessage ( org.springframework.context.event.AnnotationDrivenEventListenerTests.InvalidMethodSignatureEventListener .class . java.lang.String ( ) ) ; this . org.springframework.context.event.ExpectedException . expectMessage ( STRING ) ; org.springframework.context.event.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , new TestEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener , org.springframework.context.event.AnotherTestEvent . getId ( ) , STRING ) ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , null ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , new java.lang.String [] { STRING , STRING } ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , STRING , STRING ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.LinkedHashSet<java.lang.Object> <> ( ) ; java.util.Set<java.lang.Object> . boolean ( STRING ) ; java.util.Set<java.lang.Object> . boolean ( NUMBER ) ; java.util.Set<java.lang.Object> . boolean ( STRING ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , java.util.Set<java.lang.Object> ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , STRING , STRING ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , java.util.Arrays . java.util.List<java.lang.String> ( null , STRING ) ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , STRING ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ScopedProxyTestBean .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService .class ) ; assertTrue ( STRING , org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService instanceof Advised ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService . getId ( ) ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( new ContextRefreshedEvent ( this . org.springframework.context.event.ConfigurableApplicationContext ) ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService . getId ( ) ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService . getId ( ) , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedProxyTestBean .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedSimpleService org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedSimpleService = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedSimpleService .class ) ; assertTrue ( STRING , org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedSimpleService instanceof Advised ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedSimpleService . getId ( ) ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( new ContextRefreshedEvent ( this . org.springframework.context.event.ConfigurableApplicationContext ) ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedSimpleService . getId ( ) ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AnnotatedSimpleService . getId ( ) , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean .class ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean ) ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean . getId ( ) ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( new ContextRefreshedEvent ( this . org.springframework.context.event.ConfigurableApplicationContext ) ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean . getId ( ) ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyTestBean . getId ( ) , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CglibProxyWithPrivateMethod .class ) ; fail ( STRING ) ; } catch ( BeanInitializationException org.springframework.context.event.BeanInitializationException ) { assertTrue ( org.springframework.context.event.BeanInitializationException . getCause ( ) instanceof java.lang.IllegalStateException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScope org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScope = new org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScope ( ) ; this . org.springframework.context.event.ConfigurableApplicationContext . getBeanFactory ( ) . registerScope ( STRING , org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScope ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean .class ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean ) ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean . getId ( ) ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( new ContextRefreshedEvent ( this . org.springframework.context.event.ConfigurableApplicationContext ) ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean . getId ( ) ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScope . boolean = false ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( new ContextRefreshedEvent ( this . org.springframework.context.event.ConfigurableApplicationContext ) ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScope . boolean = true ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean . getId ( ) ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScopeTestBean . getId ( ) , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; try { org.springframework.context.event.AnnotationDrivenEventListenerTests.CustomScope . boolean = false ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( new TestEvent ( ) ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.context.event.BeanCreationException ) { assertTrue ( org.springframework.context.event.BeanCreationException . getCause ( ) instanceof java.lang.IllegalStateException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncEventListener .class ) ; java.lang.String java.lang.String = java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , java.lang.String ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncConfigurationWithInterfaces .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleProxyTestBean .class ) ; java.lang.String java.lang.String = java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , java.lang.String ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncConfigurationWithInterfaces .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.ScopedProxyTestBean .class ) ; java.lang.String java.lang.String = java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , java.lang.String ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.SimpleService , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener .class ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener ) ; try { this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener .class ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ExceptionEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( STRING ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , STRING ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( NUMBER ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; AnotherTestEvent org.springframework.context.event.AnotherTestEvent = new AnotherTestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ReplyEventListener , org.springframework.context.event.AnotherTestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , STRING ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.GenericEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.GenericEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.GenericEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.GenericEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.GenericEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( STRING ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.GenericEventListener , STRING ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener ) ; GenericEventPojo < java.lang.String > org.springframework.context.event.GenericEventPojo<java.lang.String> = new GenericEventPojo <> ( STRING ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.GenericEventPojo<java.lang.String> ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener , org.springframework.context.event.GenericEventPojo<java.lang.String> ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener ) ; GenericEventPojo < java.lang.Long > org.springframework.context.event.GenericEventPojo<java.lang.Long> = new GenericEventPojo <> ( NUMBER ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.GenericEventPojo<java.lang.Long> ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ResolvableTypeEventListener ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.lang.System . long ( ) ; void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ConditionalEventListener .class ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ConditionalEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( STRING ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , org.springframework.context.event.TestEvent , STRING ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( long ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , org.springframework.context.event.TestEvent , STRING , long ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( NUMBER ) ; this . org.springframework.context.event.EventCollector . assertEvent ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener , org.springframework.context.event.TestEvent , STRING , long , NUMBER ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.lang.Long . long ; void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ConditionalEventListener .class ) ; TestEvent org.springframework.context.event.TestEvent = new TestEvent ( this , STRING ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.ConditionalEventListener .class ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( org.springframework.context.event.TestEvent ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( STRING ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( long ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( NUMBER ) ; this . org.springframework.context.event.EventCollector . assertNoEventReceived ( org.springframework.context.event.AnnotationDrivenEventListenerTests.TestEventListener ) ; this . org.springframework.context.event.EventCollector . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener .class ) ; assertTrue ( org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener . java.util.List<java.lang.String> . boolean ( ) ) ; this . org.springframework.context.event.ConfigurableApplicationContext . publishEvent ( STRING ) ; assertThat ( org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener . java.util.List<java.lang.String> , contains ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { void ( org.springframework.context.event.AnnotationDrivenEventListenerTests.EventOnPostConstruct .class , org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener .class ) ; org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener = this . org.springframework.context.event.ConfigurableApplicationContext . getBean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener .class ) ; assertThat ( org.springframework.context.event.AnnotationDrivenEventListenerTests.OrderedTestListener . java.util.List<java.lang.String> , contains ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; java.util.List<java.lang.Class<?>> . boolean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.BasicConfiguration .class ) ; java.util.List<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; void ( java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; java.util.List<java.lang.Class<?>> . boolean ( org.springframework.context.event.AnnotationDrivenEventListenerTests.AsyncConfiguration .class ) ; java.util.List<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; void ( java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigApplicationContext org.springframework.context.event.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; this . org.springframework.context.event.EventCollector = org.springframework.context.event.AnnotationConfigApplicationContext . getBean ( EventCollector .class ) ; this . java.util.concurrent.CountDownLatch = org.springframework.context.event.AnnotationConfigApplicationContext . getBean ( java.util.concurrent.CountDownLatch .class ) ; this . org.springframework.context.event.ConfigurableApplicationContext = org.springframework.context.event.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.event.EventCollector org.springframework.context.event.EventCollector ( ConfigurableApplicationContext org.springframework.context.event.ConfigurableApplicationContext ) { return org.springframework.context.event.ConfigurableApplicationContext . getBean ( EventCollector .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.event.EventCollector org.springframework.context.event.EventCollector ( ) { return new EventCollector ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.event.AnnotationDrivenEventListenerTests.BasicConfiguration.TestConditionEvaluator org.springframework.context.event.AnnotationDrivenEventListenerTests.BasicConfiguration.TestConditionEvaluator ( ) { return new org.springframework.context.event.AnnotationDrivenEventListenerTests.BasicConfiguration.TestConditionEvaluator ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Double java.lang.Double ) { return new java.lang.Double ( NUMBER ) . boolean ( java.lang.Double ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { this . org.springframework.context.event.EventCollector . addEvent ( this , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( TestEvent org.springframework.context.event.TestEvent ) { void ( org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( java.lang.String java.lang.String ) { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.event.AnnotationDrivenEventListenerTests.FooListener public void void ( TestEvent org.springframework.context.event.TestEvent ) { void ( org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( ApplicationContextEvent org.springframework.context.event.ApplicationContextEvent ) { void ( org.springframework.context.event.ApplicationContextEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) {		}  <METHOD_END>
<METHOD_START> @ EventListener public java.lang.Object java.lang.Object ( AnotherTestEvent org.springframework.context.event.AnotherTestEvent ) { void ( org.springframework.context.event.AnotherTestEvent ) ; if ( event . content == null ) { return null ; } else if ( event . content instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) event . content ; if ( java.lang.String . boolean ( STRING ) ) { return event . content ; } else { return new TestEvent ( this , org.springframework.context.event.AnotherTestEvent . getId ( ) , java.lang.String ) ; } } return event . content ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( TestEvent org.springframework.context.event.TestEvent ) { void ( org.springframework.context.event.TestEvent ) ; if ( STRING . boolean ( event . msg ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ EventListener @ Async public void void ( AnotherTestEvent org.springframework.context.event.AnotherTestEvent ) { void ( org.springframework.context.event.AnotherTestEvent ) ; if ( STRING . boolean ( event . content ) ) { this . java.util.concurrent.CountDownLatch . void ( ) ; throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ EventListener @ Async public void void ( AnotherTestEvent org.springframework.context.event.AnotherTestEvent ) { assertTrue ( ! java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) . boolean ( event . content ) ) ; void ( org.springframework.context.event.AnotherTestEvent ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( TestEvent org.springframework.context.event.TestEvent );  <METHOD_END>
<METHOD_START> void void ( AnotherTestEvent org.springframework.context.event.AnotherTestEvent );  <METHOD_END>
<METHOD_START> @ EventListener @ java.lang.Override public void void ( TestEvent org.springframework.context.event.TestEvent ) { this . org.springframework.context.event.EventCollector . addEvent ( this , org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener @ Async public void void ( AnotherTestEvent org.springframework.context.event.AnotherTestEvent ) { assertTrue ( ! java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) . boolean ( event . content ) ) ; this . org.springframework.context.event.EventCollector . addEvent ( this , org.springframework.context.event.AnotherTestEvent ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ EventListener @ java.lang.Override public void void ( TestEvent org.springframework.context.event.TestEvent ) { this . org.springframework.context.event.EventCollector . addEvent ( this , org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener @ Async public void void ( AnotherTestEvent org.springframework.context.event.AnotherTestEvent ) { assertTrue ( ! java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) . boolean ( event . content ) ) ; this . org.springframework.context.event.EventCollector . addEvent ( this , org.springframework.context.event.AnotherTestEvent ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ EventListener void void ( TestEvent org.springframework.context.event.TestEvent );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestEvent org.springframework.context.event.TestEvent ) { this . org.springframework.context.event.EventCollector . addEvent ( this , org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( TestEvent org.springframework.context.event.TestEvent ) { void ( org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener private void void ( TestEvent org.springframework.context.event.TestEvent ) { void ( org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( TestEvent org.springframework.context.event.TestEvent ) { void ( org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( PayloadApplicationEvent < java.lang.String > org.springframework.context.event.PayloadApplicationEvent<java.lang.String> ) { void ( org.springframework.context.event.PayloadApplicationEvent<java.lang.String> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( GenericEventPojo < java.lang.String > org.springframework.context.event.GenericEventPojo<java.lang.String> ) { void ( org.springframework.context.event.GenericEventPojo<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ EventListener ( condition = STRING ) @ java.lang.Override public void void ( TestEvent org.springframework.context.event.TestEvent ) { super. void ( org.springframework.context.event.TestEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ EventListener ( condition = STRING ) public void void ( java.lang.String java.lang.String ) { super. void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.event.AnnotationDrivenEventListenerTests.ConditionalEvent ( STRING ) public void void ( java.lang.Long java.lang.Long ) { void ( java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.event.AnnotationDrivenEventListenerTests.ConditionalEvent ( STRING ) public void void ( java.lang.Double java.lang.Double ) { void ( java.lang.Double ) ; }  <METHOD_END>
<METHOD_START> @ EventListener @ Order ( NUMBER ) public void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ EventListener @ Order ( - NUMBER ) public void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { this . org.springframework.context.event.ApplicationEventPublisher . publishEvent ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ObjectFactory < ? > org.springframework.context.event.ObjectFactory<?> ) { Assert . state ( this . boolean , STRING ) ; if ( this . java.lang.Object == null ) { this . java.lang.Object = org.springframework.context.event.ObjectFactory<> . getObject ( ) ; } return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Runnable java.lang.Runnable ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
