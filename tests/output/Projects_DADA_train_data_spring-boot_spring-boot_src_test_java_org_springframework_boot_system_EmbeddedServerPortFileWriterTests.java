<METHOD_START> @ Before @ After public void void ( ) { java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; EmbeddedServerPortFileWriter org.springframework.boot.system.EmbeddedServerPortFileWriter = new EmbeddedServerPortFileWriter ( java.io.File ) ; org.springframework.boot.system.EmbeddedServerPortFileWriter . onApplicationEvent ( org.springframework.boot.system.ServletWebServerInitializedEvent ( STRING , NUMBER ) ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , this . org.springframework.boot.system.TemporaryFolder . newFile ( ) . getAbsolutePath ( ) ) ; EmbeddedServerPortFileWriter org.springframework.boot.system.EmbeddedServerPortFileWriter = new EmbeddedServerPortFileWriter ( ) ; org.springframework.boot.system.EmbeddedServerPortFileWriter . onApplicationEvent ( org.springframework.boot.system.ServletWebServerInitializedEvent ( STRING , NUMBER ) ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( java.lang.System . java.lang.String ( STRING ) ) ; assertThat ( FileCopyUtils . copyToString ( java.io.FileReader ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; java.lang.System . java.lang.String ( STRING , this . org.springframework.boot.system.TemporaryFolder . newFile ( ) . getAbsolutePath ( ) ) ; EmbeddedServerPortFileWriter org.springframework.boot.system.EmbeddedServerPortFileWriter = new EmbeddedServerPortFileWriter ( java.io.File ) ; org.springframework.boot.system.EmbeddedServerPortFileWriter . onApplicationEvent ( org.springframework.boot.system.ServletWebServerInitializedEvent ( STRING , NUMBER ) ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( java.lang.System . java.lang.String ( STRING ) ) ; assertThat ( FileCopyUtils . copyToString ( java.io.FileReader ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; EmbeddedServerPortFileWriter org.springframework.boot.system.EmbeddedServerPortFileWriter = new EmbeddedServerPortFileWriter ( java.io.File ) ; org.springframework.boot.system.EmbeddedServerPortFileWriter . onApplicationEvent ( org.springframework.boot.system.ServletWebServerInitializedEvent ( STRING , NUMBER ) ) ; org.springframework.boot.system.EmbeddedServerPortFileWriter . onApplicationEvent ( org.springframework.boot.system.ServletWebServerInitializedEvent ( STRING , NUMBER ) ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . isEqualTo ( STRING ) ; java.lang.String java.lang.String = java.io.File . java.lang.String ( ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - StringUtils . getFilenameExtension ( java.lang.String ) . length ( ) - NUMBER ) ; java.lang.String = java.lang.String + STRING + StringUtils . getFilenameExtension ( java.io.File . java.lang.String ( ) ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( new java.io.File ( java.io.File . java.io.File ( ) , java.lang.String ) ) ; assertThat ( FileCopyUtils . copyToString ( java.io.FileReader ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Set<java.lang.String> ( java.io.File . java.io.File ( ) ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.system.TemporaryFolder . newFile ( ) ; java.io.File = new java.io.File ( java.io.File . java.io.File ( ) , java.io.File . java.lang.String ( ) . java.lang.String ( ) ) ; EmbeddedServerPortFileWriter org.springframework.boot.system.EmbeddedServerPortFileWriter = new EmbeddedServerPortFileWriter ( java.io.File ) ; org.springframework.boot.system.EmbeddedServerPortFileWriter . onApplicationEvent ( org.springframework.boot.system.ServletWebServerInitializedEvent ( STRING , NUMBER ) ) ; java.lang.String java.lang.String = java.io.File . java.lang.String ( ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - StringUtils . getFilenameExtension ( java.lang.String ) . length ( ) - NUMBER ) ; java.lang.String = java.lang.String + STRING + StringUtils . getFilenameExtension ( java.io.File . java.lang.String ( ) ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( new java.io.File ( java.io.File . java.io.File ( ) , java.lang.String ) ) ; assertThat ( FileCopyUtils . copyToString ( java.io.FileReader ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Set<java.lang.String> ( java.io.File . java.io.File ( ) ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.system.ServletWebServerInitializedEvent org.springframework.boot.system.ServletWebServerInitializedEvent ( java.lang.String java.lang.String , int int ) { ServletWebServerApplicationContext org.springframework.boot.system.ServletWebServerApplicationContext = mock ( ServletWebServerApplicationContext .class ) ; WebServer org.springframework.boot.system.WebServer = mock ( WebServer .class ) ; given ( org.springframework.boot.system.ServletWebServerApplicationContext . getNamespace ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.boot.system.WebServer . getPort ( ) ) . willReturn ( int ) ; ServletWebServerInitializedEvent org.springframework.boot.system.ServletWebServerInitializedEvent = new ServletWebServerInitializedEvent ( org.springframework.boot.system.ServletWebServerApplicationContext , org.springframework.boot.system.WebServer ) ; return org.springframework.boot.system.ServletWebServerInitializedEvent ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.io.File java.io.File ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; if ( java.io.File . boolean ( ) ) { for ( java.io.File java.io.File : java.io.File . java.io.File[] ( ) ) { java.util.Set<java.lang.String> . boolean ( java.io.File . java.lang.String ( ) ) ; } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
