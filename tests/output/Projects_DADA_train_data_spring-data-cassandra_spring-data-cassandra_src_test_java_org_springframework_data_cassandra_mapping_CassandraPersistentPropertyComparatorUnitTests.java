<METHOD_START> @ Test public void void ( ) { assertThat ( INSTANCE . compare ( null , null ) ) . isEqualTo ( NUMBER ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , null ) ) . isEqualTo ( NUMBER ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( INSTANCE . compare ( null , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( - NUMBER ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( NUMBER ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( NUMBER ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; verifyZeroInteractions ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( true ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( false ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( - NUMBER ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( false ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( - NUMBER ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( false ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( true ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) ) . thenReturn ( CqlIdentifier . cqlId ( STRING ) ) ; when ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) ) . thenReturn ( CqlIdentifier . cqlId ( STRING ) ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isLessThan ( NUMBER ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . getColumnName ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isCompositePrimaryKey ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . isPrimaryKeyColumn ( ) ; verify ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , times ( NUMBER ) ) . getColumnName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BasicCassandraMappingContext org.springframework.data.cassandra.mapping.BasicCassandraMappingContext = new BasicCassandraMappingContext ( ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.CassandraPersistentPropertyComparatorUnitTests.TwoColumns .class ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isLessThanOrEqualTo ( - NUMBER ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isGreaterThanOrEqualTo ( NUMBER ) ; assertThat ( INSTANCE . compare ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
