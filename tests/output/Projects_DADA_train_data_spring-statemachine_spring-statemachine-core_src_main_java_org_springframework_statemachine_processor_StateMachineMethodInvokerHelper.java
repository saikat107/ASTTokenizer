<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { this( java.lang.Object , java.lang.reflect.Method , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { this( java.lang.Object , null , java.lang.reflect.Method , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { this( java.lang.Object , java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this( java.lang.Object , null , java.lang.String , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this( java.lang.Object , java.lang.Class<> , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<?> < ? > java.lang.Class<?> ) { this( java.lang.Object , java.lang.Class<> , ( java.lang.String ) null , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> public T T ( StateMachineRuntime < S , E > org.springframework.statemachine.processor.StateMachineRuntime<S,E> ) throws java.lang.Exception { org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> < S , E > org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> = new org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> < S , E > ( org.springframework.statemachine.processor.StateMachineRuntime<S,E> . getStateContext ( ) ) ; return T ( org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . boolean = java.lang.Class<> != null ; if ( java.lang.Class<> != null ) { Assert . isTrue ( java.lang.reflect.Method . java.lang.Class<?> ( ) != java.lang.Void .class && java.lang.reflect.Method . java.lang.Class<?> ( ) != java.lang.Void . java.lang.Class<java.lang.Void> , STRING ) ; } Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; this . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = new org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.reflect.Method ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = null ; this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = null ; this . java.util.LinkedList<java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> = null ; this . void ( this . getEvaluationContext ( false ) , java.lang.reflect.Method , java.lang.Class<> ) ; this . void ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.Object = java.lang.Object ; this . boolean = java.lang.Class<> != null ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> < java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > > java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> = this . java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> ( java.lang.Object , java.lang.Class<> , java.lang.String , boolean ) ; java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( java.lang.String ) ; java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( java.lang.String ) ; if ( ( java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . int ( ) == NUMBER && java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( ) ) || ( java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . int ( ) == NUMBER && java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( ) ) ) { if ( java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . int ( ) == NUMBER ) { this . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . java.util.Collection<org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( ) . java.util.Iterator<org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( ) . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( ) ; } else { this . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . java.util.Collection<org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( ) . java.util.Iterator<org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( ) . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( ) ; } this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = null ; this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = null ; this . java.util.LinkedList<java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> = null ; } else { this . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = null ; this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ; this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ; this . java.util.LinkedList<java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> = new java.util.LinkedList<java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> < java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > > ( ) ; this . java.util.LinkedList<java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> . boolean ( this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ) ; this . java.util.LinkedList<java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> . boolean ( this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ) ; } this . void ( this . getEvaluationContext ( false ) , java.lang.String , java.lang.Class<> ) ; this . void ( java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; if ( java.lang.Object instanceof java.lang.reflect.Method ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING + ( ( java.lang.reflect.Method ) java.lang.Object ) . java.lang.String ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING + java.lang.Object ) ; } this . java.lang.String = java.lang.StringBuilder . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> private void void ( StandardEvaluationContext org.springframework.statemachine.processor.StandardEvaluationContext , java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.Class<?> < ? > java.lang.Class<?> = AopUtils . getTargetClass ( this . java.lang.Object ) ; if ( java.lang.Object instanceof java.lang.reflect.Method ) { org.springframework.statemachine.processor.StandardEvaluationContext . registerMethodFilter ( java.lang.Class<> , new FixedMethodFilter ( ( java.lang.reflect.Method ) java.lang.Object ) ) ; if ( java.lang.Class<> != null ) { Assert . state ( org.springframework.statemachine.processor.StandardEvaluationContext . getTypeConverter ( ) . canConvert ( TypeDescriptor . valueOf ( ( ( java.lang.reflect.Method ) java.lang.Object ) . java.lang.Class<?> ( ) ) , TypeDescriptor . valueOf ( java.lang.Class<> ) ) , STRING + java.lang.Class<> + STRING + java.lang.Object ) ; } } else if ( java.lang.Object == null || java.lang.Object instanceof java.lang.String ) { AnnotatedMethodFilter org.springframework.statemachine.processor.AnnotatedMethodFilter = new AnnotatedMethodFilter ( java.lang.Class<> , ( java.lang.String ) java.lang.Object , this . boolean ) ; Assert . state ( boolean ( org.springframework.statemachine.processor.AnnotatedMethodFilter , java.lang.Class<> , org.springframework.statemachine.processor.StandardEvaluationContext . getTypeConverter ( ) ) , STRING + java.lang.Class<> + STRING + java.lang.Object ) ; org.springframework.statemachine.processor.StandardEvaluationContext . registerMethodFilter ( java.lang.Class<> , org.springframework.statemachine.processor.AnnotatedMethodFilter ) ; } org.springframework.statemachine.processor.StandardEvaluationContext . setVariable ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( AnnotatedMethodFilter org.springframework.statemachine.processor.AnnotatedMethodFilter , java.lang.Class<?> < ? > java.lang.Class<?> , TypeConverter org.springframework.statemachine.processor.TypeConverter ) { if ( java.lang.Class<> == null ) { return true ; } java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = org.springframework.statemachine.processor.AnnotatedMethodFilter . filter ( java.util.Arrays . java.util.List ( ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<> ) ) ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { if ( org.springframework.statemachine.processor.TypeConverter . canConvert ( TypeDescriptor . valueOf ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) , TypeDescriptor . valueOf ( java.lang.Class<> ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private T T ( org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> < S , E > org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> ) throws java.lang.Exception { org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = this . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> ) ; Assert . notNull ( org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod , STRING ) ; Expression org.springframework.statemachine.processor.Expression = org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod . org.springframework.statemachine.processor.Expression ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.Class<> != null ? this . java.lang.Class<> : org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod . java.lang.reflect.Method . java.lang.Class<?> ( ) ; try { @ java.lang.SuppressWarnings ( STRING ) T T = ( T ) this . evaluateExpression ( org.springframework.statemachine.processor.Expression , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> , java.lang.Class<> ) ; if ( this . boolean ) { Assert . notNull ( T , STRING ) ; } return T ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception ; if ( java.lang.Exception instanceof EvaluationException && java.lang.Exception . java.lang.Throwable ( ) != null ) { java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; } if ( java.lang.Throwable instanceof java.lang.Exception ) { throw ( java.lang.Exception ) java.lang.Throwable ; } else { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> < java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > > java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> ( final java.lang.Object java.lang.Object , final java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , final java.lang.String java.lang.String , final boolean boolean ) { java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> < java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > > java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> < java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > > ( ) ; final java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = new java.util.HashMap<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > ( ) ; final java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> = new java.util.HashMap<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod > ( ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.Class<?> ( java.lang.Object ) ; MethodFilter org.springframework.statemachine.processor.MethodFilter = new UniqueMethodFilter ( java.lang.Class<> ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , new MethodCallback ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { boolean boolean = false ; if ( java.lang.reflect.Method . boolean ( ) ) { return; } if ( boolean ( java.lang.reflect.Method ) ) { return; } if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.reflect.Proxy .class ) ) { return; } if ( ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { return; } if ( boolean && void .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { return; } if ( java.lang.String != null && ! java.lang.String . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { return; } if ( java.lang.Class<> != null && AnnotationUtils . findAnnotation ( java.lang.reflect.Method , java.lang.Class<> ) != null ) { boolean = true ; } org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = null ; try { org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = new org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.reflect.Method ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.statemachine.processor.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.processor.Log . debug ( STRING + java.lang.reflect.Method + STRING , java.lang.Exception ) ; } return; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod . java.lang.Class<?> ( ) ; if ( boolean || java.lang.Class<> == null ) { if ( org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod . boolean ( ) ) { if ( java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.Class<> + STRING ) ; } java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.Class<> , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ) ; } else { if ( java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( java.lang.Class<> ) ) { java.lang.String java.lang.String = STRING ; if ( java.lang.Void .class . boolean ( java.lang.Class<> ) ) { java.lang.String += STRING ; } else { java.lang.String += STRING + java.lang.Class<> + STRING ; } throw new java.lang.IllegalArgumentException ( java.lang.String ) ; } java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.Class<> , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ) ; } } } } , org.springframework.statemachine.processor.MethodFilter ) ; if ( ! java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( ) || ! java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( ) ) { java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> ) ; return java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> ; } Assert . state ( ! java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> . boolean ( ) , STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; return java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { boolean boolean = false ; if ( java.lang.reflect.Method . boolean ( ) ) { return; } if ( boolean ( java.lang.reflect.Method ) ) { return; } if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.reflect.Proxy .class ) ) { return; } if ( ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { return; } if ( boolean && void .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { return; } if ( java.lang.String != null && ! java.lang.String . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { return; } if ( java.lang.Class<> != null && AnnotationUtils . findAnnotation ( java.lang.reflect.Method , java.lang.Class<> ) != null ) { boolean = true ; } org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = null ; try { org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod = new org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.reflect.Method ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.statemachine.processor.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.processor.Log . debug ( STRING + java.lang.reflect.Method + STRING , java.lang.Exception ) ; } return; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod . java.lang.Class<?> ( ) ; if ( boolean || java.lang.Class<> == null ) { if ( org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod . boolean ( ) ) { if ( java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.Class<> + STRING ) ; } java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.Class<> , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ) ; } else { if ( java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . boolean ( java.lang.Class<> ) ) { java.lang.String java.lang.String = STRING ; if ( java.lang.Void .class . boolean ( java.lang.Class<> ) ) { java.lang.String += STRING ; } else { java.lang.String += STRING + java.lang.Class<> + STRING ; } throw new java.lang.IllegalArgumentException ( java.lang.String ) ; } java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.Class<> , org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( AopUtils . isAopProxy ( java.lang.Object ) ) { java.lang.Class<?> = AopUtils . getTargetClass ( java.lang.Object ) ; if ( java.lang.Class<> == java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { try { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( ( Advised ) java.lang.Object ) . getProxiedInterfaces ( ) ; if ( java.lang.Class<?>[] != null && java.lang.Class<?>[] . int == NUMBER ) { java.lang.Class<?> = java.lang.Class<?>[] [ NUMBER ] ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.statemachine.processor.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.processor.Log . debug ( STRING , java.lang.Exception ) ; } } } } else if ( org . springframework . util . ClassUtils . isCglibProxyClass ( java.lang.Class<> ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<? super > ( ) ; if ( ! java.lang.Object .class . boolean ( java.lang.Class<> ) ) { java.lang.Class<?> = java.lang.Class<> ; } } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> < S , E > org.springframework.statemachine.processor.StateMachineMethodInvokerHelper<T,S,E>.ParametersWrapper<S,E> ) { if ( this . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod != null ) { return this . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ; } else { return this . java.util.Map<java.lang.Class<?>,org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod> . org.springframework.statemachine.processor.StateMachineMethodInvokerHelper.HandlerMethod ( java.lang.Void .class ) ; } }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { if ( java.lang.reflect.Method == null ) { return false ; } if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Object .class ) ) { return true ; } if ( ReflectionUtils . isEqualsMethod ( java.lang.reflect.Method ) || ReflectionUtils . isHashCodeMethod ( java.lang.reflect.Method ) || ReflectionUtils . isToStringMethod ( java.lang.reflect.Method ) || AopUtils . isFinalizeMethod ( java.lang.reflect.Method ) ) { return true ; } return ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . java.lang.Class<?>[] ( ) . int == NUMBER ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.reflect.Method java.lang.reflect.Method ) { this . java.lang.reflect.Method = java.lang.reflect.Method ; this . org.springframework.statemachine.processor.Expression = this . org.springframework.statemachine.processor.Expression ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> org.springframework.statemachine.processor.Expression org.springframework.statemachine.processor.Expression ( ) { return this . org.springframework.statemachine.processor.Expression ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.processor.Expression org.springframework.statemachine.processor.Expression ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.annotation.Annotation [] [] java.lang.annotation.Annotation[][] = java.lang.reflect.Method . java.lang.annotation.Annotation[][] ( ) ; boolean boolean = false ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { if ( int != NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } MethodParameter org.springframework.statemachine.processor.MethodParameter = new MethodParameter ( java.lang.reflect.Method , int ) ; TypeDescriptor org.springframework.statemachine.processor.TypeDescriptor = new TypeDescriptor ( org.springframework.statemachine.processor.MethodParameter ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.statemachine.processor.TypeDescriptor . getObjectType ( ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = java.lang.annotation.Annotation ( java.lang.annotation.Annotation[][] [ int ] ) ; if ( java.lang.annotation.Annotation != null ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( java.lang.Class<> . boolean ( EventHeaders .class ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( java.lang.Class<> . boolean ( ExtendedStateVariable .class ) ) { AnnotationAttributes org.springframework.statemachine.processor.AnnotationAttributes = AnnotationAttributes . fromMap ( AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ) ; java.lang.String java.lang.String = org.springframework.statemachine.processor.AnnotationAttributes . getString ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING + java.lang.String + STRING ) ; } } else if ( StateContext .class . boolean ( java.lang.Class<> ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( ExtendedState .class . boolean ( java.lang.Class<> ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( StateMachine .class . boolean ( java.lang.Class<> ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( Message .class . boolean ( java.lang.Class<> ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( java.lang.Exception .class . boolean ( java.lang.Class<> ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } if ( boolean ) { if ( java.lang.Class<> != null && java.util.Map .class . boolean ( this . java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( this . org.springframework.statemachine.processor.TypeDescriptor == null ) { this . org.springframework.statemachine.processor.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Void .class ) ; } return org.springframework.statemachine.processor.SpelExpressionParser . parseExpression ( java.lang.StringBuilder . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.annotation.Annotation java.lang.annotation.Annotation ( java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ) { if ( java.lang.annotation.Annotation[] == null || java.lang.annotation.Annotation[] . int == NUMBER ) { return null ; } java.lang.annotation.Annotation java.lang.annotation.Annotation = null ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( java.lang.Class<> . boolean ( EventHeaders .class ) ) { if ( java.lang.annotation.Annotation != null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) + STRING + java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) + STRING ) ; } java.lang.annotation.Annotation = java.lang.annotation.Annotation ; } else if ( java.lang.Class<> . boolean ( ExtendedStateVariable .class ) ) { if ( java.lang.annotation.Annotation != null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) + STRING + java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) + STRING ) ; } java.lang.annotation.Annotation = java.lang.annotation.Annotation ; } } return java.lang.annotation.Annotation ; }  <METHOD_END>
<METHOD_START> public void ( StateContext < SS , EE > org.springframework.statemachine.processor.StateContext<SS,EE> ) { this . org.springframework.statemachine.processor.StateContext<SS,EE> = org.springframework.statemachine.processor.StateContext<SS,EE> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.processor.StateContext<SS,EE> < SS , EE > org.springframework.statemachine.processor.StateContext<SS,EE> ( ) { return org.springframework.statemachine.processor.StateContext<SS,EE> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( ) { return org.springframework.statemachine.processor.StateContext<SS,EE> . getMessageHeaders ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.processor.ExtendedState org.springframework.statemachine.processor.ExtendedState ( ) { return org.springframework.statemachine.processor.StateContext<SS,EE> . getExtendedState ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ) { return org.springframework.statemachine.processor.ExtendedState ( ) . getVariables ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.processor.StateMachine<SS,EE> < SS , EE > org.springframework.statemachine.processor.StateMachine<SS,EE> ( ) { return org.springframework.statemachine.processor.StateContext<SS,EE> . getStateMachine ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.processor.Message<EE> < EE > org.springframework.statemachine.processor.Message<EE> ( ) { return org.springframework.statemachine.processor.StateContext<SS,EE> . getMessage ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Exception java.lang.Exception ( ) { return org.springframework.statemachine.processor.StateContext<SS,EE> . getException ( ) ; }  <METHOD_END>
