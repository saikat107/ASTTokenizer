<METHOD_START> public void ( PartTree org.springframework.data.keyvalue.repository.query.PartTree , ParameterAccessor org.springframework.data.keyvalue.repository.query.ParameterAccessor ) { super( org.springframework.data.keyvalue.repository.query.PartTree , org.springframework.data.keyvalue.repository.query.ParameterAccessor ); this . org.springframework.data.keyvalue.repository.query.SpelExpression = org.springframework.data.keyvalue.repository.query.SpelExpression ( org.springframework.data.keyvalue.repository.query.PartTree ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( Part org.springframework.data.keyvalue.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( Part org.springframework.data.keyvalue.repository.query.Part , java.lang.String java.lang.String , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.keyvalue.repository.query.KeyValueQuery<org.springframework.data.keyvalue.repository.query.SpelExpression> < SpelExpression > org.springframework.data.keyvalue.repository.query.KeyValueQuery<org.springframework.data.keyvalue.repository.query.SpelExpression> ( java.lang.String java.lang.String , Sort org.springframework.data.keyvalue.repository.query.Sort ) { KeyValueQuery < SpelExpression > org.springframework.data.keyvalue.repository.query.KeyValueQuery<org.springframework.data.keyvalue.repository.query.SpelExpression> = new KeyValueQuery < SpelExpression > ( this . org.springframework.data.keyvalue.repository.query.SpelExpression ) ; if ( org.springframework.data.keyvalue.repository.query.Sort != null ) { org.springframework.data.keyvalue.repository.query.KeyValueQuery<org.springframework.data.keyvalue.repository.query.SpelExpression> . orderBy ( org.springframework.data.keyvalue.repository.query.Sort ) ; } return org.springframework.data.keyvalue.repository.query.KeyValueQuery<org.springframework.data.keyvalue.repository.query.SpelExpression> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.keyvalue.repository.query.SpelExpression org.springframework.data.keyvalue.repository.query.SpelExpression ( PartTree org.springframework.data.keyvalue.repository.query.PartTree ) { int int = NUMBER ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator<org.springframework.data.keyvalue.repository.query.OrPart> < OrPart > java.util.Iterator<org.springframework.data.keyvalue.repository.query.OrPart> = org.springframework.data.keyvalue.repository.query.PartTree . iterator ( ) ; java.util.Iterator<org.springframework.data.keyvalue.repository.query.OrPart> . hasNext ( ) ;) { int int = NUMBER ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; OrPart org.springframework.data.keyvalue.repository.query.OrPart = java.util.Iterator<org.springframework.data.keyvalue.repository.query.OrPart> . next ( ) ; for ( java.util.Iterator<org.springframework.data.keyvalue.repository.query.Part> < Part > java.util.Iterator<org.springframework.data.keyvalue.repository.query.Part> = org.springframework.data.keyvalue.repository.query.OrPart . iterator ( ) ; java.util.Iterator<org.springframework.data.keyvalue.repository.query.Part> . hasNext ( ) ;) { Part org.springframework.data.keyvalue.repository.query.Part = java.util.Iterator<org.springframework.data.keyvalue.repository.query.Part> . next ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.keyvalue.repository.query.Part . getProperty ( ) . toDotPath ( ) . replace ( STRING , STRING ) ) ; if ( ! org.springframework.data.keyvalue.repository.query.Part . shouldIgnoreCase ( ) . equals ( IgnoreCaseType . NEVER ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } switch ( org.springframework.data.keyvalue.repository.query.Part . getType ( ) ) { case TRUE : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; case FALSE : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; case SIMPLE_PROPERTY : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case IS_NULL : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; case IS_NOT_NULL : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; case LIKE : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case STARTING_WITH : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case AFTER : case GREATER_THAN : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case GREATER_THAN_EQUAL : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case BEFORE : case LESS_THAN : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case LESS_THAN_EQUAL : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case ENDING_WITH : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case BETWEEN : int int = java.lang.StringBuilder . int ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( int , STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.keyvalue.repository.query.Part . getProperty ( ) . toDotPath ( ) . replace ( STRING , STRING ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; case REGEX : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ++ ) . java.lang.StringBuilder ( STRING ) ; break; case IN : case CONTAINING : case NOT_CONTAINING : case NEGATING_SIMPLE_PROPERTY : case EXISTS : default: throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.keyvalue.repository.query.Part . getType ( ) ) ) ; } if ( java.util.Iterator<org.springframework.data.keyvalue.repository.query.Part> . hasNext ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } int ++ ; } if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.StringBuilder ) . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder ) ; } if ( java.util.Iterator<org.springframework.data.keyvalue.repository.query.OrPart> . hasNext ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return org.springframework.data.keyvalue.repository.query.SpelExpressionParser . parseRaw ( java.lang.StringBuilder . java.lang.String ( ) ) ; }  <METHOD_END>
