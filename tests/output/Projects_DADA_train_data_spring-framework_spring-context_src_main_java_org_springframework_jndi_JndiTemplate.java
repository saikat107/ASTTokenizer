<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( ) { return this . java.util.Properties ; }  <METHOD_END>
<METHOD_START> public < T > T T ( JndiCallback < T > org.springframework.jndi.JndiCallback<T> ) throws javax.naming.NamingException { javax.naming.Context javax.naming.Context = javax.naming.Context ( ) ; try { return org.springframework.jndi.JndiCallback<T> . doInContext ( javax.naming.Context ) ; } finally { void ( javax.naming.Context ) ; } }  <METHOD_END>
<METHOD_START> public javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { return javax.naming.Context ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( javax.naming.Context javax.naming.Context ) { if ( javax.naming.Context != null ) { try { javax.naming.Context . void ( ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { org.springframework.jndi.Log . debug ( STRING , javax.naming.NamingException ) ; } } }  <METHOD_END>
<METHOD_START> protected javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { java.util.Hashtable<?,?> < ? , ? > java.util.Hashtable<?,?> = null ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; if ( java.util.Properties != null ) { java.util.Hashtable<?,?> = new java.util.Hashtable<java.lang.Object,java.lang.Object> <> ( java.util.Properties . int ( ) ) ; CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , java.util.Hashtable<,> ) ; } return new javax.naming.InitialContext ( java.util.Hashtable<,> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( final java.lang.String java.lang.String ) throws javax.naming.NamingException { if ( org.springframework.jndi.Log . isDebugEnabled ( ) ) { org.springframework.jndi.Log . debug ( STRING + java.lang.String + STRING ) ; } return T ( new JndiCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { java.lang.Object java.lang.Object = javax.naming.Context . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { throw new javax.naming.NameNotFoundException ( STRING + java.lang.String + STRING ) ; } return java.lang.Object ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { java.lang.Object java.lang.Object = javax.naming.Context . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { throw new javax.naming.NameNotFoundException ( STRING + java.lang.String + STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; if ( java.lang.Class<T> != null && ! java.lang.Class<T> . boolean ( java.lang.Object ) ) { throw new TypeMismatchNamingException ( java.lang.String , java.lang.Class<T> , ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ) ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) throws javax.naming.NamingException { if ( org.springframework.jndi.Log . isDebugEnabled ( ) ) { org.springframework.jndi.Log . debug ( STRING + java.lang.String + STRING ) ; } T ( new JndiCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { javax.naming.Context . void ( java.lang.String , java.lang.Object ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { javax.naming.Context . void ( java.lang.String , java.lang.Object ) ; return null ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) throws javax.naming.NamingException { if ( org.springframework.jndi.Log . isDebugEnabled ( ) ) { org.springframework.jndi.Log . debug ( STRING + java.lang.String + STRING ) ; } T ( new JndiCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { javax.naming.Context . void ( java.lang.String , java.lang.Object ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { javax.naming.Context . void ( java.lang.String , java.lang.Object ) ; return null ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) throws javax.naming.NamingException { if ( org.springframework.jndi.Log . isDebugEnabled ( ) ) { org.springframework.jndi.Log . debug ( STRING + java.lang.String + STRING ) ; } T ( new JndiCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { javax.naming.Context . void ( java.lang.String ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax.naming.Context javax.naming.Context ) throws javax.naming.NamingException { javax.naming.Context . void ( java.lang.String ) ; return null ; }  <METHOD_END>
