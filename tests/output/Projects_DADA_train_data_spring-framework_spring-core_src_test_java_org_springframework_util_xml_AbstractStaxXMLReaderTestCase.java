<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; org.xml.sax.XMLReader = org . xml . sax . helpers . org.xml.sax.helpers.XMLReaderFactory . org.xml.sax.XMLReader ( ) ; org.xml.sax.ContentHandler = org.xml.sax.ContentHandler ( ) ; org.xml.sax.XMLReader . void ( org.xml.sax.ContentHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( STRING , false ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( java.io.InputStream ( ) ) ) ; AbstractStaxXMLReader org.springframework.util.xml.AbstractStaxXMLReader = org.springframework.util.xml.AbstractStaxXMLReader ( java.io.InputStream ( ) ) ; org.xml.sax.ContentHandler org.xml.sax.ContentHandler = org.xml.sax.ContentHandler ( ) ; org.springframework.util.xml.AbstractStaxXMLReader . setFeature ( STRING , true ) ; org.springframework.util.xml.AbstractStaxXMLReader . setFeature ( STRING , false ) ; org.springframework.util.xml.AbstractStaxXMLReader . setContentHandler ( org.xml.sax.ContentHandler ) ; org.springframework.util.xml.AbstractStaxXMLReader . parse ( new org.xml.sax.InputSource ( ) ) ; void ( org.xml.sax.ContentHandler , org.xml.sax.ContentHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( java.io.InputStream ( ) ) ) ; AbstractStaxXMLReader org.springframework.util.xml.AbstractStaxXMLReader = org.springframework.util.xml.AbstractStaxXMLReader ( java.io.InputStream ( ) ) ; org.xml.sax.ContentHandler org.xml.sax.ContentHandler = org.xml.sax.ContentHandler ( ) ; org.springframework.util.xml.AbstractStaxXMLReader . setFeature ( STRING , true ) ; org.springframework.util.xml.AbstractStaxXMLReader . setFeature ( STRING , true ) ; org.springframework.util.xml.AbstractStaxXMLReader . setContentHandler ( org.xml.sax.ContentHandler ) ; org.springframework.util.xml.AbstractStaxXMLReader . parse ( new org.xml.sax.InputSource ( ) ) ; void ( org.xml.sax.ContentHandler , org.xml.sax.ContentHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.xml.sax.XMLReader . void ( STRING , false ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( java.io.InputStream ( ) ) ) ; AbstractStaxXMLReader org.springframework.util.xml.AbstractStaxXMLReader = org.springframework.util.xml.AbstractStaxXMLReader ( java.io.InputStream ( ) ) ; org.xml.sax.ContentHandler org.xml.sax.ContentHandler = org.xml.sax.ContentHandler ( ) ; org.springframework.util.xml.AbstractStaxXMLReader . setFeature ( STRING , false ) ; org.springframework.util.xml.AbstractStaxXMLReader . setFeature ( STRING , true ) ; org.springframework.util.xml.AbstractStaxXMLReader . setContentHandler ( org.xml.sax.ContentHandler ) ; org.springframework.util.xml.AbstractStaxXMLReader . parse ( new org.xml.sax.InputSource ( ) ) ; void ( org.xml.sax.ContentHandler , org.xml.sax.ContentHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; javax.xml.transform.Transformer javax.xml.transform.Transformer = javax.xml.transform.TransformerFactory . javax.xml.transform.TransformerFactory ( ) . javax.xml.transform.Transformer ( ) ; AbstractStaxXMLReader org.springframework.util.xml.AbstractStaxXMLReader = org.springframework.util.xml.AbstractStaxXMLReader ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ) ; javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource = new javax.xml.transform.sax.SAXSource ( org.springframework.util.xml.AbstractStaxXMLReader , new org.xml.sax.InputSource ( ) ) ; javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = new javax.xml.transform.dom.DOMResult ( ) ; javax.xml.transform.Transformer . void ( javax.xml.transform.sax.SAXSource , javax.xml.transform.dom.DOMResult ) ; org.w3c.dom.Node org.w3c.dom.Node = javax.xml.transform.dom.DOMResult . org.w3c.dom.Node ( ) . org.w3c.dom.Node ( ) . org.w3c.dom.Node ( ) ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.Node ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.util.xml.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.util.xml.AbstractStaxXMLReaderTestCase> ( ) ) ; org.xml.sax.ext.LexicalHandler org.xml.sax.ext.LexicalHandler = org.xml.sax.ext.LexicalHandler ( ) ; org.xml.sax.XMLReader . void ( null ) ; org.xml.sax.XMLReader . void ( STRING , org.xml.sax.ext.LexicalHandler ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( org.springframework.util.xml.Resource . getInputStream ( ) ) ) ; javax.xml.stream.XMLInputFactory . void ( STRING , java.lang.Boolean . java.lang.Boolean ) ; javax.xml.stream.XMLInputFactory . void ( STRING , java.lang.Boolean . java.lang.Boolean ) ; javax.xml.stream.XMLInputFactory . void ( STRING , java.lang.Boolean . java.lang.Boolean ) ; javax.xml.stream.XMLInputFactory . void ( STRING , java.lang.Boolean . java.lang.Boolean ) ; org.xml.sax.ext.LexicalHandler org.xml.sax.ext.LexicalHandler = org.xml.sax.ext.LexicalHandler ( ) ; willAnswer ( invocation -> invocation . getArguments ( ) [ NUMBER ] = STRING ) . given ( org.xml.sax.ext.LexicalHandler ) . startDTD ( anyString ( ) , anyString ( ) , anyString ( ) ) ; AbstractStaxXMLReader org.springframework.util.xml.AbstractStaxXMLReader = org.springframework.util.xml.AbstractStaxXMLReader ( org.springframework.util.xml.Resource . getInputStream ( ) ) ; org.springframework.util.xml.AbstractStaxXMLReader . setProperty ( STRING , org.xml.sax.ext.LexicalHandler ) ; org.springframework.util.xml.AbstractStaxXMLReader . parse ( new org.xml.sax.InputSource ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.xml.sax.ext.LexicalHandler org.xml.sax.ext.LexicalHandler ( ) java.lang.Exception { org.xml.sax.ext.LexicalHandler org.xml.sax.ext.LexicalHandler = mock ( org.xml.sax.ext.LexicalHandler .class ) ; willAnswer ( new org.springframework.util.xml.AbstractStaxXMLReaderTestCase.CopyCharsAnswer ( ) ) . given ( org.xml.sax.ext.LexicalHandler ) . comment ( any ( char [] .class ) , anyInt ( ) , anyInt ( ) ) ; return org.xml.sax.ext.LexicalHandler ; }  <METHOD_END>
<METHOD_START> private java.io.InputStream java.io.InputStream ( ) { return java.lang.Class<? extends org.springframework.util.xml.AbstractStaxXMLReaderTestCase> ( ) . java.io.InputStream ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected final org.xml.sax.ContentHandler org.xml.sax.ContentHandler ( ) java.lang.Exception { org.xml.sax.ContentHandler org.xml.sax.ContentHandler = mock ( org.xml.sax.ContentHandler .class ) ; willAnswer ( new org.springframework.util.xml.AbstractStaxXMLReaderTestCase.CopyCharsAnswer ( ) ) . given ( org.xml.sax.ContentHandler ) . characters ( any ( char [] .class ) , anyInt ( ) , anyInt ( ) ) ; willAnswer ( new org.springframework.util.xml.AbstractStaxXMLReaderTestCase.CopyCharsAnswer ( ) ) . given ( org.xml.sax.ContentHandler ) . ignorableWhitespace ( any ( char [] .class ) , anyInt ( ) , anyInt ( ) ) ; willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.util.xml.InvocationOnMock ) throws java.lang.Throwable { org.springframework.util.xml.InvocationOnMock . getArguments ( ) [ NUMBER ] = new org.xml.sax.helpers.AttributesImpl ( ( org.xml.sax.Attributes ) org.springframework.util.xml.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; return null ; } } ) . given ( org.xml.sax.ContentHandler ) . startElement ( anyString ( ) , anyString ( ) , anyString ( ) , any ( org.xml.sax.Attributes .class ) ) ; return org.xml.sax.ContentHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.util.xml.InvocationOnMock ) throws java.lang.Throwable { org.springframework.util.xml.InvocationOnMock . getArguments ( ) [ NUMBER ] = new org.xml.sax.helpers.AttributesImpl ( ( org.xml.sax.Attributes ) org.springframework.util.xml.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; return null ; }  <METHOD_END>
<METHOD_START> protected < T > void void ( T T , T T ) { MockitoUtils . verifySameInvocations ( T , T , new org.springframework.util.xml.AbstractStaxXMLReaderTestCase.SkipLocatorArgumentsAdapter ( ) , new org.springframework.util.xml.AbstractStaxXMLReaderTestCase.CharArrayToStringAdapter ( ) , new org.springframework.util.xml.AbstractStaxXMLReaderTestCase.PartialAttributesAdapter ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.util.xml.AbstractStaxXMLReader org.springframework.util.xml.AbstractStaxXMLReader ( java.io.InputStream java.io.InputStream ) throws javax.xml.stream.XMLStreamException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( java.lang.Object [] java.lang.Object[] ) { for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { if ( java.lang.Object[] [ int ] instanceof org.xml.sax.Locator ) { java.lang.Object[] [ int ] = null ; } } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( java.lang.Object [] java.lang.Object[] ) { if ( java.lang.Object[] . int == NUMBER && java.lang.Object[] [ NUMBER ] instanceof char [] && java.lang.Object[] [ NUMBER ] instanceof java.lang.Integer && java.lang.Object[] [ NUMBER ] instanceof java.lang.Integer ) { return new java.lang.Object [] { new java.lang.String ( ( char [] ) java.lang.Object[] [ NUMBER ] , ( java.lang.Integer ) java.lang.Object[] [ NUMBER ] , ( java.lang.Integer ) java.lang.Object[] [ NUMBER ] ) } ; } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( java.lang.Object [] java.lang.Object[] ) { for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { if ( java.lang.Object[] [ int ] instanceof org.xml.sax.Attributes ) { java.lang.Object[] [ int ] = new org.springframework.util.xml.AbstractStaxXMLReaderTestCase.PartialAttributes ( ( org.xml.sax.Attributes ) java.lang.Object[] [ int ] ) ; } } ; return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.util.xml.InvocationOnMock ) throws java.lang.Throwable { char [] char[] = ( char [] ) org.springframework.util.xml.InvocationOnMock . getArguments ( ) [ NUMBER ] ; char [] char[] = new char [ char[] . int ] ; java.lang.System . void ( char[] , NUMBER , char[] , NUMBER , char[] . int ) ; org.springframework.util.xml.InvocationOnMock . getArguments ( ) [ NUMBER ] = char[] ; return null ; }  <METHOD_END>
<METHOD_START> public void ( org.xml.sax.Attributes org.xml.sax.Attributes ) { this . org.xml.sax.Attributes = org.xml.sax.Attributes ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { org.xml.sax.Attributes org.xml.sax.Attributes = ( ( org.springframework.util.xml.AbstractStaxXMLReaderTestCase.PartialAttributes ) java.lang.Object ) . org.xml.sax.Attributes ; if ( this . org.xml.sax.Attributes . int ( ) != org.xml.sax.Attributes . int ( ) ) { return false ; } for ( int int = NUMBER ; int < org.xml.sax.Attributes . int ( ) ; int ++ ) { boolean boolean = false ; for ( int int = NUMBER ; int < org.xml.sax.Attributes . int ( ) ; int ++ ) { if ( org.xml.sax.Attributes . java.lang.String ( int ) . boolean ( org.xml.sax.Attributes . java.lang.String ( int ) ) && org.xml.sax.Attributes . java.lang.String ( int ) . boolean ( org.xml.sax.Attributes . java.lang.String ( int ) ) && org.xml.sax.Attributes . java.lang.String ( int ) . boolean ( org.xml.sax.Attributes . java.lang.String ( int ) ) && org.xml.sax.Attributes . java.lang.String ( int ) . boolean ( org.xml.sax.Attributes . java.lang.String ( int ) ) ) { boolean = true ; break; } } if ( ! boolean ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
