<METHOD_START> @ java.lang.Override protected org.springframework.beans.BeanWrapperImpl org.springframework.beans.BeanWrapperImpl ( java.lang.Object java.lang.Object ) { return new BeanWrapperImpl ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.GetterBean org.springframework.beans.BeanWrapperTests.GetterBean = new org.springframework.beans.BeanWrapperTests.GetterBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.GetterBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.BeanWrapperTests.GetterBean . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.GetterBean org.springframework.beans.BeanWrapperTests.GetterBean = new org.springframework.beans.BeanWrapperTests.GetterBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.GetterBean ) ; org.springframework.beans.BeanWrapper . setExtractOldValueForEditor ( true ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.BeanWrapperTests.GetterBean . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.GetterBean org.springframework.beans.BeanWrapperTests.GetterBean = new org.springframework.beans.BeanWrapperTests.GetterBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.GetterBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.BeanWrapperTests.GetterBean . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; try { BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.TestBean ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.BeanWrapper . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; fail ( STRING ) ; } catch ( PropertyBatchUpdateException org.springframework.beans.PropertyBatchUpdateException ) { assertTrue ( STRING , org.springframework.beans.PropertyBatchUpdateException . getExceptionCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) . equals ( java.lang.String ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.PropertyBatchUpdateException . getPropertyAccessException ( STRING ) . getPropertyChangeEvent ( ) . getNewValue ( ) . equals ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; try { BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.TestBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { assertEquals ( NUMBER , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) . length ) ; assertEquals ( STRING , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) [ NUMBER ] ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.TypedReadOnlyMap org.springframework.beans.BeanWrapperTests.TypedReadOnlyMap = new org.springframework.beans.BeanWrapperTests.TypedReadOnlyMap ( java.util.Collections . java.util.Map ( STRING , new TestBean ( ) ) ) ; org.springframework.beans.BeanWrapperTests.TypedReadOnlyMapClient org.springframework.beans.BeanWrapperTests.TypedReadOnlyMapClient = new org.springframework.beans.BeanWrapperTests.TypedReadOnlyMapClient ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.TypedReadOnlyMapClient ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , org.springframework.beans.BeanWrapperTests.TypedReadOnlyMap ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.IntelliBean org.springframework.beans.BeanWrapperTests.IntelliBean = new org.springframework.beans.BeanWrapperTests.IntelliBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.IntelliBean ) ; try { org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { assertNotNull ( STRING , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) . length ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.IntelliBean org.springframework.beans.BeanWrapperTests.IntelliBean = new org.springframework.beans.BeanWrapperTests.IntelliBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.IntelliBean ) ; try { org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { assertNotNull ( STRING , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) . length ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.PropertyTypeMismatch org.springframework.beans.BeanWrapperTests.PropertyTypeMismatch = new org.springframework.beans.BeanWrapperTests.PropertyTypeMismatch ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.PropertyTypeMismatch ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapperTests.PropertyTypeMismatch . java.lang.String ) ; assertTrue ( org.springframework.beans.BeanWrapperTests.PropertyTypeMismatch . java.lang.Integer ( ) == NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; org.springframework.beans.TestBean . setSpouse ( new TestBean ( ) ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.TestBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getSpouse ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.String .class , org.springframework.beans.BeanWrapper . getPropertyDescriptor ( STRING ) . getPropertyType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.beans.BeanWrapper . getPropertyDescriptor ( STRING ) . getPropertyType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.GetterWithOptional org.springframework.beans.BeanWrapperTests.GetterWithOptional = new org.springframework.beans.BeanWrapperTests.GetterWithOptional ( ) ; TestBean org.springframework.beans.TestBean = new TestBean ( STRING ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.GetterWithOptional ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , org.springframework.beans.TestBean ) ; assertSame ( org.springframework.beans.TestBean , org.springframework.beans.BeanWrapperTests.GetterWithOptional . org.springframework.beans.TestBean ) ; assertSame ( org.springframework.beans.TestBean , org.springframework.beans.BeanWrapperTests.GetterWithOptional . java.util.Optional<org.springframework.beans.TestBean> ( ) . get ( ) ) ; assertSame ( org.springframework.beans.TestBean , ( ( java.util.Optional<java.lang.String> < java.lang.String > ) org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapperTests.GetterWithOptional . org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapperTests.GetterWithOptional . java.util.Optional<org.springframework.beans.TestBean> ( ) . get ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertSame ( org.springframework.beans.TestBean , org.springframework.beans.BeanWrapperTests.GetterWithOptional . org.springframework.beans.TestBean ) ; assertSame ( org.springframework.beans.TestBean , org.springframework.beans.BeanWrapperTests.GetterWithOptional . java.util.Optional<org.springframework.beans.TestBean> ( ) . get ( ) ) ; assertSame ( org.springframework.beans.TestBean , ( ( java.util.Optional<java.lang.String> < java.lang.String > ) org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapperTests.GetterWithOptional . org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapperTests.GetterWithOptional . java.util.Optional<org.springframework.beans.TestBean> ( ) . get ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperTests.GetterWithOptional org.springframework.beans.BeanWrapperTests.GetterWithOptional = new org.springframework.beans.BeanWrapperTests.GetterWithOptional ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.BeanWrapperTests.GetterWithOptional ) ; org.springframework.beans.BeanWrapper . setAutoGrowNestedPaths ( true ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapperTests.GetterWithOptional . org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapperTests.GetterWithOptional . java.util.Optional<org.springframework.beans.TestBean> ( ) . get ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; try { BeanWrapper org.springframework.beans.BeanWrapper = org.springframework.beans.BeanWrapperImpl ( org.springframework.beans.TestBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { assertNull ( org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) ) ; } }  <METHOD_END>
<METHOD_START> default void void ( java.lang.String java.lang.String ) { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> default java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( this . java.lang.String == null ) { throw new java.lang.RuntimeException ( STRING ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.Map<? extends java.lang.String,? extends org.springframework.beans.TestBean> < ? extends java.lang.String , ? extends TestBean > java.util.Map<? extends java.lang.String,? extends org.springframework.beans.TestBean> ) { super( java.util.Map<,> ); }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.BeanWrapperTests.TypedReadOnlyMap org.springframework.beans.BeanWrapperTests.TypedReadOnlyMap ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return ( this . java.lang.String != null ? this . java.lang.String . int ( ) : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( TestBean org.springframework.beans.TestBean ) { this . org.springframework.beans.TestBean = org.springframework.beans.TestBean ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.beans.TestBean> < TestBean > java.util.Optional<org.springframework.beans.TestBean> ( ) { return java.util.Optional . java.util.Optional ( this . org.springframework.beans.TestBean ) ; }  <METHOD_END>
