<METHOD_START> public void ( Property org.springframework.data.mongodb.core.mapping.Property , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.mapping.MongoPersistentEntity<?> , SimpleTypeHolder org.springframework.data.mongodb.core.mapping.SimpleTypeHolder , FieldNamingStrategy org.springframework.data.mongodb.core.mapping.FieldNamingStrategy ) { super( org.springframework.data.mongodb.core.mapping.Property , org.springframework.data.mongodb.core.mapping.MongoPersistentEntity<> , org.springframework.data.mongodb.core.mapping.SimpleTypeHolder ); this . org.springframework.data.mongodb.core.mapping.FieldNamingStrategy = org.springframework.data.mongodb.core.mapping.FieldNamingStrategy == null ? PropertyNameFieldNamingStrategy . INSTANCE : org.springframework.data.mongodb.core.mapping.FieldNamingStrategy ; if ( boolean ( ) && java.lang.String ( ) != java.lang.String ) { org.springframework.data.mongodb.core.mapping.Logger . warn ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( super. isIdProperty ( ) ) { return true ; } return java.util.Set<java.lang.String> . boolean ( getName ( ) ) && ! boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( Id .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { if ( ! getOwner ( ) . getIdProperty ( ) . isPresent ( ) ) { return java.lang.String ; } if ( getOwner ( ) . isIdProperty ( this ) ) { return java.lang.String ; } } if ( boolean ( ) ) { return java.lang.String ( ) ; } java.lang.String java.lang.String = org.springframework.data.mongodb.core.mapping.FieldNamingStrategy . getFieldName ( this ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , this , org.springframework.data.mongodb.core.mapping.FieldNamingStrategy . getClass ( ) ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return StringUtils . hasText ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.util.Optional<org.springframework.data.mongodb.core.mapping.Field> < org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.Field > java.util.Optional<org.springframework.data.mongodb.core.mapping.Field> = findAnnotation ( org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.Field .class ) ; return java.util.Optional<org.springframework.data.mongodb.core.mapping.Field> . filter ( it -> StringUtils . hasText ( it . value ( ) ) ) . map ( it -> it . value ( ) ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { java.util.Optional<org.springframework.data.mongodb.core.mapping.Field> < org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.Field > java.util.Optional<org.springframework.data.mongodb.core.mapping.Field> = findAnnotation ( org . springframework . data . mongodb . core . mapping . org.springframework.data.mongodb.core.mapping.Field .class ) ; return java.util.Optional<org.springframework.data.mongodb.core.mapping.Field> . map ( it -> it . order ( ) ) . orElse ( java.lang.Integer . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.mapping.Association<org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> < MongoPersistentProperty > org.springframework.data.mongodb.core.mapping.Association<org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> ( ) { return new Association < MongoPersistentProperty > ( this , null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return isAnnotationPresent ( DBRef .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.mapping.DBRef org.springframework.data.mongodb.core.mapping.DBRef ( ) { return findAnnotation ( DBRef .class ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.lang.String ( ) . boolean ( java.lang.String ) || boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( Language .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( TextScore .class ) ; }  <METHOD_END>
