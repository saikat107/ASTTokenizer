<METHOD_START> protected java.rmi.Remote java.rmi.Remote ( ) { if ( getService ( ) instanceof java.rmi.Remote && ( getServiceInterface ( ) == null || java.rmi.Remote .class . boolean ( getServiceInterface ( ) ) ) ) { return ( java.rmi.Remote ) getService ( ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getService ( ) + STRING ) ; } return new RmiInvocationWrapper ( getProxyForService ( ) , this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.rmi.RemoteInvocation , java.lang.Object java.lang.Object )			throws java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { return super. invoke ( org.springframework.remoting.rmi.RemoteInvocation , java.lang.Object ) ; }  <METHOD_END>
