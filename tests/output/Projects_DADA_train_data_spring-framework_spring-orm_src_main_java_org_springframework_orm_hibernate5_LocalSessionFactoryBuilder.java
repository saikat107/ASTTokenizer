<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { this( javax.sql.DataSource , new PathMatchingResourcePatternResolver ( ) ); }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.ClassLoader java.lang.ClassLoader ) { this( javax.sql.DataSource , new PathMatchingResourcePatternResolver ( java.lang.ClassLoader ) ); }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , ResourceLoader org.springframework.orm.hibernate5.ResourceLoader ) { this( javax.sql.DataSource , org.springframework.orm.hibernate5.ResourceLoader , new MetadataSources ( new BootstrapServiceRegistryBuilder ( ) . applyClassLoader ( org.springframework.orm.hibernate5.ResourceLoader . getClassLoader ( ) ) . build ( ) ) ); }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , ResourceLoader org.springframework.orm.hibernate5.ResourceLoader , MetadataSources org.springframework.orm.hibernate5.MetadataSources ) { super( org.springframework.orm.hibernate5.MetadataSources ); getProperties ( ) . put ( AvailableSettings . CURRENT_SESSION_CONTEXT_CLASS , SpringSessionContext .class . java.lang.String ( ) ) ; if ( javax.sql.DataSource != null ) { getProperties ( ) . put ( AvailableSettings . DATASOURCE , javax.sql.DataSource ) ; } try { AvailableSettings .class . java.lang.reflect.Field ( STRING ) ; getProperties ( ) . put ( STRING , STRING ) ; } catch ( java.lang.NoSuchFieldException java.lang.NoSuchFieldException ) { try { AvailableSettings .class . java.lang.reflect.Field ( STRING ) ; getProperties ( ) . put ( STRING , STRING ) ; } catch ( java.lang.NoSuchFieldException java.lang.NoSuchFieldException ) { } } getProperties ( ) . put ( AvailableSettings . CLASSLOADERS , java.util.Collections . java.util.Set ( org.springframework.orm.hibernate5.ResourceLoader . getClassLoader ( ) ) ) ; this . org.springframework.orm.hibernate5.ResourcePatternResolver = ResourcePatternUtils . getResourcePatternResolver ( org.springframework.orm.hibernate5.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.LocalSessionFactoryBuilder org.springframework.orm.hibernate5.LocalSessionFactoryBuilder ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof JtaTransactionManager ) { boolean boolean = ClassUtils . isPresent ( STRING , java.lang.Class<? extends org.springframework.orm.hibernate5.LocalSessionFactoryBuilder> ( ) . java.lang.ClassLoader ( ) ) ; if ( boolean ) { getProperties ( ) . put ( AvailableSettings . JTA_PLATFORM , STRING ) ; } else { JtaTransactionManager org.springframework.orm.hibernate5.JtaTransactionManager = ( JtaTransactionManager ) java.lang.Object ; if ( org.springframework.orm.hibernate5.JtaTransactionManager . getTransactionManager ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } getProperties ( ) . put ( AvailableSettings . JTA_PLATFORM , new ConfigurableJtaPlatform ( org.springframework.orm.hibernate5.JtaTransactionManager . getTransactionManager ( ) , org.springframework.orm.hibernate5.JtaTransactionManager . getUserTransaction ( ) , org.springframework.orm.hibernate5.JtaTransactionManager . getTransactionSynchronizationRegistry ( ) ) ) ; } } else if ( java.lang.Object instanceof TransactionManager ) { getProperties ( ) . put ( AvailableSettings . JTA_PLATFORM , new ConfigurableJtaPlatform ( ( TransactionManager ) java.lang.Object , null , null ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } try { AvailableSettings .class . java.lang.reflect.Field ( STRING ) ; getProperties ( ) . put ( STRING , STRING ) ; } catch ( java.lang.NoSuchFieldException java.lang.NoSuchFieldException ) { try { AvailableSettings .class . java.lang.reflect.Field ( STRING ) ; getProperties ( ) . put ( STRING , STRING ) ; } catch ( java.lang.NoSuchFieldException java.lang.NoSuchFieldException ) { } } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.LocalSessionFactoryBuilder org.springframework.orm.hibernate5.LocalSessionFactoryBuilder ( MultiTenantConnectionProvider org.springframework.orm.hibernate5.MultiTenantConnectionProvider ) { getProperties ( ) . put ( AvailableSettings . MULTI_TENANT_CONNECTION_PROVIDER , org.springframework.orm.hibernate5.MultiTenantConnectionProvider ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CurrentTenantIdentifierResolver org.springframework.orm.hibernate5.CurrentTenantIdentifierResolver ) { getProperties ( ) . put ( AvailableSettings . MULTI_TENANT_IDENTIFIER_RESOLVER , org.springframework.orm.hibernate5.CurrentTenantIdentifierResolver ) ; super. setCurrentTenantIdentifierResolver ( org.springframework.orm.hibernate5.CurrentTenantIdentifierResolver ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.LocalSessionFactoryBuilder org.springframework.orm.hibernate5.LocalSessionFactoryBuilder ( TypeFilter ... org.springframework.orm.hibernate5.TypeFilter[] ) { this . org.springframework.orm.hibernate5.TypeFilter[] = org.springframework.orm.hibernate5.TypeFilter[] ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.LocalSessionFactoryBuilder org.springframework.orm.hibernate5.LocalSessionFactoryBuilder ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { addAnnotatedClass ( java.lang.Class<> ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.LocalSessionFactoryBuilder org.springframework.orm.hibernate5.LocalSessionFactoryBuilder ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { addPackage ( java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.orm.hibernate5.LocalSessionFactoryBuilder org.springframework.orm.hibernate5.LocalSessionFactoryBuilder ( java.lang.String ... java.lang.String[] ) throws org.springframework.orm.hibernate5.HibernateException { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; try { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + ClassUtils . convertClassNameToResourcePath ( java.lang.String ) + java.lang.String ; Resource [] org.springframework.orm.hibernate5.Resource[] = this . org.springframework.orm.hibernate5.ResourcePatternResolver . getResources ( java.lang.String ) ; MetadataReaderFactory org.springframework.orm.hibernate5.MetadataReaderFactory = new CachingMetadataReaderFactory ( this . org.springframework.orm.hibernate5.ResourcePatternResolver ) ; for ( Resource org.springframework.orm.hibernate5.Resource : org.springframework.orm.hibernate5.Resource[] ) { if ( org.springframework.orm.hibernate5.Resource . isReadable ( ) ) { MetadataReader org.springframework.orm.hibernate5.MetadataReader = org.springframework.orm.hibernate5.MetadataReaderFactory . getMetadataReader ( org.springframework.orm.hibernate5.Resource ) ; java.lang.String java.lang.String = org.springframework.orm.hibernate5.MetadataReader . getClassMetadata ( ) . getClassName ( ) ; if ( boolean ( org.springframework.orm.hibernate5.MetadataReader , org.springframework.orm.hibernate5.MetadataReaderFactory ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } else if ( org.springframework.orm.hibernate5.TypeFilter . match ( org.springframework.orm.hibernate5.MetadataReader , org.springframework.orm.hibernate5.MetadataReaderFactory ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ) ; } } } } } catch ( java.io.IOException java.io.IOException ) { throw new MappingException ( STRING , java.io.IOException ) ; } try { java.lang.ClassLoader java.lang.ClassLoader = this . org.springframework.orm.hibernate5.ResourcePatternResolver . getClassLoader ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { addAnnotatedClass ( java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { addAttributeConverter ( ( java.lang.Class<? extends org.springframework.orm.hibernate5.AttributeConverter<?,?>> < ? extends AttributeConverter < ? , ? > > ) java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { addPackage ( java.lang.String ) ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new MappingException ( STRING , java.lang.ClassNotFoundException ) ; } return this ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MetadataReader org.springframework.orm.hibernate5.MetadataReader , MetadataReaderFactory org.springframework.orm.hibernate5.MetadataReaderFactory ) throws java.io.IOException { if ( this . org.springframework.orm.hibernate5.TypeFilter[] != null ) { for ( TypeFilter org.springframework.orm.hibernate5.TypeFilter : this . org.springframework.orm.hibernate5.TypeFilter[] ) { if ( org.springframework.orm.hibernate5.TypeFilter . match ( org.springframework.orm.hibernate5.MetadataReader , org.springframework.orm.hibernate5.MetadataReaderFactory ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.hibernate5.SessionFactory org.springframework.orm.hibernate5.SessionFactory ( AsyncTaskExecutor org.springframework.orm.hibernate5.AsyncTaskExecutor ) { Assert . notNull ( org.springframework.orm.hibernate5.AsyncTaskExecutor , STRING ) ; return ( SessionFactory ) java.lang.reflect.Proxy . java.lang.Object ( this . org.springframework.orm.hibernate5.ResourcePatternResolver . getClassLoader ( ) , new java.lang.Class<?> < ? > [] { SessionFactoryImplementor .class , InfrastructureProxy .class } , new org.springframework.orm.hibernate5.LocalSessionFactoryBuilder.BootstrapSessionFactoryInvocationHandler ( org.springframework.orm.hibernate5.AsyncTaskExecutor ) ) ; }  <METHOD_END>
<METHOD_START> public void ( AsyncTaskExecutor org.springframework.orm.hibernate5.AsyncTaskExecutor ) { this . java.util.concurrent.Future<org.springframework.orm.hibernate5.SessionFactory> = org.springframework.orm.hibernate5.AsyncTaskExecutor . submit ( new java.util.concurrent.Callable<org.springframework.orm.hibernate5.SessionFactory> < SessionFactory > ( ) { @ java.lang.Override public org.springframework.orm.hibernate5.SessionFactory org.springframework.orm.hibernate5.SessionFactory ( ) java.lang.Exception { return org.springframework.orm.hibernate5.SessionFactory ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.hibernate5.SessionFactory org.springframework.orm.hibernate5.SessionFactory ( ) java.lang.Exception { return org.springframework.orm.hibernate5.SessionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { try { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return getProperties ( ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return org.springframework.orm.hibernate5.SessionFactory ( ) ; } return java.lang.reflect.Method . java.lang.Object ( org.springframework.orm.hibernate5.SessionFactory ( ) , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.orm.hibernate5.SessionFactory org.springframework.orm.hibernate5.SessionFactory ( ) { try { return this . java.util.concurrent.Future<org.springframework.orm.hibernate5.SessionFactory> . get ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.InterruptedException . java.lang.String ( ) ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { throw new java.lang.IllegalStateException ( STRING + java.util.concurrent.ExecutionException . java.lang.String ( ) , java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ) ; } }  <METHOD_END>
