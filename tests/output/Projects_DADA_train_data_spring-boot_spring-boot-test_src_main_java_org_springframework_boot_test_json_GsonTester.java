<METHOD_START> protected void ( Gson org.springframework.boot.test.json.Gson ) { Assert . notNull ( org.springframework.boot.test.json.Gson , STRING ) ; this . org.springframework.boot.test.json.Gson = org.springframework.boot.test.json.Gson ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.boot.test.json.ResolvableType , Gson org.springframework.boot.test.json.Gson ) { super( java.lang.Class<> , org.springframework.boot.test.json.ResolvableType ); Assert . notNull ( org.springframework.boot.test.json.Gson , STRING ) ; this . org.springframework.boot.test.json.Gson = org.springframework.boot.test.json.Gson ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( T T , ResolvableType org.springframework.boot.test.json.ResolvableType ) throws java.io.IOException { return this . org.springframework.boot.test.json.Gson . toJson ( T , org.springframework.boot.test.json.ResolvableType . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected T T ( java.io.Reader java.io.Reader , ResolvableType org.springframework.boot.test.json.ResolvableType ) throws java.io.IOException { return this . org.springframework.boot.test.json.Gson . fromJson ( java.io.Reader , org.springframework.boot.test.json.ResolvableType . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Object java.lang.Object , Gson org.springframework.boot.test.json.Gson ) { new org.springframework.boot.test.json.GsonTester.GsonFieldInitializer ( ) . initFields ( java.lang.Object , org.springframework.boot.test.json.Gson ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Object java.lang.Object , ObjectFactory < Gson > org.springframework.boot.test.json.ObjectFactory<org.springframework.boot.test.json.Gson> ) { new org.springframework.boot.test.json.GsonTester.GsonFieldInitializer ( ) . initFields ( java.lang.Object , org.springframework.boot.test.json.ObjectFactory<org.springframework.boot.test.json.Gson> ) ; }  <METHOD_END>
<METHOD_START> protected void ( ) { super( org.springframework.boot.test.json.GsonTester .class ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.boot.test.json.ResolvableType , Gson org.springframework.boot.test.json.Gson ) { return new org.springframework.boot.test.json.GsonTester <> ( java.lang.Class<> , org.springframework.boot.test.json.ResolvableType , org.springframework.boot.test.json.Gson ) ; }  <METHOD_END>
