<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.ManagementServletContext org.springframework.boot.actuate.autoconfigure.ManagementServletContext ( final ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ) { return new ManagementServletContext ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ; }  <METHOD_END>
<METHOD_START> @ ConditionalOnEnabledEndpoint ( STRING ) @ Bean public org.springframework.boot.actuate.autoconfigure.HalJsonMvcEndpoint org.springframework.boot.actuate.autoconfigure.HalJsonMvcEndpoint ( ManagementServletContext org.springframework.boot.actuate.autoconfigure.ManagementServletContext , ResourceProperties org.springframework.boot.actuate.autoconfigure.ResourceProperties , ResourceLoader org.springframework.boot.actuate.autoconfigure.ResourceLoader ) { if ( HalBrowserMvcEndpoint . getHalBrowserLocation ( org.springframework.boot.actuate.autoconfigure.ResourceLoader ) != null ) { return new HalBrowserMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.ManagementServletContext ) ; } return new HalJsonMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.ManagementServletContext ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( DocsMvcEndpoint .class ) @ ConditionalOnMissingBean ( CurieProvider .class ) @ ConditionalOnProperty ( prefix = STRING , name = STRING , matchIfMissing = false ) public org.springframework.boot.actuate.autoconfigure.DefaultCurieProvider org.springframework.boot.actuate.autoconfigure.DefaultCurieProvider ( ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties , DocsMvcEndpoint org.springframework.boot.actuate.autoconfigure.DocsMvcEndpoint ) { java.lang.String java.lang.String = org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) + org.springframework.boot.actuate.autoconfigure.DocsMvcEndpoint . getPath ( ) + STRING ; return new DefaultCurieProvider ( STRING , new UriTemplate ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnEnabledEndpoint ( STRING ) @ ConditionalOnResource ( resources = STRING ) public org.springframework.boot.actuate.autoconfigure.DocsMvcEndpoint org.springframework.boot.actuate.autoconfigure.DocsMvcEndpoint ( ManagementServletContext org.springframework.boot.actuate.autoconfigure.ManagementServletContext ) { return new DocsMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.ManagementServletContext ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.LinksEnhancer = new LinksEnhancer ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) , this . org.springframework.boot.actuate.autoconfigure.MvcEndpoints ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.boot.actuate.autoconfigure.MethodParameter , java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> ) { org.springframework.boot.actuate.autoconfigure.MethodParameter . increaseNestingLevel ( ) ; java.lang.reflect.Type java.lang.reflect.Type = org.springframework.boot.actuate.autoconfigure.MethodParameter . getNestedGenericParameterType ( ) ; org.springframework.boot.actuate.autoconfigure.MethodParameter . decreaseNestingLevel ( ) ; return ResourceSupport .class . boolean ( org.springframework.boot.actuate.autoconfigure.MethodParameter . getParameterType ( ) ) || TypeUtils . isAssignable ( ResourceSupport .class , java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MethodParameter org.springframework.boot.actuate.autoconfigure.MethodParameter , MediaType org.springframework.boot.actuate.autoconfigure.MediaType , java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> , ServerHttpRequest org.springframework.boot.actuate.autoconfigure.ServerHttpRequest , ServerHttpResponse org.springframework.boot.actuate.autoconfigure.ServerHttpResponse ) { if ( org.springframework.boot.actuate.autoconfigure.ServerHttpRequest instanceof ServletServerHttpRequest ) { void ( java.lang.Object , ( ServletServerHttpRequest ) org.springframework.boot.actuate.autoconfigure.ServerHttpRequest ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , ServletServerHttpRequest org.springframework.boot.actuate.autoconfigure.ServletServerHttpRequest ) { java.lang.Object java.lang.Object = org.springframework.boot.actuate.autoconfigure.ServletServerHttpRequest . getServletRequest ( ) . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ; if ( java.lang.Object != null && java.lang.Object instanceof ResourceSupport ) { void ( java.lang.Object . java.lang.String ( ) , ( ResourceSupport ) java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , ResourceSupport org.springframework.boot.actuate.autoconfigure.ResourceSupport ) { if ( boolean ( java.lang.String ) ) { this . org.springframework.boot.actuate.autoconfigure.LinksEnhancer . addEndpointLinks ( org.springframework.boot.actuate.autoconfigure.ResourceSupport , this . org.springframework.boot.actuate.autoconfigure.HalJsonMvcEndpoint . getPath ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { if ( this . org.springframework.boot.actuate.autoconfigure.HalJsonMvcEndpoint != null ) { java.lang.String java.lang.String = this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) + this . org.springframework.boot.actuate.autoconfigure.HalJsonMvcEndpoint . getPath ( ) ; return java.lang.String . boolean ( java.lang.String ) || ( java.lang.String + STRING ) . boolean ( java.lang.String ) ; } return false ; }  <METHOD_END>
<METHOD_START> void ( java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter> < RequestMappingHandlerAdapter > java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter> ) { this . java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter> = java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter> ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { for ( RequestMappingHandlerAdapter org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter : this . java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter> ) { for ( HttpMessageConverter < ? > org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?> : org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter . getMessageConverters ( ) ) { void ( org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( HttpMessageConverter < ? > org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?> ) { if ( org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> instanceof TypeConstrainedMappingJackson2HttpMessageConverter ) { java.util.List<org.springframework.boot.actuate.autoconfigure.MediaType> < MediaType > java.util.List<org.springframework.boot.actuate.autoconfigure.MediaType> = new java.util.ArrayList <> ( org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> . getSupportedMediaTypes ( ) ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.MediaType> . add ( ActuatorMediaTypes . APPLICATION_ACTUATOR_V2_JSON ) ; ( ( AbstractHttpMessageConverter < ? > ) org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> ) . setSupportedMediaTypes ( java.util.List<org.springframework.boot.actuate.autoconfigure.MediaType> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.boot.actuate.autoconfigure.MethodParameter , java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.boot.actuate.autoconfigure.MethodParameter . getDeclaringClass ( ) ; return ! HalJsonMvcEndpoint .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MethodParameter org.springframework.boot.actuate.autoconfigure.MethodParameter , MediaType org.springframework.boot.actuate.autoconfigure.MediaType , java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> , ServerHttpRequest org.springframework.boot.actuate.autoconfigure.ServerHttpRequest , ServerHttpResponse org.springframework.boot.actuate.autoconfigure.ServerHttpResponse ) { if ( org.springframework.boot.actuate.autoconfigure.ServerHttpRequest instanceof ServletServerHttpRequest ) { return java.lang.Object ( java.lang.Object , org.springframework.boot.actuate.autoconfigure.MethodParameter , org.springframework.boot.actuate.autoconfigure.MediaType , java.lang.Class<> , ( ServletServerHttpRequest ) org.springframework.boot.actuate.autoconfigure.ServerHttpRequest , org.springframework.boot.actuate.autoconfigure.ServerHttpResponse ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MethodParameter org.springframework.boot.actuate.autoconfigure.MethodParameter , MediaType org.springframework.boot.actuate.autoconfigure.MediaType , java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> , ServletServerHttpRequest org.springframework.boot.actuate.autoconfigure.ServletServerHttpRequest , ServerHttpResponse org.springframework.boot.actuate.autoconfigure.ServerHttpResponse ) { if ( java.lang.Object == null || java.lang.Object instanceof Resource ) { return java.lang.Object ; } if ( java.lang.Object instanceof java.util.Collection || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return java.lang.Object ; } HttpMessageConverter < java.lang.Object > org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> = org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> ( java.lang.Class<> , org.springframework.boot.actuate.autoconfigure.MediaType ) ; if ( org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> == null || boolean ( org.springframework.boot.actuate.autoconfigure.MethodParameter ) ) { return java.lang.Object ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.actuate.autoconfigure.ServletServerHttpRequest ) ; try { org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> . write ( new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration.EndpointResource ( java.lang.Object , java.lang.String ) , org.springframework.boot.actuate.autoconfigure.MediaType , org.springframework.boot.actuate.autoconfigure.ServerHttpResponse ) ; } catch ( java.io.IOException java.io.IOException ) { throw new HttpMessageNotWritableException ( STRING , java.io.IOException ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> < java.lang.Object > org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> ( java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> , MediaType org.springframework.boot.actuate.autoconfigure.MediaType ) { HttpMessageConverter < java.lang.Object > org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> = ( HttpMessageConverter < java.lang.Object > ) this . java.util.Map<org.springframework.boot.actuate.autoconfigure.MediaType,org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> . get ( org.springframework.boot.actuate.autoconfigure.MediaType ) ; if ( org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> != null ) { return org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<java.lang.Object> ; } for ( RequestMappingHandlerAdapter org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter : this . java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter> ) { for ( HttpMessageConverter < ? > org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?> : org.springframework.boot.actuate.autoconfigure.RequestMappingHandlerAdapter . getMessageConverters ( ) ) { if ( java.lang.Class<> . boolean ( org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> . getClass ( ) ) && org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> . canWrite ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration.EndpointResource .class , org.springframework.boot.actuate.autoconfigure.MediaType ) ) { this . java.util.Map<org.springframework.boot.actuate.autoconfigure.MediaType,org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<?>> . put ( org.springframework.boot.actuate.autoconfigure.MediaType , org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> ) ; return ( HttpMessageConverter < java.lang.Object > ) org.springframework.boot.actuate.autoconfigure.HttpMessageConverter<> ; } } } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MethodParameter org.springframework.boot.actuate.autoconfigure.MethodParameter ) { return AnnotationUtils . findAnnotation ( org.springframework.boot.actuate.autoconfigure.MethodParameter . getMethod ( ) , HypermediaDisabled .class ) != null || AnnotationUtils . findAnnotation ( org.springframework.boot.actuate.autoconfigure.MethodParameter . getMethod ( ) . getDeclaringClass ( ) , HypermediaDisabled .class ) != null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ServletServerHttpRequest org.springframework.boot.actuate.autoconfigure.ServletServerHttpRequest ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.boot.actuate.autoconfigure.ServletServerHttpRequest . getServletRequest ( ) . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ; return ( java.lang.String == null ? STRING : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.Object instanceof java.util.Map ? null : java.lang.Object ; this . java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) ( this . java.lang.Object == null ? java.lang.Object : null ) ; add ( linkTo ( java.lang.Object .class ) . slash ( java.lang.String ) . withSelfRel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ JsonUnwrapped public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ JsonAnyGetter public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . REGISTER_BEAN ); }  <METHOD_END>
