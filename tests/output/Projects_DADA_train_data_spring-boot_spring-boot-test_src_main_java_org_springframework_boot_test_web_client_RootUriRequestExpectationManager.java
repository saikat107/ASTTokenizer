<METHOD_START> public void ( java.lang.String java.lang.String , RequestExpectationManager org.springframework.boot.test.web.client.RequestExpectationManager ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.boot.test.web.client.RequestExpectationManager , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.boot.test.web.client.RequestExpectationManager = org.springframework.boot.test.web.client.RequestExpectationManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.web.client.ResponseActions org.springframework.boot.test.web.client.ResponseActions ( ExpectedCount org.springframework.boot.test.web.client.ExpectedCount , RequestMatcher org.springframework.boot.test.web.client.RequestMatcher ) { return this . org.springframework.boot.test.web.client.RequestExpectationManager . expectRequest ( org.springframework.boot.test.web.client.ExpectedCount , org.springframework.boot.test.web.client.RequestMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.web.client.ClientHttpResponse org.springframework.boot.test.web.client.ClientHttpResponse ( ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest )			throws java.io.IOException { java.lang.String java.lang.String = org.springframework.boot.test.web.client.ClientHttpRequest . getURI ( ) . toString ( ) ; if ( java.lang.String . boolean ( this . java.lang.String ) ) { org.springframework.boot.test.web.client.ClientHttpRequest = org.springframework.boot.test.web.client.ClientHttpRequest ( org.springframework.boot.test.web.client.ClientHttpRequest , java.lang.String . java.lang.String ( this . java.lang.String . int ( ) ) ) ; } try { return this . org.springframework.boot.test.web.client.RequestExpectationManager . validateRequest ( org.springframework.boot.test.web.client.ClientHttpRequest ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { java.lang.String java.lang.String = java.lang.AssertionError . java.lang.String ( ) ; java.lang.String java.lang.String = STRING ; if ( java.lang.String != null && java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.AssertionError ( STRING + this . java.lang.String + java.lang.String . java.lang.String ( java.lang.String . int ( ) - NUMBER ) ) ; } throw java.lang.AssertionError ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.web.client.ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest ( ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest , java.lang.String java.lang.String ) { java.net.URI java.net.URI ; try { java.net.URI = new java.net.URI ( java.lang.String ) ; if ( org.springframework.boot.test.web.client.ClientHttpRequest instanceof MockClientHttpRequest ) { ( ( MockClientHttpRequest ) org.springframework.boot.test.web.client.ClientHttpRequest ) . setURI ( java.net.URI ) ; return org.springframework.boot.test.web.client.ClientHttpRequest ; } return new org.springframework.boot.test.web.client.RootUriRequestExpectationManager.ReplaceUriClientHttpRequest ( java.net.URI , org.springframework.boot.test.web.client.ClientHttpRequest ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.boot.test.web.client.RequestExpectationManager . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.boot.test.web.client.RequestExpectationManager . reset ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.web.client.MockRestServiceServer org.springframework.boot.test.web.client.MockRestServiceServer ( RestTemplate org.springframework.boot.test.web.client.RestTemplate ) { return org.springframework.boot.test.web.client.MockRestServiceServer ( org.springframework.boot.test.web.client.RestTemplate , new SimpleRequestExpectationManager ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.web.client.MockRestServiceServer org.springframework.boot.test.web.client.MockRestServiceServer ( RestTemplate org.springframework.boot.test.web.client.RestTemplate , RequestExpectationManager org.springframework.boot.test.web.client.RequestExpectationManager ) { MockRestServiceServerBuilder org.springframework.boot.test.web.client.MockRestServiceServerBuilder = MockRestServiceServer . bindTo ( org.springframework.boot.test.web.client.RestTemplate ) ; return org.springframework.boot.test.web.client.MockRestServiceServerBuilder . build ( org.springframework.boot.test.web.client.RequestExpectationManager ( org.springframework.boot.test.web.client.RestTemplate , org.springframework.boot.test.web.client.RequestExpectationManager ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.web.client.RequestExpectationManager org.springframework.boot.test.web.client.RequestExpectationManager ( RestTemplate org.springframework.boot.test.web.client.RestTemplate , RequestExpectationManager org.springframework.boot.test.web.client.RequestExpectationManager ) { Assert . notNull ( org.springframework.boot.test.web.client.RestTemplate , STRING ) ; UriTemplateHandler org.springframework.boot.test.web.client.UriTemplateHandler = org.springframework.boot.test.web.client.RestTemplate . getUriTemplateHandler ( ) ; if ( org.springframework.boot.test.web.client.UriTemplateHandler instanceof RootUriTemplateHandler ) { return new org.springframework.boot.test.web.client.RootUriRequestExpectationManager ( ( ( RootUriTemplateHandler ) org.springframework.boot.test.web.client.UriTemplateHandler ) . getRootUri ( ) , org.springframework.boot.test.web.client.RequestExpectationManager ) ; } return org.springframework.boot.test.web.client.RequestExpectationManager ; }  <METHOD_END>
<METHOD_START> void ( java.net.URI java.net.URI , ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest ) { super( org.springframework.boot.test.web.client.ClientHttpRequest ); this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return org.springframework.boot.test.web.client.ClientHttpRequest ( ) . getBody ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.web.client.ClientHttpResponse org.springframework.boot.test.web.client.ClientHttpResponse ( ) java.io.IOException { return org.springframework.boot.test.web.client.ClientHttpRequest ( ) . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.web.client.ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest ( ) { return ( ClientHttpRequest ) super. getRequest ( ) ; }  <METHOD_END>
