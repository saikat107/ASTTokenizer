<METHOD_START> @ Before public void void ( ) { MockHttpServletRequest org.springframework.context.annotation.scope.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.context.annotation.scope.MockHttpServletRequest . setSession ( new MockHttpSession ( ) ) ; this . org.springframework.context.annotation.scope.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.context.annotation.scope.MockHttpServletRequest ) ; MockHttpServletRequest org.springframework.context.annotation.scope.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.context.annotation.scope.MockHttpServletRequest . setSession ( new MockHttpSession ( ) ) ; this . org.springframework.context.annotation.scope.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.context.annotation.scope.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( NO ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( INTERFACES ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( TARGET_CLASS ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( NO ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( INTERFACES ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.AnotherScopeTestInterface ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( TARGET_CLASS ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.RequestScopedTestBean ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( NO ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( INTERFACES ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.AnotherScopeTestInterface ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.scope.ApplicationContext = org.springframework.context.annotation.scope.ApplicationContext ( TARGET_CLASS ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.ScopedTestBean ) ; assertTrue ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.SessionScopedTestBean ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.scope.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.scope.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.scope.ApplicationContext org.springframework.context.annotation.scope.ApplicationContext ( ScopedProxyMode org.springframework.context.annotation.scope.ScopedProxyMode ) { GenericWebApplicationContext org.springframework.context.annotation.scope.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.scope.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.scope.GenericWebApplicationContext ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( ( definition , registry ) -> definition . getScope ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScanner . setScopedProxyMode ( org.springframework.context.annotation.scope.ScopedProxyMode ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScanner . scan ( java.lang.Class<? extends org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests> ( ) . java.lang.Package ( ) . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.ClassPathBeanDefinitionScanner . scan ( java.lang.Class<? extends org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests> ( ) . java.lang.Package ( ) . java.lang.String ( ) ) ; org.springframework.context.annotation.scope.GenericWebApplicationContext . refresh ( ) ; return org.springframework.context.annotation.scope.GenericWebApplicationContext ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
