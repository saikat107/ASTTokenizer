<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Integer ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = ( java.lang.String ) this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isNotNull ( ) ; assertThat ( java.util.UUID . java.util.UUID ( java.lang.String ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Integer ) . isNotNull ( ) ; assertThat ( java.lang.Integer >= NUMBER ) . isTrue ( ) ; assertThat ( java.lang.Integer < NUMBER ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Integer ) . isNotNull ( ) . isLessThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Long java.lang.Long = ( java.lang.Long ) this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Long ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Long java.lang.Long = ( java.lang.Long ) this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Long ) . isNotNull ( ) . isBetween ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Long java.lang.Long = ( java.lang.Long ) this . org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Long ) . isNotNull ( ) . isLessThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RandomValuePropertySource org.springframework.boot.env.RandomValuePropertySource = spy ( this . org.springframework.boot.env.RandomValuePropertySource ) ; given ( org.springframework.boot.env.RandomValuePropertySource . getSource ( ) ) . willReturn ( new java.util.Random ( ) { @ java.lang.Override public long long ( ) { return java.lang.Long . long ; } } ) ; java.lang.Long java.lang.Long = ( java.lang.Long ) org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Long ) . isNotNull ( ) . isGreaterThanOrEqualTo ( NUMBER ) . isLessThan ( NUMBER ) ; java.lang.Long = ( java.lang.Long ) org.springframework.boot.env.RandomValuePropertySource . getProperty ( STRING ) ; assertThat ( java.lang.Long ) . isNotNull ( ) . isGreaterThanOrEqualTo ( NUMBER ) . isLessThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return java.lang.Long . long ; }  <METHOD_END>
