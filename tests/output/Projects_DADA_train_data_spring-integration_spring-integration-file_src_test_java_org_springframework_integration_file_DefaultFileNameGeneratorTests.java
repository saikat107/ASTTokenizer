<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( org.springframework.integration.file.Message<> . getHeaders ( ) . getId ( ) + STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , new java.lang.Integer ( NUMBER ) ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( org.springframework.integration.file.Message<> . getHeaders ( ) . getId ( ) + STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.DefaultFileNameGenerator . setHeaderName ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.DefaultFileNameGenerator . setHeaderName ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( org.springframework.integration.file.Message<> . getHeaders ( ) . getId ( ) + STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.DefaultFileNameGenerator . setHeaderName ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , new java.lang.Integer ( NUMBER ) ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( org.springframework.integration.file.Message<> . getHeaders ( ) . getId ( ) + STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . setHeader ( FileHeaders . FILENAME , STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.DefaultFileNameGenerator . setHeaderName ( STRING ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.DefaultFileNameGenerator . setExpression ( STRING ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.DefaultFileNameGenerator . setHeaderName ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFileNameGenerator org.springframework.integration.file.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.DefaultFileNameGenerator . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.DefaultFileNameGenerator . setHeaderName ( STRING ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; Message < ? > org.springframework.integration.file.Message<?> = MessageBuilder . withPayload ( java.io.File ) . setHeader ( FileHeaders . FILENAME , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.file.DefaultFileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
