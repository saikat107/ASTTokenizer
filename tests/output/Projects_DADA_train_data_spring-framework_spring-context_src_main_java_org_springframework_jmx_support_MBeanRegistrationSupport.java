<METHOD_START> public void void ( javax.management.MBeanServer javax.management.MBeanServer ) { this . javax.management.MBeanServer = javax.management.MBeanServer ; }  <METHOD_END>
<METHOD_START> public final javax.management.MBeanServer javax.management.MBeanServer ( ) { return this . javax.management.MBeanServer ; }  <METHOD_END>
<METHOD_START> public void void ( RegistrationPolicy org.springframework.jmx.support.RegistrationPolicy ) { Assert . notNull ( org.springframework.jmx.support.RegistrationPolicy , STRING ) ; this . org.springframework.jmx.support.RegistrationPolicy = org.springframework.jmx.support.RegistrationPolicy ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , javax.management.ObjectName javax.management.ObjectName ) throws javax.management.JMException { javax.management.ObjectName javax.management.ObjectName ; synchronized ( this . java.util.Set<javax.management.ObjectName> ) { javax.management.ObjectInstance javax.management.ObjectInstance = null ; try { javax.management.ObjectInstance = this . javax.management.MBeanServer . javax.management.ObjectInstance ( java.lang.Object , javax.management.ObjectName ) ; } catch ( javax.management.InstanceAlreadyExistsException javax.management.InstanceAlreadyExistsException ) { if ( this . org.springframework.jmx.support.RegistrationPolicy == RegistrationPolicy . IGNORE_EXISTING ) { if ( org.springframework.jmx.support.Log . isDebugEnabled ( ) ) { org.springframework.jmx.support.Log . debug ( STRING + javax.management.ObjectName + STRING ) ; } } else if ( this . org.springframework.jmx.support.RegistrationPolicy == RegistrationPolicy . REPLACE_EXISTING ) { try { if ( org.springframework.jmx.support.Log . isDebugEnabled ( ) ) { org.springframework.jmx.support.Log . debug ( STRING + javax.management.ObjectName + STRING ) ; } this . javax.management.MBeanServer . void ( javax.management.ObjectName ) ; javax.management.ObjectInstance = this . javax.management.MBeanServer . javax.management.ObjectInstance ( java.lang.Object , javax.management.ObjectName ) ; } catch ( javax.management.InstanceNotFoundException javax.management.InstanceNotFoundException ) { org.springframework.jmx.support.Log . error ( STRING + javax.management.ObjectName + STRING , javax.management.InstanceNotFoundException ) ; throw javax.management.InstanceAlreadyExistsException ; } } else { throw javax.management.InstanceAlreadyExistsException ; } } javax.management.ObjectName = ( javax.management.ObjectInstance != null ? javax.management.ObjectInstance . javax.management.ObjectName ( ) : null ) ; if ( javax.management.ObjectName == null ) { javax.management.ObjectName = javax.management.ObjectName ; } this . java.util.Set<javax.management.ObjectName> . boolean ( javax.management.ObjectName ) ; } void ( javax.management.ObjectName , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> ; synchronized ( this . java.util.Set<javax.management.ObjectName> ) { java.util.Set<javax.management.ObjectName> = new java.util.LinkedHashSet<javax.management.ObjectName> <> ( this . java.util.Set<javax.management.ObjectName> ) ; } if ( ! java.util.Set<javax.management.ObjectName> . boolean ( ) ) { org.springframework.jmx.support.Log . info ( STRING ) ; } for ( javax.management.ObjectName javax.management.ObjectName : java.util.Set<javax.management.ObjectName> ) { void ( javax.management.ObjectName ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( javax.management.ObjectName javax.management.ObjectName ) { boolean boolean = false ; synchronized ( this . java.util.Set<javax.management.ObjectName> ) { if ( this . java.util.Set<javax.management.ObjectName> . boolean ( javax.management.ObjectName ) ) { try { if ( this . javax.management.MBeanServer . boolean ( javax.management.ObjectName ) ) { this . javax.management.MBeanServer . void ( javax.management.ObjectName ) ; boolean = true ; } else { if ( org.springframework.jmx.support.Log . isWarnEnabled ( ) ) { org.springframework.jmx.support.Log . warn ( STRING + javax.management.ObjectName + STRING + STRING ) ; } } } catch ( javax.management.JMException javax.management.JMException ) { if ( org.springframework.jmx.support.Log . isErrorEnabled ( ) ) { org.springframework.jmx.support.Log . error ( STRING + javax.management.ObjectName + STRING , javax.management.JMException ) ; } } } } if ( boolean ) { void ( javax.management.ObjectName ) ; } }  <METHOD_END>
<METHOD_START> protected final javax.management.ObjectName [] javax.management.ObjectName[] ( ) { synchronized ( this . java.util.Set<javax.management.ObjectName> ) { return this . java.util.Set<javax.management.ObjectName> . javax.management.ObjectName[] ( new javax.management.ObjectName [ this . java.util.Set<javax.management.ObjectName> . int ( ) ] ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( javax.management.ObjectName javax.management.ObjectName , java.lang.Object java.lang.Object ) { void ( javax.management.ObjectName ) ; }  <METHOD_END>
<METHOD_START> protected void void ( javax.management.ObjectName javax.management.ObjectName ) {	}  <METHOD_END>
<METHOD_START> protected void void ( javax.management.ObjectName javax.management.ObjectName ) {	}  <METHOD_END>
