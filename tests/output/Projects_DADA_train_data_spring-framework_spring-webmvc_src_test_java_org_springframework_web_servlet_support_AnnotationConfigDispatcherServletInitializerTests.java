<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.support.MockServletContext = new org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyMockServletContext ( ) ; org.springframework.web.servlet.support.AbstractDispatcherServletInitializer = new org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyAnnotationConfigDispatcherServletInitializer ( ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> = new java.util.LinkedHashMap <> ( NUMBER ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> = new java.util.LinkedHashMap <> ( NUMBER ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.support.Filter> = new java.util.LinkedHashMap <> ( NUMBER ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> = new java.util.LinkedHashMap <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.support.ServletException { org.springframework.web.servlet.support.AbstractDispatcherServletInitializer . onStartup ( org.springframework.web.servlet.support.MockServletContext ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . size ( ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . get ( java.lang.String ) ) ; DispatcherServlet org.springframework.web.servlet.support.DispatcherServlet = ( DispatcherServlet ) java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . get ( java.lang.String ) ; WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext = org.springframework.web.servlet.support.DispatcherServlet . getWebApplicationContext ( ) ; ( ( AnnotationConfigWebApplicationContext ) org.springframework.web.servlet.support.WebApplicationContext ) . refresh ( ) ; assertTrue ( org.springframework.web.servlet.support.WebApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.support.WebApplicationContext . getBean ( STRING ) instanceof org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyBean ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . size ( ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . get ( java.lang.String ) ) ; MockServletRegistration org.springframework.web.servlet.support.MockServletRegistration = java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . get ( java.lang.String ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) , org.springframework.web.servlet.support.MockServletRegistration . getMappings ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.support.MockServletRegistration . getLoadOnStartup ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.support.MockServletRegistration . getRunAsRole ( ) ) ; assertTrue ( org.springframework.web.servlet.support.MockServletRegistration . isAsyncSupported ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . size ( ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . get ( STRING ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . get ( STRING ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . get ( STRING ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . get ( STRING ) ) ; for ( MockFilterRegistration org.springframework.web.servlet.support.MockFilterRegistration : java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . values ( ) ) { assertTrue ( org.springframework.web.servlet.support.MockFilterRegistration . isAsyncSupported ( ) ) ; assertEquals ( java.util.EnumSet . java.util.EnumSet ( DispatcherType . REQUEST , DispatcherType . FORWARD , DispatcherType . INCLUDE , DispatcherType . ASYNC ) , org.springframework.web.servlet.support.MockFilterRegistration . getMappings ( ) . get ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.support.ServletException { org.springframework.web.servlet.support.AbstractDispatcherServletInitializer = new org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyAnnotationConfigDispatcherServletInitializer ( ) { @ java.lang.Override protected boolean boolean ( ) { return false ; } } ; org.springframework.web.servlet.support.AbstractDispatcherServletInitializer . onStartup ( org.springframework.web.servlet.support.MockServletContext ) ; MockServletRegistration org.springframework.web.servlet.support.MockServletRegistration = java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . get ( java.lang.String ) ; assertFalse ( org.springframework.web.servlet.support.MockServletRegistration . isAsyncSupported ( ) ) ; for ( MockFilterRegistration org.springframework.web.servlet.support.MockFilterRegistration : java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . values ( ) ) { assertFalse ( org.springframework.web.servlet.support.MockFilterRegistration . isAsyncSupported ( ) ) ; assertEquals ( java.util.EnumSet . java.util.EnumSet ( DispatcherType . REQUEST , DispatcherType . FORWARD , DispatcherType . INCLUDE ) , org.springframework.web.servlet.support.MockFilterRegistration . getMappings ( ) . get ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.support.ServletException { org.springframework.web.servlet.support.AbstractDispatcherServletInitializer = new org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyAnnotationConfigDispatcherServletInitializer ( ) { @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyConfiguration .class } ; } @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; } } ; org.springframework.web.servlet.support.AbstractDispatcherServletInitializer . onStartup ( org.springframework.web.servlet.support.MockServletContext ) ; DispatcherServlet org.springframework.web.servlet.support.DispatcherServlet = ( DispatcherServlet ) java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . get ( java.lang.String ) ; org.springframework.web.servlet.support.DispatcherServlet . init ( new MockServletConfig ( this . org.springframework.web.servlet.support.MockServletContext ) ) ; WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext = org.springframework.web.servlet.support.DispatcherServlet . getWebApplicationContext ( ) ; ( ( AnnotationConfigWebApplicationContext ) org.springframework.web.servlet.support.WebApplicationContext ) . refresh ( ) ; assertTrue ( org.springframework.web.servlet.support.WebApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.support.WebApplicationContext . getBean ( STRING ) instanceof org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyConfiguration .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.support.ServletException { org.springframework.web.servlet.support.AbstractDispatcherServletInitializer = new org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyAnnotationConfigDispatcherServletInitializer ( ) { @ java.lang.Override protected org.springframework.web.servlet.support.Filter [] org.springframework.web.servlet.support.Filter[] ( ) { return null ; } } ; org.springframework.web.servlet.support.AbstractDispatcherServletInitializer . onStartup ( org.springframework.web.servlet.support.MockServletContext ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.support.Filter [] org.springframework.web.servlet.support.Filter[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends java.util.EventListener > void void ( T T ) { if ( T instanceof ServletContextListener ) { ( ( ServletContextListener ) T ) . contextInitialized ( new ServletContextEvent ( this ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( java.lang.String java.lang.String , Servlet org.springframework.web.servlet.support.Servlet ) { if ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . containsKey ( java.lang.String ) ) { return null ; } java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . put ( java.lang.String , org.springframework.web.servlet.support.Servlet ) ; MockServletRegistration org.springframework.web.servlet.support.MockServletRegistration = new MockServletRegistration ( ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . put ( java.lang.String , org.springframework.web.servlet.support.MockServletRegistration ) ; return org.springframework.web.servlet.support.MockServletRegistration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.support.Dynamic org.springframework.web.servlet.support.Dynamic ( java.lang.String java.lang.String , Filter org.springframework.web.servlet.support.Filter ) { if ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.Filter> . containsKey ( java.lang.String ) ) { return null ; } java.util.Map<java.lang.String,org.springframework.web.servlet.support.Filter> . put ( java.lang.String , org.springframework.web.servlet.support.Filter ) ; MockFilterRegistration org.springframework.web.servlet.support.MockFilterRegistration = new MockFilterRegistration ( ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockFilterRegistration> . put ( java.lang.String , org.springframework.web.servlet.support.MockFilterRegistration ) ; return org.springframework.web.servlet.support.MockFilterRegistration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyConfiguration .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.support.Filter [] org.springframework.web.servlet.support.Filter[] ( ) { return new Filter [] { new HiddenHttpMethodFilter ( ) , new DelegatingFilterProxy ( STRING ) , new DelegatingFilterProxy ( STRING ) , new DelegatingFilterProxy ( STRING ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServletRegistration . ServletRegistration ServletRegistration.Dynamic ) { ServletRegistration.Dynamic . setRunAsRole ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyBean org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyBean ( ) { return new org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests.MyBean ( ) ; }  <METHOD_END>
