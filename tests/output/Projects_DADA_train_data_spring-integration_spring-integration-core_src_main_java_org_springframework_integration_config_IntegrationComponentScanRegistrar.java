<METHOD_START> public void ( ) { this . java.util.Map<org.springframework.integration.config.TypeFilter,org.springframework.integration.config.ImportBeanDefinitionRegistrar> . put ( new AnnotationTypeFilter ( MessagingGateway .class , true ) , new MessagingGatewayRegistrar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.integration.config.ResourceLoader ) { this . org.springframework.integration.config.ResourceLoader = org.springframework.integration.config.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.integration.config.Environment ) { this . org.springframework.integration.config.Environment = org.springframework.integration.config.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.integration.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.config.AnnotationMetadata . getAnnotationAttributes ( IntegrationComponentScan .class . java.lang.String ( ) ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = java.util.Collection<java.lang.String> ( org.springframework.integration.config.AnnotationMetadata , org.springframework.integration.config.BeanDefinitionRegistry ) ; if ( java.util.Collection<java.lang.String> . boolean ( ) ) { java.util.Collection<java.lang.String> = java.util.Collections . java.util.Set ( ClassUtils . getPackageName ( org.springframework.integration.config.AnnotationMetadata . getClassName ( ) ) ) ; } ClassPathScanningCandidateComponentProvider org.springframework.integration.config.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) { @ java.lang.Override protected boolean boolean ( AnnotatedBeanDefinition org.springframework.integration.config.AnnotatedBeanDefinition ) { return org.springframework.integration.config.AnnotatedBeanDefinition . getMetadata ( ) . isIndependent ( ) && ! org.springframework.integration.config.AnnotatedBeanDefinition . getMetadata ( ) . isAnnotation ( ) ; } } ; if ( ( boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) { for ( TypeFilter org.springframework.integration.config.TypeFilter : this . java.util.Map<org.springframework.integration.config.TypeFilter,org.springframework.integration.config.ImportBeanDefinitionRegistrar> . keySet ( ) ) { org.springframework.integration.config.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( org.springframework.integration.config.TypeFilter ) ; } } for ( AnnotationAttributes org.springframework.integration.config.AnnotationAttributes : ( AnnotationAttributes [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) { for ( TypeFilter org.springframework.integration.config.TypeFilter : java.util.List<org.springframework.integration.config.TypeFilter> ( org.springframework.integration.config.AnnotationAttributes , org.springframework.integration.config.BeanDefinitionRegistry ) ) { org.springframework.integration.config.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( org.springframework.integration.config.TypeFilter ) ; } } for ( AnnotationAttributes org.springframework.integration.config.AnnotationAttributes : ( AnnotationAttributes [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) { for ( TypeFilter org.springframework.integration.config.TypeFilter : java.util.List<org.springframework.integration.config.TypeFilter> ( org.springframework.integration.config.AnnotationAttributes , org.springframework.integration.config.BeanDefinitionRegistry ) ) { org.springframework.integration.config.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( org.springframework.integration.config.TypeFilter ) ; } } org.springframework.integration.config.ClassPathScanningCandidateComponentProvider . setResourceLoader ( this . org.springframework.integration.config.ResourceLoader ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { java.util.Set<org.springframework.integration.config.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.integration.config.BeanDefinition> = org.springframework.integration.config.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; for ( BeanDefinition org.springframework.integration.config.BeanDefinition : java.util.Set<org.springframework.integration.config.BeanDefinition> ) { if ( org.springframework.integration.config.BeanDefinition instanceof AnnotatedBeanDefinition ) { for ( ImportBeanDefinitionRegistrar org.springframework.integration.config.ImportBeanDefinitionRegistrar : this . java.util.Map<org.springframework.integration.config.TypeFilter,org.springframework.integration.config.ImportBeanDefinitionRegistrar> . values ( ) ) { org.springframework.integration.config.ImportBeanDefinitionRegistrar . registerBeanDefinitions ( ( ( AnnotatedBeanDefinition ) org.springframework.integration.config.BeanDefinition ) . getMetadata ( ) , org.springframework.integration.config.BeanDefinitionRegistry ) ; } } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( AnnotatedBeanDefinition org.springframework.integration.config.AnnotatedBeanDefinition ) { return org.springframework.integration.config.AnnotatedBeanDefinition . getMetadata ( ) . isIndependent ( ) && ! org.springframework.integration.config.AnnotatedBeanDefinition . getMetadata ( ) . isAnnotation ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( AnnotationMetadata org.springframework.integration.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.config.AnnotationMetadata . getAnnotationAttributes ( IntegrationComponentScan .class . java.lang.String ( ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : ( java.lang.String [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) { if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } for ( java.lang.Class<?> < ? > java.lang.Class<?> : ( java.lang.Class [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( ClassUtils . getPackageName ( java.lang.Class<> ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.integration.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.integration.config.TypeFilter> ( AnnotationAttributes org.springframework.integration.config.AnnotationAttributes , BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { java.util.List<org.springframework.integration.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.integration.config.TypeFilter> = new java.util.ArrayList<org.springframework.integration.config.TypeFilter> <> ( ) ; FilterType org.springframework.integration.config.FilterType = org.springframework.integration.config.AnnotationAttributes . getEnum ( STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : org.springframework.integration.config.AnnotationAttributes . getClassArray ( STRING ) ) { switch ( org.springframework.integration.config.FilterType ) { case ANNOTATION : Assert . isAssignable ( java.lang.annotation.Annotation .class , java.lang.Class<> , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.lang.Class<java.lang.annotation.Annotation> = ( java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > ) java.lang.Class<> ; java.util.List<org.springframework.integration.config.TypeFilter> . add ( new AnnotationTypeFilter ( java.lang.Class<java.lang.annotation.Annotation> ) ) ; break; case ASSIGNABLE_TYPE : java.util.List<org.springframework.integration.config.TypeFilter> . add ( new AssignableTypeFilter ( java.lang.Class<> ) ) ; break; case CUSTOM : Assert . isAssignable ( TypeFilter .class , java.lang.Class<> , STRING ) ; TypeFilter org.springframework.integration.config.TypeFilter = BeanUtils . instantiateClass ( java.lang.Class<> , TypeFilter .class ) ; void ( org.springframework.integration.config.AnnotationAttributes , this . org.springframework.integration.config.Environment , this . org.springframework.integration.config.ResourceLoader , org.springframework.integration.config.BeanDefinitionRegistry ) ; java.util.List<org.springframework.integration.config.TypeFilter> . add ( org.springframework.integration.config.TypeFilter ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + org.springframework.integration.config.FilterType ) ; } } for ( java.lang.String java.lang.String : org.springframework.integration.config.AnnotationAttributes . getStringArray ( STRING ) ) { switch ( org.springframework.integration.config.FilterType ) { case ASPECTJ : java.util.List<org.springframework.integration.config.TypeFilter> . add ( new AspectJTypeFilter ( java.lang.String , this . org.springframework.integration.config.ResourceLoader . getClassLoader ( ) ) ) ; break; case REGEX : java.util.List<org.springframework.integration.config.TypeFilter> . add ( new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + org.springframework.integration.config.FilterType ) ; } } return java.util.List<org.springframework.integration.config.TypeFilter> ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Object java.lang.Object , Environment org.springframework.integration.config.Environment , ResourceLoader org.springframework.integration.config.ResourceLoader , BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( java.lang.Object instanceof Aware ) { if ( java.lang.Object instanceof BeanClassLoaderAware ) { java.lang.ClassLoader java.lang.ClassLoader = ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ConfigurableBeanFactory ? ( ( ConfigurableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . getBeanClassLoader ( ) : org.springframework.integration.config.ResourceLoader . getClassLoader ( ) ) ; ( ( BeanClassLoaderAware ) java.lang.Object ) . setBeanClassLoader ( java.lang.ClassLoader ) ; } if ( java.lang.Object instanceof BeanFactoryAware && org.springframework.integration.config.BeanDefinitionRegistry instanceof BeanFactory ) { ( ( BeanFactoryAware ) java.lang.Object ) . setBeanFactory ( ( BeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) ; } if ( java.lang.Object instanceof EnvironmentAware ) { ( ( EnvironmentAware ) java.lang.Object ) . setEnvironment ( org.springframework.integration.config.Environment ) ; } if ( java.lang.Object instanceof ResourceLoaderAware ) { ( ( ResourceLoaderAware ) java.lang.Object ) . setResourceLoader ( org.springframework.integration.config.ResourceLoader ) ; } } }  <METHOD_END>
