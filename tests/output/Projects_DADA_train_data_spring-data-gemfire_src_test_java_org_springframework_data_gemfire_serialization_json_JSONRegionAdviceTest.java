<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.serialization.json.Region . clear ( ) ; }  <METHOD_END>
<METHOD_START> protected static java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { try { return new ObjectMapper ( ) . writeValueAsString ( java.lang.Object ) ; } catch ( JsonProcessingException org.springframework.data.gemfire.serialization.json.JsonProcessingException ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) , org.springframework.data.gemfire.serialization.json.JsonProcessingException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.gemfire.serialization.json.Region . put ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.serialization.json.Region . put ( STRING , java.lang.String ) ) ; org.springframework.data.gemfire.serialization.json.Region . create ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.serialization.json.Region . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.gemfire.serialization.json.Region . putAll ( java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.data.gemfire.serialization.json.Region . getAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Person org.springframework.data.gemfire.serialization.json.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.serialization.json.Region . put ( STRING , org.springframework.data.gemfire.serialization.json.Person ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( org.springframework.data.gemfire.serialization.json.Region . get ( STRING ) ) ; assertEquals ( java.lang.String , java.lang.String ( org.springframework.data.gemfire.serialization.json.Person ) , java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.data.gemfire.serialization.json.Region . put ( STRING , org.springframework.data.gemfire.serialization.json.Person ) ; assertEquals ( java.lang.String ( org.springframework.data.gemfire.serialization.json.Person ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.gemfire.serialization.json.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.serialization.json.Region . put ( STRING , org.springframework.data.gemfire.serialization.json.Person ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.serialization.json.GemfireOperations . findUnique ( STRING , STRING ) ; assertEquals ( java.lang.String ( org.springframework.data.gemfire.serialization.json.Person ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.gemfire.serialization.json.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.serialization.json.Region . put ( STRING , org.springframework.data.gemfire.serialization.json.Person ) ; SelectResults < java.lang.String > org.springframework.data.gemfire.serialization.json.SelectResults<java.lang.String> = org.springframework.data.gemfire.serialization.json.GemfireOperations . find ( STRING , STRING ) ; assertEquals ( java.lang.String ( org.springframework.data.gemfire.serialization.json.Person ) , org.springframework.data.gemfire.serialization.json.SelectResults<java.lang.String> . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.gemfire.serialization.json.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.serialization.json.Region . put ( STRING , org.springframework.data.gemfire.serialization.json.Person ) ; SelectResults < java.lang.String > org.springframework.data.gemfire.serialization.json.SelectResults<java.lang.String> = org.springframework.data.gemfire.serialization.json.GemfireOperations . query ( STRING ) ; assertEquals ( java.lang.String ( org.springframework.data.gemfire.serialization.json.Person ) , org.springframework.data.gemfire.serialization.json.SelectResults<java.lang.String> . iterator ( ) . next ( ) ) ; }  <METHOD_END>
