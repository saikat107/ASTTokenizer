<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.transaction.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.transaction.TxNamespaceHandlerTests> ( ) ) ; this . java.lang.reflect.Method = ITestBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [ NUMBER ] ) ; this . java.lang.reflect.Method = ITestBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.transaction.ITestBean = org.springframework.transaction.ITestBean ( ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.transaction.ITestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.transaction.ITestBean = org.springframework.transaction.ITestBean ( ) ; CallCountingTransactionManager org.springframework.transaction.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.transaction.ApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; org.springframework.transaction.ITestBean . getName ( ) ; assertTrue ( ptm . lastDefinition . isReadOnly ( ) ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; assertEquals ( STRING , NUMBER , ptm . commits ) ; org.springframework.transaction.ITestBean . haveBirthday ( ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; try { org.springframework.transaction.ITestBean . exceptional ( new java.lang.IllegalArgumentException ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertEquals ( STRING , NUMBER , ptm . begun ) ; assertEquals ( STRING , NUMBER , ptm . rollbacks ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TransactionInterceptor org.springframework.transaction.TransactionInterceptor = ( TransactionInterceptor ) org.springframework.transaction.ApplicationContext . getBean ( STRING ) ; TransactionAttributeSource org.springframework.transaction.TransactionAttributeSource = org.springframework.transaction.TransactionInterceptor . getTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.TransactionAttribute = org.springframework.transaction.TransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , ITestBean .class ) ; assertTrue ( STRING , org.springframework.transaction.TransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; org.springframework.transaction.TransactionAttribute = org.springframework.transaction.TransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , ITestBean .class ) ; assertFalse ( STRING , org.springframework.transaction.TransactionAttribute . rollbackOn ( new java.lang.RuntimeException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.ITestBean org.springframework.transaction.ITestBean ( ) { return ( ITestBean ) org.springframework.transaction.ApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
