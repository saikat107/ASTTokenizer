<METHOD_START> private void ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { super( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ); this . java.lang.String = org.springframework.data.jpa.repository.query.JpaQueryMethod . getNamedQueryName ( ) ; this . java.lang.String = org.springframework.data.jpa.repository.query.JpaQueryMethod . getNamedCountQueryName ( ) ; this . org.springframework.data.jpa.repository.query.QueryExtractor = org.springframework.data.jpa.repository.query.JpaQueryMethod . getQueryExtractor ( ) ; this . java.lang.String = org.springframework.data.jpa.repository.query.JpaQueryMethod . getCountQueryProjection ( ) ; Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = org.springframework.data.jpa.repository.query.JpaQueryMethod . getParameters ( ) ; if ( org.springframework.data.jpa.repository.query.Parameters<,> . hasSortParameter ( ) ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING + STRING , org.springframework.data.jpa.repository.query.JpaQueryMethod ) ) ; } this . boolean = boolean ( org.springframework.data.jpa.repository.query.EntityManager , java.lang.String ) ; boolean boolean = ! boolean && org.springframework.data.jpa.repository.query.JpaQueryMethod . getParameters ( ) . hasPageableParameter ( ) ; boolean boolean = ! this . org.springframework.data.jpa.repository.query.QueryExtractor . canExtractQuery ( ) ; if ( boolean && boolean ) { throw QueryCreationException . create ( org.springframework.data.jpa.repository.query.JpaQueryMethod , java.lang.String ) ; } if ( org.springframework.data.jpa.repository.query.Parameters<,> . hasPageableParameter ( ) ) { org.springframework.data.jpa.repository.query.Logger . warn ( STRING + STRING + STRING , org.springframework.data.jpa.repository.query.JpaQueryMethod ) ; } }  <METHOD_END>
<METHOD_START> private static boolean boolean ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , java.lang.String java.lang.String ) { EntityManager org.springframework.data.jpa.repository.query.EntityManager = org.springframework.data.jpa.repository.query.EntityManager . getEntityManagerFactory ( ) . createEntityManager ( ) ; try { org.springframework.data.jpa.repository.query.EntityManager . createNamedQuery ( java.lang.String ) ; return true ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { org.springframework.data.jpa.repository.query.Logger . debug ( STRING , java.lang.String ) ; return false ; } finally { org.springframework.data.jpa.repository.query.EntityManager . close ( ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.data.jpa.repository.query.RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { final java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.JpaQueryMethod . getNamedQueryName ( ) ; org.springframework.data.jpa.repository.query.Logger . debug ( STRING , java.lang.String ) ; if ( ! boolean ( org.springframework.data.jpa.repository.query.EntityManager , java.lang.String ) ) { return null ; } try { RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery = new org.springframework.data.jpa.repository.query.NamedQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; org.springframework.data.jpa.repository.query.Logger . debug ( STRING , java.lang.String ) ; return org.springframework.data.jpa.repository.query.RepositoryQuery ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.Object [] java.lang.Object[] ) { Query org.springframework.data.jpa.repository.query.Query = getEntityManager ( ) . createNamedQuery ( java.lang.String ) ; return createBinder ( java.lang.Object[] ) . bindAndPrepare ( org.springframework.data.jpa.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> < java.lang.Long > org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ( java.lang.Object [] java.lang.Object[] ) { EntityManager org.springframework.data.jpa.repository.query.EntityManager = getEntityManager ( ) ; TypedQuery < java.lang.Long > org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> = null ; if ( boolean ) { org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> = org.springframework.data.jpa.repository.query.EntityManager . createNamedQuery ( java.lang.String , java.lang.Long .class ) ; } else { Query org.springframework.data.jpa.repository.query.Query = createQuery ( java.lang.Object[] ) ; java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.QueryExtractor . extractQueryString ( org.springframework.data.jpa.repository.query.Query ) ; org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> = org.springframework.data.jpa.repository.query.EntityManager . createQuery ( QueryUtils . createCountQueryFor ( java.lang.String , java.lang.String ) , java.lang.Long .class ) ; } return createBinder ( java.lang.Object[] ) . bind ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ) ; }  <METHOD_END>
