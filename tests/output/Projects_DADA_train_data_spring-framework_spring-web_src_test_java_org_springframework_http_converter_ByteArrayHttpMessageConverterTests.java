<METHOD_START> @ Before public void void ( ) { org.springframework.http.converter.ByteArrayHttpMessageConverter = new ByteArrayHttpMessageConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.ByteArrayHttpMessageConverter . canRead ( byte [] .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.ByteArrayHttpMessageConverter . canWrite ( byte [] .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.ByteArrayHttpMessageConverter . canWrite ( byte [] .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = new byte [] { NUMBER , NUMBER } ; MockHttpInputMessage org.springframework.http.converter.MockHttpInputMessage = new MockHttpInputMessage ( byte[] ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; byte [] byte[] = org.springframework.http.converter.ByteArrayHttpMessageConverter . read ( byte [] .class , org.springframework.http.converter.MockHttpInputMessage ) ; assertArrayEquals ( STRING , byte[] , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; byte [] byte[] = new byte [] { NUMBER , NUMBER } ; org.springframework.http.converter.ByteArrayHttpMessageConverter . write ( byte[] , null , org.springframework.http.converter.MockHttpOutputMessage ) ; assertArrayEquals ( STRING , byte[] , org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING ) , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
