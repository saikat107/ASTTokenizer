<METHOD_START> @ Before public void void ( ) java.io.IOException { this . org.springframework.boot.configurationprocessor.TestCompiler = new TestCompiler ( this . org.springframework.boot.configurationprocessor.TemporaryFolder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( NotAnnotated .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( SimpleProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( SimpleProperties .class ) . withDescription ( STRING ) . withDefaultValue ( STRING ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . fromSource ( SimpleProperties .class ) . withDescription ( STRING ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . doesNotHave ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . doesNotHave ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimplePrefixValueProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( SimplePrefixValueProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( SimplePrefixValueProperties .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleTypeProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( SimpleTypeProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Byte .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Byte .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Character .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Character .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Short .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Short .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Integer .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Integer .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Long .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Long .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Double .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Double .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Float .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Float .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( HierarchicalProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( HierarchicalProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( HierarchicalProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( HierarchicalProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( HierarchicalProperties .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org . springframework . boot . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample .class ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<> ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( java.lang.Class<> ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( java.lang.Class<> ) . withDeprecation ( null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = DeprecatedSingleProperty .class ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<> ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( java.lang.Class<> ) . withDeprecation ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = DeprecatedUnrelatedMethodPojo .class ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<> ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Integer .class ) . withNoDeprecation ( ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . withNoDeprecation ( ) . fromSource ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.Class<?> < ? > java.lang.Class<?> = BoxingPojo .class ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<> ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Integer .class ) . fromSource ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleCollectionProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleMethodConfig .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( SimpleMethodConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( SimpleMethodConfig . SimpleMethodConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . fromSource ( SimpleMethodConfig . SimpleMethodConfig .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( InvalidMethodConfig .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( InvalidMethodConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( MethodAndClassConfig .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( MethodAndClassConfig . MethodAndClassConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . fromSource ( MethodAndClassConfig . MethodAndClassConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( MethodAndClassConfig .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( EmptyTypeMethodConfig .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<org.springframework.boot.configurationprocessor.DeprecatedMethodConfig> < DeprecatedMethodConfig > java.lang.Class<org.springframework.boot.configurationprocessor.DeprecatedMethodConfig> = DeprecatedMethodConfig .class ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<org.springframework.boot.configurationprocessor.DeprecatedMethodConfig> ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( java.lang.Class<org.springframework.boot.configurationprocessor.DeprecatedMethodConfig> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( DeprecatedMethodConfig . DeprecatedMethodConfig .class ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . fromSource ( DeprecatedMethodConfig . DeprecatedMethodConfig .class ) . withDeprecation ( null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org . springframework . boot . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample .class ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<> ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( org . springframework . boot . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample .class ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . fromSource ( org . springframework . boot . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample . org.springframework.boot.configurationsample .class ) . withDeprecation ( null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( InnerClassRootConfig .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( InnerClassProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( InnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( InnerClassProperties . InnerClassProperties .class ) . fromSource ( InnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING , InnerClassProperties . InnerClassProperties .class ) . fromSource ( InnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( SimplePojo .class ) . fromSource ( InnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withGroup ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( InnerClassAnnotatedGetterConfig .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( ClassWithNestedProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( ClassWithNestedProperties . ClassWithNestedProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Integer .class ) . fromSource ( ClassWithNestedProperties . ClassWithNestedProperties .class ) . withDefaultValue ( NUMBER ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Integer .class ) . fromSource ( ClassWithNestedProperties . ClassWithNestedProperties .class ) . withDefaultValue ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( BuilderPojo .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( ExcludedTypesPojo .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( InvalidAccessorProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( DoubleRegistrationProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.configurationprocessor.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.configurationprocessor.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.configurationprocessor.ConfigurationMetadata ( InvalidDoubleRegistrationProperties .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( GenericConfig .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . ofType ( java.lang.String .class ) . fromSource ( GenericConfig . GenericConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . ofType ( STRING ) . fromSource ( GenericConfig . GenericConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . ofType ( STRING ) . fromSource ( GenericConfig . GenericConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . ofType ( STRING ) . fromSource ( GenericConfig . GenericConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . ofType ( STRING ) . fromSource ( GenericConfig . GenericConfig . GenericConfig .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( LombokSimpleDataProperties .class ) ; void ( org.springframework.boot.configurationprocessor.ConfigurationMetadata , LombokSimpleDataProperties .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( LombokSimpleProperties .class ) ; void ( org.springframework.boot.configurationprocessor.ConfigurationMetadata , LombokSimpleProperties .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( LombokExplicitProperties .class ) ; void ( org.springframework.boot.configurationprocessor.ConfigurationMetadata , LombokExplicitProperties .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( LombokInnerClassProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . fromSource ( LombokInnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( LombokInnerClassProperties . LombokInnerClassProperties .class ) . fromSource ( LombokInnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING , LombokInnerClassProperties . LombokInnerClassProperties .class ) . fromSource ( LombokInnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( STRING ) . ofType ( SimpleLombokPojo .class ) . fromSource ( LombokInnerClassProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withGroup ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ItemMetadata org.springframework.boot.configurationprocessor.ItemMetadata = ItemMetadata . newProperty ( null , STRING , STRING , org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessorTests.AdditionalMetadata .class . java.lang.String ( ) , null , null , null , null ) ; void ( org.springframework.boot.configurationprocessor.ItemMetadata ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessorTests.AdditionalMetadata .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ItemMetadata org.springframework.boot.configurationprocessor.ItemMetadata = ItemMetadata . newProperty ( STRING , STRING , null , null , null , null , true , null ) ; void ( org.springframework.boot.configurationprocessor.ItemMetadata ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.Boolean .class ) . fromSource ( SimpleProperties .class ) . withDescription ( STRING ) . withDeprecation ( null , null ) . withDefaultValue ( true ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ItemMetadata org.springframework.boot.configurationprocessor.ItemMetadata = ItemMetadata . newProperty ( STRING , STRING , null , null , null , STRING , null , null ) ; void ( org.springframework.boot.configurationprocessor.ItemMetadata ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) . fromSource ( SimpleProperties .class ) . withDescription ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ItemMetadata org.springframework.boot.configurationprocessor.ItemMetadata = ItemMetadata . newProperty ( STRING , STRING , null , null , null , null , null , new ItemDeprecation ( STRING , STRING ) ) ; void ( org.springframework.boot.configurationprocessor.ItemMetadata ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , STRING ) . fromSource ( SimpleProperties .class ) . withDeprecation ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ItemMetadata org.springframework.boot.configurationprocessor.ItemMetadata = ItemMetadata . newProperty ( STRING , STRING , null , null , null , null , null , new ItemDeprecation ( STRING , STRING ) ) ; void ( org.springframework.boot.configurationprocessor.ItemMetadata ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( DeprecatedSingleProperty .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class . java.lang.String ( ) ) . fromSource ( DeprecatedSingleProperty .class ) . withDeprecation ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.File java.io.File = java.io.File ( ) ; FileCopyUtils . copy ( STRING , new java.io.FileWriter ( java.io.File ) ) ; this . org.springframework.boot.configurationprocessor.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.configurationprocessor.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ItemHint . newHint ( STRING , new ItemHint . ItemHint ( STRING , STRING ) , new ItemHint . ItemHint ( STRING , null ) ) ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( SimpleProperties .class ) . withDescription ( STRING ) . withDefaultValue ( STRING ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withHint ( STRING ) . withValue ( NUMBER , STRING , STRING ) . withValue ( NUMBER , STRING , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ItemHint . newHint ( STRING , new ItemHint . ItemHint ( STRING , STRING ) ) ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( SimpleProperties .class ) . withDescription ( STRING ) . withDefaultValue ( STRING ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withHint ( STRING ) . withValue ( NUMBER , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new ItemHint ( STRING , java.util.Collections .< ItemHint . ItemHint > java.util.List<ItemHint.ValueHint> ( ) , java.util.Arrays . java.util.List ( new ItemHint . ItemHint ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) , new ItemHint . ItemHint ( STRING , null ) ) ) ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( SimpleProperties .class ) . withDescription ( STRING ) . withDefaultValue ( STRING ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withHint ( STRING ) . withProvider ( STRING , STRING , STRING ) . withProvider ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ItemMetadata . newProperty ( STRING , STRING , STRING , null , null , null , null , new ItemDeprecation ( STRING , STRING ) ) ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . withDeprecation ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.configurationprocessor.TestCompiler . getOutputLocation ( ) , STRING ) ; java.io.File . boolean ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; JSONObject org.springframework.boot.configurationprocessor.JSONObject = new JSONObject ( ) ; org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , STRING ) ; org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , STRING ) ; org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessorTests.AdditionalMetadata .class . java.lang.String ( ) ) ; JSONArray org.springframework.boot.configurationprocessor.JSONArray = new JSONArray ( ) ; org.springframework.boot.configurationprocessor.JSONArray . put ( org.springframework.boot.configurationprocessor.JSONObject ) ; JSONObject org.springframework.boot.configurationprocessor.JSONObject = new JSONObject ( ) ; org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.JSONArray ) ; java.io.FileWriter java.io.FileWriter = new java.io.FileWriter ( java.io.File ) ; java.io.FileWriter . java.io.Writer ( org.springframework.boot.configurationprocessor.JSONObject . toString ( NUMBER ) ) ; java.io.FileWriter . void ( ) ; java.io.FileWriter . void ( ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.ConfigurationMetadata ( SimpleProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING , java.lang.String .class ) . fromSource ( org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessorTests.AdditionalMetadata .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestProject org.springframework.boot.configurationprocessor.TestProject = new TestProject ( this . org.springframework.boot.configurationprocessor.TemporaryFolder , FooProperties .class , BarProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.TestProject . getOutputFile ( MetadataStore . METADATA_PATH ) . exists ( ) ) . isFalse ( ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . fullBuild ( ) ; assertThat ( org.springframework.boot.configurationprocessor.TestProject . getOutputFile ( MetadataStore . METADATA_PATH ) . exists ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( FooProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( BarProperties .class ) ) ; org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . incrementalBuild ( BarProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( FooProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( BarProperties .class ) ) ; org.springframework.boot.configurationprocessor.TestProject . addSourceCode ( BarProperties .class , BarProperties .class . java.io.InputStream ( STRING ) ) ; org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . incrementalBuild ( BarProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; org.springframework.boot.configurationprocessor.TestProject . revert ( BarProperties .class ) ; org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . incrementalBuild ( BarProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestProject org.springframework.boot.configurationprocessor.TestProject = new TestProject ( this . org.springframework.boot.configurationprocessor.TemporaryFolder , FooProperties .class , BarProperties .class ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . fullBuild ( ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; org.springframework.boot.configurationprocessor.TestProject . replaceText ( BarProperties .class , STRING , STRING ) ; org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . incrementalBuild ( BarProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . isNotEqualTo ( Metadata . withProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestProject org.springframework.boot.configurationprocessor.TestProject = new TestProject ( this . org.springframework.boot.configurationprocessor.TemporaryFolder , FooProperties .class , BarProperties .class ) ; ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . fullBuild ( ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( FooProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( BarProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . doesNotHave ( Metadata . withProperty ( STRING ) . fromSource ( RenamedBarProperties .class ) ) ; org.springframework.boot.configurationprocessor.TestProject . delete ( BarProperties .class ) ; org.springframework.boot.configurationprocessor.TestProject . add ( RenamedBarProperties .class ) ; org.springframework.boot.configurationprocessor.ConfigurationMetadata = org.springframework.boot.configurationprocessor.TestProject . incrementalBuild ( RenamedBarProperties .class ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( FooProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . doesNotHave ( Metadata . withProperty ( STRING ) . fromSource ( BarProperties .class ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( STRING ) . fromSource ( RenamedBarProperties .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withGroup ( java.lang.String ) . fromSource ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . doesNotHave ( Metadata . withProperty ( java.lang.String + STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( java.lang.String + STRING , java.lang.String .class ) . fromSource ( java.lang.Class<> ) . withDescription ( STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( java.lang.String + STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( java.lang.String + STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( java.lang.String + STRING ) . fromSource ( java.lang.Class<> ) . withDefaultValue ( NUMBER ) . withDeprecation ( null , null ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . has ( Metadata . withProperty ( java.lang.String + STRING ) ) ; assertThat ( org.springframework.boot.configurationprocessor.ConfigurationMetadata ) . doesNotHave ( Metadata . withProperty ( java.lang.String + STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.configurationprocessor.ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.io.IOException { TestConfigurationMetadataAnnotationProcessor org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor = new TestConfigurationMetadataAnnotationProcessor ( this . org.springframework.boot.configurationprocessor.TestCompiler . getOutputLocation ( ) ) ; this . org.springframework.boot.configurationprocessor.TestCompiler . getTask ( java.lang.Class<?>[] ) . call ( org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor ) ; return org.springframework.boot.configurationprocessor.TestConfigurationMetadataAnnotationProcessor . getMetadata ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ItemMetadata ... org.springframework.boot.configurationprocessor.ItemMetadata[] ) throws java.lang.Exception { TestJsonConverter org.springframework.boot.configurationprocessor.TestJsonConverter = new TestJsonConverter ( ) ; java.io.File java.io.File = java.io.File ( ) ; JSONObject org.springframework.boot.configurationprocessor.JSONObject = new JSONObject ( ) ; JSONArray org.springframework.boot.configurationprocessor.JSONArray = new JSONArray ( ) ; for ( ItemMetadata org.springframework.boot.configurationprocessor.ItemMetadata : org.springframework.boot.configurationprocessor.ItemMetadata[] ) { org.springframework.boot.configurationprocessor.JSONArray . put ( org.springframework.boot.configurationprocessor.TestJsonConverter . toJsonObject ( org.springframework.boot.configurationprocessor.ItemMetadata ) ) ; } org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.JSONArray ) ; void ( java.io.File , org.springframework.boot.configurationprocessor.JSONObject ) ; }  <METHOD_END>
<METHOD_START> private void void ( ItemHint ... org.springframework.boot.configurationprocessor.ItemHint[] ) throws java.lang.Exception { TestJsonConverter org.springframework.boot.configurationprocessor.TestJsonConverter = new TestJsonConverter ( ) ; java.io.File java.io.File = java.io.File ( ) ; JSONObject org.springframework.boot.configurationprocessor.JSONObject = new JSONObject ( ) ; org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.TestJsonConverter . toJsonArray ( java.util.Arrays . java.util.List ( org.springframework.boot.configurationprocessor.ItemHint[] ) ) ) ; void ( java.io.File , org.springframework.boot.configurationprocessor.JSONObject ) ; }  <METHOD_END>
<METHOD_START> private void void ( ItemMetadata ... org.springframework.boot.configurationprocessor.ItemMetadata[] ) throws java.lang.Exception { java.io.File java.io.File = java.io.File ( ) ; JSONArray org.springframework.boot.configurationprocessor.JSONArray = new JSONArray ( ) ; for ( ItemMetadata org.springframework.boot.configurationprocessor.ItemMetadata : org.springframework.boot.configurationprocessor.ItemMetadata[] ) { JSONObject org.springframework.boot.configurationprocessor.JSONObject = new JSONObject ( ) ; org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.ItemMetadata . getName ( ) ) ; if ( org.springframework.boot.configurationprocessor.ItemMetadata . getType ( ) != null ) { org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.ItemMetadata . getType ( ) ) ; } ItemDeprecation org.springframework.boot.configurationprocessor.ItemDeprecation = org.springframework.boot.configurationprocessor.ItemMetadata . getDeprecation ( ) ; if ( org.springframework.boot.configurationprocessor.ItemDeprecation != null ) { JSONObject org.springframework.boot.configurationprocessor.JSONObject = new JSONObject ( ) ; if ( org.springframework.boot.configurationprocessor.ItemDeprecation . getReason ( ) != null ) { org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.ItemDeprecation . getReason ( ) ) ; } if ( org.springframework.boot.configurationprocessor.ItemDeprecation . getReplacement ( ) != null ) { org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.ItemDeprecation . getReplacement ( ) ) ; } org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.JSONObject ) ; } org.springframework.boot.configurationprocessor.JSONArray . put ( org.springframework.boot.configurationprocessor.JSONObject ) ; } JSONObject org.springframework.boot.configurationprocessor.JSONObject = new JSONObject ( ) ; org.springframework.boot.configurationprocessor.JSONObject . put ( STRING , org.springframework.boot.configurationprocessor.JSONArray ) ; void ( java.io.File , org.springframework.boot.configurationprocessor.JSONObject ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) java.io.IOException { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.configurationprocessor.TestCompiler . getOutputLocation ( ) , STRING ) ; java.io.File . boolean ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , JSONObject org.springframework.boot.configurationprocessor.JSONObject ) throws java.lang.Exception { java.io.FileWriter java.io.FileWriter = new java.io.FileWriter ( java.io.File ) ; try { java.io.FileWriter . java.io.Writer ( org.springframework.boot.configurationprocessor.JSONObject . toString ( NUMBER ) ) ; } finally { java.io.FileWriter . void ( ) ; } }  <METHOD_END>
