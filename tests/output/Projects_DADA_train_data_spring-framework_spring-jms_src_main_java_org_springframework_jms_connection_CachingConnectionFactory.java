<METHOD_START> public void ( ) { super(); setReconnectOnException ( true ) ; }  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { super( org.springframework.jms.connection.ConnectionFactory ); setReconnectOnException ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int >= NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; synchronized ( this . java.util.Map<java.lang.Integer,java.util.LinkedList<org.springframework.jms.connection.Session>> ) { for ( java.util.LinkedList<org.springframework.jms.connection.Session> < Session > java.util.LinkedList<org.springframework.jms.connection.Session> : this . java.util.Map<java.lang.Integer,java.util.LinkedList<org.springframework.jms.connection.Session>> . values ( ) ) { synchronized ( java.util.LinkedList<org.springframework.jms.connection.Session> ) { for ( Session org.springframework.jms.connection.Session : java.util.LinkedList<org.springframework.jms.connection.Session> ) { try { org.springframework.jms.connection.Session . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . trace ( STRING , java.lang.Throwable ) ; } } } } this . java.util.Map<java.lang.Integer,java.util.LinkedList<org.springframework.jms.connection.Session>> . clear ( ) ; } this . boolean = true ; super. resetConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection , java.lang.Integer java.lang.Integer ) throws org.springframework.jms.connection.JMSException { java.util.LinkedList<org.springframework.jms.connection.Session> < Session > java.util.LinkedList<org.springframework.jms.connection.Session> ; synchronized ( this . java.util.Map<java.lang.Integer,java.util.LinkedList<org.springframework.jms.connection.Session>> ) { java.util.LinkedList<org.springframework.jms.connection.Session> = this . java.util.Map<java.lang.Integer,java.util.LinkedList<org.springframework.jms.connection.Session>> . get ( java.lang.Integer ) ; if ( java.util.LinkedList<org.springframework.jms.connection.Session> == null ) { java.util.LinkedList<org.springframework.jms.connection.Session> = new java.util.LinkedList <> ( ) ; this . java.util.Map<java.lang.Integer,java.util.LinkedList<org.springframework.jms.connection.Session>> . put ( java.lang.Integer , java.util.LinkedList<org.springframework.jms.connection.Session> ) ; } } Session org.springframework.jms.connection.Session = null ; synchronized ( java.util.LinkedList<org.springframework.jms.connection.Session> ) { if ( ! java.util.LinkedList<org.springframework.jms.connection.Session> . isEmpty ( ) ) { org.springframework.jms.connection.Session = java.util.LinkedList<org.springframework.jms.connection.Session> . removeFirst ( ) ; } } if ( org.springframework.jms.connection.Session != null ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.Integer + STRING + ( org.springframework.jms.connection.Session instanceof SessionProxy ? ( ( SessionProxy ) org.springframework.jms.connection.Session ) . getTargetSession ( ) : org.springframework.jms.connection.Session ) ) ; } } else { Session org.springframework.jms.connection.Session = createSession ( org.springframework.jms.connection.Connection , java.lang.Integer ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Integer + STRING + org.springframework.jms.connection.Session ) ; } org.springframework.jms.connection.Session = org.springframework.jms.connection.Session ( org.springframework.jms.connection.Session , java.util.LinkedList<org.springframework.jms.connection.Session> ) ; } return org.springframework.jms.connection.Session ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Session org.springframework.jms.connection.Session , java.util.LinkedList<org.springframework.jms.connection.Session> < Session > java.util.LinkedList<org.springframework.jms.connection.Session> ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( NUMBER ) ; java.util.List<java.lang.Class<?>> . boolean ( SessionProxy .class ) ; if ( org.springframework.jms.connection.Session instanceof QueueSession ) { java.util.List<java.lang.Class<?>> . boolean ( QueueSession .class ) ; } if ( org.springframework.jms.connection.Session instanceof TopicSession ) { java.util.List<java.lang.Class<?>> . boolean ( TopicSession .class ) ; } return ( Session ) java.lang.reflect.Proxy . java.lang.Object ( SessionProxy .class . java.lang.ClassLoader ( ) , java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) , new org.springframework.jms.connection.CachingConnectionFactory.CachedSessionInvocationHandler ( org.springframework.jms.connection.Session , java.util.LinkedList<org.springframework.jms.connection.Session> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.jms.connection.Session , java.util.LinkedList<org.springframework.jms.connection.Session> < Session > java.util.LinkedList<org.springframework.jms.connection.Session> ) { this . org.springframework.jms.connection.Session = org.springframework.jms.connection.Session ; this . java.util.LinkedList<org.springframework.jms.connection.Session> = java.util.LinkedList<org.springframework.jms.connection.Session> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.String . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.String . boolean ( STRING ) ) { return STRING + this . org.springframework.jms.connection.Session ; } else if ( java.lang.String . boolean ( STRING ) ) { if ( boolean ) { synchronized ( this . java.util.LinkedList<org.springframework.jms.connection.Session> ) { if ( this . java.util.LinkedList<org.springframework.jms.connection.Session> . size ( ) < int ( ) ) { try { void ( ( Session ) java.lang.Object ) ; return null ; } catch ( JMSException org.springframework.jms.connection.JMSException ) { logger . trace ( STRING , org.springframework.jms.connection.JMSException ) ; } } } } void ( ) ; return null ; } else if ( java.lang.String . boolean ( STRING ) ) { return this . org.springframework.jms.connection.Session ; } else if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { this . boolean = false ; } else if ( java.lang.String . boolean ( STRING ) ) { this . boolean = true ; if ( boolean ( ) && ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) ) { return org.springframework.jms.connection.MessageProducer ( ( Destination ) java.lang.Object[] [ NUMBER ] ) ; } else if ( boolean ( ) ) { if ( ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) ) { Destination org.springframework.jms.connection.Destination = ( Destination ) java.lang.Object[] [ NUMBER ] ; if ( org.springframework.jms.connection.Destination != null && ! ( org.springframework.jms.connection.Destination instanceof TemporaryQueue || org.springframework.jms.connection.Destination instanceof TemporaryTopic ) ) { return org.springframework.jms.connection.MessageConsumer ( org.springframework.jms.connection.Destination , ( java.lang.Object[] . int > NUMBER ? ( java.lang.String ) java.lang.Object[] [ NUMBER ] : null ) , ( java.lang.Object[] . int > NUMBER && ( java.lang.Boolean ) java.lang.Object[] [ NUMBER ] ) , null , false ) ; } } else if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { Destination org.springframework.jms.connection.Destination = ( Destination ) java.lang.Object[] [ NUMBER ] ; if ( org.springframework.jms.connection.Destination != null ) { return org.springframework.jms.connection.MessageConsumer ( org.springframework.jms.connection.Destination , ( java.lang.Object[] . int > NUMBER ? ( java.lang.String ) java.lang.Object[] [ NUMBER ] : null ) , ( java.lang.Object[] . int > NUMBER && ( java.lang.Boolean ) java.lang.Object[] [ NUMBER ] ) , ( java.lang.String ) java.lang.Object[] [ NUMBER ] , true ) ; } } else if ( java.lang.String . boolean ( STRING ) ) { Destination org.springframework.jms.connection.Destination = ( Destination ) java.lang.Object[] [ NUMBER ] ; if ( org.springframework.jms.connection.Destination != null ) { return org.springframework.jms.connection.MessageConsumer ( org.springframework.jms.connection.Destination , ( java.lang.Object[] . int > NUMBER ? ( java.lang.String ) java.lang.Object[] [ NUMBER ] : null ) , null , ( java.lang.String ) java.lang.Object[] [ NUMBER ] , false ) ; } } else if ( java.lang.String . boolean ( STRING ) ) { Destination org.springframework.jms.connection.Destination = ( Destination ) java.lang.Object[] [ NUMBER ] ; if ( org.springframework.jms.connection.Destination != null ) { return org.springframework.jms.connection.MessageConsumer ( org.springframework.jms.connection.Destination , ( java.lang.Object[] . int > NUMBER ? ( java.lang.String ) java.lang.Object[] [ NUMBER ] : null ) , null , ( java.lang.String ) java.lang.Object[] [ NUMBER ] , true ) ; } } } } try { return java.lang.reflect.Method . java.lang.Object ( this . org.springframework.jms.connection.Session , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.jms.connection.MessageProducer org.springframework.jms.connection.MessageProducer ( Destination org.springframework.jms.connection.Destination ) throws org.springframework.jms.connection.JMSException { org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey = ( org.springframework.jms.connection.Destination != null ? new org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey ( org.springframework.jms.connection.Destination ) : null ) ; MessageProducer org.springframework.jms.connection.MessageProducer = this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey,org.springframework.jms.connection.MessageProducer> . get ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey ) ; if ( org.springframework.jms.connection.MessageProducer != null ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.jms.connection.Destination + STRING + org.springframework.jms.connection.MessageProducer ) ; } } else { org.springframework.jms.connection.MessageProducer = this . org.springframework.jms.connection.Session . createProducer ( org.springframework.jms.connection.Destination ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.connection.Destination + STRING + org.springframework.jms.connection.MessageProducer ) ; } this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey,org.springframework.jms.connection.MessageProducer> . put ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey , org.springframework.jms.connection.MessageProducer ) ; } return new CachedMessageProducer ( org.springframework.jms.connection.MessageProducer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.connection.MessageConsumer org.springframework.jms.connection.MessageConsumer ( Destination org.springframework.jms.connection.Destination , java.lang.String java.lang.String , java.lang.Boolean java.lang.Boolean , java.lang.String java.lang.String , boolean boolean ) throws org.springframework.jms.connection.JMSException { org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey = new org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey ( org.springframework.jms.connection.Destination , java.lang.String , java.lang.Boolean , java.lang.String , boolean ) ; MessageConsumer org.springframework.jms.connection.MessageConsumer = this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> . get ( org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey ) ; if ( org.springframework.jms.connection.MessageConsumer != null ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.jms.connection.Destination + STRING + org.springframework.jms.connection.MessageConsumer ) ; } } else { if ( org.springframework.jms.connection.Destination instanceof Topic ) { if ( java.lang.Boolean == null ) { org.springframework.jms.connection.MessageConsumer = ( boolean ? this . org.springframework.jms.connection.Session . createSharedDurableConsumer ( ( Topic ) org.springframework.jms.connection.Destination , java.lang.String , java.lang.String ) : this . org.springframework.jms.connection.Session . createSharedConsumer ( ( Topic ) org.springframework.jms.connection.Destination , java.lang.String , java.lang.String ) ) ; } else { org.springframework.jms.connection.MessageConsumer = ( boolean ? this . org.springframework.jms.connection.Session . createDurableSubscriber ( ( Topic ) org.springframework.jms.connection.Destination , java.lang.String , java.lang.String , java.lang.Boolean ) : this . org.springframework.jms.connection.Session . createConsumer ( org.springframework.jms.connection.Destination , java.lang.String , java.lang.Boolean ) ) ; } } else { org.springframework.jms.connection.MessageConsumer = this . org.springframework.jms.connection.Session . createConsumer ( org.springframework.jms.connection.Destination , java.lang.String ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.connection.Destination + STRING + org.springframework.jms.connection.MessageConsumer ) ; } this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> . put ( org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey , org.springframework.jms.connection.MessageConsumer ) ; } return new CachedMessageConsumer ( org.springframework.jms.connection.MessageConsumer ) ; }  <METHOD_END>
<METHOD_START> private void void ( Session org.springframework.jms.connection.Session ) throws org.springframework.jms.connection.JMSException { if ( this . boolean && this . org.springframework.jms.connection.Session . getTransacted ( ) ) { this . boolean = false ; this . org.springframework.jms.connection.Session . rollback ( ) ; } for ( java.util.Iterator<java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer>> < java.util.Map . java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> < org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey , MessageConsumer > > java.util.Iterator<java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer>> = this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> . entrySet ( ) . iterator ( ) ; java.util.Iterator<java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer>> . hasNext ( ) ;) { java.util.Map . java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> < org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey , MessageConsumer > java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> = java.util.Iterator<java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer>> . next ( ) ; if ( java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> . getKey ( ) . subscription != null ) { java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> . getValue ( ) . close ( ) ; java.util.Iterator<java.util.Map.Entry<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer>> . remove ( ) ; } } boolean boolean = false ; synchronized ( this . java.util.LinkedList<org.springframework.jms.connection.Session> ) { if ( ! this . java.util.LinkedList<org.springframework.jms.connection.Session> . contains ( org.springframework.jms.connection.Session ) ) { this . java.util.LinkedList<org.springframework.jms.connection.Session> . addLast ( org.springframework.jms.connection.Session ) ; boolean = true ; } } if ( boolean && logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this . org.springframework.jms.connection.Session ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.jms.connection.JMSException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . org.springframework.jms.connection.Session ) ; } try { for ( MessageProducer org.springframework.jms.connection.MessageProducer : this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey,org.springframework.jms.connection.MessageProducer> . values ( ) ) { org.springframework.jms.connection.MessageProducer . close ( ) ; } for ( MessageConsumer org.springframework.jms.connection.MessageConsumer : this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> . values ( ) ) { org.springframework.jms.connection.MessageConsumer . close ( ) ; } } finally { this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey,org.springframework.jms.connection.MessageProducer> . clear ( ) ; this . java.util.Map<org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey,org.springframework.jms.connection.MessageConsumer> . clear ( ) ; this . org.springframework.jms.connection.Session . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( Destination org.springframework.jms.connection.Destination ) { Assert . notNull ( org.springframework.jms.connection.Destination , STRING ) ; this . org.springframework.jms.connection.Destination = org.springframework.jms.connection.Destination ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { if ( this . java.lang.String == null ) { this . java.lang.String = this . org.springframework.jms.connection.Destination . toString ( ) ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey ) { return ( this . org.springframework.jms.connection.Destination . getClass ( ) == org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey . org.springframework.jms.connection.Destination . getClass ( ) && ( this . org.springframework.jms.connection.Destination . equals ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey . org.springframework.jms.connection.Destination ) || java.lang.String ( ) . boolean ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey . java.lang.String ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || boolean ( ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey ) java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.jms.connection.Destination . getClass ( ) . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey ) { return java.lang.String ( ) . int ( org.springframework.jms.connection.CachingConnectionFactory.DestinationCacheKey . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Destination org.springframework.jms.connection.Destination , java.lang.String java.lang.String , java.lang.Boolean java.lang.Boolean , java.lang.String java.lang.String , boolean boolean ) { super( org.springframework.jms.connection.Destination ); this . java.lang.String = java.lang.String ; this . java.lang.Boolean = java.lang.Boolean ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey = ( org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey ) java.lang.Object ; return ( boolean ( org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey ) && ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey . java.lang.String ) && ObjectUtils . nullSafeEquals ( this . java.lang.Boolean , org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey . java.lang.Boolean ) && ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey . java.lang.String ) && this . boolean == org.springframework.jms.connection.CachingConnectionFactory.ConsumerCacheKey . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) + STRING + this . java.lang.String + STRING + this . java.lang.Boolean + STRING + this . java.lang.String + STRING + this . boolean + STRING ; }  <METHOD_END>
