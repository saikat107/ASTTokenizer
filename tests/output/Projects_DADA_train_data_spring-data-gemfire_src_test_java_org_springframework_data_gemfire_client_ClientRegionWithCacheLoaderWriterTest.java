<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.client.Region<java.lang.Integer,java.lang.Integer> ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.client.Region<java.lang.Integer,java.lang.Integer> . size ( ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { assertEquals ( int + NUMBER , org.springframework.data.gemfire.client.Region<java.lang.Integer,java.lang.Integer> . get ( int ) . intValue ( ) ) ; } assertEquals ( int , org.springframework.data.gemfire.client.Region<java.lang.Integer,java.lang.Integer> . size ( ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { assertEquals ( int + NUMBER , org.springframework.data.gemfire.client.Region<java.lang.Integer,java.lang.Integer> . put ( int , int - int ) . intValue ( ) ) ; } org.springframework.data.gemfire.client.ClientRegionWithCacheLoaderWriterTest.LocalAppDataCacheWriter org.springframework.data.gemfire.client.ClientRegionWithCacheLoaderWriterTest.LocalAppDataCacheWriter = org.springframework.data.gemfire.client.ApplicationContext . getBean ( STRING , org.springframework.data.gemfire.client.ClientRegionWithCacheLoaderWriterTest.LocalAppDataCacheWriter .class ) ; assertNotNull ( org.springframework.data.gemfire.client.ClientRegionWithCacheLoaderWriterTest.LocalAppDataCacheWriter ) ; for ( int int = NUMBER ; int < int ; int ++ ) { assertEquals ( int - int , org.springframework.data.gemfire.client.ClientRegionWithCacheLoaderWriterTest.LocalAppDataCacheWriter . java.lang.Integer ( int ) . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( final LoaderHelper < java.lang.Integer , java.lang.Integer > org.springframework.data.gemfire.client.LoaderHelper<java.lang.Integer,java.lang.Integer> ) throws org.springframework.data.gemfire.client.CacheLoaderException { return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final EntryEvent < java.lang.Integer , java.lang.Integer > org.springframework.data.gemfire.client.EntryEvent<java.lang.Integer,java.lang.Integer> ) throws org.springframework.data.gemfire.client.CacheWriterException { java.util.Map<java.lang.Integer,java.lang.Integer> . java.lang.Integer ( org.springframework.data.gemfire.client.EntryEvent<java.lang.Integer,java.lang.Integer> . getKey ( ) , org.springframework.data.gemfire.client.EntryEvent<java.lang.Integer,java.lang.Integer> . getNewValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( final java.lang.Integer java.lang.Integer ) { return java.util.Map<java.lang.Integer,java.lang.Integer> . java.lang.Integer ( java.lang.Integer ) ; }  <METHOD_END>
