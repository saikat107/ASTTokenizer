<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) { return new UndertowServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.embedded.undertow.AbstractServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; org.springframework.boot.web.embedded.undertow.AbstractServletWebServerFactory . addErrorPages ( new ErrorPage ( HttpStatus . NOT_FOUND , STRING ) ) ; this . webServer = org.springframework.boot.web.embedded.undertow.AbstractServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( ) , STRING ) ) ; this . webServer . start ( ) ; assertThat ( getResponse ( getLocalUrl ( STRING ) ) ) . isEqualTo ( STRING ) ; assertThat ( getResponse ( getLocalUrl ( STRING ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; this . thrown . expectMessage ( STRING ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setBuilderCustomizers ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; this . thrown . expectMessage ( STRING ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . addBuilderCustomizers ( ( UndertowBuilderCustomizer [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; UndertowBuilderCustomizer [] org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] = new UndertowBuilderCustomizer [ NUMBER ] ; for ( int int = NUMBER ; int < customizers . length ; int ++ ) { org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] [ int ] = mock ( UndertowBuilderCustomizer .class ) ; } org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setBuilderCustomizers ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] [ NUMBER ] , org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] [ NUMBER ] ) ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . addBuilderCustomizers ( org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] [ NUMBER ] , org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] [ NUMBER ] ) ; this . webServer = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . getWebServer ( ) ; InOrder org.springframework.boot.web.embedded.undertow.InOrder = inOrder ( ( java.lang.Object [] ) org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] ) ; for ( UndertowBuilderCustomizer org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer : org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] ) { org.springframework.boot.web.embedded.undertow.InOrder . verify ( org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer ) . customize ( ( Builder ) any ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; this . thrown . expectMessage ( STRING ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setDeploymentInfoCustomizers ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; this . thrown . expectMessage ( STRING ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . addDeploymentInfoCustomizers ( ( UndertowDeploymentInfoCustomizer [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; UndertowDeploymentInfoCustomizer [] org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] = new UndertowDeploymentInfoCustomizer [ NUMBER ] ; for ( int int = NUMBER ; int < customizers . length ; int ++ ) { org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] [ int ] = mock ( UndertowDeploymentInfoCustomizer .class ) ; } org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setDeploymentInfoCustomizers ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] [ NUMBER ] , org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] [ NUMBER ] ) ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . addDeploymentInfoCustomizers ( org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] [ NUMBER ] , org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] [ NUMBER ] ) ; this . webServer = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . getWebServer ( ) ; InOrder org.springframework.boot.web.embedded.undertow.InOrder = inOrder ( ( java.lang.Object [] ) org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] ) ; for ( UndertowDeploymentInfoCustomizer org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer : org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] ) { org.springframework.boot.web.embedded.undertow.InOrder . verify ( org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer ) . customize ( ( DeploymentInfo ) any ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { testBasicSslWithKeyStore ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> <> ( ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . addDeploymentInfoCustomizers ( new UndertowDeploymentInfoCustomizer ( ) { @ java.lang.Override public void void ( DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo ) { java.util.concurrent.atomic.AtomicReference<java.lang.String> . void ( org.springframework.boot.web.embedded.undertow.DeploymentInfo . getContextPath ( ) ) ; } } ) ; this . webServer = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . getWebServer ( ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo ) { java.util.concurrent.atomic.AtomicReference<java.lang.String> . void ( org.springframework.boot.web.embedded.undertow.DeploymentInfo . getContextPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setUseForwardHeaders ( true ) ; assertForwardHeaderIsUsed ( org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.boot.web.embedded.undertow.ServletContainer ( ) ) . isNotEqualTo ( org.springframework.boot.web.embedded.undertow.ServletContainer ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.net.URISyntaxException , java.lang.InterruptedException { void ( null , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.net.URISyntaxException , java.lang.InterruptedException { void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String )			throws java.io.IOException , java.net.URISyntaxException , java.lang.InterruptedException { UndertowServletWebServerFactory org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setAccessLogEnabled ( true ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setAccessLogPrefix ( java.lang.String ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setAccessLogSuffix ( java.lang.String ) ; java.io.File java.io.File = this . temporaryFolder . getRoot ( ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . setAccessLogDirectory ( java.io.File ) ; assertThat ( java.io.File . java.io.File[] ( ) ) . isEmpty ( ) ; this . webServer = org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( ) , STRING ) ) ; this . webServer . start ( ) ; assertThat ( getResponse ( getLocalUrl ( STRING ) ) ) . isEqualTo ( STRING ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; void ( java.io.File ) ; assertThat ( java.io.File . java.io.File[] ( ) ) . contains ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final int int , AbstractServletWebServerFactory org.springframework.boot.web.embedded.undertow.AbstractServletWebServerFactory ) { ( ( UndertowServletWebServerFactory ) org.springframework.boot.web.embedded.undertow.AbstractServletWebServerFactory ) . addBuilderCustomizers ( new UndertowBuilderCustomizer ( ) { @ java.lang.Override public void void ( Builder org.springframework.boot.web.embedded.undertow.Builder ) { org.springframework.boot.web.embedded.undertow.Builder . addHttpListener ( int , STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Builder org.springframework.boot.web.embedded.undertow.Builder ) { org.springframework.boot.web.embedded.undertow.Builder . addHttpListener ( int , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = javax.net.ssl.SSLHandshakeException .class ) public void void ( ) java.lang.Exception { testRestrictedSSLProtocolsAndCipherSuites ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = javax.net.ssl.SSLHandshakeException .class ) public void void ( ) java.lang.Exception { testRestrictedSSLProtocolsAndCipherSuites ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { testRestrictedSSLProtocolsAndCipherSuites ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { testRestrictedSSLProtocolsAndCipherSuites ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = javax.net.ssl.SSLHandshakeException .class ) public void void ( ) java.lang.Exception { testRestrictedSSLProtocolsAndCipherSuites ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.embedded.undertow.JspServlet org.springframework.boot.web.embedded.undertow.JspServlet ( ) { return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File ) throws java.lang.InterruptedException { long long = java.lang.System . long ( ) + NUMBER ; while ( ! java.io.File . boolean ( ) && java.lang.System . long ( ) < long ) { java.lang.Thread . void ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.ServletContainer org.springframework.boot.web.embedded.undertow.ServletContainer ( ) { UndertowServletWebServer org.springframework.boot.web.embedded.undertow.UndertowServletWebServer = ( UndertowServletWebServer ) org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory ( ) . getWebServer ( ) ; return ( ( DeploymentManager ) ReflectionTestUtils . getField ( org.springframework.boot.web.embedded.undertow.UndertowServletWebServer , STRING ) ) . getDeployment ( ) . getServletContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return ( ( DeploymentManager ) ReflectionTestUtils . getField ( this . webServer , STRING ) ) . getDeployment ( ) . getMimeExtensionMappings ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.boot.web.embedded.undertow.Mapping> < Mapping > java.util.Collection<org.springframework.boot.web.embedded.undertow.Mapping> ( ) { java.util.Set<org.springframework.boot.web.embedded.undertow.Mapping> < Mapping > java.util.Set<org.springframework.boot.web.embedded.undertow.Mapping> = new java.util.HashSet <> ( super. getExpectedMimeMappings ( ) ) ; java.util.Set<org.springframework.boot.web.embedded.undertow.Mapping> . add ( new Mapping ( STRING , STRING ) ) ; return java.util.Set<org.springframework.boot.web.embedded.undertow.Mapping> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.nio.charset.Charset java.nio.charset.Charset ( java.util.Locale java.util.Locale ) { DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo = ( ( DeploymentManager ) ReflectionTestUtils . getField ( this . webServer , STRING ) ) . getDeployment ( ) . getDeploymentInfo ( ) ; java.lang.String java.lang.String = org.springframework.boot.web.embedded.undertow.DeploymentInfo . getLocaleCharsetMapping ( ) . get ( java.util.Locale . java.lang.String ( ) ) ; return ( java.lang.String != null ) ? java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.RuntimeException java.lang.RuntimeException , int int ) { assertThat ( java.lang.RuntimeException ) . isInstanceOf ( PortInUseException .class ) ; assertThat ( ( ( PortInUseException ) java.lang.RuntimeException ) . getPort ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
