<METHOD_START> public void ( AbstractInboundFileSynchronizer < F > org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> ) { this( org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> , null ); }  <METHOD_END>
<METHOD_START> public void ( AbstractInboundFileSynchronizer < F > org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> , java.util.Comparator<java.io.File> < java.io.File > java.util.Comparator<java.io.File> ) { Assert . notNull ( org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> , STRING ) ; this . org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> = org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> ; if ( java.util.Comparator<java.io.File> == null ) { this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource = new FileReadingMessageSource ( ) ; } else { this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource = new FileReadingMessageSource ( java.util.Comparator<java.io.File> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> public void void ( FileListFilter < java.io.File > org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> ) { this . org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> = org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . setUseWatchService ( boolean ) ; if ( boolean ) { this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . setWatchEvents ( FileReadingMessageSource . WatchEventType . CREATE , FileReadingMessageSource . WatchEventType . MODIFY , FileReadingMessageSource . WatchEventType . DELETE ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; Assert . notNull ( this . java.io.File , STRING ) ; try { if ( ! this . java.io.File . boolean ( ) ) { if ( this . boolean ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . java.io.File + STRING ) ; } this . java.io.File . boolean ( ) ; } else { throw new java.io.FileNotFoundException ( this . java.io.File . java.lang.String ( ) ) ; } } this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . setDirectory ( this . java.io.File ) ; if ( this . org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> == null ) { this . org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> = new FileSystemPersistentAcceptOnceFileListFilter ( new SimpleMetadataStore ( ) , getComponentName ( ) ) ; } FileListFilter < java.io.File > org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> = org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> ( ) ; if ( ! this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . isUseWatchService ( ) ) { RecursiveDirectoryScanner org.springframework.integration.file.remote.synchronizer.RecursiveDirectoryScanner = new RecursiveDirectoryScanner ( ) ; org.springframework.integration.file.remote.synchronizer.RecursiveDirectoryScanner . setFilter ( org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> ) ; this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . setScanner ( org.springframework.integration.file.remote.synchronizer.RecursiveDirectoryScanner ) ; } else { this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . setFilter ( org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> ) ; } if ( this . getBeanFactory ( ) != null ) { this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . setBeanFactory ( this . getBeanFactory ( ) ) ; } this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . afterPropertiesSet ( ) ; this . org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> . afterPropertiesSet ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING + this . java.lang.Class<? extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource> ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; try { this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . stop ( ) ; this . org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> . close ( ) ; } catch ( java.io.IOException java.io.IOException ) { logger . error ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.integration.file.remote.synchronizer.Message<java.io.File> < java.io.File > org.springframework.integration.file.remote.synchronizer.Message<java.io.File> ( int int ) { Message < java.io.File > org.springframework.integration.file.remote.synchronizer.Message<java.io.File> = this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . receive ( ) ; if ( org.springframework.integration.file.remote.synchronizer.Message<java.io.File> == null ) { this . org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> . synchronizeToLocalDirectory ( this . java.io.File , int ) ; org.springframework.integration.file.remote.synchronizer.Message<java.io.File> = this . org.springframework.integration.file.remote.synchronizer.FileReadingMessageSource . receive ( ) ; } return org.springframework.integration.file.remote.synchronizer.Message<java.io.File> ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> < java.io.File > org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> ( ) { java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING + this . org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<F> . getTemporaryFileSuffix ( ) + STRING ) ; return new CompositeFileListFilter < java.io.File > ( java.util.Arrays . java.util.List ( this . org.springframework.integration.file.remote.synchronizer.FileListFilter<java.io.File> , new RegexPatternFileListFilter ( java.util.regex.Pattern ) ) ) ; }  <METHOD_END>
