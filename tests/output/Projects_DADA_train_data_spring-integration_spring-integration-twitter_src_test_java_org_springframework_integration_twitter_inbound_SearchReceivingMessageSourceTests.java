<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ Ignore public void void ( ) java.lang.Exception { PropertiesFactoryBean org.springframework.integration.twitter.inbound.PropertiesFactoryBean = new PropertiesFactoryBean ( ) ; org.springframework.integration.twitter.inbound.PropertiesFactoryBean . setLocation ( new ClassPathResource ( STRING ) ) ; org.springframework.integration.twitter.inbound.PropertiesFactoryBean . afterPropertiesSet ( ) ; java.util.Properties java.util.Properties = org.springframework.integration.twitter.inbound.PropertiesFactoryBean . getObject ( ) ; TwitterTemplate org.springframework.integration.twitter.inbound.TwitterTemplate = new TwitterTemplate ( java.util.Properties . java.lang.String ( STRING ) , java.util.Properties . java.lang.String ( STRING ) , java.util.Properties . java.lang.String ( STRING ) , java.util.Properties . java.lang.String ( STRING ) ) ; SearchReceivingMessageSource org.springframework.integration.twitter.inbound.SearchReceivingMessageSource = new SearchReceivingMessageSource ( org.springframework.integration.twitter.inbound.TwitterTemplate , STRING ) ; org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . setQuery ( java.lang.String ) ; org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . afterPropertiesSet ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < Tweet > org.springframework.integration.twitter.inbound.Message<org.springframework.integration.twitter.inbound.Tweet> = ( Message < Tweet > ) org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . receive ( ) ; if ( org.springframework.integration.twitter.inbound.Message<org.springframework.integration.twitter.inbound.Tweet> != null ) { Tweet org.springframework.integration.twitter.inbound.Tweet = org.springframework.integration.twitter.inbound.Message<org.springframework.integration.twitter.inbound.Tweet> . getPayload ( ) ; org.springframework.integration.twitter.inbound.Log . info ( org.springframework.integration.twitter.inbound.Tweet . getFromUser ( ) + STRING + org.springframework.integration.twitter.inbound.Tweet . getText ( ) + STRING + org.springframework.integration.twitter.inbound.Tweet . getCreatedAt ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final SearchReceivingMessageSource org.springframework.integration.twitter.inbound.SearchReceivingMessageSource = new SearchReceivingMessageSource ( new TwitterTemplate ( STRING ) , STRING ) ; org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . setComponentName ( STRING ) ; final java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.twitter.inbound.SearchReceivingMessageSource , STRING ) ; final java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.twitter.inbound.SearchReceivingMessageSource , STRING ) ; assertNull ( java.lang.Object ) ; assertNotNull ( java.lang.Object ) ; org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . afterPropertiesSet ( ) ; final java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.twitter.inbound.SearchReceivingMessageSource , STRING ) ; final java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.twitter.inbound.SearchReceivingMessageSource , STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SimpleMetadataStore ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; final Twitter org.springframework.integration.twitter.inbound.Twitter = TestUtils . getPropertyValue ( org.springframework.integration.twitter.inbound.SearchReceivingMessageSource , STRING , Twitter .class ) ; assertFalse ( org.springframework.integration.twitter.inbound.Twitter . isAuthorized ( ) ) ; assertNotNull ( org.springframework.integration.twitter.inbound.Twitter . userOperations ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final TwitterTemplate org.springframework.integration.twitter.inbound.TwitterTemplate = mock ( TwitterTemplate .class ) ; final SearchOperations org.springframework.integration.twitter.inbound.SearchOperations = mock ( SearchOperations .class ) ; when ( org.springframework.integration.twitter.inbound.TwitterTemplate . searchOperations ( ) ) . thenReturn ( org.springframework.integration.twitter.inbound.SearchOperations ) ; when ( org.springframework.integration.twitter.inbound.TwitterTemplate . searchOperations ( ) . search ( java.lang.String , NUMBER , NUMBER , NUMBER ) ) . thenReturn ( null ) ; final SearchReceivingMessageSource org.springframework.integration.twitter.inbound.SearchReceivingMessageSource = new SearchReceivingMessageSource ( org.springframework.integration.twitter.inbound.TwitterTemplate , STRING ) ; org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . setQuery ( java.lang.String ) ; final java.lang.String java.lang.String = TestUtils . getPropertyValue ( org.springframework.integration.twitter.inbound.SearchReceivingMessageSource , STRING , java.lang.String .class ) ; assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( STRING , org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . getComponentType ( ) ) ; final java.util.List<org.springframework.integration.twitter.inbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.inbound.Tweet> = org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . pollForTweets ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.integration.twitter.inbound.Tweet> ) ; assertTrue ( java.util.List<org.springframework.integration.twitter.inbound.Tweet> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final TwitterTemplate org.springframework.integration.twitter.inbound.TwitterTemplate ; final SearchOperations org.springframework.integration.twitter.inbound.SearchOperations = mock ( SearchOperations .class ) ; final java.util.List<org.springframework.integration.twitter.inbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.inbound.Tweet> = new java.util.ArrayList<org.springframework.integration.twitter.inbound.Tweet> < Tweet > ( ) ; java.util.List<org.springframework.integration.twitter.inbound.Tweet> . add ( mock ( Tweet .class ) ) ; java.util.List<org.springframework.integration.twitter.inbound.Tweet> . add ( mock ( Tweet .class ) ) ; java.util.List<org.springframework.integration.twitter.inbound.Tweet> . add ( mock ( Tweet .class ) ) ; final SearchResults org.springframework.integration.twitter.inbound.SearchResults = new SearchResults ( java.util.List<org.springframework.integration.twitter.inbound.Tweet> , new SearchMetadata ( NUMBER , NUMBER ) ) ; org.springframework.integration.twitter.inbound.TwitterTemplate = mock ( TwitterTemplate .class ) ; when ( org.springframework.integration.twitter.inbound.TwitterTemplate . searchOperations ( ) ) . thenReturn ( org.springframework.integration.twitter.inbound.SearchOperations ) ; SearchParameters org.springframework.integration.twitter.inbound.SearchParameters = new SearchParameters ( java.lang.String ) . count ( NUMBER ) . sinceId ( NUMBER ) ; when ( org.springframework.integration.twitter.inbound.TwitterTemplate . searchOperations ( ) . search ( org.springframework.integration.twitter.inbound.SearchParameters ) ) . thenReturn ( org.springframework.integration.twitter.inbound.SearchResults ) ; final SearchReceivingMessageSource org.springframework.integration.twitter.inbound.SearchReceivingMessageSource = new SearchReceivingMessageSource ( org.springframework.integration.twitter.inbound.TwitterTemplate , STRING ) ; org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . setQuery ( java.lang.String ) ; final java.util.List<org.springframework.integration.twitter.inbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.inbound.Tweet> = org.springframework.integration.twitter.inbound.SearchReceivingMessageSource . pollForTweets ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.integration.twitter.inbound.Tweet> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.twitter.inbound.Tweet> . size ( ) ) ; }  <METHOD_END>
