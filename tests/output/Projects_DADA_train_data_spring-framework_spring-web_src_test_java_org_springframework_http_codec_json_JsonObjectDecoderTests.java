<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonObjectDecoder org.springframework.http.codec.json.JsonObjectDecoder = new JsonObjectDecoder ( ) ; Flux < DataBuffer > org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> = Flux . just ( stringBuffer ( STRING ) ) ; Flux < java.lang.String > org.springframework.http.codec.json.Flux<java.lang.String> = org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( org.springframework.http.codec.json.JsonObjectDecoderTests :: toString ) ; StepVerifier . create ( org.springframework.http.codec.json.Flux<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { JsonObjectDecoder org.springframework.http.codec.json.JsonObjectDecoder = new JsonObjectDecoder ( ) ; Flux < DataBuffer > org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> = Flux . just ( stringBuffer ( STRING ) , stringBuffer ( STRING ) ) ; Flux < java.lang.String > org.springframework.http.codec.json.Flux<java.lang.String> = org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( org.springframework.http.codec.json.JsonObjectDecoderTests :: toString ) ; StepVerifier . create ( org.springframework.http.codec.json.Flux<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { JsonObjectDecoder org.springframework.http.codec.json.JsonObjectDecoder = new JsonObjectDecoder ( ) ; Flux < DataBuffer > org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> = Flux . just ( stringBuffer ( STRING ) ) ; Flux < java.lang.String > org.springframework.http.codec.json.Flux<java.lang.String> = org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( org.springframework.http.codec.json.JsonObjectDecoderTests :: toString ) ; StepVerifier . create ( org.springframework.http.codec.json.Flux<java.lang.String> ) . expectNext ( STRING ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> = Flux . just ( stringBuffer ( STRING ) ) ; org.springframework.http.codec.json.Flux<java.lang.String> = org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( org.springframework.http.codec.json.JsonObjectDecoderTests :: toString ) ; StepVerifier . create ( org.springframework.http.codec.json.Flux<java.lang.String> ) . expectNext ( STRING ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { JsonObjectDecoder org.springframework.http.codec.json.JsonObjectDecoder = new JsonObjectDecoder ( ) ; Flux < DataBuffer > org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> = Flux . just ( stringBuffer ( STRING ) , stringBuffer ( STRING ) ) ; Flux < java.lang.String > org.springframework.http.codec.json.Flux<java.lang.String> = org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( org.springframework.http.codec.json.JsonObjectDecoderTests :: toString ) ; StepVerifier . create ( org.springframework.http.codec.json.Flux<java.lang.String> ) . expectNext ( STRING ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> = Flux . just ( stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) ) ; org.springframework.http.codec.json.Flux<java.lang.String> = org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( org.springframework.http.codec.json.JsonObjectDecoderTests :: toString ) ; StepVerifier . create ( org.springframework.http.codec.json.Flux<java.lang.String> ) . expectNext ( STRING ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> = Flux . just ( stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) ) ; org.springframework.http.codec.json.Flux<java.lang.String> = org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Flux<org.springframework.http.codec.json.DataBuffer> , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( org.springframework.http.codec.json.JsonObjectDecoderTests :: toString ) ; StepVerifier . create ( org.springframework.http.codec.json.Flux<java.lang.String> ) . expectNext ( STRING ) . expectNext ( STRING ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( DataBuffer org.springframework.http.codec.json.DataBuffer ) { byte [] byte[] = new byte [ org.springframework.http.codec.json.DataBuffer . readableByteCount ( ) ] ; org.springframework.http.codec.json.DataBuffer . read ( byte[] ) ; return new java.lang.String ( byte[] , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
