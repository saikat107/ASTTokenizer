<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.repository.config.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrarUnitTests.Config .class , true ) ; org.springframework.data.jpa.repository.config.BeanDefinitionRegistry = new DefaultListableBeanFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaRepositoriesRegistrar org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar = new JpaRepositoriesRegistrar ( ) ; org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar . setResourceLoader ( new DefaultResourceLoader ( ) ) ; org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar . setEnvironment ( new StandardEnvironment ( ) ) ; org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar . registerBeanDefinitions ( org.springframework.data.jpa.repository.config.AnnotationMetadata , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.config.BeanDefinitionRegistry . getBeanDefinitionNames ( ) ) ; assertThat ( java.lang.Iterable<java.lang.String> , hasItems ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
