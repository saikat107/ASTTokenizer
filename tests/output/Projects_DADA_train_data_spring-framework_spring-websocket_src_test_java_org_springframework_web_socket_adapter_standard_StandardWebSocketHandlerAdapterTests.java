<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.adapter.standard.Session = mock ( Session .class ) ; this . org.springframework.web.socket.adapter.standard.WebSocketHandler = mock ( WebSocketHandler .class ) ; this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession = new StandardWebSocketSession ( null , null , null , null ) ; this . org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter = new StandardWebSocketHandlerAdapter ( this . org.springframework.web.socket.adapter.standard.WebSocketHandler , this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { given ( this . org.springframework.web.socket.adapter.standard.Session . getId ( ) ) . willReturn ( STRING ) ; this . org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter . onOpen ( this . org.springframework.web.socket.adapter.standard.Session , null ) ; verify ( this . org.springframework.web.socket.adapter.standard.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession ) ; verify ( this . org.springframework.web.socket.adapter.standard.Session , atLeast ( NUMBER ) ) . addMessageHandler ( any ( MessageHandler . MessageHandler .class ) ) ; given ( this . org.springframework.web.socket.adapter.standard.Session . getId ( ) ) . willReturn ( STRING ) ; assertEquals ( STRING , this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { this . org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter . onClose ( this . org.springframework.web.socket.adapter.standard.Session , new CloseReason ( CloseCodes . NORMAL_CLOSURE , STRING ) ) ; verify ( this . org.springframework.web.socket.adapter.standard.WebSocketHandler ) . afterConnectionClosed ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , CloseStatus . NORMAL . withReason ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; this . org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter . onError ( this . org.springframework.web.socket.adapter.standard.Session , java.lang.Exception ) ; verify ( this . org.springframework.web.socket.adapter.standard.WebSocketHandler ) . handleTransportError ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Exception ) ; }  <METHOD_END>
