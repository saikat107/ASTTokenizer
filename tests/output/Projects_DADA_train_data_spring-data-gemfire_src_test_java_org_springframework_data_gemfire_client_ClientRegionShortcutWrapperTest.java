<METHOD_START> @ Test public void void ( ) { for ( ClientRegionShortcut org.springframework.data.gemfire.client.ClientRegionShortcut : ClientRegionShortcut . values ( ) ) { assertNotNull ( ClientRegionShortcutWrapper . valueOf ( org.springframework.data.gemfire.client.ClientRegionShortcut . name ( ) ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . equals ( ClientRegionShortcutWrapper . valueOf ( org.springframework.data.gemfire.client.ClientRegionShortcut ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( ClientRegionShortcutWrapper . UNSPECIFIED , ClientRegionShortcutWrapper . valueOf ( ( ClientRegionShortcut ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY . isCaching ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY_HEAP_LRU . isCaching ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY_OVERFLOW . isCaching ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL . isCaching ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_HEAP_LRU . isCaching ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_OVERFLOW . isCaching ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT . isCaching ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT_OVERFLOW . isCaching ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . PROXY . isCaching ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . isCaching ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY . isHeapLru ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY_HEAP_LRU . isHeapLru ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_OVERFLOW . isHeapLru ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL . isHeapLru ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_HEAP_LRU . isHeapLru ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_OVERFLOW . isHeapLru ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT . isHeapLru ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT_OVERFLOW . isHeapLru ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . PROXY . isHeapLru ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . isHeapLru ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY . isLocal ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_HEAP_LRU . isLocal ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_OVERFLOW . isLocal ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL . isLocal ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_HEAP_LRU . isLocal ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_OVERFLOW . isLocal ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT . isLocal ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT_OVERFLOW . isLocal ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . PROXY . isLocal ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . isLocal ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY . isOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_HEAP_LRU . isOverflow ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY_OVERFLOW . isOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL . isOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_HEAP_LRU . isOverflow ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_OVERFLOW . isOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT . isOverflow ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT_OVERFLOW . isOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . PROXY . isOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . isOverflow ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY . isPersistent ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_HEAP_LRU . isPersistent ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_OVERFLOW . isPersistent ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL . isPersistent ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_HEAP_LRU . isPersistent ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_OVERFLOW . isPersistent ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT . isPersistent ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT_OVERFLOW . isPersistent ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . PROXY . isPersistent ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . isPersistent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_HEAP_LRU . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . CACHING_PROXY_OVERFLOW . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_HEAP_LRU . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_OVERFLOW . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT . isPersistentOverflow ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT_OVERFLOW . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . PROXY . isPersistentOverflow ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . isPersistentOverflow ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY . isProxy ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY_HEAP_LRU . isProxy ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . CACHING_PROXY_OVERFLOW . isProxy ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL . isProxy ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_HEAP_LRU . isProxy ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_OVERFLOW . isProxy ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT . isProxy ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . LOCAL_PERSISTENT_OVERFLOW . isProxy ( ) ) ; assertTrue ( ClientRegionShortcutWrapper . PROXY . isProxy ( ) ) ; assertFalse ( ClientRegionShortcutWrapper . UNSPECIFIED . isProxy ( ) ) ; }  <METHOD_END>
