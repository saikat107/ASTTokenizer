<METHOD_START> @ Test public void void ( ) { }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { INSTANCE . convert ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { INSTANCE . convert ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( INSTANCE . print ( org.springframework.data.geo.format.Distance , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Parameters public static java.util.Collection<java.lang.String[]> < java.lang.String [] > java.util.Collection<java.lang.String[]> ( ) { return java.util.Arrays . java.util.List<java.lang.String[]> ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING } , new java.lang.String [] { STRING } , new java.lang.String [] { STRING } , new java.lang.String [] { STRING } , new java.lang.String [] { STRING } , new java.lang.String [] { STRING } , new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( INSTANCE . convert ( java.lang.String ) ) . isEqualTo ( org.springframework.data.geo.format.Distance ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { assertThat ( INSTANCE . parse ( java.lang.String , java.util.Locale . java.util.Locale ) ) . isEqualTo ( org.springframework.data.geo.format.Distance ) ; }  <METHOD_END>
