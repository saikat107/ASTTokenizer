<METHOD_START> void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , SourceExtractor org.springframework.context.annotation.SourceExtractor , ResourceLoader org.springframework.context.annotation.ResourceLoader , Environment org.springframework.context.annotation.Environment , BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator , ImportRegistry org.springframework.context.annotation.ImportRegistry ) { this . org.springframework.context.annotation.BeanDefinitionRegistry = org.springframework.context.annotation.BeanDefinitionRegistry ; this . org.springframework.context.annotation.SourceExtractor = org.springframework.context.annotation.SourceExtractor ; this . org.springframework.context.annotation.ResourceLoader = org.springframework.context.annotation.ResourceLoader ; this . org.springframework.context.annotation.Environment = org.springframework.context.annotation.Environment ; this . org.springframework.context.annotation.BeanNameGenerator = org.springframework.context.annotation.BeanNameGenerator ; this . org.springframework.context.annotation.ImportRegistry = org.springframework.context.annotation.ImportRegistry ; this . org.springframework.context.annotation.ConditionEvaluator = new ConditionEvaluator ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.Environment , org.springframework.context.annotation.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<org.springframework.context.annotation.ConfigurationClass> < ConfigurationClass > java.util.Set<org.springframework.context.annotation.ConfigurationClass> ) { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator = new org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator ( ) ; for ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass : java.util.Set<org.springframework.context.annotation.ConfigurationClass> ) { void ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator ) { if ( org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator . boolean ( org.springframework.context.annotation.ConfigurationClass ) ) { java.lang.String java.lang.String = org.springframework.context.annotation.ConfigurationClass . getBeanName ( ) ; if ( StringUtils . hasLength ( java.lang.String ) && this . org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { this . org.springframework.context.annotation.BeanDefinitionRegistry . removeBeanDefinition ( java.lang.String ) ; } this . org.springframework.context.annotation.ImportRegistry . removeImportingClass ( org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) ) ; return; } if ( org.springframework.context.annotation.ConfigurationClass . isImported ( ) ) { void ( org.springframework.context.annotation.ConfigurationClass ) ; } for ( BeanMethod org.springframework.context.annotation.BeanMethod : org.springframework.context.annotation.ConfigurationClass . getBeanMethods ( ) ) { void ( org.springframework.context.annotation.BeanMethod ) ; } void ( org.springframework.context.annotation.ConfigurationClass . getImportedResources ( ) ) ; void ( org.springframework.context.annotation.ConfigurationClass . getImportBeanDefinitionRegistrars ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) ; AnnotatedGenericBeanDefinition org.springframework.context.annotation.AnnotatedGenericBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationMetadata ) ; ScopeMetadata org.springframework.context.annotation.ScopeMetadata = org.springframework.context.annotation.ScopeMetadataResolver . resolveScopeMetadata ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition ) ; org.springframework.context.annotation.AnnotatedGenericBeanDefinition . setScope ( org.springframework.context.annotation.ScopeMetadata . getScopeName ( ) ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.BeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; AnnotationConfigUtils . processCommonDefinitionAnnotations ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition , org.springframework.context.annotation.AnnotationMetadata ) ; BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition , java.lang.String ) ; org.springframework.context.annotation.BeanDefinitionHolder = AnnotationConfigUtils . applyScopedProxyMode ( org.springframework.context.annotation.ScopeMetadata , org.springframework.context.annotation.BeanDefinitionHolder , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; this . org.springframework.context.annotation.BeanDefinitionRegistry . registerBeanDefinition ( org.springframework.context.annotation.BeanDefinitionHolder . getBeanName ( ) , org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ) ; org.springframework.context.annotation.ConfigurationClass . setBeanName ( java.lang.String ) ; if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanMethod org.springframework.context.annotation.BeanMethod ) { ConfigurationClass org.springframework.context.annotation.ConfigurationClass = org.springframework.context.annotation.BeanMethod . getConfigurationClass ( ) ; MethodMetadata org.springframework.context.annotation.MethodMetadata = org.springframework.context.annotation.BeanMethod . getMetadata ( ) ; java.lang.String java.lang.String = org.springframework.context.annotation.MethodMetadata . getMethodName ( ) ; if ( this . org.springframework.context.annotation.ConditionEvaluator . shouldSkip ( org.springframework.context.annotation.MethodMetadata , ConfigurationPhase . REGISTER_BEAN ) ) { configClass . skippedBeanMethods . add ( java.lang.String ) ; return; } if ( configClass . skippedBeanMethods . contains ( java.lang.String ) ) { return; } AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.MethodMetadata , Bean .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( java.util.Arrays . java.util.List ( org.springframework.context.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ) ; java.lang.String java.lang.String = ( ! java.util.List<java.lang.String> . boolean ( ) ? java.util.List<java.lang.String> . java.lang.String ( NUMBER ) : java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { this . org.springframework.context.annotation.BeanDefinitionRegistry . registerAlias ( java.lang.String , java.lang.String ) ; } if ( boolean ( org.springframework.context.annotation.BeanMethod , java.lang.String ) ) { return; } org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition = new org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.MethodMetadata ) ; org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setResource ( org.springframework.context.annotation.ConfigurationClass . getResource ( ) ) ; org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setSource ( this . org.springframework.context.annotation.SourceExtractor . extractSource ( org.springframework.context.annotation.MethodMetadata , org.springframework.context.annotation.ConfigurationClass . getResource ( ) ) ) ; if ( org.springframework.context.annotation.MethodMetadata . isStatic ( ) ) { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setBeanClassName ( org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) ) ; org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setFactoryMethodName ( java.lang.String ) ; } else { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setFactoryBeanName ( org.springframework.context.annotation.ConfigurationClass . getBeanName ( ) ) ; org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setUniqueFactoryMethodName ( java.lang.String ) ; } org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setAttribute ( RequiredAnnotationBeanPostProcessor . SKIP_REQUIRED_CHECK_ATTRIBUTE , java.lang.Boolean . java.lang.Boolean ) ; AnnotationConfigUtils . processCommonDefinitionAnnotations ( org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition , org.springframework.context.annotation.MethodMetadata ) ; Autowire org.springframework.context.annotation.Autowire = org.springframework.context.annotation.AnnotationAttributes . getEnum ( STRING ) ; if ( org.springframework.context.annotation.Autowire . isAutowire ( ) ) { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setAutowireMode ( org.springframework.context.annotation.Autowire . value ( ) ) ; } java.lang.String java.lang.String = org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setInitMethodName ( java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ; if ( java.lang.String != null ) { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setDestroyMethodName ( java.lang.String ) ; } ScopedProxyMode org.springframework.context.annotation.ScopedProxyMode = ScopedProxyMode . NO ; AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.MethodMetadata , Scope .class ) ; if ( org.springframework.context.annotation.AnnotationAttributes != null ) { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . setScope ( org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ) ; org.springframework.context.annotation.ScopedProxyMode = org.springframework.context.annotation.AnnotationAttributes . getEnum ( STRING ) ; if ( org.springframework.context.annotation.ScopedProxyMode == ScopedProxyMode . DEFAULT ) { org.springframework.context.annotation.ScopedProxyMode = ScopedProxyMode . NO ; } } BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ; if ( org.springframework.context.annotation.ScopedProxyMode != ScopedProxyMode . NO ) { BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder = ScopedProxyCreator . createScopedProxy ( new BeanDefinitionHolder ( org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition , java.lang.String ) , this . org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.ScopedProxyMode == ScopedProxyMode . TARGET_CLASS ) ; org.springframework.context.annotation.BeanDefinition = new org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ( ( RootBeanDefinition ) org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) , org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.MethodMetadata ) ; } if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) , java.lang.String ) ) ; } this . org.springframework.context.annotation.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.context.annotation.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( BeanMethod org.springframework.context.annotation.BeanMethod , java.lang.String java.lang.String ) { if ( ! this . org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { return false ; } BeanDefinition org.springframework.context.annotation.BeanDefinition = this . org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( org.springframework.context.annotation.BeanDefinition instanceof org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ) { org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition = ( org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ) org.springframework.context.annotation.BeanDefinition ; return ( org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) . equals ( org.springframework.context.annotation.BeanMethod . getConfigurationClass ( ) . getMetadata ( ) . getClassName ( ) ) ) ; } if ( org.springframework.context.annotation.BeanDefinition instanceof ScannedGenericBeanDefinition ) { return false ; } if ( org.springframework.context.annotation.BeanDefinition . getRole ( ) > BeanDefinition . ROLE_APPLICATION ) { return false ; } if ( this . org.springframework.context.annotation.BeanDefinitionRegistry instanceof DefaultListableBeanFactory && ! ( ( DefaultListableBeanFactory ) this . org.springframework.context.annotation.BeanDefinitionRegistry ) . isAllowBeanDefinitionOverriding ( ) ) { throw new BeanDefinitionStoreException ( org.springframework.context.annotation.BeanMethod . getConfigurationClass ( ) . getResource ( ) . getDescription ( ) , java.lang.String , STRING + org.springframework.context.annotation.BeanDefinition ) ; } if ( org.springframework.context.annotation.Log . isInfoEnabled ( ) ) { org.springframework.context.annotation.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , org.springframework.context.annotation.BeanMethod , java.lang.String ) ) ; } return true ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> < java.lang.String , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> < ? extends BeanDefinitionReader > > java.util.Map<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> ) { java.util.Map<java.lang.Class<?>,org.springframework.context.annotation.BeanDefinitionReader> < java.lang.Class<?> < ? > , BeanDefinitionReader > java.util.Map<java.lang.Class<?>,org.springframework.context.annotation.BeanDefinitionReader> = new java.util.HashMap<java.lang.Class<?>,org.springframework.context.annotation.BeanDefinitionReader> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> < java.lang.String , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> < ? extends BeanDefinitionReader > > java.util.Map.Entry<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> : java.util.Map<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> . getKey ( ) ; java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> < ? extends BeanDefinitionReader > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> = java.util.Map.Entry<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> . getValue ( ) ; if ( BeanDefinitionReader .class == java.lang.Class<> ) { if ( StringUtils . endsWithIgnoreCase ( java.lang.String , STRING ) ) { java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> = GroovyBeanDefinitionReader .class ; } else { java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> = XmlBeanDefinitionReader .class ; } } BeanDefinitionReader org.springframework.context.annotation.BeanDefinitionReader = java.util.Map<java.lang.Class<?>,org.springframework.context.annotation.BeanDefinitionReader> . get ( java.lang.Class<> ) ; if ( org.springframework.context.annotation.BeanDefinitionReader == null ) { try { org.springframework.context.annotation.BeanDefinitionReader = java.lang.Class<> . java.lang.reflect.Constructor<> ( BeanDefinitionRegistry .class ) . newInstance ( this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; if ( org.springframework.context.annotation.BeanDefinitionReader instanceof AbstractBeanDefinitionReader ) { AbstractBeanDefinitionReader org.springframework.context.annotation.AbstractBeanDefinitionReader = ( ( AbstractBeanDefinitionReader ) org.springframework.context.annotation.BeanDefinitionReader ) ; org.springframework.context.annotation.AbstractBeanDefinitionReader . setResourceLoader ( this . org.springframework.context.annotation.ResourceLoader ) ; org.springframework.context.annotation.AbstractBeanDefinitionReader . setEnvironment ( this . org.springframework.context.annotation.Environment ) ; } java.util.Map<java.lang.Class<?>,org.springframework.context.annotation.BeanDefinitionReader> . put ( java.lang.Class<> , org.springframework.context.annotation.BeanDefinitionReader ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } org.springframework.context.annotation.BeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> < ImportBeanDefinitionRegistrar , AnnotationMetadata > java.util.Map<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> ) { for ( java.util.Map . java.util.Map.Entry<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> < ImportBeanDefinitionRegistrar , AnnotationMetadata > java.util.Map.Entry<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> : java.util.Map<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> . entrySet ( ) ) { java.util.Map.Entry<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> . getKey ( ) . registerBeanDefinitions ( java.util.Map.Entry<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> . getValue ( ) , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> public void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , MethodMetadata org.springframework.context.annotation.MethodMetadata ) { this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) ; this . org.springframework.context.annotation.MethodMetadata = org.springframework.context.annotation.MethodMetadata ; setLenientConstructorResolution ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition , ConfigurationClass org.springframework.context.annotation.ConfigurationClass , MethodMetadata org.springframework.context.annotation.MethodMetadata ) { super( org.springframework.context.annotation.RootBeanDefinition ); this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) ; this . org.springframework.context.annotation.MethodMetadata = org.springframework.context.annotation.MethodMetadata ; }  <METHOD_END>
<METHOD_START> private void ( org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ) { super( org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ); this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . org.springframework.context.annotation.AnnotationMetadata ; this . org.springframework.context.annotation.MethodMetadata = org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition . org.springframework.context.annotation.MethodMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ( ) { return this . org.springframework.context.annotation.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.MethodMetadata org.springframework.context.annotation.MethodMetadata ( ) { return this . org.springframework.context.annotation.MethodMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( super. isFactoryMethod ( java.lang.reflect.Method ) && BeanAnnotationHelper . isBeanAnnotated ( java.lang.reflect.Method ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ( ) { return new org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition ( this ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) { java.lang.Boolean java.lang.Boolean = this . java.util.Map<org.springframework.context.annotation.ConfigurationClass,java.lang.Boolean> . get ( org.springframework.context.annotation.ConfigurationClass ) ; if ( java.lang.Boolean == null ) { if ( org.springframework.context.annotation.ConfigurationClass . isImported ( ) ) { boolean boolean = true ; for ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass : org.springframework.context.annotation.ConfigurationClass . getImportedBy ( ) ) { if ( ! boolean ( org.springframework.context.annotation.ConfigurationClass ) ) { boolean = false ; break; } } if ( boolean ) { java.lang.Boolean = true ; } } if ( java.lang.Boolean == null ) { java.lang.Boolean = org.springframework.context.annotation.ConditionEvaluator . shouldSkip ( org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) , ConfigurationPhase . REGISTER_BEAN ) ; } this . java.util.Map<org.springframework.context.annotation.ConfigurationClass,java.lang.Boolean> . put ( org.springframework.context.annotation.ConfigurationClass , java.lang.Boolean ) ; } return java.lang.Boolean ; }  <METHOD_END>
