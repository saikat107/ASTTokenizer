<METHOD_START> @ Before public void void ( ) { org.springframework.web.accept.ContentNegotiationManagerFactoryBeanTests.TestServletContext org.springframework.web.accept.ContentNegotiationManagerFactoryBeanTests.TestServletContext = new org.springframework.web.accept.ContentNegotiationManagerFactoryBeanTests.TestServletContext ( ) ; org.springframework.web.accept.ContentNegotiationManagerFactoryBeanTests.TestServletContext . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING , STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.accept.ContentNegotiationManagerFactoryBeanTests.TestServletContext ) ; this . org.springframework.web.accept.NativeWebRequest = new ServletWebRequest ( this . org.springframework.web.accept.MockHttpServletRequest ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setServletContext ( this . org.springframework.web.accept.MockHttpServletRequest . getServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( MediaType . IMAGE_GIF ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( STRING , java.util.Collections .< MediaType > java.util.List<org.springframework.web.accept.MediaType> ( ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest . setParameter ( STRING , STRING ) ; assertEquals ( STRING , java.util.Collections .< MediaType > java.util.List<org.springframework.web.accept.MediaType> ( ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest . addHeader ( STRING , MediaType . IMAGE_GIF_VALUE ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( MediaType . IMAGE_GIF ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setFavorPathExtension ( true ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . addMediaTypes ( java.util.Collections . java.util.Map ( STRING , new MediaType ( STRING , STRING ) ) ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . IMAGE_GIF ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotAcceptableException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setFavorPathExtension ( true ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setIgnoreUnknownPathExtensions ( false ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setFavorParameter ( true ) ; java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> = new java.util.HashMap<java.lang.String,org.springframework.web.accept.MediaType> <> ( ) ; java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> . put ( STRING , MediaType . APPLICATION_JSON ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . addMediaTypes ( java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotAcceptableException .class ) public void void ( ) org.springframework.web.accept.HttpMediaTypeNotAcceptableException { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setFavorParameter ( true ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setIgnoreAcceptHeader ( true ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest . addHeader ( STRING , MediaType . IMAGE_GIF_VALUE ) ; assertEquals ( java.util.Collections .< MediaType > java.util.List<org.springframework.web.accept.MediaType> ( ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setDefaultContentType ( MediaType . APPLICATION_JSON ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . addHeader ( STRING , MediaType . ALL_VALUE ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . setDefaultContentTypeStrategy ( new FixedContentNegotiationStrategy ( MediaType . APPLICATION_JSON ) ) ; this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.accept.ContentNegotiationManager = this . org.springframework.web.accept.ContentNegotiationManagerFactoryBean . getObject ( ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . addHeader ( STRING , MediaType . ALL_VALUE ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.accept.ContentNegotiationManager . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = StringUtils . getFilenameExtension ( java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
