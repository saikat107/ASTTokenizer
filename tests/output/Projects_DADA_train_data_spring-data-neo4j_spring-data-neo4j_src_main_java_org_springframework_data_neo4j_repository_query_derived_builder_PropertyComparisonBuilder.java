<METHOD_START> public void ( Part org.springframework.data.neo4j.repository.query.derived.builder.Part , BooleanOperator org.springframework.data.neo4j.repository.query.derived.builder.BooleanOperator , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( org.springframework.data.neo4j.repository.query.derived.builder.Part , org.springframework.data.neo4j.repository.query.derived.builder.BooleanOperator , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.neo4j.repository.query.derived.builder.Filter> < Filter > java.util.List<org.springframework.data.neo4j.repository.query.derived.builder.Filter> ( java.util.Stack<java.lang.Object> < java.lang.Object > java.util.Stack<java.lang.Object> ) { Filter org.springframework.data.neo4j.repository.query.derived.builder.Filter = new Filter ( propertyName ( ) , org.springframework.data.neo4j.repository.query.derived.builder.ComparisonOperator ( part . getType ( ) ) , java.util.Stack<java.lang.Object> . java.lang.Object ( ) ) ; org.springframework.data.neo4j.repository.query.derived.builder.Filter . setOwnerEntityType ( entityType ) ; org.springframework.data.neo4j.repository.query.derived.builder.Filter . setBooleanOperator ( booleanOperator ) ; org.springframework.data.neo4j.repository.query.derived.builder.Filter . setNegated ( isNegated ( ) ) ; org.springframework.data.neo4j.repository.query.derived.builder.Filter . setFunction ( new PropertyComparison ( java.util.Stack<java.lang.Object> . java.lang.Object ( ) ) ) ; setNestedAttributes ( part , org.springframework.data.neo4j.repository.query.derived.builder.Filter ) ; return java.util.Collections . java.util.List ( org.springframework.data.neo4j.repository.query.derived.builder.Filter ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.neo4j.repository.query.derived.builder.ComparisonOperator org.springframework.data.neo4j.repository.query.derived.builder.ComparisonOperator ( Part . Part Part.Type ) { switch ( Part.Type ) { case AFTER : case GREATER_THAN : return ComparisonOperator . GREATER_THAN ; case GREATER_THAN_EQUAL : return ComparisonOperator . GREATER_THAN_EQUAL ; case BEFORE : case LESS_THAN : return ComparisonOperator . LESS_THAN ; case LESS_THAN_EQUAL : return ComparisonOperator . LESS_THAN_EQUAL ; case REGEX : return ComparisonOperator . MATCHES ; case LIKE : case NOT_LIKE : return ComparisonOperator . LIKE ; case STARTING_WITH : return ComparisonOperator . STARTING_WITH ; case ENDING_WITH : return ComparisonOperator . ENDING_WITH ; case CONTAINING : case NOT_CONTAINING : return ComparisonOperator . CONTAINING ; case IN : case NOT_IN : return ComparisonOperator . IN ; case SIMPLE_PROPERTY : return ComparisonOperator . EQUALS ; default: throw new java.lang.IllegalArgumentException ( STRING + Part.Type ) ; } }  <METHOD_END>
