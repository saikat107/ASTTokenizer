<METHOD_START> public void ( ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> = new java.util.HashMap <> ( ) ; for ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type : org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type[] ( ) ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . put ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type , new DateTimeFormatterFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) . setIso ( boolean ? ISO . DATE : null ) ; this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) . setIso ( boolean ? ISO . TIME : null ) ; this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) . setIso ( boolean ? ISO . DATE_TIME : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) . setStyle ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) . setStyle ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) . setStyle ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatter> . put ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type , org.springframework.format.datetime.joda.DateTimeFormatter ) ; }  <METHOD_END>
<METHOD_START> public void void ( DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatter> . put ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type , org.springframework.format.datetime.joda.DateTimeFormatter ) ; }  <METHOD_END>
<METHOD_START> public void void ( DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ) { this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatter> . put ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type , org.springframework.format.datetime.joda.DateTimeFormatter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.format.datetime.joda.FormatterRegistry ) { JodaTimeConverters . registerConverters ( org.springframework.format.datetime.joda.FormatterRegistry ) ; DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) ; DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) ; DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) ; void ( org.springframework.format.datetime.joda.FormatterRegistry , new ReadablePartialPrinter ( org.springframework.format.datetime.joda.DateTimeFormatter ) , new LocalDateParser ( org.springframework.format.datetime.joda.DateTimeFormatter ) , LocalDate .class ) ; void ( org.springframework.format.datetime.joda.FormatterRegistry , new ReadablePartialPrinter ( org.springframework.format.datetime.joda.DateTimeFormatter ) , new LocalTimeParser ( org.springframework.format.datetime.joda.DateTimeFormatter ) , LocalTime .class ) ; void ( org.springframework.format.datetime.joda.FormatterRegistry , new ReadablePartialPrinter ( org.springframework.format.datetime.joda.DateTimeFormatter ) , new LocalDateTimeParser ( org.springframework.format.datetime.joda.DateTimeFormatter ) , LocalDateTime .class ) ; void ( org.springframework.format.datetime.joda.FormatterRegistry , new ReadableInstantPrinter ( org.springframework.format.datetime.joda.DateTimeFormatter ) , new DateTimeParser ( org.springframework.format.datetime.joda.DateTimeFormatter ) , ReadableInstant .class ) ; if ( this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatter> . containsKey ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type . org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) ) { void ( org.springframework.format.datetime.joda.FormatterRegistry , new ReadableInstantPrinter ( org.springframework.format.datetime.joda.DateTimeFormatter ) , new DateTimeParser ( org.springframework.format.datetime.joda.DateTimeFormatter ) , java.util.Date .class , java.util.Calendar .class ) ; } org.springframework.format.datetime.joda.FormatterRegistry . addFormatterForFieldType ( Period .class , new PeriodFormatter ( ) ) ; org.springframework.format.datetime.joda.FormatterRegistry . addFormatterForFieldType ( Duration .class , new DurationFormatter ( ) ) ; org.springframework.format.datetime.joda.FormatterRegistry . addFormatterForFieldType ( YearMonth .class , new YearMonthFormatter ( ) ) ; org.springframework.format.datetime.joda.FormatterRegistry . addFormatterForFieldType ( MonthDay .class , new MonthDayFormatter ( ) ) ; org.springframework.format.datetime.joda.FormatterRegistry . addFormatterForFieldAnnotation ( new JodaDateTimeFormatAnnotationFormatterFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.format.datetime.joda.DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) { DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatter> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) ; if ( org.springframework.format.datetime.joda.DateTimeFormatter != null ) { return org.springframework.format.datetime.joda.DateTimeFormatter ; } DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) ; return this . java.util.Map<org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type,org.springframework.format.datetime.joda.DateTimeFormatterFactory> . get ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) . createDateTimeFormatter ( org.springframework.format.datetime.joda.DateTimeFormatter ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.format.datetime.joda.DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) { switch ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type ) { case org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type : return DateTimeFormat . shortDate ( ) ; case org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.Type : return DateTimeFormat . shortTime ( ) ; default: return DateTimeFormat . shortDateTime ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( FormatterRegistry org.springframework.format.datetime.joda.FormatterRegistry , Printer < ? > org.springframework.format.datetime.joda.Printer<?> , Parser < ? > org.springframework.format.datetime.joda.Parser<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { org.springframework.format.datetime.joda.FormatterRegistry . addFormatterForFieldType ( java.lang.Class<> , org.springframework.format.datetime.joda.Printer<> , org.springframework.format.datetime.joda.Parser<> ) ; } }  <METHOD_END>
