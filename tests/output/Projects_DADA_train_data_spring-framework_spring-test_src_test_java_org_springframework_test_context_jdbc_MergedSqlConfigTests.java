<METHOD_START> private void void ( MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig ) { assertNotNull ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getDataSource ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionManager ( ) ) ; assertEquals ( STRING , INFERRED , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionMode ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getEncoding ( ) ) ; assertEquals ( STRING , DEFAULT_STATEMENT_SEPARATOR , org.springframework.test.context.jdbc.MergedSqlConfig . getSeparator ( ) ) ; assertEquals ( STRING , DEFAULT_COMMENT_PREFIX , org.springframework.test.context.jdbc.MergedSqlConfig . getCommentPrefix ( ) ) ; assertEquals ( STRING , DEFAULT_BLOCK_COMMENT_START_DELIMITER , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentStartDelimiter ( ) ) ; assertEquals ( STRING , DEFAULT_BLOCK_COMMENT_END_DELIMITER , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentEndDelimiter ( ) ) ; assertEquals ( STRING , FAIL_ON_ERROR , org.springframework.test.context.jdbc.MergedSqlConfig . getErrorMode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) . java.lang.reflect.Method ( STRING ) ; SqlConfig org.springframework.test.context.jdbc.SqlConfig = java.lang.reflect.Method . T ( Sql .class ) . config ( ) ; MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig = new MergedSqlConfig ( org.springframework.test.context.jdbc.SqlConfig , java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) ) ; void ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.jdbc.MergedSqlConfigTests.GlobalConfigWithDefaultsClass .class . java.lang.reflect.Method ( STRING ) ; SqlConfig org.springframework.test.context.jdbc.SqlConfig = java.lang.reflect.Method . T ( Sql .class ) . config ( ) ; MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig = new MergedSqlConfig ( org.springframework.test.context.jdbc.SqlConfig , org.springframework.test.context.jdbc.MergedSqlConfigTests.GlobalConfigWithDefaultsClass .class ) ; void ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) . java.lang.reflect.Method ( STRING ) ; SqlConfig org.springframework.test.context.jdbc.SqlConfig = java.lang.reflect.Method . T ( Sql .class ) . config ( ) ; MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig = new MergedSqlConfig ( org.springframework.test.context.jdbc.SqlConfig , java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) ) ; assertNotNull ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getDataSource ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionManager ( ) ) ; assertEquals ( STRING , ISOLATED , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionMode ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getEncoding ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getSeparator ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getCommentPrefix ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentStartDelimiter ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentEndDelimiter ( ) ) ; assertEquals ( STRING , IGNORE_FAILED_DROPS , org.springframework.test.context.jdbc.MergedSqlConfig . getErrorMode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) . java.lang.reflect.Method ( STRING ) ; SqlConfig org.springframework.test.context.jdbc.SqlConfig = java.lang.reflect.Method . T ( Sql .class ) . config ( ) ; MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig = new MergedSqlConfig ( org.springframework.test.context.jdbc.SqlConfig , java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) ) ; assertNotNull ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; assertEquals ( STRING , CONTINUE_ON_ERROR , org.springframework.test.context.jdbc.MergedSqlConfig . getErrorMode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) . java.lang.reflect.Method ( STRING ) ; SqlConfig org.springframework.test.context.jdbc.SqlConfig = java.lang.reflect.Method . T ( Sql .class ) . config ( ) ; MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig = new MergedSqlConfig ( org.springframework.test.context.jdbc.SqlConfig , java.lang.Class<? extends org.springframework.test.context.jdbc.MergedSqlConfigTests> ( ) ) ; assertNotNull ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; assertEquals ( STRING , IGNORE_FAILED_DROPS , org.springframework.test.context.jdbc.MergedSqlConfig . getErrorMode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.jdbc.MergedSqlConfigTests.GlobalConfigClass .class . java.lang.reflect.Method ( STRING ) ; SqlConfig org.springframework.test.context.jdbc.SqlConfig = java.lang.reflect.Method . T ( Sql .class ) . config ( ) ; MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig = new MergedSqlConfig ( org.springframework.test.context.jdbc.SqlConfig , org.springframework.test.context.jdbc.MergedSqlConfigTests.GlobalConfigClass .class ) ; assertNotNull ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getDataSource ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionManager ( ) ) ; assertEquals ( STRING , INFERRED , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionMode ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getEncoding ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getSeparator ( ) ) ; assertEquals ( STRING , DEFAULT_COMMENT_PREFIX , org.springframework.test.context.jdbc.MergedSqlConfig . getCommentPrefix ( ) ) ; assertEquals ( STRING , DEFAULT_BLOCK_COMMENT_START_DELIMITER , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentStartDelimiter ( ) ) ; assertEquals ( STRING , DEFAULT_BLOCK_COMMENT_END_DELIMITER , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentEndDelimiter ( ) ) ; assertEquals ( STRING , IGNORE_FAILED_DROPS , org.springframework.test.context.jdbc.MergedSqlConfig . getErrorMode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.jdbc.MergedSqlConfigTests.GlobalConfigClass .class . java.lang.reflect.Method ( STRING ) ; SqlConfig org.springframework.test.context.jdbc.SqlConfig = java.lang.reflect.Method . T ( Sql .class ) . config ( ) ; MergedSqlConfig org.springframework.test.context.jdbc.MergedSqlConfig = new MergedSqlConfig ( org.springframework.test.context.jdbc.SqlConfig , org.springframework.test.context.jdbc.MergedSqlConfigTests.GlobalConfigClass .class ) ; assertNotNull ( org.springframework.test.context.jdbc.MergedSqlConfig ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getDataSource ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionManager ( ) ) ; assertEquals ( STRING , INFERRED , org.springframework.test.context.jdbc.MergedSqlConfig . getTransactionMode ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getEncoding ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.context.jdbc.MergedSqlConfig . getSeparator ( ) ) ; assertEquals ( STRING , DEFAULT_COMMENT_PREFIX , org.springframework.test.context.jdbc.MergedSqlConfig . getCommentPrefix ( ) ) ; assertEquals ( STRING , DEFAULT_BLOCK_COMMENT_START_DELIMITER , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentStartDelimiter ( ) ) ; assertEquals ( STRING , DEFAULT_BLOCK_COMMENT_END_DELIMITER , org.springframework.test.context.jdbc.MergedSqlConfig . getBlockCommentEndDelimiter ( ) ) ; assertEquals ( STRING , CONTINUE_ON_ERROR , org.springframework.test.context.jdbc.MergedSqlConfig . getErrorMode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Sql public static void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Sql ( config = @ SqlConfig ( dataSource = STRING , transactionManager = STRING , transactionMode = ISOLATED , encoding = STRING , separator = STRING , commentPrefix = STRING , blockCommentStartDelimiter = STRING , blockCommentEndDelimiter = STRING , errorMode = IGNORE_FAILED_DROPS ) ) public static void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Sql ( config = @ SqlConfig ( errorMode = CONTINUE_ON_ERROR ) ) public static void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Sql ( config = @ SqlConfig ( errorMode = IGNORE_FAILED_DROPS ) ) public static void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Sql ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Sql ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Sql ( scripts = STRING , config = @ SqlConfig ( encoding = STRING , separator = STRING , errorMode = CONTINUE_ON_ERROR ) ) public void void ( ) {		}  <METHOD_END>
