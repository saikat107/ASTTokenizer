<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.Object > ( STRING ) ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertThat ( org.springframework.integration.mongodb.store.MessageGroup . getClass ( ) . getName ( ) , containsString ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . addMessageToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNull ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; java.lang.Object java.lang.Object = java.util.UUID . java.util.UUID ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( java.lang.Object ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.util.UUID ) . build ( ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.util.UUID ) . build ( ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( java.lang.Object , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . addMessageToGroup ( java.lang.Object , org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ) ; assertNull ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( STRING ) ; assertTrue ( java.lang.Object instanceof java.util.UUID ) ; assertEquals ( java.util.UUID , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageGroupStore . pollMessageFromGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageGroupStore . pollMessageFromGroup ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . pollMessageFromGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . pollMessageFromGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . pollMessageFromGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . pollMessageFromGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . addMessageToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; long long = org.springframework.integration.mongodb.store.MessageGroup . getTimestamp ( ) ; long long = org.springframework.integration.mongodb.store.MessageGroup . getLastModified ( ) ; assertEquals ( long , long ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . addMessageToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; long = org.springframework.integration.mongodb.store.MessageGroup . getTimestamp ( ) ; long = org.springframework.integration.mongodb.store.MessageGroup . getLastModified ( ) ; assertTrue ( long > long ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . addMessageToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageStore org.springframework.integration.mongodb.store.MessageStore = this . org.springframework.integration.mongodb.store.MessageStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; java.util.UUID java.util.UUID = org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . getId ( ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . addMessageToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageStore . getMessage ( java.util.UUID ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessageGroup ( NUMBER ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; assertFalse ( org.springframework.integration.mongodb.store.MessageGroup . equals ( org.springframework.integration.mongodb.store.MessageGroup ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( org.springframework.integration.mongodb.store.MessageGroup . getGroupId ( ) , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . completeGroup ( org.springframework.integration.mongodb.store.MessageGroup . getGroupId ( ) ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertTrue ( org.springframework.integration.mongodb.store.MessageGroup . isComplete ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( org.springframework.integration.mongodb.store.MessageGroup . getGroupId ( ) , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . setLastReleasedSequenceNumberForGroup ( org.springframework.integration.mongodb.store.MessageGroup . getGroupId ( ) , NUMBER ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . getLastReleasedMessageSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . addMessageToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> , new GenericMessage < java.lang.String > ( STRING ) , new GenericMessage < java.lang.String > ( STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( STRING , org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( STRING , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( STRING , new GenericMessage < java.lang.String > ( STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> < MessageGroup > java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> = org.springframework.integration.mongodb.store.MessageGroupStore . iterator ( ) ; assertNotNull ( java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> ) ; int int = NUMBER ; while ( java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> . hasNext ( ) ) { java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> . next ( ) ; int ++ ; } assertEquals ( NUMBER , int ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( STRING , org.springframework.integration.mongodb.store.Message<> ) ; java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> = org.springframework.integration.mongodb.store.MessageGroupStore . iterator ( ) ; int = NUMBER ; while ( java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> . hasNext ( ) ) { java.util.Iterator<org.springframework.integration.mongodb.store.MessageGroup> . next ( ) ; int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = ( MessageGroupStore ) this . org.springframework.integration.mongodb.store.MessageStore ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessageGroup ( STRING ) ; ( ( AbstractBatchingMessageGroupStore ) org.springframework.integration.mongodb.store.MessageGroupStore ) . setRemoveBatchSize ( NUMBER ) ; java.util.List<org.springframework.integration.mongodb.store.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.mongodb.store.Message<?>> = new java.util.ArrayList<org.springframework.integration.mongodb.store.Message<?>> < Message < ? > > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < java.lang.String > org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.mongodb.store.Message<?>> . add ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; } MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessagesFromGroup ( java.lang.String , java.util.List<org.springframework.integration.mongodb.store.Message<?>> ) ; org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) throws java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; ClassPathXmlApplicationContext org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , this . java.lang.Class<? extends org.springframework.integration.mongodb.store.AbstractMongoDbMessageGroupStoreTests> ( ) ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . refresh ( ) ; MessageChannel org.springframework.integration.mongodb.store.MessageChannel = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.mongodb.store.QueueChannel = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.MessageChannel . send ( org.springframework.integration.mongodb.store.Message<> ) ; assertNull ( org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.mongodb.store.MessageChannel . send ( org.springframework.integration.mongodb.store.Message<> ) ; assertNull ( org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.mongodb.store.MessageChannel . send ( MessageBuilder . withPayload ( STRING + int ) . setSequenceNumber ( int ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ) ; } org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , this . java.lang.Class<? extends org.springframework.integration.mongodb.store.AbstractMongoDbMessageGroupStoreTests> ( ) ) ; org.springframework.integration.mongodb.store.MessageChannel = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.mongodb.store.QueueChannel = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.MessageChannel . send ( org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = this . org.springframework.integration.mongodb.store.MessageGroupStore ( ) ; org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; DirectChannel org.springframework.integration.mongodb.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.mongodb.store.DirectChannel . setBeanName ( STRING ) ; DirectChannel org.springframework.integration.mongodb.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.mongodb.store.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.mongodb.store.Message<?> = MessageHistory . write ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.DirectChannel ) ; org.springframework.integration.mongodb.store.Message<?> = MessageHistory . write ( org.springframework.integration.mongodb.store.Message<> , org.springframework.integration.mongodb.store.DirectChannel ) ; org.springframework.integration.mongodb.store.MessageGroupStore . addMessagesToGroup ( NUMBER , org.springframework.integration.mongodb.store.Message<> ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageGroup ) ; java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> = org.springframework.integration.mongodb.store.MessageGroup . getMessages ( ) ; assertTrue ( ! java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> . isEmpty ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = java.util.Collection<org.springframework.integration.mongodb.store.Message<?>> . iterator ( ) . next ( ) ; MessageHistory org.springframework.integration.mongodb.store.MessageHistory = MessageHistory . read ( org.springframework.integration.mongodb.store.Message<> ) ; assertNotNull ( org.springframework.integration.mongodb.store.MessageHistory ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageHistory . size ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.mongodb.store.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.mongodb.store.MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.mongodb.store.MessageStore org.springframework.integration.mongodb.store.MessageStore ( ) java.lang.Exception ;  <METHOD_END>
