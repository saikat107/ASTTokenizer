<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { this . org.springframework.web.servlet.tags.UrlTag.UrlType = org.springframework.web.servlet.tags.UrlTag.UrlType . org.springframework.web.servlet.tags.UrlTag.UrlType ; this . java.lang.String = java.lang.String ; } else if ( java.lang.String . boolean ( STRING ) ) { this . org.springframework.web.servlet.tags.UrlTag.UrlType = org.springframework.web.servlet.tags.UrlTag.UrlType . org.springframework.web.servlet.tags.UrlTag.UrlType ; this . java.lang.String = java.lang.String ; } else { this . org.springframework.web.servlet.tags.UrlTag.UrlType = org.springframework.web.servlet.tags.UrlTag.UrlType . org.springframework.web.servlet.tags.UrlTag.UrlType ; this . java.lang.String = java.lang.String ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { this . java.lang.String = java.lang.String ; } else { this . java.lang.String = STRING + java.lang.String ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . int = TagUtils . getScope ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) throws org.springframework.web.servlet.tags.JspException { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Param org.springframework.web.servlet.tags.Param ) { this . java.util.List<org.springframework.web.servlet.tags.Param> . add ( org.springframework.web.servlet.tags.Param ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.web.servlet.tags.JspException { this . java.util.List<org.springframework.web.servlet.tags.Param> = new java.util.LinkedList <> ( ) ; this . java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; return EVAL_BODY_INCLUDE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.web.servlet.tags.JspException { java.lang.String java.lang.String = java.lang.String ( ) ; RequestDataValueProcessor org.springframework.web.servlet.tags.RequestDataValueProcessor = getRequestContext ( ) . getRequestDataValueProcessor ( ) ; ServletRequest org.springframework.web.servlet.tags.ServletRequest = this . pageContext . getRequest ( ) ; if ( ( org.springframework.web.servlet.tags.RequestDataValueProcessor != null ) && ( org.springframework.web.servlet.tags.ServletRequest instanceof HttpServletRequest ) ) { java.lang.String = org.springframework.web.servlet.tags.RequestDataValueProcessor . processUrl ( ( HttpServletRequest ) org.springframework.web.servlet.tags.ServletRequest , java.lang.String ) ; } if ( this . java.lang.String == null ) { try { pageContext . getOut ( ) . print ( java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { throw new JspException ( java.io.IOException ) ; } } else { pageContext . setAttribute ( java.lang.String , java.lang.String , int ) ; } return EVAL_PAGE ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) org.springframework.web.servlet.tags.JspException { HttpServletRequest org.springframework.web.servlet.tags.HttpServletRequest = ( HttpServletRequest ) pageContext . getRequest ( ) ; HttpServletResponse org.springframework.web.servlet.tags.HttpServletResponse = ( HttpServletResponse ) pageContext . getResponse ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( this . org.springframework.web.servlet.tags.UrlTag.UrlType == org.springframework.web.servlet.tags.UrlTag.UrlType . org.springframework.web.servlet.tags.UrlTag.UrlType ) { if ( this . java.lang.String == null ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.web.servlet.tags.HttpServletRequest . getContextPath ( ) ) ; } else { if ( this . java.lang.String . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String . java.lang.String ( NUMBER , this . java.lang.String . int ( ) - NUMBER ) ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String ) ; } } } if ( this . org.springframework.web.servlet.tags.UrlTag.UrlType != org.springframework.web.servlet.tags.UrlTag.UrlType . org.springframework.web.servlet.tags.UrlTag.UrlType && this . org.springframework.web.servlet.tags.UrlTag.UrlType != org.springframework.web.servlet.tags.UrlTag.UrlType . org.springframework.web.servlet.tags.UrlTag.UrlType && ! this . java.lang.String . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( this . java.lang.String , this . java.util.List<org.springframework.web.servlet.tags.Param> , this . java.util.Set<java.lang.String> ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( this . java.util.List<org.springframework.web.servlet.tags.Param> , this . java.util.Set<java.lang.String> , ( java.lang.StringBuilder . int ( STRING ) == - NUMBER ) ) ) ; java.lang.String java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; if ( this . org.springframework.web.servlet.tags.UrlTag.UrlType != org.springframework.web.servlet.tags.UrlTag.UrlType . org.springframework.web.servlet.tags.UrlTag.UrlType ) { java.lang.String = org.springframework.web.servlet.tags.HttpServletResponse . encodeURL ( java.lang.String ) ; } java.lang.String = htmlEscape ( java.lang.String ) ; java.lang.String = this . boolean ? JavaScriptUtils . javaScriptEscape ( java.lang.String ) : java.lang.String ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.List<org.springframework.web.servlet.tags.Param> < Param > java.util.List<org.springframework.web.servlet.tags.Param> , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , boolean boolean )			throws org.springframework.web.servlet.tags.JspException { java.lang.String java.lang.String = pageContext . getResponse ( ) . getCharacterEncoding ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( Param org.springframework.web.servlet.tags.Param : java.util.List<org.springframework.web.servlet.tags.Param> ) { if ( ! java.util.Set<java.lang.String> . boolean ( org.springframework.web.servlet.tags.Param . getName ( ) ) && StringUtils . hasLength ( org.springframework.web.servlet.tags.Param . getName ( ) ) ) { if ( boolean && java.lang.StringBuilder . int ( ) == NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } try { java.lang.StringBuilder . java.lang.StringBuilder ( UriUtils . encodeQueryParam ( org.springframework.web.servlet.tags.Param . getName ( ) , java.lang.String ) ) ; if ( org.springframework.web.servlet.tags.Param . getValue ( ) != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( UriUtils . encodeQueryParam ( org.springframework.web.servlet.tags.Param . getValue ( ) , java.lang.String ) ) ; } } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new JspException ( java.io.UnsupportedEncodingException ) ; } } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.List<org.springframework.web.servlet.tags.Param> < Param > java.util.List<org.springframework.web.servlet.tags.Param> , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> )			throws org.springframework.web.servlet.tags.JspException { java.lang.String java.lang.String = pageContext . getResponse ( ) . getCharacterEncoding ( ) ; for ( Param org.springframework.web.servlet.tags.Param : java.util.List<org.springframework.web.servlet.tags.Param> ) { java.lang.String java.lang.String = java.lang.String + org.springframework.web.servlet.tags.Param . getName ( ) + java.lang.String ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.web.servlet.tags.Param . getName ( ) ) ; try { java.lang.String = java.lang.String . java.lang.String ( java.lang.String , UriUtils . encodePath ( org.springframework.web.servlet.tags.Param . getValue ( ) , java.lang.String ) ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new JspException ( java.io.UnsupportedEncodingException ) ; } } else { java.lang.String = java.lang.String + '/' + org.springframework.web.servlet.tags.Param . getName ( ) + java.lang.String ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.web.servlet.tags.Param . getName ( ) ) ; try { java.lang.String = java.lang.String . java.lang.String ( java.lang.String , UriUtils . encodePathSegment ( org.springframework.web.servlet.tags.Param . getValue ( ) , java.lang.String ) ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new JspException ( java.io.UnsupportedEncodingException ) ; } } } } return java.lang.String ; }  <METHOD_END>
