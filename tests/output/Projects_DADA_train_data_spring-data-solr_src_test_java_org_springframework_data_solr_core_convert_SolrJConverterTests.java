<METHOD_START> @ Before public void void ( ) { org.springframework.data.solr.core.convert.SolrJConverter = new SolrJConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean = new org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean ( STRING , NUMBER ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.SolrJConverter . write ( org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean . java.lang.String ( ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean . java.lang.Integer ( ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . add ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . add ( STRING , NUMBER ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.SolrJConverter . write ( org.springframework.data.solr.core.convert.PartialUpdate , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getValue ( ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getName ( ) ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) instanceof java.util.Map ) ; Assert . assertEquals ( NUMBER , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , NUMBER ) ; org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean = org.springframework.data.solr.core.convert.SolrJConverter . read ( org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean .class , ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean . java.lang.String ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.SolrJConverterTests.ConvertableBean . java.lang.Integer ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) { super(); this . java.lang.String = java.lang.String ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
