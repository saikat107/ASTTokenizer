<METHOD_START> public void ( CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> , CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver , KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator , CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ) { super( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> , org.springframework.cache.jcache.interceptor.CacheResolver , org.springframework.cache.jcache.interceptor.KeyGenerator ); CacheResult org.springframework.cache.jcache.interceptor.CacheResult = org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> . getCacheAnnotation ( ) ; this . org.springframework.cache.jcache.interceptor.ExceptionTypeFilter = createExceptionTypeFilter ( org.springframework.cache.jcache.interceptor.CacheResult . cachedExceptions ( ) , org.springframework.cache.jcache.interceptor.CacheResult . nonCachedExceptions ( ) ) ; this . org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ; this . java.lang.String = ( StringUtils . hasText ( org.springframework.cache.jcache.interceptor.CacheResult . exceptionCacheName ( ) ) ? org.springframework.cache.jcache.interceptor.CacheResult . exceptionCacheName ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.jcache.interceptor.ExceptionTypeFilter org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ( ) { return this . org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return getCacheAnnotation ( ) . skipGet ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( ) { return this . org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
