<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( final org.w3c.dom.Element org.w3c.dom.Element , final AbstractBeanDefinition org.springframework.data.couchbase.config.AbstractBeanDefinition , final ParserContext org.springframework.data.couchbase.config.ParserContext ) { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.data.couchbase.config.AbstractBeanDefinition , org.springframework.data.couchbase.config.ParserContext ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : BeanNames . COUCHBASE_TEMPLATE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class java.lang.Class ( final org.w3c.dom.Element org.w3c.dom.Element ) { return CouchbaseTemplate .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final org.w3c.dom.Element org.w3c.dom.Element , final BeanDefinitionBuilder org.springframework.data.couchbase.config.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.data.couchbase.config.BeanDefinitionBuilder . addConstructorArgReference ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : BeanNames . COUCHBASE_CLUSTER_INFO ) ; org.springframework.data.couchbase.config.BeanDefinitionBuilder . addConstructorArgReference ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : BeanNames . COUCHBASE_BUCKET ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.couchbase.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.couchbase.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( java.lang.String != null ) { try { Consistency org.springframework.data.couchbase.config.Consistency = Consistency . valueOf ( java.lang.String ) ; org.springframework.data.couchbase.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.couchbase.config.Consistency ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { org.springframework.data.couchbase.config.Logger . warn ( STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
