<METHOD_START> @ Before public void void ( ) java.lang.Exception { super. setup ( ) ; this . org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . setOrigin ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.result.method.annotation.GlobalCorsConfigIntegrationTests.WebConfig .class ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.RestTemplate org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) { return new RestTemplate ( new HttpComponentsClientHttpRequestFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; fail ( ) ; } catch ( HttpClientErrorException org.springframework.web.reactive.result.method.annotation.HttpClientErrorException ) { assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.reactive.result.method.annotation.HttpClientErrorException . getStatusCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performGet ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = performOptions ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; performOptions ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; fail ( ) ; } catch ( HttpClientErrorException org.springframework.web.reactive.result.method.annotation.HttpClientErrorException ) { assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.reactive.result.method.annotation.HttpClientErrorException . getStatusCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; performOptions ( STRING , this . org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.String .class ) ; fail ( ) ; } catch ( HttpClientErrorException org.springframework.web.reactive.result.method.annotation.HttpClientErrorException ) { assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.reactive.result.method.annotation.HttpClientErrorException . getStatusCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CorsRegistry org.springframework.web.reactive.result.method.annotation.CorsRegistry ) { org.springframework.web.reactive.result.method.annotation.CorsRegistry . addMapping ( STRING ) . allowedOrigins ( STRING ) ; org.springframework.web.reactive.result.method.annotation.CorsRegistry . addMapping ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
