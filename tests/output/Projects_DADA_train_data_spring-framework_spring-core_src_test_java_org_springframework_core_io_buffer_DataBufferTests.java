<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( new byte [] { 'a' , 'b' , 'c' } ) ; int int = org.springframework.core.io.buffer.DataBuffer . read ( ) ; assertEquals ( 'a' , int ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'd' ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'e' ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'b' , 'c' , 'd' , 'e' } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = new byte [] { 'a' , 'b' , 'c' , 'd' , 'e' } ; DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( byte[] ) ; org.springframework.core.io.buffer.DataBuffer . read ( ) ; java.io.InputStream java.io.InputStream = org.springframework.core.io.buffer.DataBuffer . asInputStream ( ) ; int int = java.io.InputStream . int ( ) ; assertEquals ( NUMBER , int ) ; int int = java.io.InputStream . int ( ) ; assertEquals ( 'b' , int ) ; int = java.io.InputStream . int ( ) ; assertEquals ( NUMBER , int ) ; byte [] byte[] = new byte [ NUMBER ] ; int int = java.io.InputStream . int ( byte[] ) ; assertEquals ( NUMBER , int ) ; assertArrayEquals ( new byte [] { 'c' , 'd' } , byte[] ) ; java.util.Arrays . void ( byte[] , ( byte ) NUMBER ) ; int = java.io.InputStream . int ( byte[] ) ; assertEquals ( NUMBER , int ) ; assertArrayEquals ( new byte [] { 'e' , ( byte ) NUMBER } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'a' ) ; java.io.OutputStream java.io.OutputStream = org.springframework.core.io.buffer.DataBuffer . asOutputStream ( ) ; java.io.OutputStream . void ( new byte [] { 'b' , 'c' , 'd' } ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'e' ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'a' , 'b' , 'c' , 'd' , 'e' } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'a' ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'b' ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'a' , 'b' } , byte[] ) ; org.springframework.core.io.buffer.DataBuffer . write ( new byte [] { 'c' , 'd' } ) ; byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'c' , 'd' } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'a' ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer ( NUMBER ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) 'b' ) ; java.nio.ByteBuffer . java.nio.Buffer ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer ( NUMBER ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) 'c' ) ; java.nio.ByteBuffer . java.nio.Buffer ( ) ; org.springframework.core.io.buffer.DataBuffer . write ( java.nio.ByteBuffer , java.nio.ByteBuffer ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'd' ) ; assertEquals ( NUMBER , org.springframework.core.io.buffer.DataBuffer . readableByteCount ( ) ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'a' , 'b' , 'c' , 'd' } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> private java.nio.ByteBuffer java.nio.ByteBuffer ( int int ) { return java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'a' ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'b' ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'c' ) ; org.springframework.core.io.buffer.DataBuffer . write ( org.springframework.core.io.buffer.DataBuffer , org.springframework.core.io.buffer.DataBuffer ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'd' ) ; assertEquals ( NUMBER , org.springframework.core.io.buffer.DataBuffer . readableByteCount ( ) ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'a' , 'b' , 'c' , 'd' } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( new byte [] { 'a' , 'b' , 'c' } ) ; org.springframework.core.io.buffer.DataBuffer . read ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = org.springframework.core.io.buffer.DataBuffer . asByteBuffer ( ) ; org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'd' ) ; assertEquals ( NUMBER , java.nio.ByteBuffer . int ( ) ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'b' , 'c' } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( new byte [] { 'a' , 'b' , 'c' } ) ; int int = org.springframework.core.io.buffer.DataBuffer . indexOf ( b -> b == 'c' , NUMBER ) ; assertEquals ( NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . indexOf ( b -> b == 'c' , java.lang.Integer . int ) ; assertEquals ( NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . indexOf ( b -> b == 'c' , java.lang.Integer . int ) ; assertEquals ( - NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . indexOf ( b -> b == 'z' , NUMBER ) ; assertEquals ( - NUMBER , int ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( new byte [] { 'a' , 'b' , 'c' } ) ; int int = org.springframework.core.io.buffer.DataBuffer . lastIndexOf ( b -> b == 'b' , NUMBER ) ; assertEquals ( NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . lastIndexOf ( b -> b == 'c' , NUMBER ) ; assertEquals ( NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . lastIndexOf ( b -> b == 'b' , java.lang.Integer . int ) ; assertEquals ( NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . lastIndexOf ( b -> b == 'c' , java.lang.Integer . int ) ; assertEquals ( NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . lastIndexOf ( b -> b == 'b' , java.lang.Integer . int ) ; assertEquals ( - NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . lastIndexOf ( b -> b == 'c' , java.lang.Integer . int ) ; assertEquals ( - NUMBER , int ) ; int = org.springframework.core.io.buffer.DataBuffer . lastIndexOf ( b -> b == 'z' , NUMBER ) ; assertEquals ( - NUMBER , int ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = createDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.DataBuffer . write ( new byte [] { 'a' , 'b' } ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = org.springframework.core.io.buffer.DataBuffer . slice ( NUMBER , NUMBER ) ; assertEquals ( NUMBER , org.springframework.core.io.buffer.DataBuffer . readableByteCount ( ) ) ; try { org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} org.springframework.core.io.buffer.DataBuffer . write ( ( byte ) 'c' ) ; assertEquals ( NUMBER , org.springframework.core.io.buffer.DataBuffer . readableByteCount ( ) ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'a' , 'b' , 'c' } , byte[] ) ; assertEquals ( NUMBER , org.springframework.core.io.buffer.DataBuffer . readableByteCount ( ) ) ; byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( new byte [] { 'b' , 'c' } , byte[] ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , byte[] ) ; org.springframework.core.io.buffer.DataBuffer . write ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; byte[] = new byte [ NUMBER ] ; org.springframework.core.io.buffer.DataBuffer . read ( byte[] ) ; assertArrayEquals ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , byte[] ) ; }  <METHOD_END>
