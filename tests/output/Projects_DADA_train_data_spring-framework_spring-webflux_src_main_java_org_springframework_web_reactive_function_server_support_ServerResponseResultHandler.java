<METHOD_START> public void ( ) { this( HandlerStrategies . builder ( ) . build ( ) ); }  <METHOD_END>
<METHOD_START> public void ( HandlerStrategies org.springframework.web.reactive.function.server.support.HandlerStrategies ) { Assert . notNull ( org.springframework.web.reactive.function.server.support.HandlerStrategies , STRING ) ; this . org.springframework.web.reactive.function.server.support.HandlerStrategies = org.springframework.web.reactive.function.server.support.HandlerStrategies ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HandlerResult org.springframework.web.reactive.function.server.support.HandlerResult ) { return org.springframework.web.reactive.function.server.support.HandlerResult . getReturnValue ( ) . filter ( o -> o instanceof ServerResponse ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.server.support.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.function.server.support.ServerWebExchange , HandlerResult org.springframework.web.reactive.function.server.support.HandlerResult ) { ServerResponse org.springframework.web.reactive.function.server.support.ServerResponse = ( ServerResponse ) org.springframework.web.reactive.function.server.support.HandlerResult . getReturnValue ( ) . orElseThrow ( java.lang.IllegalStateException ::new ) ; return org.springframework.web.reactive.function.server.support.ServerResponse . writeTo ( org.springframework.web.reactive.function.server.support.ServerWebExchange , this . org.springframework.web.reactive.function.server.support.HandlerStrategies ) ; }  <METHOD_END>
