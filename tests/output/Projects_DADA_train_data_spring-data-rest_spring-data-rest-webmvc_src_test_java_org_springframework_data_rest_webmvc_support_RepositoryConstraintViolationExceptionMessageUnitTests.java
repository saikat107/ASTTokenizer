<METHOD_START> @ Before public void void ( ) { StaticMessageSource org.springframework.data.rest.webmvc.support.StaticMessageSource = new StaticMessageSource ( ) ; org.springframework.data.rest.webmvc.support.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; this . org.springframework.data.rest.webmvc.support.MessageSourceAccessor = new MessageSourceAccessor ( org.springframework.data.rest.webmvc.support.StaticMessageSource , java.util.Locale . java.util.Locale ) ; this . org.springframework.data.rest.webmvc.support.RepositoryConstraintViolationException = new RepositoryConstraintViolationException ( new MapBindingResult ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new RepositoryConstraintViolationExceptionMessage ( null , org.springframework.data.rest.webmvc.support.MessageSourceAccessor ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new RepositoryConstraintViolationExceptionMessage ( org.springframework.data.rest.webmvc.support.RepositoryConstraintViolationException , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , NUMBER ) ; void ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; Errors org.springframework.data.rest.webmvc.support.Errors = new MapBindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; org.springframework.data.rest.webmvc.support.Errors . rejectValue ( java.lang.String , STRING ) ; RepositoryConstraintViolationExceptionMessage org.springframework.data.rest.webmvc.support.RepositoryConstraintViolationExceptionMessage = new RepositoryConstraintViolationExceptionMessage ( new RepositoryConstraintViolationException ( org.springframework.data.rest.webmvc.support.Errors ) , org.springframework.data.rest.webmvc.support.MessageSourceAccessor ) ; java.util.List<org.springframework.data.rest.webmvc.support.ValidationError> < ValidationError > java.util.List<org.springframework.data.rest.webmvc.support.ValidationError> = org.springframework.data.rest.webmvc.support.RepositoryConstraintViolationExceptionMessage . getErrors ( ) ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.support.ValidationError> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.support.ValidationError> . get ( NUMBER ) . getInvalidValue ( ) ) . isEqualTo ( java.lang.Object ) ; }  <METHOD_END>
