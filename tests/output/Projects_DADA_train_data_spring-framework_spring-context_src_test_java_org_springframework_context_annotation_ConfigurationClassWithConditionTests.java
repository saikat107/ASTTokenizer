<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.BeanOneConfiguration .class , org.springframework.context.annotation.ConfigurationClassWithConditionTests.BeanTwoConfiguration .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.BeanTwoConfiguration .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.BeanOneConfiguration .class , org.springframework.context.annotation.ConfigurationClassWithConditionTests.BeanThreeConfiguration .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.BeanThreeConfiguration .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ConfigurationWithMetaCondition .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ConfigurationWithMetaCondition .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.NonConfigurationClass .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.NonConfigurationClass .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ConditionOnMethodConfiguration .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ConditionOnMethodConfiguration .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ImportsNotCreated .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ConfigWithBeanSkipped .class ) ; assertEquals ( NUMBER , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean .class ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ConfigWithBeanReactivated .class ) ; java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> < java.lang.String , org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean > java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> . java.util.Set<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ConfigWithAlternativeBeans .class ) ; java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> < java.lang.String , org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean > java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean> . java.util.Set<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.context.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { return ! org.springframework.context.annotation.ConditionContext . getBeanFactory ( ) . containsBeanDefinition ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ConfigurationPhase org.springframework.context.annotation.ConfigurationPhase ( ) { return ConfigurationPhase . REGISTER_BEAN ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.context.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { return org.springframework.context.annotation.ConditionContext . getBeanFactory ( ) . containsBeanDefinition ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.context.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.context.annotation.AnnotatedTypeMetadata . getAnnotationAttributes ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.MetaConditional .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) , equalTo ( STRING ) ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.context.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.context.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { return true ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.ConfigurationClassWithConditionTests.Never public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { return new java.lang.String [] {} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean @ Conditional ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.NeverCondition .class ) public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) @ Conditional ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.AlwaysCondition .class ) public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) @ Conditional ( org.springframework.context.annotation.ConfigurationClassWithConditionTests.NeverCondition .class ) public org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) { return new org.springframework.context.annotation.ConfigurationClassWithConditionTests.ExampleBean ( ) ; }  <METHOD_END>
