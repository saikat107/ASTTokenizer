<METHOD_START> @ Test ( expected = FatalBeanException .class ) public void void ( ) { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.channel.config.ChannelParserTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { boolean boolean = org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ; assertTrue ( boolean ) ; } assertFalse ( org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertThat ( org.springframework.integration.channel.config.MessageChannel , instanceOf ( DirectChannel .class ) ) ; DirectFieldAccessor org.springframework.integration.channel.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.channel.config.MessageChannel ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( UnicastingDispatcher .class ) ) ) ; assertThat ( new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) , is ( instanceOf ( RoundRobinLoadBalancingStrategy .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { MessageChannel org.springframework.integration.channel.config.MessageChannel = org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; assertThat ( org.springframework.integration.channel.config.MessageChannel , instanceOf ( ExecutorChannel .class ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.channel.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.channel.config.ChannelParserTests> ( ) ) ; MessageChannel org.springframework.integration.channel.config.MessageChannel = org.springframework.integration.channel.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; assertThat ( org.springframework.integration.channel.config.MessageChannel , instanceOf ( ExecutorChannel .class ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) ) ; org.springframework.integration.channel.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( DirectChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; DirectFieldAccessor org.springframework.integration.channel.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.channel.config.MessageChannel ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( UnicastingDispatcher .class ) ) ) ; assertNull ( new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( PublishSubscribeChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( PublishSubscribeChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; DirectFieldAccessor org.springframework.integration.channel.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.channel.config.MessageChannel ) ; org.springframework.integration.channel.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.channel.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( ErrorHandlingTaskExecutor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; DirectFieldAccessor org.springframework.integration.channel.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.util.concurrent.Executor java.util.concurrent.Executor = ( java.util.concurrent.Executor ) org.springframework.integration.channel.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.Object , java.util.concurrent.Executor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( QueueChannel .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; assertSame ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) instanceof org.springframework.integration.channel.config.ChannelParserTests.UselessMessageConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.channel.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.channel.config.ChannelParserTests> ( ) ) ; MessageChannel org.springframework.integration.channel.config.MessageChannel = org.springframework.integration.channel.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.channel.config.ClassPathXmlApplicationContext . close ( ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) instanceof org.springframework.integration.channel.config.ChannelParserTests.UselessMessageConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage <> ( NUMBER ) ) ) ; assertTrue ( org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage <> ( NUMBER ) ) ) ; assertTrue ( org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage <> ( java.lang.Boolean . java.lang.Boolean ) ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) , instanceOf ( DefaultDatatypeChannelMessageConverter .class ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage <> ( NUMBER ) ) ) ; assertTrue ( org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = ( MessageChannel ) org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.channel.config.MessageChannel . send ( new GenericMessage <> ( java.lang.Boolean . java.lang.Boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.channel.config.ChannelParserTests> ( ) ) ; PollableChannel org.springframework.integration.channel.config.PollableChannel = ( PollableChannel ) org.springframework.integration.channel.config.ConfigurableApplicationContext . getBean ( STRING ) ; TestChannelInterceptor org.springframework.integration.channel.config.TestChannelInterceptor = ( TestChannelInterceptor ) org.springframework.integration.channel.config.ConfigurableApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.channel.config.TestChannelInterceptor . getSendCount ( ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.config.TestChannelInterceptor . getSendCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.config.TestChannelInterceptor . getReceiveCount ( ) ) ; org.springframework.integration.channel.config.PollableChannel . receive ( ) ; assertEquals ( NUMBER , org.springframework.integration.channel.config.TestChannelInterceptor . getReceiveCount ( ) ) ; org.springframework.integration.channel.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.channel.config.ChannelParserTests> ( ) ) ; PollableChannel org.springframework.integration.channel.config.PollableChannel = ( PollableChannel ) org.springframework.integration.channel.config.ConfigurableApplicationContext . getBean ( STRING ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; org.springframework.integration.channel.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.channel.config.PollableChannel = this . org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < java.lang.String > org.springframework.integration.channel.config.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setPriority ( - NUMBER ) . build ( ) ; Message < java.lang.String > org.springframework.integration.channel.config.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setPriority ( NUMBER ) . build ( ) ; Message < java.lang.String > org.springframework.integration.channel.config.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setPriority ( NUMBER ) . build ( ) ; org.springframework.integration.channel.config.PollableChannel . send ( org.springframework.integration.channel.config.Message<java.lang.String> ) ; org.springframework.integration.channel.config.PollableChannel . send ( org.springframework.integration.channel.config.Message<java.lang.String> ) ; org.springframework.integration.channel.config.PollableChannel . send ( org.springframework.integration.channel.config.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.channel.config.PollableChannel = this . org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.channel.config.Message<?> = org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.channel.config.PollableChannel = this . org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( NUMBER ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( NUMBER ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; boolean boolean = false ; try { org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; } catch ( MessageDeliveryException org.springframework.integration.channel.config.MessageDeliveryException ) { assertEquals ( STRING , org.springframework.integration.channel.config.MessageDeliveryException . getFailedMessage ( ) . getPayload ( ) ) ; boolean = true ; } assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.config.Message<?> < ? > org.springframework.integration.channel.config.Message<?> ( Message < ? > org.springframework.integration.channel.config.Message<?> , MessageChannel org.springframework.integration.channel.config.MessageChannel ) { return MessageBuilder . withPayload ( org.springframework.integration.channel.config.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Number java.lang.Number ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.channel.config.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.config.Message<?> < ? > org.springframework.integration.channel.config.Message<?> ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.integration.channel.config.MessageHeaders ) { return null ; }  <METHOD_END>
