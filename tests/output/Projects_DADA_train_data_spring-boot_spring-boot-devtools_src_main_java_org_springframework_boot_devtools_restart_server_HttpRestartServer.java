<METHOD_START> public void ( SourceFolderUrlFilter org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter ) { Assert . notNull ( org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter , STRING ) ; this . org.springframework.boot.devtools.restart.server.RestartServer = new RestartServer ( org.springframework.boot.devtools.restart.server.SourceFolderUrlFilter ) ; }  <METHOD_END>
<METHOD_START> public void ( RestartServer org.springframework.boot.devtools.restart.server.RestartServer ) { Assert . notNull ( org.springframework.boot.devtools.restart.server.RestartServer , STRING ) ; this . org.springframework.boot.devtools.restart.server.RestartServer = org.springframework.boot.devtools.restart.server.RestartServer ; }  <METHOD_END>
<METHOD_START> public void void ( ServerHttpRequest org.springframework.boot.devtools.restart.server.ServerHttpRequest , ServerHttpResponse org.springframework.boot.devtools.restart.server.ServerHttpResponse )			throws java.io.IOException { try { Assert . state ( org.springframework.boot.devtools.restart.server.ServerHttpRequest . getHeaders ( ) . getContentLength ( ) > NUMBER , STRING ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( org.springframework.boot.devtools.restart.server.ServerHttpRequest . getBody ( ) ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.server.ClassLoaderFiles = ( ClassLoaderFiles ) java.io.ObjectInputStream . java.lang.Object ( ) ; java.io.ObjectInputStream . void ( ) ; this . org.springframework.boot.devtools.restart.server.RestartServer . updateAndRestart ( org.springframework.boot.devtools.restart.server.ClassLoaderFiles ) ; org.springframework.boot.devtools.restart.server.ServerHttpResponse . setStatusCode ( HttpStatus . OK ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.devtools.restart.server.Log . warn ( STRING , java.lang.Exception ) ; org.springframework.boot.devtools.restart.server.ServerHttpResponse . setStatusCode ( HttpStatus . INTERNAL_SERVER_ERROR ) ; } }  <METHOD_END>
