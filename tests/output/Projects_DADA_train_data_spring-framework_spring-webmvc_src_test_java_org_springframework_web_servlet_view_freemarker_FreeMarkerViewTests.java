<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerView org.springframework.web.servlet.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; WebApplicationContext org.springframework.web.servlet.view.freemarker.WebApplicationContext = mock ( WebApplicationContext .class ) ; given ( org.springframework.web.servlet.view.freemarker.WebApplicationContext . getBeansOfType ( FreeMarkerConfig .class , true , false ) ) . willReturn ( new java.util.HashMap <> ( ) ) ; given ( org.springframework.web.servlet.view.freemarker.WebApplicationContext . getServletContext ( ) ) . willReturn ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setUrl ( STRING ) ; org.springframework.web.servlet.view.freemarker.ExpectedException . expect ( ApplicationContextException .class ) ; org.springframework.web.servlet.view.freemarker.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setApplicationContext ( org.springframework.web.servlet.view.freemarker.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerView org.springframework.web.servlet.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; org.springframework.web.servlet.view.freemarker.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.web.servlet.view.freemarker.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerView org.springframework.web.servlet.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; WebApplicationContext org.springframework.web.servlet.view.freemarker.WebApplicationContext = mock ( WebApplicationContext .class ) ; MockServletContext org.springframework.web.servlet.view.freemarker.MockServletContext = new MockServletContext ( ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> < java.lang.String , FreeMarkerConfig > java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> = new java.util.HashMap<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> <> ( ) ; FreeMarkerConfigurer org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer . setConfiguration ( new org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests.TestConfiguration ( ) ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> . put ( STRING , org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer ) ; given ( org.springframework.web.servlet.view.freemarker.WebApplicationContext . getBeansOfType ( FreeMarkerConfig .class , true , false ) ) . willReturn ( java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> ) ; given ( org.springframework.web.servlet.view.freemarker.WebApplicationContext . getServletContext ( ) ) . willReturn ( org.springframework.web.servlet.view.freemarker.MockServletContext ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setUrl ( STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setApplicationContext ( org.springframework.web.servlet.view.freemarker.WebApplicationContext ) ; MockHttpServletRequest org.springframework.web.servlet.view.freemarker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.freemarker.WebApplicationContext ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse = new MockHttpServletResponse ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.MockHttpServletRequest , org.springframework.web.servlet.view.freemarker.HttpServletResponse ) ; assertEquals ( AbstractView . DEFAULT_CONTENT_TYPE , org.springframework.web.servlet.view.freemarker.HttpServletResponse . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerView org.springframework.web.servlet.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; WebApplicationContext org.springframework.web.servlet.view.freemarker.WebApplicationContext = mock ( WebApplicationContext .class ) ; MockServletContext org.springframework.web.servlet.view.freemarker.MockServletContext = new MockServletContext ( ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> < java.lang.String , FreeMarkerConfig > java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> = new java.util.HashMap<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> <> ( ) ; FreeMarkerConfigurer org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer . setConfiguration ( new org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests.TestConfiguration ( ) ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> . put ( STRING , org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer ) ; given ( org.springframework.web.servlet.view.freemarker.WebApplicationContext . getBeansOfType ( FreeMarkerConfig .class , true , false ) ) . willReturn ( java.util.Map<java.lang.String,org.springframework.web.servlet.view.freemarker.FreeMarkerConfig> ) ; given ( org.springframework.web.servlet.view.freemarker.WebApplicationContext . getServletContext ( ) ) . willReturn ( org.springframework.web.servlet.view.freemarker.MockServletContext ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setUrl ( STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setApplicationContext ( org.springframework.web.servlet.view.freemarker.WebApplicationContext ) ; MockHttpServletRequest org.springframework.web.servlet.view.freemarker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.freemarker.WebApplicationContext ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.freemarker.HttpServletResponse . setContentType ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.MockHttpServletRequest , org.springframework.web.servlet.view.freemarker.HttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.freemarker.HttpServletResponse . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerConfigurer org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer . setConfiguration ( new org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests.TestConfiguration ( ) ) ; StaticWebApplicationContext org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer ) ; org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext . refresh ( ) ; FreeMarkerViewResolver org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver = new FreeMarkerViewResolver ( STRING , STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver . setApplicationContext ( org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.freemarker.View = org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , FreeMarkerView .class , org.springframework.web.servlet.view.freemarker.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( FreeMarkerView ) org.springframework.web.servlet.view.freemarker.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.freemarker.View = org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertNull ( org.springframework.web.servlet.view.freemarker.View ) ; org.springframework.web.servlet.view.freemarker.View = org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , RedirectView .class , org.springframework.web.servlet.view.freemarker.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( RedirectView ) org.springframework.web.servlet.view.freemarker.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.freemarker.View = org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , InternalResourceView .class , org.springframework.web.servlet.view.freemarker.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.freemarker.View ) . getUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( Configuration . DEFAULT_INCOMPATIBLE_IMPROVEMENTS ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.freemarker.Template org.springframework.web.servlet.view.freemarker.Template ( java.lang.String java.lang.String , final java.util.Locale java.util.Locale ) throws java.io.IOException { if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { return new Template ( java.lang.String , new java.io.StringReader ( STRING ) , this ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.io.Writer java.io.Writer ) throws org.springframework.web.servlet.view.freemarker.TemplateException , java.io.IOException { assertEquals ( java.util.Locale . java.util.Locale , java.util.Locale ) ; assertTrue ( java.lang.Object instanceof AllHttpScopesHashModel ) ; AllHttpScopesHashModel org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel = ( AllHttpScopesHashModel ) java.lang.Object ; assertEquals ( STRING , org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . get ( STRING ) . toString ( ) ) ; } } ; } else { throw new java.io.FileNotFoundException ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.io.Writer java.io.Writer ) throws org.springframework.web.servlet.view.freemarker.TemplateException , java.io.IOException { assertEquals ( java.util.Locale . java.util.Locale , java.util.Locale ) ; assertTrue ( java.lang.Object instanceof AllHttpScopesHashModel ) ; AllHttpScopesHashModel org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel = ( AllHttpScopesHashModel ) java.lang.Object ; assertEquals ( STRING , org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . get ( STRING ) . toString ( ) ) ; }  <METHOD_END>
