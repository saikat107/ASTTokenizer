<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.security.AuthenticationAuditListener . setApplicationEventPublisher ( this . org.springframework.boot.actuate.security.ApplicationEventPublisher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent = org.springframework.boot.actuate.security.AuditApplicationEvent ( new AuthenticationSuccessEvent ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) ) ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getType ( ) ) . isEqualTo ( AuthenticationAuditListener . AUTHENTICATION_SUCCESS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.security.AuthenticationAuditListener . onApplicationEvent ( new InteractiveAuthenticationSuccessEvent ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) , java.lang.Class<? extends org.springframework.boot.actuate.security.AuthenticationAuditListenerTests> ( ) ) ) ; verify ( this . org.springframework.boot.actuate.security.ApplicationEventPublisher , never ( ) ) . publishEvent ( ( ApplicationEvent ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent = org.springframework.boot.actuate.security.AuditApplicationEvent ( new AuthenticationFailureExpiredEvent ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) , new BadCredentialsException ( STRING ) ) ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getType ( ) ) . isEqualTo ( AuthenticationAuditListener . AUTHENTICATION_FAILURE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent = org.springframework.boot.actuate.security.AuditApplicationEvent ( new AuthenticationSwitchUserEvent ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) , new User ( STRING , STRING , AuthorityUtils . commaSeparatedStringToAuthorityList ( STRING ) ) ) ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getType ( ) ) . isEqualTo ( AuthenticationAuditListener . AUTHENTICATION_SWITCH ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; UsernamePasswordAuthenticationToken org.springframework.boot.actuate.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( STRING , STRING ) ; org.springframework.boot.actuate.security.UsernamePasswordAuthenticationToken . setDetails ( java.lang.Object ) ; AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent = org.springframework.boot.actuate.security.AuditApplicationEvent ( new AuthenticationFailureExpiredEvent ( org.springframework.boot.actuate.security.UsernamePasswordAuthenticationToken , new BadCredentialsException ( STRING ) ) ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getType ( ) ) . isEqualTo ( AuthenticationAuditListener . AUTHENTICATION_FAILURE ) ; assertThat ( org.springframework.boot.actuate.security.AuditApplicationEvent . getAuditEvent ( ) . getData ( ) ) . containsEntry ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.security.AuditApplicationEvent org.springframework.boot.actuate.security.AuditApplicationEvent ( AbstractAuthenticationEvent org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) { ArgumentCaptor < AuditApplicationEvent > org.springframework.boot.actuate.security.ArgumentCaptor<org.springframework.boot.actuate.security.AuditApplicationEvent> = ArgumentCaptor . forClass ( AuditApplicationEvent .class ) ; this . org.springframework.boot.actuate.security.AuthenticationAuditListener . onApplicationEvent ( org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) ; verify ( this . org.springframework.boot.actuate.security.ApplicationEventPublisher ) . publishEvent ( org.springframework.boot.actuate.security.ArgumentCaptor<org.springframework.boot.actuate.security.AuditApplicationEvent> . capture ( ) ) ; return org.springframework.boot.actuate.security.ArgumentCaptor<org.springframework.boot.actuate.security.AuditApplicationEvent> . getValue ( ) ; }  <METHOD_END>
