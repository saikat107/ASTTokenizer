<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc = standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.resultmatchers.XpathAssertionTests.MusicController ( ) ) . defaultRequest ( get ( STRING ) . accept ( MediaType . APPLICATION_XML , MediaType . parseMediaType ( STRING ) ) ) . alwaysExpect ( status ( ) . isOk ( ) ) . alwaysExpect ( content ( ) . contentType ( MediaType . parseMediaType ( STRING ) ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . exists ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . exists ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . exists ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . exists ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . exists ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . exists ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . node ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . doesNotExist ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . doesNotExist ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . doesNotExist ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . doesNotExist ( ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . node ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( equalTo ( STRING ) ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( startsWith ( STRING ) ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . string ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . number ( NUMBER ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . number ( NUMBER ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . number ( NUMBER ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . number ( java.lang.Double . double ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . number ( equalTo ( NUMBER ) ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . number ( closeTo ( NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . booleanValue ( false ) ) . andExpect ( xpath ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , NUMBER ) . booleanValue ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( xpath ( STRING , java.util.Map<java.lang.String,java.lang.String> ) . nodeCount ( NUMBER ) ) . andExpect ( xpath ( STRING , java.util.Map<java.lang.String,java.lang.String> ) . nodeCount ( NUMBER ) ) . andExpect ( xpath ( STRING , java.util.Map<java.lang.String,java.lang.String> ) . nodeCount ( equalTo ( NUMBER ) ) ) . andExpect ( xpath ( STRING , java.util.Map<java.lang.String,java.lang.String> ) . nodeCount ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.resultmatchers.XpathAssertionTests.BlogFeedController ( ) ) . build ( ) . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_ATOM_XML ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( MediaType . APPLICATION_ATOM_XML ) ) . andExpect ( xpath ( STRING ) . string ( STRING ) ) . andExpect ( xpath ( STRING ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) public @ ResponseBody org.springframework.test.web.servlet.samples.standalone.resultmatchers.XpathAssertionTests.PeopleWrapper org.springframework.test.web.servlet.samples.standalone.resultmatchers.XpathAssertionTests.PeopleWrapper ( ) { java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < Person > java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> = java.util.Arrays . java.util.List ( new Person ( STRING ) . setSomeDouble ( NUMBER ) , new Person ( STRING ) . setSomeDouble ( NUMBER ) , new Person ( STRING ) . setSomeDouble ( NUMBER ) , new Person ( STRING ) . setSomeDouble ( java.lang.Double . double ) ) ; java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < Person > java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> = java.util.Arrays . java.util.List ( new Person ( STRING ) . setSomeBoolean ( false ) , new Person ( STRING ) . setSomeBoolean ( true ) ) ; return new org.springframework.test.web.servlet.samples.standalone.resultmatchers.XpathAssertionTests.PeopleWrapper ( java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> , java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < Person > java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> , java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < Person > java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ) { this . java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> = java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ; this . java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> = java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < Person > java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ( ) { return this . java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < Person > java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ( ) { return this . java.util.List<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = { GET , HEAD } ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING + STRING + STRING + STRING + STRING ; }  <METHOD_END>
