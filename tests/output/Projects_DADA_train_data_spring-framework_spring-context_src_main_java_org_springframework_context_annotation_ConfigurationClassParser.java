<METHOD_START> @ java.lang.Override public int int ( org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder , org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder ) { return AnnotationAwareOrderComparator . INSTANCE . compare ( org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder . org.springframework.context.annotation.DeferredImportSelector ( ) , org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder . org.springframework.context.annotation.DeferredImportSelector ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( MetadataReaderFactory org.springframework.context.annotation.MetadataReaderFactory , ProblemReporter org.springframework.context.annotation.ProblemReporter , Environment org.springframework.context.annotation.Environment , ResourceLoader org.springframework.context.annotation.ResourceLoader , BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { this . org.springframework.context.annotation.MetadataReaderFactory = org.springframework.context.annotation.MetadataReaderFactory ; this . org.springframework.context.annotation.ProblemReporter = org.springframework.context.annotation.ProblemReporter ; this . org.springframework.context.annotation.Environment = org.springframework.context.annotation.Environment ; this . org.springframework.context.annotation.ResourceLoader = org.springframework.context.annotation.ResourceLoader ; this . org.springframework.context.annotation.BeanDefinitionRegistry = org.springframework.context.annotation.BeanDefinitionRegistry ; this . org.springframework.context.annotation.ComponentScanAnnotationParser = new ComponentScanAnnotationParser ( org.springframework.context.annotation.Environment , org.springframework.context.annotation.ResourceLoader , org.springframework.context.annotation.BeanNameGenerator , org.springframework.context.annotation.BeanDefinitionRegistry ) ; this . org.springframework.context.annotation.ConditionEvaluator = new ConditionEvaluator ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.Environment , org.springframework.context.annotation.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ) { this . java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> = new java.util.LinkedList<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> <> ( ) ; for ( BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder : java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ) { BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ; try { if ( org.springframework.context.annotation.BeanDefinition instanceof AnnotatedBeanDefinition ) { void ( ( ( AnnotatedBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) . getMetadata ( ) , org.springframework.context.annotation.BeanDefinitionHolder . getBeanName ( ) ) ; } else if ( org.springframework.context.annotation.BeanDefinition instanceof AbstractBeanDefinition && ( ( AbstractBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) . hasBeanClass ( ) ) { void ( ( ( AbstractBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) . getBeanClass ( ) , org.springframework.context.annotation.BeanDefinitionHolder . getBeanName ( ) ) ; } else { void ( org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) , org.springframework.context.annotation.BeanDefinitionHolder . getBeanName ( ) ) ; } } catch ( BeanDefinitionStoreException org.springframework.context.annotation.BeanDefinitionStoreException ) { throw org.springframework.context.annotation.BeanDefinitionStoreException ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) + STRING , java.lang.Throwable ) ; } } void ( ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { MetadataReader org.springframework.context.annotation.MetadataReader = this . org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ; void ( new ConfigurationClass ( org.springframework.context.annotation.MetadataReader , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) throws java.io.IOException { void ( new ConfigurationClass ( java.lang.Class<> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , java.lang.String java.lang.String ) throws java.io.IOException { void ( new ConfigurationClass ( org.springframework.context.annotation.AnnotationMetadata , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { for ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass : this . java.util.Map<org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClass> . keySet ( ) ) { org.springframework.context.annotation.ConfigurationClass . validate ( this . org.springframework.context.annotation.ProblemReporter ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.context.annotation.ConfigurationClass> < ConfigurationClass > java.util.Set<org.springframework.context.annotation.ConfigurationClass> ( ) { return this . java.util.Map<org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClass> . keySet ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) throws java.io.IOException { if ( this . org.springframework.context.annotation.ConditionEvaluator . shouldSkip ( org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) , ConfigurationPhase . PARSE_CONFIGURATION ) ) { return; } ConfigurationClass org.springframework.context.annotation.ConfigurationClass = this . java.util.Map<org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClass> . get ( org.springframework.context.annotation.ConfigurationClass ) ; if ( org.springframework.context.annotation.ConfigurationClass != null ) { if ( org.springframework.context.annotation.ConfigurationClass . isImported ( ) ) { if ( org.springframework.context.annotation.ConfigurationClass . isImported ( ) ) { org.springframework.context.annotation.ConfigurationClass . mergeImportedBy ( org.springframework.context.annotation.ConfigurationClass ) ; } return; } else { this . java.util.Map<org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClass> . remove ( org.springframework.context.annotation.ConfigurationClass ) ; for ( java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> < ConfigurationClass > java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> = this . java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClass> . values ( ) . iterator ( ) ; java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> . hasNext ( ) ; ) { if ( org.springframework.context.annotation.ConfigurationClass . equals ( java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> . next ( ) ) ) { java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> . remove ( ) ; } } } } org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass = org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( org.springframework.context.annotation.ConfigurationClass ) ; do { org.springframework.context.annotation.ConfigurationClassParser.SourceClass = org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ; } while ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass != null ); this . java.util.Map<org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClass> . put ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClass ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) throws java.io.IOException { void ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ; for ( AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes : AnnotationConfigUtils . attributesForRepeatable ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) , PropertySources .class , org . springframework . context . annotation . org.springframework.context.annotation.PropertySource .class ) ) { if ( this . org.springframework.context.annotation.Environment instanceof ConfigurableEnvironment ) { void ( org.springframework.context.annotation.AnnotationAttributes ) ; } else { org.springframework.context.annotation.Log . warn ( STRING + org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) + STRING ) ; } } java.util.Set<org.springframework.context.annotation.AnnotationAttributes> < AnnotationAttributes > java.util.Set<org.springframework.context.annotation.AnnotationAttributes> = AnnotationConfigUtils . attributesForRepeatable ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) , ComponentScans .class , ComponentScan .class ) ; if ( ! java.util.Set<org.springframework.context.annotation.AnnotationAttributes> . isEmpty ( ) && ! this . org.springframework.context.annotation.ConditionEvaluator . shouldSkip ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) , ConfigurationPhase . REGISTER_BEAN ) ) { for ( AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes : java.util.Set<org.springframework.context.annotation.AnnotationAttributes> ) { java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> = this . org.springframework.context.annotation.ComponentScanAnnotationParser . parse ( org.springframework.context.annotation.AnnotationAttributes , org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) ) ; for ( BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder : java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ) { if ( ConfigurationClassUtils . checkConfigurationClassCandidate ( org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) , this . org.springframework.context.annotation.MetadataReaderFactory ) ) { void ( org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) . getBeanClassName ( ) , org.springframework.context.annotation.BeanDefinitionHolder . getBeanName ( ) ) ; } } } } void ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass , java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) , true ) ; if ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . isAnnotated ( ImportResource .class . java.lang.String ( ) ) ) { AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) , ImportResource .class ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.AnnotationAttributes . getStringArray ( STRING ) ; java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> < ? extends BeanDefinitionReader > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> = org.springframework.context.annotation.AnnotationAttributes . getClass ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = this . org.springframework.context.annotation.Environment . resolveRequiredPlaceholders ( java.lang.String ) ; org.springframework.context.annotation.ConfigurationClass . addImportedResource ( java.lang.String , java.lang.Class<> ) ; } } java.util.Set<org.springframework.context.annotation.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.context.annotation.MethodMetadata> = java.util.Set<org.springframework.context.annotation.MethodMetadata> ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ; for ( MethodMetadata org.springframework.context.annotation.MethodMetadata : java.util.Set<org.springframework.context.annotation.MethodMetadata> ) { org.springframework.context.annotation.ConfigurationClass . addBeanMethod ( new BeanMethod ( org.springframework.context.annotation.MethodMetadata , org.springframework.context.annotation.ConfigurationClass ) ) ; } void ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ; if ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . hasSuperClass ( ) ) { java.lang.String java.lang.String = org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . getSuperClassName ( ) ; if ( ! java.lang.String . boolean ( STRING ) && ! this . java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClass> . containsKey ( java.lang.String ) ) { this . java.util.Map<java.lang.String,org.springframework.context.annotation.ConfigurationClass> . put ( java.lang.String , org.springframework.context.annotation.ConfigurationClass ) ; return org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) throws java.io.IOException { java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = org.springframework.context.annotation.ConfigurationClassParser.SourceClass . java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( ) ; if ( ! java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( ) ) { java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.ArrayList<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . int ( ) ) ; for ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass : java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ) { if ( ConfigurationClassUtils . isConfigurationCandidate ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) ) && ! org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) . equals ( org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) ) ) { java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ; } } OrderComparator . sort ( java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ) ; for ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass : java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ) { if ( this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . boolean ( org.springframework.context.annotation.ConfigurationClass ) ) { this . org.springframework.context.annotation.ProblemReporter . error ( new org.springframework.context.annotation.ConfigurationClassParser.CircularImportProblem ( org.springframework.context.annotation.ConfigurationClass , this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack ) ) ; } else { this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . void ( org.springframework.context.annotation.ConfigurationClass ) ; try { void ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.ConfigurationClass ( org.springframework.context.annotation.ConfigurationClass ) ) ; } finally { this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . org.springframework.context.annotation.ConfigurationClass ( ) ; } } } } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) throws java.io.IOException { for ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass : org.springframework.context.annotation.ConfigurationClassParser.SourceClass . java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( ) ) { java.util.Set<org.springframework.context.annotation.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.context.annotation.MethodMetadata> = java.util.Set<org.springframework.context.annotation.MethodMetadata> ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ; for ( MethodMetadata org.springframework.context.annotation.MethodMetadata : java.util.Set<org.springframework.context.annotation.MethodMetadata> ) { if ( ! org.springframework.context.annotation.MethodMetadata . isAbstract ( ) ) { org.springframework.context.annotation.ConfigurationClass . addBeanMethod ( new BeanMethod ( org.springframework.context.annotation.MethodMetadata , org.springframework.context.annotation.ConfigurationClass ) ) ; } } void ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.context.annotation.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.context.annotation.MethodMetadata> ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) ; java.util.Set<org.springframework.context.annotation.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.context.annotation.MethodMetadata> = org.springframework.context.annotation.AnnotationMetadata . getAnnotatedMethods ( Bean .class . java.lang.String ( ) ) ; if ( java.util.Set<org.springframework.context.annotation.MethodMetadata> . size ( ) > NUMBER && org.springframework.context.annotation.AnnotationMetadata instanceof StandardAnnotationMetadata ) { try { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = this . org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) . getAnnotationMetadata ( ) ; java.util.Set<org.springframework.context.annotation.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.context.annotation.MethodMetadata> = org.springframework.context.annotation.AnnotationMetadata . getAnnotatedMethods ( Bean .class . java.lang.String ( ) ) ; if ( java.util.Set<org.springframework.context.annotation.MethodMetadata> . size ( ) >= java.util.Set<org.springframework.context.annotation.MethodMetadata> . size ( ) ) { java.util.Set<org.springframework.context.annotation.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.context.annotation.MethodMetadata> = new java.util.LinkedHashSet <> ( java.util.Set<org.springframework.context.annotation.MethodMetadata> . size ( ) ) ; for ( MethodMetadata org.springframework.context.annotation.MethodMetadata : java.util.Set<org.springframework.context.annotation.MethodMetadata> ) { for ( MethodMetadata org.springframework.context.annotation.MethodMetadata : java.util.Set<org.springframework.context.annotation.MethodMetadata> ) { if ( org.springframework.context.annotation.MethodMetadata . getMethodName ( ) . equals ( org.springframework.context.annotation.MethodMetadata . getMethodName ( ) ) ) { java.util.Set<org.springframework.context.annotation.MethodMetadata> . add ( org.springframework.context.annotation.MethodMetadata ) ; break; } } } if ( java.util.Set<org.springframework.context.annotation.MethodMetadata> . size ( ) == java.util.Set<org.springframework.context.annotation.MethodMetadata> . size ( ) ) { java.util.Set<org.springframework.context.annotation.MethodMetadata> = java.util.Set<org.springframework.context.annotation.MethodMetadata> ; } } } catch ( java.io.IOException java.io.IOException ) { org.springframework.context.annotation.Log . debug ( STRING , java.io.IOException ) ; } } return java.util.Set<org.springframework.context.annotation.MethodMetadata> ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes ) throws java.io.IOException { java.lang.String java.lang.String = org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ; if ( ! StringUtils . hasLength ( java.lang.String ) ) { java.lang.String = null ; } java.lang.String java.lang.String = org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ; if ( ! StringUtils . hasLength ( java.lang.String ) ) { java.lang.String = null ; } java.lang.String [] java.lang.String[] = org.springframework.context.annotation.AnnotationAttributes . getStringArray ( STRING ) ; Assert . isTrue ( java.lang.String[] . int > NUMBER , STRING ) ; boolean boolean = org.springframework.context.annotation.AnnotationAttributes . getBoolean ( STRING ) ; java.lang.Class<? extends org.springframework.context.annotation.PropertySourceFactory> < ? extends PropertySourceFactory > java.lang.Class<? extends org.springframework.context.annotation.PropertySourceFactory> = org.springframework.context.annotation.AnnotationAttributes . getClass ( STRING ) ; PropertySourceFactory org.springframework.context.annotation.PropertySourceFactory = ( java.lang.Class<> == PropertySourceFactory .class ? org.springframework.context.annotation.PropertySourceFactory : BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.lang.String java.lang.String = this . org.springframework.context.annotation.Environment . resolveRequiredPlaceholders ( java.lang.String ) ; Resource org.springframework.context.annotation.Resource = this . org.springframework.context.annotation.ResourceLoader . getResource ( java.lang.String ) ; void ( org.springframework.context.annotation.PropertySourceFactory . createPropertySource ( java.lang.String , new EncodedResource ( org.springframework.context.annotation.Resource , java.lang.String ) ) ) ; } catch ( java.lang.IllegalArgumentException | java.io.FileNotFoundException java.lang.Exception ) { if ( boolean ) { if ( org.springframework.context.annotation.Log . isInfoEnabled ( ) ) { org.springframework.context.annotation.Log . info ( STRING + java.lang.String + STRING + java.lang.Exception . java.lang.String ( ) ) ; } } else { throw java.lang.Exception ; } } } }  <METHOD_END>
<METHOD_START> private void void ( PropertySource < ? > org.springframework.context.annotation.PropertySource<?> ) { java.lang.String java.lang.String = org.springframework.context.annotation.PropertySource<> . getName ( ) ; MutablePropertySources org.springframework.context.annotation.MutablePropertySources = ( ( ConfigurableEnvironment ) this . org.springframework.context.annotation.Environment ) . getPropertySources ( ) ; if ( org.springframework.context.annotation.MutablePropertySources . contains ( java.lang.String ) && this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { PropertySource < ? > org.springframework.context.annotation.PropertySource<?> = org.springframework.context.annotation.MutablePropertySources . get ( java.lang.String ) ; PropertySource < ? > org.springframework.context.annotation.PropertySource<?> = ( org.springframework.context.annotation.PropertySource<> instanceof ResourcePropertySource ? ( ( ResourcePropertySource ) org.springframework.context.annotation.PropertySource<> ) . withResourceName ( ) : org.springframework.context.annotation.PropertySource<> ) ; if ( org.springframework.context.annotation.PropertySource<> instanceof CompositePropertySource ) { ( ( CompositePropertySource ) org.springframework.context.annotation.PropertySource<> ) . addFirstPropertySource ( org.springframework.context.annotation.PropertySource<> ) ; } else { if ( org.springframework.context.annotation.PropertySource<> instanceof ResourcePropertySource ) { org.springframework.context.annotation.PropertySource<?> = ( ( ResourcePropertySource ) org.springframework.context.annotation.PropertySource<> ) . withResourceName ( ) ; } CompositePropertySource org.springframework.context.annotation.CompositePropertySource = new CompositePropertySource ( java.lang.String ) ; org.springframework.context.annotation.CompositePropertySource . addPropertySource ( org.springframework.context.annotation.PropertySource<> ) ; org.springframework.context.annotation.CompositePropertySource . addPropertySource ( org.springframework.context.annotation.PropertySource<> ) ; org.springframework.context.annotation.MutablePropertySources . replace ( java.lang.String , org.springframework.context.annotation.CompositePropertySource ) ; } } else { if ( this . java.util.List<java.lang.String> . boolean ( ) ) { org.springframework.context.annotation.MutablePropertySources . addLast ( org.springframework.context.annotation.PropertySource<> ) ; } else { java.lang.String java.lang.String = this . java.util.List<java.lang.String> . java.lang.String ( this . java.util.List<java.lang.String> . int ( ) - NUMBER ) ; org.springframework.context.annotation.MutablePropertySources . addBefore ( java.lang.String , org.springframework.context.annotation.PropertySource<> ) ; } } this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) throws java.io.IOException { java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.LinkedHashSet<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( ) ; java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.LinkedHashSet<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( ) ; void ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass , java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> , java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ) ; return java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass , java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> , java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ) throws java.io.IOException { if ( java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) ) { for ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass : org.springframework.context.annotation.ConfigurationClassParser.SourceClass . java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( ) ) { java.lang.String java.lang.String = org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) ; if ( ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( Import .class . java.lang.String ( ) ) ) { void ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass , java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> , java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ) ; } } java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( Import .class . java.lang.String ( ) , STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> < org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder > java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> = this . java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> ; this . java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> = null ; java.util.Collections . void ( java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> , java.util.Comparator<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> ) ; for ( org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder : java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> ) { ConfigurationClass org.springframework.context.annotation.ConfigurationClass = org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder . org.springframework.context.annotation.ConfigurationClass ( ) ; try { java.lang.String [] java.lang.String[] = org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder . org.springframework.context.annotation.DeferredImportSelector ( ) . selectImports ( org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) ) ; void ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( org.springframework.context.annotation.ConfigurationClass ) , java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( java.lang.String[] ) , false ) ; } catch ( BeanDefinitionStoreException org.springframework.context.annotation.BeanDefinitionStoreException ) { throw org.springframework.context.annotation.BeanDefinitionStoreException ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) + STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass , java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> , boolean boolean ) throws java.io.IOException { if ( java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( ) ) { return; } if ( boolean && boolean ( org.springframework.context.annotation.ConfigurationClass ) ) { this . org.springframework.context.annotation.ProblemReporter . error ( new org.springframework.context.annotation.ConfigurationClassParser.CircularImportProblem ( org.springframework.context.annotation.ConfigurationClass , this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack ) ) ; } else { this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . void ( org.springframework.context.annotation.ConfigurationClass ) ; try { for ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass : java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ) { if ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . boolean ( ImportSelector .class ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.ConfigurationClassParser.SourceClass . java.lang.Class<?> ( ) ; ImportSelector org.springframework.context.annotation.ImportSelector = BeanUtils . instantiateClass ( java.lang.Class<> , ImportSelector .class ) ; ParserStrategyUtils . invokeAwareMethods ( org.springframework.context.annotation.ImportSelector , this . org.springframework.context.annotation.Environment , this . org.springframework.context.annotation.ResourceLoader , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; if ( this . java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> != null && org.springframework.context.annotation.ImportSelector instanceof DeferredImportSelector ) { this . java.util.List<org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder> . boolean ( new org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorHolder ( org.springframework.context.annotation.ConfigurationClass , ( DeferredImportSelector ) org.springframework.context.annotation.ImportSelector ) ) ; } else { java.lang.String [] java.lang.String[] = org.springframework.context.annotation.ImportSelector . selectImports ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) ) ; java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( java.lang.String[] ) ; void ( org.springframework.context.annotation.ConfigurationClass , org.springframework.context.annotation.ConfigurationClassParser.SourceClass , java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> , false ) ; } } else if ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . boolean ( ImportBeanDefinitionRegistrar .class ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.ConfigurationClassParser.SourceClass . java.lang.Class<?> ( ) ; ImportBeanDefinitionRegistrar org.springframework.context.annotation.ImportBeanDefinitionRegistrar = BeanUtils . instantiateClass ( java.lang.Class<> , ImportBeanDefinitionRegistrar .class ) ; ParserStrategyUtils . invokeAwareMethods ( org.springframework.context.annotation.ImportBeanDefinitionRegistrar , this . org.springframework.context.annotation.Environment , this . org.springframework.context.annotation.ResourceLoader , this . org.springframework.context.annotation.BeanDefinitionRegistry ) ; org.springframework.context.annotation.ConfigurationClass . addImportBeanDefinitionRegistrar ( org.springframework.context.annotation.ImportBeanDefinitionRegistrar , org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) ) ; } else { this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . void ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) , org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) ) ; void ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass . org.springframework.context.annotation.ConfigurationClass ( org.springframework.context.annotation.ConfigurationClass ) ) ; } } } catch ( BeanDefinitionStoreException org.springframework.context.annotation.BeanDefinitionStoreException ) { throw org.springframework.context.annotation.BeanDefinitionStoreException ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) + STRING , java.lang.Throwable ) ; } finally { this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . org.springframework.context.annotation.ConfigurationClass ( ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) { if ( this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . boolean ( org.springframework.context.annotation.ConfigurationClass ) ) { java.lang.String java.lang.String = org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) ; AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . org.springframework.context.annotation.AnnotationMetadata ( java.lang.String ) ; while ( org.springframework.context.annotation.AnnotationMetadata != null ) { if ( java.lang.String . boolean ( org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ) { return true ; } org.springframework.context.annotation.AnnotationMetadata = this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack . org.springframework.context.annotation.AnnotationMetadata ( org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ; } } return false ; }  <METHOD_END>
<METHOD_START> org.springframework.context.annotation.ImportRegistry org.springframework.context.annotation.ImportRegistry ( ) { return this . org.springframework.context.annotation.ConfigurationClassParser.ImportStack ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) throws java.io.IOException { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) ; if ( org.springframework.context.annotation.AnnotationMetadata instanceof StandardAnnotationMetadata ) { return org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( ( ( StandardAnnotationMetadata ) org.springframework.context.annotation.AnnotationMetadata ) . getIntrospectedClass ( ) ) ; } return org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { try { java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ; return new org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.Class<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.Class<> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( java.lang.String [] java.lang.String[] ) throws java.io.IOException { java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.ArrayList<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String ) ) ; } return java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ; }  <METHOD_END>
<METHOD_START> org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String java.lang.String ) throws java.io.IOException { if ( java.lang.String . boolean ( STRING ) ) { try { return new org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( this . org.springframework.context.annotation.ResourceLoader . getClassLoader ( ) . loadClass ( java.lang.String ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new NestedIOException ( STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } } return new org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( this . org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , java.lang.String java.lang.String ) { this . org.springframework.context.annotation.MultiValueMap<java.lang.String,org.springframework.context.annotation.AnnotationMetadata> . add ( java.lang.String , org.springframework.context.annotation.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ( java.lang.String java.lang.String ) { java.util.List<org.springframework.context.annotation.AnnotationMetadata> < AnnotationMetadata > java.util.List<org.springframework.context.annotation.AnnotationMetadata> = this . org.springframework.context.annotation.MultiValueMap<java.lang.String,org.springframework.context.annotation.AnnotationMetadata> . get ( java.lang.String ) ; return ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.context.annotation.AnnotationMetadata> ) ? java.util.List<org.springframework.context.annotation.AnnotationMetadata> . get ( java.util.List<org.springframework.context.annotation.AnnotationMetadata> . size ( ) - NUMBER ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { for ( java.util.List<org.springframework.context.annotation.AnnotationMetadata> < AnnotationMetadata > java.util.List<org.springframework.context.annotation.AnnotationMetadata> : this . org.springframework.context.annotation.MultiValueMap<java.lang.String,org.springframework.context.annotation.AnnotationMetadata> . values ( ) ) { for ( java.util.Iterator<org.springframework.context.annotation.AnnotationMetadata> < AnnotationMetadata > java.util.Iterator<org.springframework.context.annotation.AnnotationMetadata> = java.util.List<org.springframework.context.annotation.AnnotationMetadata> . iterator ( ) ; java.util.Iterator<org.springframework.context.annotation.AnnotationMetadata> . hasNext ( ) ;) { if ( java.util.Iterator<org.springframework.context.annotation.AnnotationMetadata> . next ( ) . getClassName ( ) . equals ( java.lang.String ) ) { java.util.Iterator<org.springframework.context.annotation.AnnotationMetadata> . remove ( ) ; break; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> < ConfigurationClass > java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> = java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> ( ) ; while ( java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> . hasNext ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> . next ( ) . getSimpleName ( ) ) ; if ( java.util.Iterator<org.springframework.context.annotation.ConfigurationClass> . hasNext ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.StringBuilder ( ']' ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , DeferredImportSelector org.springframework.context.annotation.DeferredImportSelector ) { this . org.springframework.context.annotation.ConfigurationClass = org.springframework.context.annotation.ConfigurationClass ; this . org.springframework.context.annotation.DeferredImportSelector = org.springframework.context.annotation.DeferredImportSelector ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ConfigurationClass org.springframework.context.annotation.ConfigurationClass ( ) { return this . org.springframework.context.annotation.ConfigurationClass ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.DeferredImportSelector org.springframework.context.annotation.DeferredImportSelector ( ) { return this . org.springframework.context.annotation.DeferredImportSelector ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; if ( java.lang.Object instanceof java.lang.Class ) { this . org.springframework.context.annotation.AnnotationMetadata = new StandardAnnotationMetadata ( ( java.lang.Class<?> < ? > ) java.lang.Object , true ) ; } else { this . org.springframework.context.annotation.AnnotationMetadata = ( ( MetadataReader ) java.lang.Object ) . getAnnotationMetadata ( ) ; } }  <METHOD_END>
<METHOD_START> public final org.springframework.context.annotation.AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ( ) { return this . org.springframework.context.annotation.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { java.lang.Integer java.lang.Integer = ConfigurationClassUtils . getOrder ( this . org.springframework.context.annotation.AnnotationMetadata ) ; return ( java.lang.Integer != null ? java.lang.Integer : Ordered . LOWEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) java.lang.ClassNotFoundException { if ( this . java.lang.Object instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) this . java.lang.Object ; } java.lang.String java.lang.String = ( ( MetadataReader ) this . java.lang.Object ) . getClassMetadata ( ) . getClassName ( ) ; return org.springframework.context.annotation.ResourceLoader . getClassLoader ( ) . loadClass ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { if ( this . java.lang.Object instanceof java.lang.Class ) { return java.lang.Class<> . boolean ( ( java.lang.Class<?> < ? > ) this . java.lang.Object ) ; } return new AssignableTypeFilter ( java.lang.Class<> ) . match ( ( MetadataReader ) this . java.lang.Object , org.springframework.context.annotation.MetadataReaderFactory ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ConfigurationClass org.springframework.context.annotation.ConfigurationClass ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) throws java.io.IOException { if ( this . java.lang.Object instanceof java.lang.Class ) { return new ConfigurationClass ( ( java.lang.Class<?> < ? > ) this . java.lang.Object , org.springframework.context.annotation.ConfigurationClass ) ; } return new ConfigurationClass ( ( MetadataReader ) this . java.lang.Object , org.springframework.context.annotation.ConfigurationClass ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( ) java.io.IOException { java.lang.Object java.lang.Object = this . java.lang.Object ; if ( java.lang.Object instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object ; try { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<> . java.lang.Class<?>[] ( ) ; java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.ArrayList<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( java.lang.Class<?>[] . int ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.Class<> ) ) ; } return java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ; } catch ( java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError ) { java.lang.Object = org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( java.lang.Class<> . java.lang.String ( ) ) ; } } MetadataReader org.springframework.context.annotation.MetadataReader = ( MetadataReader ) java.lang.Object ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.MetadataReader . getClassMetadata ( ) . getMemberClassNames ( ) ; java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.ArrayList<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String ) ) ; } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( STRING + java.lang.String + STRING ) ; } } } return java.util.List<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( ) java.io.IOException { if ( this . java.lang.Object instanceof java.lang.Class ) { return org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( ( ( java.lang.Class<?> < ? > ) this . java.lang.Object ) . java.lang.Class<? super > ( ) ) ; } return org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( ( ( MetadataReader ) this . java.lang.Object ) . getClassMetadata ( ) . getSuperClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( ) java.io.IOException { java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.LinkedHashSet<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( ) ; if ( this . java.lang.Object instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) this . java.lang.Object ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.Class<> ) ) ; } } else { for ( java.lang.String java.lang.String : this . org.springframework.context.annotation.AnnotationMetadata . getInterfaceNames ( ) ) { java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String ) ) ; } } return java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( ) java.io.IOException { java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.LinkedHashSet<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( ) ; for ( java.lang.String java.lang.String : this . org.springframework.context.annotation.AnnotationMetadata . getAnnotationTypes ( ) ) { try { java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } return java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.context.annotation.AnnotationMetadata . getAnnotationAttributes ( java.lang.String , true ) ; if ( java.util.Map<java.lang.String,java.lang.Object> == null || ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ( ) ; } java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> < org.springframework.context.annotation.ConfigurationClassParser.SourceClass > java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> = new java.util.LinkedHashSet<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> . boolean ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String ) ) ; } return java.util.Set<org.springframework.context.annotation.ConfigurationClassParser.SourceClass> ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.ConfigurationClassParser.SourceClass org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String java.lang.String ) throws java.io.IOException { if ( this . java.lang.Object instanceof java.lang.Class ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( java.lang.Class<?> < ? > ) this . java.lang.Object ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( java.lang.String ) ; return org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.Class<> ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { if ( java.lang.String . boolean ( STRING ) ) { throw new NestedIOException ( STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } return new org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ) ; } } return org.springframework.context.annotation.ConfigurationClassParser.SourceClass ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.context.annotation.ConfigurationClassParser.SourceClass && this . org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) . equals ( ( ( org.springframework.context.annotation.ConfigurationClassParser.SourceClass ) java.lang.Object ) . org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass , java.util.Deque<org.springframework.context.annotation.ConfigurationClass> < ConfigurationClass > java.util.Deque<org.springframework.context.annotation.ConfigurationClass> ) { super( java.lang.String . java.lang.String ( STRING + STRING + STRING , java.util.Deque<org.springframework.context.annotation.ConfigurationClass> . peek ( ) . getSimpleName ( ) , org.springframework.context.annotation.ConfigurationClass . getSimpleName ( ) , org.springframework.context.annotation.ConfigurationClass . getSimpleName ( ) , java.util.Deque<org.springframework.context.annotation.ConfigurationClass> ) , new Location ( java.util.Deque<org.springframework.context.annotation.ConfigurationClass> . peek ( ) . getResource ( ) , org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) ) ); }  <METHOD_END>
