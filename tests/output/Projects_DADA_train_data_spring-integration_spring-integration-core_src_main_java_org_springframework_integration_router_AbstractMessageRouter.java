<METHOD_START> public void void ( MessageChannel org.springframework.integration.router.MessageChannel ) { this . org.springframework.integration.router.MessageChannel = org.springframework.integration.router.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.router.MessageChannel org.springframework.integration.router.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.router.MessageChannel = getChannelResolver ( ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.router.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.router.MessagingTemplate . setSendTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.router.MessagingTemplate org.springframework.integration.router.MessagingTemplate ( ) { return this . org.springframework.integration.router.MessagingTemplate ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.router.ConversionService org.springframework.integration.router.ConversionService ( ) { if ( this . getConversionService ( ) == null ) { synchronized ( this ) { if ( getConversionService ( ) == null ) { setConversionService ( DefaultConversionService . getSharedInstance ( ) ) ; } } } return getConversionService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.router.MessageChannel != null ) , STRING ) ; if ( this . getBeanFactory ( ) != null ) { this . org.springframework.integration.router.MessagingTemplate . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.util.Collection<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.Collection<org.springframework.integration.router.MessageChannel> ( Message < ? > org.springframework.integration.router.Message<?> );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.router.Message<?> ) { boolean boolean = false ; java.util.Collection<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.Collection<org.springframework.integration.router.MessageChannel> = this . java.util.Collection<org.springframework.integration.router.MessageChannel> ( org.springframework.integration.router.Message<> ) ; if ( java.util.Collection<org.springframework.integration.router.MessageChannel> != null ) { int int = java.util.Collection<org.springframework.integration.router.MessageChannel> . size ( ) ; int int = NUMBER ; for ( MessageChannel org.springframework.integration.router.MessageChannel : java.util.Collection<org.springframework.integration.router.MessageChannel> ) { final Message < ? > org.springframework.integration.router.Message<?> = ! this . boolean ? org.springframework.integration.router.Message<> : ( this . getMessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.router.Message<> ) . pushSequenceDetails ( org.springframework.integration.router.Message<> . getHeaders ( ) . getId ( ) , int ++ , int ) . build ( ) ) ; if ( org.springframework.integration.router.MessageChannel != null ) { try { this . org.springframework.integration.router.MessagingTemplate . send ( org.springframework.integration.router.MessageChannel , org.springframework.integration.router.Message<> ) ; boolean = true ; } catch ( MessagingException org.springframework.integration.router.MessagingException ) { if ( ! this . boolean ) { throw org.springframework.integration.router.MessagingException ; } else if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( org.springframework.integration.router.MessagingException ) ; } } } } } if ( ! boolean ) { org.springframework.integration.router.MessageChannel ( ) ; if ( this . org.springframework.integration.router.MessageChannel != null ) { this . org.springframework.integration.router.MessagingTemplate . send ( this . org.springframework.integration.router.MessageChannel , org.springframework.integration.router.Message<> ) ; } else { throw new MessageDeliveryException ( org.springframework.integration.router.Message<> , STRING + this . getComponentName ( ) + STRING ) ; } } }  <METHOD_END>
