<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.uml.AnnotationConfigApplicationContext org.springframework.statemachine.uml.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . registerAction ( STRING , new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . setBeanFactory ( context ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; DefaultStateMachineComponentResolver < java.lang.String , java.lang.String > org.springframework.statemachine.uml.DefaultStateMachineComponentResolver<java.lang.String,java.lang.String> = new DefaultStateMachineComponentResolver <> ( ) ; org.springframework.statemachine.uml.DefaultStateMachineComponentResolver<java.lang.String,java.lang.String> . registerAction ( STRING , new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . setStateMachineComponentResolver ( org.springframework.statemachine.uml.DefaultStateMachineComponentResolver<java.lang.String,java.lang.String> ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . setBeanFactory ( context ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getParent ( ) , nullValue ( ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getParent ( ) , nullValue ( ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getParent ( ) , is ( STRING ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getParent ( ) , is ( STRING ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . setBeanFactory ( context ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getRegion ( ) , notNullValue ( ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getRegion ( ) , notNullValue ( ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getRegion ( ) , notNullValue ( ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getRegion ( ) , notNullValue ( ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . setBeanFactory ( context ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isEnd ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isEnd ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isEnd ( ) , is ( true ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . setBeanFactory ( context ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getPseudoStateKind ( ) , is ( PseudoStateKind . ENTRY ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getPseudoStateKind ( ) , is ( PseudoStateKind . EXIT ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getTransitionsData ( ) . getEntrys ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getTransitionsData ( ) . getExits ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config2 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config3 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config4 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config5 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config6 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config6 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config6 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config7 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config20 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config20 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . put ( STRING , STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config8 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config9 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config10 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config10 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config10 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config11 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getDeferred ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getDeferred ( ) . iterator ( ) . next ( ) , is ( STRING ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getDeferred ( ) . size ( ) , is ( NUMBER ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getDeferred ( ) . size ( ) , is ( NUMBER ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; java.util.Collection<org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String>> < TransitionData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getTransitionsData ( ) . getTransitions ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( TransitionData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String> . getEvent ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String> . getKind ( ) , is ( TransitionKind . EXTERNAL ) ) ; } else if ( org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String> . getEvent ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String> . getKind ( ) , is ( TransitionKind . LOCAL ) ) ; } else if ( org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String> . getEvent ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.TransitionData<java.lang.String,java.lang.String> . getKind ( ) , is ( TransitionKind . INTERNAL ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config12 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config13 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config13 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config14 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config14 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config15 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config16 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . get ( STRING , java.lang.String .class ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getExtendedState ( ) . get ( STRING , java.lang.String .class ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config16 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config17 .class ) ; context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config18 .class ) ; context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config19 .class ) ; context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config21 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config22 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction = context . getBean ( STRING , org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config23 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener = new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . void ( ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.TestListener . java.util.ArrayList<java.lang.String> , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.Config24 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING , STRING ) ) ; org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.uml.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . refresh ( ) ; Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; UmlStateMachineModelFactory org.springframework.statemachine.uml.UmlStateMachineModelFactory = new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; org.springframework.statemachine.uml.UmlStateMachineModelFactory . setBeanFactory ( context ) ; assertThat ( org.springframework.statemachine.uml.Resource . exists ( ) , is ( true ) ) ; StateMachineModel < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.UmlStateMachineModelFactory . build ( ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> < StateData < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> = org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getStatesData ( ) . getStateData ( ) ; assertThat ( java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> : java.util.Collection<org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String>> ) { if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( true ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getPseudoStateKind ( ) , is ( PseudoStateKind . ENTRY ) ) ; } else if ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getState ( ) . equals ( STRING ) ) { assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . getPseudoStateKind ( ) , is ( PseudoStateKind . EXIT ) ) ; assertThat ( org.springframework.statemachine.uml.StateData<java.lang.String,java.lang.String> . isInitial ( ) , is ( false ) ) ; } else { throw new java.lang.IllegalArgumentException ( ) ; } } assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getTransitionsData ( ) . getEntrys ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.uml.StateMachineModel<java.lang.String,java.lang.String> . getTransitionsData ( ) . getExits ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.Action<java.lang.String,java.lang.String> ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.ChoiceGuard org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.ChoiceGuard ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.ChoiceGuard org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.ChoiceGuard ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.ChoiceGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.JunctionGuard org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.JunctionGuard ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.JunctionGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.JunctionGuard org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.JunctionGuard ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.JunctionGuard ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.SimpleGuard org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.SimpleGuard ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.SimpleGuard ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) { return new org.springframework.statemachine.uml.UmlStateMachineModelFactoryTests.LatchAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.uml.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { Resource org.springframework.statemachine.uml.Resource = new ClassPathResource ( STRING ) ; return new UmlStateMachineModelFactory ( org.springframework.statemachine.uml.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateContext<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateContext<java.lang.String,java.lang.String> ) { return ObjectUtils . nullSafeEquals ( java.lang.String , org.springframework.statemachine.uml.StateContext<java.lang.String,java.lang.String> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateContext<java.lang.String,java.lang.String> ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.uml.StateContext<java.lang.String,java.lang.String> ) { return ObjectUtils . nullSafeEquals ( java.lang.String , org.springframework.statemachine.uml.StateContext<java.lang.String,java.lang.String> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.uml.State<java.lang.String,java.lang.String> ) { java.util.ArrayList<java.lang.String> . boolean ( org.springframework.statemachine.uml.State<java.lang.String,java.lang.String> . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.uml.State<java.lang.String,java.lang.String> ) { java.util.ArrayList<java.lang.String> . boolean ( org.springframework.statemachine.uml.State<java.lang.String,java.lang.String> . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.ArrayList<java.lang.String> . void ( ) ; java.util.ArrayList<java.lang.String> . void ( ) ; }  <METHOD_END>
