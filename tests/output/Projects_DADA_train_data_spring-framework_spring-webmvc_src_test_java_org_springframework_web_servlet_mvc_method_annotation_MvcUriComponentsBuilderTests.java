<METHOD_START> @ Before public void void ( ) { RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonControllerImpl .class ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , Matchers . endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonsAddressesController .class ) . buildAndExpand ( NUMBER ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonControllerImpl .class ) . pathSegment ( STRING ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.InvalidController .class ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.UnmappedController .class ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonControllerImpl .class ) . build ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponents . toString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; MvcUriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder = MvcUriComponentsBuilder . relativeTo ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder . withController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonControllerImpl .class ) . build ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponents . toString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class , STRING , new java.lang.Object [] { STRING } ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonsAddressesController .class , STRING , STRING ) . buildAndExpand ( STRING ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTime org.springframework.web.servlet.mvc.method.annotation.DateTime = DateTime . now ( ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class , STRING , NUMBER , org.springframework.web.servlet.mvc.method.annotation.DateTime ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . getPath ( ) , is ( STRING + ISODateTimeFormat . date ( ) . print ( org.springframework.web.servlet.mvc.method.annotation.DateTime ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class , STRING , STRING , NUMBER , NUMBER ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . getPath ( ) , is ( STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.servlet.mvc.method.annotation.UriComponents . getQueryParams ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) , contains ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonCrudController .class , STRING , ( long ) NUMBER ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.UserContactController .class , STRING , NUMBER ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . getPath ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.UnmappedController .class , STRING ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class , STRING , new java.lang.Object [] { STRING } ) . build ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponents . toString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; MvcUriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder = MvcUriComponentsBuilder . relativeTo ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder . withMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class , STRING , new java.lang.Object [] { STRING } ) . build ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponents . toString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.MetaAnnotationController .class , STRING ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodName ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class , STRING , new java.lang.Object [] { null } ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodCall ( on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class ) . myMethod ( null ) ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , startsWith ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodCall ( on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ExtendedController .class ) . myMethod ( null ) ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , startsWith ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodCall ( on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonsAddressesController .class ) . getAddressesForCountry ( STRING ) ) . buildAndExpand ( NUMBER ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodCall ( on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class ) . methodWithPathVariable ( STRING ) ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , startsWith ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodCall ( on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class ) . methodForNextPage ( STRING , NUMBER , NUMBER ) ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . getPath ( ) , is ( STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.servlet.mvc.method.annotation.UriComponents . getQueryParams ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) , contains ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) , contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodCall ( on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class ) . methodWithMultiValueRequestParams ( STRING , java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) , NUMBER ) ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . getPath ( ) , is ( STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.servlet.mvc.method.annotation.UriComponents . getQueryParams ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) , contains ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromMethodCall ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class ) . myMethod ( null ) ) . build ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponents . toString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; MvcUriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder = MvcUriComponentsBuilder . relativeTo ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder . withMethodCall ( on ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.ControllerWithMethods .class ) . myMethod ( null ) ) . build ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponents . toString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext . register ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.WebConfig .class ) ; org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setServerName ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setServerPort ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = MvcUriComponentsBuilder . fromMappingName ( java.lang.String ) . arg ( NUMBER , STRING ) . buildAndExpand ( NUMBER ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext . register ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.WebConfig .class ) ; org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigWebApplicationContext ) ; UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; MvcUriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder = MvcUriComponentsBuilder . relativeTo ( org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) ; java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder . withMappingName ( STRING ) . arg ( NUMBER , STRING ) . buildAndExpand ( NUMBER ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonControllerImpl .class ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonControllerImpl .class ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; UriComponents org.springframework.web.servlet.mvc.method.annotation.UriComponents = fromController ( org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonControllerImpl .class ) . build ( ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.UriComponents . toUriString ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> ( @ PathVariable java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> ( @ RequestBody java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> ( @ PathVariable java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> ( @ PathVariable java.lang.Integer java.lang.Integer , @ DateTimeFormat ( iso = ISO . DATE ) @ PathVariable DateTime org.springframework.web.servlet.mvc.method.annotation.DateTime ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> ( @ PathVariable java.lang.String java.lang.String , @ RequestParam java.lang.Integer java.lang.Integer , @ RequestParam java.lang.Integer java.lang.Integer ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> ( @ PathVariable java.lang.String java.lang.String , @ RequestParam java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> , @ RequestParam java.lang.Integer java.lang.Integer ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.Void> ( @ RequestParam ( defaultValue = STRING ) java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ PathVariable java.lang.Integer java.lang.Integer ) { return null ; }  <METHOD_END>
<METHOD_START> abstract T T ( ID ID );  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.Person org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.Person ( @ PathVariable java.lang.Long java.lang.Long ) { return new org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.Person ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PostJson ( java.lang.String[] = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonsAddressesController org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonsAddressesController ( ) { return new org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests.PersonsAddressesController ( ) ; }  <METHOD_END>
