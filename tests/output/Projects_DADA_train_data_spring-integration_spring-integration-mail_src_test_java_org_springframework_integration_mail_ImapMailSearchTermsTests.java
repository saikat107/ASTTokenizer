<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = AbstractMailReceiver . DEFAULT_SI_USER_FLAG ; ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( ) ; void ( java.lang.String , org.springframework.integration.mail.ImapMailReceiver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( ) ; org.springframework.integration.mail.ImapMailReceiver . setUserFlag ( java.lang.String ) ; void ( java.lang.String , org.springframework.integration.mail.ImapMailReceiver ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver )			throws java.lang.NoSuchFieldException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { org.springframework.integration.mail.ImapMailReceiver . setShouldMarkMessagesAsRead ( true ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . thenReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Folder ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.integration.mail.ImapMailReceiver . getClass ( ) , STRING , Flags .class ) ; java.lang.reflect.Method . void ( true ) ; Flags org.springframework.integration.mail.Flags = new Flags ( ) ; SearchTerm org.springframework.integration.mail.SearchTerm = ( SearchTerm ) java.lang.reflect.Method . java.lang.Object ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Flags ) ; assertTrue ( org.springframework.integration.mail.SearchTerm instanceof NotTerm ) ; NotTerm org.springframework.integration.mail.NotTerm = ( NotTerm ) org.springframework.integration.mail.SearchTerm ; Flags org.springframework.integration.mail.Flags = new Flags ( ) ; org.springframework.integration.mail.Flags . add ( java.lang.String ) ; assertEquals ( org.springframework.integration.mail.Flags , ( ( FlagTerm ) org.springframework.integration.mail.NotTerm . getTerm ( ) ) . getFlags ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( ) ; org.springframework.integration.mail.ImapMailReceiver . setShouldMarkMessagesAsRead ( true ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . thenReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Folder ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.integration.mail.ImapMailReceiver . getClass ( ) , STRING , Flags .class ) ; java.lang.reflect.Method . void ( true ) ; Flags org.springframework.integration.mail.Flags = new Flags ( ) ; org.springframework.integration.mail.Flags . add ( Flag . ANSWERED ) ; SearchTerm org.springframework.integration.mail.SearchTerm = ( SearchTerm ) java.lang.reflect.Method . java.lang.Object ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Flags ) ; assertTrue ( org.springframework.integration.mail.SearchTerm instanceof AndTerm ) ; AndTerm org.springframework.integration.mail.AndTerm = ( AndTerm ) org.springframework.integration.mail.SearchTerm ; SearchTerm [] org.springframework.integration.mail.SearchTerm[] = org.springframework.integration.mail.AndTerm . getTerms ( ) ; assertEquals ( NUMBER , terms . length ) ; NotTerm org.springframework.integration.mail.NotTerm = ( NotTerm ) org.springframework.integration.mail.SearchTerm[] [ NUMBER ] ; assertTrue ( ( ( FlagTerm ) org.springframework.integration.mail.NotTerm . getTerm ( ) ) . getFlags ( ) . contains ( Flag . ANSWERED ) ) ; org.springframework.integration.mail.NotTerm = ( NotTerm ) org.springframework.integration.mail.SearchTerm[] [ NUMBER ] ; Flags org.springframework.integration.mail.Flags = new Flags ( ) ; org.springframework.integration.mail.Flags . add ( AbstractMailReceiver . DEFAULT_SI_USER_FLAG ) ; assertTrue ( ( ( FlagTerm ) org.springframework.integration.mail.NotTerm . getTerm ( ) ) . getFlags ( ) . contains ( org.springframework.integration.mail.Flags ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( ) ; org.springframework.integration.mail.ImapMailReceiver . setShouldMarkMessagesAsRead ( false ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . thenReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Folder ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.integration.mail.ImapMailReceiver . getClass ( ) , STRING , Flags .class ) ; java.lang.reflect.Method . void ( true ) ; Flags org.springframework.integration.mail.Flags = new Flags ( ) ; SearchTerm org.springframework.integration.mail.SearchTerm = ( SearchTerm ) java.lang.reflect.Method . java.lang.Object ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Flags ) ; assertTrue ( org.springframework.integration.mail.SearchTerm instanceof NotTerm ) ; }  <METHOD_END>
