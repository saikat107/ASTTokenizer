<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new Pop3MailReceiver ( ) ; org.springframework.integration.mail.AbstractMailReceiver . setShouldDeleteMessages ( true ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . thenReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; doAnswer ( invocation -> { DirectFieldAccessor accessor = new DirectFieldAccessor ( invocation . getMock ( ) ) ; int folderOpenMode = ( Integer ) accessor . getPropertyValue ( STRING ) ; if ( folderOpenMode != Folder . READ_WRITE ) { throw new IllegalArgumentException ( STRING ) ; } return null ; } ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; doAnswer ( invocation -> messages ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new Pop3MailReceiver ( ) ; org.springframework.integration.mail.AbstractMailReceiver . setShouldDeleteMessages ( false ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . thenReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; doAnswer ( invocation -> messages ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new Pop3MailReceiver ( STRING ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . thenReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; doAnswer ( invocation -> messages ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new Pop3MailReceiver ( ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . thenReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; doAnswer ( invocation -> messages ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; }  <METHOD_END>
