<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( java.lang.String , java.lang.Throwable ); this . java.util.Map<java.lang.Object,java.lang.Exception> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Exception> <> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable , java.util.Map<java.lang.Object,java.lang.Exception> < java.lang.Object , java.lang.Exception > java.util.Map<java.lang.Object,java.lang.Exception> ) { super( java.lang.String , java.lang.Throwable ); this . java.util.Map<java.lang.Object,java.lang.Exception> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Exception> <> ( java.util.Map<java.lang.Object,java.lang.Exception> ) ; this . java.lang.Exception[] = java.util.Map<java.lang.Object,java.lang.Exception> . java.util.Collection<java.lang.Exception> ( ) . java.lang.Exception[] ( new java.lang.Exception [ java.util.Map<java.lang.Object,java.lang.Exception> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.Object,java.lang.Exception> < java.lang.Object , java.lang.Exception > java.util.Map<java.lang.Object,java.lang.Exception> ) { this( null , null , java.util.Map<java.lang.Object,java.lang.Exception> ); }  <METHOD_END>
<METHOD_START> public final java.util.Map<java.lang.Object,java.lang.Exception> < java.lang.Object , java.lang.Exception > java.util.Map<java.lang.Object,java.lang.Exception> ( ) { return this . java.util.Map<java.lang.Object,java.lang.Exception> ; }  <METHOD_END>
<METHOD_START> public final java.lang.Exception [] java.lang.Exception[] ( ) { return ( this . java.lang.Exception[] != null ? this . java.lang.Exception[] : new java.lang.Exception [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( ObjectUtils . isEmpty ( this . java.lang.Exception[] ) ) { return super. getMessage ( ) ; } else { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.String java.lang.String = super. getMessage ( ) ; if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < this . java.lang.Exception[] . int ; int ++ ) { java.lang.Exception java.lang.Exception = this . java.lang.Exception[] [ int ] ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Exception . java.lang.String ( ) ) ; if ( int < this . java.lang.Exception[] . int - NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( ObjectUtils . isEmpty ( this . java.lang.Exception[] ) ) { return super. java.lang.String ( ) ; } else { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( super. java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.lang.Exception[] . int ) . java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < this . java.lang.Exception[] . int ; int ++ ) { java.lang.Exception java.lang.Exception = this . java.lang.Exception[] [ int ] ; java.lang.StringBuilder . java.lang.StringBuilder ( '\n' ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int + NUMBER ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Exception ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.PrintStream java.io.PrintStream ) { if ( ObjectUtils . isEmpty ( this . java.lang.Exception[] ) ) { super. printStackTrace ( java.io.PrintStream ) ; } else { java.io.PrintStream . void ( super. java.lang.String ( ) + STRING + this . java.lang.Exception[] . int + STRING ) ; for ( int int = NUMBER ; int < this . java.lang.Exception[] . int ; int ++ ) { java.lang.Exception java.lang.Exception = this . java.lang.Exception[] [ int ] ; java.io.PrintStream . void ( STRING + ( int + NUMBER ) + STRING ) ; java.lang.Exception . void ( java.io.PrintStream ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.PrintWriter java.io.PrintWriter ) { if ( ObjectUtils . isEmpty ( this . java.lang.Exception[] ) ) { super. printStackTrace ( java.io.PrintWriter ) ; } else { java.io.PrintWriter . void ( super. java.lang.String ( ) + STRING + this . java.lang.Exception[] . int + STRING ) ; for ( int int = NUMBER ; int < this . java.lang.Exception[] . int ; int ++ ) { java.lang.Exception java.lang.Exception = this . java.lang.Exception[] [ int ] ; java.io.PrintWriter . void ( STRING + ( int + NUMBER ) + STRING ) ; java.lang.Exception . void ( java.io.PrintWriter ) ; } } }  <METHOD_END>
