<METHOD_START> public void ( EntityInformation < T , ID > org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> , KeyValueOperations org.springframework.data.keyvalue.repository.support.KeyValueOperations ) { this( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> , org.springframework.data.keyvalue.repository.support.KeyValueOperations , org.springframework.data.keyvalue.repository.support.EntityPathResolver ); }  <METHOD_END>
<METHOD_START> public void ( EntityInformation < T , ID > org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> , KeyValueOperations org.springframework.data.keyvalue.repository.support.KeyValueOperations , EntityPathResolver org.springframework.data.keyvalue.repository.support.EntityPathResolver ) { super( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> , org.springframework.data.keyvalue.repository.support.KeyValueOperations ); Assert . notNull ( org.springframework.data.keyvalue.repository.support.EntityPathResolver , STRING ) ; this . org.springframework.data.keyvalue.repository.support.EntityPath<T> = org.springframework.data.keyvalue.repository.support.EntityPathResolver . createPath ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; this . org.springframework.data.keyvalue.repository.support.PathBuilder<T> = new PathBuilder < T > ( org.springframework.data.keyvalue.repository.support.EntityPath<T> . getType ( ) , org.springframework.data.keyvalue.repository.support.EntityPath<T> . getMetadata ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Predicate org.springframework.data.keyvalue.repository.support.Predicate ) { return org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> ( org.springframework.data.keyvalue.repository.support.Predicate ) . fetchOne ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( Predicate org.springframework.data.keyvalue.repository.support.Predicate ) { return org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> ( org.springframework.data.keyvalue.repository.support.Predicate ) . fetchResults ( ) . getResults ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( Predicate org.springframework.data.keyvalue.repository.support.Predicate , org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > ... org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] ) { AbstractCollQuery < T , ? > org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> = org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> ( org.springframework.data.keyvalue.repository.support.Predicate ) ; org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . orderBy ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] ) ; return org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . fetchResults ( ) . getResults ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( Predicate org.springframework.data.keyvalue.repository.support.Predicate , Sort org.springframework.data.keyvalue.repository.support.Sort ) { return java.lang.Iterable<T> ( org.springframework.data.keyvalue.repository.support.Predicate , toOrderSpecifier ( org.springframework.data.keyvalue.repository.support.Sort , org.springframework.data.keyvalue.repository.support.PathBuilder<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.keyvalue.repository.support.Page<T> < T > org.springframework.data.keyvalue.repository.support.Page<T> ( Predicate org.springframework.data.keyvalue.repository.support.Predicate , Pageable org.springframework.data.keyvalue.repository.support.Pageable ) { AbstractCollQuery < T , ? > org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> = org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> ( org.springframework.data.keyvalue.repository.support.Predicate ) ; if ( org.springframework.data.keyvalue.repository.support.Pageable != null ) { org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . offset ( org.springframework.data.keyvalue.repository.support.Pageable . getOffset ( ) ) ; org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . limit ( org.springframework.data.keyvalue.repository.support.Pageable . getPageSize ( ) ) ; if ( org.springframework.data.keyvalue.repository.support.Pageable . getSort ( ) != null ) { org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . orderBy ( toOrderSpecifier ( org.springframework.data.keyvalue.repository.support.Pageable . getSort ( ) , org.springframework.data.keyvalue.repository.support.PathBuilder<T> ) ) ; } } return new PageImpl < T > ( org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . fetchResults ( ) . getResults ( ) , org.springframework.data.keyvalue.repository.support.Pageable , long ( org.springframework.data.keyvalue.repository.support.Predicate ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?> < ? > ... org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] ) { if ( ObjectUtils . isEmpty ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] ) ) { return java.lang.Iterable<T> ( ) ; } AbstractCollQuery < T , ? > org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> = org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> ( null ) ; org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . orderBy ( org.springframework.data.keyvalue.repository.support.OrderSpecifier<?>[] ) ; return org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,> . fetchResults ( ) . getResults ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( Predicate org.springframework.data.keyvalue.repository.support.Predicate ) { return org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> ( org.springframework.data.keyvalue.repository.support.Predicate ) . fetchCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.keyvalue.repository.support.Predicate ) { return long ( org.springframework.data.keyvalue.repository.support.Predicate ) > NUMBER ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> < T , ? > org.springframework.data.keyvalue.repository.support.AbstractCollQuery<T,?> ( Predicate org.springframework.data.keyvalue.repository.support.Predicate ) { CollQuery < T > org.springframework.data.keyvalue.repository.support.CollQuery<T> = new CollQuery < T > ( ) ; org.springframework.data.keyvalue.repository.support.CollQuery<T> . from ( org.springframework.data.keyvalue.repository.support.PathBuilder<T> , java.lang.Iterable<T> ( ) ) ; return org.springframework.data.keyvalue.repository.support.Predicate != null ? org.springframework.data.keyvalue.repository.support.CollQuery<T> . where ( org.springframework.data.keyvalue.repository.support.Predicate ) : org.springframework.data.keyvalue.repository.support.CollQuery<T> ; }  <METHOD_END>
