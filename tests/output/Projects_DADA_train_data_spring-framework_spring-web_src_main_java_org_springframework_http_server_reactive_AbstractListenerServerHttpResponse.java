<METHOD_START> public void ( DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ) { super( org.springframework.http.server.reactive.DataBufferFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer> ) { return org.springframework.http.server.reactive.Mono<java.lang.Void> ( Mono . just ( org.springframework.http.server.reactive.Publisher<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>> ) { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { Processor < ? super Publisher < ? extends DataBuffer > , java.lang.Void > org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>,java.lang.Void> = org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>,java.lang.Void> ( ) ; return Mono . from ( subscriber -> { body . subscribe ( processor ) ; processor . subscribe ( subscriber ) ; } ) ; } return Mono . error ( new java.lang.IllegalStateException ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>,java.lang.Void> < ? super Publisher < ? extends DataBuffer > , java.lang.Void > org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>,java.lang.Void> ( )  <METHOD_END>
