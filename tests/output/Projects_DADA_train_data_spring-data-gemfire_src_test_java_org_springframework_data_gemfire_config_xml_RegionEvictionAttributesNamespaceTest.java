<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getMaximum ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . LOCAL_DESTROY , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; assertEquals ( LRUCapacityController . DEFAULT_MAXIMUM_ENTRIES , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getMaximum ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; try { org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getMaximum ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { assertEquals ( STRING , java.lang.UnsupportedOperationException . java.lang.String ( ) ) ; throw java.lang.UnsupportedOperationException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getMaximum ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; int int = ( java.lang.Boolean . boolean ( STRING ) ? NUMBER : NUMBER ) ; assertEquals ( int , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getMaximum ( ) ) ; }  <METHOD_END>
