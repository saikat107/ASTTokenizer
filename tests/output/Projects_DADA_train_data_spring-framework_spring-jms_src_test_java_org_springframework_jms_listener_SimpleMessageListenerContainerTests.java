<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.jms.listener.SimpleMessageListenerContainer = ( SimpleMessageListenerContainer ) org.springframework.jms.listener.AbstractMessageListenerContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jms.listener.AbstractMessageListenerContainer org.springframework.jms.listener.AbstractMessageListenerContainer ( ) { return new SimpleMessageListenerContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( STRING + STRING + STRING , org.springframework.jms.listener.SimpleMessageListenerContainer . isPubSubNoLocal ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.jms.listener.SimpleMessageListenerContainer . setConcurrentConsumers ( NUMBER ) ; org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.jms.listener.SimpleMessageListenerContainer . setConcurrentConsumers ( - NUMBER ) ; org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageConsumer org.springframework.jms.listener.MessageConsumer = mock ( MessageConsumer .class ) ; Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.MessageConsumer ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener ( ) ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setAutoStartup ( false ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; GenericApplicationContext org.springframework.jms.listener.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.jms.listener.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; org.springframework.jms.listener.GenericApplicationContext . refresh ( ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageConsumer org.springframework.jms.listener.MessageConsumer = mock ( MessageConsumer .class ) ; Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.MessageConsumer ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener ( ) ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; GenericApplicationContext org.springframework.jms.listener.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.jms.listener.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; org.springframework.jms.listener.GenericApplicationContext . refresh ( ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer = new org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ( ) ; final Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ) ; given ( org.springframework.jms.listener.Session . getTransacted ( ) ) . willReturn ( false ) ; given ( org.springframework.jms.listener.Session . getAcknowledgeMode ( ) ) . willReturn ( Session . AUTO_ACKNOWLEDGE ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; final ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new SessionAwareMessageListener < Message > ( ) { @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message , Session org.springframework.jms.listener.Session ) { try { assertSame ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Session ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.util.Set<java.lang.String> . boolean ( STRING + java.lang.Throwable ) ; } } } ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . start ( ) ; final Message org.springframework.jms.listener.Message = mock ( Message .class ) ; org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer . void ( org.springframework.jms.listener.Message ) ; if ( ! java.util.Set<java.lang.String> . boolean ( ) ) { fail ( java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) . java.lang.String ( ) ) ; } verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message , Session org.springframework.jms.listener.Session ) { try { assertSame ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Session ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.util.Set<java.lang.String> . boolean ( STRING + java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer = new org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ( ) ; final Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ) ; given ( org.springframework.jms.listener.Session . getTransacted ( ) ) . willReturn ( false ) ; given ( org.springframework.jms.listener.Session . getAcknowledgeMode ( ) ) . willReturn ( Session . AUTO_ACKNOWLEDGE ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; final ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; final org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener = new org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setTaskExecutor ( new TaskExecutor ( ) { @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean = true ; assertFalse ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean ) ; java.lang.Runnable . void ( ) ; assertTrue ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean ) ; } } ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . start ( ) ; final Message org.springframework.jms.listener.Message = mock ( Message .class ) ; org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer . void ( org.springframework.jms.listener.Message ) ; assertTrue ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean ) ; assertTrue ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean = true ; assertFalse ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean ) ; java.lang.Runnable . void ( ) ; assertTrue ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer = new org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ( ) ; Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ) ; given ( org.springframework.jms.listener.Session . getTransacted ( ) ) . willReturn ( false ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; final JMSException org.springframework.jms.listener.JMSException = new JMSException ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new SessionAwareMessageListener < Message > ( ) { @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message , Session org.springframework.jms.listener.Session ) throws org.springframework.jms.listener.JMSException { throw org.springframework.jms.listener.JMSException ; } } ) ; ExceptionListener org.springframework.jms.listener.ExceptionListener = mock ( ExceptionListener .class ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setExceptionListener ( org.springframework.jms.listener.ExceptionListener ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . start ( ) ; final Message org.springframework.jms.listener.Message = mock ( Message .class ) ; org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer . void ( org.springframework.jms.listener.Message ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; verify ( org.springframework.jms.listener.ExceptionListener ) . onException ( org.springframework.jms.listener.JMSException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message , Session org.springframework.jms.listener.Session ) throws org.springframework.jms.listener.JMSException { throw org.springframework.jms.listener.JMSException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer = new org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ( ) ; Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ) ; given ( org.springframework.jms.listener.Session . getTransacted ( ) ) . willReturn ( false ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; final java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( STRING ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new SessionAwareMessageListener < Message > ( ) { @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message , Session org.springframework.jms.listener.Session ) throws org.springframework.jms.listener.JMSException { throw java.lang.IllegalStateException ; } } ) ; ErrorHandler org.springframework.jms.listener.ErrorHandler = mock ( ErrorHandler .class ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setErrorHandler ( org.springframework.jms.listener.ErrorHandler ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . start ( ) ; Message org.springframework.jms.listener.Message = mock ( Message .class ) ; org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer . void ( org.springframework.jms.listener.Message ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; verify ( org.springframework.jms.listener.ErrorHandler ) . handleError ( java.lang.IllegalStateException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message , Session org.springframework.jms.listener.Session ) throws org.springframework.jms.listener.JMSException { throw java.lang.IllegalStateException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer = new org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ( ) ; Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ) ; given ( org.springframework.jms.listener.Session . getTransacted ( ) ) . willReturn ( false ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new MessageListener ( ) { @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message ) { throw new java.lang.UnsupportedOperationException ( ) ; } } ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . start ( ) ; final Message org.springframework.jms.listener.Message = mock ( Message .class ) ; org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer . void ( org.springframework.jms.listener.Message ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.jms.listener.SimpleMessageListenerContainer . setSessionTransacted ( true ) ; final org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer = new org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ( ) ; Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer ) ; given ( org.springframework.jms.listener.Session . getTransacted ( ) ) . willReturn ( true ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new MessageListener ( ) { @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message ) { throw new java.lang.UnsupportedOperationException ( ) ; } } ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . start ( ) ; final Message org.springframework.jms.listener.Message = mock ( Message .class ) ; org.springframework.jms.listener.SimpleMessageListenerContainerTests.SimpleMessageConsumer . void ( org.springframework.jms.listener.Message ) ; verify ( org.springframework.jms.listener.Session ) . rollback ( ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageConsumer org.springframework.jms.listener.MessageConsumer = mock ( MessageConsumer .class ) ; Session org.springframework.jms.listener.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.Session . createQueue ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.StubQueue ) ; given ( org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.StubQueue , null ) ) . willReturn ( org.springframework.jms.listener.MessageConsumer ) ; Connection org.springframework.jms.listener.Connection = mock ( Connection .class ) ; given ( org.springframework.jms.listener.Connection . createSession ( this . org.springframework.jms.listener.SimpleMessageListenerContainer . isSessionTransacted ( ) , this . org.springframework.jms.listener.SimpleMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ) . willReturn ( org.springframework.jms.listener.Session ) ; ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.listener.Connection ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setDestinationName ( java.lang.String ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . setMessageListener ( new org.springframework.jms.listener.SimpleMessageListenerContainerTests.TestMessageListener ( ) ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . start ( ) ; this . org.springframework.jms.listener.SimpleMessageListenerContainer . destroy ( ) ; verify ( org.springframework.jms.listener.MessageConsumer ) . close ( ) ; verify ( org.springframework.jms.listener.Session ) . close ( ) ; verify ( org.springframework.jms.listener.Connection ) . setExceptionListener ( this . org.springframework.jms.listener.SimpleMessageListenerContainer ) ; verify ( org.springframework.jms.listener.Connection ) . start ( ) ; verify ( org.springframework.jms.listener.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( Message org.springframework.jms.listener.Message ) throws org.springframework.jms.listener.JMSException { this . org.springframework.jms.listener.MessageListener . onMessage ( org.springframework.jms.listener.Message ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.listener.JMSException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.MessageListener org.springframework.jms.listener.MessageListener ( ) org.springframework.jms.listener.JMSException { return this . org.springframework.jms.listener.MessageListener ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageListener org.springframework.jms.listener.MessageListener ) throws org.springframework.jms.listener.JMSException { this . org.springframework.jms.listener.MessageListener = org.springframework.jms.listener.MessageListener ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.Message org.springframework.jms.listener.Message ( ) org.springframework.jms.listener.JMSException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.Message org.springframework.jms.listener.Message ( long long ) throws org.springframework.jms.listener.JMSException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.Message org.springframework.jms.listener.Message ( ) org.springframework.jms.listener.JMSException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.jms.listener.JMSException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
