<METHOD_START> public void ( ThreadPoolTaskScheduler org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler ) { this . org.springframework.web.socket.config.annotation.TaskScheduler = org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String ... java.lang.String[] ) { ServletWebSocketHandlerRegistration org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration = new ServletWebSocketHandlerRegistration ( this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String[] ) ; this . java.util.List<org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration> . add ( org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration ) ; return org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( UrlPathHelper org.springframework.web.socket.config.annotation.UrlPathHelper ) { this . org.springframework.web.socket.config.annotation.UrlPathHelper = org.springframework.web.socket.config.annotation.UrlPathHelper ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.UrlPathHelper org.springframework.web.socket.config.annotation.UrlPathHelper ( ) { return this . org.springframework.web.socket.config.annotation.UrlPathHelper ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.AbstractHandlerMapping org.springframework.web.socket.config.annotation.AbstractHandlerMapping ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; for ( ServletWebSocketHandlerRegistration org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration : this . java.util.List<org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration> ) { MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration . getMappings ( ) ; for ( HttpRequestHandler org.springframework.web.socket.config.annotation.HttpRequestHandler : org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . get ( org.springframework.web.socket.config.annotation.HttpRequestHandler ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.web.socket.config.annotation.HttpRequestHandler ) ; } } } WebSocketHandlerMapping org.springframework.web.socket.config.annotation.WebSocketHandlerMapping = new WebSocketHandlerMapping ( ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerMapping . setUrlMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerMapping . setOrder ( this . int ) ; if ( this . org.springframework.web.socket.config.annotation.UrlPathHelper != null ) { org.springframework.web.socket.config.annotation.WebSocketHandlerMapping . setUrlPathHelper ( this . org.springframework.web.socket.config.annotation.UrlPathHelper ) ; } return org.springframework.web.socket.config.annotation.WebSocketHandlerMapping ; }  <METHOD_END>
