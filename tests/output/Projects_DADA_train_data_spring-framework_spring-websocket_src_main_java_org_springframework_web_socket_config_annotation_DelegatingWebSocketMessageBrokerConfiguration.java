<METHOD_START> @ Autowired ( required = false ) public void void ( java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> < WebSocketMessageBrokerConfigurer > java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) ) { this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> . addAll ( java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( StompEndpointRegistry org.springframework.web.socket.config.annotation.StompEndpointRegistry ) { for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . registerStompEndpoints ( org.springframework.web.socket.config.annotation.StompEndpointRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketTransportRegistration org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ) { for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . configureWebSocketTransport ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ChannelRegistration org.springframework.web.socket.config.annotation.ChannelRegistration ) { for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . configureClientInboundChannel ( org.springframework.web.socket.config.annotation.ChannelRegistration ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ChannelRegistration org.springframework.web.socket.config.annotation.ChannelRegistration ) { for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . configureClientOutboundChannel ( org.springframework.web.socket.config.annotation.ChannelRegistration ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.socket.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.socket.config.annotation.HandlerMethodArgumentResolver> ) { for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . addArgumentResolvers ( java.util.List<org.springframework.web.socket.config.annotation.HandlerMethodArgumentResolver> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.socket.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.socket.config.annotation.HandlerMethodReturnValueHandler> ) { for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . addReturnValueHandlers ( java.util.List<org.springframework.web.socket.config.annotation.HandlerMethodReturnValueHandler> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.List<org.springframework.web.socket.config.annotation.MessageConverter> < MessageConverter > java.util.List<org.springframework.web.socket.config.annotation.MessageConverter> ) { boolean boolean = true ; for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { if ( ! org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . configureMessageConverters ( java.util.List<org.springframework.web.socket.config.annotation.MessageConverter> ) ) { boolean = false ; } } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MessageBrokerRegistry org.springframework.web.socket.config.annotation.MessageBrokerRegistry ) { for ( WebSocketMessageBrokerConfigurer org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer : this . java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer> ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer . configureMessageBroker ( org.springframework.web.socket.config.annotation.MessageBrokerRegistry ) ; } }  <METHOD_END>
