<METHOD_START> @ Test public void void ( ) { long long = java.lang.System . long ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertTrue ( ( java.lang.System . long ( ) - long ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageBuilder < java.lang.String > org.springframework.integration.config.xml.MessageBuilder<java.lang.String> = MessageBuilder . withPayload ( STRING ) ; org.springframework.integration.config.xml.MessageBuilder<java.lang.String> . setHeader ( STRING , NUMBER ) ; long long = java.lang.System . long ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.MessageBuilder<java.lang.String> . build ( ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertTrue ( ( java.lang.System . long ( ) - long ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { long long = java.lang.System . long ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; assertTrue ( ( ( java.lang.System . long ( ) - long ) >= NUMBER ) && ( ( java.lang.System . long ( ) - long ) < NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.lang.System . long ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertTrue ( ( java.lang.System . long ( ) - long ) >= NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.lang.System . long ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertTrue ( ( java.lang.System . long ( ) - long ) >= NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.Thread . void ( NUMBER ) ; return java.lang.String ; }  <METHOD_END>
