<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; this . boolean = ClassUtils . isPresent ( STRING , java.lang.ClassLoader ) && ClassUtils . isPresent ( STRING , java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.integration.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; if ( org.springframework.integration.config.AnnotationMetadata != null ) { void ( org.springframework.integration.config.AnnotationMetadata , org.springframework.integration.config.BeanDefinitionRegistry ) ; } void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; IntegrationConfigUtils . registerRoleControllerDefinitionIfNecessary ( org.springframework.integration.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( ! org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . CHANNEL_INITIALIZER_BEAN_NAME ) ) { java.lang.String java.lang.String = IntegrationProperties . getExpressionFor ( IntegrationProperties . CHANNELS_AUTOCREATE ) ; BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ChannelInitializer .class ) . addPropertyValue ( STRING , java.lang.String ) ; BeanDefinitionHolder org.springframework.integration.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) , IntegrationContextUtils . CHANNEL_INITIALIZER_BEAN_NAME ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.BeanDefinitionHolder , org.springframework.integration.config.BeanDefinitionRegistry ) ; } if ( ! org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . AUTO_CREATE_CHANNEL_CANDIDATES_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ChannelInitializer . ChannelInitializer .class ) ; org.springframework.integration.config.BeanDefinitionBuilder . addConstructorArgValue ( new ManagedSet < java.lang.String > ( ) ) ; org.springframework.integration.config.BeanDefinitionBuilder . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; BeanDefinitionHolder org.springframework.integration.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) , IntegrationContextUtils . AUTO_CREATE_CHANNEL_CANDIDATES_BEAN_NAME ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.BeanDefinitionHolder , org.springframework.integration.config.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { boolean boolean = false ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( IntegrationContextUtils . INTEGRATION_GLOBAL_PROPERTIES_BEAN_NAME ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( IntegrationContextUtils . INTEGRATION_GLOBAL_PROPERTIES_BEAN_NAME ) ; } if ( ! boolean ) { ResourcePatternResolver org.springframework.integration.config.ResourcePatternResolver = new PathMatchingResourcePatternResolver ( this . java.lang.ClassLoader ) ; try { Resource [] org.springframework.integration.config.Resource[] = org.springframework.integration.config.ResourcePatternResolver . getResources ( STRING ) ; Resource [] org.springframework.integration.config.Resource[] = org.springframework.integration.config.ResourcePatternResolver . getResources ( STRING ) ; java.util.List<org.springframework.integration.config.Resource> < Resource > java.util.List<org.springframework.integration.config.Resource> = new java.util.LinkedList<org.springframework.integration.config.Resource> < Resource > ( java.util.Arrays . java.util.List ( org.springframework.integration.config.Resource[] ) ) ; java.util.List<org.springframework.integration.config.Resource> . addAll ( java.util.Arrays . java.util.List ( org.springframework.integration.config.Resource[] ) ) ; BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( PropertiesFactoryBean .class ) . addPropertyValue ( STRING , java.util.List<org.springframework.integration.config.Resource> ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_GLOBAL_PROPERTIES_BEAN_NAME , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.integration.config.Log . warn ( STRING , java.io.IOException ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( ! org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( IntegrationEvaluationContextFactoryBean .class ) ; org.springframework.integration.config.BeanDefinitionBuilder . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; BeanDefinitionHolder org.springframework.integration.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) , IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.BeanDefinitionHolder , org.springframework.integration.config.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { int int = java.lang.System . int ( org.springframework.integration.config.BeanDefinitionRegistry ) ; java.lang.String java.lang.String = STRING ; boolean boolean = false ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( java.lang.String ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( java.lang.String ) ; } if ( ! boolean && ! java.util.Set<java.lang.Integer> . boolean ( int ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = null ; try { java.lang.Class<?> = ClassUtils . forName ( STRING , this . java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { org.springframework.integration.config.Log . debug ( STRING + STRING ) ; } if ( java.lang.Class<> != null ) { try { ClassUtils . forName ( STRING , this . java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { java.lang.Class<?> = null ; org.springframework.integration.config.Log . warn ( STRING + STRING + STRING + STRING , java.lang.ClassNotFoundException ) ; } } if ( java.lang.Class<> != null ) { IntegrationConfigUtils . registerSpelFunctionBean ( org.springframework.integration.config.BeanDefinitionRegistry , java.lang.String , IntegrationConfigUtils . BASE_PACKAGE + STRING , STRING ) ; } } boolean = false ; java.lang.String java.lang.String = STRING ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( java.lang.String ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( java.lang.String ) ; } if ( ! boolean && ! java.util.Set<java.lang.Integer> . boolean ( int ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = null ; try { java.lang.Class<?> = ClassUtils . forName ( IntegrationConfigUtils . BASE_PACKAGE + STRING , this . java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { org.springframework.integration.config.Log . debug ( STRING + STRING ) ; } if ( java.lang.Class<> != null ) { IntegrationConfigUtils . registerSpelFunctionBean ( org.springframework.integration.config.BeanDefinitionRegistry , java.lang.String , IntegrationConfigUtils . BASE_PACKAGE + STRING , STRING ) ; } } boolean = false ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( IntegrationContextUtils . TO_STRING_FRIENDLY_JSON_NODE_TO_STRING_CONVERTER_BEAN_NAME ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( IntegrationContextUtils . TO_STRING_FRIENDLY_JSON_NODE_TO_STRING_CONVERTER_BEAN_NAME ) ; } if ( ! boolean && ! java.util.Set<java.lang.Integer> . boolean ( int ) && this . boolean ) { org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . TO_STRING_FRIENDLY_JSON_NODE_TO_STRING_CONVERTER_BEAN_NAME , BeanDefinitionBuilder . genericBeanDefinition ( IntegrationConfigUtils . BASE_PACKAGE + STRING ) . getBeanDefinition ( ) ) ; org.springframework.integration.config.IntegrationConverterInitializer . registerConverter ( org.springframework.integration.config.BeanDefinitionRegistry , new RuntimeBeanReference ( IntegrationContextUtils . TO_STRING_FRIENDLY_JSON_NODE_TO_STRING_CONVERTER_BEAN_NAME ) ) ; } java.util.Set<java.lang.Integer> . boolean ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { boolean boolean = false ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( IntegrationContextUtils . DEFAULT_CONFIGURING_POSTPROCESSOR_BEAN_NAME ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( IntegrationContextUtils . DEFAULT_CONFIGURING_POSTPROCESSOR_BEAN_NAME ) ; } if ( ! boolean ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ; BeanDefinitionHolder org.springframework.integration.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) , IntegrationContextUtils . DEFAULT_CONFIGURING_POSTPROCESSOR_BEAN_NAME ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.BeanDefinitionHolder , org.springframework.integration.config.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { boolean boolean = false ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( IntegrationContextUtils . INTEGRATION_HEADER_CHANNEL_REGISTRY_BEAN_NAME ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( IntegrationContextUtils . INTEGRATION_HEADER_CHANNEL_REGISTRY_BEAN_NAME ) ; } if ( ! boolean ) { if ( org.springframework.integration.config.Log . isInfoEnabled ( ) ) { org.springframework.integration.config.Log . info ( STRING + IntegrationContextUtils . INTEGRATION_HEADER_CHANNEL_REGISTRY_BEAN_NAME + STRING + STRING ) ; } BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DefaultHeaderChannelRegistry .class ) ; BeanDefinitionHolder org.springframework.integration.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) , IntegrationContextUtils . INTEGRATION_HEADER_CHANNEL_REGISTRY_BEAN_NAME ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.BeanDefinitionHolder , org.springframework.integration.config.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( ! org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . GLOBAL_CHANNEL_INTERCEPTOR_PROCESSOR_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( GlobalChannelInterceptorProcessor .class ) . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . GLOBAL_CHANNEL_INTERCEPTOR_PROCESSOR_BEAN_NAME , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.integration.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( ! org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . MESSAGING_ANNOTATION_POSTPROCESSOR_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MessagingAnnotationPostProcessor .class ) . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . MESSAGING_ANNOTATION_POSTPROCESSOR_NAME , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } new PublisherRegistrar ( ) . registerBeanDefinitions ( org.springframework.integration.config.AnnotationMetadata , org.springframework.integration.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( ! org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . INTEGRATION_CONFIGURATION_POST_PROCESSOR_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( IntegrationConfigurationBeanFactoryPostProcessor .class ) . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_CONFIGURATION_POST_PROCESSOR_BEAN_NAME , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { boolean boolean = false ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( IntegrationContextUtils . INTEGRATION_DATATYPE_CHANNEL_MESSAGE_CONVERTER_BEAN_NAME ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( IntegrationContextUtils . INTEGRATION_DATATYPE_CHANNEL_MESSAGE_CONVERTER_BEAN_NAME ) ; } if ( ! boolean ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DefaultDatatypeChannelMessageConverter .class ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_DATATYPE_CHANNEL_MESSAGE_CONVERTER_BEAN_NAME , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( ! org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . ARGUMENT_RESOLVER_MESSAGE_CONVERTER_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ConfigurableCompositeMessageConverter .class ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . ARGUMENT_RESOLVER_MESSAGE_CONVERTER_BEAN_NAME , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { boolean boolean = false ; if ( org.springframework.integration.config.BeanDefinitionRegistry instanceof ListableBeanFactory ) { boolean = ( ( ListableBeanFactory ) org.springframework.integration.config.BeanDefinitionRegistry ) . containsBean ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME ) ; } else { boolean = org.springframework.integration.config.BeanDefinitionRegistry . isBeanNameInUse ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME ) ; } if ( ! boolean ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DefaultMessageBuilderFactory .class ) . addPropertyValue ( STRING , IntegrationProperties . getExpressionFor ( IntegrationProperties . READ_ONLY_HEADERS ) ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } }  <METHOD_END>
