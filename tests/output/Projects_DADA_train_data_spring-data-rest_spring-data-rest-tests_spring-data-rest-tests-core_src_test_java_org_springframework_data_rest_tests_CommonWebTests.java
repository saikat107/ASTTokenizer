<METHOD_START> protected abstract java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResultActions org.springframework.data.rest.tests.ResultActions = mvc . perform ( get ( STRING ) . accept ( TestMvcClient . DEFAULT_MEDIA_TYPE ) ) . andExpect ( status ( ) . isOk ( ) ) ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ( ) ) { org.springframework.data.rest.tests.ResultActions . andExpect ( client . hasLinkWithRel ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = client . request ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ( ) ) { Link org.springframework.data.rest.tests.Link = client . assertHasLinkWithRel ( java.lang.String , org.springframework.data.rest.tests.MockHttpServletResponse ) ; client . follow ( org.springframework.data.rest.tests.Link ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) ; Link org.springframework.data.rest.tests.Link = client . discoverUnique ( org.springframework.data.rest.tests.Link , STRING ) ; client . follow ( org.springframework.data.rest.tests.Link ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) ; client . follow ( org.springframework.data.rest.tests.Link , RestMediaTypes . SCHEMA_JSON ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) ; client . follow ( org.springframework.data.rest.tests.Link , RestMediaTypes . ALPS_JSON ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( MediaTypes . HAL_JSON ) ) . andExpect ( jsonPath ( STRING , notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( MediaType . APPLICATION_JSON ) ) . andExpect ( jsonPath ( STRING , notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = client . request ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ( ) ) { Link org.springframework.data.rest.tests.Link = client . assertHasLinkWithRel ( java.lang.String , org.springframework.data.rest.tests.MockHttpServletResponse ) ; java.lang.String java.lang.String = client . request ( org.springframework.data.rest.tests.Link ) . getContentAsString ( ) ; Link org.springframework.data.rest.tests.Link = client . getDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinkWithRel ( STRING , java.lang.String ) ; if ( org.springframework.data.rest.tests.Link != null ) { client . follow ( org.springframework.data.rest.tests.Link ) . andExpect ( client . hasLinkWithRel ( STRING ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = getPayloadToPost ( ) ; assumeFalse ( java.util.Map<java.lang.String,java.lang.String> . boolean ( ) ) ; MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = client . request ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ( ) ) { java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { Link org.springframework.data.rest.tests.Link = client . assertHasLinkWithRel ( java.lang.String , org.springframework.data.rest.tests.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ; MockHttpServletRequestBuilder org.springframework.data.rest.tests.MockHttpServletRequestBuilder = post ( java.lang.String ) . content ( java.lang.String ) . contentType ( MediaType . APPLICATION_JSON ) ; mvc . perform ( org.springframework.data.rest.tests.MockHttpServletRequestBuilder ) . andExpect ( status ( ) . isCreated ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = client . request ( STRING ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : getRootAndLinkedResources ( ) . entrySet ( ) ) { Link org.springframework.data.rest.tests.Link = client . assertHasLinkWithRel ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , org.springframework.data.rest.tests.MockHttpServletResponse ) ; MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = client . request ( org.springframework.data.rest.tests.Link ) ; for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , java.lang.String ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; JSONArray org.springframework.data.rest.tests.JSONArray = JsonPath . read ( java.lang.String , java.lang.String ) ; for ( java.lang.Object java.lang.Object : org.springframework.data.rest.tests.JSONArray ) { client . follow ( java.lang.Object . java.lang.String ( ) ) . andExpect ( status ( ) . isOk ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.data.rest.tests.MediaType = MediaType . valueOf ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = client . request ( STRING ) ; Link org.springframework.data.rest.tests.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.tests.MockHttpServletResponse ) ; mvc . perform ( get ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ) . accept ( org.springframework.data.rest.tests.MediaType ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( org.springframework.data.rest.tests.MediaType ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ( ) ) { Link org.springframework.data.rest.tests.Link = client . discoverUnique ( java.lang.String ) ; MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = mvc . perform ( head ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ) ) . andExpect ( status ( ) . isNoContent ( ) ) . andReturn ( ) . getResponse ( ) ; Links org.springframework.data.rest.tests.Links = Links . valueOf ( org.springframework.data.rest.tests.MockHttpServletResponse . getHeader ( STRING ) ) ; assertThat ( org.springframework.data.rest.tests.Links . hasLink ( Link . REL_SELF ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.tests.Links . hasLink ( STRING ) ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.Iterable<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ; java.lang.String java.lang.String = client . discoverUnique ( java.lang.String ) . expand ( ) . getHref ( ) . concat ( STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.Integer java.lang.Integer = null ; do { java.lang.String = java.lang.String . java.lang.String ( java.lang.String ) ; java.lang.Integer = mvc . perform ( get ( java.net.URI . java.net.URI ( java.lang.String ) ) ) . andReturn ( ) . getResponse ( ) . getStatus ( ) ; } while ( java.lang.Integer != HttpStatus . NOT_FOUND . value ( ) ); mvc . perform ( patch ( java.net.URI . java.net.URI ( java.lang.String ) ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ( ) ) { Link org.springframework.data.rest.tests.Link = client . discoverUnique ( java.lang.String ) ; mvc . perform ( get ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ) . accept ( MediaType . valueOf ( STRING ) ) ) . andExpect ( status ( ) . isNotAcceptable ( ) ) ; } }  <METHOD_END>
