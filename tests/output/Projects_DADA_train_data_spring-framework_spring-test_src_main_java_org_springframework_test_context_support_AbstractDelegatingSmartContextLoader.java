<METHOD_START> protected abstract org.springframework.test.context.support.SmartContextLoader org.springframework.test.context.support.SmartContextLoader ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.test.context.support.SmartContextLoader org.springframework.test.context.support.SmartContextLoader ( )  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( SmartContextLoader org.springframework.test.context.support.SmartContextLoader ) { return org.springframework.test.context.support.SmartContextLoader . getClass ( ) . getSimpleName ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( SmartContextLoader org.springframework.test.context.support.SmartContextLoader , ContextConfigurationAttributes org.springframework.test.context.support.ContextConfigurationAttributes ) { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String ( org.springframework.test.context.support.SmartContextLoader ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ) ; } org.springframework.test.context.support.SmartContextLoader . processContextConfiguration ( org.springframework.test.context.support.ContextConfigurationAttributes ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.test.context.support.ApplicationContext org.springframework.test.context.support.ApplicationContext ( SmartContextLoader org.springframework.test.context.support.SmartContextLoader , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration )			throws java.lang.Exception { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String ( org.springframework.test.context.support.SmartContextLoader ) , org.springframework.test.context.support.MergedContextConfiguration ) ) ; } return org.springframework.test.context.support.SmartContextLoader . loadContext ( org.springframework.test.context.support.MergedContextConfiguration ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( SmartContextLoader org.springframework.test.context.support.SmartContextLoader , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) { if ( org.springframework.test.context.support.SmartContextLoader == org.springframework.test.context.support.SmartContextLoader ( ) ) { return org.springframework.test.context.support.MergedContextConfiguration . hasClasses ( ) && ! org.springframework.test.context.support.MergedContextConfiguration . hasLocations ( ) ; } else { return org.springframework.test.context.support.MergedContextConfiguration . hasLocations ( ) && ! org.springframework.test.context.support.MergedContextConfiguration . hasClasses ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final ContextConfigurationAttributes org.springframework.test.context.support.ContextConfigurationAttributes ) { Assert . notNull ( org.springframework.test.context.support.ContextConfigurationAttributes , STRING ) ; Assert . isTrue ( ! ( org.springframework.test.context.support.ContextConfigurationAttributes . hasLocations ( ) && org.springframework.test.context.support.ContextConfigurationAttributes . hasClasses ( ) ) , ( ) String . format ( STRING + STRING , configAttributes ) ) ; if ( org.springframework.test.context.support.ContextConfigurationAttributes . hasLocations ( ) ) { void ( org.springframework.test.context.support.SmartContextLoader ( ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ; } else if ( org.springframework.test.context.support.ContextConfigurationAttributes . hasClasses ( ) ) { void ( org.springframework.test.context.support.SmartContextLoader ( ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ; } else { void ( org.springframework.test.context.support.SmartContextLoader ( ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ; boolean boolean = org.springframework.test.context.support.ContextConfigurationAttributes . hasLocations ( ) ; if ( boolean ) { if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING , java.lang.String ( org.springframework.test.context.support.SmartContextLoader ( ) ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ) ; } } Assert . state ( ! org.springframework.test.context.support.ContextConfigurationAttributes . hasClasses ( ) , ( ) String . format ( STRING , name ( getXmlLoader ( ) ) , configAttributes ) ) ; void ( org.springframework.test.context.support.SmartContextLoader ( ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ; if ( org.springframework.test.context.support.ContextConfigurationAttributes . hasClasses ( ) ) { if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING , java.lang.String ( org.springframework.test.context.support.SmartContextLoader ( ) ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ) ; } } Assert . state ( boolean || ! org.springframework.test.context.support.ContextConfigurationAttributes . hasLocations ( ) , ( ) String . format ( STRING , name ( getAnnotationConfigLoader ( ) ) , configAttributes ) ) ; if ( org.springframework.test.context.support.ContextConfigurationAttributes . hasLocations ( ) && org.springframework.test.context.support.ContextConfigurationAttributes . hasClasses ( ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , org.springframework.test.context.support.ContextConfigurationAttributes ) ; org.springframework.test.context.support.Log . error ( java.lang.String ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.context.support.ApplicationContext org.springframework.test.context.support.ApplicationContext ( MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) throws java.lang.Exception { Assert . notNull ( org.springframework.test.context.support.MergedContextConfiguration , STRING ) ; java.util.List<org.springframework.test.context.support.SmartContextLoader> < SmartContextLoader > java.util.List<org.springframework.test.context.support.SmartContextLoader> = java.util.Arrays . java.util.List ( org.springframework.test.context.support.SmartContextLoader ( ) , org.springframework.test.context.support.SmartContextLoader ( ) ) ; Assert . state ( ! ( org.springframework.test.context.support.MergedContextConfiguration . hasLocations ( ) && org.springframework.test.context.support.MergedContextConfiguration . hasClasses ( ) ) , ( ) String . format ( STRING + STRING , name ( getXmlLoader ( ) ) , name ( getAnnotationConfigLoader ( ) ) , mergedConfig ) ) ; for ( SmartContextLoader org.springframework.test.context.support.SmartContextLoader : java.util.List<org.springframework.test.context.support.SmartContextLoader> ) { if ( boolean ( org.springframework.test.context.support.SmartContextLoader , org.springframework.test.context.support.MergedContextConfiguration ) ) { return org.springframework.test.context.support.ApplicationContext ( org.springframework.test.context.support.SmartContextLoader , org.springframework.test.context.support.MergedContextConfiguration ) ; } } if ( ! org.springframework.test.context.support.MergedContextConfiguration . getContextInitializerClasses ( ) . isEmpty ( ) || ! org.springframework.test.context.support.MergedContextConfiguration . getContextCustomizers ( ) . isEmpty ( ) ) { return org.springframework.test.context.support.ApplicationContext ( org.springframework.test.context.support.SmartContextLoader ( ) , org.springframework.test.context.support.MergedContextConfiguration ) ; } throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.String ( org.springframework.test.context.support.SmartContextLoader ( ) ) , java.lang.String ( org.springframework.test.context.support.SmartContextLoader ( ) ) , org.springframework.test.context.support.MergedContextConfiguration ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { throw new java.lang.UnsupportedOperationException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.test.context.support.ApplicationContext org.springframework.test.context.support.ApplicationContext ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { throw new java.lang.UnsupportedOperationException ( STRING + STRING ) ; }  <METHOD_END>
