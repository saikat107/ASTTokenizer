<METHOD_START> public void ( MongoConverter org.springframework.data.mongodb.core.convert.MongoConverter ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoConverter , STRING ) ; this . org.springframework.data.mongodb.core.convert.ConversionService = org.springframework.data.mongodb.core.convert.MongoConverter . getConversionService ( ) ; this . org.springframework.data.mongodb.core.convert.MongoConverter = org.springframework.data.mongodb.core.convert.MongoConverter ; this . org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MongoConverter . getMappingContext ( ) ; this . org.springframework.data.mongodb.core.convert.MongoExampleMapper = new MongoExampleMapper ( org.springframework.data.mongodb.core.convert.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Bson org.springframework.data.mongodb.core.convert.Bson , java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> ) { return org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Bson , java.util.Optional<> . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Bson org.springframework.data.mongodb.core.convert.Bson , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { if ( boolean ( org.springframework.data.mongodb.core.convert.Bson ) ) { return org.springframework.data.mongodb.core.convert.Document ( new org.springframework.data.mongodb.core.convert.QueryMapper.Keyword ( org.springframework.data.mongodb.core.convert.Bson ) , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; } Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; for ( java.lang.String java.lang.String : BsonUtils . asMap ( org.springframework.data.mongodb.core.convert.Bson ) . keySet ( ) ) { if ( Query . isRestrictedTypeKey ( java.lang.String ) ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > ) BsonUtils . get ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) ; this . org.springframework.data.mongodb.core.convert.MongoConverter . getTypeMapper ( ) . writeTypeRestrictions ( org.springframework.data.mongodb.core.convert.Document , java.util.Set<java.lang.Class<?>> ) ; continue; } if ( boolean ( java.lang.String ) ) { org.springframework.data.mongodb.core.convert.Document . putAll ( org.springframework.data.mongodb.core.convert.Document ( new org.springframework.data.mongodb.core.convert.QueryMapper.Keyword ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ) ; continue; } try { org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field = org.springframework.data.mongodb.core.convert.QueryMapper.Field ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , java.lang.String , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) ; java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = java.util.Map.Entry<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.QueryMapper.Field , BsonUtils . get ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) ) ; org.springframework.data.mongodb.core.convert.Document . put ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } catch ( InvalidPersistentPropertyPath org.springframework.data.mongodb.core.convert.InvalidPersistentPropertyPath ) { if ( ! ( BsonUtils . get ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) instanceof Document ) ) { throw org.springframework.data.mongodb.core.convert.InvalidPersistentPropertyPath ; } org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , BsonUtils . get ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) ) ; } } return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Document org.springframework.data.mongodb.core.convert.Document , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { if ( org.springframework.data.mongodb.core.convert.Document == null ) { return null ; } Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; void ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping ) ; return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Document org.springframework.data.mongodb.core.convert.Document , java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> ) { return org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Document , java.util.Optional<> . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Document org.springframework.data.mongodb.core.convert.Document , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Document != null ? org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) : new Document ( ) ; void ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping ) ; return org.springframework.data.mongodb.core.convert.Document . keySet ( ) . isEmpty ( ) ? null : org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( Document org.springframework.data.mongodb.core.convert.Document , java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> ) { return org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Document , java.util.Optional<> . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Document org.springframework.data.mongodb.core.convert.Document , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping ) { if ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> == null || org.springframework.data.mongodb.core.convert.Document == null ) { return; } if ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . hasTextScoreProperty ( ) && ! org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . boolean ( org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping ) ) { MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getTextScoreProperty ( ) ; if ( org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . boolean ( org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping ) || ( org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping . boolean ( org.springframework.data.mongodb.core.convert.QueryMapper.MetaMapping ) && org.springframework.data.mongodb.core.convert.Document . containsKey ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getFieldName ( ) ) ) ) { org.springframework.data.mongodb.core.convert.Document . putAll ( org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { return new Document ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getFieldName ( ) , org.springframework.data.mongodb.core.convert.Document ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field , java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.QueryMapper.Field . java.lang.String ( ) ; java.lang.Object java.lang.Object ; if ( boolean ( java.lang.Object ) && ! org.springframework.data.mongodb.core.convert.QueryMapper.Field . boolean ( ) ) { org.springframework.data.mongodb.core.convert.QueryMapper.Keyword org.springframework.data.mongodb.core.convert.QueryMapper.Keyword = new org.springframework.data.mongodb.core.convert.QueryMapper.Keyword ( ( Document ) java.lang.Object ) ; java.lang.Object = org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.QueryMapper.Field , org.springframework.data.mongodb.core.convert.QueryMapper.Keyword ) ; } else { java.lang.Object = java.lang.Object ( org.springframework.data.mongodb.core.convert.QueryMapper.Field , java.lang.Object ) ; } return java.util.Map.Entry<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , java.lang.String java.lang.String , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { return org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> == null ? new org.springframework.data.mongodb.core.convert.QueryMapper.Field ( java.lang.String ) : new org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField ( java.lang.String , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword org.springframework.data.mongodb.core.convert.QueryMapper.Keyword , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { if ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . boolean ( ) || ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . boolean ( ) && ! org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . boolean ( ) ) ) { java.lang.Iterable<?> < ? > java.lang.Iterable<?> = org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . java.lang.Iterable<?> ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ) { java.util.List<java.lang.Object> . boolean ( boolean ( java.lang.Object ) ? org.springframework.data.mongodb.core.convert.Document ( ( Document ) java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) : java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ) ; } return new Document ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . java.lang.String ( ) , java.util.List<java.lang.Object> ) ; } if ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . boolean ( ) ) { return org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword .< Example < ? > > org.springframework.data.mongodb.core.convert.Example<?> ( ) , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; } return new Document ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . java.lang.String ( ) , java.lang.Object ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . java.lang.Object ( ) , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field , org.springframework.data.mongodb.core.convert.QueryMapper.Keyword org.springframework.data.mongodb.core.convert.QueryMapper.Keyword ) { boolean boolean = org.springframework.data.mongodb.core.convert.QueryMapper.Field . boolean ( ) && ! org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . boolean ( ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . java.lang.Object ( ) ; java.lang.Object java.lang.Object = boolean ? java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.QueryMapper.Field ) : java.lang.Object ( org.springframework.data.mongodb.core.convert.QueryMapper.Field . org.springframework.data.mongodb.core.convert.QueryMapper.Field ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . java.lang.String ( ) ) , java.lang.Object ) ; return new Document ( org.springframework.data.mongodb.core.convert.QueryMapper.Keyword . java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field , java.lang.Object java.lang.Object ) { if ( org.springframework.data.mongodb.core.convert.QueryMapper.Field . boolean ( ) ) { if ( boolean ( java.lang.Object ) ) { DBObject org.springframework.data.mongodb.core.convert.DBObject = ( DBObject ) java.lang.Object ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( org.springframework.data.mongodb.core.convert.DBObject . toMap ( ) ) ; if ( org.springframework.data.mongodb.core.convert.DBObject . containsField ( STRING ) || org.springframework.data.mongodb.core.convert.DBObject . containsField ( STRING ) ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.DBObject . containsField ( STRING ) ? STRING : STRING ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) org.springframework.data.mongodb.core.convert.DBObject . get ( java.lang.String ) ) { java.util.List<java.lang.Object> . boolean ( java.util.Optional<java.lang.Object> ( java.lang.Object ) . java.lang.Object ( ) ) ; } org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , java.util.List<java.lang.Object> ) ; } else if ( org.springframework.data.mongodb.core.convert.DBObject . containsField ( STRING ) ) { org.springframework.data.mongodb.core.convert.Document . put ( STRING , java.util.Optional<java.lang.Object> ( org.springframework.data.mongodb.core.convert.DBObject . get ( STRING ) ) . get ( ) ) ; } else { return org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Document , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; } return org.springframework.data.mongodb.core.convert.Document ; } else if ( boolean ( java.lang.Object ) ) { Document org.springframework.data.mongodb.core.convert.Document = ( Document ) java.lang.Object ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( org.springframework.data.mongodb.core.convert.Document ) ; if ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) || org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) ? STRING : STRING ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String ) ) { java.util.List<java.lang.Object> . boolean ( java.util.Optional<java.lang.Object> ( java.lang.Object ) . java.lang.Object ( null ) ) ; } org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , java.util.List<java.lang.Object> ) ; } else if ( org.springframework.data.mongodb.core.convert.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.convert.Document . put ( STRING , java.util.Optional<java.lang.Object> ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ) . orElse ( null ) ) ; } else { return org.springframework.data.mongodb.core.convert.Document ( org.springframework.data.mongodb.core.convert.Document , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; } return org.springframework.data.mongodb.core.convert.Document ; } else { return java.util.Optional<java.lang.Object> ( java.lang.Object ) . java.lang.Object ( null ) ; } } if ( boolean ( java.lang.Object ) ) { return org.springframework.data.mongodb.core.convert.Document ( new org.springframework.data.mongodb.core.convert.QueryMapper.Keyword ( ( Bson ) java.lang.Object ) , org.springframework.data.mongodb.core.convert.QueryMapper.Field . org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ( ) ) ; } if ( boolean ( org.springframework.data.mongodb.core.convert.QueryMapper.Field , java.lang.Object ) ) { return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.QueryMapper.Field ) ; } return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.QueryMapper.Field . org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field , java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.QueryMapper.Field , STRING ) ; if ( java.lang.Object == null ) { return false ; } if ( ! org.springframework.data.mongodb.core.convert.QueryMapper.Field . boolean ( ) ) { return false ; } java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.QueryMapper.Field . org.springframework.data.mongodb.core.convert.MongoPersistentProperty ( ) ; if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getActualType ( ) . isAssignableFrom ( java.lang.Class<> ) ) { return true ; } MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.QueryMapper.Field . org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ( ) ; return org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . hasIdProperty ( ) && ( java.lang.Class<> . boolean ( DBRef .class ) || org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getIdProperty ( ) . map ( it -> it . getActualType ( ) . isAssignableFrom ( type ) ) . orElse ( false ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { if ( java.lang.Object instanceof java.util.List ) { return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; } if ( boolean ( java.lang.Object ) ) { return org.springframework.data.mongodb.core.convert.Document ( ( Document ) java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; } if ( java.lang.Object instanceof BasicDBList ) { return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; } if ( boolean ( java.lang.Object ) ) { return org.springframework.data.mongodb.core.convert.Document ( ( BasicDBObject ) java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; } if( java.lang.Object instanceof BsonValue ) { return java.lang.Object ; } return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { return org.springframework.data.mongodb.core.convert.MongoConverter . convertToMongoType ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> == null ? null : org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getTypeInformation ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field ) { return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.QueryMapper.Field . org.springframework.data.mongodb.core.convert.MongoPersistentProperty ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty == null || java.lang.Object == null || java.lang.Object instanceof Document || java.lang.Object instanceof DBObject ) { return java.lang.Object ; } if ( java.lang.Object instanceof DBRef ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = ( DBRef ) java.lang.Object ; return new DBRef ( org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) , java.util.Optional<java.lang.Object> ( org.springframework.data.mongodb.core.convert.DBRef . getId ( ) ) . get ( ) ) ; } if ( java.lang.Object instanceof java.lang.Iterable ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) java.lang.Object ) { org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) ; } return org.springframework.data.mongodb.core.convert.BasicDBList ; } if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isMap ( ) ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; Document org.springframework.data.mongodb.core.convert.Document = ( Document ) java.lang.Object ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.convert.Document . keySet ( ) ) { org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , org.springframework.data.mongodb.core.convert.DBRef ( org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String ) , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) ; } return org.springframework.data.mongodb.core.convert.Document ; } return org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof Document ; }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof DBObject ; }  <METHOD_END>
<METHOD_START> protected final java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field , java.lang.Object java.lang.Object ) { return java.util.Map.Entry<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.QueryMapper.Field . java.lang.String ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . hasText ( java.lang.String , STRING ) ; return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.Object ) . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) . java.util.Map.Entry<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.convert.DBRef org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object java.lang.Object , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( java.lang.Object instanceof DBRef ) { return ( DBRef ) java.lang.Object ; } return org.springframework.data.mongodb.core.convert.MongoConverter . toDBRef ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.Object java.lang.Object ) { return java.util.Optional<java.lang.Object> ( java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> { if ( java.lang.Object instanceof java.lang.String ) { return ObjectId . isValid ( java.lang.Object . java.lang.String ( ) ) ? org.springframework.data.mongodb.core.convert.ConversionService . convert ( java.lang.Object , ObjectId .class ) : java.lang.Object ; } try { return org.springframework.data.mongodb.core.convert.ConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , ObjectId .class ) ? org.springframework.data.mongodb.core.convert.ConversionService . convert ( java.lang.Object , ObjectId .class ) : java.lang.Object ( java.lang.Object , null ) ; } catch ( ConversionException org.springframework.data.mongodb.core.convert.ConversionException ) { return java.lang.Object ( java.lang.Object , null ) ; } } ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof Document ) ) { return false ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = BsonUtils . asMap ( ( Bson ) java.lang.Object ) . keySet ( ) ; if ( java.util.Set<java.lang.String> . int ( ) != NUMBER ) { return false ; } return boolean ( java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( Bson org.springframework.data.mongodb.core.convert.Bson , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.Object = BsonUtils . get ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( Bson org.springframework.data.mongodb.core.convert.Bson ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = BsonUtils . asMap ( org.springframework.data.mongodb.core.convert.Bson ) . keySet ( ) ; Assert . isTrue ( java.util.Set<java.lang.String> . int ( ) == NUMBER , STRING ) ; this . java.lang.String = java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ; this . java.lang.Object = BsonUtils . get ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return STRING . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return STRING . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return STRING . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Object instanceof java.lang.Iterable ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( ) { return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.QueryMapper.Field org.springframework.data.mongodb.core.convert.QueryMapper.Field ( java.lang.String java.lang.String ) { return new org.springframework.data.mongodb.core.convert.QueryMapper.Field ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return boolean ( ) ? java.lang.String : java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.TypeInformation<?> < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> ( ) { return ClassTypeInformation . OBJECT ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { this( java.lang.String , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { super( java.lang.String ); Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , STRING ) ; this . org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ; this . org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ; this . org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( java.lang.String ) ; this . org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> == null ? org.springframework.data.mongodb.core.convert.MongoPersistentProperty : org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getLeafProperty ( ) ; this . org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField ( java.lang.String java.lang.String ) { return new org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField ( java.lang.String , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getIdProperty ( ) . map ( it -> it . getName ( ) . equals ( name ) || it . getFieldName ( ) . equals ( name ) ) . orElseGet ( ( ) DEFAULT_ID_NAMES . contains ( name ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ( ) { return org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> == null ? org.springframework.data.mongodb.core.convert.MongoPersistentProperty : org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getInverse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ( ) { MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentProperty ( ) ; return org.springframework.data.mongodb.core.convert.MongoPersistentProperty == null ? null : org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) { return org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ; }  <METHOD_END>
<METHOD_START> private final org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) { if ( this . org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> != null ) { for ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty : this . org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { java.util.Optional<org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty>> < Association < MongoPersistentProperty > > java.util.Optional<org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty>> = org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getAssociation ( ) ; if ( java.util.Optional<org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty>> . isPresent ( ) ) { return java.util.Optional<org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty>> . get ( ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> == null ? java.lang.String : org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . toDotPath ( boolean ( ) ? org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> ( ) : org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) { return org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( java.lang.String java.lang.String ) { try { PropertyPath org.springframework.data.mongodb.core.convert.PropertyPath = PropertyPath . from ( java.lang.String . java.lang.String ( STRING , STRING ) , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getTypeInformation ( ) ) ; PersistentPropertyPath < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getPersistentPropertyPath ( org.springframework.data.mongodb.core.convert.PropertyPath ) ; java.util.Iterator<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > java.util.Iterator<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . iterator ( ) ; boolean boolean = false ; while ( java.util.Iterator<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . hasNext ( ) ) { MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = java.util.Iterator<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . next ( ) ; if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isAssociation ( ) ) { boolean = true ; continue; } if ( boolean && ! org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isIdProperty ( ) ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) ; } } return org.springframework.data.mongodb.core.convert.PersistentPropertyPath<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ; } catch ( PropertyReferenceException org.springframework.data.mongodb.core.convert.PropertyReferenceException ) { return null ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> < MongoPersistentProperty , java.lang.String > org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> ( ) { return new org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField.PositionParameterRetainingPropertyKeyConverter ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> < MongoPersistentProperty , java.lang.String > org.springframework.data.mongodb.core.convert.Converter<org.springframework.data.mongodb.core.convert.MongoPersistentProperty,java.lang.String> ( ) { return new org.springframework.data.mongodb.core.convert.QueryMapper.AssociationConverter ( org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField.KeyMapper = new org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField.KeyMapper ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { return org.springframework.data.mongodb.core.convert.QueryMapper.MetadataBackedField.KeyMapper . java.lang.String ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.TypeInformation<?> < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> ( ) { MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentProperty ( ) ; if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty == null ) { return super. org.springframework.data.mongodb.core.convert.TypeInformation<?> ( ) ; } if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getActualType ( ) . isInterface ( ) || java . lang . reflect . java.lang.reflect.Modifier . boolean ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getActualType ( ) . getModifiers ( ) ) ) { return ClassTypeInformation . OBJECT ; } return org.springframework.data.mongodb.core.convert.ClassTypeInformation<> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.util.Iterator<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) . java.util.Iterator<java.lang.String> ( ) ; this . java.util.Iterator<java.lang.String> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( PropertyToFieldNameConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) ; boolean boolean = java.util.Iterator<java.lang.String> . boolean ( ) ; while ( boolean ) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; boolean boolean = ( boolean ( java.lang.String ) && ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isMap ( ) || org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isCollectionLike ( ) ) ) ; if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) ; } boolean = boolean && java.util.Iterator<java.lang.String> . boolean ( ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return true ; } try { java.lang.Long . java.lang.Long ( java.lang.String ) ; return true ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { return false ; } }  <METHOD_END>
<METHOD_START> public void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , STRING ) ; this . org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getInverse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( boolean ) { return null ; } if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . equals ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { boolean = true ; } return org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getFieldName ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) { return org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ; }  <METHOD_END>
