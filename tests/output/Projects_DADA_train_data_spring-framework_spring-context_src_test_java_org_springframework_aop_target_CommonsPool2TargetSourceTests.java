<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.aop.target.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( this . org.springframework.aop.target.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.Class<? extends org.springframework.aop.target.CommonsPool2TargetSourceTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.target.CommonsPool2TargetSourceTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.aop.target.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( java.lang.String ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SideEffectBean org.springframework.aop.target.SideEffectBean = ( SideEffectBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.target.SideEffectBean . getCount ( ) ) ; PoolingConfig org.springframework.aop.target.PoolingConfig = ( PoolingConfig ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.target.SideEffectBean . doWork ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.target.PoolingConfig . getMaxSize ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.target.PoolingConfig . getMaxSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CommonsPool2TargetSource org.springframework.aop.target.CommonsPool2TargetSource = ( CommonsPool2TargetSource ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; SingletonTargetSource org.springframework.aop.target.SingletonTargetSource = ( SingletonTargetSource ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.target.CommonsPool2TargetSource ) ; assertTrue ( org.springframework.aop.target.SingletonTargetSource . getTarget ( ) instanceof Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.aop.target.Person = ( Person ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( ( ( Advised ) org.springframework.aop.target.Person ) . getTargetSource ( ) instanceof CommonsPool2TargetSource ) ; Person org.springframework.aop.target.Person = ( Person ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.target.Person ) ; assertTrue ( ( ( Advised ) org.springframework.aop.target.Person ) . getTargetSource ( ) instanceof SingletonTargetSource ) ; org.springframework.aop.target.Person . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.target.Person . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; CommonsPool2TargetSource org.springframework.aop.target.CommonsPool2TargetSource = new CommonsPool2TargetSource ( ) ; org.springframework.aop.target.CommonsPool2TargetSource . setMaxSize ( int ) ; org.springframework.aop.target.CommonsPool2TargetSource . setMaxWait ( NUMBER ) ; void ( org.springframework.aop.target.CommonsPool2TargetSource ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ int ] ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Object java.lang.Object = org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object[] [ int ] = java.lang.Object ; } try { org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; fail ( STRING ) ; } catch ( java.util.NoSuchElementException java.util.NoSuchElementException ) { } org.springframework.aop.target.CommonsPool2TargetSource . releaseTarget ( java.lang.Object[] [ NUMBER ] ) ; java.lang.Object[] [ NUMBER ] = org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { org.springframework.aop.target.CommonsPool2TargetSource . releaseTarget ( java.lang.Object[] [ int ] ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Advised org.springframework.aop.target.Advised = ( Advised ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; CommonsPool2TargetSource org.springframework.aop.target.CommonsPool2TargetSource = ( CommonsPool2TargetSource ) org.springframework.aop.target.Advised . getTargetSource ( ) ; int int = org.springframework.aop.target.CommonsPool2TargetSource . getMaxSize ( ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ int ] ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Object java.lang.Object = org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object[] [ int ] = java.lang.Object ; } try { org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; fail ( STRING ) ; } catch ( java.util.NoSuchElementException java.util.NoSuchElementException ) { } org.springframework.aop.target.CommonsPool2TargetSource . releaseTarget ( java.lang.Object[] [ NUMBER ] ) ; java.lang.Object[] [ NUMBER ] = org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.System . java.io.PrintStream . void ( int ) ; org.springframework.aop.target.CommonsPool2TargetSource . releaseTarget ( java.lang.Object[] [ int ] ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CommonsPool2TargetSource org.springframework.aop.target.CommonsPool2TargetSource = new CommonsPool2TargetSource ( ) ; org.springframework.aop.target.CommonsPool2TargetSource . setBlockWhenExhausted ( true ) ; assertEquals ( true , org.springframework.aop.target.CommonsPool2TargetSource . isBlockWhenExhausted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CommonsPool2TargetSource org.springframework.aop.target.CommonsPool2TargetSource = new CommonsPool2TargetSource ( ) ; org.springframework.aop.target.CommonsPool2TargetSource . setMaxWait ( NUMBER ) ; void ( org.springframework.aop.target.CommonsPool2TargetSource ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.CommonsPool2TargetSource . getTarget ( ) ; assertTrue ( java.lang.Object instanceof SerializablePerson ) ; assertTrue ( java.lang.Object instanceof SerializablePerson ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; org.springframework.aop.target.CommonsPool2TargetSource . releaseTarget ( java.lang.Object ) ; org.springframework.aop.target.CommonsPool2TargetSource . releaseTarget ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( CommonsPool2TargetSource org.springframework.aop.target.CommonsPool2TargetSource ) { java.lang.String java.lang.String = STRING ; StaticApplicationContext org.springframework.aop.target.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.aop.target.StaticApplicationContext . registerPrototype ( java.lang.String , SerializablePerson .class ) ; org.springframework.aop.target.CommonsPool2TargetSource . setTargetBeanName ( java.lang.String ) ; org.springframework.aop.target.CommonsPool2TargetSource . setBeanFactory ( org.springframework.aop.target.StaticApplicationContext ) ; }  <METHOD_END>
