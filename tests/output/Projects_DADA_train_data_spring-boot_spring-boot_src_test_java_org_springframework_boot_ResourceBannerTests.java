<METHOD_START> @ After public void void ( ) { AnsiOutput . setEnabled ( Enabled . DETECT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , STRING , STRING , null ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , null , null , null ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , STRING , STRING , null ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , null , null , null ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; AnsiOutput . setEnabled ( AnsiOutput . Enabled . ALWAYS ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , null , null , null ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; AnsiOutput . setEnabled ( AnsiOutput . Enabled . NEVER ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , null , null , null ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , null , null , STRING ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.Resource , null , null , null ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Resource org.springframework.boot.Resource , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { ResourceBanner org.springframework.boot.ResourceBanner = new org.springframework.boot.ResourceBannerTests.MockResourceBanner ( org.springframework.boot.Resource , java.lang.String , java.lang.String , java.lang.String ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new MockEnvironment ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; org.springframework.boot.ConfigurableEnvironment . getPropertySources ( ) . addLast ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.boot.ResourceBanner . printBanner ( org.springframework.boot.ConfigurableEnvironment , java.lang.Class<? extends org.springframework.boot.ResourceBannerTests> ( ) , new java.io.PrintStream ( java.io.ByteArrayOutputStream ) ) ; return java.io.ByteArrayOutputStream . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void ( Resource org.springframework.boot.Resource , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( org.springframework.boot.Resource ); this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . java.lang.String ; }  <METHOD_END>
