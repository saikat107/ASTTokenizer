<METHOD_START> @ Before public void void ( ) java.lang.Exception { demo.ordershipping.StateMachine<java.lang.String,java.lang.String> = demo.ordershipping.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { if ( demo.ordershipping.StateMachine<java.lang.String,java.lang.String> . getState ( ) != null ) { break; } else { java.lang.Thread . void ( NUMBER ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachineTestPlan < java.lang.String , java.lang.String > demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.ordershipping.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . build ( ) ; demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachineTestPlan < java.lang.String , java.lang.String > demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.ordershipping.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . expectStateChanged ( NUMBER ) . expectStateMachineStopped ( NUMBER ) . and ( ) . build ( ) ; demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachineTestPlan < java.lang.String , java.lang.String > demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.ordershipping.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING , STRING , STRING ) . expectStateChanged ( NUMBER ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING ) . expectStateChanged ( NUMBER ) . expectStateMachineStopped ( NUMBER ) . and ( ) . build ( ) ; demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachineTestPlan < java.lang.String , java.lang.String > demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.ordershipping.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING , STRING , STRING ) . expectStateChanged ( NUMBER ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . build ( ) ) . expectStates ( STRING , STRING , STRING ) . expectStateChanged ( NUMBER ) . and ( ) . build ( ) ; demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachineTestPlan < java.lang.String , java.lang.String > demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.ordershipping.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ) . expectStates ( STRING , STRING , STRING ) . expectStateChanged ( NUMBER ) . and ( ) . step ( ) . expectStateChanged ( NUMBER ) . and ( ) . build ( ) ; demo.ordershipping.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
