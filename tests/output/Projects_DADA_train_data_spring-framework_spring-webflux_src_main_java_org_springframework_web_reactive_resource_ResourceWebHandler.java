<METHOD_START> public void void ( java.util.List<org.springframework.web.reactive.resource.Resource> < Resource > java.util.List<org.springframework.web.reactive.resource.Resource> ) { Assert . notNull ( java.util.List<org.springframework.web.reactive.resource.Resource> , STRING ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . clear ( ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . addAll ( java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.resource.Resource> < Resource > java.util.List<org.springframework.web.reactive.resource.Resource> ( ) { return this . java.util.List<org.springframework.web.reactive.resource.Resource> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) { this . java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . clear ( ) ; if ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> != null ) { this . java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . addAll ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ( ) { return this . java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ) { this . java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> . clear ( ) ; if ( java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> != null ) { this . java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> . addAll ( java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ( ) { return this . java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ; }  <METHOD_END>
<METHOD_START> public void void ( CacheControl org.springframework.web.reactive.resource.CacheControl ) { this . org.springframework.web.reactive.resource.CacheControl = org.springframework.web.reactive.resource.CacheControl ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.CacheControl org.springframework.web.reactive.resource.CacheControl ( ) { return this . org.springframework.web.reactive.resource.CacheControl ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceHttpMessageWriter org.springframework.web.reactive.resource.ResourceHttpMessageWriter ) { this . org.springframework.web.reactive.resource.ResourceHttpMessageWriter = org.springframework.web.reactive.resource.ResourceHttpMessageWriter ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.ResourceHttpMessageWriter org.springframework.web.reactive.resource.ResourceHttpMessageWriter ( ) { return this . org.springframework.web.reactive.resource.ResourceHttpMessageWriter ; }  <METHOD_END>
<METHOD_START> public void void ( CompositeContentTypeResolver org.springframework.web.reactive.resource.CompositeContentTypeResolver ) { this . org.springframework.web.reactive.resource.CompositeContentTypeResolver = org.springframework.web.reactive.resource.CompositeContentTypeResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.CompositeContentTypeResolver org.springframework.web.reactive.resource.CompositeContentTypeResolver ( ) { return this . org.springframework.web.reactive.resource.CompositeContentTypeResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( org.springframework.web.reactive.resource.Log . isWarnEnabled ( ) && CollectionUtils . isEmpty ( this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) { org.springframework.web.reactive.resource.Log . warn ( STRING + STRING ) ; } if ( this . java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . isEmpty ( ) ) { this . java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new PathResourceResolver ( ) ) ; } void ( ) ; if ( this . org.springframework.web.reactive.resource.ResourceHttpMessageWriter == null ) { this . org.springframework.web.reactive.resource.ResourceHttpMessageWriter = new ResourceHttpMessageWriter ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( CollectionUtils . isEmpty ( this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) { return; } for ( int int = java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ( ) . size ( ) - NUMBER ; int >= NUMBER ; int -- ) { if ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ( ) . get ( int ) instanceof PathResourceResolver ) { PathResourceResolver org.springframework.web.reactive.resource.PathResourceResolver = ( PathResourceResolver ) java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ( ) . get ( int ) ; if ( ObjectUtils . isEmpty ( org.springframework.web.reactive.resource.PathResourceResolver . getAllowedLocations ( ) ) ) { org.springframework.web.reactive.resource.PathResourceResolver . setAllowedLocations ( java.util.List<org.springframework.web.reactive.resource.Resource> ( ) . toArray ( new Resource [ java.util.List<org.springframework.web.reactive.resource.Resource> ( ) . size ( ) ] ) ) ; } break; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.reactive.resource.PathExtensionContentTypeResolver = org.springframework.web.reactive.resource.PathExtensionContentTypeResolver ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.resource.PathExtensionContentTypeResolver org.springframework.web.reactive.resource.PathExtensionContentTypeResolver ( ) { java.util.Map<java.lang.String,org.springframework.web.reactive.resource.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.resource.MediaType> = null ; if ( org.springframework.web.reactive.resource.CompositeContentTypeResolver ( ) != null ) { PathExtensionContentTypeResolver org.springframework.web.reactive.resource.PathExtensionContentTypeResolver = org.springframework.web.reactive.resource.CompositeContentTypeResolver ( ) . findResolver ( PathExtensionContentTypeResolver .class ) ; if ( org.springframework.web.reactive.resource.PathExtensionContentTypeResolver != null ) { java.util.Map<java.lang.String,org.springframework.web.reactive.resource.MediaType> = new java.util.HashMap <> ( org.springframework.web.reactive.resource.PathExtensionContentTypeResolver . getMediaTypes ( ) ) ; } } return new PathExtensionContentTypeResolver ( java.util.Map<java.lang.String,org.springframework.web.reactive.resource.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.resource.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.resource.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange ) { return org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( org.springframework.web.reactive.resource.ServerWebExchange ) . otherwiseIfEmpty ( Mono . defer ( ( ) { logger . trace ( STRING ) ; exchange . getResponse ( ) . setStatusCode ( HttpStatus . NOT_FOUND ) ; return Mono . empty ( ) ; } ) ) . then ( resource -> { try { if ( HttpMethod . OPTIONS . equals ( exchange . getRequest ( ) . getMethod ( ) ) ) { exchange . getResponse ( ) . getHeaders ( ) . add ( STRING , STRING ) ; return Mono . empty ( ) ; } HttpMethod httpMethod = exchange . getRequest ( ) . getMethod ( ) ; if ( ! SUPPORTED_METHODS . contains ( httpMethod ) ) { return Mono . error ( new MethodNotAllowedException ( httpMethod , SUPPORTED_METHODS ) ) ; } if ( exchange . checkNotModified ( Instant . ofEpochMilli ( resource . lastModified ( ) ) ) ) { logger . trace ( STRING ) ; return Mono . empty ( ) ; } if ( getCacheControl ( ) != null ) { String value = getCacheControl ( ) . getHeaderValue ( ) ; if ( value != null ) { exchange . getResponse ( ) . getHeaders ( ) . setCacheControl ( value ) ; } } MediaType mediaType = getMediaType ( exchange , resource ) ; if ( mediaType != null ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + mediaType + STRING + resource ) ; } } else { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + STRING + resource + STRING ) ; } } if ( HttpMethod . HEAD . equals ( exchange . getRequest ( ) . getMethod ( ) ) ) { setHeaders ( exchange , resource , mediaType ) ; exchange . getResponse ( ) . getHeaders ( ) . set ( HttpHeaders . ACCEPT_RANGES , STRING ) ; logger . trace ( STRING ) ; return Mono . empty ( ) ; } setHeaders ( exchange , resource , mediaType ) ; return this . resourceHttpMessageWriter . write ( Mono . just ( resource ) , null , ResolvableType . forClass ( Resource .class ) , mediaType , exchange . getRequest ( ) , exchange . getResponse ( ) , Collections . emptyMap ( ) ) ; } catch ( IOException ex ) { return Mono . error ( ex ) ; } } ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange ) { java.lang.String java.lang.String = HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ; java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.web.reactive.resource.ServerWebExchange . getAttribute ( java.lang.String ) ; if ( ! java.util.Optional<java.lang.String> . boolean ( ) ) { return Mono . error ( new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ) ; } java.lang.String java.lang.String = java.lang.String ( java.util.Optional<java.lang.String> . java.lang.String ( ) ) ; if ( ! StringUtils . hasText ( java.lang.String ) || boolean ( java.lang.String ) ) { if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING + java.lang.String + STRING ) ; } return Mono . empty ( ) ; } if ( java.lang.String . boolean ( STRING ) ) { try { if ( boolean ( java.net.URLDecoder . java.lang.String ( java.lang.String , STRING ) ) ) { if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING + java.lang.String + STRING ) ; } return Mono . empty ( ) ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { return Mono . error ( Exceptions . propagate ( java.io.UnsupportedEncodingException ) ) ; } } ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain = org.springframework.web.reactive.resource.ResourceResolverChain ( ) ; return org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , java.util.List<org.springframework.web.reactive.resource.Resource> ( ) ) . then ( resource -> { ResourceTransformerChain transformerChain = createTransformerChain ( resolveChain ) ; return transformerChain . transform ( exchange , resource ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { boolean boolean = false ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { if ( java.lang.String . char ( int ) == '/' ) { boolean = true ; } else if ( java.lang.String . char ( int ) > ' ' && java.lang.String . char ( int ) != NUMBER ) { if ( int == NUMBER || ( int == NUMBER && boolean ) ) { return java.lang.String ; } java.lang.String = boolean ? STRING + java.lang.String . java.lang.String ( int ) : java.lang.String . java.lang.String ( int ) ; if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING + java.lang.String ) ; } return java.lang.String ; } } return ( boolean ? STRING : STRING ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING + java.lang.String ) ; } if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING ) ; } return true ; } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = ( java.lang.String . char ( NUMBER ) == '/' ? java.lang.String . java.lang.String ( NUMBER ) : java.lang.String ) ; if ( ResourceUtils . isUrl ( java.lang.String ) || java.lang.String . boolean ( STRING ) ) { if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING ) ; } return true ; } } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { if ( org.springframework.web.reactive.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.reactive.resource.Log . trace ( STRING ) ; } return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.resource.ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ( ) { return new DefaultResourceResolverChain ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.resource.ResourceTransformerChain org.springframework.web.reactive.resource.ResourceTransformerChain ( ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { return new DefaultResourceTransformerChain ( org.springframework.web.reactive.resource.ResourceResolverChain , java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.resource.MediaType org.springframework.web.reactive.resource.MediaType ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , Resource org.springframework.web.reactive.resource.Resource ) { return this . org.springframework.web.reactive.resource.PathExtensionContentTypeResolver . resolveMediaTypeForResource ( org.springframework.web.reactive.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , Resource org.springframework.web.reactive.resource.Resource , MediaType org.springframework.web.reactive.resource.MediaType )			throws java.io.IOException { HttpHeaders org.springframework.web.reactive.resource.HttpHeaders = org.springframework.web.reactive.resource.ServerWebExchange . getResponse ( ) . getHeaders ( ) ; long long = org.springframework.web.reactive.resource.Resource . contentLength ( ) ; org.springframework.web.reactive.resource.HttpHeaders . setContentLength ( long ) ; if ( org.springframework.web.reactive.resource.MediaType != null ) { org.springframework.web.reactive.resource.HttpHeaders . setContentType ( org.springframework.web.reactive.resource.MediaType ) ; } if ( org.springframework.web.reactive.resource.Resource instanceof HttpResource ) { HttpHeaders org.springframework.web.reactive.resource.HttpHeaders = ( ( HttpResource ) org.springframework.web.reactive.resource.Resource ) . getResponseHeaders ( ) ; org.springframework.web.reactive.resource.ServerWebExchange . getResponse ( ) . getHeaders ( ) . putAll ( org.springframework.web.reactive.resource.HttpHeaders ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.List<org.springframework.web.reactive.resource.Resource> ( ) + STRING + java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ( ) + STRING ; }  <METHOD_END>
