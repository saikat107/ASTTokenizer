<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.context.support.MockServletContext = new MockServletContext ( ) ; final MockHttpServletRequest org.springframework.web.context.support.MockHttpServletRequest = new MockHttpServletRequest ( ) ; final MockHttpServletResponse org.springframework.web.context.support.MockHttpServletResponse = new MockHttpServletResponse ( ) ; StaticWebApplicationContext org.springframework.web.context.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.context.support.StaticWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new HttpRequestHandler ( ) { @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.context.support.HttpServletRequest , HttpServletResponse org.springframework.web.context.support.HttpServletResponse ) throws org.springframework.web.context.support.ServletException , java.io.IOException { assertSame ( org.springframework.web.context.support.MockHttpServletRequest , org.springframework.web.context.support.HttpServletRequest ) ; assertSame ( org.springframework.web.context.support.MockHttpServletResponse , org.springframework.web.context.support.HttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.context.support.MockHttpServletRequest . getParameter ( STRING ) ; if ( STRING . boolean ( java.lang.String ) ) { throw new ServletException ( STRING ) ; } if ( STRING . boolean ( java.lang.String ) ) { throw new java.io.IOException ( STRING ) ; } org.springframework.web.context.support.HttpServletResponse . getWriter ( ) . write ( STRING ) ; } } ) ; org.springframework.web.context.support.StaticWebApplicationContext . setServletContext ( org.springframework.web.context.support.MockServletContext ) ; org.springframework.web.context.support.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.context.support.MockServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.context.support.StaticWebApplicationContext ) ; Servlet org.springframework.web.context.support.Servlet = new HttpRequestHandlerServlet ( ) ; org.springframework.web.context.support.Servlet . init ( new MockServletConfig ( org.springframework.web.context.support.MockServletContext , STRING ) ) ; org.springframework.web.context.support.Servlet . service ( org.springframework.web.context.support.MockHttpServletRequest , org.springframework.web.context.support.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.context.support.MockHttpServletResponse . getContentAsString ( ) ) ; try { org.springframework.web.context.support.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.web.context.support.Servlet . service ( org.springframework.web.context.support.MockHttpServletRequest , org.springframework.web.context.support.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( ServletException org.springframework.web.context.support.ServletException ) { assertEquals ( STRING , org.springframework.web.context.support.ServletException . getMessage ( ) ) ; } try { org.springframework.web.context.support.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.web.context.support.Servlet . service ( org.springframework.web.context.support.MockHttpServletRequest , org.springframework.web.context.support.MockHttpServletResponse ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { assertEquals ( STRING , java.io.IOException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.context.support.HttpServletRequest , HttpServletResponse org.springframework.web.context.support.HttpServletResponse ) throws org.springframework.web.context.support.ServletException , java.io.IOException { assertSame ( org.springframework.web.context.support.MockHttpServletRequest , org.springframework.web.context.support.HttpServletRequest ) ; assertSame ( org.springframework.web.context.support.MockHttpServletResponse , org.springframework.web.context.support.HttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.context.support.MockHttpServletRequest . getParameter ( STRING ) ; if ( STRING . boolean ( java.lang.String ) ) { throw new ServletException ( STRING ) ; } if ( STRING . boolean ( java.lang.String ) ) { throw new java.io.IOException ( STRING ) ; } org.springframework.web.context.support.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
