<METHOD_START> @ Before public void void ( ) java.io.IOException { org.springframework.aop.framework.autoproxy.BeanFactory = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreatorTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreatorTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.autoproxy.TestBean = ( TestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.aop.framework.autoproxy.TestBean ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; void ( org.springframework.aop.framework.autoproxy.ITestBean , NUMBER ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; void ( org.springframework.aop.framework.autoproxy.ITestBean , NUMBER ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; NopInterceptor org.springframework.aop.framework.autoproxy.NopInterceptor = ( NopInterceptor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; int int = NUMBER ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ) ; assertTrue ( STRING , org.springframework.aop.framework.autoproxy.ITestBean instanceof TimeStamped ) ; assertEquals ( NUMBER , ( ( TimeStamped ) org.springframework.aop.framework.autoproxy.ITestBean ) . getTimeStamp ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; Lockable org.springframework.aop.framework.autoproxy.Lockable = ( Lockable ) org.springframework.aop.framework.autoproxy.ITestBean ; Lockable org.springframework.aop.framework.autoproxy.Lockable = ( Lockable ) org.springframework.aop.framework.autoproxy.ITestBean ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ) ; org.springframework.aop.framework.autoproxy.Lockable . lock ( ) ; assertTrue ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( NUMBER ) ; try { org.springframework.aop.framework.autoproxy.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( LockedException org.springframework.aop.framework.autoproxy.LockedException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; NopInterceptor org.springframework.aop.framework.autoproxy.NopInterceptor = ( NopInterceptor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; int int = NUMBER ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ) ; assertTrue ( STRING , org.springframework.aop.framework.autoproxy.ITestBean instanceof TimeStamped ) ; assertEquals ( NUMBER , ( ( TimeStamped ) org.springframework.aop.framework.autoproxy.ITestBean ) . getTimeStamp ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; Lockable org.springframework.aop.framework.autoproxy.Lockable = ( Lockable ) org.springframework.aop.framework.autoproxy.ITestBean ; Lockable org.springframework.aop.framework.autoproxy.Lockable = ( Lockable ) org.springframework.aop.framework.autoproxy.ITestBean ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ) ; org.springframework.aop.framework.autoproxy.Lockable . lock ( ) ; assertTrue ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; assertFalse ( org.springframework.aop.framework.autoproxy.Lockable . locked ( ) ) ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( NUMBER ) ; try { org.springframework.aop.framework.autoproxy.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( LockedException org.springframework.aop.framework.autoproxy.LockedException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; void ( org.springframework.aop.framework.autoproxy.ITestBean , NUMBER ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.autoproxy.TestBean = ( TestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; void ( org.springframework.aop.framework.autoproxy.TestBean ) ; assertEquals ( STRING , org.springframework.aop.framework.autoproxy.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertTrue ( ( ( Advised ) org.springframework.aop.framework.autoproxy.ITestBean ) . isFrozen ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ITestBean org.springframework.aop.framework.autoproxy.ITestBean , int int ) { NopInterceptor org.springframework.aop.framework.autoproxy.NopInterceptor = ( NopInterceptor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.aop.framework.autoproxy.ITestBean ) ) ; int int = NUMBER ; org.springframework.aop.framework.autoproxy.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.autoproxy.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER * int , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( TestBean org.springframework.aop.framework.autoproxy.TestBean ) { CountingBeforeAdvice org.springframework.aop.framework.autoproxy.CountingBeforeAdvice = ( CountingBeforeAdvice ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; NopInterceptor org.springframework.aop.framework.autoproxy.NopInterceptor = ( NopInterceptor ) org.springframework.aop.framework.autoproxy.BeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.aop.framework.autoproxy.TestBean ) ) ; int int = NUMBER ; org.springframework.aop.framework.autoproxy.TestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.autoproxy.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.autoproxy.CountingBeforeAdvice . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return TestBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
