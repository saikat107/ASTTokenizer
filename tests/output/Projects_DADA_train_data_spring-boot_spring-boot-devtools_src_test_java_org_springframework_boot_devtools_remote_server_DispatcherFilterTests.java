<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.devtools.remote.server.DispatcherFilter = new DispatcherFilter ( this . org.springframework.boot.devtools.remote.server.Dispatcher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.server.ExpectedException . expectMessage ( STRING ) ; new DispatcherFilter ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRequest org.springframework.boot.devtools.remote.server.ServletRequest = mock ( ServletRequest .class ) ; ServletResponse org.springframework.boot.devtools.remote.server.ServletResponse = mock ( ServletResponse .class ) ; this . org.springframework.boot.devtools.remote.server.DispatcherFilter . doFilter ( org.springframework.boot.devtools.remote.server.ServletRequest , org.springframework.boot.devtools.remote.server.ServletResponse , this . org.springframework.boot.devtools.remote.server.FilterChain ) ; verifyZeroInteractions ( this . org.springframework.boot.devtools.remote.server.Dispatcher ) ; verify ( this . org.springframework.boot.devtools.remote.server.FilterChain ) . doFilter ( org.springframework.boot.devtools.remote.server.ServletRequest , org.springframework.boot.devtools.remote.server.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.boot.devtools.remote.server.HttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HttpServletResponse org.springframework.boot.devtools.remote.server.HttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.boot.devtools.remote.server.DispatcherFilter . doFilter ( org.springframework.boot.devtools.remote.server.HttpServletRequest , org.springframework.boot.devtools.remote.server.HttpServletResponse , this . org.springframework.boot.devtools.remote.server.FilterChain ) ; verify ( this . org.springframework.boot.devtools.remote.server.FilterChain ) . doFilter ( org.springframework.boot.devtools.remote.server.HttpServletRequest , org.springframework.boot.devtools.remote.server.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.boot.devtools.remote.server.HttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HttpServletResponse org.springframework.boot.devtools.remote.server.HttpServletResponse = new MockHttpServletResponse ( ) ; willReturn ( true ) . given ( this . org.springframework.boot.devtools.remote.server.Dispatcher ) . handle ( any ( ServerHttpRequest .class ) , any ( ServerHttpResponse .class ) ) ; this . org.springframework.boot.devtools.remote.server.DispatcherFilter . doFilter ( org.springframework.boot.devtools.remote.server.HttpServletRequest , org.springframework.boot.devtools.remote.server.HttpServletResponse , this . org.springframework.boot.devtools.remote.server.FilterChain ) ; verifyZeroInteractions ( this . org.springframework.boot.devtools.remote.server.FilterChain ) ; verify ( this . org.springframework.boot.devtools.remote.server.Dispatcher ) . handle ( this . org.springframework.boot.devtools.remote.server.ArgumentCaptor<org.springframework.boot.devtools.remote.server.ServerHttpRequest> . capture ( ) , this . org.springframework.boot.devtools.remote.server.ArgumentCaptor<org.springframework.boot.devtools.remote.server.ServerHttpResponse> . capture ( ) ) ; ServerHttpRequest org.springframework.boot.devtools.remote.server.ServerHttpRequest = this . org.springframework.boot.devtools.remote.server.ArgumentCaptor<org.springframework.boot.devtools.remote.server.ServerHttpRequest> . getValue ( ) ; ServletServerHttpRequest org.springframework.boot.devtools.remote.server.ServletServerHttpRequest = ( ServletServerHttpRequest ) org.springframework.boot.devtools.remote.server.ServerHttpRequest ; ServerHttpResponse org.springframework.boot.devtools.remote.server.ServerHttpResponse = this . org.springframework.boot.devtools.remote.server.ArgumentCaptor<org.springframework.boot.devtools.remote.server.ServerHttpResponse> . getValue ( ) ; ServletServerHttpResponse org.springframework.boot.devtools.remote.server.ServletServerHttpResponse = ( ServletServerHttpResponse ) org.springframework.boot.devtools.remote.server.ServerHttpResponse ; assertThat ( org.springframework.boot.devtools.remote.server.ServletServerHttpRequest . getServletRequest ( ) ) . isEqualTo ( org.springframework.boot.devtools.remote.server.HttpServletRequest ) ; assertThat ( org.springframework.boot.devtools.remote.server.ServletServerHttpResponse . getServletResponse ( ) ) . isEqualTo ( org.springframework.boot.devtools.remote.server.HttpServletResponse ) ; }  <METHOD_END>
