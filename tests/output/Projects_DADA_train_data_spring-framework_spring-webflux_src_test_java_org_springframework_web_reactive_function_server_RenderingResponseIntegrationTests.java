<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.function.server.RouterFunction<?> < ? > org.springframework.web.reactive.function.server.RouterFunction<?> ( ) { org.springframework.web.reactive.function.server.RenderingResponseIntegrationTests.RenderingResponseHandler org.springframework.web.reactive.function.server.RenderingResponseIntegrationTests.RenderingResponseHandler = new org.springframework.web.reactive.function.server.RenderingResponseIntegrationTests.RenderingResponseHandler ( ) ; RouterFunction < RenderingResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.RenderingResponse> = route ( GET ( STRING ) , org.springframework.web.reactive.function.server.RenderingResponseIntegrationTests.RenderingResponseHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) ; RouterFunction < RenderingResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.RenderingResponse> = route ( GET ( STRING ) , org.springframework.web.reactive.function.server.RenderingResponseIntegrationTests.RenderingResponseHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . filter ( ofResponseProcessor ( response -> RenderingResponse . from ( response ) . modelAttribute ( STRING , STRING ) . build ( ) ) ) ; return org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.RenderingResponse> . and ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.RenderingResponse> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.function.server.HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ( ) { return HandlerStrategies . builder ( ) . viewResolver ( new org.springframework.web.reactive.function.server.RenderingResponseIntegrationTests.DummyViewResolver ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> = org.springframework.web.reactive.function.server.RestTemplate . getForEntity ( STRING + port + STRING , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> = org.springframework.web.reactive.function.server.RestTemplate . getForEntity ( STRING + port + STRING , java.lang.String .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.reactive.function.server.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { int int = java.lang.String . int ( '=' ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { return RenderingResponse . create ( STRING ) . modelAttribute ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.View> < View > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.View> ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return Mono . just ( new org.springframework.web.reactive.function.server.RenderingResponseIntegrationTests.DummyView ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.server.MediaType> ( ) { return java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , MediaType org.springframework.web.reactive.function.server.MediaType , ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.lang.String ) . java.lang.StringBuilder ( '\n' ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ) . java.lang.StringBuilder ( '=' ) . java.lang.StringBuilder ( java.util.Map.Entry<java.lang.String,> . getValue ( ) ) . java.lang.StringBuilder ( '\n' ) ; } java.lang.StringBuilder . void ( java.lang.StringBuilder . int ( ) - NUMBER ) ; byte [] byte[] = java.lang.StringBuilder . java.lang.String ( ) . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; ServerHttpResponse org.springframework.web.reactive.function.server.ServerHttpResponse = org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) ; DataBuffer org.springframework.web.reactive.function.server.DataBuffer = org.springframework.web.reactive.function.server.ServerHttpResponse . bufferFactory ( ) . wrap ( byte[] ) ; org.springframework.web.reactive.function.server.ServerHttpResponse . getHeaders ( ) . setContentType ( MediaType . TEXT_PLAIN ) ; return org.springframework.web.reactive.function.server.ServerHttpResponse . writeWith ( Mono . just ( org.springframework.web.reactive.function.server.DataBuffer ) ) ; }  <METHOD_END>
