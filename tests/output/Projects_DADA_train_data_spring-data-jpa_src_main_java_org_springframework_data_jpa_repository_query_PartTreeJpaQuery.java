<METHOD_START> public void ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider ) { super( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ); this . org.springframework.data.jpa.repository.query.EntityManager = org.springframework.data.jpa.repository.query.EntityManager ; this . java.lang.Class<?> = org.springframework.data.jpa.repository.query.JpaQueryMethod . getEntityInformation ( ) . getJavaType ( ) ; this . org.springframework.data.jpa.repository.query.PartTree = new PartTree ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getName ( ) , java.lang.Class<> ) ; this . org.springframework.data.jpa.repository.query.JpaParameters = org.springframework.data.jpa.repository.query.JpaQueryMethod . getParameters ( ) ; boolean boolean = org.springframework.data.jpa.repository.query.JpaParameters . hasDynamicProjection ( ) || org.springframework.data.jpa.repository.query.JpaParameters . potentiallySortsDynamically ( ) ; this . org.springframework.data.jpa.repository.query.PartTreeJpaQuery.QueryPreparer = new org.springframework.data.jpa.repository.query.PartTreeJpaQuery.CountQueryPreparer ( org.springframework.data.jpa.repository.query.PersistenceProvider , boolean ) ; this . org.springframework.data.jpa.repository.query.PartTreeJpaQuery.QueryPreparer = org.springframework.data.jpa.repository.query.PartTree . isCountProjection ( ) ? org.springframework.data.jpa.repository.query.PartTreeJpaQuery.QueryPreparer : new org.springframework.data.jpa.repository.query.PartTreeJpaQuery.QueryPreparer ( org.springframework.data.jpa.repository.query.PersistenceProvider , boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.Object [] java.lang.Object[] ) { return org.springframework.data.jpa.repository.query.PartTreeJpaQuery.QueryPreparer . org.springframework.data.jpa.repository.query.Query ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> < java.lang.Long > org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ( java.lang.Object [] java.lang.Object[] ) { return ( TypedQuery < java.lang.Long > ) org.springframework.data.jpa.repository.query.PartTreeJpaQuery.QueryPreparer . org.springframework.data.jpa.repository.query.Query ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.JpaQueryExecution org.springframework.data.jpa.repository.query.JpaQueryExecution ( ) { if ( this . org.springframework.data.jpa.repository.query.PartTree . isDelete ( ) ) { return new DeleteExecution ( org.springframework.data.jpa.repository.query.EntityManager ) ; } else if ( this . org.springframework.data.jpa.repository.query.PartTree . isExistsProjection ( ) ) { return new ExistsExecution ( ) ; } return super. getExecution ( ) ; }  <METHOD_END>
<METHOD_START> public void ( PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider , boolean boolean ) { this . org.springframework.data.jpa.repository.query.PersistenceProvider = org.springframework.data.jpa.repository.query.PersistenceProvider ; JpaQueryCreator org.springframework.data.jpa.repository.query.JpaQueryCreator = org.springframework.data.jpa.repository.query.JpaQueryCreator ( org.springframework.data.jpa.repository.query.PersistenceProvider , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; this . org.springframework.data.jpa.repository.query.CriteriaQuery<?> = boolean ? null : org.springframework.data.jpa.repository.query.JpaQueryCreator . createQuery ( ) ; this . java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> = boolean ? null : org.springframework.data.jpa.repository.query.JpaQueryCreator . getParameterExpressions ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.Object [] java.lang.Object[] ) { CriteriaQuery < ? > org.springframework.data.jpa.repository.query.CriteriaQuery<?> = org.springframework.data.jpa.repository.query.CriteriaQuery<> ; java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> < ParameterMetadata < ? > > java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> = this . java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> ; ParametersParameterAccessor org.springframework.data.jpa.repository.query.ParametersParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.jpa.repository.query.JpaParameters , java.lang.Object[] ) ; if ( org.springframework.data.jpa.repository.query.CriteriaQuery<> == null || org.springframework.data.jpa.repository.query.ParametersParameterAccessor . hasBindableNullValue ( ) ) { JpaQueryCreator org.springframework.data.jpa.repository.query.JpaQueryCreator = org.springframework.data.jpa.repository.query.JpaQueryCreator ( org.springframework.data.jpa.repository.query.PersistenceProvider , java.util.Optional . java.util.Optional ( org.springframework.data.jpa.repository.query.ParametersParameterAccessor ) ) ; org.springframework.data.jpa.repository.query.CriteriaQuery<?> = org.springframework.data.jpa.repository.query.JpaQueryCreator . createQuery ( org.springframework.data.jpa.repository.query.Sort ( java.lang.Object[] ) ) ; java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> = org.springframework.data.jpa.repository.query.JpaQueryCreator . getParameterExpressions ( ) ; } TypedQuery < ? > org.springframework.data.jpa.repository.query.TypedQuery<?> = org.springframework.data.jpa.repository.query.Query ( org.springframework.data.jpa.repository.query.CriteriaQuery<> ) ; return org.springframework.data.jpa.repository.query.Query ( org.springframework.data.jpa.repository.query.Query ( org.springframework.data.jpa.repository.query.ParameterBinder ( java.lang.Object[] , java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> ) , org.springframework.data.jpa.repository.query.TypedQuery<> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( Query org.springframework.data.jpa.repository.query.Query ) { if ( org.springframework.data.jpa.repository.query.PartTree . isLimiting ( ) ) { if ( org.springframework.data.jpa.repository.query.Query . getMaxResults ( ) != java.lang.Integer . int ) { if ( org.springframework.data.jpa.repository.query.Query . getMaxResults ( ) > org.springframework.data.jpa.repository.query.PartTree . getMaxResults ( ) && org.springframework.data.jpa.repository.query.Query . getFirstResult ( ) > NUMBER ) { org.springframework.data.jpa.repository.query.Query . setFirstResult ( org.springframework.data.jpa.repository.query.Query . getFirstResult ( ) - ( org.springframework.data.jpa.repository.query.Query . getMaxResults ( ) - org.springframework.data.jpa.repository.query.PartTree . getMaxResults ( ) ) ) ; } } org.springframework.data.jpa.repository.query.Query . setMaxResults ( org.springframework.data.jpa.repository.query.PartTree . getMaxResults ( ) ) ; } if ( org.springframework.data.jpa.repository.query.PartTree . isExistsProjection ( ) ) { org.springframework.data.jpa.repository.query.Query . setMaxResults ( NUMBER ) ; } return org.springframework.data.jpa.repository.query.Query ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.TypedQuery<?> < ? > org.springframework.data.jpa.repository.query.TypedQuery<?> ( CriteriaQuery < ? > org.springframework.data.jpa.repository.query.CriteriaQuery<?> ) { if ( this . org.springframework.data.jpa.repository.query.CriteriaQuery<> != null ) { synchronized ( this . org.springframework.data.jpa.repository.query.CriteriaQuery<> ) { return getEntityManager ( ) . createQuery ( org.springframework.data.jpa.repository.query.CriteriaQuery<> ) ; } } return getEntityManager ( ) . createQuery ( org.springframework.data.jpa.repository.query.CriteriaQuery<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.query.JpaQueryCreator org.springframework.data.jpa.repository.query.JpaQueryCreator ( PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider , java.util.Optional<org.springframework.data.jpa.repository.query.ParametersParameterAccessor> < ParametersParameterAccessor > java.util.Optional<org.springframework.data.jpa.repository.query.ParametersParameterAccessor> ) { EntityManager org.springframework.data.jpa.repository.query.EntityManager = getEntityManager ( ) ; CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) ; ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider = java.util.Optional<org.springframework.data.jpa.repository.query.ParametersParameterAccessor> . map ( it -> new ParameterMetadataProvider ( builder , it , persistenceProvider ) ) . orElseGet ( ( ) new ParameterMetadataProvider ( builder , parameters , persistenceProvider ) ) ; ResultProcessor org.springframework.data.jpa.repository.query.ResultProcessor = getQueryMethod ( ) . getResultProcessor ( ) ; ReturnedType org.springframework.data.jpa.repository.query.ReturnedType = java.util.Optional<org.springframework.data.jpa.repository.query.ParametersParameterAccessor> . map ( it -> processor . withDynamicProjection ( it ) ) . orElse ( org.springframework.data.jpa.repository.query.ResultProcessor ) . getReturnedType ( ) ; return new JpaQueryCreator ( org.springframework.data.jpa.repository.query.PartTree , org.springframework.data.jpa.repository.query.ReturnedType , org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.ParameterMetadataProvider ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( ParameterBinder org.springframework.data.jpa.repository.query.ParameterBinder , TypedQuery < ? > org.springframework.data.jpa.repository.query.TypedQuery<?> ) { return org.springframework.data.jpa.repository.query.ParameterBinder . bindAndPrepare ( org.springframework.data.jpa.repository.query.TypedQuery<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.ParameterBinder org.springframework.data.jpa.repository.query.ParameterBinder ( java.lang.Object [] java.lang.Object[] , java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> < ParameterMetadata < ? > > java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> ) { return new CriteriaQueryParameterBinder ( org.springframework.data.jpa.repository.query.JpaParameters , java.lang.Object[] , java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.Sort org.springframework.data.jpa.repository.query.Sort ( java.lang.Object [] java.lang.Object[] ) { return org.springframework.data.jpa.repository.query.JpaParameters . potentiallySortsDynamically ( ) ? new ParametersParameterAccessor ( org.springframework.data.jpa.repository.query.JpaParameters , java.lang.Object[] ) . getSort ( ) : null ; }  <METHOD_END>
<METHOD_START> public void ( PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider , boolean boolean ) { super( org.springframework.data.jpa.repository.query.PersistenceProvider , boolean ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.JpaQueryCreator org.springframework.data.jpa.repository.query.JpaQueryCreator ( PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider , java.util.Optional<org.springframework.data.jpa.repository.query.ParametersParameterAccessor> < ParametersParameterAccessor > java.util.Optional<org.springframework.data.jpa.repository.query.ParametersParameterAccessor> ) { EntityManager org.springframework.data.jpa.repository.query.EntityManager = getEntityManager ( ) ; CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) ; ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider = java.util.Optional<org.springframework.data.jpa.repository.query.ParametersParameterAccessor> . map ( it -> new ParameterMetadataProvider ( builder , it , persistenceProvider ) ) . orElseGet ( ( ) new ParameterMetadataProvider ( builder , parameters , persistenceProvider ) ) ; return new JpaCountQueryCreator ( org.springframework.data.jpa.repository.query.PartTree , getQueryMethod ( ) . getResultProcessor ( ) . getReturnedType ( ) , org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.ParameterMetadataProvider ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected Query invokeBinding ( ParameterBinder org.springframework.data.jpa.repository.query.ParameterBinder , javax . javax.persistence . javax.persistence < ? > query ) { return org.springframework.data.jpa.repository.query.ParameterBinder . bind ( query ) ; }  <METHOD_END>
