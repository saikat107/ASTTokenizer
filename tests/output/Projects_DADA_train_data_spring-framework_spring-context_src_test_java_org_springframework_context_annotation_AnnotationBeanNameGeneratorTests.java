<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.ComponentWithName .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; assertNotNull ( STRING , java.lang.String ) ; assertTrue ( STRING , StringUtils . hasText ( java.lang.String ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( DefaultNamedComponent .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; assertNotNull ( STRING , java.lang.String ) ; assertTrue ( STRING , StringUtils . hasText ( java.lang.String ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.ComponentWithBlankName .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; assertNotNull ( STRING , java.lang.String ) ; assertTrue ( STRING , StringUtils . hasText ( java.lang.String ) ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . buildDefaultBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.AnonymousComponent .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; assertNotNull ( STRING , java.lang.String ) ; assertTrue ( STRING , StringUtils . hasText ( java.lang.String ) ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . buildDefaultBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.ComponentFromStringMeta .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.ComponentFromNonStringMeta .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.ComposedControllerAnnotationWithoutName .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . buildDefaultBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.ComposedControllerAnnotationWithBlankName .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . buildDefaultBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry = new SimpleBeanDefinitionRegistry ( ) ; AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.AnnotationBeanNameGeneratorTests.ComposedControllerAnnotationWithStringValue .class ) ; java.lang.String java.lang.String = this . org.springframework.context.annotation.AnnotationBeanNameGenerator . generateBeanName ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
