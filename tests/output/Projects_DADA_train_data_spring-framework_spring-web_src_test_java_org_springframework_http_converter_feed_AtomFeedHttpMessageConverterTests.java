<METHOD_START> @ Before public void void ( ) { org.springframework.http.converter.feed.AtomFeedHttpMessageConverter = new AtomFeedHttpMessageConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.feed.AtomFeedHttpMessageConverter . canRead ( Feed .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.feed.AtomFeedHttpMessageConverter . canRead ( Feed .class , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.feed.AtomFeedHttpMessageConverter . canWrite ( Feed .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.feed.AtomFeedHttpMessageConverter . canWrite ( Feed .class , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = java.lang.Class<? extends org.springframework.http.converter.feed.AtomFeedHttpMessageConverterTests> ( ) . java.io.InputStream ( STRING ) ; MockHttpInputMessage org.springframework.http.converter.feed.MockHttpInputMessage = new MockHttpInputMessage ( java.io.InputStream ) ; org.springframework.http.converter.feed.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; Feed org.springframework.http.converter.feed.Feed = org.springframework.http.converter.feed.AtomFeedHttpMessageConverter . read ( Feed .class , org.springframework.http.converter.feed.MockHttpInputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Feed . getTitle ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Feed . getSubtitle ( ) . getValue ( ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.http.converter.feed.Feed . getEntries ( ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; Entry org.springframework.http.converter.feed.Entry = ( Entry ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Entry . getId ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Entry . getTitle ( ) ) ; Entry org.springframework.http.converter.feed.Entry = ( Entry ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Entry . getId ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Entry . getTitle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.xml.sax.SAXException { Feed org.springframework.http.converter.feed.Feed = new Feed ( STRING ) ; org.springframework.http.converter.feed.Feed . setTitle ( STRING ) ; Entry org.springframework.http.converter.feed.Entry = new Entry ( ) ; org.springframework.http.converter.feed.Entry . setId ( STRING ) ; org.springframework.http.converter.feed.Entry . setTitle ( STRING ) ; Entry org.springframework.http.converter.feed.Entry = new Entry ( ) ; org.springframework.http.converter.feed.Entry . setId ( STRING ) ; org.springframework.http.converter.feed.Entry . setTitle ( STRING ) ; java.util.List<org.springframework.http.converter.feed.Entry> < Entry > java.util.List<org.springframework.http.converter.feed.Entry> = new java.util.ArrayList<org.springframework.http.converter.feed.Entry> <> ( NUMBER ) ; java.util.List<org.springframework.http.converter.feed.Entry> . add ( org.springframework.http.converter.feed.Entry ) ; java.util.List<org.springframework.http.converter.feed.Entry> . add ( org.springframework.http.converter.feed.Entry ) ; org.springframework.http.converter.feed.Feed . setEntries ( java.util.List<org.springframework.http.converter.feed.Entry> ) ; MockHttpOutputMessage org.springframework.http.converter.feed.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.feed.AtomFeedHttpMessageConverter . write ( org.springframework.http.converter.feed.Feed , null , org.springframework.http.converter.feed.MockHttpOutputMessage ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.feed.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING ; NodeMatcher org.springframework.http.converter.feed.NodeMatcher = new DefaultNodeMatcher ( ElementSelectors . byName ) ; assertThat ( org.springframework.http.converter.feed.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , isSimilarTo ( java.lang.String ) . ignoreWhitespace ( ) . withNodeMatcher ( org.springframework.http.converter.feed.NodeMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.xml.sax.SAXException { Feed org.springframework.http.converter.feed.Feed = new Feed ( STRING ) ; org.springframework.http.converter.feed.Feed . setTitle ( STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.http.converter.feed.Feed . setEncoding ( java.lang.String ) ; MockHttpOutputMessage org.springframework.http.converter.feed.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.feed.AtomFeedHttpMessageConverter . write ( org.springframework.http.converter.feed.Feed , null , org.springframework.http.converter.feed.MockHttpOutputMessage ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ) , org.springframework.http.converter.feed.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
