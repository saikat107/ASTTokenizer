<METHOD_START> @ java.lang.Override public org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , FrameworkMethod org.springframework.test.context.junit4.rules.FrameworkMethod , java.lang.Object java.lang.Object ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.junit4.rules.FrameworkMethod . getMethod ( ) ; if ( org.springframework.test.context.junit4.rules.Log . isDebugEnabled ( ) ) { org.springframework.test.context.junit4.rules.Log . debug ( STRING + java.lang.reflect.Method + STRING ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; org.springframework.test.context.junit4.rules.SpringClassRule ( java.lang.Class<> ) ; TestContextManager org.springframework.test.context.junit4.rules.TestContextManager = SpringClassRule . getTestContextManager ( java.lang.Class<> ) ; Statement org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method , java.lang.Object , org.springframework.test.context.junit4.rules.TestContextManager ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method , java.lang.Object , org.springframework.test.context.junit4.rules.TestContextManager ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.Object , org.springframework.test.context.junit4.rules.TestContextManager ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method , java.lang.Object ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method , java.lang.Object ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method , java.lang.Object ) ; return org.springframework.test.context.junit4.rules.Statement ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object , TestContextManager org.springframework.test.context.junit4.rules.TestContextManager ) { return new RunBeforeTestMethodCallbacks ( org.springframework.test.context.junit4.rules.Statement , java.lang.Object , java.lang.reflect.Method , org.springframework.test.context.junit4.rules.TestContextManager ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object , TestContextManager org.springframework.test.context.junit4.rules.TestContextManager ) { return new RunAfterTestMethodCallbacks ( org.springframework.test.context.junit4.rules.Statement , java.lang.Object , java.lang.reflect.Method , org.springframework.test.context.junit4.rules.TestContextManager ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.Object java.lang.Object , TestContextManager org.springframework.test.context.junit4.rules.TestContextManager ) { return new RunPrepareTestInstanceCallbacks ( org.springframework.test.context.junit4.rules.Statement , java.lang.Object , org.springframework.test.context.junit4.rules.TestContextManager ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { return new SpringRepeat ( org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { return new SpringFailOnTimeout ( org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { return new ProfileValueChecker ( org.springframework.test.context.junit4.rules.Statement , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.test.context.junit4.rules.SpringClassRule org.springframework.test.context.junit4.rules.SpringClassRule ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.reflect.Field java.lang.reflect.Field = java.util.Optional<java.lang.reflect.Field> ( java.lang.Class<> ) . java.lang.reflect.Field ( ( ) new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) ) ) ) ; Assert . state ( java.lang.reflect.Field . boolean ( ClassRule .class ) , ( ) String . format ( STRING + STRING , ruleField ) ) ; return ( SpringClassRule ) ReflectionUtils . getField ( java.lang.reflect.Field , null ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Arrays . java.util.stream.Stream<java.lang.reflect.Field> ( java.lang.Class<> . java.lang.reflect.Field[] ( ) ) . java.util.stream.Stream<java.lang.reflect.Field> ( ReflectionUtils :: isPublicStaticFinal ) . filter ( field -> SpringClassRule .class . isAssignableFrom ( field . getType ( ) ) ) . findFirst ( ) ; }  <METHOD_END>
