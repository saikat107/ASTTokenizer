<METHOD_START> public void ( ClientHttpResponse org.springframework.test.web.reactive.server.ClientHttpResponse ) { super( org.springframework.test.web.reactive.server.ClientHttpResponse ); this . org.springframework.test.web.reactive.server.DataBuffer = org.springframework.test.web.reactive.server.DataBufferFactory . allocateBuffer ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.MonoProcessor<byte[]> < byte [] > org.springframework.test.web.reactive.server.MonoProcessor<byte[]> ( ) { return this . org.springframework.test.web.reactive.server.MonoProcessor<byte[]> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.Flux<org.springframework.test.web.reactive.server.DataBuffer> < DataBuffer > org.springframework.test.web.reactive.server.Flux<org.springframework.test.web.reactive.server.DataBuffer> ( ) { return super. getBody ( ) . doOnNext ( org.springframework.test.web.reactive.server.DataBuffer :: write ) . doOnError ( org.springframework.test.web.reactive.server.MonoProcessor<byte[]> :: onError ) . doOnCancel ( this :: void ) . doOnComplete ( this :: void ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! this . org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . isTerminated ( ) ) { byte [] byte[] = new byte [ this . org.springframework.test.web.reactive.server.DataBuffer . readableByteCount ( ) ] ; this . org.springframework.test.web.reactive.server.DataBuffer . read ( byte[] ) ; this . org.springframework.test.web.reactive.server.MonoProcessor<byte[]> . onNext ( byte[] ) ; } }  <METHOD_END>
