<METHOD_START> public void ( ServletServerHttpRequest org.springframework.http.server.ServletServerHttpRequest , ServletServerHttpResponse org.springframework.http.server.ServletServerHttpResponse ) { Assert . notNull ( org.springframework.http.server.ServletServerHttpRequest , STRING ) ; Assert . notNull ( org.springframework.http.server.ServletServerHttpResponse , STRING ) ; Assert . isTrue ( org.springframework.http.server.ServletServerHttpRequest . getServletRequest ( ) . isAsyncSupported ( ) , STRING + STRING + STRING + STRING ) ; this . org.springframework.http.server.ServletServerHttpRequest = org.springframework.http.server.ServletServerHttpRequest ; this . org.springframework.http.server.ServletServerHttpResponse = org.springframework.http.server.ServletServerHttpResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.http.server.AsyncContext != null && this . org.springframework.http.server.ServletServerHttpRequest . getServletRequest ( ) . isAsyncStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) { Assert . state ( ! boolean ( ) , STRING ) ; if ( boolean ( ) ) { return; } HttpServletRequest org.springframework.http.server.HttpServletRequest = this . org.springframework.http.server.ServletServerHttpRequest . getServletRequest ( ) ; HttpServletResponse org.springframework.http.server.HttpServletResponse = this . org.springframework.http.server.ServletServerHttpResponse . getServletResponse ( ) ; this . org.springframework.http.server.AsyncContext = org.springframework.http.server.HttpServletRequest . startAsync ( org.springframework.http.server.HttpServletRequest , org.springframework.http.server.HttpServletResponse ) ; this . org.springframework.http.server.AsyncContext . addListener ( this ) ; if ( long != long ) { this . org.springframework.http.server.AsyncContext . setTimeout ( long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) && ! boolean ( ) ) { this . org.springframework.http.server.AsyncContext . complete ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.AsyncEvent ) throws java.io.IOException { this . org.springframework.http.server.AsyncContext = null ; this . java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.AsyncEvent ) throws java.io.IOException {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.AsyncEvent ) throws java.io.IOException {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.AsyncEvent ) throws java.io.IOException {	}  <METHOD_END>
