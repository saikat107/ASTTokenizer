<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getReactiveCqlOperations ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.ReactiveCqlOperations ) ; when ( org.springframework.data.cassandra.repository.query.ReactiveCqlOperations . execute ( any ( ReactiveSessionCallback .class ) ) ) . thenAnswer ( invocation -> ( ( ReactiveSessionCallback ) invocation . getArguments ( ) [ NUMBER ] ) . doInSession ( reactiveSession ) ) ; when ( org.springframework.data.cassandra.repository.query.ReactiveSession . getCluster ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.Cluster ) ; when ( org.springframework.data.cassandra.repository.query.Cluster . getConfiguration ( ) ) . thenReturn ( org.springframework.data.cassandra.repository.query.Configuration ) ; when ( org.springframework.data.cassandra.repository.query.Configuration . getCodecRegistry ( ) ) . thenReturn ( CodecRegistry . DEFAULT_INSTANCE ) ; this . org.springframework.data.cassandra.repository.query.RepositoryMetadata = AbstractRepositoryMetadata . getMetadata ( org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQueryUnitTests.SampleRepository .class ) ; this . org.springframework.data.cassandra.repository.query.MappingCassandraConverter = new MappingCassandraConverter ( new BasicCassandraMappingContext ( ) ) ; this . org.springframework.data.cassandra.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; this . org.springframework.data.cassandra.repository.query.MappingCassandraConverter . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReactiveStringBasedCassandraQuery org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQuery = org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQuery ( STRING , java.lang.String .class ) ; CassandraParametersParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor = new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQuery . getQueryMethod ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQuery . createQuery ( org.springframework.data.cassandra.repository.query.CassandraParametersParameterAccessor ) ; SimpleStatement org.springframework.data.cassandra.repository.query.SimpleStatement = new SimpleStatement ( java.lang.String ) ; java.lang.String java.lang.String = Person .class . java.lang.String ( ) . java.lang.String ( ) ; Select org.springframework.data.cassandra.repository.query.Select = QueryBuilder . select ( ) . all ( ) . from ( java.lang.String ) ; org.springframework.data.cassandra.repository.query.Select . setForceNoValues ( true ) ; org.springframework.data.cassandra.repository.query.Select . where ( QueryBuilder . eq ( STRING , STRING ) ) ; assertThat ( org.springframework.data.cassandra.repository.query.SimpleStatement . getQueryString ( ) ) . isEqualTo ( org.springframework.data.cassandra.repository.query.Select . getQueryString ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQuery org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQuery ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.data.cassandra.repository.query.ReactiveStringBasedCassandraQueryUnitTests.SampleRepository .class , java.lang.String , java.lang.Class<?>[] ) ; ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod = new ReactiveCassandraQueryMethod ( java.lang.reflect.Method , org.springframework.data.cassandra.repository.query.RepositoryMetadata , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.MappingCassandraConverter . getMappingContext ( ) ) ; return new ReactiveStringBasedCassandraQuery ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations , org.springframework.data.cassandra.repository.query.SpelExpressionParser , new ExtensionAwareEvaluationContextProvider ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.query.Person org.springframework.data.cassandra.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
