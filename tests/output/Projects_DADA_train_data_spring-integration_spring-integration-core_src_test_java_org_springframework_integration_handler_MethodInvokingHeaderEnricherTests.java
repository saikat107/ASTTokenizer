<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean = new org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean , STRING ) ; HeaderEnricher org.springframework.integration.handler.HeaderEnricher = new HeaderEnricher ( ) ; org.springframework.integration.handler.HeaderEnricher . setMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessor ) ; org.springframework.integration.handler.HeaderEnricher . setDefaultOverwrite ( true ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.HeaderEnricher . transform ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean = new org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean , STRING ) ; HeaderEnricher org.springframework.integration.handler.HeaderEnricher = new HeaderEnricher ( ) ; org.springframework.integration.handler.HeaderEnricher . setMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessor ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.HeaderEnricher . transform ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean = new org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean , STRING ) ; HeaderEnricher org.springframework.integration.handler.HeaderEnricher = new HeaderEnricher ( ) ; org.springframework.integration.handler.HeaderEnricher . setMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessor ) ; org.springframework.integration.handler.HeaderEnricher . setDefaultOverwrite ( false ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.HeaderEnricher . transform ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean = new org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingHeaderEnricherTests.TestBean , STRING ) ; HeaderEnricher org.springframework.integration.handler.HeaderEnricher = new HeaderEnricher ( ) ; org.springframework.integration.handler.HeaderEnricher . setMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessor ) ; org.springframework.integration.handler.HeaderEnricher . setDefaultOverwrite ( true ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.HeaderEnricher . transform ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( @ Payload ( STRING ) java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
