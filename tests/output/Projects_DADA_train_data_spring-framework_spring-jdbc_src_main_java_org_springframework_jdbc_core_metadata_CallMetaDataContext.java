<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . java.lang.String != null ? this . java.lang.String : STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.core.metadata.SqlParameter org.springframework.jdbc.core.metadata.SqlParameter ( java.lang.String java.lang.String , RowMapper < ? > org.springframework.jdbc.core.metadata.RowMapper<?> ) { if ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . isReturnResultSetSupported ( ) ) { return new SqlReturnResultSet ( java.lang.String , org.springframework.jdbc.core.metadata.RowMapper<> ) ; } else { if ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . isRefCursorSupported ( ) ) { return new SqlOutParameter ( java.lang.String , this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . getRefCursorSqlType ( ) , org.springframework.jdbc.core.metadata.RowMapper<> ) ; } else { throw new InvalidDataAccessApiUsageException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return java.lang.String ( ) ; } else { if ( this . java.util.List<java.lang.String> . int ( ) > NUMBER ) { org.springframework.jdbc.core.metadata.Log . warn ( STRING ) ; } return ( this . java.util.List<java.lang.String> . int ( ) > NUMBER ? this . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) : null ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ( ) { return this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.jdbc.core.metadata.CallMetaDataProvider = CallMetaDataProviderFactory . createMetaDataProvider ( javax.sql.DataSource , this ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) { this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> = java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ( java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ( java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) { final java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> = new java.util.ArrayList<org.springframework.jdbc.core.metadata.SqlParameter> <> ( ) ; final java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> < java.lang.String , SqlParameter > java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> = new java.util.LinkedHashMap<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> <> ( ) ; boolean boolean = false ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( CallParameterMetaData org.springframework.jdbc.core.metadata.CallParameterMetaData : this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . getCallParameterMetaData ( ) ) { if ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterType ( ) != java.sql.DatabaseMetaData . int ) { java.util.List<java.lang.String> . boolean ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterName ( ) . toLowerCase ( ) ) ; } } for ( SqlParameter org.springframework.jdbc.core.metadata.SqlParameter : java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) { if ( org.springframework.jdbc.core.metadata.SqlParameter . isResultsParameter ( ) ) { java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . add ( org.springframework.jdbc.core.metadata.SqlParameter ) ; } else { java.lang.String java.lang.String = org.springframework.jdbc.core.metadata.SqlParameter . getName ( ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + org.springframework.jdbc.core.metadata.SqlParameter . getSqlType ( ) ) ; } java.lang.String java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( java.lang.String ) . toLowerCase ( ) ; java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> . put ( java.lang.String , org.springframework.jdbc.core.metadata.SqlParameter ) ; if ( org.springframework.jdbc.core.metadata.SqlParameter instanceof SqlOutParameter ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; if ( boolean ( ) && ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { if ( ! boolean ) { if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.lang.String + STRING ) ; } void ( java.lang.String ) ; boolean = true ; } } } } } void ( java.util.List<java.lang.String> ) ; java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> = new java.util.ArrayList<org.springframework.jdbc.core.metadata.SqlParameter> <> ( ) ; java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . addAll ( java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) ; if ( ! this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . isProcedureColumnMetaDataUsed ( ) ) { java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . addAll ( java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> . values ( ) ) ; return java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( this . java.util.Set<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( java.lang.String ) . toLowerCase ( ) , java.lang.String ) ; } for ( CallParameterMetaData org.springframework.jdbc.core.metadata.CallParameterMetaData : this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . getCallParameterMetaData ( ) ) { java.lang.String java.lang.String = null ; if ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterName ( ) != null ) { java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterName ( ) ) . toLowerCase ( ) ; } java.lang.String java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterName ( ) ) ; if ( java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> . containsKey ( java.lang.String ) || ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterType ( ) == java.sql.DatabaseMetaData . int && boolean ) ) { SqlParameter org.springframework.jdbc.core.metadata.SqlParameter ; if ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterType ( ) == java.sql.DatabaseMetaData . int ) { org.springframework.jdbc.core.metadata.SqlParameter = java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> . get ( java.lang.String ( ) ) ; if ( org.springframework.jdbc.core.metadata.SqlParameter == null && java.util.List<java.lang.String> ( ) . int ( ) > NUMBER ) { org.springframework.jdbc.core.metadata.SqlParameter = java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> . get ( java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) . java.lang.String ( ) ) ; } if ( org.springframework.jdbc.core.metadata.SqlParameter == null ) { throw new InvalidDataAccessApiUsageException ( STRING + STRING + java.lang.String ( ) + STRING ) ; } else { void ( org.springframework.jdbc.core.metadata.SqlParameter . getName ( ) ) ; } } else { org.springframework.jdbc.core.metadata.SqlParameter = java.util.Map<java.lang.String,org.springframework.jdbc.core.metadata.SqlParameter> . get ( java.lang.String ) ; } if ( org.springframework.jdbc.core.metadata.SqlParameter != null ) { java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . add ( org.springframework.jdbc.core.metadata.SqlParameter ) ; if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + ( java.lang.String != null ? java.lang.String : java.lang.String ( ) ) + STRING ) ; } } } else { if ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterType ( ) == java.sql.DatabaseMetaData . int ) { if ( ! boolean ( ) && ! boolean ( ) && this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . byPassReturnParameter ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterName ( ) ) ) { if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterName ( ) + STRING ) ; } } else { java.lang.String java.lang.String = ( StringUtils . hasLength ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterName ( ) ) ? java.lang.String : java.lang.String ( ) ) ; java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . add ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . createDefaultOutParameter ( java.lang.String , org.springframework.jdbc.core.metadata.CallParameterMetaData ) ) ; if ( boolean ( ) ) { void ( java.lang.String ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.lang.String + STRING ) ; } } } else { if ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterType ( ) == java.sql.DatabaseMetaData . int ) { java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . add ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . createDefaultOutParameter ( java.lang.String , org.springframework.jdbc.core.metadata.CallParameterMetaData ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.lang.String + STRING ) ; } } else if ( org.springframework.jdbc.core.metadata.CallParameterMetaData . getParameterType ( ) == java.sql.DatabaseMetaData . int ) { java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . add ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . createDefaultInOutParameter ( java.lang.String , org.springframework.jdbc.core.metadata.CallParameterMetaData ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.lang.String + STRING ) ; } } else { if ( this . java.util.Set<java.lang.String> . boolean ( ) || java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ) { java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . add ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . createDefaultInParameter ( java.lang.String , org.springframework.jdbc.core.metadata.CallParameterMetaData ) ) ; if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.lang.String + STRING ) ; } } else { if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) + STRING + java.lang.String + STRING ) ; } } } } } } return java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( SqlParameterSource org.springframework.jdbc.core.metadata.SqlParameterSource ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = SqlParameterSourceUtils . extractCaseInsensitiveParameterNames ( org.springframework.jdbc.core.metadata.SqlParameterSource ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap <> ( this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . size ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap <> ( this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . size ( ) ) ; for ( SqlParameter org.springframework.jdbc.core.metadata.SqlParameter : this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) { if ( org.springframework.jdbc.core.metadata.SqlParameter . isInputValueProvided ( ) ) { java.lang.String java.lang.String = org.springframework.jdbc.core.metadata.SqlParameter . getName ( ) ; java.lang.String java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( java.lang.String ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String . java.lang.String ( ) , java.lang.String ) ; } if ( java.lang.String != null ) { if ( org.springframework.jdbc.core.metadata.SqlParameterSource . hasValue ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { java.lang.String java.lang.String = java.lang.String . java.lang.String ( ) ; if ( org.springframework.jdbc.core.metadata.SqlParameterSource . hasValue ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.util.Locale . java.util.Locale ) ; if ( org.springframework.jdbc.core.metadata.SqlParameterSource . hasValue ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { java.lang.String java.lang.String = JdbcUtils . convertUnderscoreNameToPropertyName ( java.lang.String ) ; if ( org.springframework.jdbc.core.metadata.SqlParameterSource . hasValue ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { if ( java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , SqlParameterSourceUtils . getTypedValue ( org.springframework.jdbc.core.metadata.SqlParameterSource , java.lang.String ) ) ; } else { org.springframework.jdbc.core.metadata.Log . warn ( STRING + java.lang.String + STRING + java.util.Map<java.lang.String,java.lang.String> . java.util.Collection<java.lang.String> ( ) ) ; } } } } } } } } if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.util.Map<java.lang.String,java.lang.String> . java.util.Collection<java.lang.String> ( ) + STRING + java.util.Map<java.lang.String,java.lang.String> . java.util.Collection<java.lang.String> ( ) ) ; org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( ! this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . isProcedureColumnMetaDataUsed ( ) ) { return java.util.Map<java.lang.String,> ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap <> ( this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> . size ( ) ) ; for ( SqlParameter org.springframework.jdbc.core.metadata.SqlParameter : this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) { if ( org.springframework.jdbc.core.metadata.SqlParameter . isInputValueProvided ( ) ) { java.lang.String java.lang.String = org.springframework.jdbc.core.metadata.SqlParameter . getName ( ) ; java.lang.String java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( java.lang.String ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String . java.lang.String ( ) , java.lang.String ) ; } } } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( java.util.Map<java.lang.String,> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { java.lang.String java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( java.lang.String ) ; java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String . java.lang.String ( ) ) ; if ( java.lang.String == null ) { if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( java.lang.String ) ; if ( java.lang.Object instanceof SqlParameterValue ) { java.lang.Object = ( ( SqlParameterValue ) java.lang.Object ) . getValue ( ) ; } if ( java.lang.Object != null ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.lang.String + STRING + java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) ) ; } } } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Map<java.lang.String,> . get ( java.lang.String ) ) ; } } if ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) < java.util.Map<java.lang.String,java.lang.String> . int ( ) ) { for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) ) { java.lang.String java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . parameterNameToUse ( java.lang.String ) ; java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String . java.lang.String ( ) ) ; if ( ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.Log . warn ( STRING + java.lang.String + STRING + java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) ; } } } if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) + STRING + java.util.Map<java.lang.String,java.lang.String> . java.util.Collection<java.lang.String> ( ) ) ; org.springframework.jdbc.core.metadata.Log . debug ( STRING + java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( java.lang.Object [] java.lang.Object[] ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( java.lang.Object[] . int ) ; int int = NUMBER ; for ( SqlParameter org.springframework.jdbc.core.metadata.SqlParameter : this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) { if ( org.springframework.jdbc.core.metadata.SqlParameter . isInputValueProvided ( ) ) { java.lang.String java.lang.String = org.springframework.jdbc.core.metadata.SqlParameter . getName ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object[] [ int ++ ] ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String ; int int = NUMBER ; java.lang.String java.lang.String ; java.lang.String java.lang.String ; if ( this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . isSupportsSchemasInProcedureCalls ( ) && ! this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . isSupportsCatalogsInProcedureCalls ( ) ) { java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . catalogNameToUse ( java.lang.String ( ) ) ; java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . schemaNameToUse ( java.lang.String ( ) ) ; } else { java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . catalogNameToUse ( java.lang.String ( ) ) ; java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . schemaNameToUse ( java.lang.String ( ) ) ; } java.lang.String java.lang.String = this . org.springframework.jdbc.core.metadata.CallMetaDataProvider . procedureNameToUse ( java.lang.String ( ) ) ; if ( boolean ( ) || boolean ( ) ) { java.lang.String = STRING + ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String + STRING : STRING ) + ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String + STRING : STRING ) + java.lang.String + STRING ; int = - NUMBER ; } else { java.lang.String = STRING + ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String + STRING : STRING ) + ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String + STRING : STRING ) + java.lang.String + STRING ; } for ( SqlParameter org.springframework.jdbc.core.metadata.SqlParameter : this . java.util.List<org.springframework.jdbc.core.metadata.SqlParameter> ) { if ( ! ( org.springframework.jdbc.core.metadata.SqlParameter . isResultsParameter ( ) ) ) { if ( int > NUMBER ) { java.lang.String += STRING ; } if ( int >= NUMBER ) { java.lang.String += java.lang.String ( org.springframework.jdbc.core.metadata.SqlParameter ) ; } int ++ ; } } java.lang.String += STRING ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( SqlParameter org.springframework.jdbc.core.metadata.SqlParameter ) { if ( boolean ( ) ) { return org.springframework.jdbc.core.metadata.SqlParameter . getName ( ) + STRING ; } else { return STRING ; } }  <METHOD_END>
