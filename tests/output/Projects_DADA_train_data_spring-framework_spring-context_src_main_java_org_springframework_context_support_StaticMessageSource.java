<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String + '_' + java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.text.MessageFormat java.text.MessageFormat ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { java.lang.String java.lang.String = java.lang.String + '_' + java.util.Locale . java.lang.String ( ) ; java.lang.String java.lang.String = this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { return null ; } synchronized ( this . java.util.Map<java.lang.String,java.text.MessageFormat> ) { java.text.MessageFormat java.text.MessageFormat = this . java.util.Map<java.lang.String,java.text.MessageFormat> . java.text.MessageFormat ( java.lang.String ) ; if ( java.text.MessageFormat == null ) { java.text.MessageFormat = createMessageFormat ( java.lang.String , java.util.Locale ) ; this . java.util.Map<java.lang.String,java.text.MessageFormat> . java.text.MessageFormat ( java.lang.String , java.text.MessageFormat ) ; } return java.text.MessageFormat ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.util.Locale java.util.Locale , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.util.Locale , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String + '_' + java.util.Locale . java.lang.String ( ) , java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.util.Locale + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.util.Locale java.util.Locale ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { void ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.util.Locale , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.context.support.StaticMessageSource> ( ) . java.lang.String ( ) + STRING + this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
