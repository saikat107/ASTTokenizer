<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigServletWebServerApplicationContext org.springframework.boot.autoconfigure.security.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; try { EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.security.AnnotationConfigServletWebServerApplicationContext , STRING , STRING ) ; org.springframework.boot.autoconfigure.security.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.Config .class ) ; org.springframework.boot.autoconfigure.security.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; int int = org.springframework.boot.autoconfigure.security.AnnotationConfigServletWebServerApplicationContext . getWebServer ( ) . getPort ( ) ; new TestRestTemplate ( STRING , STRING ) . getForEntity ( STRING + int , java.lang.Object .class ) ; } finally { org.springframework.boot.autoconfigure.security.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.TomcatServletWebServerFactory org.springframework.boot.autoconfigure.security.TomcatServletWebServerFactory ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.security.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; org.springframework.boot.autoconfigure.security.TomcatServletWebServerFactory . setPort ( NUMBER ) ; return org.springframework.boot.autoconfigure.security.TomcatServletWebServerFactory ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.DeserializerBean org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.DeserializerBean ) { addDeserializer ( org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType .class , org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.DeserializerBean ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType .class ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType ( JsonParser org.springframework.boot.autoconfigure.security.JsonParser , DeserializationContext org.springframework.boot.autoconfigure.security.DeserializationContext )				throws java.io.IOException , org.springframework.boot.autoconfigure.security.JsonProcessingException { return new org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) { this . org.springframework.boot.autoconfigure.security.ConversionService . convert ( new org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType ( ) , org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.DestinationType .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.DestinationType org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.DestinationType ( org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.SourceType ) { return new org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfigurationEarlyInitializationTests.DestinationType ( ) ; }  <METHOD_END>
