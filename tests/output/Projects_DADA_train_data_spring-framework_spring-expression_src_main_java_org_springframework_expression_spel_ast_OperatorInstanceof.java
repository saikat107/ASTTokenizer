<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( STRING , int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.BooleanTypedValue org.springframework.expression.spel.ast.BooleanTypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = getRightOperand ( ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = getLeftOperand ( ) . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.TypedValue . getValue ( ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.TypedValue . getValue ( ) ; BooleanTypedValue org.springframework.expression.spel.ast.BooleanTypedValue = null ; if ( java.lang.Object == null || ! ( java.lang.Object instanceof java.lang.Class ) ) { throw new SpelEvaluationException ( getRightOperand ( ) . getStartPosition ( ) , SpelMessage . INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND , ( java.lang.Object == null ? STRING : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object ; if ( java.lang.Object == null ) { org.springframework.expression.spel.ast.BooleanTypedValue = BooleanTypedValue . FALSE ; } else { org.springframework.expression.spel.ast.BooleanTypedValue = BooleanTypedValue . forValue ( java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; } this . java.lang.Class<?> = java.lang.Class<> ; if ( org.springframework.expression.spel.ast.SpelNodeImpl instanceof TypeReference ) { this . exitTypeDescriptor = STRING ; } return org.springframework.expression.spel.ast.BooleanTypedValue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . exitTypeDescriptor != null && getLeftOperand ( ) . isCompilable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { getLeftOperand ( ) . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; CodeFlow . insertBoxIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) ) ; if ( this . java.lang.Class<> . boolean ( ) ) { org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( POP ) ; org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( ICONST_0 ) ; } else { org.springframework.expression.spel.ast.MethodVisitor . visitTypeInsn ( INSTANCEOF , Type . getInternalName ( this . java.lang.Class<> ) ) ; } org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
