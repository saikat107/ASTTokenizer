<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.List<java.lang.Object> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , java.util.List<java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { return ( HttpEntity .class == org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) || RequestEntity .class == org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { return ( HttpEntity .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) && ! RequestEntity .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory )			throws java.io.IOException , org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotSupportedException { ServletServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest = createInputMessage ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; if ( java.lang.reflect.Type == null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getMethod ( ) + STRING ) ; } java.lang.Object java.lang.Object = readWithMessageConverters ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type ) ; if ( RequestEntity .class == org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) { return new RequestEntity <> ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getHeaders ( ) , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getMethod ( ) , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getURI ( ) ) ; } else { return new HttpEntity <> ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getHeaders ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Type java.lang.reflect.Type ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { Assert . isAssignable ( HttpEntity .class , org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ; java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getGenericParameterType ( ) ; if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ; if ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) . int != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getMethod ( ) ) ; } return java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ; } else if ( java.lang.reflect.Type instanceof java.lang.Class ) { return java.lang.Object .class ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; if ( java.lang.Object == null ) { return; } ServletServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest = createInputMessage ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; ServletServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse = createOutputMessage ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; Assert . isInstanceOf ( HttpEntity .class , java.lang.Object ) ; HttpEntity < ? > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<?> = ( HttpEntity < ? > ) java.lang.Object ; HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . getHeaders ( ) ; HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = org.springframework.web.servlet.mvc.method.annotation.HttpEntity<> . getHeaders ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . containsKey ( HttpHeaders . VARY ) && org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . containsKey ( HttpHeaders . VARY ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ) ; if ( ! java.util.List<java.lang.String> . boolean ( ) ) { org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . setVary ( java.util.List<java.lang.String> ) ; } } if ( ! org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . isEmpty ( ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . entrySet ( ) ) { if ( ! org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . containsKey ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ) ) { org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . put ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) ; } } } if ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<> instanceof ResponseEntity ) { int int = ( ( ResponseEntity < ? > ) org.springframework.web.servlet.mvc.method.annotation.HttpEntity<> ) . getStatusCodeValue ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . getServletResponse ( ) . setStatus ( int ) ; if ( int == NUMBER ) { if ( boolean ( org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse ) ) { org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . flush ( ) ; return; } } else if ( int / NUMBER == NUMBER ) { java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . getFirst ( STRING ) ; if ( java.lang.String != null ) { void ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.String ) ; } } } writeWithMessageConverters ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<> . getBody ( ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse ) ; org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . flush ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ) { if ( ! org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . containsKey ( HttpHeaders . VARY ) ) { return org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . getVary ( ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . getVary ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.List<java.lang.String> ) ; for ( java.lang.String java.lang.String : org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . get ( HttpHeaders . VARY ) ) { for ( java.lang.String java.lang.String : StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.List<java.lang.String> ( ) ; } for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ServletServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest , ServletServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse ) { ServletWebRequest org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getServletRequest ( ) , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . getServletResponse ( ) ) ; HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . getHeaders ( ) ; java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . getETag ( ) ; long long = org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . getLastModified ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getMethod ( ) == HttpMethod . GET || org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getMethod ( ) == HttpMethod . HEAD ) { org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . remove ( HttpHeaders . ETAG ) ; org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . remove ( HttpHeaders . LAST_MODIFIED ) ; } return org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . checkNotModified ( java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> private void void ( ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.String java.lang.String ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRedirectModelScenario ( true ) ; ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ModelMap instanceof RedirectAttributes ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( ( RedirectAttributes ) org.springframework.web.servlet.mvc.method.annotation.ModelMap ) . getFlashAttributes ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,> ) ) { HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( HttpServletResponse .class ) ; RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) . putAll ( java.util.Map<java.lang.String,> ) ; RequestContextUtils . saveOutputFlashMap ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { if ( java.lang.Object != null ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } else { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; java.lang.reflect.Type = ( java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object .class ) ; return ResolvableType . forMethodParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type ) . resolve ( java.lang.Object .class ) ; } }  <METHOD_END>
