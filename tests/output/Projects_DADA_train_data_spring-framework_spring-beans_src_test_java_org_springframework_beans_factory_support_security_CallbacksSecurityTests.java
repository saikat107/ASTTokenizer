<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { assertEquals ( java.lang.String , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.beans.factory.support.security.BeanFactory )				throws org.springframework.beans.factory.support.security.BeansException { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { assertEquals ( java.lang.String , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { void ( ) ; return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { void ( ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { void ( ) ; return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class java.lang.Class ( ) { void ( ) ; return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { void ( ) ; return false ; }  <METHOD_END>
<METHOD_START> private void void ( ) { assertEquals ( java.lang.String , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; assertEquals ( java.lang.String , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { assertEquals ( java.lang.String , java.lang.String ( ) ) ; return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { assertEquals ( java.lang.String , java.lang.String ( ) ) ; return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( ) { final java.security.AccessControlContext java.security.AccessControlContext = java.security.AccessController . java.security.AccessControlContext ( ) ; return java.security.AccessController . java.lang.String ( new java.security.PrivilegedAction<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { javax.security.auth.Subject javax.security.auth.Subject = javax.security.auth.Subject . javax.security.auth.Subject ( java.security.AccessControlContext ) ; if ( javax.security.auth.Subject == null ) { return null ; } java.util.Set<java.security.Principal> < java.security.Principal > java.util.Set<java.security.Principal> = javax.security.auth.Subject . java.util.Set<java.security.Principal> ( ) ; if ( java.util.Set<java.security.Principal> == null ) { return null ; } for ( java.security.Principal java.security.Principal : java.util.Set<java.security.Principal> ) { return java.security.Principal . java.lang.String ( ) ; } return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { javax.security.auth.Subject javax.security.auth.Subject = javax.security.auth.Subject . javax.security.auth.Subject ( java.security.AccessControlContext ) ; if ( javax.security.auth.Subject == null ) { return null ; } java.util.Set<java.security.Principal> < java.security.Principal > java.util.Set<java.security.Principal> = javax.security.auth.Subject . java.util.Set<java.security.Principal> ( ) ; if ( java.util.Set<java.security.Principal> == null ) { return null ; } for ( java.security.Principal java.security.Principal : java.util.Set<java.security.Principal> ) { return java.security.Principal . java.lang.String ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.beans.factory.support.security.CallbacksSecurityTests.TestPrincipal ) ) { return false ; } org.springframework.beans.factory.support.security.CallbacksSecurityTests.TestPrincipal org.springframework.beans.factory.support.security.CallbacksSecurityTests.TestPrincipal = ( org.springframework.beans.factory.support.security.CallbacksSecurityTests.TestPrincipal ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.beans.factory.support.security.CallbacksSecurityTests.TestPrincipal . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { if ( java.lang.System . java.lang.SecurityManager ( ) == null ) { java.security.Policy java.security.Policy = java.security.Policy . java.security.Policy ( ) ; java.net.URL java.net.URL = java.lang.Class<? extends org.springframework.beans.factory.support.security.CallbacksSecurityTests> ( ) . java.net.URL ( STRING ) ; java.lang.System . java.lang.String ( STRING , java.net.URL . java.lang.String ( ) ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.security.Policy . void ( ) ; java.lang.System . void ( new java.lang.SecurityManager ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { final java.security.ProtectionDomain java.security.ProtectionDomain = new java.security.ProtectionDomain ( null , new java.security.Permissions ( ) ) ; org.springframework.beans.factory.support.security.SecurityContextProvider = new SecurityContextProvider ( ) { private final java.security.AccessControlContext java.security.AccessControlContext = new java.security.AccessControlContext ( new java.security.ProtectionDomain [] { java.security.ProtectionDomain } ) ; @ java.lang.Override public java.security.AccessControlContext java.security.AccessControlContext ( ) { return java.security.AccessControlContext ; } } ; DefaultResourceLoader org.springframework.beans.factory.support.security.DefaultResourceLoader = new DefaultResourceLoader ( ) ; Resource org.springframework.beans.factory.support.security.Resource = org.springframework.beans.factory.support.security.DefaultResourceLoader . getResource ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.security.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.support.security.Resource ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . setSecurityContextProvider ( org.springframework.beans.factory.support.security.SecurityContextProvider ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.AccessControlContext java.security.AccessControlContext ( ) { return java.security.AccessControlContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.security.AccessControlContext java.security.AccessControlContext = org.springframework.beans.factory.support.security.SecurityContextProvider . getAccessControlContext ( ) ; try { java.security.AccessControlContext . void ( new java.util.PropertyPermission ( STRING , STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.SecurityException java.lang.SecurityException ) { } final CustomCallbackBean org.springframework.beans.factory.support.security.CustomCallbackBean = new CustomCallbackBean ( ) ; final java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.factory.support.security.CustomCallbackBean . getClass ( ) . getMethod ( STRING ) ; java.lang.reflect.Method . void ( true ) ; try { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { java.lang.reflect.Method . java.lang.Object ( org.springframework.beans.factory.support.security.CustomCallbackBean ) ; return null ; } } , java.security.AccessControlContext ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} final java.lang.Class<org.springframework.beans.factory.support.security.ConstructorBean> < ConstructorBean > java.lang.Class<org.springframework.beans.factory.support.security.ConstructorBean> = ConstructorBean .class ; try { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Class<org.springframework.beans.factory.support.security.ConstructorBean> . newInstance ( ) ; } } , java.security.AccessControlContext ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { java.lang.reflect.Method . java.lang.Object ( org.springframework.beans.factory.support.security.CustomCallbackBean ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Class<org.springframework.beans.factory.support.security.ConstructorBean> . newInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getCause ( ) instanceof java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getCause ( ) instanceof java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . destroySingletons ( ) ; assertNull ( java.lang.System . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . destroySingletons ( ) ; assertNull ( java.lang.System . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getCause ( ) instanceof java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getType ( STRING ) ) ; assertNull ( java.lang.System . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getMostSpecificCause ( ) instanceof java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getMostSpecificCause ( ) instanceof java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getMostSpecificCause ( ) instanceof java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getMostSpecificCause ( ) instanceof java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.security.AccessControlContext java.security.AccessControlContext = org.springframework.beans.factory.support.security.SecurityContextProvider . getAccessControlContext ( ) ; java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; return null ; } } , java.security.AccessControlContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.security.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.security.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final DefaultListableBeanFactory org.springframework.beans.factory.support.security.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; BeanDefinitionBuilder org.springframework.beans.factory.support.security.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean .class ) . setScope ( ConfigurableBeanFactory . SCOPE_PROTOTYPE ) . setInitMethodName ( STRING ) . setDestroyMethodName ( STRING ) . addConstructorArgValue ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.security.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; final javax.security.auth.Subject javax.security.auth.Subject = new javax.security.auth.Subject ( ) ; javax.security.auth.Subject . java.util.Set<java.security.Principal> ( ) . boolean ( new org.springframework.beans.factory.support.security.CallbacksSecurityTests.TestPrincipal ( STRING ) ) ; org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean = javax.security.auth.Subject . org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean ( javax.security.auth.Subject , new java.security.PrivilegedAction<org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean> < org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean > ( ) { @ java.lang.Override public org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean ( ) { return org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING , org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean .class ) ; } } , null ) ; assertNotNull ( org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean ( ) { return org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING , org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.support.security.DefaultListableBeanFactory . setSecurityContextProvider ( null ) ; java.security.Permissions java.security.Permissions = new java.security.Permissions ( ) ; java.security.Permissions . void ( new javax.security.auth.AuthPermission ( STRING ) ) ; java.security.ProtectionDomain java.security.ProtectionDomain = new java.security.ProtectionDomain ( null , java.security.Permissions ) ; new java.security.AccessControlContext ( new java.security.ProtectionDomain [] { java.security.ProtectionDomain } ) ; final javax.security.auth.Subject javax.security.auth.Subject = new javax.security.auth.Subject ( ) ; javax.security.auth.Subject . java.util.Set<java.security.Principal> ( ) . boolean ( new org.springframework.beans.factory.support.security.CallbacksSecurityTests.TestPrincipal ( STRING ) ) ; javax.security.auth.Subject . java.lang.Object ( javax.security.auth.Subject , new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { assertEquals ( STRING , java.lang.String ( ) ) ; assertEquals ( false , org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean . boolean ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . destroySingletons ( ) ; assertEquals ( true , org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean . boolean ) ; return null ; } } , org.springframework.beans.factory.support.security.SecurityContextProvider . getAccessControlContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { assertEquals ( STRING , java.lang.String ( ) ) ; assertEquals ( false , org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean . boolean ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.support.security.DefaultListableBeanFactory . destroySingletons ( ) ; assertEquals ( true , org.springframework.beans.factory.support.security.CallbacksSecurityTests.NonPrivilegedBean . boolean ) ; return null ; }  <METHOD_END>
