<METHOD_START> public void ( MongoDbFactory org.springframework.data.mongodb.core.convert.MongoDbFactory ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoDbFactory , STRING ) ; this . org.springframework.data.mongodb.core.convert.MongoDbFactory = org.springframework.data.mongodb.core.convert.MongoDbFactory ; this . org.springframework.data.mongodb.core.convert.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.convert.MongoDbFactory . getExceptionTranslator ( ) ; this . org.springframework.data.mongodb.core.convert.ObjenesisStd = new ObjenesisStd ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty , DBRef org.springframework.data.mongodb.core.convert.DBRef , DbRefResolverCallback org.springframework.data.mongodb.core.convert.DbRefResolverCallback , DbRefProxyHandler org.springframework.data.mongodb.core.convert.DbRefProxyHandler ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.DbRefResolverCallback , STRING ) ; if ( boolean ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return java.util.Optional . java.util.Optional ( java.lang.Object ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.DbRefResolverCallback , org.springframework.data.mongodb.core.convert.DbRefProxyHandler ) ) ; } return java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.core.convert.DbRefResolverCallback . resolve ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.DBRef org.springframework.data.mongodb.core.convert.DBRef ( org . springframework . data . mongodb . core . org.springframework.data.mongodb.core.mapping . org.springframework.data.mongodb.core.mapping org.springframework.data.mongodb.core.mapping.DBRef , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , java.lang.Object java.lang.Object ) { if ( org.springframework.data.mongodb.core.mapping.DBRef != null && StringUtils . hasText ( org.springframework.data.mongodb.core.mapping.DBRef . db ( ) ) ) { return new DBRef ( org.springframework.data.mongodb.core.mapping.DBRef . db ( ) , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getCollection ( ) , java.lang.Object ) ; } return new DBRef ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getCollection ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( DBRef org.springframework.data.mongodb.core.convert.DBRef ) { StringUtils . hasText ( org.springframework.data.mongodb.core.convert.DBRef . getDatabaseName ( ) ) ; return ( StringUtils . hasText ( org.springframework.data.mongodb.core.convert.DBRef . getDatabaseName ( ) ) ? org.springframework.data.mongodb.core.convert.MongoDbFactory . getDb ( org.springframework.data.mongodb.core.convert.DBRef . getDatabaseName ( ) ) : org.springframework.data.mongodb.core.convert.MongoDbFactory . getDb ( ) ) . getCollection ( org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) , Document .class ) . find ( Filters . eq ( STRING , org.springframework.data.mongodb.core.convert.DBRef . getId ( ) ) ) . first ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.List<org.springframework.data.mongodb.core.convert.Document> ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> < DBRef > java.util.List<org.springframework.data.mongodb.core.convert.DBRef> ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoDbFactory , STRING ) ; Assert . notNull ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> , STRING ) ; if ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> . isEmpty ( ) ) { return java.util.Collections . java.util.List<org.springframework.data.mongodb.core.convert.Document> ( ) ; } java.lang.String java.lang.String = java.util.List<org.springframework.data.mongodb.core.convert.DBRef> . iterator ( ) . next ( ) . getCollectionName ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> . size ( ) ) ; for ( DBRef org.springframework.data.mongodb.core.convert.DBRef : java.util.List<org.springframework.data.mongodb.core.convert.DBRef> ) { if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.DBRef . getId ( ) ) ; } MongoDatabase org.springframework.data.mongodb.core.convert.MongoDatabase = org.springframework.data.mongodb.core.convert.MongoDbFactory . getDb ( ) ; java.util.List<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.List<org.springframework.data.mongodb.core.convert.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.convert.Document> <> ( ) ; org.springframework.data.mongodb.core.convert.MongoDatabase . getCollection ( java.lang.String ) . find ( new Document ( STRING , new Document ( STRING , java.util.List<java.lang.Object> ) ) ) . into ( java.util.List<org.springframework.data.mongodb.core.convert.Document> ) ; java.util.List<org.springframework.data.mongodb.core.convert.Document> . sort ( new org.springframework.data.mongodb.core.convert.DefaultDbRefResolver.DbRefByReferencePositionComparator ( java.util.List<java.lang.Object> ) ) ; return java.util.List<org.springframework.data.mongodb.core.convert.Document> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty , DBRef org.springframework.data.mongodb.core.convert.DBRef , DbRefResolverCallback org.springframework.data.mongodb.core.convert.DbRefResolverCallback , DbRefProxyHandler org.springframework.data.mongodb.core.convert.DbRefProxyHandler ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getType ( ) ; org.springframework.data.mongodb.core.convert.DefaultDbRefResolver.LazyLoadingInterceptor org.springframework.data.mongodb.core.convert.DefaultDbRefResolver.LazyLoadingInterceptor = new org.springframework.data.mongodb.core.convert.DefaultDbRefResolver.LazyLoadingInterceptor ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.PersistenceExceptionTranslator , org.springframework.data.mongodb.core.convert.DbRefResolverCallback ) ; if ( ! java.lang.Class<> . boolean ( ) ) { Factory org.springframework.data.mongodb.core.convert.Factory = ( Factory ) org.springframework.data.mongodb.core.convert.ObjenesisStd . newInstance ( java.lang.Class<?> ( java.lang.Class<> ) ) ; org.springframework.data.mongodb.core.convert.Factory . setCallbacks ( new Callback [] { org.springframework.data.mongodb.core.convert.DefaultDbRefResolver.LazyLoadingInterceptor } ) ; return org.springframework.data.mongodb.core.convert.DbRefProxyHandler . populateId ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.Factory ) ; } ProxyFactory org.springframework.data.mongodb.core.convert.ProxyFactory = new ProxyFactory ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { org.springframework.data.mongodb.core.convert.ProxyFactory . addInterface ( java.lang.Class<> ) ; } org.springframework.data.mongodb.core.convert.ProxyFactory . addInterface ( LazyLoadingProxy .class ) ; org.springframework.data.mongodb.core.convert.ProxyFactory . addInterface ( java.lang.Class<> ) ; org.springframework.data.mongodb.core.convert.ProxyFactory . addAdvice ( org.springframework.data.mongodb.core.convert.DefaultDbRefResolver.LazyLoadingInterceptor ) ; return org.springframework.data.mongodb.core.convert.DbRefProxyHandler . populateId ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.ProxyFactory . getProxy ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Enhancer org.springframework.data.mongodb.core.convert.Enhancer = new Enhancer ( ) ; org.springframework.data.mongodb.core.convert.Enhancer . setSuperclass ( java.lang.Class<> ) ; org.springframework.data.mongodb.core.convert.Enhancer . setCallbackType ( org . springframework . org.springframework.cglib . org.springframework.cglib . org.springframework.cglib .class ) ; org.springframework.data.mongodb.core.convert.Enhancer . setInterfaces ( new java.lang.Class [] { LazyLoadingProxy .class } ) ; return org.springframework.data.mongodb.core.convert.Enhancer . createClass ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { return org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getDBRef ( ) != null && org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getDBRef ( ) . lazy ( ) ; }  <METHOD_END>
<METHOD_START> public void ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty , DBRef org.springframework.data.mongodb.core.convert.DBRef , PersistenceExceptionTranslator org.springframework.data.mongodb.core.convert.PersistenceExceptionTranslator , DbRefResolverCallback org.springframework.data.mongodb.core.convert.DbRefResolverCallback ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.PersistenceExceptionTranslator , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.DbRefResolverCallback , STRING ) ; this . org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.DBRef ; this . org.springframework.data.mongodb.core.convert.DbRefResolverCallback = org.springframework.data.mongodb.core.convert.DbRefResolverCallback ; this . org.springframework.data.mongodb.core.convert.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.convert.PersistenceExceptionTranslator ; this . org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentProperty ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.mongodb.core.convert.MethodInvocation ) throws java.lang.Throwable { return java.lang.Object ( org.springframework.data.mongodb.core.convert.MethodInvocation . getThis ( ) , org.springframework.data.mongodb.core.convert.MethodInvocation . getMethod ( ) , org.springframework.data.mongodb.core.convert.MethodInvocation . getArguments ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.data.mongodb.core.convert.MethodProxy ) throws java.lang.Throwable { if ( java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { return java.lang.Object ( ) ; } if ( java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { return this . org.springframework.data.mongodb.core.convert.DBRef ; } if ( isObjectMethod ( java.lang.reflect.Method ) && java.lang.Object .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { if ( ReflectionUtils . isToStringMethod ( java.lang.reflect.Method ) ) { return java.lang.String ( org.springframework.data.mongodb.core.convert.MethodProxy ) ; } if ( ReflectionUtils . isEqualsMethod ( java.lang.reflect.Method ) ) { return boolean ( org.springframework.data.mongodb.core.convert.MethodProxy , java.lang.Object[] [ NUMBER ] ) ; } if ( ReflectionUtils . isHashCodeMethod ( java.lang.reflect.Method ) ) { return int ( org.springframework.data.mongodb.core.convert.MethodProxy ) ; } if ( java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { return null ; } } java.lang.Object java.lang.Object = java.lang.Object ( ) ; if ( java.lang.Object == null ) { return null ; } return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( org.springframework.data.mongodb.core.convert.DBRef != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.mongodb.core.convert.DBRef . getId ( ) ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.System . int ( java.lang.Object ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( LazyLoadingProxy .class . java.lang.String ( ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object java.lang.Object ) { return java.lang.String ( java.lang.Object ) . int ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof LazyLoadingProxy ) ) { return false ; } if ( java.lang.Object == java.lang.Object ) { return true ; } return java.lang.String ( java.lang.Object ) . boolean ( java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) { if ( ! boolean ) { this . java.lang.Object = java.lang.Object ( ) ; this . boolean = true ; } return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectOutputStream java.io.ObjectOutputStream ) throws java.io.IOException { java.lang.Object ( ) ; java.io.ObjectOutputStream . void ( this . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException { try { this . boolean = true ; this . java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new LazyLoadingException ( STRING , java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> private synchronized java.lang.Object java.lang.Object ( ) { if ( ! boolean ) { try { return org.springframework.data.mongodb.core.convert.DbRefResolverCallback . resolve ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { DataAccessException org.springframework.data.mongodb.core.convert.DataAccessException = this . org.springframework.data.mongodb.core.convert.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ; throw new LazyLoadingException ( STRING , org.springframework.data.mongodb.core.convert.DataAccessException != null ? org.springframework.data.mongodb.core.convert.DataAccessException : java.lang.RuntimeException ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { Assert . notNull ( java.util.List<java.lang.Object> , STRING ) ; this . java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Document org.springframework.data.mongodb.core.convert.Document , Document org.springframework.data.mongodb.core.convert.Document ) { return java.lang.Integer . int ( java.util.List<java.lang.Object> . int ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ) , java.util.List<java.lang.Object> . int ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ) ) ; }  <METHOD_END>
