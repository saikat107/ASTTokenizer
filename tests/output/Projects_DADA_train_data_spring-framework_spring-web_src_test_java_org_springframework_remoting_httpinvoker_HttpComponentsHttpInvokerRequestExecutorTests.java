<METHOD_START> @ Test public void void ( ) java.io.IOException { HttpComponentsHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor ( ) ; org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . setConnectTimeout ( NUMBER ) ; HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( STRING ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) . getConnectTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { HttpComponentsHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor ( ) ; org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . setConnectionRequestTimeout ( NUMBER ) ; HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( STRING ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) . getConnectionRequestTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { HttpComponentsHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor ( ) ; org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . setReadTimeout ( NUMBER ) ; HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( STRING ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) . getSocketTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = RequestConfig . custom ( ) . setConnectTimeout ( NUMBER ) . build ( ) ; CloseableHttpClient org.springframework.remoting.httpinvoker.CloseableHttpClient = mock ( CloseableHttpClient .class , withSettings ( ) . extraInterfaces ( Configurable .class ) ) ; Configurable org.springframework.remoting.httpinvoker.Configurable = ( Configurable ) org.springframework.remoting.httpinvoker.CloseableHttpClient ; when ( org.springframework.remoting.httpinvoker.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.remoting.httpinvoker.RequestConfig ) ; HttpComponentsHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor ( org.springframework.remoting.httpinvoker.CloseableHttpClient ) ; HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( STRING ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; assertSame ( STRING , org.springframework.remoting.httpinvoker.RequestConfig , org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) ) ; org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . setConnectionRequestTimeout ( NUMBER ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; assertNotNull ( org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) . getConnectionRequestTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) . getConnectTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = RequestConfig . custom ( ) . setConnectTimeout ( NUMBER ) . setConnectionRequestTimeout ( NUMBER ) . build ( ) ; CloseableHttpClient org.springframework.remoting.httpinvoker.CloseableHttpClient = mock ( CloseableHttpClient .class , withSettings ( ) . extraInterfaces ( Configurable .class ) ) ; Configurable org.springframework.remoting.httpinvoker.Configurable = ( Configurable ) org.springframework.remoting.httpinvoker.CloseableHttpClient ; when ( org.springframework.remoting.httpinvoker.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.remoting.httpinvoker.RequestConfig ) ; HttpComponentsHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor ( org.springframework.remoting.httpinvoker.CloseableHttpClient ) ; org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . setConnectTimeout ( NUMBER ) ; HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( STRING ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getConnectTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( - NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getSocketTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = RequestConfig . custom ( ) . setSocketTimeout ( NUMBER ) . build ( ) ; final CloseableHttpClient org.springframework.remoting.httpinvoker.CloseableHttpClient = mock ( CloseableHttpClient .class , withSettings ( ) . extraInterfaces ( Configurable .class ) ) ; Configurable org.springframework.remoting.httpinvoker.Configurable = ( Configurable ) org.springframework.remoting.httpinvoker.CloseableHttpClient ; when ( org.springframework.remoting.httpinvoker.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.remoting.httpinvoker.RequestConfig ) ; HttpComponentsHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor ( ) { @ java.lang.Override public org.springframework.remoting.httpinvoker.HttpClient org.springframework.remoting.httpinvoker.HttpClient ( ) { return org.springframework.remoting.httpinvoker.CloseableHttpClient ; } } ; org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . setReadTimeout ( NUMBER ) ; HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( STRING ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) ; assertEquals ( - NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getConnectTimeout ( ) ) ; assertEquals ( - NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getSocketTimeout ( ) ) ; RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = RequestConfig . custom ( ) . setConnectTimeout ( NUMBER ) . build ( ) ; when ( org.springframework.remoting.httpinvoker.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.remoting.httpinvoker.RequestConfig ) ; org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . setReadTimeout ( NUMBER ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getConnectTimeout ( ) ) ; assertEquals ( - NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RequestConfig . getSocketTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.remoting.httpinvoker.HttpClient org.springframework.remoting.httpinvoker.HttpClient ( ) { return org.springframework.remoting.httpinvoker.CloseableHttpClient ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { CloseableHttpClient org.springframework.remoting.httpinvoker.CloseableHttpClient = HttpClientBuilder . create ( ) . build ( ) ; HttpComponentsHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor = new HttpComponentsHttpInvokerRequestExecutor ( org.springframework.remoting.httpinvoker.CloseableHttpClient ) { @ java.lang.Override protected org.springframework.remoting.httpinvoker.RequestConfig org.springframework.remoting.httpinvoker.RequestConfig ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) { return null ; } } ; HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( STRING ) ; HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor . createHttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; assertNull ( STRING , org.springframework.remoting.httpinvoker.HttpPost . getConfig ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RequestConfig org.springframework.remoting.httpinvoker.RequestConfig ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ( java.lang.String java.lang.String ) { HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration = mock ( HttpInvokerClientConfiguration .class ) ; when ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) . thenReturn ( java.lang.String ) ; return org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ; }  <METHOD_END>
