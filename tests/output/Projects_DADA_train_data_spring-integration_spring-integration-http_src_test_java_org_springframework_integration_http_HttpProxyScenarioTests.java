<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.DateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; final long long = java.util.Calendar . long ( ) ; java.lang.String java.lang.String = java.text.DateFormat . java.lang.String ( long ) ; java.util.Calendar . void ( java.util.Calendar . int , - NUMBER ) ; long long = java.util.Calendar . long ( ) ; final java.lang.String java.lang.String = java.text.DateFormat . java.lang.String ( long ) ; MockHttpServletRequest org.springframework.integration.http.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.MockHttpServletRequest . setQueryString ( STRING ) ; org.springframework.integration.http.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; org.springframework.integration.http.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; org.springframework.integration.http.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.integration.http.MockHttpServletRequest . setContentType ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.http.HandlerMapping . getHandler ( org.springframework.integration.http.MockHttpServletRequest ) . getHandler ( ) ; assertNotNull ( java.lang.Object ) ; MockHttpServletResponse org.springframework.integration.http.MockHttpServletResponse = new MockHttpServletResponse ( ) ; RestTemplate org.springframework.integration.http.RestTemplate = Mockito . spy ( new RestTemplate ( ) ) ; final java.lang.String java.lang.String = STRING ; Mockito . doAnswer ( invocation -> { URI uri = invocation . getArgument ( NUMBER ) ; assertEquals ( new URI ( STRING ) , uri ) ; HttpEntity < ? > httpEntity = ( HttpEntity < ? > ) invocation . getArguments ( ) [ NUMBER ] ; HttpHeaders httpHeaders = httpEntity . getHeaders ( ) ; assertEquals ( ifModifiedSince , httpHeaders . getIfModifiedSince ( ) ) ; assertEquals ( ifUnmodifiedSinceValue , httpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , httpHeaders . getFirst ( STRING ) ) ; MultiValueMap < String , String > responseHeaders = new LinkedMultiValueMap < String , String > ( httpHeaders ) ; responseHeaders . set ( STRING , STRING ) ; responseHeaders . set ( STRING , contentDispositionValue ) ; return new ResponseEntity <> ( responseHeaders , HttpStatus . OK ) ; } ) . when ( org.springframework.integration.http.RestTemplate ) . exchange ( Mockito . any ( java.net.URI .class ) , Mockito . any ( HttpMethod .class ) , Mockito . any ( HttpEntity .class ) , ( java.lang.Class<?> < ? > ) isNull ( ) ) ; PropertyAccessor org.springframework.integration.http.PropertyAccessor = new DirectFieldAccessor ( this . org.springframework.integration.http.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.PropertyAccessor . setPropertyValue ( STRING , org.springframework.integration.http.RestTemplate ) ; RequestAttributes org.springframework.integration.http.RequestAttributes = new ServletRequestAttributes ( org.springframework.integration.http.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.integration.http.RequestAttributes ) ; this . org.springframework.integration.http.HandlerAdapter . handle ( org.springframework.integration.http.MockHttpServletRequest , org.springframework.integration.http.MockHttpServletResponse , java.lang.Object ) ; assertNull ( org.springframework.integration.http.MockHttpServletResponse . getHeaderValue ( STRING ) ) ; assertNull ( org.springframework.integration.http.MockHttpServletResponse . getHeaderValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.http.MockHttpServletResponse . getHeaderValue ( STRING ) ) ; assertEquals ( java.lang.String , org.springframework.integration.http.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.http.MockHttpServletResponse . getContentType ( ) ) ; Message < ? > org.springframework.integration.http.Message<?> = this . org.springframework.integration.http.PollableChannel . receive ( NUMBER ) ; MessageHeaders org.springframework.integration.http.MessageHeaders = org.springframework.integration.http.Message<> . getHeaders ( ) ; assertEquals ( long , org.springframework.integration.http.MessageHeaders . get ( STRING ) ) ; assertEquals ( long , org.springframework.integration.http.MessageHeaders . get ( STRING ) ) ; RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.integration.http.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.integration.http.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.integration.http.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.http.HandlerMapping . getHandler ( org.springframework.integration.http.MockHttpServletRequest ) . getHandler ( ) ; assertNotNull ( java.lang.Object ) ; MockHttpServletResponse org.springframework.integration.http.MockHttpServletResponse = new MockHttpServletResponse ( ) ; RestTemplate org.springframework.integration.http.RestTemplate = Mockito . spy ( new RestTemplate ( ) ) ; Mockito . doAnswer ( invocation -> { URI uri = invocation . getArgument ( NUMBER ) ; assertEquals ( new URI ( STRING ) , uri ) ; HttpEntity < ? > httpEntity = ( HttpEntity < ? > ) invocation . getArguments ( ) [ NUMBER ] ; HttpHeaders httpHeaders = httpEntity . getHeaders ( ) ; assertEquals ( STRING , httpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , httpHeaders . getContentType ( ) . toString ( ) ) ; HttpEntity < ? > entity = ( HttpEntity < ? > ) invocation . getArguments ( ) [ NUMBER ] ; assertThat ( entity . getBody ( ) , instanceOf ( byte [] .class ) ) ; assertEquals ( STRING , new String ( ( byte [] ) entity . getBody ( ) ) ) ; MultiValueMap < String , String > responseHeaders = new LinkedMultiValueMap < String , String > ( httpHeaders ) ; responseHeaders . set ( STRING , STRING ) ; responseHeaders . set ( STRING , STRING ) ; return new ResponseEntity < Object > ( responseHeaders , HttpStatus . OK ) ; } ) . when ( org.springframework.integration.http.RestTemplate ) . exchange ( Mockito . any ( java.net.URI .class ) , Mockito . any ( HttpMethod .class ) , Mockito . any ( HttpEntity .class ) , ( java.lang.Class<?> < ? > ) isNull ( ) ) ; PropertyAccessor org.springframework.integration.http.PropertyAccessor = new DirectFieldAccessor ( this . org.springframework.integration.http.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.PropertyAccessor . setPropertyValue ( STRING , org.springframework.integration.http.RestTemplate ) ; RequestAttributes org.springframework.integration.http.RequestAttributes = new ServletRequestAttributes ( org.springframework.integration.http.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.integration.http.RequestAttributes ) ; this . org.springframework.integration.http.HandlerAdapter . handle ( org.springframework.integration.http.MockHttpServletRequest , org.springframework.integration.http.MockHttpServletResponse , java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.http.MockHttpServletResponse . getHeaderValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.http.MockHttpServletResponse . getContentType ( ) ) ; RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
