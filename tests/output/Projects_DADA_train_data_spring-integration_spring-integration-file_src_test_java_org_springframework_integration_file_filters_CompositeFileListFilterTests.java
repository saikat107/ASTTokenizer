<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompositeFileListFilter < java.io.File > org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> = new CompositeFileListFilter < java.io.File > ( ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = java.util.Collections . java.util.List<java.io.File> ( java.io.File ) ; when ( org.springframework.integration.file.filters.FileListFilter<java.io.File> . filterFiles ( isA ( java.io.File [] .class ) ) ) . thenReturn ( java.util.List<java.io.File> ) ; when ( org.springframework.integration.file.filters.FileListFilter<java.io.File> . filterFiles ( isA ( java.io.File [] .class ) ) ) . thenReturn ( java.util.List<java.io.File> ) ; assertEquals ( java.util.List<java.io.File> , org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . filterFiles ( new java.io.File [] { java.io.File } ) ) ; verify ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) . filterFiles ( isA ( java.io.File [] .class ) ) ; verify ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) . filterFiles ( isA ( java.io.File [] .class ) ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompositeFileListFilter < java.io.File > org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> = new CompositeFileListFilter < java.io.File > ( ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = java.util.Collections . java.util.List<java.io.File> ( java.io.File ) ; when ( org.springframework.integration.file.filters.FileListFilter<java.io.File> . filterFiles ( isA ( java.io.File [] .class ) ) ) . thenReturn ( java.util.List<java.io.File> ) ; when ( org.springframework.integration.file.filters.FileListFilter<java.io.File> . filterFiles ( isA ( java.io.File [] .class ) ) ) . thenReturn ( java.util.List<java.io.File> ) ; assertEquals ( java.util.List<java.io.File> , org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . filterFiles ( new java.io.File [] { java.io.File } ) ) ; verify ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) . filterFiles ( isA ( java.io.File [] .class ) ) ; verify ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) . filterFiles ( isA ( java.io.File [] .class ) ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompositeFileListFilter < java.io.File > org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> = new CompositeFileListFilter < java.io.File > ( ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; when ( org.springframework.integration.file.filters.FileListFilter<java.io.File> . filterFiles ( isA ( java.io.File [] .class ) ) ) . thenReturn ( new java.util.ArrayList<java.io.File> < java.io.File > ( ) ) ; when ( org.springframework.integration.file.filters.FileListFilter<java.io.File> . filterFiles ( isA ( java.io.File [] .class ) ) ) . thenReturn ( new java.util.ArrayList<java.io.File> < java.io.File > ( ) ) ; assertTrue ( org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . filterFiles ( new java.io.File [] { java.io.File } ) . isEmpty ( ) ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompositeFileListFilter < java.io.File > org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> = new ChainFileListFilter <> ( ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( this . org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . addFilter ( this . org.springframework.integration.file.filters.FileListFilter<java.io.File> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> <> ( ) ; when ( this . org.springframework.integration.file.filters.FileListFilter<java.io.File> . filterFiles ( isA ( java.io.File [] .class ) ) ) . thenReturn ( java.util.List<java.io.File> ) ; assertEquals ( java.util.List<java.io.File> , org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . filterFiles ( new java.io.File [] { this . java.io.File } ) ) ; verify ( org.springframework.integration.file.filters.FileListFilter<java.io.File> ) . filterFiles ( argThat ( arrayWithSize ( NUMBER ) ) ) ; verify ( org.springframework.integration.file.filters.FileListFilter<java.io.File> , never ( ) ) . filterFiles ( isA ( java.io.File [] .class ) ) ; org.springframework.integration.file.filters.CompositeFileListFilter<java.io.File> . close ( ) ; }  <METHOD_END>
