<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.annotation.ConfigurationPhase org.springframework.web.servlet.config.annotation.ConfigurationPhase ( ) { return ConfigurationPhase . PARSE_CONFIGURATION ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ConditionContext org.springframework.web.servlet.config.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.web.servlet.config.annotation.AnnotatedTypeMetadata ) { ListableBeanFactory org.springframework.web.servlet.config.annotation.ListableBeanFactory = org.springframework.web.servlet.config.annotation.ConditionContext . getBeanFactory ( ) ; java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.web.servlet.config.annotation.ListableBeanFactory , this . java.lang.Class<> , false , false ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) ) { org.springframework.web.servlet.config.annotation.Log . debug ( STRING + this . java.lang.Class<> + STRING ) ; return true ; } else { org.springframework.web.servlet.config.annotation.Log . debug ( STRING + this . java.lang.Class<> + STRING ) ; return false ; } }  <METHOD_END>
