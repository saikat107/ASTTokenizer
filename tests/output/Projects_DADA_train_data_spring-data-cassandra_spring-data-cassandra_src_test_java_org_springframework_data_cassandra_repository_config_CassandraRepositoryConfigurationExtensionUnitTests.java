<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.repository.config.CassandraRepositoryConfigurationExtension = new CassandraRepositoryConfigurationExtension ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.cassandra.repository.config.CassandraRepositoryConfigurationExtensionUnitTests.SampleRepository .class , org.springframework.data.cassandra.repository.config.CassandraRepositoryConfigurationExtension . getRepositoryConfigurations ( org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource , org.springframework.data.cassandra.repository.config.ResourceLoader , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.cassandra.repository.config.CassandraRepositoryConfigurationExtensionUnitTests.StoreRepository .class , org.springframework.data.cassandra.repository.config.CassandraRepositoryConfigurationExtension . getRepositoryConfigurations ( org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource , org.springframework.data.cassandra.repository.config.ResourceLoader , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.cassandra.repository.config.CassandraRepositoryConfigurationExtensionUnitTests.UnannotatedRepository .class , org.springframework.data.cassandra.repository.config.CassandraRepositoryConfigurationExtension . getRepositoryConfigurations ( org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource , org.springframework.data.cassandra.repository.config.ResourceLoader , true ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<org.springframework.data.cassandra.repository.config.RepositoryConfiguration<org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource>> < RepositoryConfiguration < RepositoryConfigurationSource > > java.util.Collection<org.springframework.data.cassandra.repository.config.RepositoryConfiguration<org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource>> ) { try { void ( java.lang.Class<> , java.util.Collection<org.springframework.data.cassandra.repository.config.RepositoryConfiguration<org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource>> ) ; fail ( STRING . java.lang.String ( java.lang.Class<> . java.lang.String ( ) ) ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<org.springframework.data.cassandra.repository.config.RepositoryConfiguration<org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource>> < RepositoryConfiguration < RepositoryConfigurationSource > > java.util.Collection<org.springframework.data.cassandra.repository.config.RepositoryConfiguration<org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource>> ) { for ( RepositoryConfiguration < ? > org.springframework.data.cassandra.repository.config.RepositoryConfiguration<?> : java.util.Collection<org.springframework.data.cassandra.repository.config.RepositoryConfiguration<org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource>> ) { if ( org.springframework.data.cassandra.repository.config.RepositoryConfiguration<> . getRepositoryInterface ( ) . equals ( java.lang.Class<> . java.lang.String ( ) ) ) { return; } } fail ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.util.Collection<org.springframework.data.cassandra.repository.config.RepositoryConfiguration<org.springframework.data.cassandra.repository.config.RepositoryConfigurationSource>> . toString ( ) ) ) ; }  <METHOD_END>
