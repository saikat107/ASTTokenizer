<METHOD_START> public void ( ServiceProperties sample.test.service.ServiceProperties , RestTemplateBuilder sample.test.service.RestTemplateBuilder ) { this . sample.test.service.RestTemplate = sample.test.service.RestTemplateBuilder . rootUri ( sample.test.service.ServiceProperties . getVehicleServiceRootUrl ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public sample.test.service.VehicleDetails sample.test.service.VehicleDetails ( VehicleIdentificationNumber sample.test.service.VehicleIdentificationNumber )			throws sample.test.service.VehicleIdentificationNumberNotFoundException { Assert . notNull ( sample.test.service.VehicleIdentificationNumber , STRING ) ; sample.test.service.Logger . debug ( STRING + sample.test.service.VehicleIdentificationNumber ) ; try { return this . sample.test.service.RestTemplate . getForObject ( STRING , VehicleDetails .class , sample.test.service.VehicleIdentificationNumber ) ; } catch ( HttpStatusCodeException sample.test.service.HttpStatusCodeException ) { if ( HttpStatus . NOT_FOUND . equals ( sample.test.service.HttpStatusCodeException . getStatusCode ( ) ) ) { throw new VehicleIdentificationNumberNotFoundException ( sample.test.service.VehicleIdentificationNumber , sample.test.service.HttpStatusCodeException ) ; } throw sample.test.service.HttpStatusCodeException ; } }  <METHOD_END>
