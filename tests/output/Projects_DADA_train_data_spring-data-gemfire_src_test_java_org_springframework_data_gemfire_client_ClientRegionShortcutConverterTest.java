<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ClientRegionShortcutConverter . toUpperCase ( STRING ) ) ; assertEquals ( STRING , ClientRegionShortcutConverter . toUpperCase ( STRING ) ) ; assertEquals ( STRING , ClientRegionShortcutConverter . toUpperCase ( STRING ) ) ; assertEquals ( STRING , ClientRegionShortcutConverter . toUpperCase ( STRING ) ) ; assertEquals ( STRING , ClientRegionShortcutConverter . toUpperCase ( STRING ) ) ; assertEquals ( STRING , ClientRegionShortcutConverter . toUpperCase ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( ClientRegionShortcut org.springframework.data.gemfire.client.ClientRegionShortcut : ClientRegionShortcut . values ( ) ) { assertEquals ( org.springframework.data.gemfire.client.ClientRegionShortcut , org.springframework.data.gemfire.client.ClientRegionShortcutConverter . convert ( org.springframework.data.gemfire.client.ClientRegionShortcut . name ( ) ) ) ; } assertEquals ( ClientRegionShortcut . PROXY , org.springframework.data.gemfire.client.ClientRegionShortcutConverter . convert ( STRING ) ) ; assertEquals ( ClientRegionShortcut . CACHING_PROXY , org.springframework.data.gemfire.client.ClientRegionShortcutConverter . convert ( STRING ) ) ; assertEquals ( ClientRegionShortcut . LOCAL_HEAP_LRU , org.springframework.data.gemfire.client.ClientRegionShortcutConverter . convert ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.gemfire.client.ClientRegionShortcutConverter . convert ( STRING ) ; }  <METHOD_END>
