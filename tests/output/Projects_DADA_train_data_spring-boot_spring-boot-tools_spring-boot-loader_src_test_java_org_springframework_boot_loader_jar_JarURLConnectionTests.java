<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.io.File = this . org.springframework.boot.loader.jar.TemporaryFolder . newFile ( ) ; TestJarCreator . createTestJar ( this . java.io.File ) ; this . org.springframework.boot.loader.jar.JarFile = new JarFile ( this . java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; assertThat ( JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) . getContent ( ) ) . isSameAs ( this . org.springframework.boot.loader.jar.JarFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; assertThat ( JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) . getContent ( ) ) . isSameAs ( this . org.springframework.boot.loader.jar.JarFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; assertThat ( JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; assertThat ( JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; assertThat ( JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; assertThat ( JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; assertThat ( JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; JarFile org.springframework.boot.loader.jar.JarFile = this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( JarURLConnection . get ( java.net.URL , org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING + java.lang.String ( ) + STRING ) ; JarFile org.springframework.boot.loader.jar.JarFile = this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( JarURLConnection . get ( java.net.URL , org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( new java.net.URL ( STRING , null , - NUMBER , STRING + java.lang.String ( ) + STRING , new Handler ( ) ) , STRING ) ; JarFile org.springframework.boot.loader.jar.JarFile = this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( JarURLConnection . get ( java.net.URL , org.springframework.boot.loader.jar.JarFile ) . getInputStream ( ) ) . hasSameContentAs ( new java.io.ByteArrayInputStream ( new byte [] { NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . java.io.File . java.lang.String ( ) . java.lang.String ( '\\' , '/' ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . java.io.File . java.lang.String ( ) . java.lang.String ( '\\' , '/' ) ; }  <METHOD_END>
