<METHOD_START> protected void ( ) { this . org.springframework.test.web.servlet.result.XmlExpectationsHelper = new XmlExpectationsHelper ( ) ; this . org.springframework.test.web.servlet.result.JsonExpectationsHelper = new JsonExpectationsHelper ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( java.lang.String java.lang.String ) { return org.springframework.test.web.servlet.result.ResultMatcher ( MediaType . parseMediaType ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final MediaType org.springframework.test.web.servlet.result.MediaType ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentType ( ) ; assertTrue ( STRING , java.lang.String != null ) ; assertEquals ( STRING , org.springframework.test.web.servlet.result.MediaType , MediaType . parseMediaType ( java.lang.String ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentType ( ) ; assertTrue ( STRING , java.lang.String != null ) ; assertEquals ( STRING , org.springframework.test.web.servlet.result.MediaType , MediaType . parseMediaType ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( java.lang.String java.lang.String ) { return org.springframework.test.web.servlet.result.ResultMatcher ( MediaType . parseMediaType ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final MediaType org.springframework.test.web.servlet.result.MediaType ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentType ( ) ; assertTrue ( STRING , java.lang.String != null ) ; MediaType org.springframework.test.web.servlet.result.MediaType = MediaType . parseMediaType ( java.lang.String ) ; assertTrue ( STRING + java.lang.String + STRING + org.springframework.test.web.servlet.result.MediaType + STRING , org.springframework.test.web.servlet.result.MediaType . isCompatibleWith ( org.springframework.test.web.servlet.result.MediaType ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentType ( ) ; assertTrue ( STRING , java.lang.String != null ) ; MediaType org.springframework.test.web.servlet.result.MediaType = MediaType . parseMediaType ( java.lang.String ) ; assertTrue ( STRING + java.lang.String + STRING + org.springframework.test.web.servlet.result.MediaType + STRING , org.springframework.test.web.servlet.result.MediaType . isCompatibleWith ( org.springframework.test.web.servlet.result.MediaType ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getCharacterEncoding ( ) ; assertEquals ( STRING , java.lang.String , java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getCharacterEncoding ( ) ; assertEquals ( STRING , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < ? super java.lang.String > org.springframework.test.web.servlet.result.Matcher<? super java.lang.String> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { assertThat ( STRING , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { assertThat ( STRING , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { assertEquals ( STRING , java.lang.String , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { assertEquals ( STRING , java.lang.String , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final byte [] byte[] ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { assertEquals ( STRING , byte[] , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsByteArray ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { assertEquals ( STRING , byte[] , org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.XmlExpectationsHelper . assertXmlEqual ( java.lang.String , java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.XmlExpectationsHelper . assertXmlEqual ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < ? super org.w3c.dom.Node > org.springframework.test.web.servlet.result.Matcher<? super org.w3c.dom.Node> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.XmlExpectationsHelper . assertNode ( java.lang.String , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.XmlExpectationsHelper . assertNode ( java.lang.String , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < ? super javax.xml.transform.Source > org.springframework.test.web.servlet.result.Matcher<? super javax.xml.transform.Source> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.XmlExpectationsHelper . assertSource ( java.lang.String , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.XmlExpectationsHelper . assertSource ( java.lang.String , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String ) { return org.springframework.test.web.servlet.result.ResultMatcher ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final boolean boolean ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.JsonExpectationsHelper . assertJsonEqual ( java.lang.String , java.lang.String , boolean ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) . getContentAsString ( ) ; org.springframework.test.web.servlet.result.JsonExpectationsHelper . assertJsonEqual ( java.lang.String , java.lang.String , boolean ) ; }  <METHOD_END>
