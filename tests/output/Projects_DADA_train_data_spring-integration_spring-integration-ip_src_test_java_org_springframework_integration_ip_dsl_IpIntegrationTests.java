<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationEventPublisher org.springframework.integration.ip.dsl.ApplicationEventPublisher = e -> { } ; AbstractServerConnectionFactory org.springframework.integration.ip.dsl.AbstractServerConnectionFactory = Tcp . netServer ( NUMBER ) . backlog ( NUMBER ) . soTimeout ( NUMBER ) . id ( STRING ) . get ( ) ; assertEquals ( STRING , org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . getComponentName ( ) ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.dsl.ApplicationEventPublisher ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . afterPropertiesSet ( ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.dsl.TcpReceivingChannelAdapter = Tcp . inboundAdapter ( org.springframework.integration.ip.dsl.AbstractServerConnectionFactory ) . get ( ) ; QueueChannel org.springframework.integration.ip.dsl.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.dsl.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.dsl.QueueChannel ) ; org.springframework.integration.ip.dsl.TcpReceivingChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.ip.dsl.TcpReceivingChannelAdapter . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.dsl.AbstractServerConnectionFactory , null ) ; AbstractClientConnectionFactory org.springframework.integration.ip.dsl.AbstractClientConnectionFactory = Tcp . netClient ( STRING , org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . getPort ( ) ) . id ( STRING ) . get ( ) ; assertEquals ( STRING , org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . getComponentName ( ) ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.dsl.ApplicationEventPublisher ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . afterPropertiesSet ( ) ; TcpSendingMessageHandler org.springframework.integration.ip.dsl.TcpSendingMessageHandler = Tcp . outboundAdapter ( org.springframework.integration.ip.dsl.AbstractClientConnectionFactory ) . get ( ) ; org.springframework.integration.ip.dsl.TcpSendingMessageHandler . start ( ) ; org.springframework.integration.ip.dsl.TcpSendingMessageHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.ip.dsl.Message<?> = org.springframework.integration.ip.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.dsl.Message<> ) ; assertEquals ( STRING , Transformers . objectToString ( ) . transform ( org.springframework.integration.ip.dsl.Message<> ) . getPayload ( ) ) ; org.springframework.integration.ip.dsl.AbstractClientConnectionFactory . stop ( ) ; org.springframework.integration.ip.dsl.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestingUtilities . waitListening ( this . org.springframework.integration.ip.dsl.AbstractServerConnectionFactory , null ) ; IntegrationFlow org.springframework.integration.ip.dsl.IntegrationFlow = f -> f . handle ( Tcp . outboundGateway ( Tcp . netClient ( STRING , this . server1 . getPort ( ) ) . serializer ( TcpCodecs . crlf ( ) ) . deserializer ( TcpCodecs . lengthHeader1 ( ) ) . id ( STRING ) ) . remoteTimeout ( m -> NUMBER ) ) . transform ( Transformers . objectToString ( ) ) ; IntegrationFlowRegistration org.springframework.integration.ip.dsl.IntegrationFlowRegistration = this . org.springframework.integration.ip.dsl.IntegrationFlowContext . registration ( org.springframework.integration.ip.dsl.IntegrationFlow ) . register ( ) ; assertThat ( org.springframework.integration.ip.dsl.IntegrationFlowRegistration . getMessagingTemplate ( ) . convertSendAndReceive ( STRING , java.lang.String .class ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestingUtilities . waitListening ( this . org.springframework.integration.ip.dsl.UnicastReceivingChannelAdapter , null ) ; Message < java.lang.String > org.springframework.integration.ip.dsl.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING + this . org.springframework.integration.ip.dsl.UnicastReceivingChannelAdapter . getPort ( ) ) . build ( ) ; this . org.springframework.integration.ip.dsl.MessageChannel . send ( org.springframework.integration.ip.dsl.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.ip.dsl.Message<?> = this . org.springframework.integration.ip.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.dsl.Message<> ) ; assertEquals ( STRING , Transformers . objectToString ( ) . transform ( org.springframework.integration.ip.dsl.Message<> ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UdpMulticastOutboundChannelAdapterSpec org.springframework.integration.ip.dsl.UdpMulticastOutboundChannelAdapterSpec = Udp . outboundMulticastAdapter ( STRING ) ; UdpMulticastOutboundChannelAdapterSpec org.springframework.integration.ip.dsl.UdpMulticastOutboundChannelAdapterSpec = org.springframework.integration.ip.dsl.UdpMulticastOutboundChannelAdapterSpec . lengthCheck ( true ) ; UdpMulticastOutboundChannelAdapterSpec org.springframework.integration.ip.dsl.UdpMulticastOutboundChannelAdapterSpec = org.springframework.integration.ip.dsl.UdpMulticastOutboundChannelAdapterSpec . timeToLive ( NUMBER ) ; assertThat ( org.springframework.integration.ip.dsl.UdpMulticastOutboundChannelAdapterSpec . get ( ) , instanceOf ( MulticastSendingMessageHandler .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ip.dsl.AbstractServerConnectionFactory org.springframework.integration.ip.dsl.AbstractServerConnectionFactory ( ) { return Tcp . netServer ( NUMBER ) . serializer ( TcpCodecs . lengthHeader1 ( ) ) . deserializer ( TcpCodecs . crlf ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ip.dsl.IntegrationFlow org.springframework.integration.ip.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Tcp . inboundGateway ( org.springframework.integration.ip.dsl.AbstractServerConnectionFactory ( ) ) ) . transform ( Transformers . objectToString ( ) ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ip.dsl.IntegrationFlow org.springframework.integration.ip.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Udp . inboundAdapter ( NUMBER ) ) . channel ( org.springframework.integration.ip.dsl.QueueChannel ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ip.dsl.QueueChannel org.springframework.integration.ip.dsl.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ip.dsl.IntegrationFlow org.springframework.integration.ip.dsl.IntegrationFlow ( ) { return f -> f . handle ( Udp . outboundAdapter ( m -> m . getHeaders ( ) . get ( STRING ) ) ) ; }  <METHOD_END>
