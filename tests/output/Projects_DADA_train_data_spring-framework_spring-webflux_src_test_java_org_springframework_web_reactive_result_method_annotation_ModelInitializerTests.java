<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestController org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestController = new org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestController ( ) ; Validator org.springframework.web.reactive.result.method.annotation.Validator = mock ( Validator .class ) ; org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestController . void ( org.springframework.web.reactive.result.method.annotation.Validator ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> < SyncInvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> = java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> ( org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestController ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> = java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> ( org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestController ) ; WebBindingInitializer org.springframework.web.reactive.result.method.annotation.WebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new InitBinderBindingContext ( org.springframework.web.reactive.result.method.annotation.WebBindingInitializer , java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> ) ; this . org.springframework.web.reactive.result.method.annotation.ModelInitializer . initModel ( org.springframework.web.reactive.result.method.annotation.BindingContext , java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> , this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( this . org.springframework.web.reactive.result.method.annotation.ServerWebExchange , STRING ) ; assertEquals ( java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.Validator ) , org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder . getValidators ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( STRING , ( ( org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ) java.lang.Object ) . java.lang.String ( ) ) ; java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( STRING , ( ( Mono < org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean > ) java.lang.Object ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) . getName ( ) ) ; java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( STRING , ( ( Single < org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean > ) java.lang.Object ) . toBlocking ( ) . value ( ) . getName ( ) ) ; java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( STRING , ( ( org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ) java.lang.Object ) . java.lang.String ( ) ) ; java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( STRING , ( ( org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ) java.lang.Object ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> < SyncInvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> ( java.lang.Object java.lang.Object ) { return MethodIntrospector . selectMethods ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , ReflectionUtils.MethodFilter ) . stream ( ) . map ( method -> new SyncInvocableHandlerMethod ( controller , method ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> ( java.lang.Object java.lang.Object ) { return MethodIntrospector . selectMethods ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , ReflectionUtils.MethodFilter ) . stream ( ) . map ( method -> toInvocable ( controller , method ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { ModelArgumentResolver org.springframework.web.reactive.result.method.annotation.ModelArgumentResolver = new ModelArgumentResolver ( new ReactiveAdapterRegistry ( ) ) ; InvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod . setArgumentResolvers ( java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.ModelArgumentResolver ) ) ; return org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> void void ( Validator org.springframework.web.reactive.result.method.annotation.Validator ) { this . org.springframework.web.reactive.result.method.annotation.Validator = org.springframework.web.reactive.result.method.annotation.Validator ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder ) { if ( this . org.springframework.web.reactive.result.method.annotation.Validator != null ) { org.springframework.web.reactive.result.method.annotation.WebDataBinder . addValidators ( this . org.springframework.web.reactive.result.method.annotation.Validator ) ; } }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) public org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ( ) { return new org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) public org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean> < org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean> ( ) { return Mono . just ( new org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) public org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean> < org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean > org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean> ( ) { return Single . just ( new org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( Model org.springframework.web.reactive.result.method.annotation.Model ) { org.springframework.web.reactive.result.method.annotation.Model . addAttribute ( STRING , new org.springframework.web.reactive.result.method.annotation.ModelInitializerTests.TestBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( Model org.springframework.web.reactive.result.method.annotation.Model ) { return Mono . just ( STRING ) . doOnNext ( name -> model . addAttribute ( STRING , new TestBean ( name ) ) ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( ) {}  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING ; }  <METHOD_END>
