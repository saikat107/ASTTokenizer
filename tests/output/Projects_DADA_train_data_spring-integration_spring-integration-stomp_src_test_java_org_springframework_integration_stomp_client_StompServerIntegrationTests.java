<METHOD_START> public void ( ) { super( STRING , STRING , STRING , STRING , STRING ); }  <METHOD_END>
<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int int = SocketUtils . findAvailableTcpPort ( NUMBER ) ; org.springframework.integration.stomp.client.BrokerService = new BrokerService ( ) ; org.springframework.integration.stomp.client.BrokerService . addConnector ( STRING + int ) ; org.springframework.integration.stomp.client.BrokerService . setPersistent ( false ) ; org.springframework.integration.stomp.client.BrokerService . setUseJmx ( false ) ; org.springframework.integration.stomp.client.BrokerService . getSystemUsage ( ) . getMemoryUsage ( ) . setLimit ( NUMBER * NUMBER * NUMBER ) ; org.springframework.integration.stomp.client.BrokerService . getSystemUsage ( ) . getTempUsage ( ) . setLimit ( NUMBER * NUMBER * NUMBER ) ; org.springframework.integration.stomp.client.BrokerService . start ( ) ; org.springframework.integration.stomp.client.ReactorNettyTcpStompClient = new ReactorNettyTcpStompClient ( STRING , int ) ; org.springframework.integration.stomp.client.ReactorNettyTcpStompClient . setMessageConverter ( new PassThruMessageConverter ( ) ) ; ThreadPoolTaskScheduler org.springframework.integration.stomp.client.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.stomp.client.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; org.springframework.integration.stomp.client.ReactorNettyTcpStompClient . setTaskScheduler ( org.springframework.integration.stomp.client.ThreadPoolTaskScheduler ) ; org.springframework.integration.stomp.client.ReactorNettyTcpStompClient . setReceiptTimeLimit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.integration.stomp.client.BrokerService . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.stomp.client.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.integration.stomp.client.StompServerIntegrationTests.ContextConfiguration .class ) ; ConfigurableApplicationContext org.springframework.integration.stomp.client.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.integration.stomp.client.StompServerIntegrationTests.ContextConfiguration .class ) ; PollableChannel org.springframework.integration.stomp.client.PollableChannel = org.springframework.integration.stomp.client.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.stomp.client.PollableChannel = org.springframework.integration.stomp.client.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.stomp.client.PollableChannel = org.springframework.integration.stomp.client.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.stomp.client.PollableChannel = org.springframework.integration.stomp.client.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.stomp.client.MessageChannel = org.springframework.integration.stomp.client.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; MessageChannel org.springframework.integration.stomp.client.MessageChannel = org.springframework.integration.stomp.client.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertThat ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) , instanceOf ( StompSessionConnectedEvent .class ) ) ; org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertThat ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) , instanceOf ( StompReceiptEvent .class ) ) ; StompReceiptEvent org.springframework.integration.stomp.client.StompReceiptEvent = ( StompReceiptEvent ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ; assertEquals ( StompCommand . SUBSCRIBE , org.springframework.integration.stomp.client.StompReceiptEvent . getStompCommand ( ) ) ; assertEquals ( STRING , org.springframework.integration.stomp.client.StompReceiptEvent . getDestination ( ) ) ; org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertThat ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) , instanceOf ( StompSessionConnectedEvent .class ) ) ; org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertThat ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) , instanceOf ( StompReceiptEvent .class ) ) ; org.springframework.integration.stomp.client.StompReceiptEvent = ( StompReceiptEvent ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ; assertEquals ( StompCommand . SUBSCRIBE , org.springframework.integration.stomp.client.StompReceiptEvent . getStompCommand ( ) ) ; assertEquals ( STRING , org.springframework.integration.stomp.client.StompReceiptEvent . getDestination ( ) ) ; org.springframework.integration.stomp.client.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertArrayEquals ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ) ; assertArrayEquals ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ) ; org.springframework.integration.stomp.client.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertArrayEquals ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ) ; assertArrayEquals ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ) ; org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertThat ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) , instanceOf ( StompReceiptEvent .class ) ) ; org.springframework.integration.stomp.client.StompReceiptEvent = ( StompReceiptEvent ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ; assertEquals ( StompCommand . SEND , org.springframework.integration.stomp.client.StompReceiptEvent . getStompCommand ( ) ) ; assertEquals ( STRING , org.springframework.integration.stomp.client.StompReceiptEvent . getDestination ( ) ) ; assertArrayEquals ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.stomp.client.StompReceiptEvent . getMessage ( ) . getPayload ( ) ) ; Lifecycle org.springframework.integration.stomp.client.Lifecycle = org.springframework.integration.stomp.client.ConfigurableApplicationContext . getBean ( STRING , Lifecycle .class ) ; org.springframework.integration.stomp.client.Lifecycle . stop ( ) ; org.springframework.integration.stomp.client.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.stomp.client.Message<> ) ; org.springframework.integration.stomp.client.Lifecycle . start ( ) ; org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertThat ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) , instanceOf ( StompReceiptEvent .class ) ) ; org.springframework.integration.stomp.client.StompReceiptEvent = ( StompReceiptEvent ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ; assertEquals ( StompCommand . SUBSCRIBE , org.springframework.integration.stomp.client.StompReceiptEvent . getStompCommand ( ) ) ; assertEquals ( STRING , org.springframework.integration.stomp.client.StompReceiptEvent . getDestination ( ) ) ; org.springframework.integration.stomp.client.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertArrayEquals ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ) ; org.springframework.integration.stomp.client.BrokerService . stop ( ) ; do { org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; } while ( ! ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) instanceof StompConnectionFailedEvent ) ); try { org.springframework.integration.stomp.client.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( MessageDeliveryException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } org.springframework.integration.stomp.client.BrokerService . start ( false ) ; do { org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; } while ( ! ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) instanceof StompReceiptEvent ) ); do { org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; } while ( ! ( org.springframework.integration.stomp.client.Message<> . getPayload ( ) instanceof StompReceiptEvent ) ); org.springframework.integration.stomp.client.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; Message < ? > org.springframework.integration.stomp.client.Message<?> = org.springframework.integration.stomp.client.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stomp.client.Message<> ) ; assertArrayEquals ( STRING . byte[] ( ) , ( byte [] ) org.springframework.integration.stomp.client.Message<> . getPayload ( ) ) ; org.springframework.integration.stomp.client.ConfigurableApplicationContext . close ( ) ; org.springframework.integration.stomp.client.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.stomp.client.StompSessionManager org.springframework.integration.stomp.client.StompSessionManager ( ) { AbstractStompSessionManager org.springframework.integration.stomp.client.AbstractStompSessionManager = new ReactorNettyTcpStompSessionManager ( org.springframework.integration.stomp.client.ReactorNettyTcpStompClient ) ; org.springframework.integration.stomp.client.AbstractStompSessionManager . setAutoReceipt ( true ) ; org.springframework.integration.stomp.client.AbstractStompSessionManager . setRecoveryInterval ( NUMBER ) ; return org.springframework.integration.stomp.client.AbstractStompSessionManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.stomp.client.PollableChannel org.springframework.integration.stomp.client.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.stomp.client.StompInboundChannelAdapter org.springframework.integration.stomp.client.StompInboundChannelAdapter ( ) { StompInboundChannelAdapter org.springframework.integration.stomp.client.StompInboundChannelAdapter = new StompInboundChannelAdapter ( org.springframework.integration.stomp.client.StompSessionManager ( ) , STRING ) ; org.springframework.integration.stomp.client.StompInboundChannelAdapter . setOutputChannel ( org.springframework.integration.stomp.client.PollableChannel ( ) ) ; return org.springframework.integration.stomp.client.StompInboundChannelAdapter ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.stomp.client.MessageHandler org.springframework.integration.stomp.client.MessageHandler ( ) { StompMessageHandler org.springframework.integration.stomp.client.StompMessageHandler = new StompMessageHandler ( org.springframework.integration.stomp.client.StompSessionManager ( ) ) ; org.springframework.integration.stomp.client.StompMessageHandler . setDestination ( STRING ) ; org.springframework.integration.stomp.client.StompMessageHandler . setConnectTimeout ( NUMBER ) ; return org.springframework.integration.stomp.client.StompMessageHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.stomp.client.PollableChannel org.springframework.integration.stomp.client.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.stomp.client.ApplicationListener<org.springframework.integration.stomp.client.ApplicationEvent> < ApplicationEvent > org.springframework.integration.stomp.client.ApplicationListener<org.springframework.integration.stomp.client.ApplicationEvent> ( ) { ApplicationEventListeningMessageProducer org.springframework.integration.stomp.client.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.stomp.client.ApplicationEventListeningMessageProducer . setEventTypes ( StompIntegrationEvent .class ) ; org.springframework.integration.stomp.client.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.stomp.client.PollableChannel ( ) ) ; return org.springframework.integration.stomp.client.ApplicationEventListeningMessageProducer ; }  <METHOD_END>
