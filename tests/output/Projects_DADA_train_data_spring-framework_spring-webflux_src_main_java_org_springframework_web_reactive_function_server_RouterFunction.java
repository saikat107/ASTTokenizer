<METHOD_START> org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> < HandlerFunction < T > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest );  <METHOD_END>
<METHOD_START> default org.springframework.web.reactive.function.server.RouterFunction<T> < T > org.springframework.web.reactive.function.server.RouterFunction<T> ( org.springframework.web.reactive.function.server.RouterFunction<T> < T > org.springframework.web.reactive.function.server.RouterFunction<T> ) { return org.springframework.web.reactive.function.server.ServerRequest -> this . org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> ( org.springframework.web.reactive.function.server.ServerRequest ) . otherwiseIfEmpty ( Mono . defer ( ( ) other . route ( request ) ) ) ; }  <METHOD_END>
<METHOD_START> default org.springframework.web.reactive.function.server.RouterFunction<?> < ? > org.springframework.web.reactive.function.server.RouterFunction<?> ( org.springframework.web.reactive.function.server.RouterFunction<?> < ? > org.springframework.web.reactive.function.server.RouterFunction<?> ) { return org.springframework.web.reactive.function.server.ServerRequest -> this . org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> ( org.springframework.web.reactive.function.server.ServerRequest ) . map ( RouterFunctions :: cast ) . otherwiseIfEmpty ( Mono . defer ( ( ) other . route ( request ) . map ( RouterFunctions :: cast ) ) ) ; }  <METHOD_END>
<METHOD_START> default org.springframework.web.reactive.function.server.RouterFunction<T> < T > org.springframework.web.reactive.function.server.RouterFunction<T> ( RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate , HandlerFunction < T > org.springframework.web.reactive.function.server.HandlerFunction<T> ) { return org.springframework.web.reactive.function.server.RouterFunction<T> ( RouterFunctions . route ( org.springframework.web.reactive.function.server.RequestPredicate , org.springframework.web.reactive.function.server.HandlerFunction<T> ) ) ; }  <METHOD_END>
<METHOD_START> default org.springframework.web.reactive.function.server.RouterFunction<T> < T > org.springframework.web.reactive.function.server.RouterFunction<T> ( RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate , org.springframework.web.reactive.function.server.RouterFunction<T> < T > org.springframework.web.reactive.function.server.RouterFunction<T> ) { return org.springframework.web.reactive.function.server.RouterFunction<T> ( RouterFunctions . nest ( org.springframework.web.reactive.function.server.RequestPredicate , org.springframework.web.reactive.function.server.RouterFunction<T> ) ) ; }  <METHOD_END>
<METHOD_START> default < S extends org.springframework.web.reactive.function.server.ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<S> < S > org.springframework.web.reactive.function.server.RouterFunction<S> ( HandlerFilterFunction < T , S > org.springframework.web.reactive.function.server.HandlerFilterFunction<T,S> ) { return request -> this . route ( request ) . map ( filterFunction :: apply ) ; }  <METHOD_END>
