<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.groovy.template.ApplicationContext , GroovyTemplateProperties org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties , ObjectProvider < MarkupTemplateEngine > org.springframework.boot.autoconfigure.groovy.template.ObjectProvider<org.springframework.boot.autoconfigure.groovy.template.MarkupTemplateEngine> ) { this . org.springframework.boot.autoconfigure.groovy.template.ApplicationContext = org.springframework.boot.autoconfigure.groovy.template.ApplicationContext ; this . org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties = org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties ; this . org.springframework.boot.autoconfigure.groovy.template.MarkupTemplateEngine = org.springframework.boot.autoconfigure.groovy.template.ObjectProvider<org.springframework.boot.autoconfigure.groovy.template.MarkupTemplateEngine> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( this . org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties . isCheckTemplateLocation ( ) && ! boolean ( ) ) { TemplateLocation org.springframework.boot.autoconfigure.groovy.template.TemplateLocation = new TemplateLocation ( this . org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties . getResourceLoaderPath ( ) ) ; if ( ! org.springframework.boot.autoconfigure.groovy.template.TemplateLocation . exists ( this . org.springframework.boot.autoconfigure.groovy.template.ApplicationContext ) ) { org.springframework.boot.autoconfigure.groovy.template.Log . warn ( STRING + org.springframework.boot.autoconfigure.groovy.template.TemplateLocation + STRING + STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { try { java.security.ProtectionDomain java.security.ProtectionDomain = MarkupTemplateEngine .class . java.security.ProtectionDomain ( ) ; java.security.CodeSource java.security.CodeSource = java.security.ProtectionDomain . java.security.CodeSource ( ) ; if ( java.security.CodeSource != null && java.security.CodeSource . java.net.URL ( ) . java.lang.String ( ) . boolean ( STRING ) ) { return true ; } return false ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( GroovyMarkupConfig .class ) @ ConfigurationProperties ( prefix = STRING ) public org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfigurer org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfigurer ( ) { GroovyMarkupConfigurer org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfigurer = new GroovyMarkupConfigurer ( ) ; org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfigurer . setResourceLoaderPath ( this . org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties . getResourceLoaderPath ( ) ) ; org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfigurer . setCacheTemplates ( this . org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties . isCache ( ) ) ; if ( this . org.springframework.boot.autoconfigure.groovy.template.MarkupTemplateEngine != null ) { org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfigurer . setTemplateEngine ( this . org.springframework.boot.autoconfigure.groovy.template.MarkupTemplateEngine ) ; } return org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfigurer ; }  <METHOD_END>
<METHOD_START> public void ( GroovyTemplateProperties org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties ) { this . org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties = org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupViewResolver org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupViewResolver ( ) { GroovyMarkupViewResolver org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupViewResolver = new GroovyMarkupViewResolver ( ) ; this . org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties . applyToViewResolver ( org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupViewResolver ) ; return org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupViewResolver ; }  <METHOD_END>
