<METHOD_START> public static org.springframework.jca.cci.connection.Connection org.springframework.jca.cci.connection.Connection ( ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) throws org.springframework.jca.cci.connection.CannotGetCciConnectionException { return org.springframework.jca.cci.connection.Connection ( org.springframework.jca.cci.connection.ConnectionFactory , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.jca.cci.connection.Connection org.springframework.jca.cci.connection.Connection ( ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory , ConnectionSpec org.springframework.jca.cci.connection.ConnectionSpec )			throws org.springframework.jca.cci.connection.CannotGetCciConnectionException { try { if ( org.springframework.jca.cci.connection.ConnectionSpec != null ) { Assert . notNull ( org.springframework.jca.cci.connection.ConnectionFactory , STRING ) ; return org.springframework.jca.cci.connection.ConnectionFactory . getConnection ( org.springframework.jca.cci.connection.ConnectionSpec ) ; } else { return org.springframework.jca.cci.connection.Connection ( org.springframework.jca.cci.connection.ConnectionFactory ) ; } } catch ( ResourceException org.springframework.jca.cci.connection.ResourceException ) { throw new CannotGetCciConnectionException ( STRING , org.springframework.jca.cci.connection.ResourceException ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.jca.cci.connection.Connection org.springframework.jca.cci.connection.Connection ( ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) throws org.springframework.jca.cci.connection.ResourceException { Assert . notNull ( org.springframework.jca.cci.connection.ConnectionFactory , STRING ) ; ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( org.springframework.jca.cci.connection.ConnectionFactory ) ; if ( org.springframework.jca.cci.connection.ConnectionHolder != null ) { return org.springframework.jca.cci.connection.ConnectionHolder . getConnection ( ) ; } org.springframework.jca.cci.connection.Log . debug ( STRING ) ; Connection org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.ConnectionFactory . getConnection ( ) ; if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { org.springframework.jca.cci.connection.Log . debug ( STRING ) ; org.springframework.jca.cci.connection.ConnectionHolder = new ConnectionHolder ( org.springframework.jca.cci.connection.Connection ) ; org.springframework.jca.cci.connection.ConnectionHolder . setSynchronizedWithTransaction ( true ) ; TransactionSynchronizationManager . registerSynchronization ( new org.springframework.jca.cci.connection.ConnectionFactoryUtils.ConnectionSynchronization ( org.springframework.jca.cci.connection.ConnectionHolder , org.springframework.jca.cci.connection.ConnectionFactory ) ) ; TransactionSynchronizationManager . bindResource ( org.springframework.jca.cci.connection.ConnectionFactory , org.springframework.jca.cci.connection.ConnectionHolder ) ; } return org.springframework.jca.cci.connection.Connection ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Connection org.springframework.jca.cci.connection.Connection , ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) { if ( org.springframework.jca.cci.connection.ConnectionFactory == null ) { return false ; } ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( org.springframework.jca.cci.connection.ConnectionFactory ) ; return ( org.springframework.jca.cci.connection.ConnectionHolder != null && org.springframework.jca.cci.connection.ConnectionHolder . getConnection ( ) == org.springframework.jca.cci.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Connection org.springframework.jca.cci.connection.Connection , ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) { try { void ( org.springframework.jca.cci.connection.Connection , org.springframework.jca.cci.connection.ConnectionFactory ) ; } catch ( ResourceException org.springframework.jca.cci.connection.ResourceException ) { org.springframework.jca.cci.connection.Log . debug ( STRING , org.springframework.jca.cci.connection.ResourceException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jca.cci.connection.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( Connection org.springframework.jca.cci.connection.Connection , ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) throws org.springframework.jca.cci.connection.ResourceException { if ( org.springframework.jca.cci.connection.Connection == null || boolean ( org.springframework.jca.cci.connection.Connection , org.springframework.jca.cci.connection.ConnectionFactory ) ) { return; } org.springframework.jca.cci.connection.Connection . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder , ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) { super( org.springframework.jca.cci.connection.ConnectionHolder , org.springframework.jca.cci.connection.ConnectionFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ConnectionHolder org.springframework.jca.cci.connection.ConnectionHolder , ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) { void ( org.springframework.jca.cci.connection.ConnectionHolder . getConnection ( ) , org.springframework.jca.cci.connection.ConnectionFactory ) ; }  <METHOD_END>
