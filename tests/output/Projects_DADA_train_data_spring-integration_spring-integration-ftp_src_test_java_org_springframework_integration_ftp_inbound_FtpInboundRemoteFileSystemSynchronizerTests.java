<METHOD_START> @ Before @ After public void void ( ) { void ( new java.io.File ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertFalse ( java.io.File . boolean ( ) ) ; org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory = new org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory ( ) ; org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory . setUsername ( STRING ) ; org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory . setPassword ( STRING ) ; org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory . setHost ( STRING ) ; FtpInboundFileSynchronizer org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer = spy ( new FtpInboundFileSynchronizer ( org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory ) ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setDeleteRemoteFiles ( true ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setPreserveTimestamp ( true ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setRemoteDirectory ( STRING ) ; FtpRegexPatternFileListFilter org.springframework.integration.ftp.inbound.FtpRegexPatternFileListFilter = new FtpRegexPatternFileListFilter ( STRING ) ; PropertiesPersistingMetadataStore org.springframework.integration.ftp.inbound.PropertiesPersistingMetadataStore = spy ( new PropertiesPersistingMetadataStore ( ) ) ; org.springframework.integration.ftp.inbound.PropertiesPersistingMetadataStore . setBaseDirectory ( STRING ) ; org.springframework.integration.ftp.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; FtpPersistentAcceptOnceFileListFilter org.springframework.integration.ftp.inbound.FtpPersistentAcceptOnceFileListFilter = new FtpPersistentAcceptOnceFileListFilter ( org.springframework.integration.ftp.inbound.PropertiesPersistingMetadataStore , STRING ) ; java.util.List<org.springframework.integration.ftp.inbound.FileListFilter<org.springframework.integration.ftp.inbound.FTPFile>> < FileListFilter < FTPFile > > java.util.List<org.springframework.integration.ftp.inbound.FileListFilter<org.springframework.integration.ftp.inbound.FTPFile>> = new java.util.ArrayList<org.springframework.integration.ftp.inbound.FileListFilter<org.springframework.integration.ftp.inbound.FTPFile>> < FileListFilter < FTPFile > > ( ) ; java.util.List<org.springframework.integration.ftp.inbound.FileListFilter<org.springframework.integration.ftp.inbound.FTPFile>> . add ( org.springframework.integration.ftp.inbound.FtpPersistentAcceptOnceFileListFilter ) ; java.util.List<org.springframework.integration.ftp.inbound.FileListFilter<org.springframework.integration.ftp.inbound.FTPFile>> . add ( org.springframework.integration.ftp.inbound.FtpRegexPatternFileListFilter ) ; CompositeFileListFilter < FTPFile > org.springframework.integration.ftp.inbound.CompositeFileListFilter<org.springframework.integration.ftp.inbound.FTPFile> = new CompositeFileListFilter < FTPFile > ( java.util.List<org.springframework.integration.ftp.inbound.FileListFilter<org.springframework.integration.ftp.inbound.FTPFile>> ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setFilter ( org.springframework.integration.ftp.inbound.CompositeFileListFilter<org.springframework.integration.ftp.inbound.FTPFile> ) ; ExpressionParser org.springframework.integration.ftp.inbound.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.integration.ftp.inbound.Expression = org.springframework.integration.ftp.inbound.ExpressionParser . parseExpression ( STRING ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setLocalFilenameGeneratorExpression ( org.springframework.integration.ftp.inbound.Expression ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . afterPropertiesSet ( ) ; FtpInboundFileSynchronizingMessageSource org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource = new FtpInboundFileSynchronizingMessageSource ( org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . setAutoCreateLocalDirectory ( true ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . setLocalDirectory ( java.io.File ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; CompositeFileListFilter < java.io.File > org.springframework.integration.ftp.inbound.CompositeFileListFilter<java.io.File> = new CompositeFileListFilter < java.io.File > ( ) ; org.springframework.integration.ftp.inbound.CompositeFileListFilter<java.io.File> . addFilter ( new RegexPatternFileListFilter ( STRING ) ) ; AcceptOnceFileListFilter < java.io.File > org.springframework.integration.ftp.inbound.AcceptOnceFileListFilter<java.io.File> = new AcceptOnceFileListFilter < java.io.File > ( ) ; org.springframework.integration.ftp.inbound.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.ftp.inbound.AcceptOnceFileListFilter<java.io.File> ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . setLocalFilter ( org.springframework.integration.ftp.inbound.CompositeFileListFilter<java.io.File> ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . afterPropertiesSet ( ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . start ( ) ; Message < java.io.File > org.springframework.integration.ftp.inbound.Message<java.io.File> = org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.ftp.inbound.Message<java.io.File> ) ; assertEquals ( STRING , org.springframework.integration.ftp.inbound.Message<java.io.File> . getPayload ( ) . getName ( ) ) ; assertThat ( org.springframework.integration.ftp.inbound.Message<java.io.File> . getPayload ( ) . lastModified ( ) , Matchers . greaterThan ( java.lang.System . long ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ftp.inbound.Message<java.io.File> . getHeaders ( ) . get ( FileHeaders . FILENAME ) ) ; Message < java.io.File > org.springframework.integration.ftp.inbound.Message<java.io.File> = org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.ftp.inbound.Message<java.io.File> ) ; assertEquals ( STRING , org.springframework.integration.ftp.inbound.Message<java.io.File> . getPayload ( ) . getName ( ) ) ; assertThat ( org.springframework.integration.ftp.inbound.Message<java.io.File> . getPayload ( ) . lastModified ( ) , Matchers . greaterThan ( java.lang.System . long ( ) ) ) ; Message < java.io.File > org.springframework.integration.ftp.inbound.Message<java.io.File> = org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.ftp.inbound.Message<java.io.File> ) ; verify ( org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer , times ( NUMBER ) ) . synchronizeToLocalDirectory ( java.io.File , java.lang.Integer . int ) ; assertTrue ( new java.io.File ( STRING ) . boolean ( ) ) ; assertTrue ( new java.io.File ( STRING ) . boolean ( ) ) ; TestUtils . getPropertyValue ( org.springframework.integration.ftp.inbound.AcceptOnceFileListFilter<java.io.File> , STRING , java.util.Collection .class ) . clear ( ) ; new java.io.File ( STRING ) . boolean ( ) ; new java.io.File ( STRING ) . boolean ( ) ; org.springframework.integration.ftp.inbound.Message<java.io.File> = org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.ftp.inbound.Message<java.io.File> ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizingMessageSource . stop ( ) ; verify ( org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer ) . close ( ) ; verify ( org.springframework.integration.ftp.inbound.PropertiesPersistingMetadataStore ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; java.io.File . boolean ( ) ; org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory = new org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory ( ) ; org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory . setUsername ( STRING ) ; org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory . setPassword ( STRING ) ; FtpInboundFileSynchronizer org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer = spy ( new FtpInboundFileSynchronizer ( org.springframework.integration.ftp.inbound.FtpInboundRemoteFileSystemSynchronizerTests.TestFtpSessionFactory ) ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setRemoteDirectory ( STRING ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . afterPropertiesSet ( ) ; org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . synchronizeToLocalDirectory ( java.io.File ) ; java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( ) ; assertEquals ( NUMBER , java.io.File[] . int ) ; for ( java.io.File java.io.File : java.io.File[] ) { java.io.File . boolean ( ) ; } org.springframework.integration.ftp.inbound.FtpInboundFileSynchronizer . synchronizeToLocalDirectory ( java.io.File ) ; assertEquals ( NUMBER , java.io.File . java.lang.String[] ( ) . int ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.File java.io.File ) { if ( java.io.File != null && java.io.File . boolean ( ) ) { java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( ) ; if ( java.io.File[] != null ) { for ( java.io.File java.io.File : java.io.File[] ) { if ( java.io.File . boolean ( ) ) { void ( java.io.File ) ; } else { java.io.File . boolean ( ) ; } } } java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String [] java.lang.String[] = new java.io.File ( STRING ) . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { FTPFile org.springframework.integration.ftp.inbound.FTPFile = new FTPFile ( ) ; org.springframework.integration.ftp.inbound.FTPFile . setName ( java.lang.String ) ; org.springframework.integration.ftp.inbound.FTPFile . setType ( FTPFile . FILE_TYPE ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; org.springframework.integration.ftp.inbound.FTPFile . setTimestamp ( java.util.Calendar ) ; java.util.Collection<org.springframework.integration.ftp.inbound.FTPFile> . add ( org.springframework.integration.ftp.inbound.FTPFile ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.ftp.inbound.FTPClient org.springframework.integration.ftp.inbound.FTPClient ( ) { if ( this . java.util.Collection<org.springframework.integration.ftp.inbound.FTPFile> . size ( ) == NUMBER ) { this . void ( ) ; } try { when ( org.springframework.integration.ftp.inbound.FTPClient . getReplyCode ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ftp.inbound.FTPClient . login ( STRING , STRING ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ftp.inbound.FTPClient . changeWorkingDirectory ( Mockito . anyString ( ) ) ) . thenReturn ( true ) ; java.lang.String [] java.lang.String[] = new java.io.File ( STRING ) . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { when ( org.springframework.integration.ftp.inbound.FTPClient . retrieveFile ( Mockito . eq ( STRING + java.lang.String ) , Mockito . any ( java.io.OutputStream .class ) ) ) . thenReturn ( true ) ; } when ( org.springframework.integration.ftp.inbound.FTPClient . listFiles ( STRING ) ) . thenReturn ( java.util.Collection<org.springframework.integration.ftp.inbound.FTPFile> . toArray ( new FTPFile [ java.util.Collection<org.springframework.integration.ftp.inbound.FTPFile> . size ( ) ] ) ) ; when ( org.springframework.integration.ftp.inbound.FTPClient . deleteFile ( Mockito . anyString ( ) ) ) . thenReturn ( true ) ; return org.springframework.integration.ftp.inbound.FTPClient ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
