<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( this . java.lang.String ) ; java.io.File . boolean ( ) ; this . java.io.File = new java.io.File ( java.io.File , this . java.lang.String ) ; try { if ( ! this . java.io.File . boolean ( ) ) { this . java.io.File . boolean ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.io.File . java.lang.String ( ) + STRING , java.lang.Exception ) ; } this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.metadata.LockRegistry . obtain ( java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; try { this . java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; } finally { this . boolean = true ; java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.metadata.LockRegistry . obtain ( java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; try { return this . java.util.Properties . java.lang.String ( java.lang.String ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.metadata.LockRegistry . obtain ( java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; try { return ( java.lang.String ) this . java.util.Properties . java.lang.Object ( java.lang.String ) ; } finally { this . boolean = true ; java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.metadata.LockRegistry . obtain ( java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; try { java.lang.String java.lang.String = this . java.util.Properties . java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { this . java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; this . boolean = true ; return null ; } else { return java.lang.String ; } } finally { java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.metadata.LockRegistry . obtain ( java.lang.String ) ; java.util.concurrent.locks.Lock . void ( ) ; try { java.lang.String java.lang.String = this . java.util.Properties . java.lang.String ( java.lang.String ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { this . java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; this . boolean = true ; return true ; } else { return false ; } } finally { java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.io.File == null || ! this . boolean ) { return; } this . boolean = false ; java.io.OutputStream java.io.OutputStream = null ; try { java.io.OutputStream = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( this . java.io.File ) ) ; this . org.springframework.integration.metadata.DefaultPropertiesPersister . store ( this . java.util.Properties , java.io.OutputStream , STRING ) ; } catch ( java.io.IOException java.io.IOException ) { this . org.springframework.integration.metadata.Log . warn ( STRING + STRING , java.io.IOException ) ; } finally { try { if ( java.io.OutputStream != null ) { java.io.OutputStream . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { this . org.springframework.integration.metadata.Log . warn ( STRING + this . java.io.File . java.lang.String ( ) , java.io.IOException ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.io.InputStream java.io.InputStream = null ; try { java.io.InputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( this . java.io.File ) ) ; this . org.springframework.integration.metadata.DefaultPropertiesPersister . load ( this . java.util.Properties , java.io.InputStream ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.integration.metadata.Log . warn ( STRING + STRING , java.lang.Exception ) ; } finally { try { if ( java.io.InputStream != null ) { java.io.InputStream . void ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.integration.metadata.Log . warn ( STRING + this . java.io.File . java.lang.String ( ) ) ; } } }  <METHOD_END>
