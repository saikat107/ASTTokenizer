<METHOD_START> @ Before public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.integration.xml.splitter.XPathMessageSplitter = new XPathMessageSplitter ( java.lang.String ) ; org.springframework.integration.xml.splitter.XPathMessageSplitter . setOutputChannel ( org.springframework.integration.xml.splitter.QueueChannel ) ; org.springframework.integration.xml.splitter.XPathMessageSplitter . setRequiresReply ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; org.springframework.integration.xml.splitter.XPathMessageSplitter . handleMessage ( new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ) ; java.util.List<org.springframework.integration.xml.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.xml.splitter.Message<?>> = this . org.springframework.integration.xml.splitter.QueueChannel . clear ( ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.integration.xml.splitter.Message<?>> . size ( ) ) ; for ( Message < ? > org.springframework.integration.xml.splitter.Message<?> : java.util.List<org.springframework.integration.xml.splitter.Message<?>> ) { assertTrue ( STRING + org.springframework.integration.xml.splitter.Message<> . getPayload ( ) . getClass ( ) . getName ( ) , org.springframework.integration.xml.splitter.Message<> . getPayload ( ) instanceof org.w3c.dom.Node ) ; assertFalse ( STRING + org.springframework.integration.xml.splitter.Message<> . getPayload ( ) . getClass ( ) . getName ( ) , org.springframework.integration.xml.splitter.Message<> . getPayload ( ) instanceof org.w3c.dom.Document ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = ReplyRequiredException .class ) public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; org.springframework.integration.xml.splitter.XPathMessageSplitter . handleMessage ( new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.xml.splitter.XPathMessageSplitter . setCreateDocuments ( true ) ; org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; org.springframework.integration.xml.splitter.XPathMessageSplitter . handleMessage ( new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ) ; java.util.List<org.springframework.integration.xml.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.xml.splitter.Message<?>> = this . org.springframework.integration.xml.splitter.QueueChannel . clear ( ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.integration.xml.splitter.Message<?>> . size ( ) ) ; for ( Message < ? > org.springframework.integration.xml.splitter.Message<?> : java.util.List<org.springframework.integration.xml.splitter.Message<?>> ) { assertTrue ( STRING + org.springframework.integration.xml.splitter.Message<> . getPayload ( ) . getClass ( ) . getName ( ) , org.springframework.integration.xml.splitter.Message<> . getPayload ( ) instanceof org.w3c.dom.Document ) ; org.w3c.dom.Document org.w3c.dom.Document = ( org.w3c.dom.Document ) org.springframework.integration.xml.splitter.Message<> . getPayload ( ) ; assertEquals ( STRING , STRING , org.w3c.dom.Document . org.w3c.dom.Element ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.integration.xml.splitter.XPathMessageSplitter . handleMessage ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; java.util.List<org.springframework.integration.xml.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.xml.splitter.Message<?>> = this . org.springframework.integration.xml.splitter.QueueChannel . clear ( ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.integration.xml.splitter.Message<?>> . size ( ) ) ; for ( Message < ? > org.springframework.integration.xml.splitter.Message<?> : java.util.List<org.springframework.integration.xml.splitter.Message<?>> ) { assertTrue ( STRING + org.springframework.integration.xml.splitter.Message<> . getPayload ( ) . getClass ( ) . getName ( ) , org.springframework.integration.xml.splitter.Message<> . getPayload ( ) instanceof java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) { org.springframework.integration.xml.splitter.XPathMessageSplitter . handleMessage ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; }  <METHOD_END>
