<METHOD_START> @ Test public void void ( ) { ReactiveMongoRepositoryConfigurationExtension org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension = new ReactiveMongoRepositoryConfigurationExtension ( ) ; void ( org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtensionUnitTests.SampleRepository .class , org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension . getRepositoryConfigurations ( org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource , org.springframework.data.mongodb.repository.config.ResourceLoader , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveMongoRepositoryConfigurationExtension org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension = new ReactiveMongoRepositoryConfigurationExtension ( ) ; void ( org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtensionUnitTests.StoreRepository .class , org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension . getRepositoryConfigurations ( org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource , org.springframework.data.mongodb.repository.config.ResourceLoader , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveMongoRepositoryConfigurationExtension org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension = new ReactiveMongoRepositoryConfigurationExtension ( ) ; void ( org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtensionUnitTests.UnannotatedRepository .class , org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension . getRepositoryConfigurations ( org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource , org.springframework.data.mongodb.repository.config.ResourceLoader , true ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<org.springframework.data.mongodb.repository.config.RepositoryConfiguration<org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource>> < RepositoryConfiguration < RepositoryConfigurationSource > > java.util.Collection<org.springframework.data.mongodb.repository.config.RepositoryConfiguration<org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource>> ) { for ( RepositoryConfiguration < ? > org.springframework.data.mongodb.repository.config.RepositoryConfiguration<?> : java.util.Collection<org.springframework.data.mongodb.repository.config.RepositoryConfiguration<org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource>> ) { if ( org.springframework.data.mongodb.repository.config.RepositoryConfiguration<> . getRepositoryInterface ( ) . equals ( java.lang.Class<> . java.lang.String ( ) ) ) { return; } } fail ( STRING . java.lang.String ( java.lang.Class<> . java.lang.String ( ) ) . java.lang.String ( STRING ) . java.lang.String ( java.util.Collection<org.springframework.data.mongodb.repository.config.RepositoryConfiguration<org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource>> . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<org.springframework.data.mongodb.repository.config.RepositoryConfiguration<org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource>> < RepositoryConfiguration < RepositoryConfigurationSource > > java.util.Collection<org.springframework.data.mongodb.repository.config.RepositoryConfiguration<org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource>> ) { for ( RepositoryConfiguration < ? > org.springframework.data.mongodb.repository.config.RepositoryConfiguration<?> : java.util.Collection<org.springframework.data.mongodb.repository.config.RepositoryConfiguration<org.springframework.data.mongodb.repository.config.RepositoryConfigurationSource>> ) { if ( org.springframework.data.mongodb.repository.config.RepositoryConfiguration<> . getRepositoryInterface ( ) . equals ( java.lang.Class<> . java.lang.String ( ) ) ) { fail ( STRING . java.lang.String ( java.lang.Class<> . java.lang.String ( ) ) ) ; } } }  <METHOD_END>
