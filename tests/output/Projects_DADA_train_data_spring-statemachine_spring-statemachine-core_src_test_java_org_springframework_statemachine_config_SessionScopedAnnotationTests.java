<METHOD_START> @ Before public void void ( ) { org.springframework.statemachine.config.MockMvc = MockMvcBuilders . webAppContextSetup ( org.springframework.statemachine.config.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.statemachine.config.MockHttpSession = new MockHttpSession ( ) ; org.springframework.statemachine.config.MockMvc . perform ( get ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) ; java.lang.Object java.lang.Object = org.springframework.statemachine.config.MockHttpSession . getAttribute ( STRING ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( TestUtils . callMethod ( STRING , java.lang.Object ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.statemachine.config.MockHttpSession = new MockHttpSession ( ) ; MockHttpSession org.springframework.statemachine.config.MockHttpSession = new MockHttpSession ( ) ; org.springframework.statemachine.config.MockMvc . perform ( get ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( is ( STRING ) ) ) ; org.springframework.statemachine.config.MockMvc . perform ( get ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( is ( STRING ) ) ) ; org.springframework.statemachine.config.MockMvc . perform ( post ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isAccepted ( ) ) ; org.springframework.statemachine.config.MockMvc . perform ( post ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isAccepted ( ) ) ; org.springframework.statemachine.config.MockMvc . perform ( get ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( is ( STRING ) ) ) ; org.springframework.statemachine.config.MockMvc . perform ( get ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( is ( STRING ) ) ) ; org.springframework.statemachine.config.MockHttpSession . invalidate ( ) ; org.springframework.statemachine.config.MockHttpSession . invalidate ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.statemachine.config.MockHttpSession = new MockHttpSession ( ) ; org.springframework.statemachine.config.MockMvc . perform ( get ( STRING ) . session ( org.springframework.statemachine.config.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( is ( STRING ) ) ) ; java.lang.Object java.lang.Object = org.springframework.statemachine.config.MockHttpSession . getAttribute ( STRING ) ; java.lang.Object = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( TestUtils . readField ( STRING , java.lang.Object ) , is ( true ) ) ; org.springframework.statemachine.config.MockHttpSession . invalidate ( ) ; assertThat ( TestUtils . readField ( STRING , java.lang.Object ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.statemachine.config.SessionScopedAnnotationTests.TestController org.springframework.statemachine.config.SessionScopedAnnotationTests.TestController ( ) { return new org.springframework.statemachine.config.SessionScopedAnnotationTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public org.springframework.statemachine.config.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.statemachine.config.HttpEntity<java.lang.Void> ( ) { org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getState ( ) ; return new ResponseEntity < java.lang.Void > ( HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . POST ) public org.springframework.statemachine.config.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.statemachine.config.HttpEntity<java.lang.Void> ( @ RequestParam ( STRING ) java.lang.String java.lang.String ) { org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . sendEvent ( java.lang.String ) ; return new ResponseEntity < java.lang.Void > ( HttpStatus . ACCEPTED ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) @ ResponseBody public java.lang.String java.lang.String ( ) { return org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getId ( ) ; }  <METHOD_END>
