<METHOD_START> public void ( ) { this( new SimpleMessageConverter ( ) , new SimpleJmsHeaderMapper ( ) ); }  <METHOD_END>
<METHOD_START> public void ( MessageConverter org.springframework.jms.support.converter.MessageConverter , JmsHeaderMapper org.springframework.jms.support.converter.JmsHeaderMapper ) { Assert . notNull ( org.springframework.jms.support.converter.MessageConverter , STRING ) ; Assert . notNull ( org.springframework.jms.support.converter.JmsHeaderMapper , STRING ) ; this . org.springframework.jms.support.converter.MessageConverter = org.springframework.jms.support.converter.MessageConverter ; this . org.springframework.jms.support.converter.JmsHeaderMapper = org.springframework.jms.support.converter.JmsHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.jms.support.converter.MessageConverter ) { this . org.springframework.jms.support.converter.MessageConverter = org.springframework.jms.support.converter.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( JmsHeaderMapper org.springframework.jms.support.converter.JmsHeaderMapper ) { this . org.springframework.jms.support.converter.JmsHeaderMapper = org.springframework.jms.support.converter.JmsHeaderMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( this . org.springframework.jms.support.converter.MessageConverter , STRING ) ; Assert . notNull ( this . org.springframework.jms.support.converter.JmsHeaderMapper , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax . javax.jms . javax.jms.Message javax.jms.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session ) throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { if ( ! ( java.lang.Object instanceof Message ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING + Message .class . java.lang.String ( ) + STRING ) ; } Message < ? > org.springframework.jms.support.converter.Message<?> = ( Message < ? > ) java.lang.Object ; MessageHeaders org.springframework.jms.support.converter.MessageHeaders = org.springframework.jms.support.converter.Message<> . getHeaders ( ) ; java.lang.Object java.lang.Object = ( org.springframework.jms.support.converter.MessageHeaders != null ? org.springframework.jms.support.converter.MessageHeaders . get ( AbstractMessagingTemplate . CONVERSION_HINT_HEADER ) : null ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( org.springframework.jms.support.converter.Message<> . getPayload ( ) , org.springframework.jms.support.converter.Session , java.lang.Object ) ; this . org.springframework.jms.support.converter.JmsHeaderMapper . fromHeaders ( org.springframework.jms.support.converter.MessageHeaders , javax.jms.Message ) ; return javax.jms.Message ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { if ( javax.jms.Message == null ) { return null ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jms.support.converter.MessageHeaders ( javax.jms.Message ) ; java.lang.Object java.lang.Object = java.lang.Object ( javax.jms.Message ) ; MessageBuilder < java.lang.Object > org.springframework.jms.support.converter.MessageBuilder<java.lang.Object> = ( java.lang.Object instanceof org . springframework . org.springframework.messaging . org.springframework.messaging ) ? MessageBuilder . fromMessage ( ( org . springframework . org.springframework.messaging . org.springframework.messaging < java.lang.Object > ) java.lang.Object ) : MessageBuilder . withPayload ( java.lang.Object ) ; return org.springframework.jms.support.converter.MessageBuilder<java.lang.Object> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.jms.support.converter.JMSException { return this . org.springframework.jms.support.converter.MessageConverter . fromMessage ( javax.jms.Message ) ; }  <METHOD_END>
<METHOD_START> protected javax . javax.jms . javax.jms.Message javax.jms.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , java.lang.Object java.lang.Object )			throws org.springframework.jms.support.converter.JMSException { return this . org.springframework.jms.support.converter.MessageConverter . toMessage ( java.lang.Object , org.springframework.jms.support.converter.Session ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.jms.support.converter.MessageHeaders org.springframework.jms.support.converter.MessageHeaders ( javax . javax.jms . javax.jms javax.jms.Message ) { return this . org.springframework.jms.support.converter.JmsHeaderMapper . toHeaders ( javax.jms.Message ) ; }  <METHOD_END>
