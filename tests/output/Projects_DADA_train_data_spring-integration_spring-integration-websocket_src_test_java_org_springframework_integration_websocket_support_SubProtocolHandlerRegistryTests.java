<METHOD_START> @ Test public void void ( ) { SubProtocolHandler org.springframework.integration.websocket.support.SubProtocolHandler = mock ( SubProtocolHandler .class ) ; SubProtocolHandlerRegistry org.springframework.integration.websocket.support.SubProtocolHandlerRegistry = new SubProtocolHandlerRegistry ( java.util.Collections .< SubProtocolHandler > java.util.List<org.springframework.integration.websocket.support.SubProtocolHandler> ( new StompSubProtocolHandler ( ) ) , org.springframework.integration.websocket.support.SubProtocolHandler ) ; WebSocketSession org.springframework.integration.websocket.support.WebSocketSession = mock ( WebSocketSession .class ) ; when ( org.springframework.integration.websocket.support.WebSocketSession . getAcceptedProtocol ( ) ) . thenReturn ( STRING , ( java.lang.String ) null ) ; SubProtocolHandler org.springframework.integration.websocket.support.SubProtocolHandler = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.support.WebSocketSession ) ; assertNotNull ( org.springframework.integration.websocket.support.SubProtocolHandler ) ; assertThat ( org.springframework.integration.websocket.support.SubProtocolHandler , instanceOf ( StompSubProtocolHandler .class ) ) ; org.springframework.integration.websocket.support.SubProtocolHandler = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.support.WebSocketSession ) ; assertNotNull ( org.springframework.integration.websocket.support.SubProtocolHandler ) ; assertSame ( org.springframework.integration.websocket.support.SubProtocolHandler , org.springframework.integration.websocket.support.SubProtocolHandler ) ; assertEquals ( org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . getSubProtocols ( ) , new StompSubProtocolHandler ( ) . getSupportedProtocols ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SubProtocolHandler org.springframework.integration.websocket.support.SubProtocolHandler = spy ( new StompSubProtocolHandler ( ) ) ; when ( org.springframework.integration.websocket.support.SubProtocolHandler . getSupportedProtocols ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; SubProtocolHandlerRegistry org.springframework.integration.websocket.support.SubProtocolHandlerRegistry = new SubProtocolHandlerRegistry ( java.util.Collections .< SubProtocolHandler > java.util.List<org.springframework.integration.websocket.support.SubProtocolHandler> ( org.springframework.integration.websocket.support.SubProtocolHandler ) ) ; WebSocketSession org.springframework.integration.websocket.support.WebSocketSession = mock ( WebSocketSession .class ) ; when ( org.springframework.integration.websocket.support.WebSocketSession . getAcceptedProtocol ( ) ) . thenReturn ( STRING , ( java.lang.String ) null ) ; SubProtocolHandler org.springframework.integration.websocket.support.SubProtocolHandler = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.support.WebSocketSession ) ; assertNotNull ( org.springframework.integration.websocket.support.SubProtocolHandler ) ; assertSame ( org.springframework.integration.websocket.support.SubProtocolHandler , org.springframework.integration.websocket.support.SubProtocolHandler ) ; org.springframework.integration.websocket.support.SubProtocolHandler = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.support.WebSocketSession ) ; assertNotNull ( org.springframework.integration.websocket.support.SubProtocolHandler ) ; assertSame ( org.springframework.integration.websocket.support.SubProtocolHandler , org.springframework.integration.websocket.support.SubProtocolHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SubProtocolHandler org.springframework.integration.websocket.support.SubProtocolHandler = new StompSubProtocolHandler ( ) ; SubProtocolHandlerRegistry org.springframework.integration.websocket.support.SubProtocolHandlerRegistry = new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.support.SubProtocolHandler ) ; WebSocketSession org.springframework.integration.websocket.support.WebSocketSession = mock ( WebSocketSession .class ) ; when ( org.springframework.integration.websocket.support.WebSocketSession . getAcceptedProtocol ( ) ) . thenReturn ( STRING , STRING , null ) ; try { org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.support.WebSocketSession ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } SubProtocolHandler org.springframework.integration.websocket.support.SubProtocolHandler = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.support.WebSocketSession ) ; assertNotNull ( org.springframework.integration.websocket.support.SubProtocolHandler ) ; assertSame ( org.springframework.integration.websocket.support.SubProtocolHandler , org.springframework.integration.websocket.support.SubProtocolHandler ) ; org.springframework.integration.websocket.support.SubProtocolHandler = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.support.WebSocketSession ) ; assertNotNull ( org.springframework.integration.websocket.support.SubProtocolHandler ) ; assertSame ( org.springframework.integration.websocket.support.SubProtocolHandler , org.springframework.integration.websocket.support.SubProtocolHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SubProtocolHandlerRegistry org.springframework.integration.websocket.support.SubProtocolHandlerRegistry = new SubProtocolHandlerRegistry ( new StompSubProtocolHandler ( ) ) ; Message < java.lang.String > org.springframework.integration.websocket.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( SimpMessageHeaderAccessor . SESSION_ID_HEADER , STRING ) . build ( ) ; java.lang.String java.lang.String = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . resolveSessionId ( org.springframework.integration.websocket.support.Message<java.lang.String> ) ; assertEquals ( java.lang.String , STRING ) ; org.springframework.integration.websocket.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.String = org.springframework.integration.websocket.support.SubProtocolHandlerRegistry . resolveSessionId ( org.springframework.integration.websocket.support.Message<java.lang.String> ) ; assertNull ( java.lang.String ) ; }  <METHOD_END>
