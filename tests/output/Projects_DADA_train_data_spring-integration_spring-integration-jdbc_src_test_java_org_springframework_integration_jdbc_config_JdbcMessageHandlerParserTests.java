<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcMessageHandlerParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; JdbcMessageHandler org.springframework.integration.jdbc.config.JdbcMessageHandler = org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( JdbcMessageHandler .class ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jdbc.config.JdbcMessageHandler , STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcMessageHandlerParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.Message<> . getHeaders ( ) . get ( STRING ) . toString ( ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcMessageHandlerParserTests> ( ) ) ; assertTrue ( org.springframework.integration.jdbc.config.ConfigurableApplicationContext . containsBean ( STRING ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.Message<> . getHeaders ( ) . getId ( ) . toString ( ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcMessageHandlerParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.Message<> . getHeaders ( ) . getId ( ) . toString ( ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcMessageHandlerParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.Message<> . getHeaders ( ) . getId ( ) . toString ( ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , this . java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcMessageHandlerParserTests> ( ) ) ; MessageChannel org.springframework.integration.jdbc.config.MessageChannel = org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; JdbcTemplate org.springframework.integration.jdbc.config.JdbcTemplate = org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , JdbcTemplate .class ) ; int int = NUMBER ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.integration.jdbc.config.JdbcTemplate . query ( STRING , new ColumnMapRowMapper ( ) ) ; while ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . boolean ( ) && int ++ < NUMBER ) { java.lang.Thread . void ( NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.integration.jdbc.config.JdbcTemplate . query ( STRING , new ColumnMapRowMapper ( ) ) ; } assertTrue ( int < NUMBER ) ; assertEquals ( NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcMessageHandlerParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.integration.jdbc.config.ConfigurableApplicationContext != null ) { org.springframework.integration.jdbc.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.integration.jdbc.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; org.springframework.integration.jdbc.config.JdbcTemplate = new JdbcTemplate ( this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , javax.sql.DataSource .class ) ) ; org.springframework.integration.jdbc.config.MessageChannel = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jdbc.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jdbc.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.jdbc.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
