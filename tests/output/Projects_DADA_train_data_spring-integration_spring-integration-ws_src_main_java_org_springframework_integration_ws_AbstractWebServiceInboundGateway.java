<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( SoapHeaderMapper org.springframework.integration.ws.SoapHeaderMapper ) { Assert . notNull ( org.springframework.integration.ws.SoapHeaderMapper , STRING ) ; this . org.springframework.integration.ws.SoapHeaderMapper = org.springframework.integration.ws.SoapHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( MessageContext org.springframework.integration.ws.MessageContext ) throws java.lang.Exception { if ( ! isRunning ( ) ) { throw new ServiceUnavailableException ( STRING ) ; } Assert . notNull ( org.springframework.integration.ws.MessageContext , STRING ) ; try { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; this . void ( org.springframework.integration.ws.MessageContext ) ; } catch ( java.lang.Exception java.lang.Exception ) { while ( ( java.lang.Exception instanceof MessagingException || java.lang.Exception instanceof ExpressionException ) && java.lang.Exception . java.lang.Throwable ( ) instanceof java.lang.Exception ) { java.lang.Exception = ( java.lang.Exception ) java.lang.Exception . java.lang.Throwable ( ) ; } throw java.lang.Exception ; } finally { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( MessageContext org.springframework.integration.ws.MessageContext , AbstractIntegrationMessageBuilder < ? > org.springframework.integration.ws.AbstractIntegrationMessageBuilder<?> ) { WebServiceMessage org.springframework.integration.ws.WebServiceMessage = org.springframework.integration.ws.MessageContext . getRequest ( ) ; java.lang.String [] java.lang.String[] = org.springframework.integration.ws.MessageContext . getPropertyNames ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.integration.ws.AbstractIntegrationMessageBuilder<> . setHeader ( java.lang.String , org.springframework.integration.ws.MessageContext . getProperty ( java.lang.String ) ) ; } } if ( org.springframework.integration.ws.WebServiceMessage instanceof SoapMessage ) { SoapMessage org.springframework.integration.ws.SoapMessage = ( SoapMessage ) org.springframework.integration.ws.WebServiceMessage ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = this . org.springframework.integration.ws.SoapHeaderMapper . toHeadersFromRequest ( org.springframework.integration.ws.SoapMessage ) ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,> ) ) { org.springframework.integration.ws.AbstractIntegrationMessageBuilder<> . copyHeaders ( java.util.Map<java.lang.String,> ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( WebServiceMessage org.springframework.integration.ws.WebServiceMessage , Message < ? > org.springframework.integration.ws.Message<?> ) { if ( org.springframework.integration.ws.WebServiceMessage instanceof SoapMessage ) { this . org.springframework.integration.ws.SoapHeaderMapper . fromHeadersToReply ( org.springframework.integration.ws.Message<> . getHeaders ( ) , ( SoapMessage ) org.springframework.integration.ws.WebServiceMessage ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { stop ( ) ; return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> abstract protected void void ( MessageContext org.springframework.integration.ws.MessageContext ) throws java.lang.Exception ;  <METHOD_END>
