<METHOD_START> public void ( HttpMethod org.springframework.mock.http.client.reactive.test.HttpMethod , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { this( org.springframework.mock.http.client.reactive.test.HttpMethod , UriComponentsBuilder . fromUriString ( java.lang.String ) . buildAndExpand ( java.lang.Object[] ) . encode ( ) . toUri ( ) ); }  <METHOD_END>
<METHOD_START> public void ( HttpMethod org.springframework.mock.http.client.reactive.test.HttpMethod , java.net.URI java.net.URI ) { this . org.springframework.mock.http.client.reactive.test.HttpMethod = org.springframework.mock.http.client.reactive.test.HttpMethod ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> private java.util.function.Function<org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer>,org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void>> < Flux < DataBuffer > , Mono < java.lang.Void > > java.util.function.Function<org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer>,org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void>> ( ) { return org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> -> { this . org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> = org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> . cache ( ) ; return this . org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> . then ( ) ; } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.reactive.test.HttpMethod org.springframework.mock.http.client.reactive.test.HttpMethod ( ) { return this . org.springframework.mock.http.client.reactive.test.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.reactive.test.DataBufferFactory org.springframework.mock.http.client.reactive.test.DataBufferFactory ( ) { return this . org.springframework.mock.http.client.reactive.test.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> < DataBuffer > org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> ( ) { return this . org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.function.Function<org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer>,org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void>> < Flux < DataBuffer > , Mono < java.lang.Void > > java.util.function.Function<org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer>,org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void>> ) { Assert . notNull ( java.util.function.Function<org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer>,org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void>> , STRING ) ; this . java.util.function.Function<org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer>,org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void>> = java.util.function.Function<org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer>,org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> < java.lang.Void > org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.mock.http.client.reactive.test.Publisher<? extends org.springframework.mock.http.client.reactive.test.DataBuffer> ) { return doCommit ( ( ) Mono . defer ( ( ) this . writeHandler . apply ( Flux . from ( body ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> < java.lang.Void > org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.mock.http.client.reactive.test.Publisher<? extends org.springframework.mock.http.client.reactive.test.Publisher<? extends org.springframework.mock.http.client.reactive.test.DataBuffer>> ) { return org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> ( Flux . from ( org.springframework.mock.http.client.reactive.test.Publisher<> ) . flatMap ( p -> p ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> < java.lang.Void > org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> ( ) { return org.springframework.mock.http.client.reactive.test.Mono<java.lang.Void> ( Flux . empty ( ) ) ; }  <METHOD_END>
