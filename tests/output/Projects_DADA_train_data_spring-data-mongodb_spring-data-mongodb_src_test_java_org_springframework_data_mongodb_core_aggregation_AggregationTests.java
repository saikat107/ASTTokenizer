<METHOD_START> @ Before public void void ( ) { void ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.data.mongodb.core.aggregation.Version == null ) { org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.aggregation.MongoTemplate . executeCommand ( STRING ) ; org.springframework.data.mongodb.core.aggregation.Version = Version . parse ( org.bson.Document . get ( STRING ) . toString ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( java.lang.String ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Product .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( UserWithLikes .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( DATAMONGO753 .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Data .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( DATAMONGO788 .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( User .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Person .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Reservation .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Venue .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( MeterData .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( LineItem .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( InventoryItem .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Sales .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Sales2 .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Employee .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( Art .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! boolean ) { org.springframework.data.mongodb.core.aggregation.Logger . debug ( STRING , org.springframework.data.mongodb.core.aggregation.Version ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . dropCollection ( ZipInfo .class ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . execute ( ZipInfo .class , new CollectionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> ) throws org.springframework.data.mongodb.core.aggregation.MongoException , org.springframework.data.mongodb.core.aggregation.DataAccessException { java.util.Scanner java.util.Scanner = null ; try { java.util.Scanner = new java.util.Scanner ( new java.io.BufferedInputStream ( new ClassPathResource ( STRING ) . getInputStream ( ) ) ) ; while ( java.util.Scanner . boolean ( ) ) { java.lang.String java.lang.String = java.util.Scanner . java.lang.String ( ) ; org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> . insertOne ( Document . parse ( java.lang.String ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.util.Scanner != null ) { java.util.Scanner . void ( ) ; } throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } return null ; } } ) ; long long = org.springframework.data.mongodb.core.aggregation.MongoTemplate . count ( new Query ( ) , ZipInfo .class ) ; assertThat ( long , is ( NUMBER ) ) ; boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> ) throws org.springframework.data.mongodb.core.aggregation.MongoException , org.springframework.data.mongodb.core.aggregation.DataAccessException { java.util.Scanner java.util.Scanner = null ; try { java.util.Scanner = new java.util.Scanner ( new java.io.BufferedInputStream ( new ClassPathResource ( STRING ) . getInputStream ( ) ) ) ; while ( java.util.Scanner . boolean ( ) ) { java.lang.String java.lang.String = java.util.Scanner . java.lang.String ( ) ; org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> . insertOne ( Document . parse ( java.lang.String ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.util.Scanner != null ) { java.util.Scanner . void ( ) ; } throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( newAggregation ( ) , ( java.lang.String ) null , TagCount .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( null , java.lang.String , TagCount .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( newAggregation ( ) , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { createTagDocuments ( ) ; Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , project ( STRING ) . and ( STRING ) . previousOperation ( ) , sort ( DESC , STRING ) ) ; AggregationResults < TagCount > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , TagCount .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> < TagCount > java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> . getMappedResults ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . size ( ) , is ( NUMBER ) ) ; assertTagCount ( STRING , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; assertTagCount ( STRING , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; assertTagCount ( STRING , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { createTagDocuments ( ) ; Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , project ( STRING ) . and ( STRING ) . previousOperation ( ) , sort ( DESC , STRING ) ) . withOptions ( new AggregationOptions ( true , false , NUMBER ) ) ; CloseableIterator < TagCount > org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregateStream ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , TagCount .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> < TagCount > java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> = toList ( org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> ) ; org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> . close ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . size ( ) , is ( NUMBER ) ) ; assertTagCount ( STRING , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; assertTagCount ( STRING , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; assertTagCount ( STRING , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , project ( STRING ) . and ( STRING ) . previousOperation ( ) , sort ( DESC , STRING ) ) ; AggregationResults < TagCount > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , TagCount .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> < TagCount > java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> . getMappedResults ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , project ( STRING ) . and ( STRING ) . previousOperation ( ) , sort ( DESC , STRING ) ) ; CloseableIterator < TagCount > org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregateStream ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , TagCount .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> < TagCount > java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> = toList ( org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> ) ; org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> . close ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( org.springframework.data.mongodb.core.aggregation.Version . isGreaterThanOrEqualTo ( org.springframework.data.mongodb.core.aggregation.Version ) ) ; MongoCollection < Document > org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . getCollection ( java.lang.String ) ; org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> . insertOne ( createDocument ( STRING , STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> . insertOne ( createDocument ( STRING ) ) ; Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING , STRING ) , project ( STRING ) . and ( STRING ) . previousOperation ( ) , sort ( DESC , STRING ) ) ; AggregationResults < TagCount > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , TagCount .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> < TagCount > java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> . getMappedResults ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( org.springframework.data.mongodb.core.aggregation.Version . isGreaterThanOrEqualTo ( org.springframework.data.mongodb.core.aggregation.Version ) ) ; MongoCollection < Document > org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . getCollection ( java.lang.String ) ; org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> . insertOne ( createDocument ( STRING , STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.core.aggregation.MongoCollection<org.springframework.data.mongodb.core.aggregation.Document> . insertOne ( createDocument ( STRING ) ) ; Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING , STRING , true ) , sort ( DESC , STRING ) ) ; AggregationResults < Document > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > java.util.List<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> . get ( NUMBER ) , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.Document> . get ( NUMBER ) , isBsonObject ( ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { createTagDocuments ( ) ; Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , limit ( NUMBER ) ) ; AggregationResults < TagCount > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , TagCount .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> < TagCount > java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.TagCount> . getMappedResults ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . size ( ) , is ( NUMBER ) ) ; assertTagCount ( null , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; assertTagCount ( null , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { createTagDocuments ( ) ; Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation = newAggregation ( project ( STRING ) , unwind ( STRING ) , group ( STRING ) . count ( ) . as ( STRING ) , limit ( NUMBER ) ) ; CloseableIterator < TagCount > org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregateStream ( org.springframework.data.mongodb.core.aggregation.Aggregation , java.lang.String , TagCount .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> , is ( notNullValue ( ) ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> < TagCount > java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> = toList ( org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> ) ; org.springframework.data.mongodb.core.aggregation.CloseableIterator<org.springframework.data.mongodb.core.aggregation.TagCount> . close ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . size ( ) , is ( NUMBER ) ) ; assertTagCount ( null , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; assertTagCount ( null , NUMBER , java.util.List<org.springframework.data.mongodb.core.aggregation.TagCount> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { db.zipInfo.aggregate(			{			   $group: {			      _id: {			         state: '$state',			         city: '$city'			      },			      pop: {			         $sum: '$pop'			      }			   }			},			{			   $sort: {			      pop: 1,			      '_id.state': 1,			      '_id.city': 1			   }			},			{			   $group: {			      _id: '$_id.state',			      biggestCity: {			         $last: '$_id.city'			      },			      biggestPop: {			         $last: '$pop'			      },			      smallestCity: {			         $first: '$_id.city'			      },			      smallestPop: {			         $first: '$pop'			      }			   }			},			{			   $project: {			      _id: 0,			      state: '$_id',			      biggestCity: {			         name: '$biggestCity',			         pop: '$biggestPop'			      },			      smallestCity: {			         name: '$smallestCity',			         pop: '$smallestPop'			      }			   }			},			{			   $sort: {			      state: 1			   }			}		)		*/ TypedAggregation < ZipInfo > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> = newAggregation ( ZipInfo .class , group ( STRING , STRING ) . sum ( STRING ) . as ( STRING ) , sort ( ASC , STRING , STRING , STRING ) , group ( STRING ) . last ( STRING ) . as ( STRING ) . last ( STRING ) . as ( STRING ) . first ( STRING ) . as ( STRING ) . first ( STRING ) . as ( STRING ) , project ( ) . and ( STRING ) . previousOperation ( ) . and ( STRING ) . nested ( bind ( STRING , STRING ) . and ( STRING , STRING ) ) . and ( STRING ) . nested ( bind ( STRING , STRING ) . and ( STRING , STRING ) ) , sort ( ASC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < ZipInfoStats > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.ZipInfoStats> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , ZipInfoStats .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.ZipInfoStats> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.ZipInfoStats> . getMappedResults ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.ZipInfoStats> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; ZipInfoStats org.springframework.data.mongodb.core.aggregation.ZipInfoStats = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.ZipInfoStats> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ZipInfoStats , is ( notNullValue ( ) ) ) ; assertThat ( firstZipInfoStats . id , is ( nullValue ( ) ) ) ; assertThat ( firstZipInfoStats . state , is ( STRING ) ) ; assertThat ( firstZipInfoStats . smallestCity , is ( notNullValue ( ) ) ) ; assertThat ( firstZipInfoStats . smallestCity . name , is ( STRING ) ) ; assertThat ( firstZipInfoStats . smallestCity . population , is ( NUMBER ) ) ; assertThat ( firstZipInfoStats . biggestCity , is ( notNullValue ( ) ) ) ; assertThat ( firstZipInfoStats . biggestCity . name , is ( STRING ) ) ; assertThat ( firstZipInfoStats . biggestCity . population , is ( NUMBER ) ) ; ZipInfoStats org.springframework.data.mongodb.core.aggregation.ZipInfoStats = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.ZipInfoStats> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ZipInfoStats , is ( notNullValue ( ) ) ) ; assertThat ( lastZipInfoStats . id , is ( nullValue ( ) ) ) ; assertThat ( lastZipInfoStats . state , is ( STRING ) ) ; assertThat ( lastZipInfoStats . smallestCity , is ( notNullValue ( ) ) ) ; assertThat ( lastZipInfoStats . smallestCity . name , is ( STRING ) ) ; assertThat ( lastZipInfoStats . smallestCity . population , is ( NUMBER ) ) ; assertThat ( lastZipInfoStats . biggestCity , is ( notNullValue ( ) ) ) ; assertThat ( lastZipInfoStats . biggestCity . name , is ( STRING ) ) ; assertThat ( lastZipInfoStats . biggestCity . population , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { https: db.zipcodes.aggregate(			 	{				   $group: {				      _id:"$state",				      totalPop:{ $sum:"$pop"}		 			 }				},				{		 			$sort: { _id: 1, "totalPop": 1 }		 		},				{				   $match: {				      totalPop: { $gte:10*1000*1000 }				   }				}		)		  */ TypedAggregation < ZipInfo > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> = newAggregation ( ZipInfo .class , group ( STRING ) . sum ( STRING ) . as ( STRING ) , sort ( ASC , previousOperation ( ) , STRING ) , match ( where ( STRING ) . gte ( NUMBER * NUMBER * NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < StateStats > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.StateStats> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , StateStats .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.StateStats> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.StateStats> . getMappedResults ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.StateStats> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; StateStats org.springframework.data.mongodb.core.aggregation.StateStats = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.StateStats> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.StateStats , is ( notNullValue ( ) ) ) ; assertThat ( stateStats . id , is ( STRING ) ) ; assertThat ( stateStats . state , is ( nullValue ( ) ) ) ; assertThat ( stateStats . totalPopulation , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new InventoryItem ( NUMBER , STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new InventoryItem ( NUMBER , STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new InventoryItem ( NUMBER , STRING , NUMBER ) ) ; TypedAggregation < InventoryItem > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.InventoryItem> = newAggregation ( InventoryItem .class , project ( STRING ) . and ( STRING ) . applyCondition ( ConditionalOperators . Cond . newBuilder ( ) . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . then ( NUMBER ) . otherwise ( NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.InventoryItem> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < Document > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.InventoryItem> , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new InventoryItem ( NUMBER , STRING , STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new InventoryItem ( NUMBER , STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new InventoryItem ( NUMBER , STRING , NUMBER ) ) ; TypedAggregation < InventoryItem > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.InventoryItem> = newAggregation ( InventoryItem .class , project ( STRING ) . and ( ConditionalOperators . ifNull ( STRING ) . then ( STRING ) ) . as ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.InventoryItem> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < Document > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.InventoryItem> , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypedAggregation < ZipInfo > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> = newAggregation ( ZipInfo .class , project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . then ( true ) . otherwise ( false ) ) . and ( STRING ) . as ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < Document > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) false ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypedAggregation < ZipInfo > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> = newAggregation ( ZipInfo .class , project ( ) . and ( STRING ) . applyCondition ( ConditionalOperators . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . then ( ConditionalOperators . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . then ( STRING ) . otherwise ( STRING ) ) . otherwise ( STRING ) ) . and ( STRING ) . as ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < Document > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.ZipInfo> , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new LineItem ( STRING , STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new LineItem ( STRING , null , NUMBER ) ) ; TypedAggregation < LineItem > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.LineItem> = newAggregation ( LineItem .class , project ( STRING ) . and ( STRING ) . applyCondition ( ConditionalOperators . ifNull ( STRING ) . then ( STRING ) ) , sort ( ASC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.LineItem> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < Document > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.LineItem> , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( ( java.lang.String ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( ( java.lang.String ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new LineItem ( STRING , STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.aggregation.MongoTemplate . insert ( new LineItem ( STRING , null , NUMBER ) ) ; TypedAggregation < LineItem > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.LineItem> = newAggregation ( LineItem .class , project ( STRING ) . and ( STRING ) . applyCondition ( ConditionalOperators . ifNull ( STRING ) . thenValueOf ( STRING ) ) , sort ( ASC , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.LineItem> . toString ( ) , is ( notNullValue ( ) ) ) ; AggregationResults < Document > org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> = org.springframework.data.mongodb.core.aggregation.MongoTemplate . aggregate ( org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.LineItem> , Document .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . size ( ) , is ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( ( java.lang.String ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationResults<org.springframework.data.mongodb.core.aggregation.Document> . getMappedResults ( ) . get ( NUMBER ) ; assertThat ( ( java.lang.String ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) {		mongoTemplate.dropCollection(CarPerson.class);		CarPerson person1 = new CarPerson("first1", "last1", new CarDescriptor.Entry("MAKE1", "MODEL1", 2000),				new CarDescriptor.Entry("MAKE1", "MODEL2", 2001));		CarPerson person2 = new CarPerson("first2", "last2", new CarDescriptor.Entry("MAKE3", "MODEL4", 2014));		CarPerson person3 = new CarPerson("first3", "last3", new CarDescriptor.Entry("MAKE2", "MODEL5", 2015));		mongoTemplate.save(person1);		mongoTemplate.save(person2);		mongoTemplate.save(person3);		TypedAggregation<CarPerson> agg = Aggregation.newAggregation(CarPerson.class,				unwind("descriptors.carDescriptor.entries"), project() .and(ConditionalOperators .when(Criteria.where("descriptors.carDescriptor.entries.make").is("MAKE1")).then("good")								.otherwise("meh"))						.as("make") .and("descriptors.carDescriptor.entries.model").as("model") .and("descriptors.carDescriptor.entries.year").as("year"), group("make").avg(ConditionalOperato  <METHOD_END>
