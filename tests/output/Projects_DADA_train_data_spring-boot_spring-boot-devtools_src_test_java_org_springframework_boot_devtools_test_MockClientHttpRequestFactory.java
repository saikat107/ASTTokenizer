<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.test.ClientHttpRequest org.springframework.boot.devtools.test.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.boot.devtools.test.HttpMethod )			throws java.io.IOException { return new org.springframework.boot.devtools.test.MockClientHttpRequestFactory.MockRequest ( java.net.URI , org.springframework.boot.devtools.test.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpStatus ... org.springframework.boot.devtools.test.HttpStatus[] ) { for ( HttpStatus org.springframework.boot.devtools.test.HttpStatus : org.springframework.boot.devtools.test.HttpStatus[] ) { this . java.util.Deque<java.lang.Object> . boolean ( new org.springframework.boot.devtools.test.MockClientHttpRequestFactory.Response ( NUMBER , null , org.springframework.boot.devtools.test.HttpStatus ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.io.IOException ... java.io.IOException[] ) { for ( java.io.IOException java.io.IOException : java.io.IOException[] ) { this . java.util.Deque<java.lang.Object> . void ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.Deque<java.lang.Object> . boolean ( new org.springframework.boot.devtools.test.MockClientHttpRequestFactory.Response ( NUMBER , java.lang.String . byte[] ( ) , HttpStatus . OK ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int , HttpStatus org.springframework.boot.devtools.test.HttpStatus ) { this . java.util.Deque<java.lang.Object> . boolean ( new org.springframework.boot.devtools.test.MockClientHttpRequestFactory.Response ( int , null , org.springframework.boot.devtools.test.HttpStatus ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.devtools.test.MockClientHttpRequest> < MockClientHttpRequest > java.util.List<org.springframework.boot.devtools.test.MockClientHttpRequest> ( ) { return this . java.util.List<org.springframework.boot.devtools.test.MockClientHttpRequest> ; }  <METHOD_END>
<METHOD_START> void ( java.net.URI java.net.URI , HttpMethod org.springframework.boot.devtools.test.HttpMethod ) { super( org.springframework.boot.devtools.test.HttpMethod , java.net.URI ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.devtools.test.ClientHttpResponse org.springframework.boot.devtools.test.ClientHttpResponse ( ) java.io.IOException { org.springframework.boot.devtools.test.MockClientHttpRequestFactory .this . java.util.List<org.springframework.boot.devtools.test.MockClientHttpRequest> . add ( this ) ; java.lang.Object java.lang.Object = org.springframework.boot.devtools.test.MockClientHttpRequestFactory .this . java.util.Deque<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.io.IOException ) { throw ( java.io.IOException ) java.lang.Object ; } if ( java.lang.Object == null ) { java.lang.Object = new org.springframework.boot.devtools.test.MockClientHttpRequestFactory.Response ( NUMBER , null , HttpStatus . GONE ) ; } return ( ( org.springframework.boot.devtools.test.MockClientHttpRequestFactory.Response ) java.lang.Object ) . org.springframework.boot.devtools.test.ClientHttpResponse ( org.springframework.boot.devtools.test.MockClientHttpRequestFactory .this . java.util.concurrent.atomic.AtomicLong ) ; }  <METHOD_END>
<METHOD_START> void ( int int , byte [] byte[] , HttpStatus org.springframework.boot.devtools.test.HttpStatus ) { this . int = int ; this . byte[] = byte[] ; this . org.springframework.boot.devtools.test.HttpStatus = org.springframework.boot.devtools.test.HttpStatus ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.test.ClientHttpResponse org.springframework.boot.devtools.test.ClientHttpResponse ( java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong ) { MockClientHttpResponse org.springframework.boot.devtools.test.MockClientHttpResponse = new MockClientHttpResponse ( this . byte[] , this . org.springframework.boot.devtools.test.HttpStatus ) ; void ( ) ; if ( this . byte[] != null ) { org.springframework.boot.devtools.test.MockClientHttpResponse . getHeaders ( ) . setContentLength ( this . byte[] . int ) ; org.springframework.boot.devtools.test.MockClientHttpResponse . getHeaders ( ) . setContentType ( MediaType . APPLICATION_OCTET_STREAM ) ; org.springframework.boot.devtools.test.MockClientHttpResponse . getHeaders ( ) . add ( STRING , java.lang.Long . java.lang.String ( java.util.concurrent.atomic.AtomicLong . long ( ) ) ) ; } return org.springframework.boot.devtools.test.MockClientHttpResponse ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . int > NUMBER ) { try { java.lang.Thread . void ( this . int ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } } }  <METHOD_END>
