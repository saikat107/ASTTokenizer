<METHOD_START> @ Test public void void ( ) java.lang.Exception { final int int = NUMBER ; final java.lang.String java.lang.String = STRING ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb = mock ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb .class ) ; given ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb . int ( ) ) . willReturn ( int ) ; final org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome = mock ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome .class ) ; given ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome . org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods ( ) ) . willReturn ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb ) ; JndiTemplate org.springframework.ejb.access.JndiTemplate = new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome ; } } ; LocalStatelessSessionProxyFactoryBean org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean = new LocalStatelessSessionProxyFactoryBean ( ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiName ( java.lang.String ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setResourceRef ( true ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setBusinessInterface ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods .class ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiTemplate ( org.springframework.ejb.access.JndiTemplate ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . afterPropertiesSet ( ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods = ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods ) org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . getObject ( ) ; assertTrue ( java.lang.reflect.Proxy . boolean ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods . java.lang.Class<? extends org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods> ( ) ) ) ; assertTrue ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods . int ( ) == int ) ; verify ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb ) . remove ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final int int = NUMBER ; final java.lang.String java.lang.String = STRING ; final org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb = mock ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb .class ) ; given ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb . int ( ) ) . willReturn ( int ) ; JndiTemplate org.springframework.ejb.access.JndiTemplate = new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb ; } } ; LocalStatelessSessionProxyFactoryBean org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean = new LocalStatelessSessionProxyFactoryBean ( ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiName ( java.lang.String ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setResourceRef ( true ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setBusinessInterface ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods .class ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiTemplate ( org.springframework.ejb.access.JndiTemplate ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . afterPropertiesSet ( ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods = ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods ) org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . getObject ( ) ; assertTrue ( java.lang.reflect.Proxy . boolean ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods . java.lang.Class<? extends org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods> ( ) ) ) ; assertTrue ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods . int ( ) == int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyEjb ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final CreateException org.springframework.ejb.access.CreateException = new CreateException ( ) ; final org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome = mock ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome .class ) ; given ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome . org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods ( ) ) . willThrow ( org.springframework.ejb.access.CreateException ) ; JndiTemplate org.springframework.ejb.access.JndiTemplate = new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome ; } } ; LocalStatelessSessionProxyFactoryBean org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean = new LocalStatelessSessionProxyFactoryBean ( ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiName ( java.lang.String ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setResourceRef ( false ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setBusinessInterface ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods .class ) ; assertEquals ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . getBusinessInterface ( ) , org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods .class ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiTemplate ( org.springframework.ejb.access.JndiTemplate ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . afterPropertiesSet ( ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods = ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods ) org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . getObject ( ) ; assertTrue ( java.lang.reflect.Proxy . boolean ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods . java.lang.Class<? extends org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods> ( ) ) ) ; try { org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods . int ( ) ; fail ( STRING ) ; } catch ( EjbAccessException org.springframework.ejb.access.EjbAccessException ) { assertSame ( org.springframework.ejb.access.CreateException , org.springframework.ejb.access.EjbAccessException . getCause ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome = mock ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome .class ) ; JndiTemplate org.springframework.ejb.access.JndiTemplate = new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome ; } } ; LocalStatelessSessionProxyFactoryBean org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean = new LocalStatelessSessionProxyFactoryBean ( ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiName ( java.lang.String ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setResourceRef ( true ) ; org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . setJndiTemplate ( org.springframework.ejb.access.JndiTemplate ) ; assertTrue ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . isSingleton ( ) ) ; try { org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . int ( STRING ) != NUMBER ) ; } verifyZeroInteractions ( org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; return org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyHome ; }  <METHOD_END>
<METHOD_START> org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBeanTests.MyBusinessMethods ( ) org.springframework.ejb.access.CreateException ;  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
