<METHOD_START> public void ( ) { this( new LinkedCaseInsensitiveMap <> ( NUMBER , java.util.Locale . java.util.Locale ) , false ); }  <METHOD_END>
<METHOD_START> private void ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> , boolean boolean ) { Assert . notNull ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> , STRING ) ; if ( boolean ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new LinkedCaseInsensitiveMap <> ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . int ( ) , java.util.Locale . java.util.Locale ) ; for ( Entry < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>> : java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List ( org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>> . getValue ( ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>> . getKey ( ) , java.util.List<java.lang.String> ) ; } this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Collections . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; } else { this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.http.MediaType> < MediaType > java.util.List<org.springframework.http.MediaType> ) { void ( java.lang.String , MediaType . toString ( java.util.List<org.springframework.http.MediaType> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.http.MediaType> < MediaType > java.util.List<org.springframework.http.MediaType> ( ) { return MediaType . parseMediaTypes ( java.util.List<java.lang.String> ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.Locale.LanguageRange> < java.util.Locale . java.util.Locale.LanguageRange > java.util.List<java.util.Locale.LanguageRange> ) { Assert . notNull ( java.util.List<java.util.Locale.LanguageRange> , STRING ) ; java.text.DecimalFormat java.text.DecimalFormat = new java.text.DecimalFormat ( STRING , java.text.DecimalFormatSymbols ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.util.Locale.LanguageRange> . java.util.stream.Stream<java.util.Locale.LanguageRange> ( ) . java.util.stream.Stream<java.lang.String> ( java.util.Locale.LanguageRange -> java.util.Locale.LanguageRange . double ( ) == java.util.Locale . java.util.Locale.LanguageRange . double ? java.util.Locale.LanguageRange . java.lang.String ( ) : java.util.Locale.LanguageRange . java.lang.String ( ) + STRING + java.text.DecimalFormat . java.lang.String ( java.util.Locale.LanguageRange . double ( ) ) ) . java.util.List<java.lang.String> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.util.Locale.LanguageRange> < java.util.Locale . java.util.Locale.LanguageRange > java.util.List<java.util.Locale.LanguageRange> ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.util.Locale . java.util.Locale.LanguageRange . java.util.List<java.util.Locale.LanguageRange> ( java.lang.String ) ; } return java.util.Collections . java.util.List<java.util.Locale.LanguageRange> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Locale java.util.Locale ) { void ( java.util.Collections . java.util.List<java.util.Locale.LanguageRange> ( new java.util.Locale . java.util.Locale.LanguageRange ( java.util.Locale . java.lang.String ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Locale java.util.Locale ( ) { java.util.List<java.util.Locale.LanguageRange> < java.util.Locale . java.util.Locale.LanguageRange > java.util.List<java.util.Locale.LanguageRange> = java.util.List<java.util.Locale.LanguageRange> ( ) ; if ( java.util.List<java.util.Locale.LanguageRange> . boolean ( ) ) { return null ; } return java.util.List<java.util.Locale.LanguageRange> . java.util.stream.Stream<java.util.Locale.LanguageRange> ( ) . java.util.stream.Stream<java.util.Locale> ( java.util.Locale.LanguageRange -> java.util.Locale . java.util.Locale ( java.util.Locale.LanguageRange . java.lang.String ( ) ) ) . java.util.stream.Stream<java.util.Locale> ( java.util.Locale -> StringUtils . hasText ( java.util.Locale . java.lang.String ( ) ) ) . java.util.Optional<java.util.Locale> ( ) . java.util.Locale ( null ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { void ( java.lang.String , java.lang.Boolean . java.lang.String ( boolean ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Boolean . boolean ( java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.http.HttpMethod> < HttpMethod > java.util.List<org.springframework.http.HttpMethod> ) { void ( java.lang.String , StringUtils . collectionToCommaDelimitedString ( java.util.List<org.springframework.http.HttpMethod> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.http.HttpMethod> < HttpMethod > java.util.List<org.springframework.http.HttpMethod> ( ) { java.util.List<org.springframework.http.HttpMethod> < HttpMethod > java.util.List<org.springframework.http.HttpMethod> = new java.util.ArrayList<org.springframework.http.HttpMethod> <> ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { HttpMethod org.springframework.http.HttpMethod = HttpMethod . resolve ( java.lang.String ) ; if ( org.springframework.http.HttpMethod != null ) { java.util.List<org.springframework.http.HttpMethod> . add ( org.springframework.http.HttpMethod ) ; } } } return java.util.List<org.springframework.http.HttpMethod> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( java.lang.String , java.lang.Long . java.lang.String ( long ) ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; return ( java.lang.String != null ? java.lang.Long . long ( java.lang.String ) : - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpMethod org.springframework.http.HttpMethod ) { void ( java.lang.String , org.springframework.http.HttpMethod . name ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.HttpMethod org.springframework.http.HttpMethod ( ) { return HttpMethod . resolve ( java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.Iterator<java.nio.charset.Charset> = java.util.List<java.nio.charset.Charset> . java.util.Iterator<java.nio.charset.Charset> ( ) ; java.util.Iterator<java.nio.charset.Charset> . boolean ( ) ;) { java.nio.charset.Charset java.nio.charset.Charset = java.util.Iterator<java.nio.charset.Charset> . java.nio.charset.Charset ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.nio.charset.Charset . java.lang.String ( ) . java.lang.String ( java.util.Locale . java.util.Locale ) ) ; if ( java.util.Iterator<java.nio.charset.Charset> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } void ( java.lang.String , java.lang.StringBuilder . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> = new java.util.ArrayList<java.nio.charset.Charset> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { int int = java.lang.String . int ( ';' ) ; java.lang.String java.lang.String ; if ( int == - NUMBER ) { java.lang.String = java.lang.String ; } else { java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; } if ( ! java.lang.String . boolean ( STRING ) ) { java.util.List<java.nio.charset.Charset> . boolean ( java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ) ; } } return java.util.List<java.nio.charset.Charset> ; } else { return java.util.Collections . java.util.List<java.nio.charset.Charset> ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<org.springframework.http.HttpMethod> < HttpMethod > java.util.Set<org.springframework.http.HttpMethod> ) { void ( java.lang.String , StringUtils . collectionToCommaDelimitedString ( java.util.Set<org.springframework.http.HttpMethod> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.http.HttpMethod> < HttpMethod > java.util.Set<org.springframework.http.HttpMethod> ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! StringUtils . isEmpty ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; java.util.List<org.springframework.http.HttpMethod> < HttpMethod > java.util.List<org.springframework.http.HttpMethod> = new java.util.ArrayList<org.springframework.http.HttpMethod> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { HttpMethod org.springframework.http.HttpMethod = HttpMethod . resolve ( java.lang.String ) ; if ( org.springframework.http.HttpMethod != null ) { java.util.List<org.springframework.http.HttpMethod> . add ( org.springframework.http.HttpMethod ) ; } } return java.util.EnumSet . java.util.EnumSet ( java.util.List<org.springframework.http.HttpMethod> ) ; } else { return java.util.EnumSet . java.util.EnumSet<E> ( HttpMethod .class ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset ) { Assert . notNull ( java.lang.String , STRING ) ; ContentDisposition org.springframework.http.ContentDisposition = ContentDisposition . builder ( STRING ) . name ( java.lang.String ) . filename ( java.lang.String , java.nio.charset.Charset ) . build ( ) ; void ( org.springframework.http.ContentDisposition ) ; }  <METHOD_END>
<METHOD_START> public void void ( ContentDisposition org.springframework.http.ContentDisposition ) { void ( java.lang.String , org.springframework.http.ContentDisposition . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.ContentDisposition org.springframework.http.ContentDisposition ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return ContentDisposition . parse ( java.lang.String ) ; } return ContentDisposition . empty ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Locale java.util.Locale ) { Assert . notNull ( java.util.Locale , STRING ) ; void ( java.lang.String , java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Locale java.util.Locale ( ) { return java.util.List<java.lang.String> ( java.lang.String ) . java.util.stream.Stream<java.lang.String> ( ) . java.util.Optional<java.lang.String> ( ) . java.util.Optional<java.util.Locale> ( java.util.Locale :: java.util.Locale ) . java.util.Locale ( null ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( java.lang.String , java.lang.Long . java.lang.String ( long ) ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; return ( java.lang.String != null ? java.lang.Long . long ( java.lang.String ) : - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( MediaType org.springframework.http.MediaType ) { Assert . isTrue ( ! org.springframework.http.MediaType . isWildcardType ( ) , STRING ) ; Assert . isTrue ( ! org.springframework.http.MediaType . isWildcardSubtype ( ) , STRING ) ; void ( java.lang.String , org.springframework.http.MediaType . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.MediaType org.springframework.http.MediaType ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; return ( StringUtils . hasLength ( java.lang.String ) ? MediaType . parseMediaType ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { Assert . isTrue ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) , STRING ) ; Assert . isTrue ( java.lang.String . boolean ( STRING ) , STRING ) ; } void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.net.InetSocketAddress java.net.InetSocketAddress ) { java.lang.String java.lang.String = ( java.net.InetSocketAddress . int ( ) != NUMBER ? java.lang.String . java.lang.String ( STRING , java.net.InetSocketAddress . java.lang.String ( ) , java.net.InetSocketAddress . int ( ) ) : java.net.InetSocketAddress . java.lang.String ( ) ) ; void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { return null ; } int int = java.lang.String . int ( ':' ) ; java.lang.String java.lang.String = null ; int int = NUMBER ; if ( int != - NUMBER && int < java.lang.String . int ( ) - NUMBER ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; try { int = java.lang.Integer . int ( java.lang.String ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { } } if ( java.lang.String == null ) { java.lang.String = java.lang.String ; } return java.net.InetSocketAddress . java.net.InetSocketAddress ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { void ( java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.net.URI java.net.URI ) { void ( java.lang.String , java.net.URI . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; return ( java.lang.String != null ? java.net.URI . java.net.URI ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.http.HttpRange> < HttpRange > java.util.List<org.springframework.http.HttpRange> ) { java.lang.String java.lang.String = HttpRange . toString ( java.util.List<org.springframework.http.HttpRange> ) ; void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.http.HttpRange> < HttpRange > java.util.List<org.springframework.http.HttpRange> ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; return HttpRange . parseRanges ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { void ( java.lang.String , java.lang.String ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , long long ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String[] [ NUMBER ] , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone ) ; void ( java.lang.String , java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( long ) ) ) ; }  <METHOD_END>
<METHOD_START> public long long ( java.lang.String java.lang.String ) { return long ( java.lang.String , true ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String , boolean boolean ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { return - NUMBER ; } if ( java.lang.String . int ( ) >= NUMBER ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone ) ; try { return java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) . long ( ) ; } catch ( java.text.ParseException java.text.ParseException ) { } } } if ( boolean ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } return - NUMBER ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String ) ; if ( java.util.List<java.lang.String> != null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( java.lang.String != null ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } return java.util.List<java.lang.String> ; } return java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String ) ; if ( java.util.List<java.lang.String> != null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( java.lang.String != null ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { if ( STRING . boolean ( java.util.regex.Matcher . java.lang.String ( ) ) ) { java.util.List<java.lang.String> . boolean ( java.util.regex.Matcher . java.lang.String ( ) ) ; } else { java.util.List<java.lang.String> . boolean ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; } } if ( java.util.List<java.lang.String> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } } return java.util.List<java.lang.String> ; } return java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String ) ; return ( java.util.List<java.lang.String> != null ? java.lang.String ( java.util.List<java.lang.String> ) : null ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ; ) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ; return ( java.util.List<java.lang.String> != null ? java.util.List<java.lang.String> . java.lang.String ( NUMBER ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String , java.lang.String -> new java.util.LinkedList<java.lang.String> <> ( ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String , java.lang.String -> new java.util.LinkedList<java.lang.String> <> ( ) ) ; java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { for ( Entry < java.lang.String , java.lang.String > org.springframework.http.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { void ( org.springframework.http.Entry<java.lang.String,java.lang.String> . getKey ( ) , org.springframework.http.Entry<java.lang.String,java.lang.String> . getValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { java.util.LinkedHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.LinkedHashMap<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . int ( ) ) ; for ( Entry < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>> : this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> ( ) ) { java.util.LinkedHashMap<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>> . getKey ( ) , org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>> . getValue ( ) . get ( NUMBER ) ) ; } return java.util.LinkedHashMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Object java.lang.Object ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Object java.lang.Object ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<? extends java.lang.String,? extends java.util.List<java.lang.String>> < ? extends java.lang.String , ? extends java.util.List<java.lang.String> < java.lang.String > > java.util.Map<? extends java.lang.String,? extends java.util.List<java.lang.String>> ) { this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . void ( java.util.Map<,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.Collection<java.util.List<java.lang.String>> ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Collection<java.util.List<java.lang.String>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>>> < Entry < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Set<org.springframework.http.Entry<java.lang.String,java.util.List<java.lang.String>>> ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.http.HttpHeaders ) ) { return false ; } org.springframework.http.HttpHeaders org.springframework.http.HttpHeaders = ( org.springframework.http.HttpHeaders ) java.lang.Object ; return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . boolean ( org.springframework.http.HttpHeaders . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.HttpHeaders org.springframework.http.HttpHeaders ( org.springframework.http.HttpHeaders org.springframework.http.HttpHeaders ) { return new org.springframework.http.HttpHeaders ( org.springframework.http.HttpHeaders , true ) ; }  <METHOD_END>
