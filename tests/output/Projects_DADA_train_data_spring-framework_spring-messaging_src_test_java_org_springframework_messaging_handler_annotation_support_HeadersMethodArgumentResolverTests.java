<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver = new HeadersMethodArgumentResolver ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class , java.lang.String .class , MessageHeaders .class , MessageHeaderAccessor .class , org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor .class ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.messaging.handler.annotation.support.Message<byte[]> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertFalse ( this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , this . org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; assertTrue ( java.lang.Object instanceof java.util.Map ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , this . org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , this . org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; assertTrue ( java.lang.Object instanceof MessageHeaders ) ; MessageHeaders org.springframework.messaging.handler.annotation.support.MessageHeaders = ( MessageHeaders ) java.lang.Object ; assertEquals ( STRING , org.springframework.messaging.handler.annotation.support.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , this . org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; assertTrue ( java.lang.Object instanceof MessageHeaderAccessor ) ; MessageHeaderAccessor org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor = ( MessageHeaderAccessor ) java.lang.Object ; assertEquals ( STRING , org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , this . org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; assertTrue ( java.lang.Object instanceof org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor ) ; org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor = ( org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor ) java.lang.Object ; assertEquals ( STRING , org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( @ Headers java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , @ Headers java.lang.String java.lang.String , MessageHeaders org.springframework.messaging.handler.annotation.support.MessageHeaders , MessageHeaderAccessor org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor , org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor ) {	}  <METHOD_END>
<METHOD_START> protected void ( Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> ) { super( org.springframework.messaging.handler.annotation.support.Message<> ); }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor ( Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> ) { return new org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolverTests.TestMessageHeaderAccessor ( org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
