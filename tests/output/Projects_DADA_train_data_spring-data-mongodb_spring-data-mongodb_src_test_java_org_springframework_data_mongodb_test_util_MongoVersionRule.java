<METHOD_START> public void ( Version org.springframework.data.mongodb.test.util.Version , Version org.springframework.data.mongodb.test.util.Version ) { this . org.springframework.data.mongodb.test.util.Version = org.springframework.data.mongodb.test.util.Version ; this . org.springframework.data.mongodb.test.util.Version = org.springframework.data.mongodb.test.util.Version ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.test.util.MongoVersionRule org.springframework.data.mongodb.test.util.MongoVersionRule ( ) { return new org.springframework.data.mongodb.test.util.MongoVersionRule ( new Version ( NUMBER , NUMBER , NUMBER ) , new Version ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.test.util.MongoVersionRule org.springframework.data.mongodb.test.util.MongoVersionRule ( Version org.springframework.data.mongodb.test.util.Version ) { return new org.springframework.data.mongodb.test.util.MongoVersionRule ( org.springframework.data.mongodb.test.util.Version , new Version ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.test.util.MongoVersionRule org.springframework.data.mongodb.test.util.MongoVersionRule ( Version org.springframework.data.mongodb.test.util.Version ) { return new org.springframework.data.mongodb.test.util.MongoVersionRule ( new Version ( NUMBER , NUMBER , NUMBER ) , org.springframework.data.mongodb.test.util.Version ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.test.util.MongoVersionRule org.springframework.data.mongodb.test.util.MongoVersionRule ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.test.util.Statement org.springframework.data.mongodb.test.util.Statement ( final Statement org.springframework.data.mongodb.test.util.Statement , Description org.springframework.data.mongodb.test.util.Description ) { void ( ) ; return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { if ( org.springframework.data.mongodb.test.util.Version != null ) { if ( org.springframework.data.mongodb.test.util.Version . isLessThan ( org.springframework.data.mongodb.test.util.Version ) || org.springframework.data.mongodb.test.util.Version . isGreaterThan ( org.springframework.data.mongodb.test.util.Version ) ) { throw new AssumptionViolatedException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.test.util.Version , org.springframework.data.mongodb.test.util.Version , org.springframework.data.mongodb.test.util.Version ) ) ; } } org.springframework.data.mongodb.test.util.Statement . evaluate ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { if ( org.springframework.data.mongodb.test.util.Version != null ) { if ( org.springframework.data.mongodb.test.util.Version . isLessThan ( org.springframework.data.mongodb.test.util.Version ) || org.springframework.data.mongodb.test.util.Version . isGreaterThan ( org.springframework.data.mongodb.test.util.Version ) ) { throw new AssumptionViolatedException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.test.util.Version , org.springframework.data.mongodb.test.util.Version , org.springframework.data.mongodb.test.util.Version ) ) ; } } org.springframework.data.mongodb.test.util.Statement . evaluate ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.data.mongodb.test.util.Version == null ) { try { MongoClient org.springframework.data.mongodb.test.util.MongoClient ; org.springframework.data.mongodb.test.util.MongoClient = new MongoClient ( java.lang.String , int ) ; DB org.springframework.data.mongodb.test.util.DB = org.springframework.data.mongodb.test.util.MongoClient . getDB ( STRING ) ; CommandResult org.springframework.data.mongodb.test.util.CommandResult = org.springframework.data.mongodb.test.util.DB . command ( new BasicDBObject ( ) . append ( STRING , NUMBER ) ) ; this . org.springframework.data.mongodb.test.util.Version = Version . parse ( org.springframework.data.mongodb.test.util.CommandResult . get ( STRING ) . toString ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } }  <METHOD_END>
