<METHOD_START> @ BeforeClass public static void void ( ) { Assume . assumeTrue ( java.lang.System . java.lang.String ( STRING ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.oxm.jibx.JibxMarshaller org.springframework.oxm.jibx.JibxMarshaller ( ) java.lang.Exception { JibxMarshaller org.springframework.oxm.jibx.JibxMarshaller = new JibxMarshaller ( ) ; org.springframework.oxm.jibx.JibxMarshaller . setTargetPackage ( STRING ) ; org.springframework.oxm.jibx.JibxMarshaller . afterPropertiesSet ( ) ; return org.springframework.oxm.jibx.JibxMarshaller ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { Flights org.springframework.oxm.jibx.Flights = new Flights ( ) ; FlightType org.springframework.oxm.jibx.FlightType = new FlightType ( ) ; org.springframework.oxm.jibx.FlightType . setNumber ( NUMBER ) ; org.springframework.oxm.jibx.Flights . addFlight ( org.springframework.oxm.jibx.FlightType ) ; return org.springframework.oxm.jibx.Flights ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { JibxMarshaller org.springframework.oxm.jibx.JibxMarshaller = new JibxMarshaller ( ) ; org.springframework.oxm.jibx.JibxMarshaller . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { marshaller . setIndent ( NUMBER ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; marshaller . marshal ( flights , new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING ; assertThat ( java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) . ignoreWhitespace ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { marshaller . setEncoding ( STRING ) ; marshaller . setStandalone ( java.lang.Boolean . java.lang.Boolean ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; marshaller . marshal ( flights , new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ) ; assertTrue ( STRING , java.io.StringWriter . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { marshaller . setDocTypeRootElementName ( STRING ) ; marshaller . setDocTypeSystemId ( STRING ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; marshaller . marshal ( flights , new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ) ; assertTrue ( STRING , java.io.StringWriter . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( STRING , marshaller . supports ( Flights .class ) ) ; assertTrue ( STRING , marshaller . supports ( FlightType .class ) ) ; assertFalse ( STRING , marshaller . supports ( java.lang.Class<? extends org.springframework.oxm.jibx.JibxMarshallerTests> ( ) ) ) ; }  <METHOD_END>
