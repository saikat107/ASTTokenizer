<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; org.springframework.integration.jdbc.config.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNull ( STRING , org.springframework.integration.jdbc.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( STRING , org.springframework.integration.jdbc.config.Message<> ) ; assertTrue ( STRING , org.springframework.integration.jdbc.config.Message<> . getPayload ( ) instanceof java.util.List<?> < ? > ) ; MessageHistory org.springframework.integration.jdbc.config.MessageHistory = MessageHistory . read ( org.springframework.integration.jdbc.config.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.config.MessageHistory ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.jdbc.config.MessageHistory , STRING , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; org.springframework.integration.jdbc.config.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNull ( org.springframework.integration.jdbc.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; org.springframework.integration.jdbc.config.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNull ( org.springframework.integration.jdbc.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.integration.jdbc.config.JdbcTemplate . queryForList ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; assertEquals ( NUMBER , ( ( java.util.Map<?,?> < ? , ? > ) ( ( java.util.List<?> < ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ) . get ( NUMBER ) ) . get ( STRING ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests.Status .class ) . which = NUMBER ; org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; assertEquals ( NUMBER , ( ( java.util.Map<?,?> < ? , ? > ) ( ( java.util.List<?> < ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ) . get ( NUMBER ) ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; new TransactionTemplate ( org.springframework.integration.jdbc.config.PlatformTransactionManager ) . execute ( status -> { jdbcTemplate . update ( STRING ) ; jdbcTemplate . update ( STRING ) ; jdbcTemplate . update ( STRING ) ; jdbcTemplate . update ( STRING ) ; return null ; } ) ; int int = NUMBER ; while ( int < NUMBER ) { @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<?> < ? > > org.springframework.integration.jdbc.config.Message<java.util.List<?>> = ( Message < java.util.List<?> < ? > > ) org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<java.util.List<?>> ) ; int int = org.springframework.integration.jdbc.config.Message<java.util.List<?>> . getPayload ( ) . size ( ) ; assertTrue ( int <= NUMBER ) ; int += int ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcPollingChannelAdapterParserTests> ( ) ) ; MessageChannel org.springframework.integration.jdbc.config.MessageChannel = org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; SourcePollingChannelAdapter org.springframework.integration.jdbc.config.SourcePollingChannelAdapter = org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; assertSame ( org.springframework.integration.jdbc.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.jdbc.config.SourcePollingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.integration.jdbc.config.ConfigurableApplicationContext != null ) { org.springframework.integration.jdbc.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.integration.jdbc.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; void ( ) ; org.springframework.integration.jdbc.config.JdbcTemplate . update ( STRING ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { PollableChannel org.springframework.integration.jdbc.config.PollableChannel = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; this . org.springframework.integration.jdbc.config.MessagingTemplate = new MessagingTemplate ( ) ; this . org.springframework.integration.jdbc.config.MessagingTemplate . setDefaultDestination ( org.springframework.integration.jdbc.config.PollableChannel ) ; this . org.springframework.integration.jdbc.config.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . org.springframework.integration.jdbc.config.JdbcTemplate = new JdbcTemplate ( this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , javax.sql.DataSource .class ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . org.springframework.integration.jdbc.config.PlatformTransactionManager = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return true ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
