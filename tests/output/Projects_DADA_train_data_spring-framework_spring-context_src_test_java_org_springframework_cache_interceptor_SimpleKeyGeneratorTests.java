<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] {} ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] {} ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING } ) ; assertThat ( java.lang.Object . int ( ) , equalTo ( java.lang.Object . int ( ) ) ) ; assertThat ( java.lang.Object . int ( ) , not ( equalTo ( java.lang.Object . int ( ) ) ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING } ) ; assertThat ( java.lang.Object . int ( ) , equalTo ( java.lang.Object . int ( ) ) ) ; assertThat ( java.lang.Object . int ( ) , not ( equalTo ( java.lang.Object . int ( ) ) ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING , NUMBER , STRING } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING , NUMBER , STRING } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING , NUMBER , STRING } ) ; assertThat ( java.lang.Object . int ( ) , equalTo ( java.lang.Object . int ( ) ) ) ; assertThat ( java.lang.Object . int ( ) , not ( equalTo ( java.lang.Object . int ( ) ) ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { null } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { null } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING } ) ; assertThat ( java.lang.Object . int ( ) , equalTo ( java.lang.Object . int ( ) ) ) ; assertThat ( java.lang.Object . int ( ) , not ( equalTo ( java.lang.Object . int ( ) ) ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; assertThat ( java.lang.Object , instanceOf ( SimpleKey .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING , null , STRING , null } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING , null , STRING , null } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { STRING , null , STRING } ) ; assertThat ( java.lang.Object . int ( ) , equalTo ( java.lang.Object . int ( ) ) ) ; assertThat ( java.lang.Object . int ( ) , not ( equalTo ( java.lang.Object . int ( ) ) ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { new java.lang.String [] { STRING , STRING } } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { new java.lang.String [] { STRING , STRING } } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { new java.lang.String [] { STRING , STRING } } ) ; assertThat ( java.lang.Object . int ( ) , equalTo ( java.lang.Object . int ( ) ) ) ; assertThat ( java.lang.Object . int ( ) , not ( equalTo ( java.lang.Object . int ( ) ) ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { new java.lang.String [] { STRING , STRING } , STRING } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { new java.lang.String [] { STRING , STRING } , STRING } ) ; java.lang.Object java.lang.Object = java.lang.Object ( new java.lang.Object [] { new java.lang.String [] { STRING , STRING } , STRING } ) ; assertThat ( java.lang.Object . int ( ) , equalTo ( java.lang.Object . int ( ) ) ) ; assertThat ( java.lang.Object . int ( ) , not ( equalTo ( java.lang.Object . int ( ) ) ) ) ; assertThat ( java.lang.Object , equalTo ( java.lang.Object ) ) ; assertThat ( java.lang.Object , not ( equalTo ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { return this . org.springframework.cache.interceptor.SimpleKeyGenerator . generate ( null , null , java.lang.Object[] ) ; }  <METHOD_END>
