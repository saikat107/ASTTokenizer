<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.trigger.AnnotationConfigApplicationContext org.springframework.statemachine.trigger.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.trigger.TimerTriggerTests.Config1 .class ) ; context . refresh ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) TimerTrigger org.springframework.statemachine.trigger.TimerTrigger = context . getBean ( TimerTrigger .class ) ; org.springframework.statemachine.trigger.TimerTrigger . addTriggerListener ( new TriggerListener ( ) { @ java.lang.Override public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; org.springframework.statemachine.trigger.TimerTrigger . afterPropertiesSet ( ) ; org.springframework.statemachine.trigger.TimerTrigger . start ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.trigger.TimerTriggerTests.Config2 .class ) ; context . refresh ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction = context . getBean ( STRING , org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction .class ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestListener org.springframework.statemachine.trigger.TimerTriggerTests.TestListener = new org.springframework.statemachine.trigger.TimerTriggerTests.TestListener ( ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . addStateListener ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S1 ) ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 ) ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction . int , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.trigger.TimerTriggerTests.Config3 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 = context . getBean ( STRING , org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 .class ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 = new org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 ( ) ; org.springframework.statemachine.trigger.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 ) ; org.springframework.statemachine.trigger.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 . void ( NUMBER ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 . void ( ) ; org.springframework.statemachine.trigger.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener2 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.trigger.TimerTriggerTests.Config4 .class ) ; context . refresh ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction = context . getBean ( STRING , org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction .class ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestListener org.springframework.statemachine.trigger.TimerTriggerTests.TestListener = new org.springframework.statemachine.trigger.TimerTriggerTests.TestListener ( ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . addStateListener ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener ) ; TimerTrigger < ? , ? > org.springframework.statemachine.trigger.TimerTrigger<?,?> = null ; java.util.Map<org.springframework.statemachine.trigger.Trigger<?,?>,org.springframework.statemachine.trigger.Transition<?,?>> < Trigger < ? , ? > , Transition < ? , ? > > java.util.Map<org.springframework.statemachine.trigger.Trigger<?,?>,org.springframework.statemachine.trigger.Transition<?,?>> = TestUtils . readField ( STRING , org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) ; for ( java.util.Map.Entry<org.springframework.statemachine.trigger.Trigger<?,?>,org.springframework.statemachine.trigger.Transition<?,?>> < Trigger < ? , ? > , Transition < ? , ? > > java.util.Map.Entry<org.springframework.statemachine.trigger.Trigger<?,?>,org.springframework.statemachine.trigger.Transition<?,?>> : java.util.Map<org.springframework.statemachine.trigger.Trigger<?,?>,org.springframework.statemachine.trigger.Transition<?,?>> . entrySet ( ) ) { if ( java.util.Map.Entry<org.springframework.statemachine.trigger.Trigger<?,?>,org.springframework.statemachine.trigger.Transition<?,?>> . getKey ( ) instanceof TimerTrigger ) { org.springframework.statemachine.trigger.TimerTrigger<?,?> = ( TimerTrigger < ? , ? > ) java.util.Map.Entry<org.springframework.statemachine.trigger.Trigger<?,?>,org.springframework.statemachine.trigger.Transition<?,?>> . getKey ( ) ; continue; } } assertThat ( org.springframework.statemachine.trigger.TimerTrigger<,> , notNullValue ( ) ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener = new org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener ( ) ; org.springframework.statemachine.trigger.TimerTrigger<,> . addTriggerListener ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S1 ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener . java.util.concurrent.atomic.AtomicInteger . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTriggerListener . java.util.concurrent.atomic.AtomicInteger . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.trigger.TimerTrigger<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.trigger.TimerTrigger<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ( ) { return new TimerTrigger < TestStates , TestEvents > ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachineStateConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineStateConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withInternal ( ) . source ( TestStates . S2 ) . action ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction ( ) ) . timer ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction ( ) { return new org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . end ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . timer ( NUMBER ) . action ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 ( ) ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 ( ) { return new org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction2 ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachineStateConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineStateConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withInternal ( ) . source ( TestStates . S2 ) . action ( org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction ( ) ) . timerOnce ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction ( ) { return new org.springframework.statemachine.trigger.TimerTriggerTests.TestTimerAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.trigger.StateContext<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.StateContext<java.lang.String,java.lang.String> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { int = NUMBER ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.trigger.State<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.trigger.State<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.trigger.Transition<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.StateMachine<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.State<java.lang.String,java.lang.String> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < java.lang.String , java.lang.String > org.springframework.statemachine.trigger.Transition<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
