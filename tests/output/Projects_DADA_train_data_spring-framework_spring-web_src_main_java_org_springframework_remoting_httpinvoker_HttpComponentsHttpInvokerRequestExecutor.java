<METHOD_START> public void ( ) { this( org.springframework.remoting.httpinvoker.HttpClient ( ) , RequestConfig . custom ( ) . setSocketTimeout ( int ) . build ( ) ); }  <METHOD_END>
<METHOD_START> public void ( HttpClient org.springframework.remoting.httpinvoker.HttpClient ) { this( org.springframework.remoting.httpinvoker.HttpClient , null ); }  <METHOD_END>
<METHOD_START> private void ( HttpClient org.springframework.remoting.httpinvoker.HttpClient , RequestConfig org.springframework.remoting.httpinvoker.RequestConfig ) { this . org.springframework.remoting.httpinvoker.HttpClient = org.springframework.remoting.httpinvoker.HttpClient ; this . org.springframework.remoting.httpinvoker.RequestConfig = org.springframework.remoting.httpinvoker.RequestConfig ; }  <METHOD_END>
<METHOD_START> private static org.springframework.remoting.httpinvoker.HttpClient org.springframework.remoting.httpinvoker.HttpClient ( ) { Registry < ConnectionSocketFactory > org.springframework.remoting.httpinvoker.Registry<org.springframework.remoting.httpinvoker.ConnectionSocketFactory> = RegistryBuilder .< ConnectionSocketFactory > create ( ) . register ( STRING , PlainConnectionSocketFactory . getSocketFactory ( ) ) . register ( STRING , SSLConnectionSocketFactory . getSocketFactory ( ) ) . build ( ) ; PoolingHttpClientConnectionManager org.springframework.remoting.httpinvoker.PoolingHttpClientConnectionManager = new PoolingHttpClientConnectionManager ( org.springframework.remoting.httpinvoker.Registry<org.springframework.remoting.httpinvoker.ConnectionSocketFactory> ) ; org.springframework.remoting.httpinvoker.PoolingHttpClientConnectionManager . setMaxTotal ( int ) ; org.springframework.remoting.httpinvoker.PoolingHttpClientConnectionManager . setDefaultMaxPerRoute ( int ) ; return HttpClientBuilder . create ( ) . setConnectionManager ( org.springframework.remoting.httpinvoker.PoolingHttpClientConnectionManager ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpClient org.springframework.remoting.httpinvoker.HttpClient ) { this . org.springframework.remoting.httpinvoker.HttpClient = org.springframework.remoting.httpinvoker.HttpClient ; }  <METHOD_END>
<METHOD_START> public org.springframework.remoting.httpinvoker.HttpClient org.springframework.remoting.httpinvoker.HttpClient ( ) { return this . org.springframework.remoting.httpinvoker.HttpClient ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int >= NUMBER , STRING ) ; this . org.springframework.remoting.httpinvoker.RequestConfig = RequestConfig.Builder ( ) . setConnectTimeout ( int ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.remoting.httpinvoker.RequestConfig = RequestConfig.Builder ( ) . setConnectionRequestTimeout ( int ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int >= NUMBER , STRING ) ; this . org.springframework.remoting.httpinvoker.RequestConfig = RequestConfig.Builder ( ) . setSocketTimeout ( int ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private RequestConfig . RequestConfig.Builder RequestConfig.Builder ( ) { return ( this . org.springframework.remoting.httpinvoker.RequestConfig != null ? RequestConfig . copy ( this . org.springframework.remoting.httpinvoker.RequestConfig ) : RequestConfig . custom ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream )			throws java.io.IOException , java.lang.ClassNotFoundException { HttpPost org.springframework.remoting.httpinvoker.HttpPost = org.springframework.remoting.httpinvoker.HttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; void ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , org.springframework.remoting.httpinvoker.HttpPost , java.io.ByteArrayOutputStream ) ; try { HttpResponse org.springframework.remoting.httpinvoker.HttpResponse = org.springframework.remoting.httpinvoker.HttpResponse ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , org.springframework.remoting.httpinvoker.HttpClient ( ) , org.springframework.remoting.httpinvoker.HttpPost ) ; void ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , org.springframework.remoting.httpinvoker.HttpResponse ) ; java.io.InputStream java.io.InputStream = java.io.InputStream ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , org.springframework.remoting.httpinvoker.HttpResponse ) ; return readRemoteInvocationResult ( java.io.InputStream , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; } finally { org.springframework.remoting.httpinvoker.HttpPost . releaseConnection ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.HttpPost org.springframework.remoting.httpinvoker.HttpPost ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) throws java.io.IOException { HttpPost org.springframework.remoting.httpinvoker.HttpPost = new HttpPost ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = org.springframework.remoting.httpinvoker.RequestConfig ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) ; if ( org.springframework.remoting.httpinvoker.RequestConfig != null ) { org.springframework.remoting.httpinvoker.HttpPost . setConfig ( org.springframework.remoting.httpinvoker.RequestConfig ) ; } LocaleContext org.springframework.remoting.httpinvoker.LocaleContext = LocaleContextHolder . getLocaleContext ( ) ; if ( org.springframework.remoting.httpinvoker.LocaleContext != null ) { java.util.Locale java.util.Locale = org.springframework.remoting.httpinvoker.LocaleContext . getLocale ( ) ; if ( java.util.Locale != null ) { org.springframework.remoting.httpinvoker.HttpPost . addHeader ( HTTP_HEADER_ACCEPT_LANGUAGE , StringUtils . toLanguageTag ( java.util.Locale ) ) ; } } if ( isAcceptGzipEncoding ( ) ) { org.springframework.remoting.httpinvoker.HttpPost . addHeader ( HTTP_HEADER_ACCEPT_ENCODING , ENCODING_GZIP ) ; } return org.springframework.remoting.httpinvoker.HttpPost ; }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RequestConfig org.springframework.remoting.httpinvoker.RequestConfig ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration ) { HttpClient org.springframework.remoting.httpinvoker.HttpClient = org.springframework.remoting.httpinvoker.HttpClient ( ) ; if ( org.springframework.remoting.httpinvoker.HttpClient instanceof Configurable ) { RequestConfig org.springframework.remoting.httpinvoker.RequestConfig = ( ( Configurable ) org.springframework.remoting.httpinvoker.HttpClient ) . getConfig ( ) ; return org.springframework.remoting.httpinvoker.RequestConfig ( org.springframework.remoting.httpinvoker.RequestConfig ) ; } return this . org.springframework.remoting.httpinvoker.RequestConfig ; }  <METHOD_END>
<METHOD_START> private org.springframework.remoting.httpinvoker.RequestConfig org.springframework.remoting.httpinvoker.RequestConfig ( RequestConfig org.springframework.remoting.httpinvoker.RequestConfig ) { if ( this . org.springframework.remoting.httpinvoker.RequestConfig == null ) { return org.springframework.remoting.httpinvoker.RequestConfig ; } RequestConfig . RequestConfig RequestConfig.Builder = RequestConfig . copy ( org.springframework.remoting.httpinvoker.RequestConfig ) ; int int = this . org.springframework.remoting.httpinvoker.RequestConfig . getConnectTimeout ( ) ; if ( int >= NUMBER ) { RequestConfig.Builder . setConnectTimeout ( int ) ; } int int = this . org.springframework.remoting.httpinvoker.RequestConfig . getConnectionRequestTimeout ( ) ; if ( int >= NUMBER ) { RequestConfig.Builder . setConnectionRequestTimeout ( int ) ; } int int = this . org.springframework.remoting.httpinvoker.RequestConfig . getSocketTimeout ( ) ; if ( int >= NUMBER ) { RequestConfig.Builder . setSocketTimeout ( int ) ; } return RequestConfig.Builder . build ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , HttpPost org.springframework.remoting.httpinvoker.HttpPost , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream )			throws java.io.IOException { ByteArrayEntity org.springframework.remoting.httpinvoker.ByteArrayEntity = new ByteArrayEntity ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.ByteArrayEntity . setContentType ( getContentType ( ) ) ; org.springframework.remoting.httpinvoker.HttpPost . setEntity ( org.springframework.remoting.httpinvoker.ByteArrayEntity ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.HttpResponse org.springframework.remoting.httpinvoker.HttpResponse ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , HttpClient org.springframework.remoting.httpinvoker.HttpClient , HttpPost org.springframework.remoting.httpinvoker.HttpPost )			throws java.io.IOException { return org.springframework.remoting.httpinvoker.HttpClient . execute ( org.springframework.remoting.httpinvoker.HttpPost ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , HttpResponse org.springframework.remoting.httpinvoker.HttpResponse )			throws java.io.IOException { StatusLine org.springframework.remoting.httpinvoker.StatusLine = org.springframework.remoting.httpinvoker.HttpResponse . getStatusLine ( ) ; if ( org.springframework.remoting.httpinvoker.StatusLine . getStatusCode ( ) >= NUMBER ) { throw new NoHttpResponseException ( STRING + org.springframework.remoting.httpinvoker.StatusLine . getStatusCode ( ) + STRING + org.springframework.remoting.httpinvoker.StatusLine . getReasonPhrase ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.io.InputStream java.io.InputStream ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , HttpResponse org.springframework.remoting.httpinvoker.HttpResponse )			throws java.io.IOException { if ( boolean ( org.springframework.remoting.httpinvoker.HttpResponse ) ) { return new java.util.zip.GZIPInputStream ( org.springframework.remoting.httpinvoker.HttpResponse . getEntity ( ) . getContent ( ) ) ; } else { return org.springframework.remoting.httpinvoker.HttpResponse . getEntity ( ) . getContent ( ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( HttpResponse org.springframework.remoting.httpinvoker.HttpResponse ) { Header org.springframework.remoting.httpinvoker.Header = org.springframework.remoting.httpinvoker.HttpResponse . getFirstHeader ( HTTP_HEADER_CONTENT_ENCODING ) ; return ( org.springframework.remoting.httpinvoker.Header != null && org.springframework.remoting.httpinvoker.Header . getValue ( ) != null && org.springframework.remoting.httpinvoker.Header . getValue ( ) . toLowerCase ( ) . contains ( ENCODING_GZIP ) ) ; }  <METHOD_END>
