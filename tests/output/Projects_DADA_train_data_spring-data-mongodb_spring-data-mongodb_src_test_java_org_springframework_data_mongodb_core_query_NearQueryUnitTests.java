<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { NearQuery . near ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( NUMBER , NUMBER , Metrics . KILOMETERS ) . maxDistance ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMaxDistance ( ) , is ( org.springframework.data.mongodb.core.query.Distance ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . isSpherical ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( NUMBER , NUMBER , Metrics . KILOMETERS ) . maxDistance ( NUMBER ) ; org.springframework.data.mongodb.core.query.NearQuery . inMiles ( ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMetric ( ) , is ( ( Metric ) Metrics . MILES ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( NUMBER , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMetric ( ) , is ( ( Metric ) Metrics . NEUTRAL ) ) ; org.springframework.data.mongodb.core.query.NearQuery = org.springframework.data.mongodb.core.query.NearQuery . maxDistance ( org.springframework.data.mongodb.core.query.Distance ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMaxDistance ( ) , is ( org.springframework.data.mongodb.core.query.Distance ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . isSpherical ( ) , is ( true ) ) ; org.springframework.data.mongodb.core.query.NearQuery = org.springframework.data.mongodb.core.query.NearQuery . in ( Metrics . MILES ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMetric ( ) , is ( ( Metric ) Metrics . MILES ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMaxDistance ( ) , is ( org.springframework.data.mongodb.core.query.Distance ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . isSpherical ( ) , is ( true ) ) ; org.springframework.data.mongodb.core.query.NearQuery = org.springframework.data.mongodb.core.query.NearQuery . maxDistance ( new Distance ( NUMBER , Metrics . KILOMETERS ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getMetric ( ) , is ( ( Metric ) Metrics . MILES ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.mongodb.core.query.Pageable = new PageRequest ( NUMBER , NUMBER ) ; NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( new Point ( NUMBER , NUMBER ) ) . with ( org.springframework.data.mongodb.core.query.Pageable ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getSkip ( ) , is ( ( long ) org.springframework.data.mongodb.core.query.Pageable . getPageNumber ( ) * org.springframework.data.mongodb.core.query.Pageable . getPageSize ( ) ) ) ; assertThat ( ( java.lang.Long ) org.springframework.data.mongodb.core.query.NearQuery . toDocument ( ) . get ( STRING ) , is ( ( long ) ( org.springframework.data.mongodb.core.query.Pageable . getPageNumber ( ) + NUMBER ) * org.springframework.data.mongodb.core.query.Pageable . getPageSize ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; long long = NUMBER ; NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( new Point ( NUMBER , NUMBER ) ) . query ( Query . query ( Criteria . where ( STRING ) . is ( STRING ) ) . limit ( int ) . skip ( long ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getSkip ( ) , is ( long ) ) ; assertThat ( ( java.lang.Long ) org.springframework.data.mongodb.core.query.NearQuery . toDocument ( ) . get ( STRING ) , is ( ( long ) int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; Pageable org.springframework.data.mongodb.core.query.Pageable = new PageRequest ( NUMBER , NUMBER ) ; NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( new Point ( NUMBER , NUMBER ) ) . query ( Query . query ( Criteria . where ( STRING ) . is ( STRING ) ) . limit ( int ) . skip ( int ) ) . with ( org.springframework.data.mongodb.core.query.Pageable ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . getSkip ( ) , is ( ( long ) org.springframework.data.mongodb.core.query.Pageable . getPageNumber ( ) * org.springframework.data.mongodb.core.query.Pageable . getPageSize ( ) ) ) ; assertThat ( ( java.lang.Long ) org.springframework.data.mongodb.core.query.NearQuery . toDocument ( ) . get ( STRING ) , is ( ( long ) ( org.springframework.data.mongodb.core.query.Pageable . getPageNumber ( ) + NUMBER ) * org.springframework.data.mongodb.core.query.Pageable . getPageSize ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( new Point ( NUMBER , NUMBER ) ) . query ( Query . query ( Criteria . where ( STRING ) . is ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.NearQuery . toDocument ( ) . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { NearQuery . near ( new Point ( NUMBER , NUMBER ) ) . query ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = NUMBER ; NearQuery org.springframework.data.mongodb.core.query.NearQuery = NearQuery . near ( new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.query.NearQuery . num ( long ) ; org.springframework.data.mongodb.core.query.NearQuery . query ( Query . query ( Criteria . where ( STRING ) . is ( STRING ) ) ) ; assertThat ( DocumentTestUtils . getTypedValue ( org.springframework.data.mongodb.core.query.NearQuery . toDocument ( ) , STRING , java.lang.Long .class ) , is ( long ) ) ; }  <METHOD_END>
