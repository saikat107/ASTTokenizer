<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.result.StatusResultMatchers = new StatusResultMatchers ( ) ; this . org.springframework.test.web.servlet.result.MockHttpServletRequest = new MockHttpServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.AssertionError> < java.lang.AssertionError > java.util.List<java.lang.AssertionError> = new java.util.ArrayList<java.lang.AssertionError> <> ( ) ; for ( HttpStatus org.springframework.test.web.servlet.result.HttpStatus : HttpStatus . values ( ) ) { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.test.web.servlet.result.MockHttpServletResponse . setStatus ( org.springframework.test.web.servlet.result.HttpStatus . value ( ) ) ; MvcResult org.springframework.test.web.servlet.result.MvcResult = new StubMvcResult ( org.springframework.test.web.servlet.result.MockHttpServletRequest , null , null , null , null , null , org.springframework.test.web.servlet.result.MockHttpServletResponse ) ; try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.test.web.servlet.result.HttpStatus ) ; ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher = ( ResultMatcher ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , this . org.springframework.test.web.servlet.result.StatusResultMatchers ) ; try { org.springframework.test.web.servlet.result.ResultMatcher . match ( org.springframework.test.web.servlet.result.MvcResult ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { java.util.List<java.lang.AssertionError> . boolean ( java.lang.AssertionError ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.Exception ( STRING + org.springframework.test.web.servlet.result.HttpStatus , java.lang.Exception ) ; } } if ( ! java.util.List<java.lang.AssertionError> . boolean ( ) ) { fail ( STRING + java.util.List<java.lang.AssertionError> ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( HttpStatus org.springframework.test.web.servlet.result.HttpStatus ) throws java.lang.NoSuchMethodException { java.lang.String java.lang.String = org.springframework.test.web.servlet.result.HttpStatus . name ( ) . toLowerCase ( ) . replace ( STRING , STRING ) ; java.lang.String = STRING + StringUtils . capitalize ( Conventions . attributeNameToPropertyName ( java.lang.String ) ) ; return StatusResultMatchers .class . java.lang.reflect.Method ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( HttpStatus org.springframework.test.web.servlet.result.HttpStatus : HttpStatus . values ( ) ) { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.test.web.servlet.result.MockHttpServletResponse . setStatus ( org.springframework.test.web.servlet.result.HttpStatus . value ( ) ) ; MvcResult org.springframework.test.web.servlet.result.MvcResult = new StubMvcResult ( org.springframework.test.web.servlet.result.MockHttpServletRequest , null , null , null , null , null , org.springframework.test.web.servlet.result.MockHttpServletResponse ) ; switch ( org.springframework.test.web.servlet.result.HttpStatus . series ( ) . value ( ) ) { case NUMBER : this . org.springframework.test.web.servlet.result.StatusResultMatchers . is1xxInformational ( ) . match ( org.springframework.test.web.servlet.result.MvcResult ) ; break; case NUMBER : this . org.springframework.test.web.servlet.result.StatusResultMatchers . is2xxSuccessful ( ) . match ( org.springframework.test.web.servlet.result.MvcResult ) ; break; case NUMBER : this . org.springframework.test.web.servlet.result.StatusResultMatchers . is3xxRedirection ( ) . match ( org.springframework.test.web.servlet.result.MvcResult ) ; break; case NUMBER : this . org.springframework.test.web.servlet.result.StatusResultMatchers . is4xxClientError ( ) . match ( org.springframework.test.web.servlet.result.MvcResult ) ; break; case NUMBER : this . org.springframework.test.web.servlet.result.StatusResultMatchers . is5xxServerError ( ) . match ( org.springframework.test.web.servlet.result.MvcResult ) ; break; default: fail ( STRING + org.springframework.test.web.servlet.result.HttpStatus ) ; } } }  <METHOD_END>
