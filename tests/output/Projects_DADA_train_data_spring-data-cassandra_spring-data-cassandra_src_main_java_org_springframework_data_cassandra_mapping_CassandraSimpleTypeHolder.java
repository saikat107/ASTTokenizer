<METHOD_START> private static java.util.Map<org.springframework.data.cassandra.mapping.Name,org.springframework.data.cassandra.mapping.DataType> < Name , DataType > java.util.Map<org.springframework.data.cassandra.mapping.Name,org.springframework.data.cassandra.mapping.DataType> ( ) { java.util.Map<org.springframework.data.cassandra.mapping.Name,org.springframework.data.cassandra.mapping.DataType> < Name , DataType > java.util.Map<org.springframework.data.cassandra.mapping.Name,org.springframework.data.cassandra.mapping.DataType> = new java.util.HashMap<org.springframework.data.cassandra.mapping.Name,org.springframework.data.cassandra.mapping.DataType> <> ( NUMBER ) ; for ( DataType org.springframework.data.cassandra.mapping.DataType : DataType . allPrimitiveTypes ( ) ) { java.util.Map<org.springframework.data.cassandra.mapping.Name,org.springframework.data.cassandra.mapping.DataType> . put ( org.springframework.data.cassandra.mapping.DataType . getName ( ) , org.springframework.data.cassandra.mapping.DataType ) ; } return java.util.Map<org.springframework.data.cassandra.mapping.Name,org.springframework.data.cassandra.mapping.DataType> ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> < java.lang.Class<?> < ? > , DataType > java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> ( java.util.Map<java.lang.Class<?>,java.lang.Class<?>> < java.lang.Class<?> < ? > , java.lang.Class<?> < ? > > java.util.Map<java.lang.Class<?>,java.lang.Class<?>> , CodecRegistry org.springframework.data.cassandra.mapping.CodecRegistry ) { java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> < java.lang.Class<?> < ? > , DataType > java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> = new java.util.HashMap<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> <> ( NUMBER ) ; for ( DataType org.springframework.data.cassandra.mapping.DataType : DataType . allPrimitiveTypes ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.cassandra.mapping.CodecRegistry . codecFor ( org.springframework.data.cassandra.mapping.DataType ) . getJavaType ( ) . getRawType ( ) ; java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> . put ( java.lang.Class<> , org.springframework.data.cassandra.mapping.DataType ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map<java.lang.Class<?>,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.Class<> ) ; if ( java.lang.Class<> != null ) { java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> . put ( java.lang.Class<> , org.springframework.data.cassandra.mapping.DataType ) ; } } java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> . put ( java.lang.String .class , DataType . text ( ) ) ; java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> . put ( java.lang.Long .class , DataType . bigint ( ) ) ; java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> . put ( long .class , DataType . bigint ( ) ) ; return java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( CodecRegistry org.springframework.data.cassandra.mapping.CodecRegistry ) { return DataType . allPrimitiveTypes ( ) . stream ( ) . map ( org.springframework.data.cassandra.mapping.CodecRegistry :: codecFor ) . map ( TypeCodec :: getJavaType ) . map ( TypeToken :: getRawType ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Set<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( DataType . DataType DataType.Name ) { return java.util.Map<DataType.Name,org.springframework.data.cassandra.mapping.DataType> . get ( DataType.Name ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> . boolean ( ) ) { return DataType . varchar ( ) ; } return java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.DataType> . get ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static DataType . DataType.Name [] DataType.Name[] ( java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> ) { DataType . DataType [] DataType.Name[] = new DataType . DataType [ java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . size ( ) ] ; for ( int int = NUMBER ; int != array . length ; int ++ ) { TypeInformation < ? > org.springframework.data.cassandra.mapping.TypeInformation<?> = java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . get ( int ) ; DataType org.springframework.data.cassandra.mapping.DataType = org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.TypeInformation<> . getType ( ) ) ; if ( org.springframework.data.cassandra.mapping.DataType == null ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.cassandra.mapping.TypeInformation<> . getType ( ) ) ) ; } DataType.Name[] [ int ] = org.springframework.data.cassandra.mapping.DataType . getName ( ) ; } return DataType.Name[] ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( java.util.Set<java.lang.Class<?>> , true ); }  <METHOD_END>
