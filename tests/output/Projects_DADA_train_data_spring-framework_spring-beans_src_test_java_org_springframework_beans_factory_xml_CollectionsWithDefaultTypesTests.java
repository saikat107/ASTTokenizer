<METHOD_START> public void ( ) { this . org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.xml.CollectionsWithDefaultTypesTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; for ( java.lang.Object java.lang.Object : org.springframework.beans.factory.xml.TestBean . getSomeList ( ) ) { assertEquals ( STRING , java.lang.Integer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; for ( java.lang.Object java.lang.Object : org.springframework.beans.factory.xml.TestBean . getSomeSet ( ) ) { assertEquals ( STRING , java.lang.Integer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; void ( org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; void ( org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { for ( java.util.Map . java.util.Map.Entry java.util.Map.Entry : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { assertEquals ( STRING , java.lang.Integer .class , java.util.Map.Entry . java.lang.Object ( ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , java.lang.Boolean .class , java.util.Map.Entry . java.lang.Object ( ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MixedCollectionBean org.springframework.beans.factory.xml.MixedCollectionBean = ( MixedCollectionBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING + org.springframework.beans.factory.xml.MixedCollectionBean . getJumble ( ) . size ( ) , org.springframework.beans.factory.xml.MixedCollectionBean . getJumble ( ) . size ( ) == NUMBER ) ; java.util.List java.util.List = ( java.util.List ) org.springframework.beans.factory.xml.MixedCollectionBean . getJumble ( ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( STRING ) ) ; java.lang.Integer [] java.lang.Integer[] = ( java.lang.Integer [] ) java.util.List . java.lang.Object ( NUMBER ) ; assertTrue ( java.lang.Integer[] [ NUMBER ] . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.lang.Integer[] [ NUMBER ] . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; int [] int[] = ( int [] ) java.util.List . java.lang.Object ( NUMBER ) ; assertTrue ( int[] [ NUMBER ] == NUMBER ) ; assertTrue ( int[] [ NUMBER ] == NUMBER ) ; }  <METHOD_END>
