<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( HealthIndicatorAutoConfiguration .class , ManagementServerProperties .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( HealthIndicatorAutoConfiguration .class , ManagementServerProperties .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.CustomHealthIndicator .class , HealthIndicatorAutoConfiguration .class , ManagementServerProperties .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isSameAs ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( HealthIndicatorAutoConfiguration .class , ManagementServerProperties .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( DiskSpaceHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( RedisAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( RedisHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( RedisAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( MongoAutoConfiguration .class , ManagementServerProperties .class , MongoDataAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( MongoHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( MongoAutoConfiguration .class , ManagementServerProperties .class , MongoDataAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( MongoAutoConfiguration .class , RedisAutoConfiguration .class , MongoDataAutoConfiguration .class , SolrAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( DataSourceHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.DataSourceConfig .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.HealthIndicator ) . isExactlyInstanceOf ( CompositeHealthIndicator .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.HealthIndicator . health ( ) . getDetails ( ) ) . containsOnlyKeys ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.RoutingDatasourceConfig .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) ) . isExactlyInstanceOf ( DataSourceHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , ManagementServerProperties .class , DataSourceProperties .class , org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.DataSourceConfig .class , DataSourcePoolMetadataProvidersConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.HealthIndicator . getClass ( ) ) . isEqualTo ( DataSourceHealthIndicator .class ) ; DataSourceHealthIndicator org.springframework.boot.actuate.autoconfigure.DataSourceHealthIndicator = ( DataSourceHealthIndicator ) org.springframework.boot.actuate.autoconfigure.HealthIndicator ; assertThat ( org.springframework.boot.actuate.autoconfigure.DataSourceHealthIndicator . getQuery ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( RabbitAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( RabbitHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( RabbitAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( SolrAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( SolrHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( SolrAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( DiskSpaceHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( MailSenderAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( MailHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( MailSenderAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( ActiveMQAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( JmsHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( ActiveMQAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.JestClientConfiguration .class , JestAutoConfiguration .class , ElasticsearchAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ElasticsearchHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.JestClientConfiguration .class , JestAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ElasticsearchJestHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.JestClientConfiguration .class , JestAutoConfiguration .class , ElasticsearchAutoConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.CassandraConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( CassandraHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.CassandraConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.CouchbaseConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( CouchbaseHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.CouchbaseConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.LdapConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( LdapHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfigurationTests.LdapConfiguration .class , ManagementServerProperties .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( HealthIndicator .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.HealthIndicator> . values ( ) . iterator ( ) . next ( ) . getClass ( ) ) . isEqualTo ( ApplicationHealthIndicator .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . driverClassName ( STRING ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.actuate.autoconfigure.AbstractRoutingDataSource org.springframework.boot.actuate.autoconfigure.AbstractRoutingDataSource ( ) { return mock ( AbstractRoutingDataSource .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return new HealthIndicator ( ) { @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.Health org.springframework.boot.actuate.autoconfigure.Health ( ) { return Health . down ( ) . build ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.Health org.springframework.boot.actuate.autoconfigure.Health ( ) { return Health . down ( ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.CassandraOperations org.springframework.boot.actuate.autoconfigure.CassandraOperations ( ) { CassandraOperations org.springframework.boot.actuate.autoconfigure.CassandraOperations = mock ( CassandraOperations .class ) ; return org.springframework.boot.actuate.autoconfigure.CassandraOperations ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.CouchbaseOperations org.springframework.boot.actuate.autoconfigure.CouchbaseOperations ( ) { CouchbaseOperations org.springframework.boot.actuate.autoconfigure.CouchbaseOperations = mock ( CouchbaseOperations .class ) ; return org.springframework.boot.actuate.autoconfigure.CouchbaseOperations ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.JestClient org.springframework.boot.actuate.autoconfigure.JestClient ( ) { return mock ( JestClient .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.LdapOperations org.springframework.boot.actuate.autoconfigure.LdapOperations ( ) { return mock ( LdapOperations .class ) ; }  <METHOD_END>
