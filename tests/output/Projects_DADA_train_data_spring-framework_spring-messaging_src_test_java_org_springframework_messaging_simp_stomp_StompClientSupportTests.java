<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.StompClientSupport = new StompClientSupport ( ) {} ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( null ) ; void ( new long [] { - NUMBER , NUMBER } ) ; void ( new long [] { NUMBER , - NUMBER } ) ; }  <METHOD_END>
<METHOD_START> private void void ( long [] long[] ) { try { this . org.springframework.messaging.simp.stomp.StompClientSupport . setDefaultHeartbeat ( long[] ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertArrayEquals ( new long [] { NUMBER , NUMBER } , this . org.springframework.messaging.simp.stomp.StompClientSupport . getDefaultHeartbeat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertArrayEquals ( new long [] { NUMBER , NUMBER } , this . org.springframework.messaging.simp.stomp.StompClientSupport . getDefaultHeartbeat ( ) ) ; assertTrue ( this . org.springframework.messaging.simp.stomp.StompClientSupport . isDefaultHeartbeatEnabled ( ) ) ; this . org.springframework.messaging.simp.stomp.StompClientSupport . setDefaultHeartbeat ( new long [] { NUMBER , NUMBER } ) ; assertFalse ( this . org.springframework.messaging.simp.stomp.StompClientSupport . isDefaultHeartbeatEnabled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StompHeaders org.springframework.messaging.simp.stomp.StompHeaders = this . org.springframework.messaging.simp.stomp.StompClientSupport . processConnectHeaders ( null ) ; assertNotNull ( org.springframework.messaging.simp.stomp.StompHeaders ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , org.springframework.messaging.simp.stomp.StompHeaders . getHeartbeat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StompHeaders org.springframework.messaging.simp.stomp.StompHeaders = new StompHeaders ( ) ; org.springframework.messaging.simp.stomp.StompHeaders . setHeartbeat ( new long [] { NUMBER , NUMBER } ) ; org.springframework.messaging.simp.stomp.StompHeaders = this . org.springframework.messaging.simp.stomp.StompClientSupport . processConnectHeaders ( org.springframework.messaging.simp.stomp.StompHeaders ) ; assertNotNull ( org.springframework.messaging.simp.stomp.StompHeaders ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , org.springframework.messaging.simp.stomp.StompHeaders . getHeartbeat ( ) ) ; }  <METHOD_END>
