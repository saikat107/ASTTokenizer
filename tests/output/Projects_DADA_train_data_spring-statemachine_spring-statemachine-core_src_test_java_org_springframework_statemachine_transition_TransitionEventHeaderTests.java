<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.transition.AnnotationConfigApplicationContext org.springframework.statemachine.transition.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.transition.TransitionEventHeaderTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener = new org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ( ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . addStateListener ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.transition.TransitionEventHeaderTests.Config2 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener = new org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ( ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . addStateListener ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.transition.TransitionEventHeaderTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener = new org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ( ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . addStateListener ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S3 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.transition.TransitionEventHeaderTests.Config4 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener = new org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ( ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . addStateListener ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.transition.TransitionEventHeaderTests.Config5 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard = context . getBean ( STRING , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard .class ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener = new org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ( ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . addStateListener ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.transition.ObjectStateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 , TestStates . S212 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getEvent ( ) , is ( TestEvents . E1 ) ) ; assertThat ( org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . state ( TestStates . S2 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . state ( TestStates . S3 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . state ( TestStates . S4 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . choice ( TestStates . S2 ) . state ( TestStates . S3 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . state ( TestStates . S4 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withChoice ( ) . source ( TestStates . S2 ) . first ( TestStates . S3 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) ) . last ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . choice ( TestStates . S2 ) . state ( TestStates . S3 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . state ( TestStates . S4 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withChoice ( ) . source ( TestStates . S2 ) . first ( TestStates . S3 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) ) . last ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . state ( TestStates . S2 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . choice ( TestStates . S3 ) . state ( TestStates . S4 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . and ( ) . withChoice ( ) . source ( TestStates . S3 ) . first ( TestStates . S4 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) ) . last ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineConfigurationConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineConfigurationConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withConfiguration ( ) . taskExecutor ( org.springframework.statemachine.transition.TaskExecutor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineStateConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) . choice ( TestStates . S211 ) . state ( TestStates . S212 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.transition.StateMachineTransitionConfigurer<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S211 ) . and ( ) . withChoice ( ) . source ( TestStates . S211 ) . first ( TestStates . S212 , org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) ) . last ( TestStates . S212 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( ) { return new org.springframework.statemachine.transition.TransitionEventHeaderTests.EventCheckGuard ( true ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) public org.springframework.statemachine.transition.TaskExecutor org.springframework.statemachine.transition.TaskExecutor ( ) { ThreadPoolTaskExecutor org.springframework.statemachine.transition.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.statemachine.transition.ThreadPoolTaskExecutor . setCorePoolSize ( NUMBER ) ; return org.springframework.statemachine.transition.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < TestStates , TestEvents > org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) { this . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> = org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ; return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) { this . org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> = org.springframework.statemachine.transition.StateContext<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.transition.StateMachine<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.transition.State<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.transition.State<org.springframework.statemachine.transition.TestStates,org.springframework.statemachine.transition.TestEvents> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
