<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; assertThat ( this . org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.MyService . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Async java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer ) { this . org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer = org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.MyService org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.MyService ( org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer ) { return new org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.MyService ( org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.Transformer ) ; }  <METHOD_END>
