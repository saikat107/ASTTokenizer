<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return KeyValueRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections .< java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( KeyValueRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.keyvalue.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource ) { AnnotationAttributes org.springframework.data.keyvalue.repository.config.AnnotationAttributes = org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource . getAttributes ( ) ; org.springframework.data.keyvalue.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , org.springframework.data.keyvalue.repository.config.AnnotationAttributes . getString ( java.lang.String ) ) ; org.springframework.data.keyvalue.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.Class<?> ( org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource ) ) ; org.springframework.data.keyvalue.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.Class<?> ( org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource ) ) ; org.springframework.data.keyvalue.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( AnnotationRepositoryConfigurationSource org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource ) { AnnotationMetadata org.springframework.data.keyvalue.repository.config.AnnotationMetadata = org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource . getEnableAnnotationMetadata ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.keyvalue.repository.config.AnnotationMetadata . getAnnotationAttributes ( QueryCreatorType .class . java.lang.String ( ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { return SpelQueryCreator .class ; } AnnotationAttributes org.springframework.data.keyvalue.repository.config.AnnotationAttributes = new AnnotationAttributes ( java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.data.keyvalue.repository.config.AnnotationAttributes . getClass ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( AnnotationRepositoryConfigurationSource org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource ) { AnnotationMetadata org.springframework.data.keyvalue.repository.config.AnnotationMetadata = org.springframework.data.keyvalue.repository.config.AnnotationRepositoryConfigurationSource . getEnableAnnotationMetadata ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.keyvalue.repository.config.AnnotationMetadata . getAnnotationAttributes ( QueryCreatorType .class . java.lang.String ( ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { return KeyValuePartTreeQuery .class ; } AnnotationAttributes org.springframework.data.keyvalue.repository.config.AnnotationAttributes = new AnnotationAttributes ( java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.data.keyvalue.repository.config.AnnotationAttributes . getClass ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.data.keyvalue.repository.config.BeanDefinitionRegistry , RepositoryConfigurationSource org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource ) { super. registerBeansForRoot ( org.springframework.data.keyvalue.repository.config.BeanDefinitionRegistry , org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource ) ; RootBeanDefinition org.springframework.data.keyvalue.repository.config.RootBeanDefinition = new RootBeanDefinition ( KeyValueMappingContext .class ) ; org.springframework.data.keyvalue.repository.config.RootBeanDefinition . setSource ( org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource . getSource ( ) ) ; registerIfNotAlreadyRegistered ( org.springframework.data.keyvalue.repository.config.RootBeanDefinition , org.springframework.data.keyvalue.repository.config.BeanDefinitionRegistry , java.lang.String , org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource ) ; java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource . getAttribute ( java.lang.String ) ; if ( java.util.Optional<java.lang.String> . boolean ( ) && java.lang.String ( ) . boolean ( java.util.Optional<java.lang.String> . java.lang.String ( ) ) && ! org.springframework.data.keyvalue.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( java.util.Optional<java.lang.String> . java.lang.String ( ) ) ) { AbstractBeanDefinition org.springframework.data.keyvalue.repository.config.AbstractBeanDefinition = org.springframework.data.keyvalue.repository.config.AbstractBeanDefinition ( org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource ) ; if ( org.springframework.data.keyvalue.repository.config.AbstractBeanDefinition != null ) { registerIfNotAlreadyRegistered ( org.springframework.data.keyvalue.repository.config.AbstractBeanDefinition , org.springframework.data.keyvalue.repository.config.BeanDefinitionRegistry , java.util.Optional<java.lang.String> . java.lang.String ( ) , org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource . getSource ( ) ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.keyvalue.repository.config.AbstractBeanDefinition org.springframework.data.keyvalue.repository.config.AbstractBeanDefinition ( RepositoryConfigurationSource org.springframework.data.keyvalue.repository.config.RepositoryConfigurationSource ) { return null ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
