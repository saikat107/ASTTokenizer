<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.splitter.Message<?> = MessageBuilder . withPayload ( new org.springframework.integration.splitter.DynamicExpressionSplitterIntegrationTests.TestBean ( ) ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.splitter.MessageChannel . send ( org.springframework.integration.splitter.Message<> ) ; Message < ? > org.springframework.integration.splitter.Message<?> = org.springframework.integration.splitter.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.splitter.Message<?> = org.springframework.integration.splitter.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.splitter.Message<?> = org.springframework.integration.splitter.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.splitter.Message<?> = org.springframework.integration.splitter.PollableChannel . receive ( NUMBER ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.splitter.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { this . java.util.List<java.lang.Integer> . boolean ( int ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( ) { return this . java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String[] ( STRING ) ; }  <METHOD_END>
