<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.mock.web.MockServletContext . getResourcePaths ( STRING ) ; assertNotNull ( java.util.Set<java.lang.String> ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.mock.web.MockServletContext . getResourcePaths ( STRING ) ; assertNotNull ( java.util.Set<java.lang.String> ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.mock.web.MockServletContext . getResourcePaths ( STRING ) ; assertNull ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.mock.web.MockServletContext . getResourcePaths ( STRING ) ; assertNull ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.mock.web.MockServletContext = new MockServletContext ( ) ; org.springframework.mock.web.MockServletContext . setContextPath ( STRING ) ; org.springframework.mock.web.MockServletContext . registerContext ( STRING , org.springframework.mock.web.MockServletContext ) ; assertSame ( org.springframework.mock.web.MockServletContext , org.springframework.mock.web.MockServletContext . getContext ( STRING ) ) ; assertSame ( org.springframework.mock.web.MockServletContext , org.springframework.mock.web.MockServletContext . getContext ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.mock.web.MockServletContext . getMimeType ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockServletContext . getMimeType ( STRING ) ) ; assertNull ( org.springframework.mock.web.MockServletContext . getMimeType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mock.web.MockServletContext . addMimeType ( STRING , new MediaType ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MockServletContext . getMimeType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getMajorVersion ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getMinorVersion ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getEffectiveMajorVersion ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getEffectiveMinorVersion ( ) ) ; org.springframework.mock.web.MockServletContext . setMajorVersion ( NUMBER ) ; org.springframework.mock.web.MockServletContext . setMinorVersion ( NUMBER ) ; org.springframework.mock.web.MockServletContext . setEffectiveMajorVersion ( NUMBER ) ; org.springframework.mock.web.MockServletContext . setEffectiveMinorVersion ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getMajorVersion ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getMinorVersion ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getEffectiveMajorVersion ( ) ) ; assertEquals ( NUMBER , org.springframework.mock.web.MockServletContext . getEffectiveMinorVersion ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; assertNull ( org.springframework.mock.web.MockServletContext . getNamedDispatcher ( java.lang.String ) ) ; org.springframework.mock.web.MockServletContext . registerNamedDispatcher ( java.lang.String , new MockRequestDispatcher ( java.lang.String ) ) ; RequestDispatcher org.springframework.mock.web.RequestDispatcher = org.springframework.mock.web.MockServletContext . getNamedDispatcher ( java.lang.String ) ; assertNotNull ( org.springframework.mock.web.RequestDispatcher ) ; MockHttpServletResponse org.springframework.mock.web.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.mock.web.RequestDispatcher . forward ( new MockHttpServletRequest ( org.springframework.mock.web.MockServletContext ) , org.springframework.mock.web.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getForwardedUrl ( ) ) ; org.springframework.mock.web.MockServletContext . unregisterNamedDispatcher ( java.lang.String ) ; assertNull ( org.springframework.mock.web.MockServletContext . getNamedDispatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; RequestDispatcher org.springframework.mock.web.RequestDispatcher = org.springframework.mock.web.MockServletContext . getNamedDispatcher ( java.lang.String ) ; assertNotNull ( org.springframework.mock.web.RequestDispatcher ) ; MockHttpServletResponse org.springframework.mock.web.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.mock.web.RequestDispatcher . forward ( new MockHttpServletRequest ( org.springframework.mock.web.MockServletContext ) , org.springframework.mock.web.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getForwardedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; assertNotNull ( org.springframework.mock.web.MockServletContext . getNamedDispatcher ( java.lang.String ) ) ; org.springframework.mock.web.MockServletContext . setDefaultServletName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockServletContext . getDefaultServletName ( ) ) ; assertNull ( org.springframework.mock.web.MockServletContext . getNamedDispatcher ( java.lang.String ) ) ; RequestDispatcher org.springframework.mock.web.RequestDispatcher = org.springframework.mock.web.MockServletContext . getNamedDispatcher ( java.lang.String ) ; assertNotNull ( org.springframework.mock.web.RequestDispatcher ) ; MockHttpServletResponse org.springframework.mock.web.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.mock.web.RequestDispatcher . forward ( new MockHttpServletRequest ( org.springframework.mock.web.MockServletContext ) , org.springframework.mock.web.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.mock.web.MockHttpServletResponse . getForwardedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.mock.web.MockServletContext . getServletRegistration ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,? extends org.springframework.mock.web.ServletRegistration> < java.lang.String , ? extends ServletRegistration > java.util.Map<java.lang.String,? extends org.springframework.mock.web.ServletRegistration> = org.springframework.mock.web.MockServletContext . getServletRegistrations ( ) ; assertNotNull ( java.util.Map<java.lang.String,> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.mock.web.MockServletContext . getFilterRegistration ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,? extends org.springframework.mock.web.FilterRegistration> < java.lang.String , ? extends FilterRegistration > java.util.Map<java.lang.String,? extends org.springframework.mock.web.FilterRegistration> = org.springframework.mock.web.MockServletContext . getFilterRegistrations ( ) ; assertNotNull ( java.util.Map<java.lang.String,> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; }  <METHOD_END>
