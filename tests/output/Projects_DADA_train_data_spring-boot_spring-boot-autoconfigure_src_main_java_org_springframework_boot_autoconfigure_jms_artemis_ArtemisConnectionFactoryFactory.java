<METHOD_START> void ( ListableBeanFactory org.springframework.boot.autoconfigure.jms.artemis.ListableBeanFactory , ArtemisProperties org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties ) { Assert . notNull ( org.springframework.boot.autoconfigure.jms.artemis.ListableBeanFactory , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties , STRING ) ; this . org.springframework.boot.autoconfigure.jms.artemis.ListableBeanFactory = org.springframework.boot.autoconfigure.jms.artemis.ListableBeanFactory ; this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties = org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties ; }  <METHOD_END>
<METHOD_START> public < T extends org.springframework.boot.autoconfigure.jms.artemis.ActiveMQConnectionFactory > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { try { void ( ) ; return T ( java.lang.Class<T> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ClassUtils . isPresent ( java.lang.String , null ) ) { try { this . org.springframework.boot.autoconfigure.jms.artemis.ListableBeanFactory . getBeansOfType ( java.lang.Class . java.lang.Class<?> ( java.lang.String ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.boot.autoconfigure.jms.artemis.ActiveMQConnectionFactory > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.Exception { ArtemisMode org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode = this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties . getMode ( ) ; if ( org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode == null ) { org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode = org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode ( ) ; } if ( org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode == ArtemisMode . EMBEDDED ) { return T ( java.lang.Class<T> ) ; } return T ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode ( ) { if ( this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties . getEmbedded ( ) . isEnabled ( ) && ClassUtils . isPresent ( java.lang.String , null ) ) { return ArtemisMode . EMBEDDED ; } return ArtemisMode . NATIVE ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.boot.autoconfigure.jms.artemis.ActiveMQConnectionFactory > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.Exception { try { TransportConfiguration org.springframework.boot.autoconfigure.jms.artemis.TransportConfiguration = new TransportConfiguration ( InVMConnectorFactory .class . java.lang.String ( ) , this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties . getEmbedded ( ) . generateTransportParameters ( ) ) ; ServerLocator org.springframework.boot.autoconfigure.jms.artemis.ServerLocator = ActiveMQClient . createServerLocatorWithoutHA ( org.springframework.boot.autoconfigure.jms.artemis.TransportConfiguration ) ; return java.lang.Class<T> . java.lang.reflect.Constructor<T> ( ServerLocator .class ) . T ( org.springframework.boot.autoconfigure.jms.artemis.ServerLocator ) ; } catch ( java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError ) { throw new java.lang.IllegalStateException ( STRING + STRING + STRING , java.lang.NoClassDefFoundError ) ; } }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.boot.autoconfigure.jms.artemis.ActiveMQConnectionFactory > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( TransportConstants . HOST_PROP_NAME , this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties . getHost ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( TransportConstants . PORT_PROP_NAME , this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties . getPort ( ) ) ; TransportConfiguration org.springframework.boot.autoconfigure.jms.artemis.TransportConfiguration = new TransportConfiguration ( NettyConnectorFactory .class . java.lang.String ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.reflect.Constructor<T> < T > java.lang.reflect.Constructor<T> = java.lang.Class<T> . java.lang.reflect.Constructor<T> ( boolean .class , TransportConfiguration [] .class ) ; T T = java.lang.reflect.Constructor<T> . T ( false , new TransportConfiguration [] { org.springframework.boot.autoconfigure.jms.artemis.TransportConfiguration } ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties . getUser ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { T . setUser ( java.lang.String ) ; T . setPassword ( this . org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties . getPassword ( ) ) ; } return T ; }  <METHOD_END>
