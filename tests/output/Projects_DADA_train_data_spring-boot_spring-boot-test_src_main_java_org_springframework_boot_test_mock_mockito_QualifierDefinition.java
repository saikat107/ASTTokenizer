<METHOD_START> void ( java.lang.reflect.Field java.lang.reflect.Field , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ) { this . java.lang.reflect.Field = java.lang.reflect.Field ; this . org.springframework.boot.test.mock.mockito.DependencyDescriptor = new DependencyDescriptor ( java.lang.reflect.Field , true ) ; this . java.util.Set<java.lang.annotation.Annotation> = java.util.Set<java.lang.annotation.Annotation> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , java.lang.String java.lang.String ) { return org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . isAutowireCandidate ( java.lang.String , this . org.springframework.boot.test.mock.mockito.DependencyDescriptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition ) { org.springframework.boot.test.mock.mockito.RootBeanDefinition . setQualifiedElement ( this . java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Set<java.lang.annotation.Annotation> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( java.lang.Object == null || ! java.lang.Class<? extends org.springframework.boot.test.mock.mockito.QualifierDefinition> ( ) . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return false ; } org.springframework.boot.test.mock.mockito.QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition = ( org.springframework.boot.test.mock.mockito.QualifierDefinition ) java.lang.Object ; return this . java.util.Set<java.lang.annotation.Annotation> . boolean ( org.springframework.boot.test.mock.mockito.QualifierDefinition . java.util.Set<java.lang.annotation.Annotation> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.mock.mockito.QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { if ( java.lang.reflect.AnnotatedElement != null && java.lang.reflect.AnnotatedElement instanceof java.lang.reflect.Field ) { java.lang.reflect.Field java.lang.reflect.Field = ( java.lang.reflect.Field ) java.lang.reflect.AnnotatedElement ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Set<java.lang.annotation.Annotation> ( java.lang.reflect.Field ) ; if ( ! java.util.Set<java.lang.annotation.Annotation> . boolean ( ) ) { return new org.springframework.boot.test.mock.mockito.QualifierDefinition ( java.lang.reflect.Field , java.util.Set<java.lang.annotation.Annotation> ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( java.lang.reflect.Field java.lang.reflect.Field ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.reflect.Field . java.lang.annotation.Annotation[] ( ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = new java.util.HashSet<java.lang.annotation.Annotation> <> ( java.lang.annotation.Annotation[] . int ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { if ( ! boolean ( java.lang.annotation.Annotation ) ) { java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ; } } return java.util.Set<java.lang.annotation.Annotation> ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; return ( java.lang.Class<> . boolean ( MockBean .class ) || java.lang.Class<> . boolean ( SpyBean .class ) || AnnotationUtils . isAnnotationMetaPresent ( java.lang.Class<> , MockBean .class ) || AnnotationUtils . isAnnotationMetaPresent ( java.lang.Class<> , SpyBean .class ) ) ; }  <METHOD_END>
