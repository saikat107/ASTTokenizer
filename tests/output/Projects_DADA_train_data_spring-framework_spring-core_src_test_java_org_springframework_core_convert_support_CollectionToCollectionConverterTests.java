<METHOD_START> @ Before public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.lang.String> ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; try { org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } catch ( ConversionFailedException org.springframework.core.convert.support.ConversionFailedException ) { assertTrue ( org.springframework.core.convert.support.ConversionFailedException . getCause ( ) instanceof ConverterNotFoundException ) ; } org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; assertFalse ( java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.Integer> ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.lang.String> ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.lang.String> ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.LinkedList<java.lang.Integer> < java.lang.Integer > java.util.LinkedList<java.lang.Integer> = ( java.util.LinkedList<java.lang.Integer> < java.lang.Integer > ) org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; assertEquals ( java.util.LinkedList .class , java.util.LinkedList<java.lang.Integer> . java.lang.Class<? extends java.util.LinkedList> ( ) ) ; assertTrue ( java.util.LinkedList<java.lang.Integer> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> = new java.util.ArrayList<java.util.List<java.lang.String>> <> ( ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToObjectConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.util.List .class , java.util.List .class ) ) ; assertSame ( java.util.List<java.util.List<java.lang.String>> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.util.List<java.lang.String>> , java.util.List .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > [] java.util.List<java.lang.String>[] = new java.util.List [ NUMBER ] ; java.util.List<java.lang.String>[] [ NUMBER ] = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; java.util.List<java.lang.String>[] [ NUMBER ] = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new ArrayToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToObjectConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String [] .class , java.util.List .class ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.util.List<java.lang.String>> ( java.util.List<java.lang.String>[] ) , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String>[] , java.util.List .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> = new java.util.ArrayList<java.util.List<java.lang.String>> <> ( ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new ObjectToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToObjectConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.util.List<java.lang.String>> ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; java.util.List<java.util.List<java.util.List<java.lang.Integer>>> < java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > java.util.List<java.util.List<java.util.List<java.lang.Integer>>> = ( java.util.List<java.util.List<java.util.List<java.lang.Integer>>> < java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > ) org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.util.List<java.lang.String>> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> = new java.util.ArrayList<java.util.List<java.lang.String>> <> ( ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new StringToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new ObjectToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToObjectConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.util.List<java.lang.String>> ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; java.util.List<java.util.List<java.util.List<java.lang.Integer>>> < java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > java.util.List<java.util.List<java.util.List<java.lang.Integer>>> = ( java.util.List<java.util.List<java.util.List<java.lang.Integer>>> < java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > ) org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.util.List<java.lang.String>> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , java.util.List<java.util.List<java.util.List<java.lang.Integer>>> . java.util.List<java.util.List<java.lang.Integer>> ( NUMBER ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Vector<java.lang.String> < java.lang.String > java.util.Vector<java.lang.String> = new java.util.Vector<java.lang.String> <> ( ) ; java.util.Vector<java.lang.String> . boolean ( STRING ) ; void ( java.util.Vector<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Vector<java.lang.String> < java.lang.String > java.util.Vector<java.lang.String> = new java.util.Vector<java.lang.String> <> ( ) ; java.util.Vector<java.lang.String> . boolean ( STRING ) ; void ( java.util.Vector<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CollectionToCollectionConverter org.springframework.core.convert.support.CollectionToCollectionConverter = new CollectionToCollectionConverter ( new GenericConversionService ( ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; org.springframework.core.convert.support.CollectionToCollectionConverter . convert ( java.util.List<> , org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.Class . java.lang.Class<?> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { java.lang.Object java.lang.Object = ( new CollectionToCollectionConverter ( new GenericConversionService ( ) ) ) . convert ( java.util.Collection<java.lang.String> , TypeDescriptor . forObject ( java.util.Collection<java.lang.String> ) , TypeDescriptor . forObject ( new java.util.ArrayList ( ) ) ) ; assertTrue ( java.lang.Object instanceof java.util.ArrayList<?> < ? > ) ; assertEquals ( java.util.Collection<java.lang.String> . int ( ) , ( ( java.util.ArrayList<?> < ? > ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchFieldException { java.util.List<?> < ? > java.util.List<?> = new java.util.ArrayList<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; assertSame ( java.util.List<> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<> , TypeDescriptor . forObject ( java.util.List<> ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.core.convert.support.Resource> < Resource > java.util.List<org.springframework.core.convert.support.Resource> = new java.util.ArrayList<org.springframework.core.convert.support.Resource> <> ( ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( new ClassPathResource ( STRING ) ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( new FileSystemResource ( STRING ) ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( new org.springframework.core.convert.support.CollectionToCollectionConverterTests.TestResource ( ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<org.springframework.core.convert.support.Resource> ) ; assertSame ( java.util.List<org.springframework.core.convert.support.Resource> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<org.springframework.core.convert.support.Resource> , org.springframework.core.convert.support.TypeDescriptor , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.core.convert.support.Resource> < Resource > java.util.List<org.springframework.core.convert.support.Resource> = new java.util.ArrayList<org.springframework.core.convert.support.Resource> <> ( ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( new ClassPathResource ( STRING ) ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( null ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( new FileSystemResource ( STRING ) ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( new org.springframework.core.convert.support.CollectionToCollectionConverterTests.TestResource ( ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<org.springframework.core.convert.support.Resource> ) ; assertSame ( java.util.List<org.springframework.core.convert.support.Resource> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<org.springframework.core.convert.support.Resource> , org.springframework.core.convert.support.TypeDescriptor , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.core.convert.support.Resource> < Resource > java.util.List<org.springframework.core.convert.support.Resource> = new java.util.ArrayList<org.springframework.core.convert.support.Resource> <> ( ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( null ) ; java.util.List<org.springframework.core.convert.support.Resource> . add ( null ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<org.springframework.core.convert.support.Resource> ) ; assertSame ( java.util.List<org.springframework.core.convert.support.Resource> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<org.springframework.core.convert.support.Resource> , org.springframework.core.convert.support.TypeDescriptor , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConverterNotFoundException .class ) public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.List<java.lang.String> . boolean ( null ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.support.TypeDescriptor , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) java.lang.Exception { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( new ClassPathResource ( STRING ) ) ; java.util.List<java.lang.Object> . boolean ( NUMBER ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.lang.Object> ) ; assertEquals ( java.util.List<java.lang.Object> , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.Object> , org.springframework.core.convert.support.TypeDescriptor , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToEnumConverterFactory ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertEquals ( java.util.EnumSet . java.util.EnumSet<org.springframework.core.convert.support.CollectionToCollectionConverterTests.MyEnum> ( org.springframework.core.convert.support.CollectionToCollectionConverterTests.MyEnum . org.springframework.core.convert.support.CollectionToCollectionConverterTests.MyEnum , org.springframework.core.convert.support.CollectionToCollectionConverterTests.MyEnum . org.springframework.core.convert.support.CollectionToCollectionConverterTests.MyEnum ) , org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , TypeDescriptor . forObject ( java.util.List<java.lang.String> ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.CollectionToCollectionConverterTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( ) java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.File java.io.File ( ) java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.convert.support.Resource org.springframework.core.convert.support.Resource ( java.lang.String java.lang.String ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
