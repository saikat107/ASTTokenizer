<METHOD_START> public void ( Point org.springframework.data.geo.Point , Point org.springframework.data.geo.Point , Point org.springframework.data.geo.Point , Point ... org.springframework.data.geo.Point[] ) { Assert . notNull ( org.springframework.data.geo.Point , STRING ) ; Assert . notNull ( org.springframework.data.geo.Point , STRING ) ; Assert . notNull ( org.springframework.data.geo.Point , STRING ) ; Assert . notNull ( org.springframework.data.geo.Point[] , STRING ) ; java.util.List<org.springframework.data.geo.Point> < Point > java.util.List<org.springframework.data.geo.Point> = new java.util.ArrayList <> ( NUMBER + others . length ) ; java.util.List<org.springframework.data.geo.Point> . addAll ( java.util.Arrays . java.util.List ( org.springframework.data.geo.Point , org.springframework.data.geo.Point , org.springframework.data.geo.Point ) ) ; java.util.List<org.springframework.data.geo.Point> . addAll ( java.util.Arrays . java.util.List ( org.springframework.data.geo.Point[] ) ) ; this . java.util.List<org.springframework.data.geo.Point> = java.util.Collections . java.util.List<org.springframework.data.geo.Point> ( java.util.List<org.springframework.data.geo.Point> ) ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.util.List<? extends org.springframework.data.geo.Point> < ? extends Point > java.util.List<? extends org.springframework.data.geo.Point> ) { Assert . notNull ( java.util.List<> , STRING ) ; java.util.List<org.springframework.data.geo.Point> < Point > java.util.List<org.springframework.data.geo.Point> = new java.util.ArrayList<org.springframework.data.geo.Point> <> ( java.util.List<> . int ( ) ) ; for ( Point org.springframework.data.geo.Point : java.util.List<> ) { Assert . notNull ( org.springframework.data.geo.Point , STRING ) ; java.util.List<org.springframework.data.geo.Point> . add ( org.springframework.data.geo.Point ) ; } this . java.util.List<org.springframework.data.geo.Point> = java.util.Collections . java.util.List<org.springframework.data.geo.Point> ( java.util.List<org.springframework.data.geo.Point> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.geo.Point> < Point > java.util.List<org.springframework.data.geo.Point> ( ) { return this . java.util.List<org.springframework.data.geo.Point> ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<org.springframework.data.geo.Point> < Point > java.util.Iterator<org.springframework.data.geo.Point> ( ) { return this . java.util.List<org.springframework.data.geo.Point> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.geo.Polygon ) ) { return false ; } org.springframework.data.geo.Polygon org.springframework.data.geo.Polygon = ( org.springframework.data.geo.Polygon ) java.lang.Object ; return this . java.util.List<org.springframework.data.geo.Point> . equals ( org.springframework.data.geo.Polygon . java.util.List<org.springframework.data.geo.Point> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.util.List<org.springframework.data.geo.Point> . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , StringUtils . collectionToCommaDelimitedString ( java.util.List<org.springframework.data.geo.Point> ) ) ; }  <METHOD_END>
