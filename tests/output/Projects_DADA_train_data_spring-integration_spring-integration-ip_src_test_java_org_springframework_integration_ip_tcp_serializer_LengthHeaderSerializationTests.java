<METHOD_START> @ Before public void void ( ) { char [] char[] = new char [ NUMBER ] ; java.util.Arrays . void ( char[] , 'x' ) ; java.lang.String = new java.lang.String ( char[] ) ; char[] = new char [ NUMBER ] ; java.util.Arrays . void ( char[] , 'x' ) ; java.lang.String = new java.lang.String ( char[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractByteArraySerializer org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer = new ByteArrayLengthHeaderSerializer ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . serialize ( java.lang.String . byte[] ( ) , java.io.ByteArrayOutputStream ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; assertEquals ( NUMBER , byte[] [ NUMBER ] ) ; assertEquals ( NUMBER , byte[] [ NUMBER ] ) ; assertEquals ( NUMBER , byte[] [ NUMBER ] ) ; assertEquals ( java.lang.String . int ( ) , byte[] [ NUMBER ] ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; byte[] = org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] ) ) ; byte[] [ NUMBER ] = - NUMBER ; java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; try { byte[] = org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . deserialize ( java.io.ByteArrayInputStream ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractByteArraySerializer org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer = new ByteArrayLengthHeaderSerializer ( ByteArrayLengthHeaderSerializer . HEADER_SIZE_UNSIGNED_BYTE ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . serialize ( java.lang.String . byte[] ( ) , java.io.ByteArrayOutputStream ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; assertEquals ( java.lang.String . int ( ) , byte[] [ NUMBER ] & NUMBER ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; byte[] = org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] ) ) ; java.lang.String += STRING ; try { org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . serialize ( java.lang.String . byte[] ( ) , java.io.ByteArrayOutputStream ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractByteArraySerializer org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer = new ByteArrayLengthHeaderSerializer ( ByteArrayLengthHeaderSerializer . HEADER_SIZE_UNSIGNED_SHORT ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . serialize ( java.lang.String . byte[] ( ) , java.io.ByteArrayOutputStream ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; assertEquals ( NUMBER , byte[] [ NUMBER ] ) ; assertEquals ( java.lang.String . int ( ) , byte[] [ NUMBER ] & NUMBER ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; byte[] = org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractByteArraySerializer org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer = new ByteArrayLengthHeaderSerializer ( ByteArrayLengthHeaderSerializer . HEADER_SIZE_UNSIGNED_SHORT ) ; org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . setMaxMessageSize ( NUMBER ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . serialize ( java.lang.String . byte[] ( ) , java.io.ByteArrayOutputStream ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; assertEquals ( NUMBER , byte[] [ NUMBER ] & NUMBER ) ; assertEquals ( NUMBER , byte[] [ NUMBER ] & NUMBER ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; byte[] = org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] ) ) ; java.lang.String += STRING ; try { org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . serialize ( java.lang.String . byte[] ( ) , java.io.ByteArrayOutputStream ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new ByteArrayLengthHeaderSerializer ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
