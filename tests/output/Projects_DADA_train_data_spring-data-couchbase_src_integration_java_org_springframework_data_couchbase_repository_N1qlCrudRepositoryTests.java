<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.couchbase.repository.PartyRepository = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) . getRepository ( PartyRepository .class ) ; org.springframework.data.couchbase.repository.ItemRepository = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) . getRepository ( ItemRepository .class ) ; org.springframework.data.couchbase.repository.ItemRepository . save ( org.springframework.data.couchbase.repository.Item ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( org.springframework.data.couchbase.repository.Party ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { try { org.springframework.data.couchbase.repository.ItemRepository . delete ( java.lang.String ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) {} try { org.springframework.data.couchbase.repository.PartyRepository . delete ( java.lang.String ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) {} try { org.springframework.data.couchbase.repository.PartyRepository . delete ( java.lang.String ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) {} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = org.springframework.data.couchbase.repository.ItemRepository . findAllByDescriptionNotNull ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = org.springframework.data.couchbase.repository.PartyRepository . findAllByDescriptionNotNull ( ) ; assertTrue ( java.util.List<java.lang.Object> . boolean ( org.springframework.data.couchbase.repository.Item ) ) ; assertTrue ( java.util.List<java.lang.Object> . boolean ( org.springframework.data.couchbase.repository.Party ) ) ; assertFalse ( java.util.List<java.lang.Object> . boolean ( org.springframework.data.couchbase.repository.Party ) ) ; assertFalse ( java.util.List<java.lang.Object> . boolean ( org.springframework.data.couchbase.repository.Item ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Party org.springframework.data.couchbase.repository.Party = new Party ( java.lang.String , STRING , STRING , new java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( org.springframework.data.couchbase.repository.Party ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = org.springframework.data.couchbase.repository.PartyRepository . findAllByDescriptionNotNull ( ) ; assertTrue ( org.springframework.data.couchbase.repository.Bucket . exists ( java.lang.String ) ) ; assertTrue ( java.util.List<java.lang.Object> . boolean ( org.springframework.data.couchbase.repository.Party ) ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( ! ( java.lang.Object instanceof Party ) ) { fail ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Party org.springframework.data.couchbase.repository.Party = new Party ( java.lang.String , STRING , null , new java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( org.springframework.data.couchbase.repository.Party ) ; long long = org.springframework.data.couchbase.repository.PartyRepository . count ( ) ; long long = org.springframework.data.couchbase.repository.PartyRepository . countAllByDescriptionNotNull ( ) ; assertEquals ( long - NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Party org.springframework.data.couchbase.repository.Party = new Party ( java.lang.String , STRING , STRING , new java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( org.springframework.data.couchbase.repository.Party ) ; long long = org.springframework.data.couchbase.repository.PartyRepository . count ( ) ; long long = org.springframework.data.couchbase.repository.PartyRepository . countCustom ( ) ; assertEquals ( long , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Party org.springframework.data.couchbase.repository.Party = new Party ( java.lang.String , STRING , STRING , new java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( org.springframework.data.couchbase.repository.Party ) ; long long = org.springframework.data.couchbase.repository.PartyRepository . count ( ) ; long long = org.springframework.data.couchbase.repository.PartyRepository . countCustomPlusFive ( ) ; assertEquals ( long + NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = CouchbaseQueryExecutionException .class ) public void void ( ) { Party org.springframework.data.couchbase.repository.Party = new Party ( java.lang.String , STRING , STRING , new java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( org.springframework.data.couchbase.repository.Party ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.PartyRepository . findSomeString ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Party org.springframework.data.couchbase.repository.Party = new Party ( java.lang.String , STRING , STRING , new java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.couchbase.repository.PartyRepository . save ( org.springframework.data.couchbase.repository.Party ) ; long long = org.springframework.data.couchbase.repository.PartyRepository . findMaxAttendees ( ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { boolean boolean = org.springframework.data.couchbase.repository.PartyRepository . justABoolean ( ) ; assertEquals ( true , boolean ) ; }  <METHOD_END>
