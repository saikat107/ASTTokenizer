<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.user.SimpUserRegistry = Mockito . mock ( SimpUserRegistry .class ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry = new MultiServerUserRegistry ( this . org.springframework.messaging.simp.user.SimpUserRegistry ) ; this . org.springframework.messaging.simp.user.MessageConverter = new MappingJackson2MessageConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpUser org.springframework.messaging.simp.user.SimpUser = Mockito . mock ( SimpUser .class ) ; java.util.Set<org.springframework.messaging.simp.user.SimpUser> < SimpUser > java.util.Set<org.springframework.messaging.simp.user.SimpUser> = java.util.Collections . java.util.Set ( org.springframework.messaging.simp.user.SimpUser ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( java.util.Set<org.springframework.messaging.simp.user.SimpUser> ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUserCount ( ) ) . thenReturn ( NUMBER ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( STRING ) ) . thenReturn ( org.springframework.messaging.simp.user.SimpUser ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; assertSame ( org.springframework.messaging.simp.user.SimpUser , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUser ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpSession org.springframework.messaging.simp.user.TestSimpSession = new TestSimpSession ( STRING ) ; org.springframework.messaging.simp.user.TestSimpSession . addSubscriptions ( new TestSimpSubscription ( STRING , STRING ) ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( org.springframework.messaging.simp.user.TestSimpSession ) ; SimpUserRegistry org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; when ( org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.messaging.simp.user.TestSimpUser ) ) ; java.lang.Object java.lang.Object = new MultiServerUserRegistry ( org.springframework.messaging.simp.user.SimpUserRegistry ) . getLocalRegistryDto ( ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = this . org.springframework.messaging.simp.user.MessageConverter . toMessage ( java.lang.Object , null ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry . addRemoteRegistryDto ( org.springframework.messaging.simp.user.Message<> , this . org.springframework.messaging.simp.user.MessageConverter , NUMBER ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; SimpUser org.springframework.messaging.simp.user.SimpUser = this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUser ( STRING ) ; assertNotNull ( org.springframework.messaging.simp.user.SimpUser ) ; assertTrue ( org.springframework.messaging.simp.user.SimpUser . hasSessions ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.SimpUser . getSessions ( ) . size ( ) ) ; SimpSession org.springframework.messaging.simp.user.SimpSession = org.springframework.messaging.simp.user.SimpUser . getSession ( STRING ) ; assertNotNull ( org.springframework.messaging.simp.user.SimpSession ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpSession . getId ( ) ) ; assertSame ( org.springframework.messaging.simp.user.SimpUser , org.springframework.messaging.simp.user.SimpSession . getUser ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.SimpSession . getSubscriptions ( ) . size ( ) ) ; SimpSubscription org.springframework.messaging.simp.user.SimpSubscription = org.springframework.messaging.simp.user.SimpSession . getSubscriptions ( ) . iterator ( ) . next ( ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpSubscription . getId ( ) ) ; assertSame ( org.springframework.messaging.simp.user.SimpSession , org.springframework.messaging.simp.user.SimpSubscription . getSession ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.SimpSubscription . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpSession org.springframework.messaging.simp.user.TestSimpSession = new TestSimpSession ( STRING ) ; TestSimpSession org.springframework.messaging.simp.user.TestSimpSession = new TestSimpSession ( STRING ) ; TestSimpSession org.springframework.messaging.simp.user.TestSimpSession = new TestSimpSession ( STRING ) ; org.springframework.messaging.simp.user.TestSimpSession . addSubscriptions ( new TestSimpSubscription ( STRING , STRING ) ) ; org.springframework.messaging.simp.user.TestSimpSession . addSubscriptions ( new TestSimpSubscription ( STRING , STRING ) ) ; org.springframework.messaging.simp.user.TestSimpSession . addSubscriptions ( new TestSimpSubscription ( STRING , STRING ) ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( org.springframework.messaging.simp.user.TestSimpSession ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( org.springframework.messaging.simp.user.TestSimpSession ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( org.springframework.messaging.simp.user.TestSimpSession ) ; SimpUserRegistry org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; when ( org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( new java.util.HashSet <> ( java.util.Arrays . java.util.List ( org.springframework.messaging.simp.user.TestSimpUser , org.springframework.messaging.simp.user.TestSimpUser , org.springframework.messaging.simp.user.TestSimpUser ) ) ) ; java.lang.Object java.lang.Object = new MultiServerUserRegistry ( org.springframework.messaging.simp.user.SimpUserRegistry ) . getLocalRegistryDto ( ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = this . org.springframework.messaging.simp.user.MessageConverter . toMessage ( java.lang.Object , null ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry . addRemoteRegistryDto ( org.springframework.messaging.simp.user.Message<> , this . org.springframework.messaging.simp.user.MessageConverter , NUMBER ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> < SimpSubscription > java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> = this . org.springframework.messaging.simp.user.MultiServerUserRegistry . findSubscriptions ( s -> s . getDestination ( ) . equals ( STRING ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> . size ( ) ) ; java.util.Iterator<org.springframework.messaging.simp.user.SimpSubscription> < SimpSubscription > java.util.Iterator<org.springframework.messaging.simp.user.SimpSubscription> = java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> . iterator ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; java.util.Set<java.lang.String> . boolean ( java.util.Iterator<org.springframework.messaging.simp.user.SimpSubscription> . next ( ) . getSession ( ) . getId ( ) ) ; java.util.Set<java.lang.String> . boolean ( java.util.Iterator<org.springframework.messaging.simp.user.SimpSubscription> . next ( ) . getSession ( ) . getId ( ) ) ; assertEquals ( new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) , java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpSession org.springframework.messaging.simp.user.TestSimpSession = new TestSimpSession ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( org.springframework.messaging.simp.user.TestSimpSession ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( STRING ) ) . thenReturn ( org.springframework.messaging.simp.user.TestSimpUser ) ; TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; TestSimpSession org.springframework.messaging.simp.user.TestSimpSession = new TestSimpSession ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( org.springframework.messaging.simp.user.TestSimpSession ) ; SimpUserRegistry org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; when ( org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.messaging.simp.user.TestSimpUser ) ) ; java.lang.Object java.lang.Object = new MultiServerUserRegistry ( org.springframework.messaging.simp.user.SimpUserRegistry ) . getLocalRegistryDto ( ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = this . org.springframework.messaging.simp.user.MessageConverter . toMessage ( java.lang.Object , null ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry . addRemoteRegistryDto ( org.springframework.messaging.simp.user.Message<> , this . org.springframework.messaging.simp.user.MessageConverter , NUMBER ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; SimpUser org.springframework.messaging.simp.user.SimpUser = this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUsers ( ) . iterator ( ) . next ( ) ; assertTrue ( org.springframework.messaging.simp.user.SimpUser . hasSessions ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.SimpUser . getSessions ( ) . size ( ) ) ; assertThat ( org.springframework.messaging.simp.user.SimpUser . getSessions ( ) , containsInAnyOrder ( org.springframework.messaging.simp.user.TestSimpSession , org.springframework.messaging.simp.user.TestSimpSession ) ) ; assertSame ( org.springframework.messaging.simp.user.TestSimpSession , org.springframework.messaging.simp.user.SimpUser . getSession ( STRING ) ) ; assertEquals ( org.springframework.messaging.simp.user.TestSimpSession , org.springframework.messaging.simp.user.SimpUser . getSession ( STRING ) ) ; org.springframework.messaging.simp.user.SimpUser = this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUser ( STRING ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.SimpUser . getSessions ( ) . size ( ) ) ; assertThat ( org.springframework.messaging.simp.user.SimpUser . getSessions ( ) , containsInAnyOrder ( org.springframework.messaging.simp.user.TestSimpSession , org.springframework.messaging.simp.user.TestSimpSession ) ) ; assertSame ( org.springframework.messaging.simp.user.TestSimpSession , org.springframework.messaging.simp.user.SimpUser . getSession ( STRING ) ) ; assertEquals ( org.springframework.messaging.simp.user.TestSimpSession , org.springframework.messaging.simp.user.SimpUser . getSession ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; SimpUserRegistry org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; when ( org.springframework.messaging.simp.user.SimpUserRegistry . getUsers ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.messaging.simp.user.TestSimpUser ) ) ; java.lang.Object java.lang.Object = new MultiServerUserRegistry ( org.springframework.messaging.simp.user.SimpUserRegistry ) . getLocalRegistryDto ( ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = this . org.springframework.messaging.simp.user.MessageConverter . toMessage ( java.lang.Object , null ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry . addRemoteRegistryDto ( org.springframework.messaging.simp.user.Message<> , this . org.springframework.messaging.simp.user.MessageConverter , - NUMBER ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; this . org.springframework.messaging.simp.user.MultiServerUserRegistry . purgeExpiredRegistries ( ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.user.MultiServerUserRegistry . getUserCount ( ) ) ; }  <METHOD_END>
