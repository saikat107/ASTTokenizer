<METHOD_START> public static boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.lang.String == null || java.lang.String == null ) { return false ; } int int = java.lang.String . int ( '*' ) ; if ( int == - NUMBER ) { return java.lang.String . boolean ( java.lang.String ) ; } if ( int == NUMBER ) { if ( java.lang.String . int ( ) == NUMBER ) { return true ; } int int = java.lang.String . int ( '*' , int + NUMBER ) ; if ( int == - NUMBER ) { return java.lang.String . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; if ( STRING . boolean ( java.lang.String ) ) { return boolean ( java.lang.String . java.lang.String ( int ) , java.lang.String ) ; } int int = java.lang.String . int ( java.lang.String ) ; while ( int != - NUMBER ) { if ( boolean ( java.lang.String . java.lang.String ( int ) , java.lang.String . java.lang.String ( int + java.lang.String . int ( ) ) ) ) { return true ; } int = java.lang.String . int ( java.lang.String , int + NUMBER ) ; } return false ; } return ( java.lang.String . int ( ) >= int && java.lang.String . java.lang.String ( NUMBER , int ) . boolean ( java.lang.String . java.lang.String ( NUMBER , int ) ) && boolean ( java.lang.String . java.lang.String ( int ) , java.lang.String . java.lang.String ( int ) ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( boolean ( java.lang.String , java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
