<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( XMPPConnection org.springframework.integration.xmpp.outbound.XMPPConnection ) { super( org.springframework.integration.xmpp.outbound.XMPPConnection ); }  <METHOD_END>
<METHOD_START> public void void ( XmppHeaderMapper org.springframework.integration.xmpp.outbound.XmppHeaderMapper ) { Assert . notNull ( org.springframework.integration.xmpp.outbound.XmppHeaderMapper , STRING ) ; this . org.springframework.integration.xmpp.outbound.XmppHeaderMapper = org.springframework.integration.xmpp.outbound.XmppHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( ExtensionElementProvider < ? extends ExtensionElement > org.springframework.integration.xmpp.outbound.ExtensionElementProvider<? extends org.springframework.integration.xmpp.outbound.ExtensionElement> ) { this . org.springframework.integration.xmpp.outbound.ExtensionElementProvider<? extends org.springframework.integration.xmpp.outbound.ExtensionElement> = org.springframework.integration.xmpp.outbound.ExtensionElementProvider<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.xmpp.outbound.Message<?> ) throws java.lang.Exception { Assert . isTrue ( this . initialized , getComponentName ( ) + STRING + this . java.lang.String ( ) + STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.xmpp.outbound.Message<> . getPayload ( ) ; org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware org.jivesoftware.smack.packet.Message = null ; if ( java.lang.Object instanceof org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware ) { org.jivesoftware.smack.packet.Message = ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware ) java.lang.Object ; } else { java.lang.String java.lang.String = org.springframework.integration.xmpp.outbound.Message<> . getHeaders ( ) . get ( XmppHeaders . TO , java.lang.String .class ) ; Assert . state ( StringUtils . hasText ( java.lang.String ) , STRING + XmppHeaders . TO + STRING ) ; org.jivesoftware.smack.packet.Message = new org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware ( java.lang.String ) ; if ( java.lang.Object instanceof ExtensionElement ) { org.jivesoftware.smack.packet.Message . addExtension ( ( ExtensionElement ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { if ( this . org.springframework.integration.xmpp.outbound.ExtensionElementProvider<> != null ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( ! java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String . java.lang.String ( ) ) . boolean ( ) ) { java.lang.String = STRING + java.lang.String + STRING ; } XmlPullParser org.springframework.integration.xmpp.outbound.XmlPullParser = PacketParserUtils . newXmppParser ( new java.io.StringReader ( java.lang.String ) ) ; org.springframework.integration.xmpp.outbound.XmlPullParser . next ( ) ; ExtensionElement org.springframework.integration.xmpp.outbound.ExtensionElement = this . org.springframework.integration.xmpp.outbound.ExtensionElementProvider<> . parse ( org.springframework.integration.xmpp.outbound.XmlPullParser ) ; org.jivesoftware.smack.packet.Message . addExtension ( org.springframework.integration.xmpp.outbound.ExtensionElement ) ; } else { org.jivesoftware.smack.packet.Message . setBody ( ( java.lang.String ) java.lang.Object ) ; } } else { throw new MessageHandlingException ( org.springframework.integration.xmpp.outbound.Message<> , STRING + STRING + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; } } if ( this . org.springframework.integration.xmpp.outbound.XmppHeaderMapper != null ) { this . org.springframework.integration.xmpp.outbound.XmppHeaderMapper . fromHeadersToRequest ( org.springframework.integration.xmpp.outbound.Message<> . getHeaders ( ) , org.jivesoftware.smack.packet.Message ) ; } if ( ! this . xmppConnection . isConnected ( ) && this . xmppConnection instanceof AbstractXMPPConnection ) { ( ( AbstractXMPPConnection ) this . xmppConnection ) . connect ( ) ; } this . xmppConnection . sendStanza ( org.jivesoftware.smack.packet.Message ) ; }  <METHOD_END>
