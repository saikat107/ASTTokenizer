<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; DefaultKafkaConsumerFactory < ? , ? > org.springframework.boot.autoconfigure.kafka.DefaultKafkaConsumerFactory<?,?> = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( DefaultKafkaConsumerFactory .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.kafka.DefaultKafkaConsumerFactory<,> ) . getPropertyValue ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . BOOTSTRAP_SERVERS_CONFIG ) ) . isEqualTo ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_KEY_PASSWORD_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_KEYSTORE_LOCATION_CONFIG ) ) . endsWith ( java.io.File . java.lang.String + STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_KEYSTORE_PASSWORD_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_TRUSTSTORE_LOCATION_CONFIG ) ) . endsWith ( java.io.File . java.lang.String + STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_TRUSTSTORE_PASSWORD_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . CLIENT_ID_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . ENABLE_AUTO_COMMIT_CONFIG ) ) . isEqualTo ( java.lang.Boolean . java.lang.Boolean ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . AUTO_COMMIT_INTERVAL_MS_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . AUTO_OFFSET_RESET_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . FETCH_MAX_WAIT_MS_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . FETCH_MIN_BYTES_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . GROUP_ID_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . HEARTBEAT_INTERVAL_MS_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . KEY_DESERIALIZER_CLASS_CONFIG ) ) . isEqualTo ( LongDeserializer .class ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . VALUE_DESERIALIZER_CLASS_CONFIG ) ) . isEqualTo ( IntegerDeserializer .class ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ConsumerConfig . MAX_POLL_RECORDS_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; DefaultKafkaProducerFactory < ? , ? > org.springframework.boot.autoconfigure.kafka.DefaultKafkaProducerFactory<?,?> = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( DefaultKafkaProducerFactory .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.kafka.DefaultKafkaProducerFactory<,> ) . getPropertyValue ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . CLIENT_ID_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . ACKS_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . BATCH_SIZE_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . BOOTSTRAP_SERVERS_CONFIG ) ) . isEqualTo ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . BUFFER_MEMORY_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . COMPRESSION_TYPE_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . KEY_SERIALIZER_CLASS_CONFIG ) ) . isEqualTo ( LongSerializer .class ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_KEY_PASSWORD_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_KEYSTORE_LOCATION_CONFIG ) ) . endsWith ( java.io.File . java.lang.String + STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_KEYSTORE_PASSWORD_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_TRUSTSTORE_LOCATION_CONFIG ) ) . endsWith ( java.io.File . java.lang.String + STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SslConfigs . SSL_TRUSTSTORE_PASSWORD_CONFIG ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . RETRIES_CONFIG ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ProducerConfig . VALUE_SERIALIZER_CLASS_CONFIG ) ) . isEqualTo ( IntegerSerializer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING , STRING , STRING ) ; DefaultKafkaProducerFactory < ? , ? > org.springframework.boot.autoconfigure.kafka.DefaultKafkaProducerFactory<?,?> = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( DefaultKafkaProducerFactory .class ) ; DefaultKafkaConsumerFactory < ? , ? > org.springframework.boot.autoconfigure.kafka.DefaultKafkaConsumerFactory<?,?> = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( DefaultKafkaConsumerFactory .class ) ; KafkaTemplate < ? , ? > org.springframework.boot.autoconfigure.kafka.KafkaTemplate<?,?> = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( KafkaTemplate .class ) ; KafkaListenerContainerFactory < ? > org.springframework.boot.autoconfigure.kafka.KafkaListenerContainerFactory<?> = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( KafkaListenerContainerFactory .class ) ; assertThat ( new DirectFieldAccessor ( org.springframework.boot.autoconfigure.kafka.KafkaTemplate<,> ) . getPropertyValue ( STRING ) ) . isEqualTo ( org.springframework.boot.autoconfigure.kafka.DefaultKafkaProducerFactory<,> ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.KafkaTemplate<,> . getDefaultTopic ( ) ) . isEqualTo ( STRING ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.kafka.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.kafka.KafkaListenerContainerFactory<> ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( org.springframework.boot.autoconfigure.kafka.DefaultKafkaConsumerFactory<,> ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( AckMode . MANUAL ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . register ( KafkaAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext ; }  <METHOD_END>
