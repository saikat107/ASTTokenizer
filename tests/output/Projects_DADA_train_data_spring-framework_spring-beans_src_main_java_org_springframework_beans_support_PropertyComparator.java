<METHOD_START> public void ( SortDefinition org.springframework.beans.support.SortDefinition ) { this . org.springframework.beans.support.SortDefinition = org.springframework.beans.support.SortDefinition ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean , boolean boolean ) { this . org.springframework.beans.support.SortDefinition = new MutableSortDefinition ( java.lang.String , boolean , boolean ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.beans.support.SortDefinition org.springframework.beans.support.SortDefinition ( ) { return this . org.springframework.beans.support.SortDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public int int ( T T , T T ) { java.lang.Object java.lang.Object = java.lang.Object ( T ) ; java.lang.Object java.lang.Object = java.lang.Object ( T ) ; if ( this . org.springframework.beans.support.SortDefinition . isIgnoreCase ( ) && ( java.lang.Object instanceof java.lang.String ) && ( java.lang.Object instanceof java.lang.String ) ) { java.lang.Object = ( ( java.lang.String ) java.lang.Object ) . java.lang.String ( ) ; java.lang.Object = ( ( java.lang.String ) java.lang.Object ) . java.lang.String ( ) ; } int int ; try { if ( java.lang.Object != null ) { int = ( java.lang.Object != null ? ( ( java.lang.Comparable<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . int ( java.lang.Object ) : - NUMBER ) ; } else { int = ( java.lang.Object != null ? NUMBER : NUMBER ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( org.springframework.beans.support.Log . isWarnEnabled ( ) ) { org.springframework.beans.support.Log . warn ( STRING + T + STRING + T + STRING , java.lang.RuntimeException ) ; } return NUMBER ; } return ( this . org.springframework.beans.support.SortDefinition . isAscending ( ) ? int : - int ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { try { this . org.springframework.beans.support.BeanWrapperImpl . setWrappedInstance ( java.lang.Object ) ; return this . org.springframework.beans.support.BeanWrapperImpl . getPropertyValue ( this . org.springframework.beans.support.SortDefinition . getProperty ( ) ) ; } catch ( BeansException org.springframework.beans.support.BeansException ) { org.springframework.beans.support.Log . info ( STRING , org.springframework.beans.support.BeansException ) ; return null ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<?> < ? > java.util.List<?> , SortDefinition org.springframework.beans.support.SortDefinition ) throws org.springframework.beans.support.BeansException { if ( StringUtils . hasText ( org.springframework.beans.support.SortDefinition . getProperty ( ) ) ) { java.util.Collections . void ( java.util.List<> , new org.springframework.beans.support.PropertyComparator<java.lang.Object> < java.lang.Object > ( org.springframework.beans.support.SortDefinition ) ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Object [] java.lang.Object[] , SortDefinition org.springframework.beans.support.SortDefinition ) throws org.springframework.beans.support.BeansException { if ( StringUtils . hasText ( org.springframework.beans.support.SortDefinition . getProperty ( ) ) ) { java.util.Arrays . void ( java.lang.Object[] , new org.springframework.beans.support.PropertyComparator <> ( org.springframework.beans.support.SortDefinition ) ) ; } }  <METHOD_END>
