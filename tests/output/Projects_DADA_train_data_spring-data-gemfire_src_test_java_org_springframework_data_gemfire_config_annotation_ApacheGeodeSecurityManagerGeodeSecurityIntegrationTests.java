<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { runGeodeServer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> default org.springframework.data.gemfire.config.annotation.User org.springframework.data.gemfire.config.annotation.User ( java.lang.String java.lang.String ) { return java.util.Set<org.springframework.data.gemfire.config.annotation.User> . stream ( ) . filter ( ( user ) -> user . getName ( ) . equals ( username ) ) . findFirst ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Properties java.util.Properties ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( ) { this . org.springframework.data.gemfire.config.annotation.ApacheGeodeSecurityManagerGeodeSecurityIntegrationTests.GeodeSecurityRepository = new org.springframework.data.gemfire.config.annotation.ApacheGeodeSecurityManagerGeodeSecurityIntegrationTests.GeodeSecurityRepository ( ) { } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.util.Properties java.util.Properties ) throws org.springframework.data.gemfire.config.annotation.AuthenticationFailedException { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( SECURITY_USERNAME_PROPERTY ) ; java.lang.String java.lang.String = java.util.Properties . java.lang.String ( SECURITY_PASSWORD_PROPERTY ) ; User org.springframework.data.gemfire.config.annotation.User = org.springframework.data.gemfire.config.annotation.ApacheGeodeSecurityManagerGeodeSecurityIntegrationTests.GeodeSecurityRepository . org.springframework.data.gemfire.config.annotation.User ( java.lang.String ) ; if ( org.springframework.data.gemfire.config.annotation.User == null || ! org.springframework.data.gemfire.config.annotation.User . getCredentials ( ) . equals ( java.lang.String ) ) { throw new AuthenticationFailedException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } return org.springframework.data.gemfire.config.annotation.User ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , ResourcePermission org.springframework.data.gemfire.config.annotation.ResourcePermission ) { return ( java.lang.Object instanceof User && ( ( User ) java.lang.Object ) . hasPermission ( org.springframework.data.gemfire.config.annotation.ResourcePermission ) ) ; }  <METHOD_END>
