<METHOD_START> void ( HttpMethod org.springframework.test.web.servlet.request.HttpMethod , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { this( org.springframework.test.web.servlet.request.HttpMethod . name ( ) , UriComponentsBuilder . fromUriString ( java.lang.String ) . buildAndExpand ( java.lang.Object[] ) . encode ( ) . toUri ( ) ); }  <METHOD_END>
<METHOD_START> void ( HttpMethod org.springframework.test.web.servlet.request.HttpMethod , java.net.URI java.net.URI ) { this( org.springframework.test.web.servlet.request.HttpMethod . name ( ) , java.net.URI ); }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.net.URI java.net.URI ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.net.URI , STRING ) ; this . java.lang.String = java.lang.String ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { Assert . isTrue ( java.lang.String . boolean ( STRING ) , STRING ) ; Assert . isTrue ( ! java.lang.String . boolean ( STRING ) , STRING ) ; } this . java.lang.String = ( java.lang.String != null ? java.lang.String : STRING ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { Assert . isTrue ( java.lang.String . boolean ( STRING ) , STRING ) ; Assert . isTrue ( ! java.lang.String . boolean ( STRING ) , STRING ) ; } this . java.lang.String = ( java.lang.String != null ? java.lang.String : STRING ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { Assert . isTrue ( java.lang.String . boolean ( STRING ) , STRING ) ; } this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( byte [] byte[] ) { this . byte[] = byte[] ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String ) { this . byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( MediaType org.springframework.test.web.servlet.request.MediaType ) { Assert . notNull ( org.springframework.test.web.servlet.request.MediaType , STRING ) ; this . java.lang.String = org.springframework.test.web.servlet.request.MediaType . toString ( ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String ) { this . java.lang.String = MediaType . parseMediaType ( java.lang.String ) . toString ( ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( MediaType ... org.springframework.test.web.servlet.request.MediaType[] ) { Assert . notEmpty ( org.springframework.test.web.servlet.request.MediaType[] , STRING ) ; this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . set ( STRING , MediaType . toString ( java.util.Arrays . java.util.List ( org.springframework.test.web.servlet.request.MediaType[] ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; java.util.List<org.springframework.test.web.servlet.request.MediaType> < MediaType > java.util.List<org.springframework.test.web.servlet.request.MediaType> = new java.util.ArrayList<org.springframework.test.web.servlet.request.MediaType> < MediaType > ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.test.web.servlet.request.MediaType> . add ( MediaType . parseMediaType ( java.lang.String ) ) ; } this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . set ( STRING , MediaType . toString ( java.util.List<org.springframework.test.web.servlet.request.MediaType> ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { void ( this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( HttpHeaders org.springframework.test.web.servlet.request.HttpHeaders ) { for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.HttpHeaders . keySet ( ) ) { java.lang.Object [] java.lang.Object[] = ObjectUtils . toObjectArray ( org.springframework.test.web.servlet.request.HttpHeaders . get ( java.lang.String ) . toArray ( ) ) ; void ( this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object[] ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { void ( this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> , java.lang.String , java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> ) { for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) { this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( Cookie ... org.springframework.test.web.servlet.request.Cookie[] ) { Assert . notEmpty ( org.springframework.test.web.servlet.request.Cookie[] , STRING ) ; this . java.util.List<org.springframework.test.web.servlet.request.Cookie> . addAll ( java.util.Arrays . java.util.List ( org.springframework.test.web.servlet.request.Cookie[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.util.Locale ... java.util.Locale[] ) { Assert . notEmpty ( java.util.Locale[] , STRING ) ; this . java.util.List<java.util.Locale> . boolean ( java.util.Arrays . java.util.List<java.util.Locale> ( java.util.Locale[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.util.Locale java.util.Locale ) { this . java.util.List<java.util.Locale> . void ( ) ; if ( java.util.Locale != null ) { this . java.util.List<java.util.Locale> . boolean ( java.util.Locale ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( this . java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( this . java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notEmpty ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( this . java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notEmpty ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( MockHttpSession org.springframework.test.web.servlet.request.MockHttpSession ) { Assert . notNull ( org.springframework.test.web.servlet.request.MockHttpSession , STRING ) ; this . org.springframework.test.web.servlet.request.MockHttpSession = org.springframework.test.web.servlet.request.MockHttpSession ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( java.security.Principal java.security.Principal ) { Assert . notNull ( java.security.Principal , STRING ) ; this . java.security.Principal = java.security.Principal ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ( RequestPostProcessor org.springframework.test.web.servlet.request.RequestPostProcessor ) { Assert . notNull ( org.springframework.test.web.servlet.request.RequestPostProcessor , STRING ) ; this . java.util.List<org.springframework.test.web.servlet.request.RequestPostProcessor> . add ( org.springframework.test.web.servlet.request.RequestPostProcessor ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return this ; } if ( ! ( java.lang.Object instanceof org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; } org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder = ( org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder ) java.lang.Object ; if ( ! StringUtils . hasText ( this . java.lang.String ) ) { this . java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.lang.String ; } if ( ! StringUtils . hasText ( this . java.lang.String ) ) { this . java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.lang.String ; } if ( STRING . boolean ( this . java.lang.String ) ) { this . java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.lang.String ; } if ( this . java.lang.Boolean == null ) { this . java.lang.Boolean = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.lang.Boolean ; } if ( this . java.security.Principal == null ) { this . java.security.Principal = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.security.Principal ; } if ( this . org.springframework.test.web.servlet.request.MockHttpSession == null ) { this . org.springframework.test.web.servlet.request.MockHttpSession = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . org.springframework.test.web.servlet.request.MockHttpSession ; } if ( this . java.lang.String == null ) { this . java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.lang.String ; } if ( this . byte[] == null ) { this . byte[] = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . byte[] ; } if ( this . java.lang.String == null ) { this . java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.lang.String ; } for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . keySet ( ) ) { if ( ! this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . containsKey ( java.lang.String ) ) { this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . put ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . get ( java.lang.String ) ) ; } } for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) ) { if ( ! this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . containsKey ( java.lang.String ) ) { this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . put ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; } } for ( Cookie org.springframework.test.web.servlet.request.Cookie : org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.List<org.springframework.test.web.servlet.request.Cookie> ) { if ( ! boolean ( org.springframework.test.web.servlet.request.Cookie ) ) { this . java.util.List<org.springframework.test.web.servlet.request.Cookie> . add ( org.springframework.test.web.servlet.request.Cookie ) ; } } for ( java.util.Locale java.util.Locale : org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.List<java.util.Locale> ) { if ( ! this . java.util.List<java.util.Locale> . boolean ( java.util.Locale ) ) { this . java.util.List<java.util.Locale> . boolean ( java.util.Locale ) ; } } for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } } for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } } for ( java.lang.String java.lang.String : org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } } this . java.util.List<org.springframework.test.web.servlet.request.RequestPostProcessor> . addAll ( NUMBER , org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder . java.util.List<org.springframework.test.web.servlet.request.RequestPostProcessor> ) ; return this ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Cookie org.springframework.test.web.servlet.request.Cookie ) { for ( Cookie org.springframework.test.web.servlet.request.Cookie : this . java.util.List<org.springframework.test.web.servlet.request.Cookie> ) { if ( ObjectUtils . nullSafeEquals ( org.springframework.test.web.servlet.request.Cookie . getName ( ) , org.springframework.test.web.servlet.request.Cookie . getName ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.test.web.servlet.request.MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest ( ServletContext org.springframework.test.web.servlet.request.ServletContext ) { MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest = org.springframework.test.web.servlet.request.MockHttpServletRequest ( org.springframework.test.web.servlet.request.ServletContext ) ; org.springframework.test.web.servlet.request.MockHttpServletRequest . setAsyncSupported ( true ) ; org.springframework.test.web.servlet.request.MockHttpServletRequest . setMethod ( this . java.lang.String ) ; java.lang.String java.lang.String = this . java.net.URI . java.lang.String ( ) ; org.springframework.test.web.servlet.request.MockHttpServletRequest . setRequestURI ( java.lang.String ) ; if ( this . java.net.URI . java.lang.String ( ) != null ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setScheme ( this . java.net.URI . java.lang.String ( ) ) ; } if ( this . java.net.URI . java.lang.String ( ) != null ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setServerName ( this . java.net.URI . java.lang.String ( ) ) ; } if ( this . java.net.URI . int ( ) != - NUMBER ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setServerPort ( this . java.net.URI . int ( ) ) ; } void ( org.springframework.test.web.servlet.request.MockHttpServletRequest , java.lang.String ) ; if ( this . java.lang.Boolean != null ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setSecure ( this . java.lang.Boolean ) ; } if ( this . java.security.Principal != null ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setUserPrincipal ( this . java.security.Principal ) ; } if ( this . org.springframework.test.web.servlet.request.MockHttpSession != null ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setSession ( this . org.springframework.test.web.servlet.request.MockHttpSession ) ; } org.springframework.test.web.servlet.request.MockHttpServletRequest . setCharacterEncoding ( this . java.lang.String ) ; org.springframework.test.web.servlet.request.MockHttpServletRequest . setContent ( this . byte[] ) ; org.springframework.test.web.servlet.request.MockHttpServletRequest . setContentType ( this . java.lang.String ) ; for ( java.lang.String java.lang.String : this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . keySet ( ) ) { for ( java.lang.Object java.lang.Object : this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.Object> . get ( java.lang.String ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.Object ) ; } } if ( this . java.net.URI . java.lang.String ( ) != null ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setQueryString ( this . java.net.URI . java.lang.String ( ) ) ; } void ( org.springframework.test.web.servlet.request.MockHttpServletRequest , UriComponentsBuilder . fromUri ( this . java.net.URI ) . build ( ) . getQueryParams ( ) ) ; for ( java.lang.String java.lang.String : this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : this . org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . addParameter ( java.lang.String , java.lang.String ) ; } } if ( this . byte[] != null && this . byte[] . int > NUMBER ) { java.lang.String java.lang.String = org.springframework.test.web.servlet.request.MockHttpServletRequest . getContentType ( ) ; if ( java.lang.String != null ) { MediaType org.springframework.test.web.servlet.request.MediaType = MediaType . parseMediaType ( java.lang.String ) ; if ( MediaType . APPLICATION_FORM_URLENCODED . includes ( org.springframework.test.web.servlet.request.MediaType ) ) { void ( org.springframework.test.web.servlet.request.MockHttpServletRequest , org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.test.web.servlet.request.MediaType ) ) ; } } } if ( ! ObjectUtils . isEmpty ( this . java.util.List<org.springframework.test.web.servlet.request.Cookie> ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setCookies ( this . java.util.List<org.springframework.test.web.servlet.request.Cookie> . toArray ( new Cookie [ this . java.util.List<org.springframework.test.web.servlet.request.Cookie> . size ( ) ] ) ) ; } if ( ! ObjectUtils . isEmpty ( this . java.util.List<java.util.Locale> ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setPreferredLocales ( this . java.util.List<java.util.Locale> ) ; } for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . setAttribute ( java.lang.String , this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { org.springframework.test.web.servlet.request.MockHttpServletRequest . getSession ( ) . setAttribute ( java.lang.String , this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } FlashMap org.springframework.test.web.servlet.request.FlashMap = new FlashMap ( ) ; org.springframework.test.web.servlet.request.FlashMap . putAll ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; FlashMapManager org.springframework.test.web.servlet.request.FlashMapManager = org.springframework.test.web.servlet.request.FlashMapManager ( org.springframework.test.web.servlet.request.MockHttpServletRequest ) ; org.springframework.test.web.servlet.request.FlashMapManager . saveOutputFlashMap ( org.springframework.test.web.servlet.request.FlashMap , org.springframework.test.web.servlet.request.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; return org.springframework.test.web.servlet.request.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> protected org.springframework.test.web.servlet.request.MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest ( ServletContext org.springframework.test.web.servlet.request.ServletContext ) { return new MockHttpServletRequest ( org.springframework.test.web.servlet.request.ServletContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest , java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( this . java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + this . java.lang.String + STRING ) ; } org.springframework.test.web.servlet.request.MockHttpServletRequest . setContextPath ( this . java.lang.String ) ; org.springframework.test.web.servlet.request.MockHttpServletRequest . setServletPath ( this . java.lang.String ) ; if ( STRING . boolean ( this . java.lang.String ) ) { if ( ! java.lang.String . boolean ( this . java.lang.String + this . java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.String + STRING + java.lang.String + STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( this . java.lang.String . int ( ) + this . java.lang.String . int ( ) ) ; this . java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ) ; } org.springframework.test.web.servlet.request.MockHttpServletRequest . setPathInfo ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest , MultiValueMap < java.lang.String , java.lang.String > org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> ) { try { for ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) ) { for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { java.lang.String = ( java.lang.String != null ) ? UriUtils . decode ( java.lang.String , STRING ) : null ; org.springframework.test.web.servlet.request.MockHttpServletRequest . addParameter ( UriUtils . decode ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , STRING ) , java.lang.String ) ; } } } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { } }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,java.lang.String> ( final MediaType org.springframework.test.web.servlet.request.MediaType ) { HttpInputMessage org.springframework.test.web.servlet.request.HttpInputMessage = new HttpInputMessage ( ) { @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( byte[] ) ; } @ java.lang.Override public org.springframework.test.web.servlet.request.HttpHeaders org.springframework.test.web.servlet.request.HttpHeaders ( ) { HttpHeaders org.springframework.test.web.servlet.request.HttpHeaders = new HttpHeaders ( ) ; org.springframework.test.web.servlet.request.HttpHeaders . setContentType ( org.springframework.test.web.servlet.request.MediaType ) ; return org.springframework.test.web.servlet.request.HttpHeaders ; } } ; try { return new FormHttpMessageConverter ( ) . read ( null , org.springframework.test.web.servlet.request.HttpInputMessage ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.request.HttpHeaders org.springframework.test.web.servlet.request.HttpHeaders ( ) { HttpHeaders org.springframework.test.web.servlet.request.HttpHeaders = new HttpHeaders ( ) ; org.springframework.test.web.servlet.request.HttpHeaders . setContentType ( org.springframework.test.web.servlet.request.MediaType ) ; return org.springframework.test.web.servlet.request.HttpHeaders ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.request.FlashMapManager org.springframework.test.web.servlet.request.FlashMapManager ( MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest ) { FlashMapManager org.springframework.test.web.servlet.request.FlashMapManager = null ; try { ServletContext org.springframework.test.web.servlet.request.ServletContext = org.springframework.test.web.servlet.request.MockHttpServletRequest . getServletContext ( ) ; WebApplicationContext org.springframework.test.web.servlet.request.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.test.web.servlet.request.ServletContext ) ; org.springframework.test.web.servlet.request.FlashMapManager = org.springframework.test.web.servlet.request.WebApplicationContext . getBean ( DispatcherServlet . FLASH_MAP_MANAGER_BEAN_NAME , FlashMapManager .class ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } catch ( NoSuchBeanDefinitionException org.springframework.test.web.servlet.request.NoSuchBeanDefinitionException ) { } return ( org.springframework.test.web.servlet.request.FlashMapManager != null ? org.springframework.test.web.servlet.request.FlashMapManager : new SessionFlashMapManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.request.MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest ( MockHttpServletRequest org.springframework.test.web.servlet.request.MockHttpServletRequest ) { for ( RequestPostProcessor org.springframework.test.web.servlet.request.RequestPostProcessor : this . java.util.List<org.springframework.test.web.servlet.request.RequestPostProcessor> ) { org.springframework.test.web.servlet.request.MockHttpServletRequest = org.springframework.test.web.servlet.request.RequestPostProcessor . postProcessRequest ( org.springframework.test.web.servlet.request.MockHttpServletRequest ) ; Assert . state ( org.springframework.test.web.servlet.request.MockHttpServletRequest != null , ( ) STRING + postProcessor . getClass ( ) . getName ( ) + STRING ) ; } return org.springframework.test.web.servlet.request.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> private static void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . hasLength ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private static < T > void void ( MultiValueMap < java.lang.String , T > org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,T> , java.lang.String java.lang.String , T [] T[] ) { Assert . hasLength ( java.lang.String , STRING ) ; Assert . notEmpty ( T[] , STRING ) ; for ( T T : T[] ) { org.springframework.test.web.servlet.request.MultiValueMap<java.lang.String,T> . add ( java.lang.String , T ) ; } }  <METHOD_END>
