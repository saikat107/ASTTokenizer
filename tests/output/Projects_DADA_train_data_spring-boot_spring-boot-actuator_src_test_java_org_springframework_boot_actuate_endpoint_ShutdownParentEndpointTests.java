<METHOD_START> @ After public void void ( ) { ApplicationContextTestUtils . closeAll ( this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Config .class ) . child ( org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Empty .class ) . web ( WebApplicationType . NONE ) . run ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext . getBean ( org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Config .class ) . latch ; assertThat ( ( java.lang.String ) org.springframework.boot.actuate.endpoint.ShutdownEndpoint ( ) . invoke ( ) . get ( STRING ) ) . startsWith ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext . isActive ( ) ) . isTrue ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Empty .class ) . child ( org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Config .class ) . web ( WebApplicationType . NONE ) . run ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext . getBean ( org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Config .class ) . latch ; assertThat ( ( java.lang.String ) org.springframework.boot.actuate.endpoint.ShutdownEndpoint ( ) . invoke ( ) . get ( STRING ) ) . startsWith ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext . isActive ( ) ) . isTrue ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.ShutdownEndpoint org.springframework.boot.actuate.endpoint.ShutdownEndpoint ( ) { return this . org.springframework.boot.actuate.endpoint.ConfigurableApplicationContext . getBean ( ShutdownEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.ShutdownEndpoint org.springframework.boot.actuate.endpoint.ShutdownEndpoint ( ) { ShutdownEndpoint org.springframework.boot.actuate.endpoint.ShutdownEndpoint = new ShutdownEndpoint ( ) ; org.springframework.boot.actuate.endpoint.ShutdownEndpoint . setEnabled ( true ) ; return org.springframework.boot.actuate.endpoint.ShutdownEndpoint ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.ApplicationListener<org.springframework.boot.actuate.endpoint.ContextClosedEvent> < ContextClosedEvent > org.springframework.boot.actuate.endpoint.ApplicationListener<org.springframework.boot.actuate.endpoint.ContextClosedEvent> ( ) { return new ApplicationListener < ContextClosedEvent > ( ) { @ java.lang.Override public void void ( ContextClosedEvent org.springframework.boot.actuate.endpoint.ContextClosedEvent ) { org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Config .this . java.util.concurrent.CountDownLatch . void ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextClosedEvent org.springframework.boot.actuate.endpoint.ContextClosedEvent ) { org.springframework.boot.actuate.endpoint.ShutdownParentEndpointTests.Config .this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
