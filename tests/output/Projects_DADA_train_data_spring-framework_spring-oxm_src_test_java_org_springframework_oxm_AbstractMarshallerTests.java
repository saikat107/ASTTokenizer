<METHOD_START> @ Before public final void void ( ) java.lang.Exception { M = M ( ) ; java.lang.Object = java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract M M ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = new javax.xml.transform.dom.DOMResult ( org.w3c.dom.Document ) ; M . marshal ( java.lang.Object , javax.xml.transform.dom.DOMResult ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Attr org.w3c.dom.Attr = org.w3c.dom.Document . org.w3c.dom.Attr ( STRING , STRING ) ; org.w3c.dom.Attr . void ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Attr ( org.w3c.dom.Attr ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Text org.w3c.dom.Text = org.w3c.dom.Document . org.w3c.dom.Text ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Text ) ; assertThat ( STRING , org.w3c.dom.Document , org.springframework.oxm.CompareMatcher ( org.w3c.dom.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = new javax.xml.transform.dom.DOMResult ( ) ; M . marshal ( java.lang.Object , javax.xml.transform.dom.DOMResult ) ; assertTrue ( STRING , javax.xml.transform.dom.DOMResult . org.w3c.dom.Node ( ) instanceof org.w3c.dom.Document ) ; org.w3c.dom.Document org.w3c.dom.Document = ( org.w3c.dom.Document ) javax.xml.transform.dom.DOMResult . org.w3c.dom.Node ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Attr org.w3c.dom.Attr = org.w3c.dom.Document . org.w3c.dom.Attr ( STRING , STRING ) ; org.w3c.dom.Attr . void ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Attr ( org.w3c.dom.Attr ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Text org.w3c.dom.Text = org.w3c.dom.Document . org.w3c.dom.Text ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Text ) ; assertThat ( STRING , org.w3c.dom.Document , org.springframework.oxm.CompareMatcher ( org.w3c.dom.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.transform.stream.StreamResult javax.xml.transform.stream.StreamResult = new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ; M . marshal ( java.lang.Object , javax.xml.transform.stream.StreamResult ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , org.springframework.oxm.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; javax.xml.transform.stream.StreamResult javax.xml.transform.stream.StreamResult = new javax.xml.transform.stream.StreamResult ( java.io.ByteArrayOutputStream ) ; M . marshal ( java.lang.Object , javax.xml.transform.stream.StreamResult ) ; assertThat ( STRING , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) , STRING ) , org.springframework.oxm.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLOutputFactory ( ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLStreamWriter = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLStreamWriter ( java.io.StringWriter ) ; javax.xml.transform.Result javax.xml.transform.Result = StaxUtils . createStaxResult ( javax.xml.stream.XMLStreamWriter ) ; M . marshal ( java.lang.Object , javax.xml.transform.Result ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , org.springframework.oxm.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLOutputFactory ( ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.stream.XMLEventWriter javax.xml.stream.XMLEventWriter = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLEventWriter ( java.io.StringWriter ) ; javax.xml.transform.Result javax.xml.transform.Result = StaxUtils . createStaxResult ( javax.xml.stream.XMLEventWriter ) ; M . marshal ( java.lang.Object , javax.xml.transform.Result ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , org.springframework.oxm.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLOutputFactory ( ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLStreamWriter = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLStreamWriter ( java.io.StringWriter ) ; javax.xml.transform.stax.StAXResult javax.xml.transform.stax.StAXResult = new javax.xml.transform.stax.StAXResult ( javax.xml.stream.XMLStreamWriter ) ; M . marshal ( java.lang.Object , javax.xml.transform.stax.StAXResult ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , org.springframework.oxm.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLOutputFactory ( ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.stream.XMLEventWriter javax.xml.stream.XMLEventWriter = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLEventWriter ( java.io.StringWriter ) ; javax.xml.transform.stax.StAXResult javax.xml.transform.stax.StAXResult = new javax.xml.transform.stax.StAXResult ( javax.xml.stream.XMLEventWriter ) ; M . marshal ( java.lang.Object , javax.xml.transform.stax.StAXResult ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , org.springframework.oxm.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.oxm.CompareMatcher org.springframework.oxm.CompareMatcher ( final java.lang.Object java.lang.Object ) { return CompareMatcher . isSimilarTo ( java.lang.Object ) . ignoreWhitespace ( ) ; }  <METHOD_END>
