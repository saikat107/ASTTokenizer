<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.listener.endpoint.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; JmsActivationSpecConfig org.springframework.jms.listener.endpoint.JmsActivationSpecConfig = new JmsActivationSpecConfig ( ) ; org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . setPubSubDomain ( false ) ; org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . setActivationSpecConfig ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) ; assertEquals ( false , org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isPubSubDomain ( ) ) ; assertEquals ( false , org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isReplyPubSubDomain ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.listener.endpoint.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; JmsActivationSpecConfig org.springframework.jms.listener.endpoint.JmsActivationSpecConfig = new JmsActivationSpecConfig ( ) ; org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . setPubSubDomain ( true ) ; org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . setActivationSpecConfig ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) ; assertEquals ( true , org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isPubSubDomain ( ) ) ; assertEquals ( true , org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isReplyPubSubDomain ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.listener.endpoint.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; JmsActivationSpecConfig org.springframework.jms.listener.endpoint.JmsActivationSpecConfig = new JmsActivationSpecConfig ( ) ; org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . setPubSubDomain ( true ) ; org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . setReplyPubSubDomain ( false ) ; org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . setActivationSpecConfig ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) ; assertEquals ( true , org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isPubSubDomain ( ) ) ; assertEquals ( false , org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isReplyPubSubDomain ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.listener.endpoint.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; org.springframework.jms.listener.endpoint.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isPubSubDomain ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.listener.endpoint.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; org.springframework.jms.listener.endpoint.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . isReplyPubSubDomain ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.listener.endpoint.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; assertNull ( org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . getMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.listener.endpoint.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; assertNull ( org.springframework.jms.listener.endpoint.JmsMessageEndpointManager . getDestinationResolver ( ) ) ; }  <METHOD_END>
