<METHOD_START> @ Test public void void ( ) { GemfirePersistentEntity < ? > org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<?> = mock ( GemfirePersistentEntity .class ) ; PartTree org.springframework.data.gemfire.repository.query.PartTree = mock ( PartTree .class ) ; when ( org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> . getRegionName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.repository.query.PartTree . isDistinct ( ) ) . thenReturn ( true ) ; QueryBuilder org.springframework.data.gemfire.repository.query.QueryBuilder = new QueryBuilder ( org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> , org.springframework.data.gemfire.repository.query.PartTree ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryBuilder . toString ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> , times ( NUMBER ) ) . getRegionName ( ) ; verify ( org.springframework.data.gemfire.repository.query.PartTree , times ( NUMBER ) ) . isDistinct ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfirePersistentEntity < ? > org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<?> = mock ( GemfirePersistentEntity .class ) ; PartTree org.springframework.data.gemfire.repository.query.PartTree = mock ( PartTree .class ) ; when ( org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> . getRegionName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.repository.query.PartTree . isDistinct ( ) ) . thenReturn ( false ) ; QueryBuilder org.springframework.data.gemfire.repository.query.QueryBuilder = new QueryBuilder ( org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> , org.springframework.data.gemfire.repository.query.PartTree ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryBuilder . toString ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> , times ( NUMBER ) ) . getRegionName ( ) ; verify ( org.springframework.data.gemfire.repository.query.PartTree , times ( NUMBER ) ) . isDistinct ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.query.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; new QueryBuilder ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Predicate org.springframework.data.gemfire.repository.query.Predicate = mock ( Predicate .class ) ; when ( org.springframework.data.gemfire.repository.query.Predicate . toString ( eq ( QueryBuilder . DEFAULT_ALIAS ) ) ) . thenReturn ( STRING ) ; QueryBuilder org.springframework.data.gemfire.repository.query.QueryBuilder = new QueryBuilder ( java.lang.String . java.lang.String ( STRING , QueryBuilder . DEFAULT_ALIAS ) ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryBuilder . create ( org.springframework.data.gemfire.repository.query.Predicate ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.repository.query.Predicate , times ( NUMBER ) ) . toString ( eq ( QueryBuilder . DEFAULT_ALIAS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryBuilder org.springframework.data.gemfire.repository.query.QueryBuilder = new QueryBuilder ( STRING ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryBuilder . create ( null ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
