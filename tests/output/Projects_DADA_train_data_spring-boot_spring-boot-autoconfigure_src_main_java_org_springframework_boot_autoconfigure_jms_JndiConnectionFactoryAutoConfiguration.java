<METHOD_START> public void ( JmsProperties org.springframework.boot.autoconfigure.jms.JmsProperties ) { this . org.springframework.boot.autoconfigure.jms.JmsProperties = org.springframework.boot.autoconfigure.jms.JmsProperties ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.ConnectionFactory ( ) javax.naming.NamingException { if ( StringUtils . hasLength ( this . org.springframework.boot.autoconfigure.jms.JmsProperties . getJndiName ( ) ) ) { return new JndiLocatorDelegate ( ) . lookup ( this . org.springframework.boot.autoconfigure.jms.JmsProperties . getJndiName ( ) , ConnectionFactory .class ) ; } return org.springframework.boot.autoconfigure.jms.ConnectionFactory ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.ConnectionFactory ( ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { try { return new JndiLocatorDelegate ( ) . lookup ( java.lang.String , ConnectionFactory .class ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { } } throw new java.lang.IllegalStateException ( STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . PARSE_CONFIGURATION ); }  <METHOD_END>
