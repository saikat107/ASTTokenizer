<METHOD_START> public void void ( ClientHttpRequestFactory org.springframework.http.client.support.ClientHttpRequestFactory ) { Assert . notNull ( org.springframework.http.client.support.ClientHttpRequestFactory , STRING ) ; this . org.springframework.http.client.support.ClientHttpRequestFactory = org.springframework.http.client.support.ClientHttpRequestFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.client.support.ClientHttpRequestFactory org.springframework.http.client.support.ClientHttpRequestFactory ( ) { return this . org.springframework.http.client.support.ClientHttpRequestFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.client.support.ClientHttpRequest org.springframework.http.client.support.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.support.HttpMethod ) throws java.io.IOException { ClientHttpRequest org.springframework.http.client.support.ClientHttpRequest = org.springframework.http.client.support.ClientHttpRequestFactory ( ) . createRequest ( java.net.URI , org.springframework.http.client.support.HttpMethod ) ; if ( org.springframework.http.client.support.Log . isDebugEnabled ( ) ) { org.springframework.http.client.support.Log . debug ( STRING + org.springframework.http.client.support.HttpMethod . name ( ) + STRING + java.net.URI + STRING ) ; } return org.springframework.http.client.support.ClientHttpRequest ; }  <METHOD_END>
