<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.FormHttpMessageConverter . canRead ( MultiValueMap .class , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( this . org.springframework.http.converter.FormHttpMessageConverter . canRead ( MultiValueMap .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.FormHttpMessageConverter . canWrite ( MultiValueMap .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( this . org.springframework.http.converter.FormHttpMessageConverter . canWrite ( MultiValueMap .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( this . org.springframework.http.converter.FormHttpMessageConverter . canWrite ( MultiValueMap .class , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; assertTrue ( this . org.springframework.http.converter.FormHttpMessageConverter . canWrite ( MultiValueMap .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.http.converter.FormHttpMessageConverter . read ( null , org.springframework.http.converter.MockHttpInputMessage ) ; assertEquals ( STRING , NUMBER , org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertNull ( STRING , org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , null ) ; MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; this . org.springframework.http.converter.FormHttpMessageConverter . write ( org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> , MediaType . APPLICATION_FORM_URLENCODED , org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( STRING , STRING , org.springframework.http.converter.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING ) , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) . length , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , null ) ; Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , org.springframework.http.converter.Resource ) ; Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , org.springframework.http.converter.Resource ) ; javax.xml.transform.Source javax.xml.transform.Source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( STRING ) ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = new HttpHeaders ( ) ; org.springframework.http.converter.HttpHeaders . setContentType ( MediaType . TEXT_XML ) ; HttpEntity < javax.xml.transform.Source > org.springframework.http.converter.HttpEntity<javax.xml.transform.Source> = new HttpEntity <> ( javax.xml.transform.Source , org.springframework.http.converter.HttpHeaders ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , org.springframework.http.converter.HttpEntity<javax.xml.transform.Source> ) ; MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; this . org.springframework.http.converter.FormHttpMessageConverter . setMultipartCharset ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; this . org.springframework.http.converter.FormHttpMessageConverter . write ( org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.MockHttpOutputMessage ) ; final MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ; assertNotNull ( STRING , org.springframework.http.converter.MediaType . getParameter ( STRING ) ) ; FileItemFactory org.springframework.http.converter.FileItemFactory = new DiskFileItemFactory ( ) ; FileUpload org.springframework.http.converter.FileUpload = new FileUpload ( org.springframework.http.converter.FileItemFactory ) ; RequestContext org.springframework.http.converter.RequestContext = new org.springframework.http.converter.FormHttpMessageConverterTests.MockHttpOutputMessageRequestContext ( org.springframework.http.converter.MockHttpOutputMessage ) ; java.util.List<org.springframework.http.converter.FileItem> < FileItem > java.util.List<org.springframework.http.converter.FileItem> = org.springframework.http.converter.FileUpload . parseRequest ( org.springframework.http.converter.RequestContext ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.converter.FileItem> . size ( ) ) ; FileItem org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertTrue ( org.springframework.http.converter.FileItem . isFormField ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getString ( ) ) ; org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertTrue ( org.springframework.http.converter.FileItem . isFormField ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getString ( ) ) ; org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertTrue ( org.springframework.http.converter.FileItem . isFormField ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getString ( ) ) ; org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertFalse ( org.springframework.http.converter.FileItem . isFormField ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getContentType ( ) ) ; assertEquals ( org.springframework.http.converter.Resource . getFile ( ) . length ( ) , org.springframework.http.converter.FileItem . getSize ( ) ) ; org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertFalse ( org.springframework.http.converter.FileItem . isFormField ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getContentType ( ) ) ; assertEquals ( org.springframework.http.converter.Resource . getFile ( ) . length ( ) , org.springframework.http.converter.FileItem . getSize ( ) ) ; org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getContentType ( ) ) ; verify ( org.springframework.http.converter.MockHttpOutputMessage . getBody ( ) , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.http.converter.FormHttpMessageConverterTests.MyBean org.springframework.http.converter.FormHttpMessageConverterTests.MyBean = new org.springframework.http.converter.FormHttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.FormHttpMessageConverterTests.MyBean . void ( STRING ) ; MultiValueMap < java.lang.String , java.lang.Object > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , org.springframework.http.converter.FormHttpMessageConverterTests.MyBean ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = new HttpHeaders ( ) ; org.springframework.http.converter.HttpHeaders . setContentType ( MediaType . TEXT_XML ) ; HttpEntity < org.springframework.http.converter.FormHttpMessageConverterTests.MyBean > org.springframework.http.converter.HttpEntity<org.springframework.http.converter.FormHttpMessageConverterTests.MyBean> = new HttpEntity <> ( org.springframework.http.converter.FormHttpMessageConverterTests.MyBean , org.springframework.http.converter.HttpHeaders ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , org.springframework.http.converter.HttpEntity<org.springframework.http.converter.FormHttpMessageConverterTests.MyBean> ) ; MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; this . org.springframework.http.converter.FormHttpMessageConverter . setMultipartCharset ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; this . org.springframework.http.converter.FormHttpMessageConverter . write ( org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.MockHttpOutputMessage ) ; final MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ; assertNotNull ( STRING , org.springframework.http.converter.MediaType . getParameter ( STRING ) ) ; FileItemFactory org.springframework.http.converter.FileItemFactory = new DiskFileItemFactory ( ) ; FileUpload org.springframework.http.converter.FileUpload = new FileUpload ( org.springframework.http.converter.FileItemFactory ) ; RequestContext org.springframework.http.converter.RequestContext = new org.springframework.http.converter.FormHttpMessageConverterTests.MockHttpOutputMessageRequestContext ( org.springframework.http.converter.MockHttpOutputMessage ) ; java.util.List<org.springframework.http.converter.FileItem> < FileItem > java.util.List<org.springframework.http.converter.FileItem> = org.springframework.http.converter.FileUpload . parseRequest ( org.springframework.http.converter.RequestContext ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.converter.FileItem> . size ( ) ) ; FileItem org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertTrue ( org.springframework.http.converter.FileItem . isFormField ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getString ( ) ) ; org.springframework.http.converter.FileItem = java.util.List<org.springframework.http.converter.FileItem> . get ( NUMBER ) ; assertTrue ( org.springframework.http.converter.FileItem . isFormField ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.FileItem . getFieldName ( ) ) ; assertThat ( org.springframework.http.converter.FileItem . getString ( ) , allOf ( startsWith ( STRING ) , endsWith ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private void ( MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage ) { this . org.springframework.http.converter.MockHttpOutputMessage = org.springframework.http.converter.MockHttpOutputMessage ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { MediaType org.springframework.http.converter.MediaType = this . org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ; return ( org.springframework.http.converter.MediaType != null && org.springframework.http.converter.MediaType . getCharset ( ) != null ? org.springframework.http.converter.MediaType . getCharset ( ) . name ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { MediaType org.springframework.http.converter.MediaType = this . org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ; return ( org.springframework.http.converter.MediaType != null ? org.springframework.http.converter.MediaType . toString ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public int int ( ) { return this . org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) . length ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( this . org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
