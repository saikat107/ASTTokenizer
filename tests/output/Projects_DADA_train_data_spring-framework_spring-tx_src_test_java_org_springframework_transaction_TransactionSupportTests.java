<METHOD_START> @ Test public void void ( ) { PlatformTransactionManager org.springframework.transaction.PlatformTransactionManager = new TestTransactionManager ( false , true ) ; DefaultTransactionStatus org.springframework.transaction.DefaultTransactionStatus = ( DefaultTransactionStatus ) org.springframework.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionDefinition ( TransactionDefinition . PROPAGATION_SUPPORTS ) ) ; assertTrue ( STRING , org.springframework.transaction.DefaultTransactionStatus . getTransaction ( ) == null ) ; DefaultTransactionStatus org.springframework.transaction.DefaultTransactionStatus = ( DefaultTransactionStatus ) org.springframework.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionDefinition ( TransactionDefinition . PROPAGATION_REQUIRED ) ) ; assertTrue ( STRING , org.springframework.transaction.DefaultTransactionStatus . getTransaction ( ) != null ) ; assertTrue ( STRING , org.springframework.transaction.DefaultTransactionStatus . isNewTransaction ( ) ) ; try { org.springframework.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionDefinition ( TransactionDefinition . PROPAGATION_MANDATORY ) ) ; fail ( STRING ) ; } catch ( IllegalTransactionStateException org.springframework.transaction.IllegalTransactionStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlatformTransactionManager org.springframework.transaction.PlatformTransactionManager = new TestTransactionManager ( true , true ) ; DefaultTransactionStatus org.springframework.transaction.DefaultTransactionStatus = ( DefaultTransactionStatus ) org.springframework.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionDefinition ( TransactionDefinition . PROPAGATION_SUPPORTS ) ) ; assertTrue ( STRING , org.springframework.transaction.DefaultTransactionStatus . getTransaction ( ) != null ) ; assertTrue ( STRING , ! org.springframework.transaction.DefaultTransactionStatus . isNewTransaction ( ) ) ; DefaultTransactionStatus org.springframework.transaction.DefaultTransactionStatus = ( DefaultTransactionStatus ) org.springframework.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionDefinition ( TransactionDefinition . PROPAGATION_REQUIRED ) ) ; assertTrue ( STRING , org.springframework.transaction.DefaultTransactionStatus . getTransaction ( ) != null ) ; assertTrue ( STRING , ! org.springframework.transaction.DefaultTransactionStatus . isNewTransaction ( ) ) ; try { DefaultTransactionStatus org.springframework.transaction.DefaultTransactionStatus = ( DefaultTransactionStatus ) org.springframework.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionDefinition ( TransactionDefinition . PROPAGATION_MANDATORY ) ) ; assertTrue ( STRING , org.springframework.transaction.DefaultTransactionStatus . getTransaction ( ) != null ) ; assertTrue ( STRING , ! org.springframework.transaction.DefaultTransactionStatus . isNewTransaction ( ) ) ; } catch ( NoTransactionException org.springframework.transaction.NoTransactionException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) ; TransactionStatus org.springframework.transaction.TransactionStatus = org.springframework.transaction.TestTransactionManager . getTransaction ( null ) ; org.springframework.transaction.TestTransactionManager . commit ( org.springframework.transaction.TransactionStatus ) ; assertTrue ( STRING , tm . begin ) ; assertTrue ( STRING , tm . commit ) ; assertTrue ( STRING , ! tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) ; TransactionStatus org.springframework.transaction.TransactionStatus = org.springframework.transaction.TestTransactionManager . getTransaction ( null ) ; org.springframework.transaction.TestTransactionManager . rollback ( org.springframework.transaction.TransactionStatus ) ; assertTrue ( STRING , tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) ; TransactionStatus org.springframework.transaction.TransactionStatus = org.springframework.transaction.TestTransactionManager . getTransaction ( null ) ; org.springframework.transaction.TransactionStatus . setRollbackOnly ( ) ; org.springframework.transaction.TestTransactionManager . commit ( org.springframework.transaction.TransactionStatus ) ; assertTrue ( STRING , tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( true , true ) ; TransactionStatus org.springframework.transaction.TransactionStatus = org.springframework.transaction.TestTransactionManager . getTransaction ( null ) ; org.springframework.transaction.TestTransactionManager . commit ( org.springframework.transaction.TransactionStatus ) ; assertTrue ( STRING , ! tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , ! tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( true , true ) ; TransactionStatus org.springframework.transaction.TransactionStatus = org.springframework.transaction.TestTransactionManager . getTransaction ( null ) ; org.springframework.transaction.TestTransactionManager . rollback ( org.springframework.transaction.TransactionStatus ) ; assertTrue ( STRING , ! tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , ! tm . rollback ) ; assertTrue ( STRING , tm . rollbackOnly ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( true , true ) ; TransactionStatus org.springframework.transaction.TransactionStatus = org.springframework.transaction.TestTransactionManager . getTransaction ( null ) ; org.springframework.transaction.TransactionStatus . setRollbackOnly ( ) ; org.springframework.transaction.TestTransactionManager . commit ( org.springframework.transaction.TransactionStatus ) ; assertTrue ( STRING , ! tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , ! tm . rollback ) ; assertTrue ( STRING , tm . rollbackOnly ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.TestTransactionManager ) ; org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) {			} } ) ; assertTrue ( STRING , tm . begin ) ; assertTrue ( STRING , tm . commit ) ; assertTrue ( STRING , ! tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockCallbackPreferringTransactionManager org.springframework.transaction.MockCallbackPreferringTransactionManager = new MockCallbackPreferringTransactionManager ( ) ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.MockCallbackPreferringTransactionManager ) ; org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) {			} } ) ; assertSame ( org.springframework.transaction.TransactionTemplate , org.springframework.transaction.MockCallbackPreferringTransactionManager . getDefinition ( ) ) ; assertFalse ( org.springframework.transaction.MockCallbackPreferringTransactionManager . getStatus ( ) . isRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.TestTransactionManager ) ; final java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; try { org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { throw java.lang.RuntimeException ; } } ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertTrue ( STRING , java.lang.RuntimeException == java.lang.RuntimeException ) ; assertTrue ( STRING , tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { throw java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { final TransactionSystemException org.springframework.transaction.TransactionSystemException = new TransactionSystemException ( STRING ) ; TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) { @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.transaction.DefaultTransactionStatus ) { super. doRollback ( org.springframework.transaction.DefaultTransactionStatus ) ; throw org.springframework.transaction.TransactionSystemException ; } } ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.TestTransactionManager ) ; final java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; try { org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { throw java.lang.RuntimeException ; } } ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertTrue ( STRING , java.lang.RuntimeException == org.springframework.transaction.TransactionSystemException ) ; assertTrue ( STRING , tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.transaction.DefaultTransactionStatus ) { super. doRollback ( org.springframework.transaction.DefaultTransactionStatus ) ; throw org.springframework.transaction.TransactionSystemException ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { throw java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.TestTransactionManager ) ; try { org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { throw new java.lang.Error ( STRING ) ; } } ) ; fail ( STRING ) ; } catch ( java.lang.Error java.lang.Error ) { assertTrue ( STRING , tm . begin ) ; assertTrue ( STRING , ! tm . commit ) ; assertTrue ( STRING , tm . rollback ) ; assertTrue ( STRING , ! tm . rollbackOnly ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { throw new java.lang.Error ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestTransactionManager org.springframework.transaction.TestTransactionManager = new TestTransactionManager ( false , true ) ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( ) ; org.springframework.transaction.TransactionTemplate . setTransactionManager ( org.springframework.transaction.TestTransactionManager ) ; assertTrue ( STRING , org.springframework.transaction.TransactionTemplate . getTransactionManager ( ) == org.springframework.transaction.TestTransactionManager ) ; try { org.springframework.transaction.TransactionTemplate . setPropagationBehaviorName ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } org.springframework.transaction.TransactionTemplate . setPropagationBehaviorName ( STRING ) ; assertTrue ( STRING , org.springframework.transaction.TransactionTemplate . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_SUPPORTS ) ; try { org.springframework.transaction.TransactionTemplate . setPropagationBehavior ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } org.springframework.transaction.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_MANDATORY ) ; assertTrue ( STRING , org.springframework.transaction.TransactionTemplate . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_MANDATORY ) ; try { org.springframework.transaction.TransactionTemplate . setIsolationLevelName ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } org.springframework.transaction.TransactionTemplate . setIsolationLevelName ( STRING ) ; assertTrue ( STRING , org.springframework.transaction.TransactionTemplate . getIsolationLevel ( ) == TransactionDefinition . ISOLATION_SERIALIZABLE ) ; try { org.springframework.transaction.TransactionTemplate . setIsolationLevel ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } org.springframework.transaction.TransactionTemplate . setIsolationLevel ( TransactionDefinition . ISOLATION_REPEATABLE_READ ) ; assertTrue ( STRING , org.springframework.transaction.TransactionTemplate . getIsolationLevel ( ) == TransactionDefinition . ISOLATION_REPEATABLE_READ ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; }  <METHOD_END>
