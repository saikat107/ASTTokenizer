<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfigurationTests.TestConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBean ( Cluster .class ) ) . isNotNull ( ) ; assertThat ( java.util.Set<java.lang.Class<?>> ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfigurationTests.TestExcludeConfiguration .class , org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfigurationTests.EmptyConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBean ( Cluster .class ) ) . isNotNull ( ) ; assertThat ( java.util.Set<java.lang.Class<?>> ( ) ) . hasSize ( NUMBER ) . containsOnly ( City .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfigurationTests.TestExcludeConfiguration .class , org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfigurationTests.CustomizedConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBean ( CityCassandraRepository .class ) ) . isNotNull ( ) ; assertThat ( java.util.Set<java.lang.Class<?>> ( ) ) . hasSize ( NUMBER ) . containsOnly ( City .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { BasicCassandraMappingContext org.springframework.boot.autoconfigure.data.cassandra.BasicCassandraMappingContext = this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBean ( BasicCassandraMappingContext .class ) ; return ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.cassandra.BasicCassandraMappingContext , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . register ( CassandraAutoConfiguration .class , CassandraRepositoriesAutoConfiguration .class , CassandraDataAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.cassandra.Session org.springframework.boot.autoconfigure.data.cassandra.Session ( ) { return mock ( Session .class ) ; }  <METHOD_END>
