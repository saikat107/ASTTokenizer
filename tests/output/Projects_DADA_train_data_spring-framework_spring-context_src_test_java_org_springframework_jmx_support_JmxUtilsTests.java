<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.DynamicMBean javax.management.DynamicMBean = new TestDynamicMBean ( ) ; assertTrue ( STRING , JmxUtils . isMBean ( javax.management.DynamicMBean . java.lang.Class<? extends javax.management.DynamicMBean> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.StandardMBean javax.management.StandardMBean = new javax.management.StandardMBean ( new JmxTestBean ( ) , IJmxTestBean .class ) ; assertTrue ( STRING , JmxUtils . isMBean ( javax.management.StandardMBean . java.lang.Class<? extends javax.management.StandardMBean> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.StandardMBean javax.management.StandardMBean = new org.springframework.jmx.support.JmxUtilsTests.StandardMBeanImpl ( ) ; assertTrue ( STRING , JmxUtils . isMBean ( javax.management.StandardMBean . java.lang.Class<? extends javax.management.StandardMBean> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( STRING , JmxUtils . isMBean ( java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jmx.support.JmxUtilsTests.Foo org.springframework.jmx.support.JmxUtilsTests.Foo = new org.springframework.jmx.support.JmxUtilsTests.Foo ( ) ; assertTrue ( STRING , JmxUtils . isMBean ( org.springframework.jmx.support.JmxUtilsTests.Foo . java.lang.Class<? extends org.springframework.jmx.support.JmxUtilsTests.Foo> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jmx.support.JmxUtilsTests.FooX org.springframework.jmx.support.JmxUtilsTests.FooX = new org.springframework.jmx.support.JmxUtilsTests.FooX ( ) ; assertTrue ( STRING , JmxUtils . isMBean ( org.springframework.jmx.support.JmxUtilsTests.FooX . java.lang.Class<? extends org.springframework.jmx.support.JmxUtilsTests.FooX> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jmx.support.JmxUtilsTests.Bar org.springframework.jmx.support.JmxUtilsTests.Bar = new org.springframework.jmx.support.JmxUtilsTests.Bar ( ) ; org.springframework.jmx.support.JmxUtilsTests.Abc org.springframework.jmx.support.JmxUtilsTests.Abc = new org.springframework.jmx.support.JmxUtilsTests.Abc ( ) ; assertTrue ( STRING , JmxUtils . isMBean ( org.springframework.jmx.support.JmxUtilsTests.Bar . java.lang.Class<? extends org.springframework.jmx.support.JmxUtilsTests.Bar> ( ) ) ) ; assertTrue ( STRING , JmxUtils . isMBean ( org.springframework.jmx.support.JmxUtilsTests.Abc . java.lang.Class<? extends org.springframework.jmx.support.JmxUtilsTests.Abc> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = new BeanWrapperImpl ( org.springframework.jmx.support.JmxUtilsTests.AttributeTestBean .class ) . getPropertyDescriptor ( STRING ) ; java.lang.String java.lang.String = JmxUtils . getAttributeName ( java.beans.PropertyDescriptor , true ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = new BeanWrapperImpl ( org.springframework.jmx.support.JmxUtilsTests.AttributeTestBean .class ) . getPropertyDescriptor ( STRING ) ; java.lang.String java.lang.String = JmxUtils . getAttributeName ( java.beans.PropertyDescriptor , false ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.MalformedObjectNameException { javax.management.ObjectName javax.management.ObjectName = ObjectNameManager . getInstance ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; javax.management.ObjectName javax.management.ObjectName = JmxUtils . appendIdentityToObjectName ( javax.management.ObjectName , java.lang.Object ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , javax.management.ObjectName . java.lang.String ( ) , javax.management.ObjectName . java.lang.String ( ) ) ; assertEquals ( STRING , javax.management.ObjectName . java.lang.String ( java.lang.String ) , javax.management.ObjectName . java.lang.String ( STRING ) ) ; assertEquals ( STRING , ObjectUtils . getIdentityHexString ( java.lang.Object ) , javax.management.ObjectName . java.lang.String ( JmxUtils . IDENTITY_OBJECT_NAME_KEY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.management.MBeanServer javax.management.MBeanServer = null ; try { javax.management.MBeanServer = JmxUtils . locateMBeanServer ( ) ; } finally { if ( javax.management.MBeanServer != null ) { javax.management.MBeanServerFactory . void ( javax.management.MBeanServer ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( JmxUtils . isMBean ( org.springframework.jmx.support.JmxUtilsTests.JmxClass .class ) ) ; assertFalse ( JmxUtils . isMBean ( org.springframework.jmx.support.JmxUtilsTests.SpecializedJmxInterface .class ) ) ; assertFalse ( JmxUtils . isMBean ( org.springframework.jmx.support.JmxUtilsTests.JmxInterface .class ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) javax.management.NotCompliantMBeanException { super( IJmxTestBean .class ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( int int , int int ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
