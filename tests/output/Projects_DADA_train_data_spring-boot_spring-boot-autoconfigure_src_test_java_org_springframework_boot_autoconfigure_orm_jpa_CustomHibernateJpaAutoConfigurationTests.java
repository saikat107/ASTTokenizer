<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.orm.jpa.CustomHibernateJpaAutoConfigurationTests.TestConfiguration .class , DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , HibernateJpaAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . refresh ( ) ; JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( JpaProperties .class ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ) . get ( STRING ) ; assertThat ( java.lang.String ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.orm.jpa.CustomHibernateJpaAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , PropertyPlaceholderAutoConfiguration .class , HibernateJpaAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . refresh ( ) ; JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( JpaProperties .class ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ) . get ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext , STRING + STRING ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.orm.jpa.CustomHibernateJpaAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , PropertyPlaceholderAutoConfiguration .class , HibernateJpaAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . refresh ( ) ; JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( JpaProperties .class ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.orm.jpa.CustomHibernateJpaAutoConfigurationTests.TestConfiguration .class , DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , HibernateJpaAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . refresh ( ) ; HibernateJpaVendorAdapter org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaVendorAdapter = this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( HibernateJpaVendorAdapter .class ) ; Database org.springframework.boot.autoconfigure.orm.jpa.Database = ( Database ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaVendorAdapter , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.orm.jpa.Database ) . isEqualTo ( Database . H2 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; try { given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( mock ( java.sql.Connection .class ) ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) . java.sql.DatabaseMetaData ( ) ) . willReturn ( mock ( java.sql.DatabaseMetaData .class ) ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { } return javax.sql.DataSource ; }  <METHOD_END>
