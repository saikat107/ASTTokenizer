<METHOD_START> @ Before public void void ( ) { org.springframework.web.client.ClientHttpResponse = mock ( ClientHttpResponse .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . NO_CONTENT ) ; java.lang.Object java.lang.Object = org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . NOT_MODIFIED ) ; java.lang.Object java.lang.Object = org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . CONTINUE ) ; java.lang.Object java.lang.Object = org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; java.lang.Object java.lang.Object = org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { HttpMessageConverter < java.lang.String > org.springframework.web.client.HttpMessageConverter<java.lang.String> = mock ( HttpMessageConverter .class ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<java.lang.String> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; java.lang.Object java.lang.Object = org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { HttpMessageConverter < java.lang.String > org.springframework.web.client.HttpMessageConverter<java.lang.String> = mock ( HttpMessageConverter .class ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; MediaType org.springframework.web.client.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<java.lang.String> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter<java.lang.String> . read ( eq ( java.lang.String .class ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { HttpMessageConverter < java.lang.String > org.springframework.web.client.HttpMessageConverter<java.lang.String> = mock ( HttpMessageConverter .class ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; MediaType org.springframework.web.client.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<java.lang.String> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willReturn ( false ) ; org.springframework.web.client.ExpectedException . expect ( RestClientException .class ) ; org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { GenericHttpMessageConverter < java.lang.String > org.springframework.web.client.GenericHttpMessageConverter<java.lang.String> = mock ( GenericHttpMessageConverter .class ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; MediaType org.springframework.web.client.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; java.lang.String java.lang.String = STRING ; ParameterizedTypeReference < java.util.List<java.lang.String> < java.lang.String > > org.springframework.web.client.ParameterizedTypeReference<java.util.List<java.lang.String>> = new ParameterizedTypeReference < java.util.List<java.lang.String> < java.lang.String > > ( ) {} ; java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<java.util.List<java.lang.String>> . getType ( ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor < java.util.List<java.lang.String> < java.lang.String > > ( java.lang.reflect.Type , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.GenericHttpMessageConverter<java.lang.String> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ) ; given ( org.springframework.web.client.GenericHttpMessageConverter<java.lang.String> . canRead ( java.lang.reflect.Type , null , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.GenericHttpMessageConverter<java.lang.String> . read ( eq ( java.lang.reflect.Type ) , eq ( null ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { HttpMessageConverter < java.lang.String > org.springframework.web.client.HttpMessageConverter<java.lang.String> = mock ( HttpMessageConverter .class ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; MediaType org.springframework.web.client.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<java.lang.String> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willThrow ( java.io.IOException .class ) ; org.springframework.web.client.ExpectedException . expect ( RestClientException .class ) ; org.springframework.web.client.ExpectedException . expectMessage ( STRING + STRING ) ; org.springframework.web.client.ExpectedException . expectCause ( Matchers . instanceOf ( java.io.IOException .class ) ) ; org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { HttpMessageConverter < java.lang.String > org.springframework.web.client.HttpMessageConverter<java.lang.String> = mock ( HttpMessageConverter .class ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; MediaType org.springframework.web.client.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpMessageConverterExtractor<?> = new HttpMessageConverterExtractor <> ( java.lang.String .class , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.HttpMessageConverter<java.lang.String> ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willThrow ( HttpMessageNotReadableException .class ) ; org.springframework.web.client.ExpectedException . expect ( RestClientException .class ) ; org.springframework.web.client.ExpectedException . expectMessage ( STRING + STRING ) ; org.springframework.web.client.ExpectedException . expectCause ( Matchers . instanceOf ( HttpMessageNotReadableException .class ) ) ; org.springframework.web.client.HttpMessageConverterExtractor<> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> ) { java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.client.HttpMessageConverter<?>> <> ( NUMBER ) ; java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( org.springframework.web.client.HttpMessageConverter<> ) ; return java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ; }  <METHOD_END>
