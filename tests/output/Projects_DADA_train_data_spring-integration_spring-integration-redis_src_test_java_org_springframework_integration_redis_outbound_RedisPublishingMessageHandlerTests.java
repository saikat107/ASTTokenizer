<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { int int = NUMBER ; java.lang.String java.lang.String = STRING ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int * NUMBER ) ; RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; MessageListenerAdapter org.springframework.integration.redis.outbound.MessageListenerAdapter = new MessageListenerAdapter ( ) ; org.springframework.integration.redis.outbound.MessageListenerAdapter . setDelegate ( new org.springframework.integration.redis.outbound.RedisPublishingMessageHandlerTests.Listener ( java.util.concurrent.CountDownLatch ) ) ; org.springframework.integration.redis.outbound.MessageListenerAdapter . setSerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.MessageListenerAdapter . afterPropertiesSet ( ) ; RedisMessageListenerContainer org.springframework.integration.redis.outbound.RedisMessageListenerContainer = new RedisMessageListenerContainer ( ) ; org.springframework.integration.redis.outbound.RedisMessageListenerContainer . setConnectionFactory ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisMessageListenerContainer . afterPropertiesSet ( ) ; org.springframework.integration.redis.outbound.RedisMessageListenerContainer . addMessageListener ( org.springframework.integration.redis.outbound.MessageListenerAdapter , java.util.Collections .< Topic > java.util.List<org.springframework.integration.redis.outbound.Topic> ( new ChannelTopic ( java.lang.String ) ) ) ; org.springframework.integration.redis.outbound.RedisMessageListenerContainer . start ( ) ; this . awaitContainerSubscribed ( org.springframework.integration.redis.outbound.RedisMessageListenerContainer ) ; final RedisPublishingMessageHandler org.springframework.integration.redis.outbound.RedisPublishingMessageHandler = new RedisPublishingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisPublishingMessageHandler . setTopicExpression ( new LiteralExpression ( java.lang.String ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.integration.redis.outbound.RedisPublishingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING + int ) . build ( ) ) ; } for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.integration.redis.outbound.RedisPublishingMessageHandler . handleMessage ( MessageBuilder . withPayload ( ( STRING + int ) . byte[] ( ) ) . build ( ) ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.redis.outbound.RedisMessageListenerContainer . stop ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
