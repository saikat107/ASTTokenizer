<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { boolean boolean = true ; for ( int int = NUMBER , int = getChildCount ( ) ; int < int ; int ++ ) { SpelNode org.springframework.expression.spel.ast.SpelNode = getChild ( int ) ; if ( ! ( org.springframework.expression.spel.ast.SpelNode instanceof Literal ) ) { if ( org.springframework.expression.spel.ast.SpelNode instanceof InlineList ) { InlineList org.springframework.expression.spel.ast.InlineList = ( InlineList ) org.springframework.expression.spel.ast.SpelNode ; if ( ! org.springframework.expression.spel.ast.InlineList . isConstant ( ) ) { boolean = false ; break; } } else if ( org.springframework.expression.spel.ast.SpelNode instanceof org.springframework.expression.spel.ast.InlineMap ) { org.springframework.expression.spel.ast.InlineMap org.springframework.expression.spel.ast.InlineMap = ( org.springframework.expression.spel.ast.InlineMap ) org.springframework.expression.spel.ast.SpelNode ; if ( ! org.springframework.expression.spel.ast.InlineMap . boolean ( ) ) { boolean = false ; break; } } else if ( ! ( ( int % NUMBER ) == NUMBER && ( org.springframework.expression.spel.ast.SpelNode instanceof PropertyOrFieldReference ) ) ) { boolean = false ; break; } } } if ( boolean ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> <> ( ) ; int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { SpelNode org.springframework.expression.spel.ast.SpelNode = getChild ( int ++ ) ; SpelNode org.springframework.expression.spel.ast.SpelNode = getChild ( int ) ; java.lang.Object java.lang.Object = null ; java.lang.Object java.lang.Object = null ; if ( org.springframework.expression.spel.ast.SpelNode instanceof Literal ) { java.lang.Object = ( ( Literal ) org.springframework.expression.spel.ast.SpelNode ) . getLiteralValue ( ) . getValue ( ) ; } else if ( org.springframework.expression.spel.ast.SpelNode instanceof PropertyOrFieldReference ) { java.lang.Object = ( ( PropertyOrFieldReference ) org.springframework.expression.spel.ast.SpelNode ) . getName ( ) ; } else { return; } if ( org.springframework.expression.spel.ast.SpelNode instanceof Literal ) { java.lang.Object = ( ( Literal ) org.springframework.expression.spel.ast.SpelNode ) . getLiteralValue ( ) . getValue ( ) ; } else if ( org.springframework.expression.spel.ast.SpelNode instanceof InlineList ) { java.lang.Object = ( ( InlineList ) org.springframework.expression.spel.ast.SpelNode ) . getConstantValue ( ) ; } else if ( org.springframework.expression.spel.ast.SpelNode instanceof org.springframework.expression.spel.ast.InlineMap ) { java.lang.Object = ( ( org.springframework.expression.spel.ast.InlineMap ) org.springframework.expression.spel.ast.SpelNode ) . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; } java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; } this . org.springframework.expression.spel.ast.TypedValue = new TypedValue ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( java.util.Map<java.lang.Object,java.lang.Object> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { if ( this . org.springframework.expression.spel.ast.TypedValue != null ) { return this . org.springframework.expression.spel.ast.TypedValue ; } else { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> <> ( ) ; int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { SpelNode org.springframework.expression.spel.ast.SpelNode = getChild ( int ++ ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.expression.spel.ast.SpelNode instanceof PropertyOrFieldReference ) { PropertyOrFieldReference org.springframework.expression.spel.ast.PropertyOrFieldReference = ( PropertyOrFieldReference ) org.springframework.expression.spel.ast.SpelNode ; java.lang.Object = org.springframework.expression.spel.ast.PropertyOrFieldReference . getName ( ) ; } else { java.lang.Object = org.springframework.expression.spel.ast.SpelNode . getValue ( org.springframework.expression.spel.ast.ExpressionState ) ; } java.lang.Object java.lang.Object = getChild ( int ) . getValue ( org.springframework.expression.spel.ast.ExpressionState ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; } return new TypedValue ( java.util.Map<java.lang.Object,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( int ++ ) . toStringAST ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( int ) . toStringAST ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.expression.spel.ast.TypedValue != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ) { return ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) this . org.springframework.expression.spel.ast.TypedValue . getValue ( ) ; }  <METHOD_END>
