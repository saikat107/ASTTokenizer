<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . getObject ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . getObject ( ) . isClosed ( ) ) . isFalse ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getMetricsOptions ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getMetricsOptions ( ) . isJMXReportingEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . destroy ( ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . getObject ( ) . isClosed ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompressionType org.springframework.cassandra.config.CompressionType = CompressionType . LZ4 ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setCompressionType ( org.springframework.cassandra.config.CompressionType ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.ProtocolOptions ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getCompression ( ) ) . isEqualTo ( Compression . LZ4 ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CompressionType org.springframework.cassandra.config.CompressionType = CompressionType . SNAPPY ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setCompressionType ( org.springframework.cassandra.config.CompressionType ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getProtocolOptions ( ) . getCompression ( ) ) . isEqualTo ( Compression . SNAPPY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PoolingOptions org.springframework.cassandra.config.PoolingOptions = new PoolingOptions ( ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setPoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getPoolingOptions ( ) ) . isEqualTo ( org.springframework.cassandra.config.PoolingOptions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SocketOptions org.springframework.cassandra.config.SocketOptions = new SocketOptions ( ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setSocketOptions ( org.springframework.cassandra.config.SocketOptions ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getSocketOptions ( ) ) . isEqualTo ( org.springframework.cassandra.config.SocketOptions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryOptions org.springframework.cassandra.config.QueryOptions = new QueryOptions ( ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setQueryOptions ( org.springframework.cassandra.config.QueryOptions ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getQueryOptions ( ) ) . isEqualTo ( org.springframework.cassandra.config.QueryOptions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryOptions org.springframework.cassandra.config.QueryOptions = new QueryOptions ( ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getQueryOptions ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getQueryOptions ( ) ) . isNotEqualTo ( org.springframework.cassandra.config.QueryOptions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AuthProvider org.springframework.cassandra.config.AuthProvider = new PlainTextAuthProvider ( STRING , STRING ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setAuthProvider ( org.springframework.cassandra.config.AuthProvider ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getProtocolOptions ( ) . getAuthProvider ( ) ) . isEqualTo ( org.springframework.cassandra.config.AuthProvider ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AuthProvider org.springframework.cassandra.config.AuthProvider = new PlainTextAuthProvider ( STRING , STRING ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setAuthProvider ( org.springframework.cassandra.config.AuthProvider ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; AuthProvider org.springframework.cassandra.config.AuthProvider = org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getProtocolOptions ( ) . getAuthProvider ( ) ; assertThat ( org.springframework.cassandra.config.AuthProvider ) . isEqualTo ( org.springframework.cassandra.config.AuthProvider ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setUsername ( STRING ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setPassword ( STRING ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; AuthProvider org.springframework.cassandra.config.AuthProvider = org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getProtocolOptions ( ) . getAuthProvider ( ) ; assertThat ( org.springframework.cassandra.config.AuthProvider ) . isNotNull ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.cassandra.config.AuthProvider , STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.cassandra.config.AuthProvider , STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LoadBalancingPolicy org.springframework.cassandra.config.LoadBalancingPolicy = new RoundRobinPolicy ( ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setLoadBalancingPolicy ( org.springframework.cassandra.config.LoadBalancingPolicy ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getPolicies ( ) . getLoadBalancingPolicy ( ) ) . isEqualTo ( org.springframework.cassandra.config.LoadBalancingPolicy ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReconnectionPolicy org.springframework.cassandra.config.ReconnectionPolicy = new ExponentialReconnectionPolicy ( NUMBER , NUMBER ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setReconnectionPolicy ( org.springframework.cassandra.config.ReconnectionPolicy ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getPolicies ( ) . getReconnectionPolicy ( ) ) . isEqualTo ( org.springframework.cassandra.config.ReconnectionPolicy ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setProtocolVersion ( ProtocolVersion . V2 ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getProtocolOptions ( ) ) . extracting ( STRING ) . contains ( ProtocolVersion . V2 ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SSLOptions org.springframework.cassandra.config.SSLOptions = JdkSSLOptions . builder ( ) . build ( ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setSslEnabled ( true ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setSslOptions ( org.springframework.cassandra.config.SSLOptions ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getProtocolOptions ( ) . getSSLOptions ( ) ) . isEqualTo ( org.springframework.cassandra.config.SSLOptions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setMetricsEnabled ( false ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getMetricsOptions ( ) . isEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setJmxReportingEnabled ( false ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getMetricsOptions ( ) . isJMXReportingEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClusterBuilderConfigurer org.springframework.cassandra.config.ClusterBuilderConfigurer = mock ( ClusterBuilderConfigurer .class ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setClusterBuilderConfigurer ( org.springframework.cassandra.config.ClusterBuilderConfigurer ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; verify ( org.springframework.cassandra.config.ClusterBuilderConfigurer , times ( NUMBER ) ) . configure ( isA ( Cluster . Cluster .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AddressTranslator org.springframework.cassandra.config.AddressTranslator = mock ( AddressTranslator .class ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setAddressTranslator ( org.springframework.cassandra.config.AddressTranslator ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Policies ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getAddressTranslator ( ) ) . isEqualTo ( org.springframework.cassandra.config.AddressTranslator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Cluster . Cluster Cluster.Builder = mock ( Cluster . Cluster .class ) ; when ( Cluster.Builder . addContactPoints ( Matchers .< java.lang.String [] > anyVararg ( ) ) ) . thenReturn ( Cluster.Builder ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) { @ java.lang.Override Cluster . Cluster.Builder Cluster.Builder ( ) { return Cluster.Builder ; } } ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setBeanName ( STRING ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setClusterName ( STRING ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; verify ( Cluster.Builder , times ( NUMBER ) ) . withClusterName ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override Cluster . Cluster.Builder Cluster.Builder ( ) { return Cluster.Builder ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Cluster . Cluster Cluster.Builder = mock ( Cluster . Cluster .class ) ; when ( Cluster.Builder . addContactPoints ( Matchers .< java.lang.String [] > anyVararg ( ) ) ) . thenReturn ( Cluster.Builder ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) { @ java.lang.Override Cluster . Cluster.Builder Cluster.Builder ( ) { return Cluster.Builder ; } } ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setBeanName ( STRING ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setClusterName ( STRING ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; verify ( Cluster.Builder , times ( NUMBER ) ) . withClusterName ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override Cluster . Cluster.Builder Cluster.Builder ( ) { return Cluster.Builder ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setMaxSchemaAgreementWaitSeconds ( NUMBER ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.ProtocolOptions ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getMaxSchemaAgreementWaitSeconds ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpeculativeExecutionPolicy org.springframework.cassandra.config.SpeculativeExecutionPolicy = mock ( SpeculativeExecutionPolicy .class ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setSpeculativeExecutionPolicy ( org.springframework.cassandra.config.SpeculativeExecutionPolicy ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Policies ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getSpeculativeExecutionPolicy ( ) ) . isEqualTo ( org.springframework.cassandra.config.SpeculativeExecutionPolicy ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TimestampGenerator org.springframework.cassandra.config.TimestampGenerator = mock ( TimestampGenerator .class ) ; CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean = new CassandraCqlClusterFactoryBean ( ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . setTimestampGenerator ( org.springframework.cassandra.config.TimestampGenerator ) ; org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.Policies ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getTimestampGenerator ( ) ) . isEqualTo ( org.springframework.cassandra.config.TimestampGenerator ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.config.Policies org.springframework.cassandra.config.Policies ( CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) throws java.lang.Exception { return org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getPolicies ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.config.ProtocolOptions org.springframework.cassandra.config.ProtocolOptions ( CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) throws java.lang.Exception { return org.springframework.cassandra.config.Configuration ( org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) . getProtocolOptions ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.config.Configuration org.springframework.cassandra.config.Configuration ( CassandraCqlClusterFactoryBean org.springframework.cassandra.config.CassandraCqlClusterFactoryBean ) throws java.lang.Exception { return org.springframework.cassandra.config.CassandraCqlClusterFactoryBean . getObject ( ) . getConfiguration ( ) ; }  <METHOD_END>
