<METHOD_START> public void ( Twitter org.springframework.integration.twitter.outbound.Twitter ) { Assert . notNull ( org.springframework.integration.twitter.outbound.Twitter , STRING ) ; this . org.springframework.integration.twitter.outbound.Twitter = org.springframework.integration.twitter.outbound.Twitter ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.twitter.outbound.Expression ) { Assert . notNull ( org.springframework.integration.twitter.outbound.Expression , STRING ) ; this . org.springframework.integration.twitter.outbound.Expression = org.springframework.integration.twitter.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContext org.springframework.integration.twitter.outbound.EvaluationContext ) { this . org.springframework.integration.twitter.outbound.EvaluationContext = org.springframework.integration.twitter.outbound.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.twitter.outbound.Twitter org.springframework.integration.twitter.outbound.Twitter ( ) { return this . org.springframework.integration.twitter.outbound.Twitter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doInit ( ) ; if ( this . org.springframework.integration.twitter.outbound.EvaluationContext == null ) { this . org.springframework.integration.twitter.outbound.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; TypeLocator org.springframework.integration.twitter.outbound.TypeLocator = this . org.springframework.integration.twitter.outbound.EvaluationContext . getTypeLocator ( ) ; if ( org.springframework.integration.twitter.outbound.TypeLocator instanceof StandardTypeLocator ) { ( ( StandardTypeLocator ) org.springframework.integration.twitter.outbound.TypeLocator ) . registerImport ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.twitter.outbound.Message<?> ) { java.lang.Object java.lang.Object ; if ( this . org.springframework.integration.twitter.outbound.Expression != null ) { java.lang.Object = this . org.springframework.integration.twitter.outbound.Expression . getValue ( this . org.springframework.integration.twitter.outbound.EvaluationContext , org.springframework.integration.twitter.outbound.Message<> ) ; } else { java.lang.Object = org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; } Assert . notNull ( java.lang.Object , STRING ) ; SearchParameters org.springframework.integration.twitter.outbound.SearchParameters ; if ( java.lang.Object instanceof SearchParameters ) { org.springframework.integration.twitter.outbound.SearchParameters = ( SearchParameters ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.twitter.outbound.SearchParameters = new SearchParameters ( ( java.lang.String ) java.lang.Object ) . count ( int ) ; } else if ( java.lang.Object instanceof java.util.List ) { java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; Assert . isTrue ( java.util.List<> . int ( ) > NUMBER && java.util.List<> . int ( ) < NUMBER , STRING ) ; Assert . isInstanceOf ( java.lang.String .class , java.util.List<> . get ( NUMBER ) , STRING ) ; org.springframework.integration.twitter.outbound.SearchParameters = new SearchParameters ( ( java.lang.String ) java.util.List<> . get ( NUMBER ) ) ; if ( java.util.List<> . int ( ) > NUMBER ) { Assert . isInstanceOf ( java.lang.Number .class , java.util.List<> . get ( NUMBER ) , STRING ) ; org.springframework.integration.twitter.outbound.SearchParameters . count ( ( ( java.lang.Number ) java.util.List<> . get ( NUMBER ) ) . int ( ) ) ; if ( java.util.List<> . int ( ) > NUMBER ) { Assert . isInstanceOf ( java.lang.Number .class , java.util.List<> . get ( NUMBER ) , STRING ) ; org.springframework.integration.twitter.outbound.SearchParameters . sinceId ( ( ( java.lang.Number ) java.util.List<> . get ( NUMBER ) ) . long ( ) ) ; } if ( java.util.List<> . int ( ) > NUMBER ) { Assert . isInstanceOf ( java.lang.Number .class , java.util.List<> . get ( NUMBER ) , STRING ) ; org.springframework.integration.twitter.outbound.SearchParameters . maxId ( ( ( java.lang.Number ) java.util.List<> . get ( NUMBER ) ) . long ( ) ) ; } } } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } SearchResults org.springframework.integration.twitter.outbound.SearchResults = this . org.springframework.integration.twitter.outbound.Twitter ( ) . searchOperations ( ) . search ( org.springframework.integration.twitter.outbound.SearchParameters ) ; if ( org.springframework.integration.twitter.outbound.SearchResults != null ) { java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = ( org.springframework.integration.twitter.outbound.SearchResults . getTweets ( ) != null ? org.springframework.integration.twitter.outbound.SearchResults . getTweets ( ) : java.util.Collections .< Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> ( ) ) ; return this . getMessageBuilderFactory ( ) . withPayload ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> ) . setHeader ( TwitterHeaders . SEARCH_METADATA , org.springframework.integration.twitter.outbound.SearchResults . getSearchMetadata ( ) ) ; } else { return null ; } }  <METHOD_END>
