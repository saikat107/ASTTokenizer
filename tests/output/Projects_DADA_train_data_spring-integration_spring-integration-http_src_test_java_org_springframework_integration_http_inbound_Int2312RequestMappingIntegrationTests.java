<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setRequestURI ( STRING ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; assertEquals ( java.lang.String , org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; assertEquals ( java.lang.String , org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; org.springframework.integration.http.inbound.MockHttpServletRequest . setRequestURI ( java.lang.String ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; final java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setParameters ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; final Cookie org.springframework.integration.http.inbound.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setCookies ( org.springframework.integration.http.inbound.Cookie ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , true ) ; final RequestAttributes org.springframework.integration.http.inbound.RequestAttributes = new ServletRequestAttributes ( org.springframework.integration.http.inbound.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.integration.http.inbound.RequestAttributes ) ; this . org.springframework.integration.http.inbound.SubscribableChannel . subscribe ( message -> { MessageHeaders headers = message . getHeaders ( ) ; assertEquals ( attributes , headers . get ( STRING ) ) ; Object requestParams = headers . get ( STRING ) ; assertNotNull ( requestParams ) ; assertEquals ( params , ( ( MultiValueMap < String , String > ) requestParams ) . toSingleValueMap ( ) ) ; Object matrixVariables = headers . get ( STRING ) ; assertThat ( matrixVariables , Matchers . instanceOf ( Map .class ) ) ; Object value = ( ( Map < ? , ? > ) matrixVariables ) . get ( STRING ) ; assertThat ( value , Matchers . instanceOf ( MultiValueMap .class ) ) ; assertEquals ( STRING , ( ( MultiValueMap < String , ? > ) value ) . getFirst ( STRING ) ) ; assertEquals ( STRING , ( ( MultiValueMap < String , ? > ) value ) . getFirst ( STRING ) ) ; Object requestHeaders = headers . get ( STRING ) ; assertNotNull ( requestParams ) ; assertEquals ( MediaType . TEXT_PLAIN , ( ( HttpHeaders ) requestHeaders ) . getContentType ( ) ) ; Map < String , Cookie > cookies = ( Map < String , Cookie > ) headers . get ( STRING ) ; assertEquals ( NUMBER , cookies . size ( ) ) ; Cookie foo = cookies . get ( STRING ) ; assertNotNull ( foo ) ; assertEquals ( cookie , foo ) ; } ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; final java.lang.String java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] . java.lang.String ( ) , java.lang.String ) ; RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.Object java.lang.Object = null ; try { java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof UnsatisfiedServletRequestParameterException ) ; } org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addParameter ( STRING , STRING ) ; java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; java.lang.String java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addParameter ( STRING , STRING ) ; java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; java.lang.String java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; assertEquals ( java.util.Collections . java.util.Set ( MediaType . APPLICATION_XML ) , org.springframework.integration.http.inbound.MockHttpServletRequest . getAttribute ( HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE ) ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; java.lang.String java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.lang.Object = this . org.springframework.integration.http.inbound.HandlerMapping . getHandler ( org.springframework.integration.http.inbound.MockHttpServletRequest ) . getHandler ( ) ; assertNull ( STRING , org.springframework.integration.http.inbound.MockHttpServletRequest . getAttribute ( HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE ) ) ; org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.integration.http.inbound.HandlerAdapter . handle ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse , java.lang.Object ) ; java.lang.String = org.springframework.integration.http.inbound.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
