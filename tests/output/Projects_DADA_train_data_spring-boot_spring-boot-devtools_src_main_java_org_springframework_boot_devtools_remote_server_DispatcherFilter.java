<METHOD_START> public void ( Dispatcher org.springframework.boot.devtools.remote.server.Dispatcher ) { Assert . notNull ( org.springframework.boot.devtools.remote.server.Dispatcher , STRING ) ; this . org.springframework.boot.devtools.remote.server.Dispatcher = org.springframework.boot.devtools.remote.server.Dispatcher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FilterConfig org.springframework.boot.devtools.remote.server.FilterConfig ) throws org.springframework.boot.devtools.remote.server.ServletException {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.devtools.remote.server.ServletRequest , ServletResponse org.springframework.boot.devtools.remote.server.ServletResponse , FilterChain org.springframework.boot.devtools.remote.server.FilterChain ) throws java.io.IOException , org.springframework.boot.devtools.remote.server.ServletException { if ( org.springframework.boot.devtools.remote.server.ServletRequest instanceof HttpServletRequest && org.springframework.boot.devtools.remote.server.ServletResponse instanceof HttpServletResponse ) { void ( ( HttpServletRequest ) org.springframework.boot.devtools.remote.server.ServletRequest , ( HttpServletResponse ) org.springframework.boot.devtools.remote.server.ServletResponse , org.springframework.boot.devtools.remote.server.FilterChain ) ; } else { org.springframework.boot.devtools.remote.server.FilterChain . doFilter ( org.springframework.boot.devtools.remote.server.ServletRequest , org.springframework.boot.devtools.remote.server.ServletResponse ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.boot.devtools.remote.server.HttpServletRequest , HttpServletResponse org.springframework.boot.devtools.remote.server.HttpServletResponse , FilterChain org.springframework.boot.devtools.remote.server.FilterChain ) throws java.io.IOException , org.springframework.boot.devtools.remote.server.ServletException { ServerHttpRequest org.springframework.boot.devtools.remote.server.ServerHttpRequest = new ServletServerHttpRequest ( org.springframework.boot.devtools.remote.server.HttpServletRequest ) ; ServerHttpResponse org.springframework.boot.devtools.remote.server.ServerHttpResponse = new ServletServerHttpResponse ( org.springframework.boot.devtools.remote.server.HttpServletResponse ) ; if ( ! this . org.springframework.boot.devtools.remote.server.Dispatcher . handle ( org.springframework.boot.devtools.remote.server.ServerHttpRequest , org.springframework.boot.devtools.remote.server.ServerHttpResponse ) ) { org.springframework.boot.devtools.remote.server.FilterChain . doFilter ( org.springframework.boot.devtools.remote.server.HttpServletRequest , org.springframework.boot.devtools.remote.server.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
