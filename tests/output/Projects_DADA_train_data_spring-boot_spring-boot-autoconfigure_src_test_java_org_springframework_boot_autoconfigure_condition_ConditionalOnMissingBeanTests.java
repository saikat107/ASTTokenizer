<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FooConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnBeanNameConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnBeanNameConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FooConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FooConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnBeanNameAndTypeConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FooConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.HierarchyConsidered .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsLocalBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FooConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.HierarchyNotConsidered .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsLocalBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ImpliedOnBeanMethod .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FooConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnAnnotationConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FooConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnAnnotationConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FactoryBeanXmlConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FactoryBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ComponentScannedFactoryBeanBeanMethodConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FactoryBeanWithBeanMethodArgumentsConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConcreteFactoryBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.UnhelpfulFactoryBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . values ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.RegisteredFactoryBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.NonspecificFactoryBeanClassAttributeConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.NonspecificFactoryBeanStringAttributeConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.FactoryBeanXmlConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnFactoryBean .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnIgnoredSubclass .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConditionalOnIgnoredSubclassByName .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBeanConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnBeanInAncestorsConfiguration .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) ) . hasSize ( NUMBER ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnBeanInAncestorsConfiguration .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . setParent ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ConcreteFactoryBeanConfiguration .class , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.OnAnnotationWithFactoryBeanConfiguration .class ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( search = SearchStrategy . ANCESTORS ) public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.condition.FactoryBean<org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean> < org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean > org.springframework.boot.autoconfigure.condition.FactoryBean<org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean> ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleFactoryBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.condition.FactoryBean<org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean> < org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean > org.springframework.boot.autoconfigure.condition.FactoryBean<org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean> ( @ Value ( STRING ) java.lang.String java.lang.String ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleFactoryBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleFactoryBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleFactoryBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleFactoryBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) public org.springframework.boot.autoconfigure.condition.FactoryBean org.springframework.boot.autoconfigure.condition.FactoryBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleFactoryBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.boot.autoconfigure.condition.AnnotationMetadata , BeanDefinitionRegistry org.springframework.boot.autoconfigure.condition.BeanDefinitionRegistry ) { BeanDefinitionBuilder org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.NonspecificFactoryBean .class ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . addConstructorArgValue ( STRING ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . getBeanDefinition ( ) . setAttribute ( OnBeanCondition . FACTORY_BEAN_OBJECT_TYPE , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionRegistry . registerBeanDefinition ( STRING , org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.boot.autoconfigure.condition.AnnotationMetadata , BeanDefinitionRegistry org.springframework.boot.autoconfigure.condition.BeanDefinitionRegistry ) { BeanDefinitionBuilder org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.NonspecificFactoryBean .class ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . addConstructorArgValue ( STRING ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . getBeanDefinition ( ) . setAttribute ( OnBeanCondition . FACTORY_BEAN_OBJECT_TYPE , org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class . java.lang.String ( ) ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionRegistry . registerBeanDefinition ( STRING , org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.boot.autoconfigure.condition.AnnotationMetadata , BeanDefinitionRegistry org.springframework.boot.autoconfigure.condition.BeanDefinitionRegistry ) { BeanDefinitionBuilder org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleFactoryBean .class ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . addConstructorArgValue ( STRING ) ; org.springframework.boot.autoconfigure.condition.BeanDefinitionRegistry . registerBeanDefinition ( STRING , org.springframework.boot.autoconfigure.condition.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ) public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( value = org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class , ignored = org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean .class ) public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( value = org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class , ignoredType = STRING ) public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . state ( ! java.lang.String . boolean ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) java.lang.Exception { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . state ( ! java.lang.String . boolean ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( ) java.lang.Exception { return new org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.ExampleBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
