<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultLockRegistry ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultLockRegistry ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LockRegistry org.springframework.integration.support.locks.LockRegistry = new DefaultLockRegistry ( NUMBER ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.support.locks.LockRegistry . obtain ( NUMBER ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.support.locks.LockRegistry . obtain ( STRING ) ; assertSame ( java.util.concurrent.locks.Lock , java.util.concurrent.locks.Lock ) ; assertSame ( java.util.concurrent.locks.Lock , java.util.concurrent.locks.Lock ) ; assertSame ( java.util.concurrent.locks.Lock , java.util.concurrent.locks.Lock ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LockRegistry org.springframework.integration.support.locks.LockRegistry = new DefaultLockRegistry ( ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; assertSame ( java.util.concurrent.locks.Lock , java.util.concurrent.locks.Lock ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LockRegistry org.springframework.integration.support.locks.LockRegistry = new DefaultLockRegistry ( ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; assertNotSame ( java.util.concurrent.locks.Lock , java.util.concurrent.locks.Lock ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LockRegistry org.springframework.integration.support.locks.LockRegistry = new DefaultLockRegistry ( NUMBER ) ; java.util.concurrent.locks.Lock [] java.util.concurrent.locks.Lock[] = new java.util.concurrent.locks.Lock [ NUMBER ] ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { if ( int != int ) { assertNotSame ( java.util.concurrent.locks.Lock[] [ int ] , java.util.concurrent.locks.Lock[] [ int ] ) ; } } } java.util.concurrent.locks.Lock [] java.util.concurrent.locks.Lock[] = new java.util.concurrent.locks.Lock [ NUMBER ] ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; java.util.concurrent.locks.Lock[] [ NUMBER ] = org.springframework.integration.support.locks.LockRegistry . obtain ( new java.lang.Object ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; assertSame ( java.util.concurrent.locks.Lock[] [ NUMBER ] , java.util.concurrent.locks.Lock[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
