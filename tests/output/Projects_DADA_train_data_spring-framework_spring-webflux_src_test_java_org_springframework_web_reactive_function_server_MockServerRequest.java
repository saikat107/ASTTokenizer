<METHOD_START> private void ( HttpMethod org.springframework.web.reactive.function.server.HttpMethod , java.net.URI java.net.URI , org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders , java.lang.Object java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , WebSession org.springframework.web.reactive.function.server.WebSession ) { this . org.springframework.web.reactive.function.server.HttpMethod = org.springframework.web.reactive.function.server.HttpMethod ; this . java.net.URI = java.net.URI ; this . org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders = org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders ; this . java.lang.Object = java.lang.Object ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; this . org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; this . org.springframework.web.reactive.function.server.WebSession = org.springframework.web.reactive.function.server.WebSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.HttpMethod org.springframework.web.reactive.function.server.HttpMethod ( ) { return this . org.springframework.web.reactive.function.server.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Headers org.springframework.web.reactive.function.server.Headers ( ) { return this . org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < S > S S ( BodyExtractor < S , ? super ServerHttpRequest > org.springframework.web.reactive.function.server.BodyExtractor<S,? super org.springframework.web.reactive.function.server.ServerHttpRequest> ) { return ( S ) this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < S > S S ( BodyExtractor < S , ? super ServerHttpRequest > org.springframework.web.reactive.function.server.BodyExtractor<S,? super org.springframework.web.reactive.function.server.ServerHttpRequest> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return ( S ) this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < S > org.springframework.web.reactive.function.server.Mono<S> < S > org.springframework.web.reactive.function.server.Mono<S> ( java.lang.Class<? extends S> < ? extends S > java.lang.Class<? extends S> ) { return ( Mono < S > ) this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < S > org.springframework.web.reactive.function.server.Flux<S> < S > org.springframework.web.reactive.function.server.Flux<S> ( java.lang.Class<? extends S> < ? extends S > java.lang.Class<? extends S> ) { return ( Flux < S > ) this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < S > java.util.Optional<S> < S > java.util.Optional<S> ( java.lang.String java.lang.String ) { return java.util.Optional . java.util.Optional<S> ( ( S ) this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { return java.util.Collections . java.util.List ( this . org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( this . java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.WebSession> < WebSession > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.WebSession> ( ) { return Mono . justOrEmpty ( this . org.springframework.web.reactive.function.server.WebSession ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( ) { return new org.springframework.web.reactive.function.server.MockServerRequest.BuilderImpl ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( HttpMethod org.springframework.web.reactive.function.server.HttpMethod );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.net.URI java.net.URI );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( WebSession org.springframework.web.reactive.function.server.WebSession );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( HttpMethod org.springframework.web.reactive.function.server.HttpMethod ) { Assert . notNull ( org.springframework.web.reactive.function.server.HttpMethod , STRING ) ; this . org.springframework.web.reactive.function.server.HttpMethod = org.springframework.web.reactive.function.server.HttpMethod ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.net.URI java.net.URI ) { Assert . notNull ( java.net.URI , STRING ) ; this . java.net.URI = java.net.URI ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders . void ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ) { Assert . notNull ( org.springframework.web.reactive.function.server.HttpHeaders , STRING ) ; this . org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders = new org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders ( org.springframework.web.reactive.function.server.HttpHeaders ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> ) { Assert . notNull ( org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> , STRING ) ; this . org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest.Builder org.springframework.web.reactive.function.server.MockServerRequest.Builder ( WebSession org.springframework.web.reactive.function.server.WebSession ) { Assert . notNull ( org.springframework.web.reactive.function.server.WebSession , STRING ) ; this . org.springframework.web.reactive.function.server.WebSession = org.springframework.web.reactive.function.server.WebSession ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; return new org.springframework.web.reactive.function.server.MockServerRequest ( this . org.springframework.web.reactive.function.server.HttpMethod , this . java.net.URI , this . org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders , this . java.lang.Object , this . java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> , this . java.util.Map<java.lang.String,java.lang.String> , this . org.springframework.web.reactive.function.server.WebSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest ( ) { return new org.springframework.web.reactive.function.server.MockServerRequest ( this . org.springframework.web.reactive.function.server.HttpMethod , this . java.net.URI , this . org.springframework.web.reactive.function.server.MockServerRequest.MockHeaders , null , this . java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.reactive.function.server.MultiValueMap<java.lang.String,java.lang.String> , this . java.util.Map<java.lang.String,java.lang.String> , this . org.springframework.web.reactive.function.server.WebSession ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ) { this . org.springframework.web.reactive.function.server.HttpHeaders = org.springframework.web.reactive.function.server.HttpHeaders ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.server.HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ( ) { return this . org.springframework.web.reactive.function.server.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.web.reactive.function.server.HttpHeaders . add ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.server.MediaType> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getAccept ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getAcceptCharset ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.util.Locale.LanguageRange> < java.util.Locale . java.util.Locale.LanguageRange > java.util.List<java.util.Locale.LanguageRange> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getAcceptLanguage ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.OptionalLong java.util.OptionalLong ( ) { return java.util.OptionalLong ( org.springframework.web.reactive.function.server.HttpHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.Optional<org.springframework.web.reactive.function.server.MediaType> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.HttpHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getHost ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.server.HttpRange> < HttpRange > java.util.List<org.springframework.web.reactive.function.server.HttpRange> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getRange ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.reactive.function.server.HttpHeaders ( ) . get ( java.lang.String ) ; return java.util.List<java.lang.String> != null ? java.util.List<java.lang.String> : java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ( ) { return HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.reactive.function.server.HttpHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.OptionalLong java.util.OptionalLong ( long long ) { return long != - NUMBER ? java.util.OptionalLong . java.util.OptionalLong ( long ) : java.util.OptionalLong . java.util.OptionalLong ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.time.ZonedDateTime> < java.time.ZonedDateTime > java.util.Optional<java.time.ZonedDateTime> ( long long ) { if ( long != - NUMBER ) { java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( long ) ; return java.util.Optional . java.util.Optional<java.time.ZonedDateTime> ( java.time.ZonedDateTime . java.time.ZonedDateTime ( java.time.Instant , java.time.ZoneId . java.time.ZoneId ( STRING ) ) ) ; } else { return java.util.Optional . java.util.Optional<java.time.ZonedDateTime> ( ) ; } }  <METHOD_END>
