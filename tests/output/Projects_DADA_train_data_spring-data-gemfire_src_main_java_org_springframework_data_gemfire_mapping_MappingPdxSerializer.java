<METHOD_START> public static org.springframework.data.gemfire.mapping.MappingPdxSerializer org.springframework.data.gemfire.mapping.MappingPdxSerializer ( GemfireMappingContext org.springframework.data.gemfire.mapping.GemfireMappingContext , ConversionService org.springframework.data.gemfire.mapping.ConversionService ) { org.springframework.data.gemfire.mapping.GemfireMappingContext = ( org.springframework.data.gemfire.mapping.GemfireMappingContext != null ? org.springframework.data.gemfire.mapping.GemfireMappingContext : new GemfireMappingContext ( ) ) ; org.springframework.data.gemfire.mapping.ConversionService = ( org.springframework.data.gemfire.mapping.ConversionService != null ? org.springframework.data.gemfire.mapping.ConversionService : new DefaultConversionService ( ) ) ; return new org.springframework.data.gemfire.mapping.MappingPdxSerializer ( org.springframework.data.gemfire.mapping.GemfireMappingContext , org.springframework.data.gemfire.mapping.ConversionService ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( new GemfireMappingContext ( ) , new DefaultConversionService ( ) ); }  <METHOD_END>
<METHOD_START> public void ( GemfireMappingContext org.springframework.data.gemfire.mapping.GemfireMappingContext , ConversionService org.springframework.data.gemfire.mapping.ConversionService ) { Assert . notNull ( org.springframework.data.gemfire.mapping.GemfireMappingContext , STRING ) ; Assert . notNull ( org.springframework.data.gemfire.mapping.ConversionService , STRING ) ; this . org.springframework.data.gemfire.mapping.GemfireMappingContext = org.springframework.data.gemfire.mapping.GemfireMappingContext ; this . org.springframework.data.gemfire.mapping.ConversionService = org.springframework.data.gemfire.mapping.ConversionService ; this . org.springframework.data.gemfire.mapping.EntityInstantiators = new EntityInstantiators ( ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> = java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; this . org.springframework.data.gemfire.mapping.SpELContext = new SpELContext ( PdxReaderPropertyAccessor . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.gemfire.mapping.ApplicationContext ) throws org.springframework.data.gemfire.mapping.BeansException { this . org.springframework.data.gemfire.mapping.SpELContext = new SpELContext ( this . org.springframework.data.gemfire.mapping.SpELContext , org.springframework.data.gemfire.mapping.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.mapping.ConversionService org.springframework.data.gemfire.mapping.ConversionService ( ) { return org.springframework.data.gemfire.mapping.ConversionService ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> < java.lang.Class<?> < ? > , PdxSerializer > java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> ) { Assert . notNull ( java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> , STRING ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> = java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> < java.lang.Class<?> < ? > , PdxSerializer > java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> ( ) { return java.util.Collections . java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> ( java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.EntityInstantiator> < java.lang.Class<?> < ? > , EntityInstantiator > java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.EntityInstantiator> ) { Assert . notNull ( java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.EntityInstantiator> , STRING ) ; this . org.springframework.data.gemfire.mapping.EntityInstantiators = new EntityInstantiators ( java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.EntityInstantiator> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.mapping.EntityInstantiators org.springframework.data.gemfire.mapping.EntityInstantiators ( ) { return org.springframework.data.gemfire.mapping.EntityInstantiators ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.mapping.GemfireMappingContext org.springframework.data.gemfire.mapping.GemfireMappingContext ( ) { return org.springframework.data.gemfire.mapping.GemfireMappingContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , PdxReader org.springframework.data.gemfire.mapping.PdxReader ) { GemfirePersistentEntity < ? > org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> = org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> ( java.lang.Class<> ) ; java.lang.Object java.lang.Object = org.springframework.data.gemfire.mapping.EntityInstantiator ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> ) . createInstance ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> , new PersistentEntityParameterValueProvider <> ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> , new GemfirePropertyValueProvider ( org.springframework.data.gemfire.mapping.PdxReader ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; PersistentPropertyAccessor org.springframework.data.gemfire.mapping.PersistentPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> . getPropertyAccessor ( java.lang.Object ) , org.springframework.data.gemfire.mapping.ConversionService ( ) ) ; org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> . doWithProperties ( ( PropertyHandler < GemfirePersistentProperty > ) persistentProperty -> { if ( ! entity . isConstructorArgument ( persistentProperty ) ) { PdxSerializer customSerializer = getCustomSerializer ( persistentProperty . getType ( ) ) ; Object value = null ; try { if ( log . isDebugEnabled ( ) ) { log . debug ( String . format ( STRING , persistentProperty . getName ( ) , instance , type , ( customSerializer != null ? String . format ( STRING , customSerializer ) : STRING ) ) ) ; } value = ( customSerializer != null ? customSerializer . fromData ( persistentProperty . getType ( ) , reader ) : reader . readField ( persistentProperty . getName ( ) ) ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( String . format ( STRING , value ) ) ; } propertyAccessor . setProperty ( persistentProperty , Optional . ofNullable ( value ) ) ; } catch ( Exception e ) { throw new MappingException ( String . format ( STRING , value , persistentProperty . getName ( ) , type , ( customSerializer != null ? String . format ( STRING , customSerializer ) : STRING ) ) , e ) ; } } } ) ; return org.springframework.data.gemfire.mapping.PersistentPropertyAccessor . getBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( java.lang.Object java.lang.Object , PdxWriter org.springframework.data.gemfire.mapping.PdxWriter ) { GemfirePersistentEntity < ? > org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> = org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> ( java.lang.Object ) ; PersistentPropertyAccessor org.springframework.data.gemfire.mapping.PersistentPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> . getPropertyAccessor ( java.lang.Object ) , org.springframework.data.gemfire.mapping.ConversionService ( ) ) ; org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> . doWithProperties ( ( PropertyHandler < GemfirePersistentProperty > ) persistentProperty -> { PdxSerializer customSerializer = getCustomSerializer ( persistentProperty . getType ( ) ) ; Optional < Object > propertyValue = null ; try { propertyValue = propertyAccessor . getProperty ( persistentProperty ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( String . format ( STRING , persistentProperty . getName ( ) , propertyValue , value . getClass ( ) , ( customSerializer != null ? String . format ( STRING , customSerializer ) : STRING ) ) ) ; } if ( customSerializer != null ) { customSerializer . toData ( propertyValue . orElse ( null ) , writer ) ; } else { writer . writeField ( persistentProperty . getName ( ) , propertyValue . orElse ( null ) , ( Class < Object > ) persistentProperty . getType ( ) ) ; } } catch ( Exception e ) { Object resolvedPropertyValue = ( propertyValue != null ? propertyValue . orElse ( null ) : null ) ; throw new MappingException ( String . format ( STRING , persistentProperty . getName ( ) , resolvedPropertyValue , value . getClass ( ) , ( customSerializer != null ? String . format ( STRING , customSerializer . getClass ( ) . getName ( ) ) : STRING ) ) , e ) ; } } ) ; java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> < GemfirePersistentProperty > java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> = org.springframework.data.gemfire.mapping.GemfirePersistentEntity<> . getIdProperty ( ) ; java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> . ifPresent ( gemfirePersistentProperty -> writer . markIdentityField ( gemfirePersistentProperty . getName ( ) ) ) ; return true ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.mapping.PdxSerializer org.springframework.data.gemfire.mapping.PdxSerializer ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.gemfire.mapping.PdxSerializer> ( ) . get ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.mapping.EntityInstantiator org.springframework.data.gemfire.mapping.EntityInstantiator ( PersistentEntity org.springframework.data.gemfire.mapping.PersistentEntity ) { return org.springframework.data.gemfire.mapping.EntityInstantiators ( ) . getInstantiatorFor ( org.springframework.data.gemfire.mapping.PersistentEntity ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> < ? > org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> ( java.lang.Object java.lang.Object ) { return org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> < ? > org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.gemfire.mapping.GemfireMappingContext ( ) . getPersistentEntity ( java.lang.Class<> ) . orElseThrow ( ( ) newIllegalArgumentException ( STRING , entityType ) ) ; }  <METHOD_END>
