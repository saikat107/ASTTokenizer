<METHOD_START> public void ( T T ) { Assert . notNull ( T , STRING ) ; this . T = T ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.data.repository.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.repository.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( new ConvertiblePair ( java.lang.Object .class , java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor ) { return org.springframework.data.repository.support.Repositories . hasRepositoryFor ( org.springframework.data.repository.support.TypeDescriptor . getType ( ) ) ? org.springframework.data.repository.support.DomainClassConverter<T>.ToEntityConverter . java.lang.Object ( java.lang.Object , org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) : org.springframework.data.repository.support.DomainClassConverter<T>.ToIdConverter . java.lang.Object ( java.lang.Object , org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.data.repository.support.TypeDescriptor , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor ) { return org.springframework.data.repository.support.Repositories . hasRepositoryFor ( org.springframework.data.repository.support.TypeDescriptor . getType ( ) ) ? org.springframework.data.repository.support.DomainClassConverter<T>.ToEntityConverter . boolean ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) : org.springframework.data.repository.support.DomainClassConverter<T>.ToIdConverter . boolean ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.data.repository.support.ApplicationContext ) { this . org.springframework.data.repository.support.Repositories = new Repositories ( org.springframework.data.repository.support.ApplicationContext ) ; this . org.springframework.data.repository.support.DomainClassConverter<T>.ToEntityConverter = new org.springframework.data.repository.support.DomainClassConverter<T>.ToEntityConverter ( this . org.springframework.data.repository.support.Repositories , this . T ) ; this . T . addConverter ( this . org.springframework.data.repository.support.DomainClassConverter<T>.ToEntityConverter ) ; this . org.springframework.data.repository.support.DomainClassConverter<T>.ToIdConverter = new org.springframework.data.repository.support.DomainClassConverter<T>.ToIdConverter ( ) ; this . T . addConverter ( this . org.springframework.data.repository.support.DomainClassConverter<T>.ToIdConverter ) ; }  <METHOD_END>
<METHOD_START> public void ( Repositories org.springframework.data.repository.support.Repositories , ConversionService org.springframework.data.repository.support.ConversionService ) { this . org.springframework.data.repository.support.RepositoryInvokerFactory = new DefaultRepositoryInvokerFactory ( org.springframework.data.repository.support.Repositories , org.springframework.data.repository.support.ConversionService ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.repository.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.repository.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( new ConvertiblePair ( java.lang.Object .class , java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor ) { if ( java.lang.Object == null || ! StringUtils . hasText ( java.lang.Object . java.lang.String ( ) ) ) { return null ; } if ( org.springframework.data.repository.support.TypeDescriptor . equals ( org.springframework.data.repository.support.TypeDescriptor ) ) { return java.lang.Object ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.support.TypeDescriptor . getType ( ) ; RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker = org.springframework.data.repository.support.RepositoryInvokerFactory . getInvokerFor ( java.lang.Class<> ) ; RepositoryInformation org.springframework.data.repository.support.RepositoryInformation = org.springframework.data.repository.support.Repositories . getRequiredRepositoryInformation ( java.lang.Class<> ) ; return org.springframework.data.repository.support.RepositoryInvoker . invokeFindOne ( T . convert ( java.lang.Object , org.springframework.data.repository.support.RepositoryInformation . getIdType ( ) ) ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.data.repository.support.TypeDescriptor , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor ) { if ( org.springframework.data.repository.support.TypeDescriptor . isAssignableTo ( org.springframework.data.repository.support.TypeDescriptor ) ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.support.TypeDescriptor . getType ( ) ; if ( ! org.springframework.data.repository.support.Repositories . hasRepositoryFor ( java.lang.Class<> ) ) { return false ; } java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> < RepositoryInformation > java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> = org.springframework.data.repository.support.Repositories . getRepositoryInformationFor ( java.lang.Class<> ) ; return java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> . map ( it -> { Class < ? > rawIdType = it . getIdType ( ) ; return sourceType . equals ( TypeDescriptor . valueOf ( rawIdType ) ) || conversionService . canConvert ( sourceType . getType ( ) , rawIdType ) ; } ) . orElseThrow ( ( ) new IllegalStateException ( String . format ( STRING , domainType ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.repository.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.repository.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( new ConvertiblePair ( java.lang.Object .class , java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor ) { if ( java.lang.Object == null || ! StringUtils . hasText ( java.lang.Object . java.lang.String ( ) ) ) { return null ; } if ( org.springframework.data.repository.support.TypeDescriptor . equals ( org.springframework.data.repository.support.TypeDescriptor ) ) { return java.lang.Object ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.support.TypeDescriptor . getType ( ) ; EntityInformation < java.lang.Object , ? > org.springframework.data.repository.support.EntityInformation<java.lang.Object,?> = org.springframework.data.repository.support.Repositories . getEntityInformationFor ( java.lang.Class<> ) ; return T . convert ( org.springframework.data.repository.support.EntityInformation<java.lang.Object,> . getId ( java.lang.Object ) , org.springframework.data.repository.support.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.data.repository.support.TypeDescriptor , TypeDescriptor org.springframework.data.repository.support.TypeDescriptor ) { if ( org.springframework.data.repository.support.TypeDescriptor . isAssignableTo ( org.springframework.data.repository.support.TypeDescriptor ) ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.support.TypeDescriptor . getType ( ) ; if ( ! org.springframework.data.repository.support.Repositories . hasRepositoryFor ( java.lang.Class<> ) ) { return false ; } java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> < RepositoryInformation > java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> = org.springframework.data.repository.support.Repositories . getRepositoryInformationFor ( java.lang.Class<> ) ; return java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> . map ( it -> { Class < ? > rawIdType = it . getIdType ( ) ; return targetType . equals ( TypeDescriptor . valueOf ( rawIdType ) ) || conversionService . canConvert ( rawIdType , targetType . getType ( ) ) ; } ) . orElseThrow ( ( ) new IllegalStateException ( String . format ( STRING , domainType ) ) ) ; }  <METHOD_END>
