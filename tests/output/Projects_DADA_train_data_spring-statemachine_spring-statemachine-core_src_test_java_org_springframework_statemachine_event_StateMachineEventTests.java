<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.event.AnnotationConfigApplicationContext org.springframework.statemachine.event.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; org.springframework.statemachine.event.StateMachineEventTests.TestEventListener org.springframework.statemachine.event.StateMachineEventTests.TestEventListener = context . getBean ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener .class ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E2 ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E3 ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E4 ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . EF ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; org.springframework.statemachine.event.StateMachineEventTests.TestEventListener org.springframework.statemachine.event.StateMachineEventTests.TestEventListener = context . getBean ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener org.springframework.statemachine.event.StateMachineEventTests.TestListener = new org.springframework.statemachine.event.StateMachineEventTests.TestListener ( ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . addStateListener ( org.springframework.statemachine.event.StateMachineEventTests.TestListener ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . size ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . get ( NUMBER ) , instanceOf ( OnEventNotAcceptedEvent .class ) ) ; assertThat ( ( ( OnEventNotAcceptedEvent ) org.springframework.statemachine.event.StateMachineEventTests.TestEventListener . java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . get ( NUMBER ) ) . getEvent ( ) . getPayload ( ) , is ( TestEvents . E3 ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config2 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S10 ) ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S12 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener org.springframework.statemachine.event.StateMachineEventTests.TestListener = new org.springframework.statemachine.event.StateMachineEventTests.TestListener ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . addStateListener ( org.springframework.statemachine.event.StateMachineEventTests.TestListener ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener . void ( NUMBER ) ; boolean boolean = org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( boolean , is ( false ) ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener org.springframework.statemachine.event.StateMachineEventTests.TestListener = new org.springframework.statemachine.event.StateMachineEventTests.TestListener ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . addStateListener ( org.springframework.statemachine.event.StateMachineEventTests.TestListener ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener . void ( NUMBER ) ; boolean boolean = org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config4 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener org.springframework.statemachine.event.StateMachineEventTests.TestListener = new org.springframework.statemachine.event.StateMachineEventTests.TestListener ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . addStateListener ( org.springframework.statemachine.event.StateMachineEventTests.TestListener ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener . void ( NUMBER ) ; boolean boolean = org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener org.springframework.statemachine.event.StateMachineEventTests.TestListener = new org.springframework.statemachine.event.StateMachineEventTests.TestListener ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . addStateListener ( org.springframework.statemachine.event.StateMachineEventTests.TestListener ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getExtendedState ( ) . getVariables ( ) . put ( STRING , true ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener . void ( NUMBER ) ; boolean boolean = org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener org.springframework.statemachine.event.StateMachineEventTests.TestListener = new org.springframework.statemachine.event.StateMachineEventTests.TestListener ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . addStateListener ( org.springframework.statemachine.event.StateMachineEventTests.TestListener ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getExtendedState ( ) . getVariables ( ) . put ( STRING , true ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener . void ( NUMBER ) ; boolean boolean = org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S12 ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.StateMachineEventTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener org.springframework.statemachine.event.StateMachineEventTests.TestListener = new org.springframework.statemachine.event.StateMachineEventTests.TestListener ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . addStateListener ( org.springframework.statemachine.event.StateMachineEventTests.TestListener ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S111 ) ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getExtendedState ( ) . getVariables ( ) . put ( STRING , true ) ; org.springframework.statemachine.event.StateMachineEventTests.TestListener . void ( NUMBER ) ; boolean boolean = org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( boolean , is ( true ) ) ; assertThat ( org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 , TestStates . S112 ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.event.StateMachineEventTests.TestListener . java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) . end ( TestStates . SF ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . event ( TestEvents . E4 ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . SF ) . event ( TestEvents . EF ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.event.StateMachineEventTests.TestEventListener org.springframework.statemachine.event.StateMachineEventTests.TestEventListener ( ) { return new org.springframework.statemachine.event.StateMachineEventTests.TestEventListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . and ( ) . withStates ( ) . parent ( TestStates . S1 ) . initial ( TestStates . S10 ) . state ( TestStates . S10 ) . state ( TestStates . S11 ) . state ( TestStates . S12 ) . state ( TestStates . S13 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withExternal ( ) . source ( TestStates . S10 ) . target ( TestStates . S11 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . state ( TestStates . S1 ) . source ( TestStates . S10 ) . target ( TestStates . S12 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . state ( TestStates . S1 ) . source ( TestStates . S10 ) . target ( TestStates . S13 ) . event ( TestEvents . E2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S1 ) . initial ( TestStates . S11 ) . state ( TestStates . S12 ) . and ( ) . withStates ( ) . parent ( TestStates . S11 ) . initial ( TestStates . S111 ) . state ( TestStates . S112 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guardExpression ( STRING ) . and ( ) . withExternal ( ) . source ( TestStates . S11 ) . target ( TestStates . S12 ) . event ( TestEvents . E1 ) . guardExpression ( STRING ) . and ( ) . withExternal ( ) . source ( TestStates . S111 ) . target ( TestStates . S112 ) . event ( TestEvents . E1 ) . guardExpression ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S1 ) . initial ( TestStates . S11 ) . state ( TestStates . S12 ) . and ( ) . withStates ( ) . parent ( TestStates . S11 ) . initial ( TestStates . S111 ) . state ( TestStates . S112 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withExternal ( ) . source ( TestStates . S11 ) . target ( TestStates . S12 ) . event ( TestEvents . E1 ) . guardExpression ( STRING ) . and ( ) . withExternal ( ) . source ( TestStates . S111 ) . target ( TestStates . S112 ) . event ( TestEvents . E1 ) . guardExpression ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEvent org.springframework.statemachine.event.StateMachineEvent ) { if ( org.springframework.statemachine.event.StateMachineEvent instanceof OnStateChangedEvent ) { java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . add ( org.springframework.statemachine.event.StateMachineEvent ) ; java.util.concurrent.CountDownLatch . void ( ) ; } else if ( org.springframework.statemachine.event.StateMachineEvent instanceof OnEventNotAcceptedEvent ) { java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . add ( org.springframework.statemachine.event.StateMachineEvent ) ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> = new java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> < StateMachineEvent > ( ) ; java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . clear ( ) ; java.util.ArrayList<org.springframework.statemachine.event.StateMachineEvent> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < TestEvents > org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents> ) { java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . add ( org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.ArrayList<org.springframework.statemachine.event.Message<org.springframework.statemachine.event.TestEvents>> . clear ( ) ; }  <METHOD_END>
