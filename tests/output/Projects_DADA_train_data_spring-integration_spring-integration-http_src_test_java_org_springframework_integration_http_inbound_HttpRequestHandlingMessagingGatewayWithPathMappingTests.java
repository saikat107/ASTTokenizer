<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( message -> { MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( message ) ; } ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setRequestURI ( STRING ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; RequestMapping org.springframework.integration.http.inbound.RequestMapping = new RequestMapping ( ) ; org.springframework.integration.http.inbound.RequestMapping . setPathPatterns ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestMapping ( org.springframework.integration.http.inbound.RequestMapping ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . doHandleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertThat ( java.lang.Object , instanceOf ( Message .class ) ) ; assertEquals ( STRING , ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( message -> { MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( message ) ; } ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new AntPathMatcher ( ) . extractUriTemplateVariables ( STRING , java.lang.String ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setRequestURI ( java.lang.String ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; RequestMapping org.springframework.integration.http.inbound.RequestMapping = new RequestMapping ( ) ; org.springframework.integration.http.inbound.RequestMapping . setPathPatterns ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestMapping ( org.springframework.integration.http.inbound.RequestMapping ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setPayloadExpression ( org.springframework.integration.http.inbound.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . doHandleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertThat ( java.lang.Object , instanceOf ( Message .class ) ) ; assertEquals ( STRING , ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.http.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.http.inbound.DirectChannel . subscribe ( message -> { MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( message ) ; } ) ; MockHttpServletRequest org.springframework.integration.http.inbound.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.integration.http.inbound.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setParameter ( STRING , STRING ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new AntPathMatcher ( ) . extractUriTemplateVariables ( STRING , java.lang.String ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.http.inbound.MockHttpServletRequest . setRequestURI ( java.lang.String ) ; HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( true ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; RequestMapping org.springframework.integration.http.inbound.RequestMapping = new RequestMapping ( ) ; org.springframework.integration.http.inbound.RequestMapping . setPathPatterns ( STRING ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestMapping ( org.springframework.integration.http.inbound.RequestMapping ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.DirectChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setPayloadExpression ( org.springframework.integration.http.inbound.ExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . doHandleRequest ( org.springframework.integration.http.inbound.MockHttpServletRequest , org.springframework.integration.http.inbound.MockHttpServletResponse ) ; assertThat ( java.lang.Object , instanceOf ( Message .class ) ) ; assertEquals ( STRING , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
