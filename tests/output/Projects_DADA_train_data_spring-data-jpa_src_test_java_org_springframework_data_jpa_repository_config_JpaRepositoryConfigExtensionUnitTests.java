<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RepositoryConfigurationExtension org.springframework.data.jpa.repository.config.RepositoryConfigurationExtension = new JpaRepositoryConfigExtension ( ) ; org.springframework.data.jpa.repository.config.RepositoryConfigurationExtension . registerBeansForRoot ( org.springframework.data.jpa.repository.config.DefaultListableBeanFactory , org.springframework.data.jpa.repository.config.RepositoryConfigurationSource ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.config.DefaultListableBeanFactory . getBeanDefinitionNames ( ) ) ; assertThat ( java.lang.Iterable<java.lang.String> , hasItems ( AnnotationConfigUtils . PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.data.jpa.repository.config.RootBeanDefinition = new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ; java.lang.String java.lang.String = BeanDefinitionReaderUtils . generateBeanName ( org.springframework.data.jpa.repository.config.RootBeanDefinition , org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ) ; org.springframework.data.jpa.repository.config.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.data.jpa.repository.config.RootBeanDefinition ) ; void ( org.springframework.data.jpa.repository.config.DefaultListableBeanFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.data.jpa.repository.config.RootBeanDefinition = new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ; java.lang.String java.lang.String = AnnotationConfigUtils . PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME ; org.springframework.data.jpa.repository.config.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.data.jpa.repository.config.RootBeanDefinition ) ; void ( org.springframework.data.jpa.repository.config.DefaultListableBeanFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.data.jpa.repository.config.ApplicationContext = mock ( ApplicationContext .class ) ; EntityManagerFactory org.springframework.data.jpa.repository.config.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; Metamodel org.springframework.data.jpa.repository.config.Metamodel = mock ( Metamodel .class ) ; ManagedType < ? > org.springframework.data.jpa.repository.config.ManagedType<?> = mock ( ManagedType .class ) ; java.util.Set<org.springframework.data.jpa.repository.config.ManagedType<?>> < ManagedType < ? > > java.util.Set<org.springframework.data.jpa.repository.config.ManagedType<?>> = java.util.Collections .< ManagedType < ? > > java.util.Set<org.springframework.data.jpa.repository.config.ManagedType<?>> ( org.springframework.data.jpa.repository.config.ManagedType<> ) ; when ( org.springframework.data.jpa.repository.config.ApplicationContext . getBeansOfType ( EntityManagerFactory .class ) ) . thenReturn ( java.util.Collections . java.util.Map ( STRING , org.springframework.data.jpa.repository.config.EntityManagerFactory ) ) ; when ( org.springframework.data.jpa.repository.config.EntityManagerFactory . getMetamodel ( ) ) . thenReturn ( org.springframework.data.jpa.repository.config.Metamodel ) ; when ( org.springframework.data.jpa.repository.config.Metamodel . getManagedTypes ( ) ) . thenReturn ( java.util.Set<org.springframework.data.jpa.repository.config.ManagedType<?>> ) ; JpaMetamodelMappingContextFactoryBean org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean = new JpaMetamodelMappingContextFactoryBean ( ) ; org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean . setApplicationContext ( org.springframework.data.jpa.repository.config.ApplicationContext ) ; org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean . createInstance ( ) . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory , java.lang.String java.lang.String ) { RepositoryConfigurationExtension org.springframework.data.jpa.repository.config.RepositoryConfigurationExtension = new JpaRepositoryConfigExtension ( ) ; org.springframework.data.jpa.repository.config.RepositoryConfigurationExtension . registerBeansForRoot ( org.springframework.data.jpa.repository.config.DefaultListableBeanFactory , org.springframework.data.jpa.repository.config.RepositoryConfigurationSource ) ; assertThat ( org.springframework.data.jpa.repository.config.DefaultListableBeanFactory . getBean ( java.lang.String ) , is ( notNullValue ( ) ) ) ; org.springframework.data.jpa.repository.config.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; org.springframework.data.jpa.repository.config.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; }  <METHOD_END>
