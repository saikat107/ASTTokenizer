<METHOD_START> @ BeforeClass public static void void ( ) { Assume . group ( TestGroup . LONG_RUNNING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final int int = NUMBER ; final int int = NUMBER ; final int int = int ( Ignore .class ) ; final int int = int ( Test .class ) - int ; runTestsAndAssertCounters ( new ParallelComputer ( true , true ) , int , int , int , int , int , this . java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return ( int ) java.util.Arrays . java.util.stream.Stream<java.lang.Class<?>> ( this . java.lang.Class<?>[] ) . java.util.stream.Stream ( ReflectionUtils :: getUniqueDeclaredMethods ) . flatMap ( java.util.Arrays :: stream ) . filter ( method -> hasAnnotation ( method , annotationType ) ) . count ( ) ; }  <METHOD_END>
