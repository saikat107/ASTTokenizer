<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { Graph org.springframework.integration.support.management.graph.Graph = this . org.springframework.integration.support.management.graph.IntegrationGraphServer . getGraph ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; ObjectMapper org.springframework.integration.support.management.graph.ObjectMapper = new ObjectMapper ( ) ; org.springframework.integration.support.management.graph.ObjectMapper . enable ( SerializationFeature . INDENT_OUTPUT ) ; org.springframework.integration.support.management.graph.ObjectMapper . writeValue ( java.io.ByteArrayOutputStream , org.springframework.integration.support.management.graph.Graph ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.integration.support.management.graph.ObjectMapper . readValue ( java.io.ByteArrayOutputStream . byte[] ( ) , java.util.Map .class ) ; assertThat ( java.util.Map<,> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; java.util.List<java.util.Map<?,?>> < java.util.Map<?,?> < ? , ? > > java.util.List<java.util.Map<?,?>> = ( java.util.List<java.util.Map<?,?>> < java.util.Map<?,?> < ? , ? > > ) java.util.Map<,> . get ( STRING ) ; assertThat ( java.util.List<java.util.Map<?,?>> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<java.util.Map<?,?>> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; java.util.List<java.util.Map<?,?>> < java.util.Map<?,?> < ? , ? > > java.util.List<java.util.Map<?,?>> = ( java.util.List<java.util.Map<?,?>> < java.util.Map<?,?> < ? , ? > > ) java.util.Map<,> . get ( STRING ) ; assertThat ( java.util.List<java.util.Map<?,?>> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<java.util.Map<?,?>> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.integration.support.management.graph.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.integration.support.management.graph.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.integration.support.management.graph.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.integration.support.management.graph.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; this . org.springframework.integration.support.management.graph.IntegrationGraphServer . rebuild ( ) ; org.springframework.integration.support.management.graph.Graph = this . org.springframework.integration.support.management.graph.IntegrationGraphServer . getGraph ( ) ; java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.integration.support.management.graph.ObjectMapper . enable ( SerializationFeature . INDENT_OUTPUT ) ; org.springframework.integration.support.management.graph.ObjectMapper . writeValue ( java.io.ByteArrayOutputStream , org.springframework.integration.support.management.graph.Graph ) ; java.util.Map<?,?> = org.springframework.integration.support.management.graph.ObjectMapper . readValue ( java.io.ByteArrayOutputStream . byte[] ( ) , java.util.Map .class ) ; assertThat ( java.util.Map<,> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; java.util.List<java.util.Map<?,?>> = ( java.util.List<java.util.Map<?,?>> < java.util.Map<?,?> < ? , ? > > ) java.util.Map<,> . get ( STRING ) ; assertThat ( java.util.List<java.util.Map<?,?>> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<java.util.Map<?,?>> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; java.util.List<java.util.Map<?,?>> = ( java.util.List<java.util.Map<?,?>> < java.util.Map<?,?> < ? , ? > > ) java.util.Map<,> . get ( STRING ) ; assertThat ( java.util.List<java.util.Map<?,?>> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<java.util.Map<?,?>> . int ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.IntegrationGraphServer org.springframework.integration.support.management.graph.IntegrationGraphServer ( ) { IntegrationGraphServer org.springframework.integration.support.management.graph.IntegrationGraphServer = new IntegrationGraphServer ( ) ; org.springframework.integration.support.management.graph.IntegrationGraphServer . setApplicationName ( STRING ) ; return org.springframework.integration.support.management.graph.IntegrationGraphServer ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.MessageProducer org.springframework.integration.support.management.graph.MessageProducer ( ) { MessageProducerSupport org.springframework.integration.support.management.graph.MessageProducerSupport = new MessageProducerSupport ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; org.springframework.integration.support.management.graph.MessageProducerSupport . setOutputChannelName ( STRING ) ; org.springframework.integration.support.management.graph.MessageProducerSupport . setErrorChannelName ( STRING ) ; return org.springframework.integration.support.management.graph.MessageProducerSupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.IntegrationGraphServerTests.Services org.springframework.integration.support.management.graph.IntegrationGraphServerTests.Services ( ) { return new org.springframework.integration.support.management.graph.IntegrationGraphServerTests.Services ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.EventDrivenConsumer org.springframework.integration.support.management.graph.EventDrivenConsumer ( ) { return new EventDrivenConsumer ( org.springframework.integration.support.management.graph.SubscribableChannel ( ) , new org.springframework.integration.support.management.graph.IntegrationGraphServerTests.BareHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.PollingConsumer org.springframework.integration.support.management.graph.PollingConsumer ( ) { PollingConsumer org.springframework.integration.support.management.graph.PollingConsumer = new PollingConsumer ( org.springframework.integration.support.management.graph.PollableChannel ( ) , new org.springframework.integration.support.management.graph.IntegrationGraphServerTests.BareHandler ( ) ) ; org.springframework.integration.support.management.graph.PollingConsumer . setAutoStartup ( false ) ; return org.springframework.integration.support.management.graph.PollingConsumer ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.PollableChannel org.springframework.integration.support.management.graph.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.SubscribableChannel org.springframework.integration.support.management.graph.SubscribableChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.PollableChannel org.springframework.integration.support.management.graph.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.PollableChannel org.springframework.integration.support.management.graph.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = PollerMetadata . DEFAULT_POLLER ) public org.springframework.integration.support.management.graph.PollerMetadata org.springframework.integration.support.management.graph.PollerMetadata ( ) { PollerMetadata org.springframework.integration.support.management.graph.PollerMetadata = new PollerMetadata ( ) ; org.springframework.integration.support.management.graph.PollerMetadata . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; MessagePublishingErrorHandler org.springframework.integration.support.management.graph.MessagePublishingErrorHandler = new MessagePublishingErrorHandler ( ) ; org.springframework.integration.support.management.graph.MessagePublishingErrorHandler . setDefaultErrorChannel ( org.springframework.integration.support.management.graph.PollableChannel ( ) ) ; org.springframework.integration.support.management.graph.PollerMetadata . setErrorHandler ( org.springframework.integration.support.management.graph.MessagePublishingErrorHandler ) ; return org.springframework.integration.support.management.graph.PollerMetadata ; }  <METHOD_END>
<METHOD_START> @ Bean @ Router ( inputChannel = STRING ) public org.springframework.integration.support.management.graph.HeaderValueRouter org.springframework.integration.support.management.graph.HeaderValueRouter ( ) { HeaderValueRouter org.springframework.integration.support.management.graph.HeaderValueRouter = new HeaderValueRouter ( STRING ) ; org.springframework.integration.support.management.graph.HeaderValueRouter . setChannelMapping ( STRING , STRING ) ; org.springframework.integration.support.management.graph.HeaderValueRouter . setChannelMapping ( STRING , STRING ) ; org.springframework.integration.support.management.graph.HeaderValueRouter . setDefaultOutputChannel ( org.springframework.integration.support.management.graph.MessageChannel ( ) ) ; return org.springframework.integration.support.management.graph.HeaderValueRouter ; }  <METHOD_END>
<METHOD_START> @ Bean @ Router ( inputChannel = STRING ) public org.springframework.integration.support.management.graph.RecipientListRouter org.springframework.integration.support.management.graph.RecipientListRouter ( ) { RecipientListRouter org.springframework.integration.support.management.graph.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.support.management.graph.RecipientListRouter . setChannels ( java.util.Arrays . java.util.List ( org.springframework.integration.support.management.graph.MessageChannel ( ) , org.springframework.integration.support.management.graph.MessageChannel ( ) ) ) ; org.springframework.integration.support.management.graph.RecipientListRouter . setDefaultOutputChannel ( org.springframework.integration.support.management.graph.MessageChannel ( ) ) ; return org.springframework.integration.support.management.graph.RecipientListRouter ; }  <METHOD_END>
<METHOD_START> @ Bean @ Router ( inputChannel = STRING ) public org.springframework.integration.support.management.graph.ExpressionEvaluatingRouter org.springframework.integration.support.management.graph.ExpressionEvaluatingRouter ( ) { ExpressionEvaluatingRouter org.springframework.integration.support.management.graph.ExpressionEvaluatingRouter = new ExpressionEvaluatingRouter ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; org.springframework.integration.support.management.graph.ExpressionEvaluatingRouter . setDefaultOutputChannel ( org.springframework.integration.support.management.graph.MessageChannel ( ) ) ; return org.springframework.integration.support.management.graph.ExpressionEvaluatingRouter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.MessageChannel org.springframework.integration.support.management.graph.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.MessageChannel org.springframework.integration.support.management.graph.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.MessageChannel org.springframework.integration.support.management.graph.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.MessageChannel org.springframework.integration.support.management.graph.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.MessageChannel org.springframework.integration.support.management.graph.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.graph.MessageChannel org.springframework.integration.support.management.graph.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING ) public boolean boolean ( java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.support.management.graph.Message<?> ) throws org.springframework.integration.support.management.graph.MessagingException { }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
