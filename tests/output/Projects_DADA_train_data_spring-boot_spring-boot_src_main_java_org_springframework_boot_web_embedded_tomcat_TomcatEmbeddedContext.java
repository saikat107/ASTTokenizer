<METHOD_START> void ( ) { this . boolean = ReflectionUtils . findMethod ( StandardContext .class , STRING , Container [] .class ) . getReturnType ( ) == boolean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Container [] org.springframework.boot.web.embedded.tomcat.Container[] ) { if ( this . boolean ) { return true ; } return super. loadOnStartup ( org.springframework.boot.web.embedded.tomcat.Container[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Manager org.springframework.boot.web.embedded.tomcat.Manager ) { if ( org.springframework.boot.web.embedded.tomcat.Manager instanceof ManagerBase ) { ( ( ManagerBase ) org.springframework.boot.web.embedded.tomcat.Manager ) . setSessionIdGenerator ( new LazySessionIdGenerator ( ) ) ; } super. setManager ( org.springframework.boot.web.embedded.tomcat.Manager ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.lang.ClassLoader java.lang.ClassLoader = getLoader ( ) . getClassLoader ( ) ; java.lang.ClassLoader java.lang.ClassLoader = null ; if ( java.lang.ClassLoader != null ) { java.lang.ClassLoader = ClassUtils . overrideThreadContextClassLoader ( java.lang.ClassLoader ) ; } if ( this . boolean ) { super. loadOnStartup ( findChildren ( ) ) ; } if ( java.lang.ClassLoader != null ) { ClassUtils . overrideThreadContextClassLoader ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> public void void ( TomcatStarter org.springframework.boot.web.embedded.tomcat.TomcatStarter ) { this . org.springframework.boot.web.embedded.tomcat.TomcatStarter = org.springframework.boot.web.embedded.tomcat.TomcatStarter ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.embedded.tomcat.TomcatStarter org.springframework.boot.web.embedded.tomcat.TomcatStarter ( ) { return this . org.springframework.boot.web.embedded.tomcat.TomcatStarter ; }  <METHOD_END>
