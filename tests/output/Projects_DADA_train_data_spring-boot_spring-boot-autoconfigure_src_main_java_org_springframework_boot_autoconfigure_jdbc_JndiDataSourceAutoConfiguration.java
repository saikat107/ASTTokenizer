<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.jdbc.ApplicationContext ) { this . org.springframework.boot.autoconfigure.jdbc.ApplicationContext = org.springframework.boot.autoconfigure.jdbc.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean ( destroyMethod = STRING ) @ ConditionalOnMissingBean public javax.sql.DataSource javax.sql.DataSource ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ) { JndiDataSourceLookup org.springframework.boot.autoconfigure.jdbc.JndiDataSourceLookup = new JndiDataSourceLookup ( ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.boot.autoconfigure.jdbc.JndiDataSourceLookup . getDataSource ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getJndiName ( ) ) ; void ( javax.sql.DataSource , STRING ) ; return javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { try { MBeanExporter org.springframework.boot.autoconfigure.jdbc.MBeanExporter = this . org.springframework.boot.autoconfigure.jdbc.ApplicationContext . getBean ( MBeanExporter .class ) ; if ( JmxUtils . isMBean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { org.springframework.boot.autoconfigure.jdbc.MBeanExporter . addExcludedBean ( java.lang.String ) ; } } catch ( NoSuchBeanDefinitionException org.springframework.boot.autoconfigure.jdbc.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
