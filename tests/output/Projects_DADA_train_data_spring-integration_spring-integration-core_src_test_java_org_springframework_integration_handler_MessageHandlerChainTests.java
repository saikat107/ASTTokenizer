<METHOD_START> @ Before public void void ( ) { Mockito . when ( org.springframework.integration.handler.MessageChannel . send ( Mockito . any ( Message .class ) ) ) . thenReturn ( true ) ; org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub = new org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ( org.springframework.integration.handler.MessageHandler ) ; org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub = new org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ( org.springframework.integration.handler.MessageHandler ) ; org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub = new org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ( org.springframework.integration.handler.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> = new java.util.ArrayList<org.springframework.integration.handler.MessageHandler> < MessageHandler > ( ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; MessageHandlerChain org.springframework.integration.handler.MessageHandlerChain = new MessageHandlerChain ( ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanName ( STRING ) ; org.springframework.integration.handler.MessageHandlerChain . setHandlers ( java.util.List<org.springframework.integration.handler.MessageHandler> ) ; org.springframework.integration.handler.MessageHandlerChain . setOutputChannel ( org.springframework.integration.handler.MessageChannel ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageHandlerChain . handleMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.handler.MessageChannel ) . send ( Mockito . eq ( org.springframework.integration.handler.Message<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> = new java.util.ArrayList<org.springframework.integration.handler.MessageHandler> < MessageHandler > ( ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandler ) ; MessageHandlerChain org.springframework.integration.handler.MessageHandlerChain = new MessageHandlerChain ( ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanName ( STRING ) ; org.springframework.integration.handler.MessageHandlerChain . setHandlers ( java.util.List<org.springframework.integration.handler.MessageHandler> ) ; org.springframework.integration.handler.MessageHandlerChain . setOutputChannel ( org.springframework.integration.handler.MessageChannel ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageHandlerChain . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> = new java.util.ArrayList<org.springframework.integration.handler.MessageHandler> < MessageHandler > ( ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandler ) ; MessageHandlerChain org.springframework.integration.handler.MessageHandlerChain = new MessageHandlerChain ( ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanName ( STRING ) ; org.springframework.integration.handler.MessageHandlerChain . setHandlers ( java.util.List<org.springframework.integration.handler.MessageHandler> ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageHandlerChain . handleMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.MessageChannel ) . build ( ) ; java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> = new java.util.ArrayList<org.springframework.integration.handler.MessageHandler> < MessageHandler > ( ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; MessageHandlerChain org.springframework.integration.handler.MessageHandlerChain = new MessageHandlerChain ( ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanName ( STRING ) ; org.springframework.integration.handler.MessageHandlerChain . setHandlers ( java.util.List<org.springframework.integration.handler.MessageHandler> ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageHandlerChain . handleMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.handler.MessageChannel ) . send ( Mockito . any ( Message .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; DefaultListableBeanFactory org.springframework.integration.handler.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.handler.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.handler.MessageChannel ) ; java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> = new java.util.ArrayList<org.springframework.integration.handler.MessageHandler> < MessageHandler > ( ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; MessageHandlerChain org.springframework.integration.handler.MessageHandlerChain = new MessageHandlerChain ( ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanName ( STRING ) ; org.springframework.integration.handler.MessageHandlerChain . setHandlers ( java.util.List<org.springframework.integration.handler.MessageHandler> ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanFactory ( org.springframework.integration.handler.DefaultListableBeanFactory ) ; org.springframework.integration.handler.MessageHandlerChain . handleMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.handler.MessageChannel ) . send ( Mockito . eq ( org.springframework.integration.handler.Message<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.integration.handler.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.handler.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.handler.MessageChannel ) ; java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> = new java.util.ArrayList<org.springframework.integration.handler.MessageHandler> < MessageHandler > ( ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; java.util.List<org.springframework.integration.handler.MessageHandler> . add ( org.springframework.integration.handler.MessageHandlerChainTests.ProducingHandlerStub ) ; MessageHandlerChain org.springframework.integration.handler.MessageHandlerChain = new MessageHandlerChain ( ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanName ( STRING ) ; org.springframework.integration.handler.MessageHandlerChain . setHandlers ( java.util.List<org.springframework.integration.handler.MessageHandler> ) ; org.springframework.integration.handler.MessageHandlerChain . setBeanFactory ( org.springframework.integration.handler.DefaultListableBeanFactory ) ; org.springframework.integration.handler.MessageHandlerChain . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> void ( MessageHandler org.springframework.integration.handler.MessageHandler ) { this . org.springframework.integration.handler.MessageHandler = org.springframework.integration.handler.MessageHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageChannel org.springframework.integration.handler.MessageChannel ) { this . org.springframework.integration.handler.MessageChannel = org.springframework.integration.handler.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.handler.MessageChannel org.springframework.integration.handler.MessageChannel ( ) { return this . org.springframework.integration.handler.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.handler.Message<?> ) { org.springframework.integration.handler.MessageHandler . handleMessage ( org.springframework.integration.handler.Message<> ) ; org.springframework.integration.handler.MessageChannel . send ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
