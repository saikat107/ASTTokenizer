<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.tomcat.ResponseEntity<java.lang.String> = this . sample.tomcat.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.tomcat.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.tomcat.ResponseEntity<java.lang.String> . getBody ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.tomcat.HttpHeaders = new HttpHeaders ( ) ; sample.tomcat.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < ? > sample.tomcat.HttpEntity<?> = new HttpEntity <> ( sample.tomcat.HttpHeaders ) ; ResponseEntity < byte [] > sample.tomcat.ResponseEntity<byte[]> = this . sample.tomcat.TestRestTemplate . exchange ( STRING , HttpMethod . GET , sample.tomcat.HttpEntity<> , byte [] .class ) ; assertThat ( sample.tomcat.ResponseEntity<byte[]> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; java.util.zip.GZIPInputStream java.util.zip.GZIPInputStream = new java.util.zip.GZIPInputStream ( new java.io.ByteArrayInputStream ( sample.tomcat.ResponseEntity<byte[]> . getBody ( ) ) ) ; try { assertThat ( StreamUtils . copyToString ( java.util.zip.GZIPInputStream , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) . isEqualTo ( STRING ) ; } finally { java.util.zip.GZIPInputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletWebServerApplicationContext sample.tomcat.ServletWebServerApplicationContext = ( ServletWebServerApplicationContext ) this . sample.tomcat.ApplicationContext ; TomcatWebServer sample.tomcat.TomcatWebServer = ( TomcatWebServer ) sample.tomcat.ServletWebServerApplicationContext . getWebServer ( ) ; ProtocolHandler sample.tomcat.ProtocolHandler = sample.tomcat.TomcatWebServer . getTomcat ( ) . getConnector ( ) . getProtocolHandler ( ) ; int int = ( ( AbstractProtocol < ? > ) sample.tomcat.ProtocolHandler ) . getConnectionTimeout ( ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
