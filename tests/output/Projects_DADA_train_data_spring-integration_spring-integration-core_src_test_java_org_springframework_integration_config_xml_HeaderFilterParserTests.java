<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
