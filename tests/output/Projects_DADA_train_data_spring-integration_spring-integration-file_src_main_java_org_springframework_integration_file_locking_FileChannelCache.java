<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static java.nio.channels.FileLock java.nio.channels.FileLock ( java.io.File java.io.File ) throws java.io.IOException { java.nio.channels.FileChannel java.nio.channels.FileChannel = java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileChannel> . java.nio.channels.FileChannel ( java.io.File ) ; if ( java.nio.channels.FileChannel == null ) { @ java.lang.SuppressWarnings ( STRING ) java.nio.channels.FileChannel java.nio.channels.FileChannel = new java.io.RandomAccessFile ( java.io.File , STRING ) . java.nio.channels.FileChannel ( ) ; java.nio.channels.FileChannel java.nio.channels.FileChannel = java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileChannel> . java.nio.channels.FileChannel ( java.io.File , java.nio.channels.FileChannel ) ; if ( java.nio.channels.FileChannel != null ) { java.nio.channels.FileChannel = java.nio.channels.FileChannel ; try { java.nio.channels.FileChannel . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } else { java.nio.channels.FileChannel = java.nio.channels.FileChannel ; } } java.nio.channels.FileLock java.nio.channels.FileLock = null ; if ( java.nio.channels.FileChannel != null ) { try { java.nio.channels.FileLock = java.nio.channels.FileChannel . java.nio.channels.FileLock ( ) ; } catch ( java.nio.channels.OverlappingFileLockException java.nio.channels.OverlappingFileLockException ) { } } return java.nio.channels.FileLock ; }  <METHOD_END>
<METHOD_START> public static void void ( java.io.File java.io.File ) { java.nio.channels.FileChannel java.nio.channels.FileChannel = java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileChannel> . java.nio.channels.FileChannel ( java.io.File ) ; if ( java.nio.channels.FileChannel != null ) { try { java.nio.channels.FileChannel . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.io.File java.io.File ) { return java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileChannel> . boolean ( java.io.File ) ; }  <METHOD_END>
