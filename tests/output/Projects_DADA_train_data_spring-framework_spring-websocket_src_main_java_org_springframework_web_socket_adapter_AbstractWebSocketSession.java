<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { return this . T ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < R > R R ( java.lang.Class<R> < R > java.lang.Class<R> ) { if ( java.lang.Class<R> != null ) { if ( java.lang.Class<R> . boolean ( this . T ) ) { return ( R ) this . T ; } } return null ; }  <METHOD_END>
<METHOD_START> public void void ( T T ) { Assert . notNull ( T , STRING ) ; this . T = T ; }  <METHOD_END>
<METHOD_START> protected final void void ( ) { Assert . state ( this . T != null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( WebSocketMessage < ? > org.springframework.web.socket.adapter.WebSocketMessage<?> ) throws java.io.IOException { void ( ) ; if ( org.springframework.web.socket.adapter.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.adapter.Log . trace ( STRING + org.springframework.web.socket.adapter.WebSocketMessage<> + STRING + this ) ; } if ( org.springframework.web.socket.adapter.WebSocketMessage<> instanceof TextMessage ) { void ( ( TextMessage ) org.springframework.web.socket.adapter.WebSocketMessage<> ) ; } else if ( org.springframework.web.socket.adapter.WebSocketMessage<> instanceof BinaryMessage ) { void ( ( BinaryMessage ) org.springframework.web.socket.adapter.WebSocketMessage<> ) ; } else if ( org.springframework.web.socket.adapter.WebSocketMessage<> instanceof PingMessage ) { void ( ( PingMessage ) org.springframework.web.socket.adapter.WebSocketMessage<> ) ; } else if ( org.springframework.web.socket.adapter.WebSocketMessage<> instanceof PongMessage ) { void ( ( PongMessage ) org.springframework.web.socket.adapter.WebSocketMessage<> ) ; } else { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.socket.adapter.WebSocketMessage<> ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( TextMessage org.springframework.web.socket.adapter.TextMessage ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( BinaryMessage org.springframework.web.socket.adapter.BinaryMessage ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( PingMessage org.springframework.web.socket.adapter.PingMessage ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( PongMessage org.springframework.web.socket.adapter.PongMessage ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) java.io.IOException { void ( CloseStatus . NORMAL ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( CloseStatus org.springframework.web.socket.adapter.CloseStatus ) throws java.io.IOException { void ( ) ; if ( org.springframework.web.socket.adapter.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.adapter.Log . debug ( STRING + this ) ; } void ( org.springframework.web.socket.adapter.CloseStatus ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( CloseStatus org.springframework.web.socket.adapter.CloseStatus ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( this . T != null ) { return java.lang.Class<? extends org.springframework.web.socket.adapter.AbstractWebSocketSession> ( ) . java.lang.String ( ) + STRING + getId ( ) + STRING + getUri ( ) + STRING ; } else { return java.lang.Class<? extends org.springframework.web.socket.adapter.AbstractWebSocketSession> ( ) . java.lang.String ( ) + STRING ; } }  <METHOD_END>
