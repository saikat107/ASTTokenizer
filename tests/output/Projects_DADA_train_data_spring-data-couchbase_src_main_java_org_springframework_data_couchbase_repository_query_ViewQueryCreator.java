<METHOD_START> public void ( PartTree org.springframework.data.couchbase.repository.query.PartTree , ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , View org.springframework.data.couchbase.repository.query.View , ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery , CouchbaseConverter org.springframework.data.couchbase.repository.query.CouchbaseConverter ) { super( org.springframework.data.couchbase.repository.query.PartTree , org.springframework.data.couchbase.repository.query.ParameterAccessor ); this . org.springframework.data.couchbase.repository.query.ViewQuery = org.springframework.data.couchbase.repository.query.ViewQuery ; this . org.springframework.data.couchbase.repository.query.View = org.springframework.data.couchbase.repository.query.View ; this . org.springframework.data.couchbase.repository.query.PartTree = org.springframework.data.couchbase.repository.query.PartTree ; this . org.springframework.data.couchbase.repository.query.CouchbaseConverter = org.springframework.data.couchbase.repository.query.CouchbaseConverter ; int int = NUMBER ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; for ( PartTree . PartTree PartTree.OrPart : org.springframework.data.couchbase.repository.query.PartTree ) { for ( Part org.springframework.data.couchbase.repository.query.Part : PartTree.OrPart ) { int ++ ; java.util.Set<java.lang.String> . boolean ( org.springframework.data.couchbase.repository.query.Part . getProperty ( ) . toDotPath ( ) ) ; } } this . int = int ; if ( java.util.Set<java.lang.String> . int ( ) > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery ( Part org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { ConvertingIterator org.springframework.data.couchbase.repository.query.ConvertingIterator = new ConvertingIterator ( java.util.Iterator<java.lang.Object> , org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; switch ( org.springframework.data.couchbase.repository.query.Part . getType ( ) ) { case GREATER_THAN_EQUAL : void ( org.springframework.data.couchbase.repository.query.ConvertingIterator ) ; break; case LESS_THAN_EQUAL : org.springframework.data.couchbase.repository.query.ViewQuery . inclusiveEnd ( true ) ; case BEFORE : case LESS_THAN : void ( org.springframework.data.couchbase.repository.query.ConvertingIterator ) ; break; case BETWEEN : void ( org.springframework.data.couchbase.repository.query.ConvertingIterator ) ; void ( org.springframework.data.couchbase.repository.query.ConvertingIterator ) ; break; case STARTING_WITH : java.lang.String java.lang.String = java.lang.String ( org.springframework.data.couchbase.repository.query.ConvertingIterator ) ; org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( java.lang.String ) . endKey ( java.lang.String + STRING ) ; org.springframework.data.couchbase.repository.query.ViewQuery . inclusiveEnd ( false ) ; break; case SIMPLE_PROPERTY : void ( org.springframework.data.couchbase.repository.query.ConvertingIterator ) ; break; case IN : org.springframework.data.couchbase.repository.query.ViewQuery . keys ( org.springframework.data.couchbase.repository.query.JsonArray ( org.springframework.data.couchbase.repository.query.ConvertingIterator ) ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.couchbase.repository.query.Part . toString ( ) ) ; } return org.springframework.data.couchbase.repository.query.ViewQuery ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.lang.String ) { org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Boolean ) { org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( ( java.lang.Boolean ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Double ) { org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( ( java.lang.Double ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Integer ) { org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( ( java.lang.Integer ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Long ) { org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( ( java.lang.Long ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ( java.util.Collection ) java.lang.Object ) ; org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( JsonArray . from ( java.util.List<java.lang.Object> ) ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( JsonArray . from ( java.util.List<java.lang.Object> ) ) ; } else if ( java.lang.Object instanceof JsonArray ) { org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( ( JsonArray ) java.lang.Object ) ; } else if ( java.lang.Object instanceof JsonObject ) { org.springframework.data.couchbase.repository.query.ViewQuery . startKey ( ( JsonObject ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.lang.String ) { org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Boolean ) { org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( ( java.lang.Boolean ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Double ) { org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( ( java.lang.Double ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Integer ) { org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( ( java.lang.Integer ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Long ) { org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( ( java.lang.Long ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ( java.util.Collection ) java.lang.Object ) ; org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( JsonArray . from ( java.util.List<java.lang.Object> ) ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( JsonArray . from ( java.util.List<java.lang.Object> ) ) ; } else if ( java.lang.Object instanceof JsonArray ) { org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( ( JsonArray ) java.lang.Object ) ; } else if ( java.lang.Object instanceof JsonObject ) { org.springframework.data.couchbase.repository.query.ViewQuery . endKey ( ( JsonObject ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) && int > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } else if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { return; } java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.lang.String ) { org.springframework.data.couchbase.repository.query.ViewQuery . key ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Boolean ) { org.springframework.data.couchbase.repository.query.ViewQuery . key ( ( java.lang.Boolean ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Double ) { org.springframework.data.couchbase.repository.query.ViewQuery . key ( ( java.lang.Double ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Integer ) { org.springframework.data.couchbase.repository.query.ViewQuery . key ( ( java.lang.Integer ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Long ) { org.springframework.data.couchbase.repository.query.ViewQuery . key ( ( java.lang.Long ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ( java.util.Collection ) java.lang.Object ) ; org.springframework.data.couchbase.repository.query.ViewQuery . key ( JsonArray . from ( java.util.List<java.lang.Object> ) ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; org.springframework.data.couchbase.repository.query.ViewQuery . key ( JsonArray . from ( java.util.List<java.lang.Object> ) ) ; } else if ( java.lang.Object instanceof JsonArray ) { org.springframework.data.couchbase.repository.query.ViewQuery . key ( ( JsonArray ) java.lang.Object ) ; } else if ( java.lang.Object instanceof JsonObject ) { org.springframework.data.couchbase.repository.query.ViewQuery . key ( ( JsonObject ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( ! ( java.lang.Object instanceof java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } return ( java.lang.String ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.query.JsonArray org.springframework.data.couchbase.repository.query.JsonArray ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ; if ( java.lang.Object instanceof java.util.Collection ) { java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; } else { java.util.List<java.lang.Object> = java.util.Collections . java.util.List<java.lang.Object> ( java.lang.Object ) ; } return JsonArray . from ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery ( Part org.springframework.data.couchbase.repository.query.Part , ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return org.springframework.data.couchbase.repository.query.ViewQuery ( org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery ( ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery , ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.ViewQueryCreator.DerivedViewQuery org.springframework.data.couchbase.repository.query.ViewQueryCreator.DerivedViewQuery ( ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery , Sort org.springframework.data.couchbase.repository.query.Sort ) { boolean boolean = false ; if ( org.springframework.data.couchbase.repository.query.Sort . isSorted ( ) ) { int int = NUMBER ; java.util.Iterator<Sort.Order> < Sort . Sort > java.util.Iterator<Sort.Order> = org.springframework.data.couchbase.repository.query.Sort . iterator ( ) ; while( java.util.Iterator<Sort.Order> . hasNext ( ) ) { int ++ ; if ( ! java.util.Iterator<Sort.Order> . next ( ) . isAscending ( ) ) { boolean = true ; } } if ( int > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int + STRING ) ; } org.springframework.data.couchbase.repository.query.ViewQuery . descending ( boolean ) ; } if ( org.springframework.data.couchbase.repository.query.PartTree . isLimiting ( ) ) { org.springframework.data.couchbase.repository.query.ViewQuery . limit ( org.springframework.data.couchbase.repository.query.PartTree . getMaxResults ( ) ) ; } boolean boolean = org.springframework.data.couchbase.repository.query.PartTree . isCountProjection ( ) == java.lang.Boolean . java.lang.Boolean ; boolean boolean = org.springframework.data.couchbase.repository.query.View != null && org.springframework.data.couchbase.repository.query.View . reduce ( ) ; if ( boolean || boolean ) { org.springframework.data.couchbase.repository.query.ViewQuery . reduce ( ) ; } return new org.springframework.data.couchbase.repository.query.ViewQueryCreator.DerivedViewQuery ( org.springframework.data.couchbase.repository.query.ViewQuery , org.springframework.data.couchbase.repository.query.PartTree . isLimiting ( ) , boolean || boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( ViewQuery org.springframework.data.couchbase.repository.query.ViewQuery , boolean boolean , boolean boolean ) { this . org.springframework.data.couchbase.repository.query.ViewQuery = org.springframework.data.couchbase.repository.query.ViewQuery ; this . boolean = boolean ; this . boolean = boolean ; }  <METHOD_END>
