<METHOD_START> public static org.springframework.web.reactive.function.client.ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; return ExchangeFilterFunction . ofRequestProcessor ( clientRequest -> { String authorization = authorization ( username , password ) ; ClientRequest authorizedRequest = ClientRequest . from ( clientRequest ) . header ( HttpHeaders . AUTHORIZATION , authorization ) . build ( ) ; return Mono . just ( authorizedRequest ) ; } ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String + STRING + java.lang.String ; byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; byte [] byte[] = java.util.Base64 . java.util.Base64.Encoder ( ) . byte[] ( byte[] ) ; java.lang.String java.lang.String = new java.lang.String ( byte[] , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; return STRING + java.lang.String ; }  <METHOD_END>
