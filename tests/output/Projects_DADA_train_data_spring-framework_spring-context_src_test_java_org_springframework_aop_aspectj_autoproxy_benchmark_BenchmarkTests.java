<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long ( java.lang.String , int ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; StopWatch org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch = new StopWatch ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . start ( int + STRING + java.lang.String ) ; ITestBean org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getAge ( ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getAge ( ) ; } org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . stop ( ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . prettyPrint ( ) ) ; return org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; StopWatch org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch = new StopWatch ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . start ( int + STRING + java.lang.String ) ; ITestBean org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean ) ) ; Advised org.springframework.aop.aspectj.autoproxy.benchmark.Advised = ( Advised ) org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean ; assertTrue ( org.springframework.aop.aspectj.autoproxy.benchmark.Advised . getAdvisors ( ) . length >= NUMBER ) ; assertEquals ( STRING , org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getName ( ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getName ( ) ; } org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . stop ( ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . prettyPrint ( ) ) ; return org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; StopWatch org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch = new StopWatch ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . start ( int + STRING + java.lang.String ) ; ITestBean org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean ) ) ; Advised org.springframework.aop.aspectj.autoproxy.benchmark.Advised = ( Advised ) org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean ; assertTrue ( org.springframework.aop.aspectj.autoproxy.benchmark.Advised . getAdvisors ( ) . length >= NUMBER ) ; org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . setAge ( NUMBER ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . setAge ( int ) ; } org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . stop ( ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . prettyPrint ( ) ) ; return org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; StopWatch org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch = new StopWatch ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . start ( int + STRING + java.lang.String ) ; ITestBean org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.benchmark.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean ) ) ; Advised org.springframework.aop.aspectj.autoproxy.benchmark.Advised = ( Advised ) org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean ; assertTrue ( org.springframework.aop.aspectj.autoproxy.benchmark.Advised . getAdvisors ( ) . length >= NUMBER ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getAge ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getName ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . setAge ( int ) ; org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getDoctor ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getLawyer ( ) ; org.springframework.aop.aspectj.autoproxy.benchmark.ITestBean . getSpouse ( ) ; } org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . stop ( ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . prettyPrint ( ) ) ; return org.springframework.aop.aspectj.autoproxy.benchmark.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.aspectj.autoproxy.benchmark.MethodInvocation ) throws java.lang.Throwable { ++ int ; int int = ( java.lang.Integer ) org.springframework.aop.aspectj.autoproxy.benchmark.MethodInvocation . proceed ( ) ; return int * this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { ++ int ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.aspectj.autoproxy.benchmark.Advisor org.springframework.aop.aspectj.autoproxy.benchmark.Advisor ( ) { return new DefaultPointcutAdvisor ( new StaticMethodMatcherPointcut ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( java.lang.Integer .class ) ; } } , new org.springframework.aop.aspectj.autoproxy.benchmark.TraceAfterReturningAdvice ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ AfterReturning ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { ++ int ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.aspectj.autoproxy.benchmark.Advisor org.springframework.aop.aspectj.autoproxy.benchmark.Advisor ( ) { return new DefaultPointcutAdvisor ( new StaticMethodMatcherPointcut ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.String .class ) ; } } , new org.springframework.aop.aspectj.autoproxy.benchmark.TraceBeforeAdvice ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.String .class ) ; }  <METHOD_END>
