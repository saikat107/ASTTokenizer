<METHOD_START> public void ( MetaData org.springframework.data.neo4j.mapping.MetaData ) { this . org.springframework.data.neo4j.mapping.MetaData = org.springframework.data.neo4j.mapping.MetaData ; org.springframework.data.neo4j.mapping.MetaData . persistentEntities ( ) . stream ( ) . filter ( k -> k . getUnderlyingClass ( ) != null ) . forEach ( k -> addPersistentEntity ( k . getUnderlyingClass ( ) ) ) ; org.springframework.data.neo4j.mapping.Logger . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > org.springframework.data.neo4j.mapping.Neo4jPersistentEntity<?> < ? > org.springframework.data.neo4j.mapping.Neo4jPersistentEntity<?> ( TypeInformation < T > org.springframework.data.neo4j.mapping.TypeInformation<T> ) { org.springframework.data.neo4j.mapping.Logger . debug ( STRING , org.springframework.data.neo4j.mapping.TypeInformation<T> ) ; return new Neo4jPersistentEntity <> ( org.springframework.data.neo4j.mapping.TypeInformation<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.neo4j.mapping.Neo4jPersistentProperty org.springframework.data.neo4j.mapping.Neo4jPersistentProperty ( Property org.springframework.data.neo4j.mapping.Property , Neo4jPersistentEntity < ? > org.springframework.data.neo4j.mapping.Neo4jPersistentEntity<?> , SimpleTypeHolder org.springframework.data.neo4j.mapping.SimpleTypeHolder ) { ClassInfo org.springframework.data.neo4j.mapping.ClassInfo = this . org.springframework.data.neo4j.mapping.MetaData . classInfo ( org.springframework.data.neo4j.mapping.Neo4jPersistentEntity<> . getType ( ) . getName ( ) ) ; java.lang.reflect.Field java.lang.reflect.Field = org.springframework.data.neo4j.mapping.Property . getField ( ) . orElse ( null ) ; if ( ! org.springframework.data.neo4j.mapping.Property . isFieldBacked ( ) && org.springframework.data.neo4j.mapping.ClassInfo != null ) { FieldInfo org.springframework.data.neo4j.mapping.FieldInfo = org.springframework.data.neo4j.mapping.ClassInfo . propertyFieldByName ( org.springframework.data.neo4j.mapping.Property . getName ( ) ) ; if ( org.springframework.data.neo4j.mapping.FieldInfo == null ) { org.springframework.data.neo4j.mapping.FieldInfo = org.springframework.data.neo4j.mapping.ClassInfo . relationshipFieldByName ( org.springframework.data.neo4j.mapping.Property . getName ( ) ) ; } if ( org.springframework.data.neo4j.mapping.FieldInfo != null ) { java.lang.reflect.Field = org.springframework.data.neo4j.mapping.ClassInfo . getField ( org.springframework.data.neo4j.mapping.FieldInfo ) ; } else { org.springframework.data.neo4j.mapping.Logger . debug ( STRING , org.springframework.data.neo4j.mapping.Property . getName ( ) , org.springframework.data.neo4j.mapping.ClassInfo . name ( ) ) ; } } return new Neo4jPersistentProperty ( org.springframework.data.neo4j.mapping.ClassInfo , org.springframework.data.neo4j.mapping.Property , org.springframework.data.neo4j.mapping.Neo4jPersistentEntity<> , org.springframework.data.neo4j.mapping.SimpleTypeHolder ( org.springframework.data.neo4j.mapping.SimpleTypeHolder , java.lang.reflect.Field ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.neo4j.mapping.SimpleTypeHolder org.springframework.data.neo4j.mapping.SimpleTypeHolder ( SimpleTypeHolder org.springframework.data.neo4j.mapping.SimpleTypeHolder , java.lang.reflect.Field java.lang.reflect.Field ) { if ( java.lang.reflect.Field == null ) { return org.springframework.data.neo4j.mapping.SimpleTypeHolder ; } final java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Field . java.lang.Class<?> ( ) . boolean ( ) ? java.lang.reflect.Field . java.lang.Class<?> ( ) . java.lang.Class<?> ( ) : java.lang.reflect.Field . java.lang.Class<?> ( ) ; if ( boolean ( org.springframework.data.neo4j.mapping.SimpleTypeHolder , java.lang.reflect.Field , java.lang.Class<> ) ) { SimpleTypeHolder org.springframework.data.neo4j.mapping.SimpleTypeHolder = new SimpleTypeHolder ( java.util.Set<java.lang.Class<>> ( java.lang.Class<> ) , org.springframework.data.neo4j.mapping.SimpleTypeHolder ) ; setSimpleTypeHolder ( org.springframework.data.neo4j.mapping.SimpleTypeHolder ) ; return org.springframework.data.neo4j.mapping.SimpleTypeHolder ; } return org.springframework.data.neo4j.mapping.SimpleTypeHolder ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( SimpleTypeHolder org.springframework.data.neo4j.mapping.SimpleTypeHolder , java.lang.reflect.Field java.lang.reflect.Field , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.reflect.Field . boolean ( Convert .class ) ) { return true ; } if ( org.springframework.data.neo4j.mapping.SimpleTypeHolder . isSimpleType ( java.lang.Class<> ) || java.lang.Class<> . boolean ( ) ) { return false ; } if ( this . org.springframework.data.neo4j.mapping.MetaData . classInfo ( java.lang.Class<> . java.lang.String ( ) ) == null ) { org.springframework.data.neo4j.mapping.Logger . info ( STRING , java.lang.Class<> ) ; return true ; } return false ; }  <METHOD_END>
