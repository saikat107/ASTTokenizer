<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor = new ServletModelAttributeMethodProcessor ( false ) ; ConfigurableWebBindingInitializer org.springframework.web.servlet.mvc.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.servlet.mvc.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultConversionService ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory = new ServletRequestDataBinderFactory ( null , org.springframework.web.servlet.mvc.method.annotation.ConfigurableWebBindingInitializer ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests> ( ) . java.lang.reflect.Method ( STRING , TestBean .class , org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor .class , java.util.Optional .class ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor = ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> = ( java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertEquals ( STRING , java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> . get ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor = ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> = ( java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertEquals ( STRING , java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> . get ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . put ( STRING , null ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . put ( STRING , null ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . put ( STRING , null ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ) ; java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> = ( java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertFalse ( java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . put ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . put ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . put ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ) ; java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> = ( java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) ; assertFalse ( java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( @ ModelAttribute ( STRING ) TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , @ ModelAttribute ( STRING ) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests.TestBeanWithoutStringConstructor , @ ModelAttribute ( STRING ) java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.TestBean> ) {	}  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( int int ) {		}  <METHOD_END>
