<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.convert.SchemaAction org.springframework.data.cassandra.convert.SchemaAction ( ) { return SchemaAction . NONE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { AllPossibleTypes .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.convert.CustomConversions org.springframework.data.cassandra.convert.CustomConversions ( ) { return new CustomConversions ( java.util.Arrays . java.util.List<T> ( new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.UDTToCurrencyConverter ( ) , new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.CurrencyToUDTConverter ( new SimpleUserTypeResolver ( cluster ( ) . getObject ( ) , getKeyspaceName ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING + STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; } else { org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.Session . execute ( STRING + STRING + STRING ) ; ResultSet org.springframework.data.cassandra.convert.ResultSet = org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook = org.springframework.data.cassandra.convert.MappingCassandraConverter . read ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook .class , org.springframework.data.cassandra.convert.ResultSet . one ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . getCurrentaddress ( ) ) . isNotNull ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType = org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . getCurrentaddress ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . getCity ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . getZip ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . getStreetLines ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setZip ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setCity ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setStreetLines ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . setId ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . setCurrentaddress ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.Session . execute ( STRING + STRING + STRING ) ; ResultSet org.springframework.data.cassandra.convert.ResultSet = org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook = org.springframework.data.cassandra.convert.MappingCassandraConverter . read ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook .class , org.springframework.data.cassandra.convert.ResultSet . one ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . getPreviousaddresses ( ) ) . hasSize ( NUMBER ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType = org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . getPreviousaddresses ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . getCity ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . getZip ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . getStreetLines ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setZip ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setCity ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setStreetLines ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . setId ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . setPreviousaddresses ( java.util.Collections . java.util.List<org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType> ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType ) ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.Session . execute ( STRING + STRING + STRING ) ; ResultSet org.springframework.data.cassandra.convert.ResultSet = org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook = org.springframework.data.cassandra.convert.MappingCassandraConverter . read ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook .class , org.springframework.data.cassandra.convert.ResultSet . one ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . getAlternate ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . getAlternate ( ) . getString ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . getAlternate ( ) . getString ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> = org.springframework.data.cassandra.convert.MappingCassandraConverter . getMappingContext ( ) . getRequiredPersistentEntity ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType .class ) ; UDTValue org.springframework.data.cassandra.convert.UDTValue = org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getUserType ( ) . newValue ( ) ; org.springframework.data.cassandra.convert.UDTValue . setString ( STRING , STRING ) ; org.springframework.data.cassandra.convert.UDTValue . setString ( STRING , STRING ) ; org.springframework.data.cassandra.convert.UDTValue . setList ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . setId ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook . setAlternate ( org.springframework.data.cassandra.convert.UDTValue ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressBook , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setZip ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setCity ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType . setStreetLines ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithMappedUdtId org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithMappedUdtId = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithMappedUdtId ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithMappedUdtId . setId ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithMappedUdtId , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> = org.springframework.data.cassandra.convert.MappingCassandraConverter . getMappingContext ( ) . getRequiredPersistentEntity ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.AddressUserType .class ) ; UDTValue org.springframework.data.cassandra.convert.UDTValue = org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getUserType ( ) . newValue ( ) ; org.springframework.data.cassandra.convert.UDTValue . setString ( STRING , STRING ) ; org.springframework.data.cassandra.convert.UDTValue . setString ( STRING , STRING ) ; org.springframework.data.cassandra.convert.UDTValue . setList ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithUdtId org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithUdtId = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithUdtId ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithUdtId . setId ( org.springframework.data.cassandra.convert.UDTValue ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.WithUdtId , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.Session . execute ( STRING + STRING ) ; ResultSet org.springframework.data.cassandra.convert.ResultSet = org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank = org.springframework.data.cassandra.convert.MappingCassandraConverter . read ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank .class , org.springframework.data.cassandra.convert.ResultSet . one ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank . getCurrency ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank . getCurrency ( ) . getCurrencyCode ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.Session . execute ( STRING + STRING ) ; ResultSet org.springframework.data.cassandra.convert.ResultSet = org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank = org.springframework.data.cassandra.convert.MappingCassandraConverter . read ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank .class , org.springframework.data.cassandra.convert.ResultSet . one ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank . getOtherCurrencies ( ) ) . hasSize ( NUMBER ) . contains ( java.util.Currency . java.util.Currency ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank ( null , java.util.Currency . java.util.Currency ( STRING ) , null ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money . setCurrency ( java.util.Currency . java.util.Currency ( STRING ) ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money , org.springframework.data.cassandra.convert.Update ) ; assertThat ( org.springframework.data.cassandra.convert.Update . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.MoneyTransfer org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.MoneyTransfer = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.MoneyTransfer ( STRING , java.util.Currency . java.util.Currency ( STRING ) ) ; Update org.springframework.data.cassandra.convert.Update = QueryBuilder . update ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.MoneyTransfer , org.springframework.data.cassandra.convert.Update ) ; assertThat ( org.springframework.data.cassandra.convert.Update . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money . setCurrency ( java.util.Currency . java.util.Currency ( STRING ) ) ; Select org.springframework.data.cassandra.convert.Select = QueryBuilder . select ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money , org.springframework.data.cassandra.convert.Select . where ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.Select . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money ( ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money . setCurrency ( java.util.Currency . java.util.Currency ( STRING ) ) ; Delete org.springframework.data.cassandra.convert.Delete = QueryBuilder . delete ( ) . from ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Money , org.springframework.data.cassandra.convert.Delete . where ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.Delete . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank ( null , null , java.util.Collections . java.util.List<java.util.Currency> ( java.util.Currency . java.util.Currency ( STRING ) ) ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Bank , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; ResultSet org.springframework.data.cassandra.convert.ResultSet = org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car = org.springframework.data.cassandra.convert.MappingCassandraConverter . read ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car .class , org.springframework.data.cassandra.convert.ResultSet . one ( ) ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car . getEngine ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car . getEngine ( ) . getManufacturer ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car . getEngine ( ) . getManufacturer ( ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.Session . execute ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Engine org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Engine = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Engine ( new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Manufacturer ( STRING ) ) ; org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car = new org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car ( STRING , org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Engine ) ; Insert org.springframework.data.cassandra.convert.Insert = QueryBuilder . insertInto ( STRING ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . write ( org.springframework.data.cassandra.convert.MappingCassandraConverterUDTIntegrationTests.Car , org.springframework.data.cassandra.convert.Insert ) ; assertThat ( org.springframework.data.cassandra.convert.Insert . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Currency java.util.Currency ( UDTValue org.springframework.data.cassandra.convert.UDTValue ) { return java.util.Currency . java.util.Currency ( org.springframework.data.cassandra.convert.UDTValue . getString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> void ( UserTypeResolver org.springframework.data.cassandra.convert.UserTypeResolver ) { this . org.springframework.data.cassandra.convert.UserTypeResolver = org.springframework.data.cassandra.convert.UserTypeResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.convert.UDTValue org.springframework.data.cassandra.convert.UDTValue ( java.util.Currency java.util.Currency ) { UserType org.springframework.data.cassandra.convert.UserType = org.springframework.data.cassandra.convert.UserTypeResolver . resolveType ( CqlIdentifier . cqlId ( STRING ) ) ; UDTValue org.springframework.data.cassandra.convert.UDTValue = org.springframework.data.cassandra.convert.UserType . newValue ( ) ; org.springframework.data.cassandra.convert.UDTValue . setString ( STRING , java.util.Currency . java.lang.String ( ) ) ; return org.springframework.data.cassandra.convert.UDTValue ; }  <METHOD_END>
