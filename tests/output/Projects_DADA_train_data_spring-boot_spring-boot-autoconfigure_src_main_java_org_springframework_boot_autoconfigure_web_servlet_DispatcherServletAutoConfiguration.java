<METHOD_START> public void ( WebMvcProperties org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties ) { this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties = org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = java.lang.String ) public org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ( ) { DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . setDispatchOptionsRequest ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . isDispatchOptionsRequest ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . setDispatchTraceRequest ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . isDispatchTraceRequest ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . setThrowExceptionIfNoHandlerFound ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . isThrowExceptionIfNoHandlerFound ( ) ) ; return org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( MultipartResolver .class ) @ ConditionalOnMissingBean ( name = DispatcherServlet . MULTIPART_RESOLVER_BEAN_NAME ) public org.springframework.boot.autoconfigure.web.servlet.MultipartResolver org.springframework.boot.autoconfigure.web.servlet.MultipartResolver ( MultipartResolver org.springframework.boot.autoconfigure.web.servlet.MultipartResolver ) { return org.springframework.boot.autoconfigure.web.servlet.MultipartResolver ; }  <METHOD_END>
<METHOD_START> public void ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties , WebMvcProperties org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties , ObjectProvider < MultipartConfigElement > org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement> ) { this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties = org.springframework.boot.autoconfigure.web.servlet.ServerProperties ; this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties = org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties ; this . org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement = org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = java.lang.String ) @ ConditionalOnBean ( value = DispatcherServlet .class , name = java.lang.String ) public org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> < DispatcherServlet > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> ( DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) { ServletRegistrationBean < DispatcherServlet > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> = new ServletRegistrationBean <> ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet , this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getServlet ( ) . getServletMapping ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> . setName ( java.lang.String ) ; org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> . setLoadOnStartup ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getServlet ( ) . getLoadOnStartup ( ) ) ; if ( this . org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement != null ) { org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> . setMultipartConfig ( this . org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement ) ; } return org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.web.servlet.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.web.servlet.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory = org.springframework.boot.autoconfigure.web.servlet.ConditionContext . getBeanFactory ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory . getBeanNamesForType ( DispatcherServlet .class , false , false ) ) ; if ( java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } if ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } if ( java.util.List<java.lang.String> . boolean ( ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING , STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ) . append ( STRING + java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.web.servlet.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.web.servlet.AnnotatedTypeMetadata ) { ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory = org.springframework.boot.autoconfigure.web.servlet.ConditionContext . getBeanFactory ( ) ; ConditionOutcome org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome = org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory ) ; if ( ! org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome . isMatch ( ) ) { return org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome ; } return org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory . getBeanNamesForType ( DispatcherServlet .class , false , false ) ) ; boolean boolean = org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ; if ( boolean && ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder ( ) . found ( STRING ) . items ( java.lang.String ) ) ; } return ConditionOutcome . match ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome org.springframework.boot.autoconfigure.web.servlet.ConditionOutcome ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage.Builder ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory . getBeanNamesForType ( ServletRegistrationBean .class , false , false ) ) ; boolean boolean = org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ; if ( java.util.List<java.lang.String> . boolean ( ) ) { if ( boolean ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } return ConditionOutcome . match ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } if ( java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } if ( boolean ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ) . append ( STRING + java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private ConditionMessage . ConditionMessage.Builder ConditionMessage.Builder ( ) { return ConditionMessage . forCondition ( STRING ) ; }  <METHOD_END>
