<METHOD_START> @ Test public void void ( ) { for ( OqlKeyword org.springframework.data.gemfire.repository.OqlKeyword : OqlKeyword . values ( ) ) { assertThat ( OqlKeyword . valueOfIgnoreCase ( org.springframework.data.gemfire.repository.OqlKeyword . getKeyword ( ) ) ) . isEqualTo ( org.springframework.data.gemfire.repository.OqlKeyword ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( OqlKeyword . valueOfIgnoreCase ( STRING ) ) . isEqualTo ( OqlKeyword . AND ) ; assertThat ( OqlKeyword . valueOfIgnoreCase ( STRING ) ) . isEqualTo ( OqlKeyword . AS ) ; assertThat ( OqlKeyword . valueOfIgnoreCase ( STRING ) ) . isEqualTo ( OqlKeyword . COUNT ) ; assertThat ( OqlKeyword . valueOfIgnoreCase ( STRING ) ) . isEqualTo ( OqlKeyword . DISTINCT ) ; assertThat ( OqlKeyword . valueOfIgnoreCase ( STRING ) ) . isEqualTo ( OqlKeyword . ORDER_BY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { org.springframework.data.gemfire.repository.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; OqlKeyword . valueOfIgnoreCase ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( OqlKeyword org.springframework.data.gemfire.repository.OqlKeyword : OqlKeyword . values ( ) ) { if ( ! OqlKeyword . ORDER_BY . equals ( org.springframework.data.gemfire.repository.OqlKeyword ) ) { assertThat ( org.springframework.data.gemfire.repository.OqlKeyword . getKeyword ( ) ) . isEqualTo ( org.springframework.data.gemfire.repository.OqlKeyword . name ( ) ) ; } } }  <METHOD_END>
