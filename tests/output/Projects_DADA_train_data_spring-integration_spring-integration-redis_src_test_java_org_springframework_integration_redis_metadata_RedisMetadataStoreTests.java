<METHOD_START> @ Before @ After public void void ( ) { this . createStringRedisTemplate ( this . getConnectionFactoryForTest ( ) ) . delete ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory ) ; java.lang.String java.lang.String = org.springframework.integration.redis.metadata.RedisMetadataStore . get ( STRING ) ; assertNull ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; org.springframework.integration.redis.metadata.RedisMetadataStore . put ( STRING , STRING ) ; StringRedisTemplate org.springframework.integration.redis.metadata.StringRedisTemplate = new StringRedisTemplate ( org.springframework.integration.redis.metadata.RedisConnectionFactory ) ; BoundHashOperations < java.lang.String , java.lang.Object , java.lang.Object > org.springframework.integration.redis.metadata.BoundHashOperations<java.lang.String,java.lang.Object,java.lang.Object> = org.springframework.integration.redis.metadata.StringRedisTemplate . boundHashOps ( STRING ) ; assertEquals ( STRING , org.springframework.integration.redis.metadata.BoundHashOperations<java.lang.String,java.lang.Object,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; org.springframework.integration.redis.metadata.RedisMetadataStore . put ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.integration.redis.metadata.RedisMetadataStore . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; org.springframework.integration.redis.metadata.RedisMetadataStore . put ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.integration.redis.metadata.RedisMetadataStore . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; try { org.springframework.integration.redis.metadata.RedisMetadataStore . put ( STRING , null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; org.springframework.integration.redis.metadata.RedisMetadataStore . put ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.integration.redis.metadata.RedisMetadataStore . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; try { org.springframework.integration.redis.metadata.RedisMetadataStore . put ( null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; try { org.springframework.integration.redis.metadata.RedisMetadataStore . get ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.metadata.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMetadataStore org.springframework.integration.redis.metadata.RedisMetadataStore = new RedisMetadataStore ( org.springframework.integration.redis.metadata.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.integration.redis.metadata.RedisMetadataStore . put ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.integration.redis.metadata.RedisMetadataStore . remove ( java.lang.String ) ) ; assertNull ( org.springframework.integration.redis.metadata.RedisMetadataStore . remove ( java.lang.String ) ) ; }  <METHOD_END>
