<METHOD_START> public void void ( DestinationResolver org.springframework.jms.support.destination.DestinationResolver ) { Assert . notNull ( org.springframework.jms.support.destination.DestinationResolver , STRING ) ; this . org.springframework.jms.support.destination.DestinationResolver = org.springframework.jms.support.destination.DestinationResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.support.destination.DestinationResolver org.springframework.jms.support.destination.DestinationResolver ( ) { return this . org.springframework.jms.support.destination.DestinationResolver ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.destination.Destination org.springframework.jms.support.destination.Destination ( Session org.springframework.jms.support.destination.Session , java.lang.String java.lang.String ) throws org.springframework.jms.support.destination.JMSException { return org.springframework.jms.support.destination.DestinationResolver ( ) . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.destination.Message org.springframework.jms.support.destination.Message ( MessageConsumer org.springframework.jms.support.destination.MessageConsumer , long long ) throws org.springframework.jms.support.destination.JMSException { if ( long > NUMBER ) { return org.springframework.jms.support.destination.MessageConsumer . receive ( long ) ; } else if ( long < NUMBER ) { return org.springframework.jms.support.destination.MessageConsumer . receiveNoWait ( ) ; } else { return org.springframework.jms.support.destination.MessageConsumer . receive ( ) ; } }  <METHOD_END>
