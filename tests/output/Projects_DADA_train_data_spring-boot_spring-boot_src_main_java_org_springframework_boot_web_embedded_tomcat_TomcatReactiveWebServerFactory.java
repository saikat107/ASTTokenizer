<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( int int ) { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.embedded.tomcat.WebServer org.springframework.boot.web.embedded.tomcat.WebServer ( HttpHandler org.springframework.boot.web.embedded.tomcat.HttpHandler ) { Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat = org.springframework.boot.web.embedded.tomcat.Tomcat ( ) ; TomcatHttpHandlerAdapter org.springframework.boot.web.embedded.tomcat.TomcatHttpHandlerAdapter = new TomcatHttpHandlerAdapter ( org.springframework.boot.web.embedded.tomcat.HttpHandler ) ; void ( org.springframework.boot.web.embedded.tomcat.Tomcat . getHost ( ) , org.springframework.boot.web.embedded.tomcat.TomcatHttpHandlerAdapter ) ; return new TomcatWebServer ( org.springframework.boot.web.embedded.tomcat.Tomcat , getPort ( ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.tomcat.Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat ( ) { Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat = new Tomcat ( ) ; java.io.File java.io.File = createTempDir ( STRING ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . setBaseDir ( java.io.File . java.lang.String ( ) ) ; Connector org.springframework.boot.web.embedded.tomcat.Connector = new Connector ( this . java.lang.String ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . getService ( ) . addConnector ( org.springframework.boot.web.embedded.tomcat.Connector ) ; void ( org.springframework.boot.web.embedded.tomcat.Connector ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . setConnector ( org.springframework.boot.web.embedded.tomcat.Connector ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . getHost ( ) . setAutoDeploy ( false ) ; return org.springframework.boot.web.embedded.tomcat.Tomcat ; }  <METHOD_END>
<METHOD_START> protected void void ( Host org.springframework.boot.web.embedded.tomcat.Host , TomcatHttpHandlerAdapter org.springframework.boot.web.embedded.tomcat.TomcatHttpHandlerAdapter ) { java.io.File java.io.File = createTempDir ( STRING ) ; TomcatEmbeddedContext org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext = new TomcatEmbeddedContext ( ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setPath ( STRING ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setDocBase ( java.io.File . java.lang.String ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addLifecycleListener ( new Tomcat . Tomcat ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setParentClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ; WebappLoader org.springframework.boot.web.embedded.tomcat.WebappLoader = new WebappLoader ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . getParentClassLoader ( ) ) ; org.springframework.boot.web.embedded.tomcat.WebappLoader . setLoaderClass ( TomcatEmbeddedWebappClassLoader .class . java.lang.String ( ) ) ; org.springframework.boot.web.embedded.tomcat.WebappLoader . setDelegate ( true ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setLoader ( org.springframework.boot.web.embedded.tomcat.WebappLoader ) ; Tomcat . addServlet ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext , STRING , org.springframework.boot.web.embedded.tomcat.TomcatHttpHandlerAdapter ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addServletMappingDecoded ( STRING , STRING ) ; org.springframework.boot.web.embedded.tomcat.Host . addChild ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Connector org.springframework.boot.web.embedded.tomcat.Connector ) { int int = ( getPort ( ) >= NUMBER ? getPort ( ) : NUMBER ) ; org.springframework.boot.web.embedded.tomcat.Connector . setPort ( int ) ; if ( StringUtils . hasText ( this . getServerHeader ( ) ) ) { org.springframework.boot.web.embedded.tomcat.Connector . setAttribute ( STRING , this . getServerHeader ( ) ) ; } if ( org.springframework.boot.web.embedded.tomcat.Connector . getProtocolHandler ( ) instanceof AbstractProtocol ) { void ( ( AbstractProtocol < ? > ) org.springframework.boot.web.embedded.tomcat.Connector . getProtocolHandler ( ) ) ; } org.springframework.boot.web.embedded.tomcat.Connector . setProperty ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractProtocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractProtocol<?> ) { if ( getAddress ( ) != null ) { org.springframework.boot.web.embedded.tomcat.AbstractProtocol<> . setAddress ( getAddress ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.embedded.tomcat.TomcatWebServer org.springframework.boot.web.embedded.tomcat.TomcatWebServer ( Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat ) { return new TomcatWebServer ( org.springframework.boot.web.embedded.tomcat.Tomcat , getPort ( ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasLength ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
