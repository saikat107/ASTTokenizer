<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.jpa.repository.config.ApplicationContext ) throws org.springframework.data.jpa.repository.config.BeansException { this . org.springframework.data.jpa.repository.config.ListableBeanFactory = org.springframework.data.jpa.repository.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return JpaMetamodelMappingContext .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.config.JpaMetamodelMappingContext org.springframework.data.jpa.repository.config.JpaMetamodelMappingContext ( ) java.lang.Exception { java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> < Metamodel > java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> = java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> ( ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) ; for ( Metamodel org.springframework.data.jpa.repository.config.Metamodel : java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> ) { for ( ManagedType < ? > org.springframework.data.jpa.repository.config.ManagedType<?> : org.springframework.data.jpa.repository.config.Metamodel . getManagedTypes ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.repository.config.ManagedType<> . getJavaType ( ) ; if ( java.lang.Class<> != null ) { java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; } } } JpaMetamodelMappingContext org.springframework.data.jpa.repository.config.JpaMetamodelMappingContext = new JpaMetamodelMappingContext ( java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> ) ; org.springframework.data.jpa.repository.config.JpaMetamodelMappingContext . setInitialEntitySet ( java.util.Set<java.lang.Class<?>> ) ; org.springframework.data.jpa.repository.config.JpaMetamodelMappingContext . initialize ( ) ; return org.springframework.data.jpa.repository.config.JpaMetamodelMappingContext ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> < Metamodel > java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> ( ) { java.util.Collection<org.springframework.data.jpa.repository.config.EntityManagerFactory> < EntityManagerFactory > java.util.Collection<org.springframework.data.jpa.repository.config.EntityManagerFactory> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.data.jpa.repository.config.ListableBeanFactory , EntityManagerFactory .class ) . values ( ) ; java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> < Metamodel > java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> = new java.util.HashSet<org.springframework.data.jpa.repository.config.Metamodel> < Metamodel > ( java.util.Collection<org.springframework.data.jpa.repository.config.EntityManagerFactory> . size ( ) ) ; for ( EntityManagerFactory org.springframework.data.jpa.repository.config.EntityManagerFactory : java.util.Collection<org.springframework.data.jpa.repository.config.EntityManagerFactory> ) { java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> . add ( org.springframework.data.jpa.repository.config.EntityManagerFactory . getMetamodel ( ) ) ; } return java.util.Set<org.springframework.data.jpa.repository.config.Metamodel> ; }  <METHOD_END>
