<METHOD_START> @ java.lang.Override protected void void ( ConfigurableListableBeanFactory org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory ) { org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . addBeanPostProcessor ( new WebApplicationContextServletContextAwareProcessor ( this ) ) ; org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . ignoreDependencyInterface ( ServletContextAware .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) org.springframework.boot.web.servlet.context.BeansException , java.lang.IllegalStateException { try { super. refresh ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onRefresh ( ) ; try { void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ApplicationContextException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. finishRefresh ( ) ; WebServer org.springframework.boot.web.servlet.context.WebServer = org.springframework.boot.web.servlet.context.WebServer ( ) ; if ( org.springframework.boot.web.servlet.context.WebServer != null ) { publishEvent ( new ServletWebServerInitializedEvent ( this , org.springframework.boot.web.servlet.context.WebServer ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onClose ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { WebServer org.springframework.boot.web.servlet.context.WebServer = this . org.springframework.boot.web.servlet.context.WebServer ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = getServletContext ( ) ; if ( org.springframework.boot.web.servlet.context.WebServer == null && org.springframework.boot.web.servlet.context.ServletContext == null ) { ServletWebServerFactory org.springframework.boot.web.servlet.context.ServletWebServerFactory = org.springframework.boot.web.servlet.context.ServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.context.WebServer = org.springframework.boot.web.servlet.context.ServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.ServletContextInitializer ( ) ) ; } else if ( org.springframework.boot.web.servlet.context.ServletContext != null ) { try { org.springframework.boot.web.servlet.ServletContextInitializer ( ) . onStartup ( org.springframework.boot.web.servlet.context.ServletContext ) ; } catch ( ServletException org.springframework.boot.web.servlet.context.ServletException ) { throw new ApplicationContextException ( STRING , org.springframework.boot.web.servlet.context.ServletException ) ; } } initPropertySources ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.context.ServletWebServerFactory org.springframework.boot.web.servlet.context.ServletWebServerFactory ( ) { java.lang.String [] java.lang.String[] = getBeanFactory ( ) . getBeanNamesForType ( ServletWebServerFactory .class ) ; if ( java.lang.String[] . int == NUMBER ) { throw new ApplicationContextException ( STRING + STRING ) ; } if ( java.lang.String[] . int > NUMBER ) { throw new ApplicationContextException ( STRING + STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; } return getBeanFactory ( ) . getBean ( java.lang.String[] [ NUMBER ] , ServletWebServerFactory .class ) ; }  <METHOD_END>
<METHOD_START> private org . springframework . boot . web . servlet . org.springframework.boot.web.servlet.ServletContextInitializer org.springframework.boot.web.servlet.ServletContextInitializer ( ) { return new ServletContextInitializer ( ) { @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.context.ServletContext ) throws org.springframework.boot.web.servlet.context.ServletException { void ( org.springframework.boot.web.servlet.context.ServletContext ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.context.ServletContext ) throws org.springframework.boot.web.servlet.context.ServletException { void ( org.springframework.boot.web.servlet.context.ServletContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( ServletContext org.springframework.boot.web.servlet.context.ServletContext ) throws org.springframework.boot.web.servlet.context.ServletException { void ( org.springframework.boot.web.servlet.context.ServletContext ) ; ConfigurableListableBeanFactory org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory = getBeanFactory ( ) ; org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.ExistingWebApplicationScopes org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.ExistingWebApplicationScopes = new org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.ExistingWebApplicationScopes ( org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory ) ; WebApplicationContextUtils . registerWebApplicationScopes ( org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory , getServletContext ( ) ) ; org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.ExistingWebApplicationScopes . void ( ) ; WebApplicationContextUtils . registerEnvironmentBeans ( org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory , getServletContext ( ) ) ; for ( ServletContextInitializer org.springframework.boot.web.servlet.context.ServletContextInitializer : java.util.Collection<org.springframework.boot.web.servlet.context.ServletContextInitializer> ( ) ) { org.springframework.boot.web.servlet.context.ServletContextInitializer . onStartup ( org.springframework.boot.web.servlet.context.ServletContext ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Collection<org.springframework.boot.web.servlet.context.ServletContextInitializer> < ServletContextInitializer > java.util.Collection<org.springframework.boot.web.servlet.context.ServletContextInitializer> ( ) { return new ServletContextInitializerBeans ( getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletContext org.springframework.boot.web.servlet.context.ServletContext ) { java.lang.Object java.lang.Object = org.springframework.boot.web.servlet.context.ServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; if ( java.lang.Object != null ) { if ( java.lang.Object == this ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } return; } Log org.springframework.boot.web.servlet.context.Log = LogFactory . getLog ( ContextLoader .class ) ; org.springframework.boot.web.servlet.context.ServletContext . log ( STRING ) ; try { org.springframework.boot.web.servlet.context.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , this ) ; if ( org.springframework.boot.web.servlet.context.Log . isDebugEnabled ( ) ) { org.springframework.boot.web.servlet.context.Log . debug ( STRING + WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + STRING ) ; } setServletContext ( org.springframework.boot.web.servlet.context.ServletContext ) ; if ( org.springframework.boot.web.servlet.context.Log . isInfoEnabled ( ) ) { long long = java.lang.System . long ( ) - getStartupDate ( ) ; org.springframework.boot.web.servlet.context.Log . info ( STRING + long + STRING ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.boot.web.servlet.context.Log . error ( STRING , java.lang.RuntimeException ) ; org.springframework.boot.web.servlet.context.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , java.lang.RuntimeException ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { org.springframework.boot.web.servlet.context.Log . error ( STRING , java.lang.Error ) ; org.springframework.boot.web.servlet.context.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , java.lang.Error ) ; throw java.lang.Error ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.context.WebServer org.springframework.boot.web.servlet.context.WebServer ( ) { WebServer org.springframework.boot.web.servlet.context.WebServer = this . org.springframework.boot.web.servlet.context.WebServer ; if ( org.springframework.boot.web.servlet.context.WebServer != null ) { org.springframework.boot.web.servlet.context.WebServer . start ( ) ; } return org.springframework.boot.web.servlet.context.WebServer ; }  <METHOD_END>
<METHOD_START> private void void ( ) { WebServer org.springframework.boot.web.servlet.context.WebServer = this . org.springframework.boot.web.servlet.context.WebServer ; if ( org.springframework.boot.web.servlet.context.WebServer != null ) { try { org.springframework.boot.web.servlet.context.WebServer . stop ( ) ; this . org.springframework.boot.web.servlet.context.WebServer = null ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.context.Resource org.springframework.boot.web.servlet.context.Resource ( java.lang.String java.lang.String ) { if ( getServletContext ( ) == null ) { return new ClassPathContextResource ( java.lang.String , getClassLoader ( ) ) ; } return new ServletContextResource ( getServletContext ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletConfig org.springframework.boot.web.servlet.context.ServletConfig ) { this . org.springframework.boot.web.servlet.context.ServletConfig = org.springframework.boot.web.servlet.context.ServletConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.servlet.context.ServletConfig org.springframework.boot.web.servlet.context.ServletConfig ( ) { return this . org.springframework.boot.web.servlet.context.ServletConfig ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.context.WebServer org.springframework.boot.web.servlet.context.WebServer ( ) { return this . org.springframework.boot.web.servlet.context.WebServer ; }  <METHOD_END>
<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory ) { this . org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory = org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { Scope org.springframework.boot.web.servlet.context.Scope = org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . getRegisteredScope ( java.lang.String ) ; if ( org.springframework.boot.web.servlet.context.Scope != null ) { this . java.util.Map<java.lang.String,org.springframework.boot.web.servlet.context.Scope> . put ( java.lang.String , org.springframework.boot.web.servlet.context.Scope ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.context.Scope> < java.lang.String , Scope > java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.context.Scope> : this . java.util.Map<java.lang.String,org.springframework.boot.web.servlet.context.Scope> . entrySet ( ) ) { if ( org.springframework.boot.web.servlet.context.Log . isInfoEnabled ( ) ) { org.springframework.boot.web.servlet.context.Log . info ( STRING + java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.context.Scope> . getKey ( ) ) ; } this . org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . registerScope ( java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.context.Scope> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.context.Scope> . getValue ( ) ) ; } }  <METHOD_END>
