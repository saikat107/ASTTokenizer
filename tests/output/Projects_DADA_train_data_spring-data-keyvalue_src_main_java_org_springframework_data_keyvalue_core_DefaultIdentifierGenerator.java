<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( TypeInformation < T > org.springframework.data.keyvalue.core.TypeInformation<T> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.keyvalue.core.TypeInformation<T> . getType ( ) ; if ( ClassUtils . isAssignable ( java.util.UUID .class , java.lang.Class<> ) ) { return ( T ) java.util.UUID . java.util.UUID ( ) ; } else if ( ClassUtils . isAssignable ( java.lang.String .class , java.lang.Class<> ) ) { return ( T ) java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; } else if ( ClassUtils . isAssignable ( java.lang.Integer .class , java.lang.Class<> ) ) { return ( T ) java.lang.Integer . java.lang.Integer ( java.security.SecureRandom ( ) . int ( ) ) ; } else if ( ClassUtils . isAssignable ( java.lang.Long .class , java.lang.Class<> ) ) { return ( T ) java.lang.Long . java.lang.Long ( java.security.SecureRandom ( ) . long ( ) ) ; } throw new InvalidDataAccessApiUsageException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.security.SecureRandom java.security.SecureRandom ( ) { java.security.SecureRandom java.security.SecureRandom = this . java.util.concurrent.atomic.AtomicReference<java.security.SecureRandom> . java.security.SecureRandom ( ) ; if ( java.security.SecureRandom != null ) { return java.security.SecureRandom ; } for ( java.lang.String java.lang.String : org.springframework.data.keyvalue.core.DefaultIdentifierGenerator.OsTools . java.util.List<java.lang.String> ( ) ) { try { java.security.SecureRandom = java.security.SecureRandom . java.security.SecureRandom ( java.lang.String ) ; } catch ( java.security.NoSuchAlgorithmException java.security.NoSuchAlgorithmException ) { } } if ( java.security.SecureRandom == null ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , StringUtils . collectionToCommaDelimitedString ( org.springframework.data.keyvalue.core.DefaultIdentifierGenerator.OsTools . java.util.List<java.lang.String> ( ) ) ) ) ; } this . java.util.concurrent.atomic.AtomicReference<java.security.SecureRandom> . boolean ( null , java.security.SecureRandom ) ; return java.security.SecureRandom ; }  <METHOD_END>
<METHOD_START> static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.lang.String . int ( STRING ) >= NUMBER ? java.util.List<java.lang.String> : java.util.List<java.lang.String> ; }  <METHOD_END>
