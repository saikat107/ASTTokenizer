<METHOD_START> void ( ) { this( java.lang.Thread . java.lang.Thread ( ) ); }  <METHOD_END>
<METHOD_START> void ( java.lang.Thread java.lang.Thread ) { Assert . notNull ( java.lang.Thread , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Thread java.lang.Thread ) { for ( java.lang.StackTraceElement java.lang.StackTraceElement : java.lang.Thread . java.lang.StackTraceElement[] ( ) ) { if ( STRING . boolean ( java.lang.StackTraceElement . java.lang.String ( ) ) ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.StackTraceElement ) ; if ( java.lang.reflect.Method != null ) { return java.lang.reflect.Method ; } } } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.StackTraceElement java.lang.StackTraceElement ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.StackTraceElement . java.lang.String ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ; if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { return java.lang.reflect.Method ; } } catch ( java.lang.Exception java.lang.Exception ) { } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) ; }  <METHOD_END>
