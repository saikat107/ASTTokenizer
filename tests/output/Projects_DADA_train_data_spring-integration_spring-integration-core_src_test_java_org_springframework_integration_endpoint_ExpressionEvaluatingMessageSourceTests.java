<METHOD_START> @ Test public void void ( ) { Expression org.springframework.integration.endpoint.Expression = new LiteralExpression ( STRING ) ; ExpressionEvaluatingMessageSource < java.lang.String > org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.String> = new ExpressionEvaluatingMessageSource < java.lang.String > ( org.springframework.integration.endpoint.Expression , java.lang.String .class ) ; org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.String> . setBeanFactory ( mock ( BeanFactory .class ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.String> . receive ( ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { Expression org.springframework.integration.endpoint.Expression = new LiteralExpression ( STRING ) ; ExpressionEvaluatingMessageSource < java.lang.Integer > org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.Integer> = new ExpressionEvaluatingMessageSource < java.lang.Integer > ( org.springframework.integration.endpoint.Expression , java.lang.Integer .class ) ; org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.Integer> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.Integer> . receive ( ) ; }  <METHOD_END>
