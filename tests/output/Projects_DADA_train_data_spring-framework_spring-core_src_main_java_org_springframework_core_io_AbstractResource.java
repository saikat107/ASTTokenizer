<METHOD_START> @ java.lang.Override public boolean boolean ( ) { try { return java.io.File ( ) . boolean ( ) ; } catch ( java.io.IOException java.io.IOException ) { try { java.io.InputStream java.io.InputStream = getInputStream ( ) ; java.io.InputStream . void ( ) ; return true ; } catch ( java.lang.Throwable java.lang.Throwable ) { return false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( ) java.io.IOException { throw new java.io.FileNotFoundException ( getDescription ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) java.io.IOException { java.net.URL java.net.URL = java.net.URL ( ) ; try { return ResourceUtils . toURI ( java.net.URL ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new NestedIOException ( STRING + java.net.URL + STRING , java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.File java.io.File ( ) java.io.IOException { throw new java.io.FileNotFoundException ( getDescription ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.nio.channels.ReadableByteChannel java.nio.channels.ReadableByteChannel ( ) java.io.IOException { return java.nio.channels.Channels . java.nio.channels.ReadableByteChannel ( getInputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStream ( ) ; Assert . state ( java.io.InputStream != null , STRING ) ; try { long long = NUMBER ; byte [] byte[] = new byte [ NUMBER ] ; int int ; while ( ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { long += int ; } return long ; } finally { try { java.io.InputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) {			} } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { long long = java.io.File ( ) . long ( ) ; if ( long == NUMBER ) { throw new java.io.FileNotFoundException ( getDescription ( ) + STRING ) ; } return long ; }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( ) java.io.IOException { return java.io.File ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.Resource org.springframework.core.io.Resource ( java.lang.String java.lang.String ) throws java.io.IOException { throw new java.io.FileNotFoundException ( STRING + getDescription ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getDescription ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object == this || ( java.lang.Object instanceof Resource && ( ( Resource ) java.lang.Object ) . getDescription ( ) . equals ( getDescription ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return getDescription ( ) . hashCode ( ) ; }  <METHOD_END>
