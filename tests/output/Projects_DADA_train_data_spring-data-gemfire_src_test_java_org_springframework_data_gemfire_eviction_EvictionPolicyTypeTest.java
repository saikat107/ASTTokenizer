<METHOD_START> @ Test public void void ( ) { assertEquals ( EvictionAlgorithm . LRU_HEAP , EvictionPolicyType . getEvictionAlgorithm ( EvictionPolicyType . HEAP_PERCENTAGE ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , EvictionPolicyType . getEvictionAlgorithm ( EvictionPolicyType . MEMORY_SIZE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( EvictionPolicyType . getEvictionAlgorithm ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( EvictionAlgorithm . LRU_ENTRY , EvictionPolicyType . ENTRY_COUNT . getEvictionAlgorithm ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , EvictionPolicyType . HEAP_PERCENTAGE . getEvictionAlgorithm ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , EvictionPolicyType . MEMORY_SIZE . getEvictionAlgorithm ( ) ) ; assertEquals ( EvictionAlgorithm . NONE , EvictionPolicyType . NONE . getEvictionAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( EvictionPolicyType . ENTRY_COUNT , EvictionPolicyType . valueOf ( EvictionAlgorithm . LRU_ENTRY ) ) ; assertEquals ( EvictionPolicyType . HEAP_PERCENTAGE , EvictionPolicyType . valueOf ( EvictionAlgorithm . LRU_HEAP ) ) ; assertEquals ( EvictionPolicyType . MEMORY_SIZE , EvictionPolicyType . valueOf ( EvictionAlgorithm . LRU_MEMORY ) ) ; assertEquals ( EvictionPolicyType . NONE , EvictionPolicyType . valueOf ( EvictionAlgorithm . NONE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertNull ( EvictionPolicyType . valueOf ( EvictionAlgorithm . LIFO_ENTRY ) ) ; assertNull ( EvictionPolicyType . valueOf ( EvictionAlgorithm . LIFO_MEMORY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( EvictionPolicyType . valueOf ( ( EvictionAlgorithm ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( EvictionPolicyType . ENTRY_COUNT , EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( EvictionPolicyType . HEAP_PERCENTAGE , EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( EvictionPolicyType . MEMORY_SIZE , EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( EvictionPolicyType . NONE , EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( EvictionPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( EvictionPolicyType . valueOfIgnoreCase ( null ) ) ; }  <METHOD_END>
