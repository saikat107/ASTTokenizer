<METHOD_START> public void ( com . com.jcraft . com.jcraft . com.jcraft com.jcraft.jsch.Session ) { Assert . notNull ( com.jcraft.jsch.Session , STRING ) ; this . com.jcraft.jsch.Session = com.jcraft.jsch.Session ; this . org.springframework.integration.sftp.session.JSchSessionWrapper = null ; }  <METHOD_END>
<METHOD_START> public void ( JSchSessionWrapper org.springframework.integration.sftp.session.JSchSessionWrapper ) { Assert . notNull ( org.springframework.integration.sftp.session.JSchSessionWrapper , STRING ) ; this . com.jcraft.jsch.Session = org.springframework.integration.sftp.session.JSchSessionWrapper . getSession ( ) ; this . org.springframework.integration.sftp.session.JSchSessionWrapper = org.springframework.integration.sftp.session.JSchSessionWrapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { Assert . state ( this . org.springframework.integration.sftp.session.ChannelSftp != null , STRING ) ; try { this . org.springframework.integration.sftp.session.ChannelSftp . rm ( java.lang.String ) ; return true ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING , org.springframework.integration.sftp.session.SftpException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.sftp.session.LsEntry [] org.springframework.integration.sftp.session.LsEntry[] ( java.lang.String java.lang.String ) throws java.io.IOException { Assert . state ( this . org.springframework.integration.sftp.session.ChannelSftp != null , STRING ) ; try { java.util.Vector<?> < ? > java.util.Vector<?> = this . org.springframework.integration.sftp.session.ChannelSftp . ls ( java.lang.String ) ; if ( java.util.Vector<> != null ) { LsEntry [] org.springframework.integration.sftp.session.LsEntry[] = new LsEntry [ java.util.Vector<> . int ( ) ] ; for ( int int = NUMBER ; int < java.util.Vector<> . int ( ) ; int ++ ) { java.lang.Object java.lang.Object = java.util.Vector<> . get ( int ) ; Assert . state ( java.lang.Object instanceof LsEntry , STRING ) ; org.springframework.integration.sftp.session.LsEntry[] [ int ] = ( LsEntry ) java.lang.Object ; } return org.springframework.integration.sftp.session.LsEntry[] ; } } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING , org.springframework.integration.sftp.session.SftpException ) ; } return new LsEntry [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { LsEntry [] org.springframework.integration.sftp.session.LsEntry[] = this . org.springframework.integration.sftp.session.LsEntry[] ( java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( int int = NUMBER ; int < entries . length ; int ++ ) { java.lang.String java.lang.String = org.springframework.integration.sftp.session.LsEntry[] [ int ] . getFilename ( ) ; SftpATTRS org.springframework.integration.sftp.session.SftpATTRS = org.springframework.integration.sftp.session.LsEntry[] [ int ] . getAttrs ( ) ; if ( ! org.springframework.integration.sftp.session.SftpATTRS . isDir ( ) && ! org.springframework.integration.sftp.session.SftpATTRS . isLink ( ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } java.lang.String [] java.lang.String[] = new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ; return java.util.List<java.lang.String> . java.lang.String[] ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { Assert . state ( this . org.springframework.integration.sftp.session.ChannelSftp != null , STRING ) ; try { java.io.InputStream java.io.InputStream = this . org.springframework.integration.sftp.session.ChannelSftp . get ( java.lang.String ) ; FileCopyUtils . copy ( java.io.InputStream , java.io.OutputStream ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING + java.lang.String , org.springframework.integration.sftp.session.SftpException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.io.IOException { try { return this . org.springframework.integration.sftp.session.ChannelSftp . get ( java.lang.String ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING + java.lang.String , org.springframework.integration.sftp.session.SftpException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) java.io.IOException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException { Assert . state ( this . org.springframework.integration.sftp.session.ChannelSftp != null , STRING ) ; try { this . org.springframework.integration.sftp.session.ChannelSftp . put ( java.io.InputStream , java.lang.String ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING , org.springframework.integration.sftp.session.SftpException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException { Assert . state ( this . org.springframework.integration.sftp.session.ChannelSftp != null , STRING ) ; try { this . org.springframework.integration.sftp.session.ChannelSftp . put ( java.io.InputStream , java.lang.String , ChannelSftp . APPEND ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING , org.springframework.integration.sftp.session.SftpException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; if ( this . org.springframework.integration.sftp.session.JSchSessionWrapper != null ) { if ( this . org.springframework.integration.sftp.session.ChannelSftp != null ) { this . org.springframework.integration.sftp.session.ChannelSftp . disconnect ( ) ; } this . org.springframework.integration.sftp.session.JSchSessionWrapper . close ( ) ; } else { if ( this . com.jcraft.jsch.Session . isConnected ( ) ) { this . com.jcraft.jsch.Session . disconnect ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! this . boolean && this . com.jcraft.jsch.Session . isConnected ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { try { this . org.springframework.integration.sftp.session.ChannelSftp . rename ( java.lang.String , java.lang.String ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { if ( this . org.springframework.integration.sftp.session.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.sftp.session.Log . debug ( STRING + java.lang.String + STRING ) ; } try { this . boolean ( java.lang.String ) ; if ( this . org.springframework.integration.sftp.session.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.sftp.session.Log . debug ( STRING + java.lang.String + STRING ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new NestedIOException ( STRING + java.lang.String , java.io.IOException ) ; } try { this . org.springframework.integration.sftp.session.ChannelSftp . rename ( java.lang.String , java.lang.String ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING + java.lang.String + STRING + java.lang.String , org.springframework.integration.sftp.session.SftpException ) ; } } if ( this . org.springframework.integration.sftp.session.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.sftp.session.Log . debug ( STRING + java.lang.String + STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { try { this . org.springframework.integration.sftp.session.ChannelSftp . mkdir ( java.lang.String ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING + java.lang.String + STRING , org.springframework.integration.sftp.session.SftpException ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { try { this . org.springframework.integration.sftp.session.ChannelSftp . rmdir ( java.lang.String ) ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { throw new NestedIOException ( STRING + java.lang.String + STRING , org.springframework.integration.sftp.session.SftpException ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { try { this . org.springframework.integration.sftp.session.ChannelSftp . lstat ( java.lang.String ) ; return true ; } catch ( SftpException org.springframework.integration.sftp.session.SftpException ) { } return false ; }  <METHOD_END>
<METHOD_START> void void ( ) { try { if ( ! this . com.jcraft.jsch.Session . isConnected ( ) ) { this . com.jcraft.jsch.Session . connect ( ) ; } this . org.springframework.integration.sftp.session.ChannelSftp = ( ChannelSftp ) this . com.jcraft.jsch.Session . openChannel ( STRING ) ; if ( this . org.springframework.integration.sftp.session.ChannelSftp != null && ! this . org.springframework.integration.sftp.session.ChannelSftp . isConnected ( ) ) { this . org.springframework.integration.sftp.session.ChannelSftp . connect ( ) ; } } catch ( JSchException org.springframework.integration.sftp.session.JSchException ) { this . void ( ) ; throw new java.lang.IllegalStateException ( STRING , org.springframework.integration.sftp.session.JSchException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.sftp.session.ChannelSftp org.springframework.integration.sftp.session.ChannelSftp ( ) { return this . org.springframework.integration.sftp.session.ChannelSftp ; }  <METHOD_END>
