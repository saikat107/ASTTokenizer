<METHOD_START> @ Test public void void ( ) { EntityInformation < org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Sample , java.io.Serializable > org.springframework.data.repository.core.support.EntityInformation<org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Sample,java.io.Serializable> = org.springframework.data.repository.core.support.EntityInformation<org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Sample,java.io.Serializable> ( org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Sample .class ) ; assertThat ( org.springframework.data.repository.core.support.EntityInformation<org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Sample,java.io.Serializable> . getIdType ( ) ) . isEqualTo ( java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.repository.core.support.EntityInformation<org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Unannotated,java.io.Serializable> ( org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Unannotated .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId = new org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId ( ) ; EntityInformation < org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId , java.io.Serializable > org.springframework.data.repository.core.support.EntityInformation<org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId,java.io.Serializable> = new ReflectionEntityInformation <> ( org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId .class ) ; assertThat ( org.springframework.data.repository.core.support.EntityInformation<org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId,java.io.Serializable> . isNew ( org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId ) ) . isTrue ( ) ; org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId . long = NUMBER ; assertThat ( org.springframework.data.repository.core.support.EntityInformation<org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId,java.io.Serializable> . isNew ( org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.PrimitiveId ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new ReflectionEntityInformation <> ( org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Sample .class ) . isNew ( new org.springframework.data.repository.core.support.ReflectionEntityInformationUnitTests.Sample ( ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.data.repository.core.support.EntityInformation<T,java.io.Serializable> < T , java.io.Serializable > org.springframework.data.repository.core.support.EntityInformation<T,java.io.Serializable> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new ReflectionEntityInformation <> ( java.lang.Class<T> , Id .class ) ; }  <METHOD_END>
