<METHOD_START> public void ( ListableBeanFactory org.springframework.data.repository.core.support.ListableBeanFactory , java.lang.String java.lang.String , boolean boolean ) { Assert . notNull ( org.springframework.data.repository.core.support.ListableBeanFactory , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.data.repository.core.support.BeanFactory = org.springframework.data.repository.core.support.ListableBeanFactory ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ProxyFactory org.springframework.data.repository.core.support.ProxyFactory , RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation ) { org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource = new org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource ( ) ; org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource . void ( org.springframework.data.repository.core.support.RepositoryInformation ) ; org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource . void ( boolean ) ; TransactionInterceptor org.springframework.data.repository.core.support.TransactionInterceptor = new TransactionInterceptor ( null , org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource ) ; org.springframework.data.repository.core.support.TransactionInterceptor . setTransactionManagerBeanName ( java.lang.String ) ; org.springframework.data.repository.core.support.TransactionInterceptor . setBeanFactory ( org.springframework.data.repository.core.support.BeanFactory ) ; org.springframework.data.repository.core.support.TransactionInterceptor . afterPropertiesSet ( ) ; org.springframework.data.repository.core.support.ProxyFactory . addAdvice ( org.springframework.data.repository.core.support.TransactionInterceptor ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> = new java.util.LinkedHashSet <> ( NUMBER ) ; this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> . add ( new SpringTransactionAnnotationParser ( ) ) ; if ( boolean ) { this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> . add ( new JtaTransactionAnnotationParser ( ) ) ; } if ( boolean ) { this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> . add ( new Ejb3TransactionAnnotationParser ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( TransactionAnnotationParser org.springframework.data.repository.core.support.TransactionAnnotationParser ) { this . boolean = true ; Assert . notNull ( org.springframework.data.repository.core.support.TransactionAnnotationParser , STRING ) ; this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> = java.util.Collections . java.util.Set ( org.springframework.data.repository.core.support.TransactionAnnotationParser ) ; }  <METHOD_END>
<METHOD_START> public void ( TransactionAnnotationParser ... org.springframework.data.repository.core.support.TransactionAnnotationParser[] ) { this . boolean = true ; Assert . notEmpty ( org.springframework.data.repository.core.support.TransactionAnnotationParser[] , STRING ) ; java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> < TransactionAnnotationParser > java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> = new java.util.LinkedHashSet <> ( annotationParsers . length ) ; java.util.Collections . boolean ( java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> , org.springframework.data.repository.core.support.TransactionAnnotationParser[] ) ; this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> = java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> < TransactionAnnotationParser > java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> ) { this . boolean = true ; Assert . notEmpty ( java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> , STRING ) ; this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> = java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.repository.core.support.TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method ) { return org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.repository.core.support.TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.repository.core.support.TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { for ( TransactionAnnotationParser org.springframework.data.repository.core.support.TransactionAnnotationParser : this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> ) { TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAnnotationParser . parseTransactionAnnotation ( java.lang.reflect.AnnotatedElement ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute != null ) { return org.springframework.data.repository.core.support.TransactionAttribute ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource ) ) { return false ; } org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource = ( org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource ) java.lang.Object ; return ( this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> . equals ( org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> ) && this . boolean == org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.CustomAnnotationTransactionAttributeSource . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Set<org.springframework.data.repository.core.support.TransactionAnnotationParser> . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation ) { this . org.springframework.data.repository.core.support.RepositoryInformation = org.springframework.data.repository.core.support.RepositoryInformation ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.core.support.TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.Object java.lang.Object = this . java.util.Map<java.lang.Object,org.springframework.data.repository.core.support.TransactionAttribute> . get ( java.lang.Object ) ; if ( java.lang.Object != null ) { if ( java.lang.Object == org.springframework.data.repository.core.support.TransactionAttribute ) { return null ; } else { return ( TransactionAttribute ) java.lang.Object ; } } else { TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute == null ) { this . java.util.Map<java.lang.Object,org.springframework.data.repository.core.support.TransactionAttribute> . put ( java.lang.Object , org.springframework.data.repository.core.support.TransactionAttribute ) ; } else { if ( org.springframework.data.repository.core.support.Logger . isDebugEnabled ( ) ) { org.springframework.data.repository.core.support.Logger . debug ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING + org.springframework.data.repository.core.support.TransactionAttribute ) ; } this . java.util.Map<java.lang.Object,org.springframework.data.repository.core.support.TransactionAttribute> . put ( java.lang.Object , org.springframework.data.repository.core.support.TransactionAttribute ) ; } return org.springframework.data.repository.core.support.TransactionAttribute ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.AbstractFallbackTransactionAttributeSource.DefaultCacheKey ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.core.support.TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute = null ; if ( java.lang.reflect.Method != java.lang.reflect.Method ) { org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute != null ) { return org.springframework.data.repository.core.support.TransactionAttribute ; } org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute != null || ! boolean ) { return org.springframework.data.repository.core.support.TransactionAttribute ; } } org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute != null ) { return org.springframework.data.repository.core.support.TransactionAttribute ; } org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute != null ) { return org.springframework.data.repository.core.support.TransactionAttribute ; } if ( ! boolean ) { return null ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ; if ( java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { return null ; } org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute != null ) { return org.springframework.data.repository.core.support.TransactionAttribute ; } org.springframework.data.repository.core.support.TransactionAttribute = org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; if ( org.springframework.data.repository.core.support.TransactionAttribute != null ) { return org.springframework.data.repository.core.support.TransactionAttribute ; } return null ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.repository.core.support.TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.repository.core.support.TransactionAttribute org.springframework.data.repository.core.support.TransactionAttribute ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.AbstractFallbackTransactionAttributeSource.DefaultCacheKey ) ) { return false ; } org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.AbstractFallbackTransactionAttributeSource.DefaultCacheKey org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.AbstractFallbackTransactionAttributeSource.DefaultCacheKey = ( org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.AbstractFallbackTransactionAttributeSource.DefaultCacheKey ) java.lang.Object ; return this . java.lang.reflect.Method . boolean ( org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.AbstractFallbackTransactionAttributeSource.DefaultCacheKey . java.lang.reflect.Method ) && ObjectUtils . nullSafeEquals ( this . java.lang.Class<> , org.springframework.data.repository.core.support.TransactionalRepositoryProxyPostProcessor.AbstractFallbackTransactionAttributeSource.DefaultCacheKey . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.reflect.Method . int ( ) * NUMBER + ( this . java.lang.Class<> != null ? this . java.lang.Class<> . int ( ) : NUMBER ) ; }  <METHOD_END>
