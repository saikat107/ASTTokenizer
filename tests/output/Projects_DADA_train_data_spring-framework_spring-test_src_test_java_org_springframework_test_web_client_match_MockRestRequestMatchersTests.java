<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . requestTo ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . requestTo ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . requestTo ( containsString ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setMethod ( HttpMethod . GET ) ; MockRestRequestMatchers . method ( HttpMethod . GET ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setMethod ( HttpMethod . POST ) ; MockRestRequestMatchers . method ( HttpMethod . GET ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; MockRestRequestMatchers . header ( STRING , STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { MockRestRequestMatchers . header ( STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; MockRestRequestMatchers . header ( STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; MockRestRequestMatchers . header ( STRING , containsString ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { MockRestRequestMatchers . header ( STRING , containsString ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; MockRestRequestMatchers . header ( STRING , containsString ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; MockRestRequestMatchers . header ( STRING , STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { MockRestRequestMatchers . header ( STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . put ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; MockRestRequestMatchers . header ( STRING , STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . queryParam ( STRING , STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . queryParam ( STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . queryParam ( STRING , STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . queryParam ( STRING , containsString ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . setURI ( new java.net.URI ( STRING ) ) ; MockRestRequestMatchers . queryParam ( STRING , containsString ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
