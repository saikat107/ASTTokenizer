<METHOD_START> public static org.springframework.core.type.classreading.AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes ( java.lang.Object java.lang.Object , java.lang.ClassLoader java.lang.ClassLoader , AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes , boolean boolean ) { if ( org.springframework.core.type.classreading.AnnotationAttributes == null ) { return null ; } AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes = new AnnotationAttributes ( org.springframework.core.type.classreading.AnnotationAttributes ) ; AnnotationUtils . postProcessAnnotationAttributes ( java.lang.Object , org.springframework.core.type.classreading.AnnotationAttributes , boolean ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.core.type.classreading.AnnotationAttributes . entrySet ( ) ) { try { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof AnnotationAttributes ) { java.lang.Object = org.springframework.core.type.classreading.AnnotationAttributes ( java.lang.Object , java.lang.ClassLoader , ( AnnotationAttributes ) java.lang.Object , boolean ) ; } else if ( java.lang.Object instanceof AnnotationAttributes [] ) { AnnotationAttributes [] org.springframework.core.type.classreading.AnnotationAttributes[] = ( AnnotationAttributes [] ) java.lang.Object ; for ( int int = NUMBER ; int < values . length ; int ++ ) { org.springframework.core.type.classreading.AnnotationAttributes[] [ int ] = org.springframework.core.type.classreading.AnnotationAttributes ( java.lang.Object , java.lang.ClassLoader , org.springframework.core.type.classreading.AnnotationAttributes[] [ int ] , boolean ) ; } java.lang.Object = org.springframework.core.type.classreading.AnnotationAttributes[] ; } else if ( java.lang.Object instanceof Type ) { java.lang.Object = ( boolean ? ( ( Type ) java.lang.Object ) . getClassName ( ) : java.lang.ClassLoader . java.lang.Class<?> ( ( ( Type ) java.lang.Object ) . getClassName ( ) ) ) ; } else if ( java.lang.Object instanceof Type [] ) { Type [] org.springframework.core.type.classreading.Type[] = ( Type [] ) java.lang.Object ; java.lang.Object [] java.lang.Object[] = ( boolean ? new java.lang.String [ array . length ] : new java.lang.Class<?> < ? > [ array . length ] ) ; for ( int int = NUMBER ; int < array . length ; int ++ ) { java.lang.Object[] [ int ] = ( boolean ? org.springframework.core.type.classreading.Type[] [ int ] . getClassName ( ) : java.lang.ClassLoader . java.lang.Class<?> ( org.springframework.core.type.classreading.Type[] [ int ] . getClassName ( ) ) ) ; } java.lang.Object = java.lang.Object[] ; } else if ( boolean ) { if ( java.lang.Object instanceof java.lang.Class ) { java.lang.Object = ( ( java.lang.Class<?> < ? > ) java.lang.Object ) . java.lang.String ( ) ; } else if ( java.lang.Object instanceof java.lang.Class [] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( java.lang.Class<?> < ? > [] ) java.lang.Object ; java.lang.String [] java.lang.String[] = new java.lang.String [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.String[] [ int ] = java.lang.Class<?>[] [ int ] . java.lang.String ( ) ; } java.lang.Object = java.lang.String[] ; } } java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.core.type.classreading.AnnotationAttributes . put ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.lang.Throwable ) ; } } return org.springframework.core.type.classreading.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.type.classreading.AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes ( LinkedMultiValueMap < java.lang.String , AnnotationAttributes > org.springframework.core.type.classreading.LinkedMultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> , java.util.Map<java.lang.String,java.util.Set<java.lang.String>> < java.lang.String , java.util.Set<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.Set<java.lang.String>> , java.lang.String java.lang.String ) { java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> < AnnotationAttributes > java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> = org.springframework.core.type.classreading.LinkedMultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> . get ( java.lang.String ) ; if ( java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> == null || java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . isEmpty ( ) ) { return null ; } AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes = new AnnotationAttributes ( java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . get ( NUMBER ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet <> ( org.springframework.core.type.classreading.AnnotationAttributes . keySet ( ) ) ; java.util.Set<java.lang.String> . boolean ( AnnotationUtils . VALUE ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( org.springframework.core.type.classreading.LinkedMultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> . keySet ( ) ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> < AnnotationAttributes > java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> = org.springframework.core.type.classreading.LinkedMultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> . get ( java.lang.String ) ; if ( ! ObjectUtils . isEmpty ( java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> ) ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Map<java.lang.String,java.util.Set<java.lang.String>> . java.util.Set<java.lang.String> ( java.lang.String ) ; if ( java.util.Set<java.lang.String> != null && java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes = java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . get ( NUMBER ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.lang.Object java.lang.Object = org.springframework.core.type.classreading.AnnotationAttributes . get ( java.lang.String ) ; if ( java.lang.Object != null ) { org.springframework.core.type.classreading.AnnotationAttributes . put ( java.lang.String , java.lang.Object ) ; } } } } } return org.springframework.core.type.classreading.AnnotationAttributes ; }  <METHOD_END>
