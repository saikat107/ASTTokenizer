<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String , @ RequestParam ( value = STRING , required = false ) Events demo.eventservice.Events , Model demo.eventservice.Model ) throws java.lang.Exception { demo.eventservice.Model . addAttribute ( STRING , java.lang.String ) ; demo.eventservice.Model . addAttribute ( STRING , Events . values ( ) ) ; demo.eventservice.Model . addAttribute ( STRING , java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> ( java.lang.String ) ; if ( demo.eventservice.Events != null ) { void ( java.lang.String , demo.eventservice.Events ) ; } demo.eventservice.Model . addAttribute ( STRING , demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> . getState ( ) . getIds ( ) ) ; demo.eventservice.Model . addAttribute ( STRING , demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> . getExtendedState ( ) . getVariables ( ) ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ResponseStatus ( HttpStatus . OK ) public void void ( @ RequestBody ( required = true ) Pageview demo.eventservice.Pageview ) throws java.lang.Exception { Assert . notNull ( demo.eventservice.Pageview . getUser ( ) , STRING ) ; Assert . notNull ( demo.eventservice.Pageview . getId ( ) , STRING ) ; demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> ( demo.eventservice.Pageview . getUser ( ) ) ; void ( demo.eventservice.Pageview . getUser ( ) , demo.eventservice.Pageview . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , Events demo.eventservice.Events ) throws java.lang.Exception { demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> . sendEvent ( demo.eventservice.Events ) ; demo.eventservice.StateMachinePersister<demo.eventservice.States,demo.eventservice.Events,java.lang.String> . persist ( demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> , STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> < States , Events > demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> ( java.lang.String java.lang.String ) throws java.lang.Exception { return demo.eventservice.StateMachinePersister<demo.eventservice.States,demo.eventservice.Events,java.lang.String> . restore ( demo.eventservice.StateMachine<demo.eventservice.States,demo.eventservice.Events> , STRING + java.lang.String ) ; }  <METHOD_END>
