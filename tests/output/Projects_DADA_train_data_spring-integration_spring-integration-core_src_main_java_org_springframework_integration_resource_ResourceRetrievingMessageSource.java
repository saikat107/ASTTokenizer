<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ResourcePatternResolver org.springframework.integration.resource.ResourcePatternResolver ) { this . org.springframework.integration.resource.ResourcePatternResolver = org.springframework.integration.resource.ResourcePatternResolver ; }  <METHOD_END>
<METHOD_START> public void void ( CollectionFilter < Resource > org.springframework.integration.resource.CollectionFilter<org.springframework.integration.resource.Resource> ) { this . org.springframework.integration.resource.CollectionFilter<org.springframework.integration.resource.Resource> = org.springframework.integration.resource.CollectionFilter<org.springframework.integration.resource.Resource> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.resource.ApplicationContext ) { this . org.springframework.integration.resource.ApplicationContext = org.springframework.integration.resource.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; if ( this . org.springframework.integration.resource.ResourcePatternResolver == null ) { this . org.springframework.integration.resource.ResourcePatternResolver = this . org.springframework.integration.resource.ApplicationContext ; } Assert . notNull ( this . org.springframework.integration.resource.ResourcePatternResolver , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.resource.Resource [] org.springframework.integration.resource.Resource[] ( ) { try { Resource [] org.springframework.integration.resource.Resource[] = this . org.springframework.integration.resource.ResourcePatternResolver . getResources ( this . java.lang.String ) ; if ( ObjectUtils . isEmpty ( org.springframework.integration.resource.Resource[] ) ) { org.springframework.integration.resource.Resource[] = null ; } else if ( this . org.springframework.integration.resource.CollectionFilter<org.springframework.integration.resource.Resource> != null ) { java.util.Collection<org.springframework.integration.resource.Resource> < Resource > java.util.Collection<org.springframework.integration.resource.Resource> = this . org.springframework.integration.resource.CollectionFilter<org.springframework.integration.resource.Resource> . filter ( java.util.Arrays . java.util.List ( org.springframework.integration.resource.Resource[] ) ) ; if ( CollectionUtils . isEmpty ( java.util.Collection<org.springframework.integration.resource.Resource> ) ) { org.springframework.integration.resource.Resource[] = null ; } else { org.springframework.integration.resource.Resource[] = java.util.Collection<org.springframework.integration.resource.Resource> . toArray ( new Resource [ java.util.Collection<org.springframework.integration.resource.Resource> . size ( ) ] ) ; } } return org.springframework.integration.resource.Resource[] ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
