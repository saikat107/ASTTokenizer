<METHOD_START> public void ( ) { super( Jackson2ObjectMapperBuilder . json ( ) . build ( ) ); }  <METHOD_END>
<METHOD_START> public void ( ObjectMapper org.springframework.http.codec.json.ObjectMapper ) { super( org.springframework.http.codec.json.ObjectMapper ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.http.codec.json.ResolvableType , MimeType org.springframework.http.codec.json.MimeType ) { JavaType org.springframework.http.codec.json.JavaType = this . objectMapper . getTypeFactory ( ) . constructType ( org.springframework.http.codec.json.ResolvableType . getType ( ) ) ; return ( ! java.lang.CharSequence .class . boolean ( org.springframework.http.codec.json.ResolvableType . resolve ( java.lang.Object .class ) ) && this . objectMapper . canDeserialize ( org.springframework.http.codec.json.JavaType ) && supportsMimeType ( org.springframework.http.codec.json.MimeType ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.http.codec.json.MimeType> < MimeType > java.util.List<org.springframework.http.codec.json.MimeType> ( ) { return JSON_MIME_TYPES ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.json.Flux<java.lang.Object> < java.lang.Object > org.springframework.http.codec.json.Flux<java.lang.Object> ( Publisher < DataBuffer > org.springframework.http.codec.json.Publisher<org.springframework.http.codec.json.DataBuffer> , ResolvableType org.springframework.http.codec.json.ResolvableType , MimeType org.springframework.http.codec.json.MimeType , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return org.springframework.http.codec.json.Flux<java.lang.Object> ( this . org.springframework.http.codec.json.JsonObjectDecoder , org.springframework.http.codec.json.Publisher<org.springframework.http.codec.json.DataBuffer> , org.springframework.http.codec.json.ResolvableType , org.springframework.http.codec.json.MimeType , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.json.Mono<java.lang.Object> < java.lang.Object > org.springframework.http.codec.json.Mono<java.lang.Object> ( Publisher < DataBuffer > org.springframework.http.codec.json.Publisher<org.springframework.http.codec.json.DataBuffer> , ResolvableType org.springframework.http.codec.json.ResolvableType , MimeType org.springframework.http.codec.json.MimeType , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return org.springframework.http.codec.json.Flux<java.lang.Object> ( this . org.springframework.http.codec.json.JsonObjectDecoder , org.springframework.http.codec.json.Publisher<org.springframework.http.codec.json.DataBuffer> , org.springframework.http.codec.json.ResolvableType , org.springframework.http.codec.json.MimeType , java.util.Map<java.lang.String,java.lang.Object> ) . singleOrEmpty ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.codec.json.Flux<java.lang.Object> < java.lang.Object > org.springframework.http.codec.json.Flux<java.lang.Object> ( JsonObjectDecoder org.springframework.http.codec.json.JsonObjectDecoder , Publisher < DataBuffer > org.springframework.http.codec.json.Publisher<org.springframework.http.codec.json.DataBuffer> , ResolvableType org.springframework.http.codec.json.ResolvableType , MimeType org.springframework.http.codec.json.MimeType , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notNull ( org.springframework.http.codec.json.Publisher<org.springframework.http.codec.json.DataBuffer> , STRING ) ; Assert . notNull ( org.springframework.http.codec.json.ResolvableType , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = getParameter ( org.springframework.http.codec.json.ResolvableType ) . map ( MethodParameter :: getContainingClass ) . orElse ( null ) ; JavaType org.springframework.http.codec.json.JavaType = getJavaType ( org.springframework.http.codec.json.ResolvableType . getType ( ) , java.lang.Class<> ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( Jackson2CodecSupport . JSON_VIEW_HINT ) ; ObjectReader org.springframework.http.codec.json.ObjectReader = ( java.lang.Class<> != null ? this . objectMapper . readerWithView ( java.lang.Class<> ) . forType ( org.springframework.http.codec.json.JavaType ) : this . objectMapper . readerFor ( org.springframework.http.codec.json.JavaType ) ) ; return org.springframework.http.codec.json.JsonObjectDecoder . decode ( org.springframework.http.codec.json.Publisher<org.springframework.http.codec.json.DataBuffer> , org.springframework.http.codec.json.ResolvableType , org.springframework.http.codec.json.MimeType , java.util.Map<java.lang.String,java.lang.Object> ) . map ( dataBuffer -> { try { Object value = reader . readValue ( dataBuffer . asInputStream ( ) ) ; DataBufferUtils . release ( dataBuffer ) ; return value ; } catch ( IOException ex ) { throw new CodecException ( STRING , ex ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ResolvableType org.springframework.http.codec.json.ResolvableType , ResolvableType org.springframework.http.codec.json.ResolvableType , ServerHttpRequest org.springframework.http.codec.json.ServerHttpRequest , ServerHttpResponse org.springframework.http.codec.json.ServerHttpResponse ) { return getHints ( org.springframework.http.codec.json.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < A extends java.lang.annotation.Annotation > A A ( MethodParameter org.springframework.http.codec.json.MethodParameter , java.lang.Class<A> < A > java.lang.Class<A> ) { return org.springframework.http.codec.json.MethodParameter . getParameterAnnotation ( java.lang.Class<A> ) ; }  <METHOD_END>
