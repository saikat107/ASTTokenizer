<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport = new org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport ( ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> = new ResponseEntity <> ( STRING , HttpStatus . OK ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . executeInfoRequest ( new java.net.URI ( STRING ) , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpServerErrorException .class ) public void void ( ) java.lang.Exception { org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport = new org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport ( ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> = new ResponseEntity <> ( STRING , HttpStatus . BAD_REQUEST ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . executeInfoRequest ( new java.net.URI ( STRING ) , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.socket.sockjs.client.HttpHeaders . set ( STRING , STRING ) ; org.springframework.web.socket.sockjs.client.HttpHeaders . setContentType ( MediaType . APPLICATION_JSON ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport = new org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport ( ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> = new ResponseEntity <> ( HttpStatus . NO_CONTENT ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . executeSendRequest ( java.net.URI , org.springframework.web.socket.sockjs.client.HttpHeaders , new TextMessage ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.HttpHeaders . size ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( MediaType . APPLICATION_JSON , org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.HttpHeaders . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpServerErrorException .class ) public void void ( ) java.lang.Exception { org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport = new org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport ( ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> = new ResponseEntity <> ( HttpStatus . BAD_REQUEST ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . executeSendRequest ( java.net.URI , null , new TextMessage ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.socket.sockjs.client.HttpHeaders . setOrigin ( STRING ) ; TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest = mock ( TransportRequest .class ) ; given ( org.springframework.web.socket.sockjs.client.TransportRequest . getSockJsUrlInfo ( ) ) . willReturn ( new SockJsUrlInfo ( new java.net.URI ( STRING ) ) ) ; given ( org.springframework.web.socket.sockjs.client.TransportRequest . getHandshakeHeaders ( ) ) . willReturn ( org.springframework.web.socket.sockjs.client.HttpHeaders ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport = new org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport ( ) ; WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler = mock ( WebSocketHandler .class ) ; org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . connect ( org.springframework.web.socket.sockjs.client.TransportRequest , org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.web.socket.sockjs.client.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( org.springframework.web.socket.sockjs.client.TransportRequest ) . getSockJsUrlInfo ( ) ; verify ( org.springframework.web.socket.sockjs.client.TransportRequest ) . addTimeoutTask ( org.springframework.web.socket.sockjs.client.ArgumentCaptor<java.lang.Runnable> . capture ( ) ) ; verify ( org.springframework.web.socket.sockjs.client.TransportRequest ) . getTransportUrl ( ) ; verify ( org.springframework.web.socket.sockjs.client.TransportRequest ) . getHandshakeHeaders ( ) ; verify ( org.springframework.web.socket.sockjs.client.TransportRequest ) . getHttpRequestHeaders ( ) ; verifyNoMoreInteractions ( org.springframework.web.socket.sockjs.client.TransportRequest ) ; assertEquals ( NUMBER , org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.HttpHeaders . size ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.HttpHeaders . getOrigin ( ) ) ; assertFalse ( org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . isDisconnected ( ) ) ; org.springframework.web.socket.sockjs.client.ArgumentCaptor<java.lang.Runnable> . getValue ( ) . run ( ) ; assertTrue ( org.springframework.web.socket.sockjs.client.XhrTransportTests.TestXhrTransport . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . isDisconnected ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { return this . org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) { this . org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.HttpHeaders ; return this . org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , XhrClientSockJsSession org.springframework.web.socket.sockjs.client.XhrClientSockJsSession , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { this . org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.HttpHeaders ; this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession = org.springframework.web.socket.sockjs.client.XhrClientSockJsSession ; }  <METHOD_END>
