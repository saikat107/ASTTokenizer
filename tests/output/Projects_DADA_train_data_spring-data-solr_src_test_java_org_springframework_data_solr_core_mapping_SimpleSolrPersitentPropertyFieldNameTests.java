<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Before public void void ( ) { org.springframework.data.solr.core.mapping.TypeInformation = ClassTypeInformation . from ( org.springframework.data.solr.core.mapping.SimpleSolrPersitentPropertyFieldNameTests.BeanWithSolrFieldAnnotation .class ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersitentPropertyFieldNameTests.BeanWithSolrFieldAnnotation> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; }  <METHOD_END>
<METHOD_START> @ Parameters public static java.util.Collection<java.lang.Object[]> < java.lang.Object [] > java.util.Collection<java.lang.Object[]> ( ) { java.lang.Object [] [] java.lang.Object[][] = new java.lang.Object [] [] { { STRING , STRING } , { STRING , STRING } , { STRING , STRING } , { STRING , STRING } , { STRING , STRING } } ; return java.util.Arrays . java.util.List<java.lang.Object[]> ( java.lang.Object[][] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.IntrospectionException { Assert . assertEquals ( this . java.lang.String , org.springframework.data.solr.core.mapping.SimpleSolrPersistentProperty ( org.springframework.data.solr.core.mapping.SimpleSolrPersitentPropertyFieldNameTests.BeanWithSolrFieldAnnotation .class , this . java.lang.String ) . getFieldName ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.mapping.SimpleSolrPersistentProperty org.springframework.data.solr.core.mapping.SimpleSolrPersistentProperty ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String )			throws java.beans.IntrospectionException { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = new java.beans.PropertyDescriptor ( java.lang.String , java.lang.Class<> ) ; java . lang . reflect . java.lang.reflect.Field java.lang.reflect.Field = org . springframework . util . ReflectionUtils . findField ( java.lang.Class<> , java.lang.String ) ; return new SimpleSolrPersistentProperty ( Property . of ( java.lang.reflect.Field , java.beans.PropertyDescriptor ) , org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersitentPropertyFieldNameTests.BeanWithSolrFieldAnnotation> , new SimpleTypeHolder ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
