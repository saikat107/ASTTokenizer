<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.router.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.router.config.SplitterParserTests> ( ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . start ( ) ; MessageChannel org.springframework.integration.router.config.MessageChannel = ( MessageChannel ) org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.router.config.PollableChannel = ( PollableChannel ) org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.router.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.router.config.SplitterParserTests> ( ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . start ( ) ; MessageChannel org.springframework.integration.router.config.MessageChannel = ( MessageChannel ) org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.router.config.PollableChannel = ( PollableChannel ) org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.router.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.router.config.SplitterParserTests> ( ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . start ( ) ; MessageChannel org.springframework.integration.router.config.MessageChannel = ( MessageChannel ) org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.router.config.PollableChannel = ( PollableChannel ) org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ReplyRequiredException .class ) public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.router.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.router.config.SplitterParserTests> ( ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . start ( ) ; DirectChannel org.springframework.integration.router.config.DirectChannel = org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.router.config.DirectChannel . send ( MessageBuilder . withPayload ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) . build ( ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.router.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.router.config.SplitterParserTests> ( ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . start ( ) ; DirectChannel org.springframework.integration.router.config.DirectChannel = org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING , DirectChannel .class ) ; PollableChannel org.springframework.integration.router.config.PollableChannel = ( PollableChannel ) org.springframework.integration.router.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.router.config.DirectChannel . send ( MessageBuilder . withPayload ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) . build ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertThat ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceNumber ( ) , is ( NUMBER ) ) ; assertThat ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceSize ( ) , is ( NUMBER ) ) ; org.springframework.integration.router.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
