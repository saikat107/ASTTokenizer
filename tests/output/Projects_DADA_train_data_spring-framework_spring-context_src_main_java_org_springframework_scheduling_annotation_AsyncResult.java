<METHOD_START> public void ( V V ) { this( V , null ); }  <METHOD_END>
<METHOD_START> private void ( V V , java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { this . V = V ; this . java.util.concurrent.ExecutionException = java.util.concurrent.ExecutionException ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( boolean boolean ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public V V ( ) java.util.concurrent.ExecutionException { if ( this . java.util.concurrent.ExecutionException != null ) { throw this . java.util.concurrent.ExecutionException ; } return this . V ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public V V ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.util.concurrent.ExecutionException { return V ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ListenableFutureCallback < ? super V > org.springframework.scheduling.annotation.ListenableFutureCallback<? super V> ) { void ( org.springframework.scheduling.annotation.ListenableFutureCallback<> , org.springframework.scheduling.annotation.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SuccessCallback < ? super V > org.springframework.scheduling.annotation.SuccessCallback<? super V> , FailureCallback org.springframework.scheduling.annotation.FailureCallback ) { try { if ( this . java.util.concurrent.ExecutionException != null ) { java.lang.Throwable java.lang.Throwable = this . java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; org.springframework.scheduling.annotation.FailureCallback . onFailure ( java.lang.Throwable != null ? java.lang.Throwable : this . java.util.concurrent.ExecutionException ) ; } else { org.springframework.scheduling.annotation.SuccessCallback<> . onSuccess ( this . V ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { } }  <METHOD_END>
<METHOD_START> public static < V > org.springframework.scheduling.annotation.ListenableFuture<V> < V > org.springframework.scheduling.annotation.ListenableFuture<V> ( V V ) { return new org.springframework.scheduling.annotation.AsyncResult <> ( V , null ) ; }  <METHOD_END>
<METHOD_START> public static < V > org.springframework.scheduling.annotation.ListenableFuture<V> < V > org.springframework.scheduling.annotation.ListenableFuture<V> ( java.lang.Throwable java.lang.Throwable ) { return new org.springframework.scheduling.annotation.AsyncResult <> ( null , ( java.lang.Throwable instanceof java.util.concurrent.ExecutionException ? ( java.util.concurrent.ExecutionException ) java.lang.Throwable : new java.util.concurrent.ExecutionException ( java.lang.Throwable ) ) ) ; }  <METHOD_END>
