<METHOD_START> public void ( AbstractMessageListenerContainer org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer ) { Assert . notNull ( org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer , STRING ) ; Assert . isNull ( org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . getMessageListener ( ) , STRING + STRING + STRING ) ; this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer = org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer ; this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . setAutoStartup ( false ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.integration.amqp.inbound.MessageConverter ) { Assert . notNull ( org.springframework.integration.amqp.inbound.MessageConverter , STRING ) ; this . org.springframework.integration.amqp.inbound.MessageConverter = org.springframework.integration.amqp.inbound.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( AmqpHeaderMapper org.springframework.integration.amqp.inbound.AmqpHeaderMapper ) { Assert . notNull ( org.springframework.integration.amqp.inbound.AmqpHeaderMapper , STRING ) ; this . org.springframework.integration.amqp.inbound.AmqpHeaderMapper = org.springframework.integration.amqp.inbound.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . setMessageListener ( ( ChannelAwareMessageListener ) ( message , channel ) -> { Object payload = this . messageConverter . fromMessage ( message ) ; Map < String , Object > headers = this . headerMapper . toHeadersFromRequest ( message . getMessageProperties ( ) ) ; if ( this . messageListenerContainer . getAcknowledgeMode ( ) == AcknowledgeMode . MANUAL ) { headers . put ( AmqpHeaders . DELIVERY_TAG , message . getMessageProperties ( ) . getDeliveryTag ( ) ) ; headers . put ( AmqpHeaders . CHANNEL , channel ) ; } sendMessage ( getMessageBuilderFactory ( ) . withPayload ( payload ) . copyHeaders ( headers ) . build ( ) ) ; } ) ; this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . afterPropertiesSet ( ) ; super. onInit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { this . stop ( ) ; return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
