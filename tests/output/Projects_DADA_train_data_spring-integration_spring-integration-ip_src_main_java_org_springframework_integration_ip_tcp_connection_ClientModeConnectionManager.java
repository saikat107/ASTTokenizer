<METHOD_START> public void ( AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ) { Assert . notNull ( org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory , STRING ) ; this . org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ) { try { TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = this . org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getConnection ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpConnection != this . org.springframework.integration.ip.tcp.connection.TcpConnection ) { if ( this . org.springframework.integration.ip.tcp.connection.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . debug ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) + STRING ) ; } this . org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.TcpConnection ; } else { if ( this . org.springframework.integration.ip.tcp.connection.Log . isTraceEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . trace ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) + STRING ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.integration.ip.tcp.connection.Log . error ( STRING + this . org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnection != null && this . org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ; }  <METHOD_END>
