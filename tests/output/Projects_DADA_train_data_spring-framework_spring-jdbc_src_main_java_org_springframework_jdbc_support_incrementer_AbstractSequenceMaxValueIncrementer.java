<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String ) { super( javax.sql.DataSource , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected long long ( ) org.springframework.jdbc.support.incrementer.DataAccessException { java.sql.Connection java.sql.Connection = DataSourceUtils . getConnection ( getDataSource ( ) ) ; java.sql.Statement java.sql.Statement = null ; java.sql.ResultSet java.sql.ResultSet = null ; try { java.sql.Statement = java.sql.Connection . java.sql.Statement ( ) ; DataSourceUtils . applyTransactionTimeout ( java.sql.Statement , getDataSource ( ) ) ; java.sql.ResultSet = java.sql.Statement . java.sql.ResultSet ( java.lang.String ( ) ) ; if ( java.sql.ResultSet . boolean ( ) ) { return java.sql.ResultSet . long ( NUMBER ) ; } else { throw new DataAccessResourceFailureException ( STRING ) ; } } catch ( java.sql.SQLException java.sql.SQLException ) { throw new DataAccessResourceFailureException ( STRING , java.sql.SQLException ) ; } finally { JdbcUtils . closeResultSet ( java.sql.ResultSet ) ; JdbcUtils . closeStatement ( java.sql.Statement ) ; DataSourceUtils . releaseConnection ( java.sql.Connection , getDataSource ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
