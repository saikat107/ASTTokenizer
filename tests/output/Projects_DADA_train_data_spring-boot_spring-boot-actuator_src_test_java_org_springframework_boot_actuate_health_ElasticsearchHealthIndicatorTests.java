<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; given ( this . org.springframework.boot.actuate.health.Client . admin ( ) ) . willReturn ( this . org.springframework.boot.actuate.health.AdminClient ) ; given ( this . org.springframework.boot.actuate.health.AdminClient . cluster ( ) ) . willReturn ( this . org.springframework.boot.actuate.health.ClusterAdminClient ) ; this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator = new ElasticsearchHealthIndicator ( this . org.springframework.boot.actuate.health.Client , this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture = new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture ( ) ; org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture . onResponse ( new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.StubClusterHealthResponse ( ) ) ; ArgumentCaptor < ClusterHealthRequest > org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> = ArgumentCaptor . forClass ( ClusterHealthRequest .class ) ; given ( this . org.springframework.boot.actuate.health.ClusterAdminClient . health ( org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> . capture ( ) ) ) . willReturn ( org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture . long ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> . getValue ( ) . indices ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlainActionFuture < ClusterHealthResponse > org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> = new PlainActionFuture <> ( ) ; org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> . onResponse ( new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.StubClusterHealthResponse ( ) ) ; ArgumentCaptor < ClusterHealthRequest > org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> = ArgumentCaptor . forClass ( ClusterHealthRequest .class ) ; given ( this . org.springframework.boot.actuate.health.ClusterAdminClient . health ( org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> . capture ( ) ) ) . willReturn ( org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> ) ; this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties . getIndices ( ) . addAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> . getValue ( ) . indices ( ) ) . contains ( STRING , STRING ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture = new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture ( ) ; org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture . onResponse ( new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.StubClusterHealthResponse ( ) ) ; ArgumentCaptor < ClusterHealthRequest > org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> = ArgumentCaptor . forClass ( ClusterHealthRequest .class ) ; given ( this . org.springframework.boot.actuate.health.ClusterAdminClient . health ( org.springframework.boot.actuate.health.ArgumentCaptor<org.springframework.boot.actuate.health.ClusterHealthRequest> . capture ( ) ) ) . willReturn ( org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture ) ; this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties . setResponseTimeout ( NUMBER ) ; this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.TestActionFuture . long ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlainActionFuture < ClusterHealthResponse > org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> = new PlainActionFuture <> ( ) ; org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> . onResponse ( new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.StubClusterHealthResponse ( ) ) ; given ( this . org.springframework.boot.actuate.health.ClusterAdminClient . health ( any ( ClusterHealthRequest .class ) ) ) . willReturn ( org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.health.Health . getDetails ( ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , NUMBER ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , NUMBER ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , NUMBER ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , NUMBER ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , NUMBER ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , NUMBER ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlainActionFuture < ClusterHealthResponse > org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> = new PlainActionFuture <> ( ) ; org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> . onResponse ( new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.StubClusterHealthResponse ( ClusterHealthStatus . RED ) ) ; given ( this . org.springframework.boot.actuate.health.ClusterAdminClient . health ( any ( ClusterHealthRequest .class ) ) ) . willReturn ( org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> ) ; assertThat ( this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator . health ( ) . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlainActionFuture < ClusterHealthResponse > org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> = new PlainActionFuture <> ( ) ; org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> . onResponse ( new org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorTests.StubClusterHealthResponse ( ClusterHealthStatus . YELLOW ) ) ; given ( this . org.springframework.boot.actuate.health.ClusterAdminClient . health ( any ( ClusterHealthRequest .class ) ) ) . willReturn ( org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> ) ; assertThat ( this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator . health ( ) . getStatus ( ) ) . isEqualTo ( Status . UP ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PlainActionFuture < ClusterHealthResponse > org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> = new PlainActionFuture <> ( ) ; given ( this . org.springframework.boot.actuate.health.ClusterAdminClient . health ( any ( ClusterHealthRequest .class ) ) ) . willReturn ( org.springframework.boot.actuate.health.PlainActionFuture<org.springframework.boot.actuate.health.ClusterHealthResponse> ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.ElasticsearchHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( ( java.lang.String ) org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . contains ( ElasticsearchTimeoutException .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , T T ) { assertThat ( ( T ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) . isEqualTo ( T ) ; }  <METHOD_END>
<METHOD_START> private void ( ) { this( ClusterHealthStatus . GREEN ); }  <METHOD_END>
<METHOD_START> private void ( ClusterHealthStatus org.springframework.boot.actuate.health.ClusterHealthStatus ) { super( STRING , new java.lang.String [ NUMBER ] , new ClusterState ( null , NUMBER , null , null , RoutingTable . builder ( ) . build ( ) , DiscoveryNodes . builder ( ) . build ( ) , ClusterBlocks . builder ( ) . build ( ) , null , false ) ); this . org.springframework.boot.actuate.health.ClusterHealthStatus = org.springframework.boot.actuate.health.ClusterHealthStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.health.ClusterHealthStatus org.springframework.boot.actuate.health.ClusterHealthStatus ( ) { return this . org.springframework.boot.actuate.health.ClusterHealthStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.health.ClusterHealthResponse org.springframework.boot.actuate.health.ClusterHealthResponse ( long long )				throws org.springframework.boot.actuate.health.ElasticsearchException { this . long = long ; return super. actionGet ( long ) ; }  <METHOD_END>
