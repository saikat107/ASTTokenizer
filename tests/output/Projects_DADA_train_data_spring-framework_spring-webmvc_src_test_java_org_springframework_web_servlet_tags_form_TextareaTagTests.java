<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( ) { this . org.springframework.web.servlet.tags.form.TextareaTag = new TextareaTag ( ) { @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( getWriter ( ) ) ; } } ; this . org.springframework.web.servlet.tags.form.TextareaTag . setPageContext ( getPageContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( getWriter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.TextareaTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.TextareaTag . setReadonly ( true ) ; assertEquals ( Tag . SKIP_BODY , this . org.springframework.web.servlet.tags.form.TextareaTag . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertBlockTagContains ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.tags.form.TextareaTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.TextareaTag . setReadonly ( true ) ; this . org.springframework.web.servlet.tags.form.TextareaTag . setDynamicAttribute ( null , java.lang.String , java.lang.String ) ; this . org.springframework.web.servlet.tags.form.TextareaTag . setDynamicAttribute ( null , java.lang.String , java.lang.String ) ; assertEquals ( Tag . SKIP_BODY , this . org.springframework.web.servlet.tags.form.TextareaTag . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , java.lang.String , java.lang.String ) ; assertContainsAttribute ( java.lang.String , java.lang.String , java.lang.String ) ; assertBlockTagContains ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.tags.form.TextareaTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.TextareaTag . setOnselect ( java.lang.String ) ; assertEquals ( Tag . SKIP_BODY , this . org.springframework.web.servlet.tags.form.TextareaTag . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertContainsAttribute ( java.lang.String , STRING , java.lang.String ) ; assertAttributeNotPresent ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.tags.form.TextareaTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.TestBean . setName ( java.lang.String ) ; assertEquals ( Tag . SKIP_BODY , this . org.springframework.web.servlet.tags.form.TextareaTag . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertBlockTagContains ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanPropertyBindingResult org.springframework.web.servlet.tags.form.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.web.servlet.tags.form.TestBean ( ) , STRING ) ; org.springframework.web.servlet.tags.form.BeanPropertyBindingResult . getPropertyAccessor ( ) . registerCustomEditor ( java.lang.Float .class , new SimpleFloatEditor ( ) ) ; exposeBindingResult ( org.springframework.web.servlet.tags.form.BeanPropertyBindingResult ) ; this . org.springframework.web.servlet.tags.form.TextareaTag . setPath ( STRING ) ; assertEquals ( Tag . SKIP_BODY , this . org.springframework.web.servlet.tags.form.TextareaTag . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertContainsAttribute ( java.lang.String , STRING , STRING ) ; assertBlockTagContains ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.tags.form.TextareaTag . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.TextareaTag . setReadonly ( true ) ; assertEquals ( Tag . SKIP_BODY , this . org.springframework.web.servlet.tags.form.TextareaTag . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertBlockTagContains ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.form.TestBean org.springframework.web.servlet.tags.form.TestBean ( ) { this . org.springframework.web.servlet.tags.form.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.form.TestBean . setName ( STRING ) ; org.springframework.web.servlet.tags.form.TestBean . setMyFloat ( new java.lang.Float ( NUMBER ) ) ; TestBean org.springframework.web.servlet.tags.form.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.form.TestBean . setName ( STRING ) ; org.springframework.web.servlet.tags.form.TestBean . setSpouse ( org.springframework.web.servlet.tags.form.TestBean ) ; return org.springframework.web.servlet.tags.form.TestBean ; }  <METHOD_END>
