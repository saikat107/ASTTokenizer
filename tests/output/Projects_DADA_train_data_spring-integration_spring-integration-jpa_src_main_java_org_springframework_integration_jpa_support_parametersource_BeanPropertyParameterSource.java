<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . org.springframework.integration.jpa.support.parametersource.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return this . org.springframework.integration.jpa.support.parametersource.BeanWrapper . isReadableProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { try { return this . org.springframework.integration.jpa.support.parametersource.BeanWrapper . getPropertyValue ( java.lang.String ) ; } catch ( NotReadablePropertyException org.springframework.integration.jpa.support.parametersource.NotReadablePropertyException ) { throw new java.lang.IllegalArgumentException ( org.springframework.integration.jpa.support.parametersource.NotReadablePropertyException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { if ( this . java.lang.String[] == null ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = this . org.springframework.integration.jpa.support.parametersource.BeanWrapper . getPropertyDescriptors ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( this . org.springframework.integration.jpa.support.parametersource.BeanWrapper . isReadableProperty ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { java.util.List<java.lang.String> . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ; } } this . java.lang.String[] = java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; } return this . java.lang.String[] ; }  <METHOD_END>
