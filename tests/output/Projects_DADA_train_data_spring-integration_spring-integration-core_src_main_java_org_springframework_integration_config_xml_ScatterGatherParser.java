<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.xml.BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; boolean boolean = org.w3c.dom.Element != null ; if ( boolean & boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } if ( ! boolean & ! boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ScatterGatherHandler .class ) ; AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition = org.springframework.integration.config.xml.BeanDefinitionBuilder . getRawBeanDefinition ( ) ; java.lang.String java.lang.String = resolveId ( org.w3c.dom.Element , org.springframework.integration.config.xml.AbstractBeanDefinition , org.springframework.integration.config.xml.ParserContext ) ; if ( boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { BeanDefinition org.springframework.integration.config.xml.BeanDefinition = null ; if ( ! boolean ) { org.springframework.integration.config.xml.BeanDefinition = new RootBeanDefinition ( RecipientListRouter .class ) ; } else { org.springframework.integration.config.xml.BeanDefinition = org.springframework.integration.config.xml.RecipientListRouterParser . parse ( org.w3c.dom.Element , new ParserContext ( org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) , org.springframework.integration.config.xml.ParserContext . getDelegate ( ) , org.springframework.integration.config.xml.AbstractBeanDefinition ) ) ; } java.lang.String java.lang.String = java.lang.String + STRING ; if ( boolean && org.w3c.dom.Element . boolean ( ID_ATTRIBUTE ) ) { java.lang.String = org.w3c.dom.Element . java.lang.String ( ID_ATTRIBUTE ) ; } org.springframework.integration.config.xml.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.integration.config.xml.BeanDefinition ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( new RuntimeBeanReference ( java.lang.String ) ) ; } org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; BeanDefinition org.springframework.integration.config.xml.BeanDefinition = null ; if ( org.w3c.dom.Element == null ) { try { org.w3c.dom.Element = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) . org.w3c.dom.Document ( ) . org.w3c.dom.Element ( STRING ) ; } catch ( javax.xml.parsers.ParserConfigurationException javax.xml.parsers.ParserConfigurationException ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( javax.xml.parsers.ParserConfigurationException . java.lang.String ( ) , org.w3c.dom.Element ) ; } } org.springframework.integration.config.xml.BeanDefinition = org.springframework.integration.config.xml.AggregatorParser . parse ( org.w3c.dom.Element , new ParserContext ( org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) , org.springframework.integration.config.xml.ParserContext . getDelegate ( ) , org.springframework.integration.config.xml.AbstractBeanDefinition ) ) ; java.lang.String java.lang.String = java.lang.String + STRING ; if ( org.w3c.dom.Element != null && org.w3c.dom.Element . boolean ( ID_ATTRIBUTE ) ) { java.lang.String = org.w3c.dom.Element . java.lang.String ( ID_ATTRIBUTE ) ; } org.springframework.integration.config.xml.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.integration.config.xml.BeanDefinition ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( new RuntimeBeanReference ( java.lang.String ) ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; return org.springframework.integration.config.xml.BeanDefinitionBuilder ; }  <METHOD_END>
