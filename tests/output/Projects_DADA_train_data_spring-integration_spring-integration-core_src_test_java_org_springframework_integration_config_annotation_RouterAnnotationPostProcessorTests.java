<METHOD_START> @ Before public void void ( ) { org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter = new org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter = new org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.config.annotation.RouterAnnotationPostProcessorTests.TestRouter , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage <> ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Router ( inputChannel = STRING , defaultOutputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ Router ( inputChannel = STRING ) public java.lang.String java.lang.String ( java.util.List<?> < ? > java.util.List<?> ) { if ( java.util.List<> . int ( ) == NUMBER ) { return null ; } if ( java.util.List<> . get ( NUMBER ) instanceof java.lang.Integer ) { return STRING ; } else { return STRING ; } }  <METHOD_END>
