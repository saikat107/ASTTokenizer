<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( int , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } Message < ? > org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( NUMBER + NUMBER + NUMBER + NUMBER , org.springframework.integration.aggregator.integration.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( int , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( int , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( int , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( int , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( int , java.util.Map<java.lang.String,java.lang.Object> ) ) ; MessageGroupStore org.springframework.integration.aggregator.integration.MessageGroupStore = TestUtils . getPropertyValue ( this . org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING ) , STRING , MessageGroupStore .class ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroupCount ( ) > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( STRING , int < NUMBER ) ; assertNotNull ( this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.aggregator.integration.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ) ; MessageGroupStore org.springframework.integration.aggregator.integration.MessageGroupStore = TestUtils . getPropertyValue ( this . org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING ) , STRING , MessageGroupStore .class ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroupCount ( ) > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; if ( int == NUMBER ) { TestUtils . getPropertyValue ( this . org.springframework.integration.aggregator.integration.QueueChannel , STRING , java.util.Queue .class ) . clear ( ) ; } } assertTrue ( STRING , int < NUMBER ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Integer> ( NUMBER ) , org.springframework.integration.aggregator.integration.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( NUMBER , ( ( java.util.Collection<?> < ? > ) org.springframework.integration.aggregator.integration.Message<> . getPayload ( ) ) . int ( ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.Message<?> = this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( NUMBER , ( ( java.util.Collection<?> < ? > ) org.springframework.integration.aggregator.integration.Message<> . getPayload ( ) ) . int ( ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; org.springframework.integration.aggregator.integration.Message<?> = this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( NUMBER , ( ( java.util.Collection<?> < ? > ) org.springframework.integration.aggregator.integration.Message<> . getPayload ( ) ) . int ( ) ) ; assertNull ( this . org.springframework.integration.aggregator.integration.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.aggregator.integration.QueueChannel . purge ( null ) ; this . org.springframework.integration.aggregator.integration.QueueChannel . purge ( null ) ; GenericMessage < java.lang.String > org.springframework.integration.aggregator.integration.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; this . org.springframework.integration.aggregator.integration.QueueChannel . send ( org.springframework.integration.aggregator.integration.GenericMessage<java.lang.String> ) ; this . org.springframework.integration.aggregator.integration.QueueChannel . send ( org.springframework.integration.aggregator.integration.GenericMessage<java.lang.String> ) ; this . org.springframework.integration.aggregator.integration.QueueChannel . send ( org.springframework.integration.aggregator.integration.GenericMessage<java.lang.String> ) ; this . org.springframework.integration.aggregator.integration.QueueChannel . send ( org.springframework.integration.aggregator.integration.GenericMessage<java.lang.String> ) ; this . org.springframework.integration.aggregator.integration.QueueChannel . send ( org.springframework.integration.aggregator.integration.GenericMessage<java.lang.String> ) ; this . org.springframework.integration.aggregator.integration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; ErrorMessage org.springframework.integration.aggregator.integration.ErrorMessage = ( ErrorMessage ) this . org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.ErrorMessage ) ; assertThat ( org.springframework.integration.aggregator.integration.ErrorMessage . getPayload ( ) . getMessage ( ) . toLowerCase ( ) , containsString ( STRING ) ) ; } finally { this . org.springframework.integration.aggregator.integration.QueueChannel . purge ( null ) ; this . org.springframework.integration.aggregator.integration.QueueChannel . purge ( null ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int += java.lang.Integer ; } return int ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( int int , int int , int int ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . CORRELATION_ID , int ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
