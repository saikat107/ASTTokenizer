<METHOD_START> public void ( HttpServletResponse org.springframework.http.server.reactive.HttpServletResponse , AsyncContext org.springframework.http.server.reactive.AsyncContext , DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory , int int ) throws java.io.IOException { super( org.springframework.http.server.reactive.DataBufferFactory ); Assert . notNull ( org.springframework.http.server.reactive.HttpServletResponse , STRING ) ; Assert . notNull ( org.springframework.http.server.reactive.DataBufferFactory , STRING ) ; Assert . isTrue ( int > NUMBER , STRING ) ; this . org.springframework.http.server.reactive.HttpServletResponse = org.springframework.http.server.reactive.HttpServletResponse ; this . int = int ; org.springframework.http.server.reactive.AsyncContext . addListener ( new org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseAsyncListener ( ) ) ; org.springframework.http.server.reactive.HttpServletResponse . getOutputStream ( ) . setWriteListener ( new org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyWriteListener ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.HttpServletResponse org.springframework.http.server.reactive.HttpServletResponse ( ) { return this . org.springframework.http.server.reactive.HttpServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { HttpStatus org.springframework.http.server.reactive.HttpStatus = this . getStatusCode ( ) ; if ( org.springframework.http.server.reactive.HttpStatus != null ) { org.springframework.http.server.reactive.HttpServletResponse ( ) . setStatus ( org.springframework.http.server.reactive.HttpStatus . value ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : getHeaders ( ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { this . org.springframework.http.server.reactive.HttpServletResponse . addHeader ( java.lang.String , java.lang.String ) ; } } MediaType org.springframework.http.server.reactive.MediaType = getHeaders ( ) . getContentType ( ) ; if ( this . org.springframework.http.server.reactive.HttpServletResponse . getContentType ( ) == null && org.springframework.http.server.reactive.MediaType != null ) { this . org.springframework.http.server.reactive.HttpServletResponse . setContentType ( org.springframework.http.server.reactive.MediaType . toString ( ) ) ; } java.nio.charset.Charset java.nio.charset.Charset = ( org.springframework.http.server.reactive.MediaType != null ? org.springframework.http.server.reactive.MediaType . getCharset ( ) : null ) ; if ( this . org.springframework.http.server.reactive.HttpServletResponse . getCharacterEncoding ( ) == null && java.nio.charset.Charset != null ) { this . org.springframework.http.server.reactive.HttpServletResponse . setCharacterEncoding ( java.nio.charset.Charset . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( java.lang.String java.lang.String : getCookies ( ) . keySet ( ) ) { for ( ResponseCookie org.springframework.http.server.reactive.ResponseCookie : getCookies ( ) . get ( java.lang.String ) ) { Cookie org.springframework.http.server.reactive.Cookie = new Cookie ( java.lang.String , org.springframework.http.server.reactive.ResponseCookie . getValue ( ) ) ; if ( ! org.springframework.http.server.reactive.ResponseCookie . getMaxAge ( ) . isNegative ( ) ) { org.springframework.http.server.reactive.Cookie . setMaxAge ( ( int ) org.springframework.http.server.reactive.ResponseCookie . getMaxAge ( ) . getSeconds ( ) ) ; } org.springframework.http.server.reactive.ResponseCookie . getDomain ( ) . ifPresent ( org.springframework.http.server.reactive.Cookie :: setDomain ) ; org.springframework.http.server.reactive.ResponseCookie . getPath ( ) . ifPresent ( org.springframework.http.server.reactive.Cookie :: setPath ) ; org.springframework.http.server.reactive.Cookie . setSecure ( org.springframework.http.server.reactive.ResponseCookie . isSecure ( ) ) ; org.springframework.http.server.reactive.Cookie . setHttpOnly ( org.springframework.http.server.reactive.ResponseCookie . isHttpOnly ( ) ) ; this . org.springframework.http.server.reactive.HttpServletResponse . addCookie ( org.springframework.http.server.reactive.Cookie ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>,java.lang.Void> < ? super Publisher < ? extends DataBuffer > , java.lang.Void > org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>,java.lang.Void> ( ) { org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor = new org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor ( ) ; this . org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor = org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor ; return org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor ; }  <METHOD_END>
<METHOD_START> protected int int ( DataBuffer org.springframework.http.server.reactive.DataBuffer ) throws java.io.IOException { ServletOutputStream org.springframework.http.server.reactive.ServletOutputStream = org.springframework.http.server.reactive.HttpServletResponse . getOutputStream ( ) ; java.io.InputStream java.io.InputStream = org.springframework.http.server.reactive.DataBuffer . asInputStream ( ) ; int int = NUMBER ; byte [] byte[] = new byte [ this . int ] ; int int ; while ( org.springframework.http.server.reactive.ServletOutputStream . isReady ( ) && ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { org.springframework.http.server.reactive.ServletOutputStream . write ( byte[] , NUMBER , int ) ; int += int ; } return int ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { ServletOutputStream org.springframework.http.server.reactive.ServletOutputStream = this . org.springframework.http.server.reactive.HttpServletResponse . getOutputStream ( ) ; if ( org.springframework.http.server.reactive.ServletOutputStream . isReady ( ) ) { try { org.springframework.http.server.reactive.ServletOutputStream . flush ( ) ; this . boolean = false ; } catch ( java.io.IOException java.io.IOException ) { this . boolean = true ; throw java.io.IOException ; } } else { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) {}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) { java.lang.Throwable java.lang.Throwable = org.springframework.http.server.reactive.AsyncEvent . getThrowable ( ) ; java.lang.Throwable = ( java.lang.Throwable != null ? java.lang.Throwable : new java.lang.IllegalStateException ( STRING ) ) ; void ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) { void ( org.springframework.http.server.reactive.AsyncEvent . getThrowable ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor != null ) { org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor . cancel ( ) ; org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor . onError ( java.lang.Throwable ) ; } if ( org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor != null ) { org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor . cancel ( ) ; org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor . onError ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) { if ( org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor != null ) { org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor . cancel ( ) ; org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyFlushProcessor . onComplete ( ) ; } if ( org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor != null ) { org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor . cancel ( ) ; org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor . onComplete ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { if ( org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor != null ) { org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor . onWritePossible ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor != null ) { org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor . cancel ( ) ; org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor . onError ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.DataBuffer,java.lang.Void> < ? super DataBuffer , java.lang.Void > org.springframework.http.server.reactive.Processor<? super org.springframework.http.server.reactive.DataBuffer,java.lang.Void> ( ) { try { ServletOutputStream org.springframework.http.server.reactive.ServletOutputStream = org.springframework.http.server.reactive.HttpServletResponse . getOutputStream ( ) ; org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor = new org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor ( org.springframework.http.server.reactive.ServletOutputStream ) ; return org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseBodyProcessor ; } catch ( java.io.IOException java.io.IOException ) { throw new java.io.UncheckedIOException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.io.IOException { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING ) ; } org.springframework.http.server.reactive.ServletServerHttpResponse .this . void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ServletOutputStream org.springframework.http.server.reactive.ServletOutputStream ) { this . org.springframework.http.server.reactive.ServletOutputStream = org.springframework.http.server.reactive.ServletOutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . org.springframework.http.server.reactive.ServletOutputStream . isReady ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this . currentData ) ; } DataBufferUtils . release ( this . currentData ) ; this . currentData = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( DataBuffer org.springframework.http.server.reactive.DataBuffer ) { return org.springframework.http.server.reactive.DataBuffer . readableByteCount ( ) == NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( DataBuffer org.springframework.http.server.reactive.DataBuffer ) throws java.io.IOException { if ( org.springframework.http.server.reactive.ServletServerHttpResponse .this . boolean ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING ) ; } void ( ) ; } boolean boolean = this . org.springframework.http.server.reactive.ServletOutputStream . isReady ( ) ; if ( this . logger . isTraceEnabled ( ) ) { this . logger . trace ( STRING + org.springframework.http.server.reactive.DataBuffer + STRING + boolean ) ; } int int = org.springframework.http.server.reactive.DataBuffer . readableByteCount ( ) ; if ( boolean && int > NUMBER ) { int int = int ( org.springframework.http.server.reactive.DataBuffer ) ; if ( this . logger . isTraceEnabled ( ) ) { this . logger . trace ( STRING + int + STRING + int ) ; } return int == int ; } else { return false ; } }  <METHOD_END>
