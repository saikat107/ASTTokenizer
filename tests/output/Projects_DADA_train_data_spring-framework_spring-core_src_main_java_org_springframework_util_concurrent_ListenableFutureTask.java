<METHOD_START> public void ( java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { super( java.util.concurrent.Callable<T> ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Runnable java.lang.Runnable , T T ) { super( java.lang.Runnable , T ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ListenableFutureCallback < ? super T > org.springframework.util.concurrent.ListenableFutureCallback<? super T> ) { this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . addCallback ( org.springframework.util.concurrent.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SuccessCallback < ? super T > org.springframework.util.concurrent.SuccessCallback<? super T> , FailureCallback org.springframework.util.concurrent.FailureCallback ) { this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . addSuccessCallback ( org.springframework.util.concurrent.SuccessCallback<> ) ; this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . addFailureCallback ( org.springframework.util.concurrent.FailureCallback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { java.lang.Throwable java.lang.Throwable ; try { T T = T ( ) ; this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . success ( T ) ; return; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; return; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { java.lang.Throwable = java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; if ( java.lang.Throwable == null ) { java.lang.Throwable = java.util.concurrent.ExecutionException ; } } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable = java.lang.Throwable ; } this . org.springframework.util.concurrent.ListenableFutureCallbackRegistry<T> . failure ( java.lang.Throwable ) ; }  <METHOD_END>
