<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationDetectionMethodCallback < Value > org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> = new AnnotationDetectionMethodCallback <> ( Value .class ) ; ReflectionUtils . doWithMethods ( org.springframework.data.util.AnnotationDetectionMethodCallbackUnitTests.Sample .class , org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> ) ; assertThat ( org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> . hasFoundAnnotation ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> . getMethod ( ) ) . isEqualTo ( org.springframework.data.util.AnnotationDetectionMethodCallbackUnitTests.Sample .class . java.lang.reflect.Method ( STRING ) ) ; assertThat ( org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> . getAnnotation ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> . getAnnotation ( ) . value ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.util.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.util.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.util.ExpectedException . expectMessage ( STRING ) ; AnnotationDetectionMethodCallback < Value > org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> = new AnnotationDetectionMethodCallback <> ( Value .class , true ) ; ReflectionUtils . doWithMethods ( org.springframework.data.util.AnnotationDetectionMethodCallbackUnitTests.Multiple .class , org.springframework.data.util.AnnotationDetectionMethodCallback<org.springframework.data.util.Value> ) ; }  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.Object java.lang.Object ( )  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.Object java.lang.Object ( )  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.Object java.lang.Object ( )  <METHOD_END>
