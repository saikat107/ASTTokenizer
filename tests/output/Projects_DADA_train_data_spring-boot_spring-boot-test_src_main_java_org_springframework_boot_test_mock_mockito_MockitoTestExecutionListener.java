<METHOD_START> @ java.lang.Override public void void ( TestContext org.springframework.boot.test.mock.mockito.TestContext ) throws java.lang.Exception { if ( boolean ( org.springframework.boot.test.mock.mockito.TestContext ) ) { MockitoAnnotations . initMocks ( org.springframework.boot.test.mock.mockito.TestContext . getTestInstance ( ) ) ; } void ( org.springframework.boot.test.mock.mockito.TestContext ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TestContext org.springframework.boot.test.mock.mockito.TestContext ) { org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.MockitoAnnotationCollection org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.MockitoAnnotationCollection = new org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.MockitoAnnotationCollection ( ) ; ReflectionUtils . doWithFields ( org.springframework.boot.test.mock.mockito.TestContext . getTestClass ( ) , org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.MockitoAnnotationCollection ) ; return org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.MockitoAnnotationCollection . boolean ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( TestContext org.springframework.boot.test.mock.mockito.TestContext ) { DefinitionsParser org.springframework.boot.test.mock.mockito.DefinitionsParser = new DefinitionsParser ( ) ; org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.TestContext . getTestClass ( ) ) ; if ( ! org.springframework.boot.test.mock.mockito.DefinitionsParser . getDefinitions ( ) . isEmpty ( ) ) { void ( org.springframework.boot.test.mock.mockito.TestContext , org.springframework.boot.test.mock.mockito.DefinitionsParser ) ; } }  <METHOD_END>
<METHOD_START> private void void ( TestContext org.springframework.boot.test.mock.mockito.TestContext , DefinitionsParser org.springframework.boot.test.mock.mockito.DefinitionsParser ) { ApplicationContext org.springframework.boot.test.mock.mockito.ApplicationContext = org.springframework.boot.test.mock.mockito.TestContext . getApplicationContext ( ) ; MockitoPostProcessor org.springframework.boot.test.mock.mockito.MockitoPostProcessor = org.springframework.boot.test.mock.mockito.ApplicationContext . getBean ( MockitoPostProcessor .class ) ; for ( Definition org.springframework.boot.test.mock.mockito.Definition : org.springframework.boot.test.mock.mockito.DefinitionsParser . getDefinitions ( ) ) { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.boot.test.mock.mockito.DefinitionsParser . getField ( org.springframework.boot.test.mock.mockito.Definition ) ; if ( java.lang.reflect.Field != null ) { org.springframework.boot.test.mock.mockito.MockitoPostProcessor . inject ( java.lang.reflect.Field , org.springframework.boot.test.mock.mockito.TestContext . getTestInstance ( ) , org.springframework.boot.test.mock.mockito.Definition ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Field java.lang.reflect.Field )				throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.Field . java.lang.annotation.Annotation[] ( ) ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { this . java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! this . java.util.Set<java.lang.annotation.Annotation> . boolean ( ) ; }  <METHOD_END>
