<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.context.event.BeanFactory ) { this . org.springframework.context.event.BeanFactory = org.springframework.context.event.BeanFactory ; if ( org.springframework.context.event.BeanFactory instanceof ConfigurableBeanFactory ) { ConfigurableBeanFactory org.springframework.context.event.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.context.event.BeanFactory ; if ( this . java.lang.ClassLoader == null ) { this . java.lang.ClassLoader = org.springframework.context.event.ConfigurableBeanFactory . getBeanClassLoader ( ) ; } this . java.lang.Object = org.springframework.context.event.ConfigurableBeanFactory . getSingletonMutex ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.context.event.BeanFactory org.springframework.context.event.BeanFactory ( ) { if ( this . org.springframework.context.event.BeanFactory == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } return this . org.springframework.context.event.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> ) { synchronized ( this . java.lang.Object ) { this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<org.springframework.context.event.ApplicationListener<?>> . add ( org.springframework.context.event.ApplicationListener<> ) ; this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { synchronized ( this . java.lang.Object ) { this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> ) { synchronized ( this . java.lang.Object ) { this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<org.springframework.context.event.ApplicationListener<?>> . remove ( org.springframework.context.event.ApplicationListener<> ) ; this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { synchronized ( this . java.lang.Object ) { this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<org.springframework.context.event.ApplicationListener<?>> . clear ( ) ; this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<java.lang.String> . void ( ) ; this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Collection<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( ) { synchronized ( this . java.lang.Object ) { return this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Collection<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( ApplicationEvent org.springframework.context.event.ApplicationEvent , ResolvableType org.springframework.context.event.ResolvableType ) { java.lang.Object java.lang.Object = org.springframework.context.event.ApplicationEvent . getSource ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ) ; org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey = new org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey ( org.springframework.context.event.ResolvableType , java.lang.Class<> ) ; org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever = this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey ) ; if ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever != null ) { return org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( ) ; } if ( this . java.lang.ClassLoader == null || ( ClassUtils . isCacheSafe ( org.springframework.context.event.ApplicationEvent . getClass ( ) , this . java.lang.ClassLoader ) && ( java.lang.Class<> == null || ClassUtils . isCacheSafe ( java.lang.Class<> , this . java.lang.ClassLoader ) ) ) ) { synchronized ( this . java.lang.Object ) { org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever = this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey ) ; if ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever != null ) { return org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( ) ; } org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever = new org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever ( true ) ; java.util.Collection<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.Collection<org.springframework.context.event.ApplicationListener<?>> = java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( org.springframework.context.event.ResolvableType , java.lang.Class<> , org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever ) ; this . java.util.Map<org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey,org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever> . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey , org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever ) ; return java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ; } } else { return java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( org.springframework.context.event.ResolvableType , java.lang.Class<> , null ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( ResolvableType org.springframework.context.event.ResolvableType , java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever ) { java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> = new java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> <> ( ) ; java.util.Set<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.Set<org.springframework.context.event.ApplicationListener<?>> ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ; synchronized ( this . java.lang.Object ) { java.util.Set<org.springframework.context.event.ApplicationListener<?>> = new java.util.LinkedHashSet <> ( this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<org.springframework.context.event.ApplicationListener<?>> ) ; java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( this . org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<java.lang.String> ) ; } for ( ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> : java.util.Set<org.springframework.context.event.ApplicationListener<?>> ) { if ( boolean ( org.springframework.context.event.ApplicationListener<> , org.springframework.context.event.ResolvableType , java.lang.Class<> ) ) { if ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever != null ) { org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<org.springframework.context.event.ApplicationListener<?>> . add ( org.springframework.context.event.ApplicationListener<> ) ; } java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> . add ( org.springframework.context.event.ApplicationListener<> ) ; } } if ( ! java.util.Set<java.lang.String> . boolean ( ) ) { BeanFactory org.springframework.context.event.BeanFactory = org.springframework.context.event.BeanFactory ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.event.BeanFactory . getType ( java.lang.String ) ; if ( java.lang.Class<> == null || boolean ( java.lang.Class<> , org.springframework.context.event.ResolvableType ) ) { ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> = org.springframework.context.event.BeanFactory . getBean ( java.lang.String , ApplicationListener .class ) ; if ( ! java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> . contains ( org.springframework.context.event.ApplicationListener<> ) && boolean ( org.springframework.context.event.ApplicationListener<> , org.springframework.context.event.ResolvableType , java.lang.Class<> ) ) { if ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever != null ) { org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> . add ( org.springframework.context.event.ApplicationListener<> ) ; } } } catch ( NoSuchBeanDefinitionException org.springframework.context.event.NoSuchBeanDefinitionException ) { } } } AnnotationAwareOrderComparator . sort ( java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> ) ; return java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.context.event.ResolvableType ) { if ( GenericApplicationListener .class . boolean ( java.lang.Class<> ) || SmartApplicationListener .class . boolean ( java.lang.Class<> ) ) { return true ; } ResolvableType org.springframework.context.event.ResolvableType = GenericApplicationListenerAdapter . resolveDeclaredEventType ( java.lang.Class<> ) ; return ( org.springframework.context.event.ResolvableType == null || org.springframework.context.event.ResolvableType . isAssignableFrom ( org.springframework.context.event.ResolvableType ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> , ResolvableType org.springframework.context.event.ResolvableType , java.lang.Class<?> < ? > java.lang.Class<?> ) { GenericApplicationListener org.springframework.context.event.GenericApplicationListener = ( org.springframework.context.event.ApplicationListener<> instanceof GenericApplicationListener ? ( GenericApplicationListener ) org.springframework.context.event.ApplicationListener<> : new GenericApplicationListenerAdapter ( org.springframework.context.event.ApplicationListener<> ) ) ; return ( org.springframework.context.event.GenericApplicationListener . supportsEventType ( org.springframework.context.event.ResolvableType ) && org.springframework.context.event.GenericApplicationListener . supportsSourceType ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ResolvableType org.springframework.context.event.ResolvableType , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.context.event.ResolvableType = org.springframework.context.event.ResolvableType ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey = ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey ) java.lang.Object ; return ( ObjectUtils . nullSafeEquals ( this . org.springframework.context.event.ResolvableType , org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey . org.springframework.context.event.ResolvableType ) && ObjectUtils . nullSafeEquals ( this . java.lang.Class<> , org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey . java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( ObjectUtils . nullSafeHashCode ( this . org.springframework.context.event.ResolvableType ) * NUMBER + ObjectUtils . nullSafeHashCode ( this . java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.context.event.ResolvableType + STRING + this . java.lang.Class<> . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey ) { int int = NUMBER ; if ( this . org.springframework.context.event.ResolvableType != null ) { int = this . org.springframework.context.event.ResolvableType . toString ( ) . compareTo ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey . org.springframework.context.event.ResolvableType . toString ( ) ) ; } if ( int == NUMBER && this . java.lang.Class<> != null ) { int = this . java.lang.Class<> . java.lang.String ( ) . int ( org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerCacheKey . java.lang.Class<> . java.lang.String ( ) ) ; } return int ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . java.util.Set<org.springframework.context.event.ApplicationListener<?>> = new java.util.LinkedHashSet <> ( ) ; this . java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.Collection<org.springframework.context.event.ApplicationListener<?>> ( ) { java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> < ApplicationListener < ? > > java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> = new java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> <> ( ) ; for ( ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> : this . java.util.Set<org.springframework.context.event.ApplicationListener<?>> ) { java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> . add ( org.springframework.context.event.ApplicationListener<> ) ; } if ( ! this . java.util.Set<java.lang.String> . boolean ( ) ) { BeanFactory org.springframework.context.event.BeanFactory = org.springframework.context.event.BeanFactory ( ) ; for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { try { ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> = org.springframework.context.event.BeanFactory . getBean ( java.lang.String , ApplicationListener .class ) ; if ( this . boolean || ! java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> . contains ( org.springframework.context.event.ApplicationListener<> ) ) { java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> . add ( org.springframework.context.event.ApplicationListener<> ) ; } } catch ( NoSuchBeanDefinitionException org.springframework.context.event.NoSuchBeanDefinitionException ) { } } } AnnotationAwareOrderComparator . sort ( java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> ) ; return java.util.LinkedList<org.springframework.context.event.ApplicationListener<?>> ; }  <METHOD_END>
