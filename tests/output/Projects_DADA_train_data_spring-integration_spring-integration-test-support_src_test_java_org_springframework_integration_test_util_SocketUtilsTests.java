<METHOD_START> @ Test public void void ( ) { try { SocketUtils . findAvailableServerSocket ( - NUMBER ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } Assert . fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { SocketUtils . findAvailableUdpSocket ( - NUMBER ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } Assert . fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = SocketUtils . findAvailableServerSocket ( ) ; java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( int , NUMBER , java.net.InetAddress . java.net.InetAddress ( STRING ) ) ; assertNotEquals ( int , SocketUtils . findAvailableServerSocket ( int ) ) ; java.net.ServerSocket . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = SocketUtils . findAvailableUdpSocket ( NUMBER ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( int , java.net.InetAddress . java.net.InetAddress ( STRING ) ) ; assertNotEquals ( int , SocketUtils . findAvailableUdpSocket ( int ) ) ; java.net.DatagramSocket . void ( ) ; }  <METHOD_END>
