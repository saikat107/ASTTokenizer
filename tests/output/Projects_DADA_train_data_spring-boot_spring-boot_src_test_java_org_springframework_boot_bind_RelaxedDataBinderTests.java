<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( new java.lang.String ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . char[] ( ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.ValidatedTarget org.springframework.boot.bind.RelaxedDataBinderTests.ValidatedTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.ValidatedTarget ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.ValidatedTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithValidatedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithValidatedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithValidatedMap ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithValidatedMap , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; for ( FieldError org.springframework.boot.bind.FieldError : org.springframework.boot.bind.BindingResult . getFieldErrors ( ) ) { java.lang.System . java.io.PrintStream . void ( new StaticMessageSource ( ) . getMessage ( org.springframework.boot.bind.FieldError , java.util.Locale . java.util.Locale ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = org.springframework.boot.bind.RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , null ) ; org.springframework.boot.bind.RelaxedDataBinder . setAllowedFields ( STRING ) ; org.springframework.boot.bind.RelaxedDataBinder . setIgnoreUnknownFields ( false ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinder , org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = org.springframework.boot.bind.RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , null ) ; org.springframework.boot.bind.RelaxedDataBinder . setDisallowedFields ( STRING , STRING ) ; org.springframework.boot.bind.RelaxedDataBinder . setIgnoreUnknownFields ( false ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinder , org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedObject . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList . java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( ) . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( NUMBER ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBeanWithList org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBeanWithList = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBeanWithList ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBeanWithList , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBeanWithList . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> ( ) . org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean ( NUMBER ) . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( ) . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( NUMBER ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList ( ) ; this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedList . java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedSet org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedSet = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedSet ( ) ; this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedSet , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedSet . java.util.Set<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NotWritablePropertyException .class ) public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList ( ) ; this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList . java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList ( ) ; this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList . java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyDoubleNestedList org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyDoubleNestedList = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyDoubleNestedList ( ) ; this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyDoubleNestedList , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyDoubleNestedList . org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList ( ) . java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedCollection org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedCollection = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedCollection ( ) ; this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedCollection , STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedCollection . java.util.Collection<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedUntypedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedUntypedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedUntypedMap ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedUntypedMap , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedUntypedMap . java.util.Map ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfString . java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedProperties org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedProperties = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedProperties ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedProperties , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedProperties . java.util.Properties ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedProperties . java.util.Properties ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum . java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ( ) . java.lang.Object ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum . java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ( ) . java.lang.Object ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum . java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ( ) . java.lang.Object ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfEnum . java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ( ) . java.lang.Object ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) ) . hasSize ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . as ( STRING ) . isNotNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . boolean ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) ) . hasSize ( NUMBER ) ; assertThat ( ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) ) . hasSize ( NUMBER ) ; assertThat ( ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) . boolean ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMap . java.util.Map<java.lang.String,java.lang.Object> ( ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) . java.util.List<java.lang.String> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) . java.util.List<java.lang.String> ( STRING ) . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfString . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) . java.util.List<java.lang.String> ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfBean org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfBean = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfBean ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfBean , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfBean . java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfBean . java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( ) . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( STRING ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean = new org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean ( ) ; org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean . java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean . java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ( ) . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean . java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ( ) . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( STRING ) . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( NUMBER ) . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedMapOfListOfBean . java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ( ) . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( STRING ) . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( NUMBER ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.bind.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = org.springframework.boot.bind.RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , null ) ; org.springframework.boot.bind.RelaxedDataBinder . setIgnoreUnknownFields ( false ) ; org.springframework.boot.bind.RelaxedDataBinder . setIgnoreNestedProperties ( true ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinder , org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = org.springframework.boot.bind.RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; org.springframework.boot.bind.RelaxedDataBinder . setIgnoreUnknownFields ( false ) ; org.springframework.boot.bind.RelaxedDataBinder . setIgnoreNestedProperties ( true ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinder , org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING + STRING + STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING + STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING + STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING + STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING + STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING + STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING + STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; void ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; this . org.springframework.boot.bind.ConversionService = new DefaultConversionService ( ) ; void ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; MutablePropertyValues org.springframework.boot.bind.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; new RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ) . bind ( org.springframework.boot.bind.MutablePropertyValues ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; MutablePropertyValues org.springframework.boot.bind.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; new RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ) . withAlias ( STRING , STRING ) . bind ( org.springframework.boot.bind.MutablePropertyValues ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = org.springframework.boot.bind.RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; MutablePropertyValues org.springframework.boot.bind.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.boot.bind.RelaxedDataBinder . bind ( org.springframework.boot.bind.MutablePropertyValues ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = org.springframework.boot.bind.RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; MutablePropertyValues org.springframework.boot.bind.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.boot.bind.RelaxedDataBinder . bind ( org.springframework.boot.bind.MutablePropertyValues ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.util.List<java.lang.Object> ( ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = new org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = org.springframework.boot.bind.RelaxedDataBinder ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; MutablePropertyValues org.springframework.boot.bind.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.bind.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.boot.bind.RelaxedDataBinder . bind ( org.springframework.boot.bind.MutablePropertyValues ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ) throws java.lang.Exception { BindingResult org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ( ) ) . isEqualTo ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ( ) ) . isEqualTo ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ( ) ) . isEqualTo ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ( ) ) . isEqualTo ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ( ) ) . isEqualTo ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ( ) ) . isEqualTo ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> ( ) ) . contains ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; org.springframework.boot.bind.BindingResult = org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget , STRING ) ; assertThat ( org.springframework.boot.bind.BindingResult . getErrorCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> ( ) ) . contains ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo , org.springframework.boot.bind.RelaxedDataBinderTests.Bingo . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.BindingResult org.springframework.boot.bind.BindingResult ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.boot.bind.BindingResult ( java.lang.Object , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.BindingResult org.springframework.boot.bind.BindingResult ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.String java.lang.String )			throws java.lang.Exception { return org.springframework.boot.bind.BindingResult ( org.springframework.boot.bind.RelaxedDataBinder ( java.lang.Object , java.lang.String ) , java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( java.lang.Object , java.lang.String ) ; org.springframework.boot.bind.RelaxedDataBinder . setIgnoreUnknownFields ( false ) ; LocalValidatorFactoryBean org.springframework.boot.bind.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.boot.bind.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; org.springframework.boot.bind.RelaxedDataBinder . setValidator ( org.springframework.boot.bind.LocalValidatorFactoryBean ) ; org.springframework.boot.bind.RelaxedDataBinder . setConversionService ( this . org.springframework.boot.bind.ConversionService ) ; return org.springframework.boot.bind.RelaxedDataBinder ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.BindingResult org.springframework.boot.bind.BindingResult ( DataBinder org.springframework.boot.bind.DataBinder , java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws java.lang.Exception { java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( new ByteArrayResource ( java.lang.String . byte[] ( ) ) ) ; org.springframework.boot.bind.DataBinder . bind ( new MutablePropertyValues ( java.util.Properties ) ) ; org.springframework.boot.bind.DataBinder . validate ( ) ; return org.springframework.boot.bind.DataBinder . getBindingResult ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.boot.bind.RelaxedDataBinderTests.RequiredKeys org.springframework.boot.bind.RelaxedDataBinderTests.RequiredKeys ) { this . java.lang.String[] = org.springframework.boot.bind.RelaxedDataBinderTests.RequiredKeys . java.lang.String[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ConstraintValidatorContext org.springframework.boot.bind.ConstraintValidatorContext ) { boolean boolean = true ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { if ( ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { org.springframework.boot.bind.ConstraintValidatorContext . buildConstraintViolationWithTemplate ( STRING + java.lang.String + STRING ) . addConstraintViolation ( ) ; boolean = false ; } } return boolean ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map java.util.Map ( ) { return this . java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map ) { this . java.util.Map = java.util.Map ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( ) { return this . java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> < org.springframework.boot.bind.RelaxedDataBinderTests.Bingo , java.lang.Object > java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ( ) { return this . java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> < org.springframework.boot.bind.RelaxedDataBinderTests.Bingo , java.lang.Object > java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ) { this . java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> = java.util.Map<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> < java.lang.String , java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> < org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ( ) { return this . java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> < java.lang.String , java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> < org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget > > java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ) { this . java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> = java.util.Map<java.lang.String,java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget>> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> < java.lang.String , org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget > java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( ) { return this . java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> < java.lang.String , org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget > java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ) { this . java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> = java.util.Map<java.lang.String,org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> < org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget > java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ( ) { return this . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> < org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget > java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ) { this . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> = java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> < org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean > java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> ( ) { return this . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> < org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean > java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> ) { this . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> = java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithNestedListOfBean> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList ( ) { return this . org.springframework.boot.bind.RelaxedDataBinderTests.TargetWithReadOnlyNestedList ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) { return this . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ) { this . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ( ) { return this . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ) { this . org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget = org.springframework.boot.bind.RelaxedDataBinderTests.VanillaTarget ; }  <METHOD_END>
<METHOD_START> public char [] char[] ( ) { return this . char[] ; }  <METHOD_END>
<METHOD_START> public void void ( char [] char[] ) { this . char[] = char[] ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.bind.RelaxedDataBinderTests.Bingo org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ( ) { return this . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.bind.RelaxedDataBinderTests.Bingo org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ) { this . org.springframework.boot.bind.RelaxedDataBinderTests.Bingo = org.springframework.boot.bind.RelaxedDataBinderTests.Bingo ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> < org.springframework.boot.bind.RelaxedDataBinderTests.Bingo > java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> ( ) { return this . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> < org.springframework.boot.bind.RelaxedDataBinderTests.Bingo > java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> ) { this . java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> = java.util.List<org.springframework.boot.bind.RelaxedDataBinderTests.Bingo> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return this . java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { this . java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
