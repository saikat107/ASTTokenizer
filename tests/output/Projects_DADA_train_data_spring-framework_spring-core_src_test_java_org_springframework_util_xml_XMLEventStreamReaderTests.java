<METHOD_START> @ Before public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLEventReader javax.xml.stream.XMLEventReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLEventReader ( new java.io.StringReader ( java.lang.String ) ) ; org.springframework.util.xml.XMLEventStreamReader = new XMLEventStreamReader ( javax.xml.stream.XMLEventReader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { while ( org.springframework.util.xml.XMLEventStreamReader . hasNext ( ) ) { org.springframework.util.xml.XMLEventStreamReader . next ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.transform.Transformer javax.xml.transform.Transformer = javax.xml.transform.TransformerFactory . javax.xml.transform.TransformerFactory ( ) . javax.xml.transform.Transformer ( ) ; javax.xml.transform.stax.StAXSource javax.xml.transform.stax.StAXSource = new javax.xml.transform.stax.StAXSource ( org.springframework.util.xml.XMLEventStreamReader ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.transform.Transformer . void ( javax.xml.transform.stax.StAXSource , new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ) ; Predicate < org.w3c.dom.Node > org.springframework.util.xml.Predicate<org.w3c.dom.Node> = n -> n . getNodeType ( ) != Node . DOCUMENT_TYPE_NODE && n . getNodeType ( ) != Node . PROCESSING_INSTRUCTION_NODE ; assertThat ( java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) . withNodeFilter ( org.springframework.util.xml.Predicate<org.w3c.dom.Node> ) ) ; }  <METHOD_END>
