<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.jpa.provider.Product = org.springframework.data.jpa.provider.ProductRepository . save ( new Product ( ) ) ; this . org.springframework.data.jpa.provider.Category = org.springframework.data.jpa.provider.CategoryRepository . save ( new Category ( org.springframework.data.jpa.provider.Product ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new TransactionTemplate ( org.springframework.data.jpa.provider.PlatformTransactionManager ) . execute ( new TransactionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.jpa.provider.TransactionStatus ) { Product org.springframework.data.jpa.provider.Product = org.springframework.data.jpa.provider.CategoryRepository . findOne ( org.springframework.data.jpa.provider.Category . getId ( ) ) . get ( ) . getProduct ( ) ; ProxyIdAccessor org.springframework.data.jpa.provider.ProxyIdAccessor = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.provider.EntityManager ) ; assertThat ( org.springframework.data.jpa.provider.ProxyIdAccessor . shouldUseAccessorFor ( org.springframework.data.jpa.provider.Product ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.provider.ProxyIdAccessor . getIdentifierFrom ( org.springframework.data.jpa.provider.Product ) . toString ( ) , is ( ( java.lang.Object ) org.springframework.data.jpa.provider.Product . getId ( ) . toString ( ) ) ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.jpa.provider.TransactionStatus ) { Product org.springframework.data.jpa.provider.Product = org.springframework.data.jpa.provider.CategoryRepository . findOne ( org.springframework.data.jpa.provider.Category . getId ( ) ) . get ( ) . getProduct ( ) ; ProxyIdAccessor org.springframework.data.jpa.provider.ProxyIdAccessor = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.provider.EntityManager ) ; assertThat ( org.springframework.data.jpa.provider.ProxyIdAccessor . shouldUseAccessorFor ( org.springframework.data.jpa.provider.Product ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.provider.ProxyIdAccessor . getIdentifierFrom ( org.springframework.data.jpa.provider.Product ) . toString ( ) , is ( ( java.lang.Object ) org.springframework.data.jpa.provider.Product . getId ( ) . toString ( ) ) ) ; return null ; }  <METHOD_END>
