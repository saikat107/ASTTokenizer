<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.accept.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.accept.NativeWebRequest = new ServletWebRequest ( org.springframework.web.accept.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; PathExtensionContentNegotiationStrategy org.springframework.web.accept.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( ) ; java.util.List<org.springframework.web.accept.MediaType> < MediaType > java.util.List<org.springframework.web.accept.MediaType> = org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ; assertEquals ( java.util.Arrays . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.accept.MediaType> ) ; java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_XHTML_XML ) ; org.springframework.web.accept.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> ) ; java.util.List<org.springframework.web.accept.MediaType> = org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ; assertEquals ( java.util.Arrays . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; PathExtensionContentNegotiationStrategy org.springframework.web.accept.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( ) ; java.util.List<org.springframework.web.accept.MediaType> < MediaType > java.util.List<org.springframework.web.accept.MediaType> = org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ; assertEquals ( java.util.Arrays . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PathExtensionContentNegotiationStrategy org.springframework.web.accept.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( ) ; this . org.springframework.web.accept.MockHttpServletRequest . setContextPath ( STRING ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; assertTrue ( STRING , org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( org.springframework.web.accept.NativeWebRequest ) . isEmpty ( ) ) ; this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; assertTrue ( STRING , org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( org.springframework.web.accept.NativeWebRequest ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; PathExtensionContentNegotiationStrategy org.springframework.web.accept.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( ) ; java.util.List<org.springframework.web.accept.MediaType> < MediaType > java.util.List<org.springframework.web.accept.MediaType> = org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( org.springframework.web.accept.NativeWebRequest ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; PathExtensionContentNegotiationStrategy org.springframework.web.accept.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( ) ; java.util.List<org.springframework.web.accept.MediaType> < MediaType > java.util.List<org.springframework.web.accept.MediaType> = org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ; assertEquals ( java.util.Collections .< MediaType > java.util.List<org.springframework.web.accept.MediaType> ( ) , java.util.List<org.springframework.web.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotAcceptableException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.accept.MockHttpServletRequest . setRequestURI ( STRING ) ; PathExtensionContentNegotiationStrategy org.springframework.web.accept.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( ) ; org.springframework.web.accept.PathExtensionContentNegotiationStrategy . setIgnoreUnknownExtensions ( false ) ; org.springframework.web.accept.PathExtensionContentNegotiationStrategy . resolveMediaTypes ( this . org.springframework.web.accept.NativeWebRequest ) ; }  <METHOD_END>
