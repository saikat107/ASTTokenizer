<METHOD_START> void ( ) java.io.IOException { void ( ) ; this . org.springframework.boot.cli.command.shell.ConsoleReader = new ConsoleReader ( ) ; this . org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner = org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner ( ) { org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner = new org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner ( ) ; org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner . addCommand ( new HelpCommand ( org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner ) ) ; org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner . addCommands ( java.lang.Iterable<org.springframework.boot.cli.command.shell.Command> ( ) ) ; org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner . void ( STRING , STRING ) ; org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner . void ( STRING , STRING ) ; org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner . void ( STRING , STRING ) ; return org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner ; }  <METHOD_END>
<METHOD_START> private java.lang.Iterable<org.springframework.boot.cli.command.shell.Command> < Command > java.lang.Iterable<org.springframework.boot.cli.command.shell.Command> ( ) { java.util.List<org.springframework.boot.cli.command.shell.Command> < Command > java.util.List<org.springframework.boot.cli.command.shell.Command> = new java.util.ArrayList<org.springframework.boot.cli.command.shell.Command> <> ( ) ; java.util.ServiceLoader<org.springframework.boot.cli.command.shell.CommandFactory> < CommandFactory > java.util.ServiceLoader<org.springframework.boot.cli.command.shell.CommandFactory> = java.util.ServiceLoader . java.util.ServiceLoader<org.springframework.boot.cli.command.shell.CommandFactory> ( CommandFactory .class , java.lang.Class<? extends org.springframework.boot.cli.command.shell.Shell> ( ) . java.lang.ClassLoader ( ) ) ; for ( CommandFactory org.springframework.boot.cli.command.shell.CommandFactory : java.util.ServiceLoader<org.springframework.boot.cli.command.shell.CommandFactory> ) { for ( Command org.springframework.boot.cli.command.shell.Command : org.springframework.boot.cli.command.shell.CommandFactory . getCommands ( ) ) { java.util.List<org.springframework.boot.cli.command.shell.Command> . add ( org.springframework.boot.cli.command.shell.Command ( org.springframework.boot.cli.command.shell.Command ) ) ; } } java.util.List<org.springframework.boot.cli.command.shell.Command> . add ( new PromptCommand ( this . org.springframework.boot.cli.command.shell.ShellPrompts ) ) ; java.util.List<org.springframework.boot.cli.command.shell.Command> . add ( new ClearCommand ( this . org.springframework.boot.cli.command.shell.ConsoleReader ) ) ; java.util.List<org.springframework.boot.cli.command.shell.Command> . add ( new ExitCommand ( ) ) ; return java.util.List<org.springframework.boot.cli.command.shell.Command> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.shell.Command org.springframework.boot.cli.command.shell.Command ( Command org.springframework.boot.cli.command.shell.Command ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { if ( java.lang.Class<> . boolean ( org.springframework.boot.cli.command.shell.Command ) ) { return org.springframework.boot.cli.command.shell.Command ; } } return new ForkProcessCommand ( org.springframework.boot.cli.command.shell.Command ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.boot.cli.command.shell.ConsoleReader . setHistoryEnabled ( true ) ; this . org.springframework.boot.cli.command.shell.ConsoleReader . setBellEnabled ( false ) ; this . org.springframework.boot.cli.command.shell.ConsoleReader . setExpandEvents ( false ) ; this . org.springframework.boot.cli.command.shell.ConsoleReader . addCompleter ( new CommandCompleter ( this . org.springframework.boot.cli.command.shell.ConsoleReader , this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter , this . org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner ) ) ; this . org.springframework.boot.cli.command.shell.ConsoleReader . setCompletionHandler ( new CandidateListCompletionHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { SignalUtils . attachSignalHandler ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { void ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { void ( ) ; try { void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( ! ( java.lang.Exception instanceof ShellExitException ) ) { throw java.lang.Exception ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String java.lang.String = java.lang.Class<? extends org.springframework.boot.cli.command.shell.Shell> ( ) . java.lang.Package ( ) . java.lang.String ( ) ; java.lang.String = ( java.lang.String == null ? STRING : STRING + java.lang.String + STRING ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.boot.cli.command.shell.AnsiString ( STRING , Code . BOLD ) . append ( java.lang.String , Code . FAINT ) ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.boot.cli.command.shell.AnsiString ( STRING + STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { java.lang.String java.lang.String ; while ( ( java.lang.String = this . org.springframework.boot.cli.command.shell.ConsoleReader . readLine ( java.lang.String ( ) ) ) != null ) { while ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; java.lang.String += this . org.springframework.boot.cli.command.shell.ConsoleReader . readLine ( STRING ) ; } if ( StringUtils . hasLength ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = this . org.springframework.boot.cli.command.shell.EscapeAwareWhiteSpaceArgumentDelimiter . parseArguments ( java.lang.String ) ; this . org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner . runAndHandleErrors ( java.lang.String[] ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = this . org.springframework.boot.cli.command.shell.ShellPrompts . getPrompt ( ) ; return org.springframework.boot.cli.command.shell.AnsiString ( java.lang.String , Code . FG_BLUE ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.shell.AnsiString org.springframework.boot.cli.command.shell.AnsiString ( java.lang.String java.lang.String , Code ... org.springframework.boot.cli.command.shell.Code[] ) { return new AnsiString ( this . org.springframework.boot.cli.command.shell.ConsoleReader . getTerminal ( ) ) . append ( java.lang.String , org.springframework.boot.cli.command.shell.Code[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . org.springframework.boot.cli.command.shell.Shell.ShellCommandRunner . boolean ( ) ) { return; } java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING ) ) ; java.lang.System . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.command.shell.Command org.springframework.boot.cli.command.shell.Command ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { return new RunProcessCommand ( java.lang.String . java.lang.String ( NUMBER ) ) ; } if ( this . java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String ) ) { java.lang.String = this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; } return super. findCommand ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Command org.springframework.boot.cli.command.shell.Command ) { this . org.springframework.boot.cli.command.shell.Command = org.springframework.boot.cli.command.shell.Command ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Command org.springframework.boot.cli.command.shell.Command ) {		}  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { Command org.springframework.boot.cli.command.shell.Command = this . org.springframework.boot.cli.command.shell.Command ; if ( org.springframework.boot.cli.command.shell.Command != null && org.springframework.boot.cli.command.shell.Command instanceof RunProcessCommand ) { return ( ( RunProcessCommand ) org.springframework.boot.cli.command.shell.Command ) . handleSigInt ( ) ; } return false ; }  <METHOD_END>
