<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.util.concurrent.Future<org.springframework.boot.cli.RunCommand> < RunCommand > java.util.concurrent.Future<org.springframework.boot.cli.RunCommand> = java.util.concurrent.Future ( new RunCommand ( ) , java.lang.String[] ) ; this . java.util.List<org.springframework.boot.cli.AbstractCommand> . add ( java.util.concurrent.Future<org.springframework.boot.cli.RunCommand> . get ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.util.concurrent.Future<org.springframework.boot.cli.TestCommand> < TestCommand > java.util.concurrent.Future<org.springframework.boot.cli.TestCommand> = java.util.concurrent.Future ( new TestCommand ( ) , java.lang.String[] ) ; try { this . java.util.List<org.springframework.boot.cli.AbstractCommand> . add ( java.util.concurrent.Future<org.springframework.boot.cli.TestCommand> . get ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; return java.lang.String ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.util.concurrent.Future<org.springframework.boot.cli.GrabCommand> < GrabCommand > java.util.concurrent.Future<org.springframework.boot.cli.GrabCommand> = java.util.concurrent.Future ( new GrabCommand ( ) , java.lang.String[] ) ; this . java.util.List<org.springframework.boot.cli.AbstractCommand> . add ( java.util.concurrent.Future<org.springframework.boot.cli.GrabCommand> . get ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.util.concurrent.Future<org.springframework.boot.cli.JarCommand> < JarCommand > java.util.concurrent.Future<org.springframework.boot.cli.JarCommand> = java.util.concurrent.Future ( new JarCommand ( ) , java.lang.String[] ) ; this . java.util.List<org.springframework.boot.cli.AbstractCommand> . add ( java.util.concurrent.Future<org.springframework.boot.cli.JarCommand> . get ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.boot.cli.OptionParsingCommand > java.util.concurrent.Future<T> < T > java.util.concurrent.Future<T> ( final T T , java.lang.String ... java.lang.String[] ) { void ( ) ; final java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String[] ) ; return java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . java.util.concurrent.Future<T> ( new java.util.concurrent.Callable<T> < T > ( ) { @ java.lang.Override public T T ( ) java.lang.Exception { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.lang.System . java.lang.String ( STRING , java.lang.String . java.lang.String ( org.springframework.boot.cli.CliTester .this . int ) ) ; try { T . run ( java.lang.String[] ) ; return T ; } finally { java.lang.System . java.lang.String ( STRING ) ; java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.ClassLoader ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.Exception { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.lang.System . java.lang.String ( STRING , java.lang.String . java.lang.String ( org.springframework.boot.cli.CliTester .this . int ) ) ; try { T . run ( java.lang.String[] ) ; return T ; } finally { java.lang.System . java.lang.String ( STRING ) ; java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { java.lang.reflect.Field java.lang.reflect.Field = java.net.URL .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.reflect.Field . void ( null , null ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.String ... java.lang.String[] ) { final java.lang.String [] java.lang.String[] = new java.lang.String [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] ; if ( ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) ) { if ( new java.io.File ( this . java.lang.String + java.lang.String ) . boolean ( ) ) { java.lang.String[] [ int ] = this . java.lang.String + java.lang.String ; } else { java.lang.String[] [ int ] = java.lang.String ; } } else { java.lang.String[] [ int ] = this . java.lang.String + java.lang.String ; } } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = this . org.springframework.boot.cli.OutputCapture . toString ( ) ; this . org.springframework.boot.cli.OutputCapture . reset ( ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.Statement org.springframework.boot.cli.Statement ( final Statement org.springframework.boot.cli.Statement , final Description org.springframework.boot.cli.Description ) { final Statement org.springframework.boot.cli.Statement = org.springframework.boot.cli.CliTester .this . org.springframework.boot.cli.OutputCapture . apply ( new org.springframework.boot.cli.CliTester.RunLauncherStatement ( org.springframework.boot.cli.Statement ) , org.springframework.boot.cli.Description ) ; return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { Assume . assumeTrue ( STRING , java.lang.System . java.lang.String ( STRING , STRING ) . boolean ( STRING ) ) ; org.springframework.boot.cli.Statement . evaluate ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { Assume . assumeTrue ( STRING , java.lang.System . java.lang.String ( STRING , STRING ) . boolean ( STRING ) ) ; org.springframework.boot.cli.Statement . evaluate ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { java.io.InputStream java.io.InputStream = java.net.URI . java.net.URI ( STRING + this . int + java.lang.String ) . java.net.URL ( ) . java.io.InputStream ( ) ; java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( java.io.InputStream ) ) ; java.lang.String java.lang.String ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; while ( ( java.lang.String = java.io.BufferedReader . java.lang.String ( ) ) != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void ( Statement org.springframework.boot.cli.Statement ) { this . org.springframework.boot.cli.Statement = org.springframework.boot.cli.Statement ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { java.lang.System . java.lang.String ( STRING , STRING ) ; try { try { this . org.springframework.boot.cli.Statement . evaluate ( ) ; } finally { for ( AbstractCommand org.springframework.boot.cli.AbstractCommand : org.springframework.boot.cli.CliTester .this . java.util.List<org.springframework.boot.cli.AbstractCommand> ) { if ( org.springframework.boot.cli.AbstractCommand != null && org.springframework.boot.cli.AbstractCommand instanceof RunCommand ) { ( ( RunCommand ) org.springframework.boot.cli.AbstractCommand ) . stop ( ) ; } } java.lang.System . java.lang.String ( STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
