<METHOD_START> private void ( int int ) { this . int = int ; java.util.Map<java.lang.Integer,java.lang.Boolean> . java.lang.Boolean ( int , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.Statement org.springframework.integration.mqtt.Statement ( Statement org.springframework.integration.mqtt.Statement , Description org.springframework.integration.mqtt.Description ) { assumeTrue ( java.util.Map<java.lang.Integer,java.lang.Boolean> . java.lang.Boolean ( int ) ) ; java.lang.String java.lang.String = STRING + int ; IMqttClient org.springframework.integration.mqtt.IMqttClient = null ; try { org.springframework.integration.mqtt.IMqttClient = new DefaultMqttPahoClientFactory ( ) . getClientInstance ( java.lang.String , STRING + java.lang.System . long ( ) ) ; org.springframework.integration.mqtt.IMqttClient . connect ( ) ; } catch ( MqttException org.springframework.integration.mqtt.MqttException ) { org.springframework.integration.mqtt.Log . warn ( STRING + java.lang.String + STRING , org.springframework.integration.mqtt.MqttException ) ; assumeNoException ( org.springframework.integration.mqtt.MqttException ) ; } finally { if ( org.springframework.integration.mqtt.IMqttClient != null ) { try { org.springframework.integration.mqtt.IMqttClient . disconnect ( ) ; org.springframework.integration.mqtt.IMqttClient . close ( ) ; } catch ( MqttException org.springframework.integration.mqtt.MqttException ) {				} } } return super. apply ( org.springframework.integration.mqtt.Statement , org.springframework.integration.mqtt.Description ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.mqtt.BrokerRunning org.springframework.integration.mqtt.BrokerRunning ( int int ) { return new org.springframework.integration.mqtt.BrokerRunning ( int ) ; }  <METHOD_END>
