<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.config.AnnotationConfigApplicationContext org.springframework.statemachine.config.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> , notNullValue ( ) ) ; TestAction org.springframework.statemachine.config.TestAction = context . getBean ( STRING , TestAction .class ) ; TestGuard org.springframework.statemachine.config.TestGuard = context . getBean ( STRING , TestGuard .class ) ; assertThat ( org.springframework.statemachine.config.TestAction , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.TestGuard , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config4 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config6 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config7 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config8 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config9 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . isAutoStartup ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . isRunning ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config11 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . isAutoStartup ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . isRunning ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config10 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.config.ObjectStateMachine<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.lang.Object ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( ( ( java.util.List<?> < ? > ) java.lang.Object ) . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config12 .class ) ; context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config13 .class ) ; context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config14 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.lang.Object , sameInstance ( org.springframework.statemachine.config.ConfigurationTests.Config14 . org.springframework.statemachine.config.TaskExecutor ) ) ; assertThat ( java.lang.Object , sameInstance ( org.springframework.statemachine.config.ConfigurationTests.Config14 . org.springframework.statemachine.config.TaskExecutor ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , sameInstance ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.config.ConfigurationTests.Config15 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( context . containsBean ( StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) , is ( true ) ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , java.lang.Object ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , sameInstance ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config19 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( context . containsBean ( StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) , is ( true ) ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , java.lang.Object ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , sameInstance ( java.lang.Object ) ) ; assertThat ( java.lang.Object , instanceOf ( ThreadPoolTaskExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config15 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , java.lang.Object ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , sameInstance ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config16 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . callMethod ( STRING , java.lang.Object ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , sameInstance ( org.springframework.statemachine.config.ConfigurationTests.Config16 . org.springframework.statemachine.config.BeanFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config17 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.config.ConfigurationTests.Config18 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineFactory<java.lang.String,java.lang.String> = context . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( STRING ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) . state ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guard ( org.springframework.statemachine.config.TestGuard ( ) ) . action ( org.springframework.statemachine.config.TestAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.config.TestAction org.springframework.statemachine.config.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.config.TestGuard org.springframework.statemachine.config.TestGuard ( ) { return new TestGuard ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.config.TaskExecutor org.springframework.statemachine.config.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . end ( TestStates . SF ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . and ( ) . withStates ( ) . parent ( TestStates . S1 ) . initial ( TestStates . S2 ) . end ( TestStates . SF ) . state ( TestStates . SI ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withLocal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E2 ) . and ( ) . withInternal ( ) . source ( TestStates . S2 ) . event ( TestEvents . E3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { TestEntryAction org.springframework.statemachine.config.TestEntryAction = org.springframework.statemachine.config.TestEntryAction ( ) ; java.util.Collection<org.springframework.statemachine.config.TestEntryAction> < TestEntryAction > java.util.Collection<org.springframework.statemachine.config.TestEntryAction> = new java.util.ArrayList<org.springframework.statemachine.config.TestEntryAction> < TestEntryAction > ( ) ; java.util.Collection<org.springframework.statemachine.config.TestEntryAction> . add ( org.springframework.statemachine.config.TestEntryAction ) ; java.util.Collection<org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents>> . add ( org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ( ) ) ; org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S11 ) . state ( TestStates . S11 , java.util.Collection<org.springframework.statemachine.config.TestEntryAction> , java.util.Arrays . java.util.List ( org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ( ) ) ) . state ( TestStates . S12 , org.springframework.statemachine.config.TestEntryAction ( ) , org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ( ) ) . and ( ) . withStates ( ) . parent ( TestStates . S11 ) . initial ( TestStates . S111 ) . state ( TestStates . S111 , java.util.Collection<org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents>> , java.util.Arrays . java.util.List ( org.springframework.statemachine.config.TestExitAction ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withExternal ( ) . source ( TestStates . S111 ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.TestEntryAction org.springframework.statemachine.config.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ( ) { return new TestExitAction ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.config.Action<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.TestExitAction org.springframework.statemachine.config.TestExitAction ( ) { return new TestExitAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S10 ) . state ( TestStates . S10 ) . state ( TestStates . S11 ) . and ( ) . withStates ( ) . parent ( TestStates . S10 ) . initial ( TestStates . S101 ) . state ( TestStates . S101 ) . and ( ) . withStates ( ) . parent ( TestStates . S101 ) . initial ( TestStates . S1011 ) . state ( TestStates . S1011 ) . state ( TestStates . S1012 ) . and ( ) . withStates ( ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S20 ) . initial ( TestStates . S201 ) . state ( TestStates . S201 ) . and ( ) . withStates ( ) . parent ( TestStates . S201 ) . initial ( TestStates . S2011 ) . state ( TestStates . S2011 ) . state ( TestStates . S2012 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withExternal ( ) . source ( TestStates . S1011 ) . target ( TestStates . S11 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S10 ) . state ( TestStates . S10 ) . state ( TestStates . S11 ) . and ( ) . withStates ( ) . parent ( TestStates . S10 ) . initial ( TestStates . S101 ) . state ( TestStates . S101 ) . and ( ) . withStates ( ) . parent ( TestStates . S101 ) . initial ( TestStates . S1011 ) . state ( TestStates . S1011 ) . state ( TestStates . S1012 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withExternal ( ) . source ( TestStates . S1011 ) . target ( TestStates . S11 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withVerifier ( ) . enabled ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S10 ) . state ( TestStates . S10 ) . state ( TestStates . S11 ) . and ( ) . withStates ( ) . parent ( TestStates . S10 ) . initial ( TestStates . S101 ) . state ( TestStates . S101 ) . and ( ) . withStates ( ) . parent ( TestStates . S10 ) . initial ( TestStates . S111 ) . state ( TestStates . S111 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withVerifier ( ) . enabled ( false ) . and ( ) . withConfiguration ( ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withVerifier ( ) . enabled ( false ) . and ( ) . withConfiguration ( ) . listener ( new StateMachineListenerAdapter < TestStates , TestEvents > ( ) ) . listener ( new StateMachineListenerAdapter < TestStates , TestEvents > ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withVerifier ( ) . enabled ( false ) . and ( ) . withConfiguration ( ) . autoStartup ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<org.springframework.statemachine.config.TestStates,org.springframework.statemachine.config.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . autoStartup ( false ) . taskExecutor ( org.springframework.statemachine.config.TaskExecutor ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; return org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . autoStartup ( false ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; return org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . autoStartup ( false ) . beanFactory ( org.springframework.statemachine.config.BeanFactory ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; return org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . machineId ( STRING ) . autoStartup ( false ) . beanFactory ( org.springframework.statemachine.config.BeanFactory ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; return org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . machineId ( STRING ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . taskExecutor ( org.springframework.statemachine.config.TaskExecutor ( ) ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) public org.springframework.statemachine.config.TaskExecutor org.springframework.statemachine.config.TaskExecutor ( ) { return new ThreadPoolTaskExecutor ( ) ; }  <METHOD_END>
