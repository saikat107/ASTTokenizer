<METHOD_START> public void ( ) { this ( NUMBER , false ); }  <METHOD_END>
<METHOD_START> public void ( int int , boolean boolean ) { this( int , boolean , STRING ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( NUMBER , false , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( int int , boolean boolean , java.lang.String java.lang.String ) { this( int , MqttMessageConverter . defaultQosProcessor ( ) , boolean , MqttMessageConverter . defaultRetainedProcessor ( ) , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( int int , MessageProcessor < java.lang.Integer > org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Integer> , boolean boolean , MessageProcessor < java.lang.Boolean > org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Boolean> ) { this( int , org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Integer> , boolean , org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Boolean> , STRING ); }  <METHOD_END>
<METHOD_START> public void ( int int , MessageProcessor < java.lang.Integer > org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Integer> , boolean boolean , MessageProcessor < java.lang.Boolean > org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Boolean> , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Integer> , STRING ) ; Assert . notNull ( org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Boolean> , STRING ) ; this . int = int ; this . org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Integer> = org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Integer> ; this . boolean = boolean ; this . org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Boolean> = org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Boolean> ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( BeanFactory org.springframework.integration.mqtt.support.BeanFactory ) { this . org.springframework.integration.mqtt.support.BeanFactory = org.springframework.integration.mqtt.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mqtt.support.BeanFactory org.springframework.integration.mqtt.support.BeanFactory ( ) { return this . org.springframework.integration.mqtt.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mqtt.support.MessageBuilderFactory org.springframework.integration.mqtt.support.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.mqtt.support.BeanFactory != null ) { this . org.springframework.integration.mqtt.support.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.mqtt.support.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.mqtt.support.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.support.Message<?> < ? > org.springframework.integration.mqtt.support.Message<?> ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.integration.mqtt.support.MessageHeaders ) { Assert . isInstanceOf ( MqttMessage .class , java.lang.Object , ( ) STRING + mqttMessage . getClass ( ) . getName ( ) ) ; return org.springframework.integration.mqtt.support.Message<?> ( null , ( MqttMessage ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.support.Message<?> < ? > org.springframework.integration.mqtt.support.Message<?> ( java.lang.String java.lang.String , MqttMessage org.springframework.integration.mqtt.support.MqttMessage ) { try { AbstractIntegrationMessageBuilder < java.lang.Object > org.springframework.integration.mqtt.support.AbstractIntegrationMessageBuilder<java.lang.Object> = org.springframework.integration.mqtt.support.MessageBuilderFactory ( ) . withPayload ( java.lang.Object ( org.springframework.integration.mqtt.support.MqttMessage ) ) . setHeader ( MqttHeaders . RECEIVED_QOS , org.springframework.integration.mqtt.support.MqttMessage . getQos ( ) ) . setHeader ( MqttHeaders . DUPLICATE , org.springframework.integration.mqtt.support.MqttMessage . isDuplicate ( ) ) . setHeader ( MqttHeaders . RECEIVED_RETAINED , org.springframework.integration.mqtt.support.MqttMessage . isRetained ( ) ) ; if ( java.lang.String != null ) { org.springframework.integration.mqtt.support.AbstractIntegrationMessageBuilder<java.lang.Object> . setHeader ( MqttHeaders . RECEIVED_TOPIC , java.lang.String ) ; } return org.springframework.integration.mqtt.support.AbstractIntegrationMessageBuilder<java.lang.Object> . build ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageConversionException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mqtt.support.MqttMessage org.springframework.integration.mqtt.support.MqttMessage ( Message < ? > org.springframework.integration.mqtt.support.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { byte [] byte[] = byte[] ( org.springframework.integration.mqtt.support.Message<> ) ; MqttMessage org.springframework.integration.mqtt.support.MqttMessage = new MqttMessage ( byte[] ) ; java.lang.Integer java.lang.Integer = this . org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Integer> . processMessage ( org.springframework.integration.mqtt.support.Message<> ) ; org.springframework.integration.mqtt.support.MqttMessage . setQos ( java.lang.Integer == null ? this . int : java.lang.Integer ) ; java.lang.Boolean java.lang.Boolean = this . org.springframework.integration.mqtt.support.MessageProcessor<java.lang.Boolean> . processMessage ( org.springframework.integration.mqtt.support.Message<> ) ; org.springframework.integration.mqtt.support.MqttMessage . setRetained ( java.lang.Boolean == null ? this . boolean : java.lang.Boolean ) ; return org.springframework.integration.mqtt.support.MqttMessage ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MqttMessage org.springframework.integration.mqtt.support.MqttMessage ) throws java.lang.Exception { if ( this . boolean ) { return org.springframework.integration.mqtt.support.MqttMessage . getPayload ( ) ; } else { return new java.lang.String ( org.springframework.integration.mqtt.support.MqttMessage . getPayload ( ) , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected byte [] byte[] ( Message < ? > org.springframework.integration.mqtt.support.Message<?> ) { java.lang.Object java.lang.Object = org.springframework.integration.mqtt.support.Message<> . getPayload ( ) ; Assert . isTrue ( java.lang.Object instanceof byte [] || java.lang.Object instanceof java.lang.String , ( ) STRING + STRING + payload . getClass ( ) . getName ( ) + STRING ) ; byte [] byte[] ; if ( java.lang.Object instanceof java.lang.String ) { try { byte[] = ( ( java.lang.String ) java.lang.Object ) . byte[] ( this . java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageConversionException ( STRING , java.lang.Exception ) ; } } else { byte[] = ( byte [] ) java.lang.Object ; } return byte[] ; }  <METHOD_END>
