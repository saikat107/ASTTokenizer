<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , WebSocketHandler org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getRequest ( ) ; ServerHttpResponse org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getResponse ( ) ; HttpServletRequest org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest = org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest ) ; HttpServletResponse org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse = org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse ) ; Endpoint org.springframework.web.reactive.socket.server.upgrade.Endpoint = new StandardWebSocketHandlerAdapter ( org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , session -> { HandshakeInfo info = getHandshakeInfo ( exchange , subProtocol ) ; DataBufferFactory factory = response . bufferFactory ( ) ; return new StandardWebSocketSession ( session , info , factory ) ; } ) ; java.lang.String java.lang.String = org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest . getRequestURI ( ) ; DefaultServerEndpointConfig org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig = new DefaultServerEndpointConfig ( java.lang.String , org.springframework.web.reactive.socket.server.upgrade.Endpoint ) ; org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig . setSubprotocols ( java.util.Optional<java.lang.String> . java.util.Optional<java.util.List<java.lang.String>> ( java.util.Collections :: java.util.List<java.lang.String> ) . java.util.List<java.lang.String> ( java.util.Collections . java.util.List<java.lang.String> ( ) ) ) ; try { WsServerContainer org.springframework.web.reactive.socket.server.upgrade.WsServerContainer = org.springframework.web.reactive.socket.server.upgrade.WsServerContainer ( org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ) ; org.springframework.web.reactive.socket.server.upgrade.WsServerContainer . doUpgrade ( org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest , org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse , org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; } catch ( ServletException | java.io.IOException java.lang.Object ) { return Mono . error ( java.lang.Object ) ; } return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ( ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest ) { Assert . isInstanceOf ( ServletServerHttpRequest .class , org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest , STRING ) ; return ( ( ServletServerHttpRequest ) org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest ) . getServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse org.springframework.web.reactive.socket.server.upgrade.HttpServletResponse ( ServerHttpResponse org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse ) { Assert . isInstanceOf ( ServletServerHttpResponse .class , org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse , STRING ) ; return ( ( ServletServerHttpResponse ) org.springframework.web.reactive.socket.server.upgrade.ServerHttpResponse ) . getServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getRequest ( ) ; Mono < java.security.Principal > org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getPrincipal ( ) ; return new HandshakeInfo ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getURI ( ) , org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getHeaders ( ) , org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> , java.util.Optional<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.WsServerContainer org.springframework.web.reactive.socket.server.upgrade.WsServerContainer ( HttpServletRequest org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest ) { java.lang.Object java.lang.Object = org.springframework.web.reactive.socket.server.upgrade.HttpServletRequest . getServletContext ( ) . getAttribute ( java.lang.String ) ; Assert . state ( java.lang.Object instanceof WsServerContainer , STRING ) ; return ( WsServerContainer ) java.lang.Object ; }  <METHOD_END>
