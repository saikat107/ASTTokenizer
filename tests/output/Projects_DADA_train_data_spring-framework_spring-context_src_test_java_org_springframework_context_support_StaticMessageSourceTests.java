<METHOD_START> @ Test @ java.lang.Override public void void ( ) { assertCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override public void void ( ) org.springframework.context.support.NoSuchMessageException { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { new java.lang.Integer ( NUMBER ) , new java.util.Date ( java.lang.System . long ( ) ) , STRING } ; org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , java.lang.Object[] , java.util.Locale . java.util.Locale ) ; assertTrue ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , java.lang.Object[] , java.util.Locale . java.util.Locale ) . indexOf ( STRING ) != - NUMBER ) ; java.lang.Object [] java.lang.Object[] = { new java.lang.Integer ( NUMBER ) , new java.util.Date ( java.lang.System . long ( ) ) , STRING } ; assertTrue ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , java.lang.Object[] , java.util.Locale . java.util.Locale ) . indexOf ( STRING ) != - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { new java.lang.Integer ( NUMBER ) , new java.util.Date ( java.lang.System . long ( ) ) , STRING } ; assertTrue ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , java.lang.Object[] , java.util.Locale . java.util.Locale ) . indexOf ( STRING ) != - NUMBER ) ; assertTrue ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , java.lang.Object[] , java.util.Locale . java.util.Locale ) . indexOf ( STRING ) != - NUMBER ) ; assertTrue ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchMessageException .class ) public void void ( ) { org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; MessageSourceResolvable org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( java.lang.String[] , null , STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; MessageSourceResolvable org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( java.lang.String[] , null , STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; MessageSourceResolvable org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( java.lang.String[] , null , STRING ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; MessageSourceResolvable org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( java.lang.String[] ) ; org.springframework.context.support.ExpectedException . expect ( NoSuchMessageException .class ) ; org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.context.support.ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext ( ) java.lang.Exception { StaticApplicationContext org.springframework.context.support.StaticApplicationContext = new StaticApplicationContext ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.context.support.StaticApplicationContext . registerPrototype ( STRING , org . springframework . org.springframework.tests . org.springframework.tests . org.springframework.tests . org.springframework.tests .class , new MutablePropertyValues ( java.util.Map<java.lang.String,java.lang.String> ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.context.support.StaticApplicationContext . registerPrototype ( STRING , org . springframework . org.springframework.tests . org.springframework.tests . org.springframework.tests . org.springframework.tests .class , new MutablePropertyValues ( java.util.Map<java.lang.String,java.lang.String> ) ) ; org.springframework.context.support.StaticApplicationContext . refresh ( ) ; org.springframework.context.support.StaticApplicationContext . addApplicationListener ( parentListener ) ; this . org.springframework.context.support.StaticApplicationContext = new StaticApplicationContext ( org.springframework.context.support.StaticApplicationContext ) ; org.springframework.context.support.StaticApplicationContext . registerSingleton ( STRING , BeanThatListens .class , new MutablePropertyValues ( ) ) ; org.springframework.context.support.StaticApplicationContext . registerSingleton ( STRING , ACATester .class , new MutablePropertyValues ( ) ) ; org.springframework.context.support.StaticApplicationContext . registerPrototype ( STRING , ACATester .class , new MutablePropertyValues ( ) ) ; PropertiesBeanDefinitionReader org.springframework.context.support.PropertiesBeanDefinitionReader = new PropertiesBeanDefinitionReader ( org.springframework.context.support.StaticApplicationContext . getDefaultListableBeanFactory ( ) ) ; org.springframework.context.support.PropertiesBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.context.support.StaticMessageSourceTests> ( ) ) ) ; org.springframework.context.support.StaticApplicationContext . refresh ( ) ; org.springframework.context.support.StaticApplicationContext . addApplicationListener ( listener ) ; StaticMessageSource org.springframework.context.support.StaticMessageSource = org.springframework.context.support.StaticApplicationContext . getStaticMessageSource ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; org.springframework.context.support.StaticMessageSource . addMessages ( java.util.Map<java.lang.String,java.lang.String> , java.util.Locale . java.util.Locale ) ; org.springframework.context.support.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , java.lang.String ) ; return org.springframework.context.support.StaticApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticMessageSource org.springframework.context.support.StaticMessageSource = new StaticMessageSource ( ) ; StaticMessageSource org.springframework.context.support.StaticMessageSource = new StaticMessageSource ( ) ; org.springframework.context.support.StaticMessageSource . setParentMessageSource ( org.springframework.context.support.StaticMessageSource ) ; org.springframework.context.support.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; org.springframework.context.support.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; MessageSourceResolvable org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( new java.lang.String [] { STRING } , new java.lang.Object [] { new DefaultMessageSourceResolvable ( STRING ) } ) ; assertEquals ( STRING , org.springframework.context.support.StaticMessageSource . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticMessageSource org.springframework.context.support.StaticMessageSource = new StaticMessageSource ( ) ; StaticMessageSource org.springframework.context.support.StaticMessageSource = new StaticMessageSource ( ) ; org.springframework.context.support.StaticMessageSource . setParentMessageSource ( org.springframework.context.support.StaticMessageSource ) ; org.springframework.context.support.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; org.springframework.context.support.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; MessageSourceResolvable org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( new java.lang.String [] { STRING } , new java.lang.Object [] { new DefaultMessageSourceResolvable ( STRING ) } ) ; assertEquals ( STRING , org.springframework.context.support.StaticMessageSource . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
