<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { void ( org.springframework.jms.connection.ConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> public final void void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { Assert . notNull ( org.springframework.jms.connection.ConnectionFactory , STRING ) ; this . org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.ConnectionFactory org.springframework.jms.connection.ConnectionFactory ( ) { return this . org.springframework.jms.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { Connection org.springframework.jms.connection.Connection = this . org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ; return org.springframework.jms.connection.Connection ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.ConnectionFactory ( ) . createConnection ( java.lang.String , java.lang.String ) ; return org.springframework.jms.connection.Connection ( org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.QueueConnection org.springframework.jms.connection.QueueConnection ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; if ( ! ( org.springframework.jms.connection.ConnectionFactory instanceof QueueConnectionFactory ) ) { throw new javax . javax.jms . javax.jms ( STRING ) ; } QueueConnection org.springframework.jms.connection.QueueConnection = ( ( QueueConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ) . createQueueConnection ( ) ; return ( QueueConnection ) org.springframework.jms.connection.Connection ( org.springframework.jms.connection.QueueConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.QueueConnection org.springframework.jms.connection.QueueConnection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; if ( ! ( org.springframework.jms.connection.ConnectionFactory instanceof QueueConnectionFactory ) ) { throw new javax . javax.jms . javax.jms ( STRING ) ; } QueueConnection org.springframework.jms.connection.QueueConnection = ( ( QueueConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ) . createQueueConnection ( java.lang.String , java.lang.String ) ; return ( QueueConnection ) org.springframework.jms.connection.Connection ( org.springframework.jms.connection.QueueConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.TopicConnection org.springframework.jms.connection.TopicConnection ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; if ( ! ( org.springframework.jms.connection.ConnectionFactory instanceof TopicConnectionFactory ) ) { throw new javax . javax.jms . javax.jms ( STRING ) ; } TopicConnection org.springframework.jms.connection.TopicConnection = ( ( TopicConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ) . createTopicConnection ( ) ; return ( TopicConnection ) org.springframework.jms.connection.Connection ( org.springframework.jms.connection.TopicConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.TopicConnection org.springframework.jms.connection.TopicConnection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; if ( ! ( org.springframework.jms.connection.ConnectionFactory instanceof TopicConnectionFactory ) ) { throw new javax . javax.jms . javax.jms ( STRING ) ; } TopicConnection org.springframework.jms.connection.TopicConnection = ( ( TopicConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ) . createTopicConnection ( java.lang.String , java.lang.String ) ; return ( TopicConnection ) org.springframework.jms.connection.Connection ( org.springframework.jms.connection.TopicConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( java.lang.String java.lang.String , java.lang.String java.lang.String , int int ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( java.lang.String , java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( int int ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( int ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.connection.ConnectionFactory org.springframework.jms.connection.ConnectionFactory ( ) { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; Assert . state ( org.springframework.jms.connection.ConnectionFactory != null , STRING ) ; return org.springframework.jms.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( Connection org.springframework.jms.connection.Connection ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( NUMBER ) ; java.util.List<java.lang.Class<?>> . boolean ( Connection .class ) ; if ( org.springframework.jms.connection.Connection instanceof QueueConnection ) { java.util.List<java.lang.Class<?>> . boolean ( QueueConnection .class ) ; } if ( org.springframework.jms.connection.Connection instanceof TopicConnection ) { java.util.List<java.lang.Class<?>> . boolean ( TopicConnection .class ) ; } return ( Connection ) java.lang.reflect.Proxy . java.lang.Object ( Connection .class . java.lang.ClassLoader ( ) , java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) , new org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.TransactionAwareConnectionInvocationHandler ( org.springframework.jms.connection.Connection ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Connection org.springframework.jms.connection.Connection ) { this . org.springframework.jms.connection.Connection = org.springframework.jms.connection.Connection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( Session .class == java.lang.reflect.Method . java.lang.Class<?> ( ) ) { Session org.springframework.jms.connection.Session = ConnectionFactoryUtils . getTransactionalSession ( org.springframework.jms.connection.ConnectionFactory ( ) , this . org.springframework.jms.connection.Connection , boolean ( ) ) ; if ( org.springframework.jms.connection.Session != null ) { return org.springframework.jms.connection.Session ( org.springframework.jms.connection.Session ) ; } } else if ( QueueSession .class == java.lang.reflect.Method . java.lang.Class<?> ( ) ) { QueueSession org.springframework.jms.connection.QueueSession = ConnectionFactoryUtils . getTransactionalQueueSession ( ( QueueConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ( ) , ( QueueConnection ) this . org.springframework.jms.connection.Connection , boolean ( ) ) ; if ( org.springframework.jms.connection.QueueSession != null ) { return org.springframework.jms.connection.Session ( org.springframework.jms.connection.QueueSession ) ; } } else if ( TopicSession .class == java.lang.reflect.Method . java.lang.Class<?> ( ) ) { TopicSession org.springframework.jms.connection.TopicSession = ConnectionFactoryUtils . getTransactionalTopicSession ( ( TopicConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ( ) , ( TopicConnection ) this . org.springframework.jms.connection.Connection , boolean ( ) ) ; if ( org.springframework.jms.connection.TopicSession != null ) { return org.springframework.jms.connection.Session ( org.springframework.jms.connection.TopicSession ) ; } } try { return java.lang.reflect.Method . java.lang.Object ( this . org.springframework.jms.connection.Connection , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Session org.springframework.jms.connection.Session ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( NUMBER ) ; java.util.List<java.lang.Class<?>> . boolean ( SessionProxy .class ) ; if ( org.springframework.jms.connection.Session instanceof QueueSession ) { java.util.List<java.lang.Class<?>> . boolean ( QueueSession .class ) ; } if ( org.springframework.jms.connection.Session instanceof TopicSession ) { java.util.List<java.lang.Class<?>> . boolean ( TopicSession .class ) ; } return ( Session ) java.lang.reflect.Proxy . java.lang.Object ( SessionProxy .class . java.lang.ClassLoader ( ) , java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) , new org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.CloseSuppressingSessionInvocationHandler ( org.springframework.jms.connection.Session ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.jms.connection.Session ) { this . org.springframework.jms.connection.Session = org.springframework.jms.connection.Session ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { throw new TransactionInProgressException ( STRING ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { throw new TransactionInProgressException ( STRING ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return this . org.springframework.jms.connection.Session ; } try { return java.lang.reflect.Method . java.lang.Object ( this . org.springframework.jms.connection.Session , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
