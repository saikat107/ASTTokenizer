<METHOD_START> public static void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { IdInterfaceExceptions org.springframework.data.cassandra.repository.support.IdInterfaceExceptions = new IdInterfaceExceptions ( java.lang.Class<> ) ; if ( ! java.lang.Class<> . boolean ( ) ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , null , STRING ) ) ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<> . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int > NUMBER || ( ( java.lang.Class<?>[] . int == NUMBER && ! ( java.lang.Class<?>[] [ NUMBER ] . boolean ( java.io.Serializable .class ) || java.lang.Class<?>[] [ NUMBER ] . boolean ( MapId .class ) ) ) ) ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , null , STRING ) ) ; } for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; switch ( java.lang.Class<?>[] . int ) { case NUMBER : if ( java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) == NUMBER ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , java.lang.reflect.Method , STRING ) ) ; } if ( ! java.io.Serializable .class . boolean ( java.lang.Class<> ) ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , java.lang.reflect.Method , STRING ) ) ; } break; case NUMBER : if ( java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) == NUMBER ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , java.lang.reflect.Method , STRING ) ) ; } if ( java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) == NUMBER ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , java.lang.reflect.Method , STRING ) ) ; } if ( ! void .class . boolean ( java.lang.Class<> ) && ! java.lang.Class<> . boolean ( java.lang.Class<> ) ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , java.lang.reflect.Method , STRING ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?>[] [ NUMBER ] ; if ( ! java.io.Serializable .class . boolean ( java.lang.Class<> ) ) { org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , java.lang.reflect.Method , STRING ) ) ; } break; default: org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . add ( new IdInterfaceException ( java.lang.Class<> , java.lang.reflect.Method , STRING + java.lang.Class<?>[] . int ) ) ; } } if ( org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . getCount ( ) > NUMBER ) { throw org.springframework.data.cassandra.repository.support.IdInterfaceExceptions ; } }  <METHOD_END>
