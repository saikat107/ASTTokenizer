<METHOD_START> public void ( boolean boolean , boolean boolean , boolean boolean ) { this . boolean = ! boolean ; this . boolean = ! boolean ; this . boolean = ! boolean ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( true , true , true ); }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation , ViewIndexed org.springframework.data.couchbase.repository.support.ViewIndexed , N1qlPrimaryIndexed org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed , N1qlSecondaryIndexed org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed , CouchbaseOperations org.springframework.data.couchbase.repository.support.CouchbaseOperations ) { Observable < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = Observable . empty ( ) ; Observable < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = Observable . empty ( ) ; Observable < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = Observable . empty ( ) ; if ( org.springframework.data.couchbase.repository.support.ViewIndexed != null && ! boolean ) { org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( org.springframework.data.couchbase.repository.support.ViewIndexed , org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.CouchbaseOperations . getCouchbaseBucket ( ) , org.springframework.data.couchbase.repository.support.CouchbaseOperations . getConverter ( ) . getTypeKey ( ) ) ; } if ( org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed != null && ! boolean ) { org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.CouchbaseOperations . getCouchbaseBucket ( ) ) ; } if ( org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed != null && ! boolean ) { org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed , org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.CouchbaseOperations . getCouchbaseBucket ( ) , org.springframework.data.couchbase.repository.support.CouchbaseOperations . getConverter ( ) . getTypeKey ( ) ) ; } Observable . mergeDelayError ( org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> , org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> , org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ) . toBlocking ( ) . lastOrDefault ( null ) ; }  <METHOD_END>
<METHOD_START> public void void ( RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation , ViewIndexed org.springframework.data.couchbase.repository.support.ViewIndexed , N1qlPrimaryIndexed org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed , N1qlSecondaryIndexed org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed , RxJavaCouchbaseOperations org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations ) { Observable < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = Observable . empty ( ) ; Observable < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = Observable . empty ( ) ; Observable < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = Observable . empty ( ) ; if ( org.springframework.data.couchbase.repository.support.ViewIndexed != null && ! boolean ) { org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( org.springframework.data.couchbase.repository.support.ViewIndexed , org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getCouchbaseBucket ( ) , org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getConverter ( ) . getTypeKey ( ) ) ; } if ( org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed != null && ! boolean ) { org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getCouchbaseBucket ( ) ) ; } if ( org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed != null && ! boolean ) { org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> = org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed , org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getCouchbaseBucket ( ) , org.springframework.data.couchbase.repository.support.RxJavaCouchbaseOperations . getConverter ( ) . getTypeKey ( ) ) ; } Observable . mergeDelayError ( org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> , org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> , org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ) . toBlocking ( ) . lastOrDefault ( null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( final RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation , Bucket org.springframework.data.couchbase.repository.support.Bucket ) { final java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.Bucket . name ( ) ; Statement org.springframework.data.couchbase.repository.support.Statement = Index . createPrimaryIndex ( ) . on ( java.lang.String ) . using ( IndexType . GSI ) ; org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; return org.springframework.data.couchbase.repository.support.Bucket . async ( ) . query ( org.springframework.data.couchbase.repository.support.Statement ) . flatMap ( new Func1 < AsyncN1qlQueryResult , Observable < JsonObject > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> < JsonObject > org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> ( AsyncN1qlQueryResult org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult ) { return org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult . errors ( ) ; } } ) . defaultIfEmpty ( org.springframework.data.couchbase.repository.support.JsonObject ) . flatMap ( new Func1 < JsonObject , Observable < java.lang.Void > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( JsonObject org.springframework.data.couchbase.repository.support.JsonObject ) { if ( org.springframework.data.couchbase.repository.support.JsonObject == org.springframework.data.couchbase.repository.support.JsonObject ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; return Observable . empty ( ) ; } else if ( org.springframework.data.couchbase.repository.support.JsonObject . getString ( STRING ) . contains ( STRING ) || ( org.springframework.data.couchbase.repository.support.JsonObject . containsKey ( STRING ) && org.springframework.data.couchbase.repository.support.JsonObject . getLong ( STRING ) == NUMBER ) ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING ) ; return Observable . empty ( ) ; } else { return Observable . error ( new CouchbaseQueryExecutionException ( STRING + java.lang.String + STRING + org.springframework.data.couchbase.repository.support.JsonObject ) ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> < JsonObject > org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> ( AsyncN1qlQueryResult org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult ) { return org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult . errors ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( JsonObject org.springframework.data.couchbase.repository.support.JsonObject ) { if ( org.springframework.data.couchbase.repository.support.JsonObject == org.springframework.data.couchbase.repository.support.JsonObject ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; return Observable . empty ( ) ; } else if ( org.springframework.data.couchbase.repository.support.JsonObject . getString ( STRING ) . contains ( STRING ) || ( org.springframework.data.couchbase.repository.support.JsonObject . containsKey ( STRING ) && org.springframework.data.couchbase.repository.support.JsonObject . getLong ( STRING ) == NUMBER ) ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING ) ; return Observable . empty ( ) ; } else { return Observable . error ( new CouchbaseQueryExecutionException ( STRING + java.lang.String + STRING + org.springframework.data.couchbase.repository.support.JsonObject ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( N1qlSecondaryIndexed org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed , final RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation , Bucket org.springframework.data.couchbase.repository.support.Bucket , java.lang.String java.lang.String ) { final java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.Bucket . name ( ) ; final java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed . indexName ( ) ; final java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.RepositoryInformation . getDomainType ( ) . getName ( ) ; Statement org.springframework.data.couchbase.repository.support.Statement = Index . createIndex ( java.lang.String ) . on ( java.lang.String , x ( java.lang.String ) ) . where ( x ( java.lang.String ) . eq ( s ( java.lang.String ) ) ) . using ( IndexType . GSI ) ; org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; return org.springframework.data.couchbase.repository.support.Bucket . async ( ) . query ( org.springframework.data.couchbase.repository.support.Statement ) . flatMap ( new Func1 < AsyncN1qlQueryResult , Observable < JsonObject > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> < JsonObject > org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> ( AsyncN1qlQueryResult org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult ) { return org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult . errors ( ) ; } } ) . defaultIfEmpty ( org.springframework.data.couchbase.repository.support.JsonObject ) . flatMap ( new Func1 < JsonObject , Observable < java.lang.Void > > ( ) { @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( JsonObject org.springframework.data.couchbase.repository.support.JsonObject ) { if ( org.springframework.data.couchbase.repository.support.JsonObject == org.springframework.data.couchbase.repository.support.JsonObject ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; return Observable . empty ( ) ; } else if ( org.springframework.data.couchbase.repository.support.JsonObject . getString ( STRING ) . contains ( STRING + java.lang.String + STRING ) || ( org.springframework.data.couchbase.repository.support.JsonObject . containsKey ( STRING ) && org.springframework.data.couchbase.repository.support.JsonObject . getLong ( STRING ) == NUMBER ) ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING ) ; return Observable . empty ( ) ; } else { return Observable . error ( new CouchbaseQueryExecutionException ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING + org.springframework.data.couchbase.repository.support.JsonObject ) ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> < JsonObject > org.springframework.data.couchbase.repository.support.Observable<org.springframework.data.couchbase.repository.support.JsonObject> ( AsyncN1qlQueryResult org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult ) { return org.springframework.data.couchbase.repository.support.AsyncN1qlQueryResult . errors ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( JsonObject org.springframework.data.couchbase.repository.support.JsonObject ) { if ( org.springframework.data.couchbase.repository.support.JsonObject == org.springframework.data.couchbase.repository.support.JsonObject ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; return Observable . empty ( ) ; } else if ( org.springframework.data.couchbase.repository.support.JsonObject . getString ( STRING ) . contains ( STRING + java.lang.String + STRING ) || ( org.springframework.data.couchbase.repository.support.JsonObject . containsKey ( STRING ) && org.springframework.data.couchbase.repository.support.JsonObject . getLong ( STRING ) == NUMBER ) ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING ) ; return Observable . empty ( ) ; } else { return Observable . error ( new CouchbaseQueryExecutionException ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING + org.springframework.data.couchbase.repository.support.JsonObject ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> < java.lang.Void > org.springframework.data.couchbase.repository.support.Observable<java.lang.Void> ( ViewIndexed org.springframework.data.couchbase.repository.support.ViewIndexed , final RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation , Bucket org.springframework.data.couchbase.repository.support.Bucket , java.lang.String java.lang.String ) { if ( org.springframework.data.couchbase.repository.support.ViewIndexed == null ) return Observable . empty ( ) ; org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; BucketManager org.springframework.data.couchbase.repository.support.BucketManager = org.springframework.data.couchbase.repository.support.Bucket . bucketManager ( ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.ViewIndexed . viewName ( ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.ViewIndexed . mapFunction ( ) ; if ( java.lang.String . boolean ( ) ) { java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.RepositoryInformation . getDomainType ( ) . getName ( ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.String , java.lang.String , java.lang.String ) ; } java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.ViewIndexed . reduceFunction ( ) ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = null ; } com . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase com.couchbase.client.java.view.View = DefaultView . create ( java.lang.String , java.lang.String , java.lang.String ) ; DesignDocument org.springframework.data.couchbase.repository.support.DesignDocument = null ; try { org.springframework.data.couchbase.repository.support.DesignDocument = org.springframework.data.couchbase.repository.support.BucketManager . getDesignDocument ( org.springframework.data.couchbase.repository.support.ViewIndexed . designDoc ( ) ) ; } catch( DesignDocumentDoesNotExistException org.springframework.data.couchbase.repository.support.DesignDocumentDoesNotExistException ) { } if ( org.springframework.data.couchbase.repository.support.DesignDocument != null ) { for ( com . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase com.couchbase.client.java.view.View : org.springframework.data.couchbase.repository.support.DesignDocument . views ( ) ) { if ( com.couchbase.client.java.view.View . name ( ) . equals ( java.lang.String ) ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.ViewIndexed . designDoc ( ) , java.lang.String ) ; return Observable . empty ( ) ; } } org.springframework.data.couchbase.repository.support.DesignDocument . views ( ) . add ( com.couchbase.client.java.view.View ) ; } else { org.springframework.data.couchbase.repository.support.DesignDocument = DesignDocument . create ( org.springframework.data.couchbase.repository.support.ViewIndexed . designDoc ( ) , java.util.Collections . java.util.List ( com.couchbase.client.java.view.View ) ) ; } return org.springframework.data.couchbase.repository.support.BucketManager . async ( ) . upsertDesignDocument ( org.springframework.data.couchbase.repository.support.DesignDocument ) . map ( new Func1 < DesignDocument , java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( DesignDocument org.springframework.data.couchbase.repository.support.DesignDocument ) { return null ; } } ) . doOnNext ( new Action1 < java.lang.Void > ( ) { @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( DesignDocument org.springframework.data.couchbase.repository.support.DesignDocument ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) { org.springframework.data.couchbase.repository.support.Logger . debug ( STRING , org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) . getSimpleName ( ) ) ; }  <METHOD_END>
