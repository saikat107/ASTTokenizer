<METHOD_START> @ java.lang.Override public org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ) { return new ClassFilter ( ) { @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( TestBean .class ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ) { return new RootClassFilter ( org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ) { return new RootClassFilter ( org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ) { return new RootClassFilter ( org.springframework.aop.support.PointcutsTests.MyTestBeanSubclass .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( Pointcuts . matches ( Pointcut . TRUE , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( Pointcuts . matches ( Pointcut . TRUE , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( Pointcut . TRUE , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( Pointcut . TRUE , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( Pointcuts . matches ( Pointcut . TRUE , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( Pointcut . TRUE , java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pointcut org.springframework.aop.support.Pointcut = Pointcuts . union ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pointcut org.springframework.aop.support.Pointcut = Pointcuts . union ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; org.springframework.aop.support.Pointcut = Pointcuts . union ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; Pointcut org.springframework.aop.support.Pointcut = Pointcuts . union ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; Pointcut org.springframework.aop.support.Pointcut = Pointcuts . intersection ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBeanSubclass .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBeanSubclass .class ) ) ; org.springframework.aop.support.Pointcut = Pointcuts . intersection ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBeanSubclass .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBeanSubclass .class ) ) ; Pointcut org.springframework.aop.support.Pointcut = Pointcuts . union ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBeanSubclass .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBeanSubclass .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , org.springframework.aop.support.PointcutsTests.MyTestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pointcut org.springframework.aop.support.Pointcut = Pointcuts . intersection ( org.springframework.aop.support.Pointcut , org.springframework.aop.support.Pointcut ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.Pointcut , java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
