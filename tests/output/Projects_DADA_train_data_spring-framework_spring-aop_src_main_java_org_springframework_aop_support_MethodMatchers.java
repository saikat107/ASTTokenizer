<METHOD_START> public static org.springframework.aop.support.MethodMatcher org.springframework.aop.support.MethodMatcher ( MethodMatcher org.springframework.aop.support.MethodMatcher , MethodMatcher org.springframework.aop.support.MethodMatcher ) { return new org.springframework.aop.support.MethodMatchers.UnionMethodMatcher ( org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.MethodMatcher ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.aop.support.MethodMatcher org.springframework.aop.support.MethodMatcher ( MethodMatcher org.springframework.aop.support.MethodMatcher , ClassFilter org.springframework.aop.support.ClassFilter , MethodMatcher org.springframework.aop.support.MethodMatcher , ClassFilter org.springframework.aop.support.ClassFilter ) { return new org.springframework.aop.support.MethodMatchers.ClassFilterAwareUnionMethodMatcher ( org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.ClassFilter , org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.ClassFilter ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.support.MethodMatcher org.springframework.aop.support.MethodMatcher ( MethodMatcher org.springframework.aop.support.MethodMatcher , MethodMatcher org.springframework.aop.support.MethodMatcher ) { return new org.springframework.aop.support.MethodMatchers.IntersectionMethodMatcher ( org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.MethodMatcher ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( MethodMatcher org.springframework.aop.support.MethodMatcher , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { Assert . notNull ( org.springframework.aop.support.MethodMatcher , STRING ) ; return ( ( org.springframework.aop.support.MethodMatcher instanceof IntroductionAwareMethodMatcher && ( ( IntroductionAwareMethodMatcher ) org.springframework.aop.support.MethodMatcher ) . matches ( java.lang.reflect.Method , java.lang.Class<> , boolean ) ) || org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( MethodMatcher org.springframework.aop.support.MethodMatcher , MethodMatcher org.springframework.aop.support.MethodMatcher ) { Assert . notNull ( org.springframework.aop.support.MethodMatcher , STRING ) ; Assert . notNull ( org.springframework.aop.support.MethodMatcher , STRING ) ; this . org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.MethodMatcher ; this . org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.MethodMatcher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { return ( boolean ( java.lang.Class<> ) && org.springframework.aop.support.MethodMatchers . boolean ( this . org.springframework.aop.support.MethodMatcher , java.lang.reflect.Method , java.lang.Class<> , boolean ) ) || ( boolean ( java.lang.Class<> ) && org.springframework.aop.support.MethodMatchers . boolean ( this . org.springframework.aop.support.MethodMatcher , java.lang.reflect.Method , java.lang.Class<> , boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( boolean ( java.lang.Class<> ) && this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) ) || ( boolean ( java.lang.Class<> ) && this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.aop.support.MethodMatcher . isRuntime ( ) || this . org.springframework.aop.support.MethodMatcher . isRuntime ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> , java.lang.Object[] ) || this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.aop.support.MethodMatchers.UnionMethodMatcher ) ) { return false ; } org.springframework.aop.support.MethodMatchers.UnionMethodMatcher org.springframework.aop.support.MethodMatchers.UnionMethodMatcher = ( org.springframework.aop.support.MethodMatchers.UnionMethodMatcher ) java.lang.Object ; return ( this . org.springframework.aop.support.MethodMatcher . equals ( org.springframework.aop.support.MethodMatchers.UnionMethodMatcher . org.springframework.aop.support.MethodMatcher ) && this . org.springframework.aop.support.MethodMatcher . equals ( org.springframework.aop.support.MethodMatchers.UnionMethodMatcher . org.springframework.aop.support.MethodMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int = NUMBER * int + this . org.springframework.aop.support.MethodMatcher . hashCode ( ) ; int = NUMBER * int + this . org.springframework.aop.support.MethodMatcher . hashCode ( ) ; return int ; }  <METHOD_END>
<METHOD_START> public void ( MethodMatcher org.springframework.aop.support.MethodMatcher , ClassFilter org.springframework.aop.support.ClassFilter , MethodMatcher org.springframework.aop.support.MethodMatcher , ClassFilter org.springframework.aop.support.ClassFilter ) { super( org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.MethodMatcher ); this . org.springframework.aop.support.ClassFilter = org.springframework.aop.support.ClassFilter ; this . org.springframework.aop.support.ClassFilter = org.springframework.aop.support.ClassFilter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . org.springframework.aop.support.ClassFilter . matches ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . org.springframework.aop.support.ClassFilter . matches ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! super. boolean ( java.lang.Object ) ) { return false ; } ClassFilter org.springframework.aop.support.ClassFilter = ClassFilter . TRUE ; ClassFilter org.springframework.aop.support.ClassFilter = ClassFilter . TRUE ; if ( java.lang.Object instanceof org.springframework.aop.support.MethodMatchers.ClassFilterAwareUnionMethodMatcher ) { org.springframework.aop.support.MethodMatchers.ClassFilterAwareUnionMethodMatcher org.springframework.aop.support.MethodMatchers.ClassFilterAwareUnionMethodMatcher = ( org.springframework.aop.support.MethodMatchers.ClassFilterAwareUnionMethodMatcher ) java.lang.Object ; org.springframework.aop.support.ClassFilter = org.springframework.aop.support.MethodMatchers.ClassFilterAwareUnionMethodMatcher . org.springframework.aop.support.ClassFilter ; org.springframework.aop.support.ClassFilter = org.springframework.aop.support.MethodMatchers.ClassFilterAwareUnionMethodMatcher . org.springframework.aop.support.ClassFilter ; } return ( this . org.springframework.aop.support.ClassFilter . equals ( org.springframework.aop.support.ClassFilter ) && this . org.springframework.aop.support.ClassFilter . equals ( org.springframework.aop.support.ClassFilter ) ) ; }  <METHOD_END>
<METHOD_START> public void ( MethodMatcher org.springframework.aop.support.MethodMatcher , MethodMatcher org.springframework.aop.support.MethodMatcher ) { Assert . notNull ( org.springframework.aop.support.MethodMatcher , STRING ) ; Assert . notNull ( org.springframework.aop.support.MethodMatcher , STRING ) ; this . org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.MethodMatcher ; this . org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.MethodMatcher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { return org.springframework.aop.support.MethodMatchers . boolean ( this . org.springframework.aop.support.MethodMatcher , java.lang.reflect.Method , java.lang.Class<> , boolean ) && org.springframework.aop.support.MethodMatchers . boolean ( this . org.springframework.aop.support.MethodMatcher , java.lang.reflect.Method , java.lang.Class<> , boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) && this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.aop.support.MethodMatcher . isRuntime ( ) || this . org.springframework.aop.support.MethodMatcher . isRuntime ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { boolean boolean = this . org.springframework.aop.support.MethodMatcher . isRuntime ( ) ? this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> , java.lang.Object[] ) : this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) ; boolean boolean = this . org.springframework.aop.support.MethodMatcher . isRuntime ( ) ? this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> , java.lang.Object[] ) : this . org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) ; return boolean && boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.aop.support.MethodMatchers.IntersectionMethodMatcher ) ) { return false ; } org.springframework.aop.support.MethodMatchers.IntersectionMethodMatcher org.springframework.aop.support.MethodMatchers.IntersectionMethodMatcher = ( org.springframework.aop.support.MethodMatchers.IntersectionMethodMatcher ) java.lang.Object ; return ( this . org.springframework.aop.support.MethodMatcher . equals ( org.springframework.aop.support.MethodMatchers.IntersectionMethodMatcher . org.springframework.aop.support.MethodMatcher ) && this . org.springframework.aop.support.MethodMatcher . equals ( org.springframework.aop.support.MethodMatchers.IntersectionMethodMatcher . org.springframework.aop.support.MethodMatcher ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int = NUMBER * int + this . org.springframework.aop.support.MethodMatcher . hashCode ( ) ; int = NUMBER * int + this . org.springframework.aop.support.MethodMatcher . hashCode ( ) ; return int ; }  <METHOD_END>
