<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.mongodb.core.MongoDbFactory . getExceptionTranslator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoExceptionTranslator ) ; MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) ; MappingMongoConverter org.springframework.data.mongodb.core.MappingMongoConverter = new MappingMongoConverter ( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.MongoDbFactory ) , new MongoMappingContext ( ) ) ; this . org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallback<org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target> = org.springframework.data.mongodb.core.MongoTemplate .new UnwrapAndReadDocumentCallback ( org.springframework.data.mongodb.core.MappingMongoConverter , org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target = org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallback<org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target> . doWith ( new Document ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target = org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallback<org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target> . doWith ( new Document ( STRING , new Document ( STRING , STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target = org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallback<org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target> . doWith ( new Document ( STRING , new Document ( STRING , STRING ) ) . append ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target = org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallback<org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target> . doWith ( new Document ( STRING , STRING ) . append ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.UnwrapAndReadDocumentCallbackUnitTests.Target . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
