<METHOD_START> @ Before public void void ( ) java.io.IOException { this . java.io.File = this . org.springframework.boot.web.embedded.undertow.TemporaryFolder . newFolder ( ) ; this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence = new FileSessionPersistence ( this . java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> < java.lang.String , PersistentSession > java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> = this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence . loadSessionAttributes ( STRING , this . java.lang.ClassLoader ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> < java.lang.String , PersistentSession > java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> = new java.util.LinkedHashMap<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; PersistentSession org.springframework.boot.web.embedded.undertow.PersistentSession = new PersistentSession ( this . java.util.Date , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> . put ( STRING , org.springframework.boot.web.embedded.undertow.PersistentSession ) ; this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence . persistSessions ( STRING , java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> ) ; java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> < java.lang.String , PersistentSession > java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> = this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence . loadSessionAttributes ( STRING , this . java.lang.ClassLoader ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> ) . isNotNull ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> . get ( STRING ) . getExpiration ( ) ) . isEqualTo ( this . java.util.Date ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> . get ( STRING ) . getSessionData ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Date java.util.Date = new java.util.Date ( java.lang.System . long ( ) - NUMBER ) ; java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> < java.lang.String , PersistentSession > java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> = new java.util.LinkedHashMap<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; PersistentSession org.springframework.boot.web.embedded.undertow.PersistentSession = new PersistentSession ( java.util.Date , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> . put ( STRING , org.springframework.boot.web.embedded.undertow.PersistentSession ) ; this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence . persistSessions ( STRING , java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> ) ; java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> < java.lang.String , PersistentSession > java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> = this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence . loadSessionAttributes ( STRING , this . java.lang.ClassLoader ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> ) . isNotNull ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> . containsKey ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( this . java.io.File , STRING ) ; java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> < java.lang.String , PersistentSession > java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> = new java.util.LinkedHashMap<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> <> ( ) ; this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence . persistSessions ( STRING , java.util.Map<java.lang.String,org.springframework.boot.web.embedded.undertow.PersistentSession> ) ; assertThat ( java.io.File . boolean ( ) ) . isTrue ( ) ; this . org.springframework.boot.web.embedded.undertow.FileSessionPersistence . clear ( STRING ) ; assertThat ( java.io.File . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
