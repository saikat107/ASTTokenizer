<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . LOWEST_PRECEDENCE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<? extends org.springframework.web.socket.messaging.ApplicationEvent> < ? extends ApplicationEvent > java.lang.Class<? extends org.springframework.web.socket.messaging.ApplicationEvent> ) { return AbstractSubProtocolEvent .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.web.socket.messaging.ApplicationEvent ) { AbstractSubProtocolEvent org.springframework.web.socket.messaging.AbstractSubProtocolEvent = ( AbstractSubProtocolEvent ) org.springframework.web.socket.messaging.ApplicationEvent ; Message < ? > org.springframework.web.socket.messaging.Message<?> = org.springframework.web.socket.messaging.AbstractSubProtocolEvent . getMessage ( ) ; SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , SimpMessageHeaderAccessor .class ) ; java.lang.String java.lang.String = org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getSessionId ( ) ; if ( org.springframework.web.socket.messaging.ApplicationEvent instanceof SessionSubscribeEvent ) { org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession = this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( java.lang.String ) ; if ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession != null ) { java.lang.String java.lang.String = org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getSubscriptionId ( ) ; java.lang.String java.lang.String = org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getDestination ( ) ; org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession . void ( java.lang.String , java.lang.String ) ; } } else if ( org.springframework.web.socket.messaging.ApplicationEvent instanceof SessionConnectedEvent ) { java.security.Principal java.security.Principal = org.springframework.web.socket.messaging.AbstractSubProtocolEvent . getUser ( ) ; if ( java.security.Principal == null ) { return; } java.lang.String java.lang.String = java.security.Principal . java.lang.String ( ) ; if ( java.security.Principal instanceof DestinationUserNameProvider ) { java.lang.String = ( ( DestinationUserNameProvider ) java.security.Principal ) . getDestinationUserName ( ) ; } synchronized ( this . java.lang.Object ) { org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser = this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ( java.lang.String ) ; if ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser == null ) { org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser = new org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ( java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ( java.lang.String , org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ) ; } org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession = new org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( java.lang.String , org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ) ; org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser . void ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ) ; this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( java.lang.String , org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ) ; } } else if ( org.springframework.web.socket.messaging.ApplicationEvent instanceof SessionDisconnectEvent ) { synchronized ( this . java.lang.Object ) { org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession = this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( java.lang.String ) ; if ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession != null ) { org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser = org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ( ) ; org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser . void ( java.lang.String ) ; if ( ! org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser . boolean ( ) ) { this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser . java.lang.String ( ) ) ; } } } } else if ( org.springframework.web.socket.messaging.ApplicationEvent instanceof SessionUnsubscribeEvent ) { org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession = this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( java.lang.String ) ; if ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession != null ) { java.lang.String java.lang.String = org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getSubscriptionId ( ) ; org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession . void ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.SimpUser org.springframework.web.socket.messaging.SimpUser ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.socket.messaging.SimpUser> < SimpUser > java.util.Set<org.springframework.web.socket.messaging.SimpUser> ( ) { return new java.util.HashSet <> ( this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> . java.util.Collection<org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> . int ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> < SimpSubscription > java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> ( SimpSubscriptionMatcher org.springframework.web.socket.messaging.SimpSubscriptionMatcher ) { java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> < SimpSubscription > java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> = new java.util.HashSet<org.springframework.web.socket.messaging.SimpSubscription> <> ( ) ; for ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession : this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession> . java.util.Collection<org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession> ( ) ) { for ( SimpSubscription org.springframework.web.socket.messaging.SimpSubscription : org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSubscription> . values ( ) ) { if ( org.springframework.web.socket.messaging.SimpSubscriptionMatcher . match ( org.springframework.web.socket.messaging.SimpSubscription ) ) { java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> . add ( org.springframework.web.socket.messaging.SimpSubscription ) ; } } } return java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSession> . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.SimpSession org.springframework.web.socket.messaging.SimpSession ( java.lang.String java.lang.String ) { return ( java.lang.String != null ? this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSession> . get ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.socket.messaging.SimpSession> < SimpSession > java.util.Set<org.springframework.web.socket.messaging.SimpSession> ( ) { return new java.util.HashSet <> ( this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSession> . values ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( SimpSession org.springframework.web.socket.messaging.SimpSession ) { this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSession> . put ( org.springframework.web.socket.messaging.SimpSession . getId ( ) , org.springframework.web.socket.messaging.SimpSession ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSession> . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof SimpUser && this . java.lang.String . boolean ( ( ( SimpUser ) java.lang.Object ) . getName ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING + this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSession> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser = org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ( ) { return this . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpUser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> < SimpSubscription > java.util.Set<org.springframework.web.socket.messaging.SimpSubscription> ( ) { return new java.util.HashSet <> ( this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSubscription> . values ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSubscription> . put ( java.lang.String , new org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSubscription ( java.lang.String , java.lang.String , this ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSubscription> . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof SimpSubscription && this . java.lang.String . boolean ( ( ( SimpSubscription ) java.lang.Object ) . getId ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING + this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.SimpSubscription> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession = org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( ) { return this . org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof SimpSubscription ) ) { return false ; } SimpSubscription org.springframework.web.socket.messaging.SimpSubscription = ( SimpSubscription ) java.lang.Object ; return ( this . java.lang.String . boolean ( org.springframework.web.socket.messaging.SimpSubscription . getId ( ) ) && org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( ) . java.lang.String ( ) . boolean ( org.springframework.web.socket.messaging.SimpSubscription . getSession ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) * NUMBER + org.springframework.web.socket.messaging.DefaultSimpUserRegistry.LocalSimpSession ( ) . java.lang.String ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String ; }  <METHOD_END>
