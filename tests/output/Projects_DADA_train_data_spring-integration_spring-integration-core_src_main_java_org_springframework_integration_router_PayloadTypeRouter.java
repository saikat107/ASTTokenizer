<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { if ( CollectionUtils . isEmpty ( this . channelMappings ) ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.router.Message<> . getPayload ( ) . getClass ( ) ; boolean boolean = java.lang.Class<> . boolean ( ) ; if ( boolean ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<?> ( ) ; } java.lang.String java.lang.String = this . java.lang.String ( java.lang.Class<> , boolean ) ; return ( java.lang.String != null ) ? java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( java.lang.String ) : null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { int int = java.lang.Integer . int ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.String java.lang.String : this . channelMappings . keySet ( ) ) { if ( boolean ) { if ( ! java.lang.String . boolean ( java.lang.String ) ) { continue; } java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { continue; } int int = int ( java.lang.String , java.lang.Class<> , NUMBER ) ; if ( int < int ) { int = int ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( ( boolean ) ? java.lang.String + java.lang.String : java.lang.String ) ; } else if ( int == int && int != java.lang.Integer . int ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( java.util.List<java.lang.String> . int ( ) > NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + STRING + java.util.List<java.lang.String> ) ; } if ( CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { return null ; } return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , int int ) { if ( java.lang.Class<> . java.lang.String ( ) . boolean ( java.lang.String ) ) { return int ; } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { if ( java.lang.Class<> . java.lang.String ( ) . boolean ( java.lang.String ) ) { return ( int % NUMBER != NUMBER ) ? int + NUMBER : int + NUMBER ; } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { int int = this . int ( java.lang.String , java.lang.Class<> , int + NUMBER ) ; if ( int < java.lang.Integer . int ) { return int ; } } } if ( java.lang.Class<> . java.lang.Class<? super > ( ) == null ) { return java.lang.Integer . int ; } return this . int ( java.lang.String , java.lang.Class<> . java.lang.Class<? super > ( ) , int + NUMBER ) ; }  <METHOD_END>
