<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SingleMockBean .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleService .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.RepeatMockBean .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleServiceCaller .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.MockBeanAttributes .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getExtraInterfaces ( ) ) . containsExactly ( ExampleExtraInterface .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getAnswer ( ) ) . isEqualTo ( Answers . RETURNS_SMART_NULLS ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . isSerializable ( ) ) . isEqualTo ( true ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getReset ( ) ) . isEqualTo ( MockReset . NONE ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.MockBeanOnClassAndField .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) ) . isNull ( ) ; MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleServiceCaller .class ) ; QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition = QualifierDefinition . forElement ( ReflectionUtils . findField ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.MockBeanOnClassAndField .class , STRING ) ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) ) . isNotNull ( ) . isEqualTo ( org.springframework.boot.test.mock.mockito.QualifierDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.MockBeanInferClassToMock .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleService .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.MockBeanMissingClassToMock .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.MockBeanMultipleClasses .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition ( NUMBER ) . getTypeToMock ( ) . resolve ( ) ) . isEqualTo ( ExampleServiceCaller .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.MockBeanMultipleClassesWithName .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SingleSpyBean .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( RealExampleService .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.RepeatSpyBean .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( RealExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( ExampleServiceCaller .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SpyBeanAttributes .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( RealExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getReset ( ) ) . isEqualTo ( MockReset . NONE ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getQualifier ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SpyBeanOnClassAndField .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getQualifier ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( RealExampleService .class ) ; SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) ; QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition = QualifierDefinition . forElement ( ReflectionUtils . findField ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SpyBeanOnClassAndField .class , STRING ) ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getQualifier ( ) ) . isNotNull ( ) . isEqualTo ( org.springframework.boot.test.mock.mockito.QualifierDefinition ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( ExampleServiceCaller .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SpyBeanInferClassToMock .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( RealExampleService .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SpyBeanMissingClassToMock .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SpyBeanMultipleClasses .class ) ; assertThat ( java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( RealExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.SpyDefinition ( NUMBER ) . getTypeToSpy ( ) . resolve ( ) ) . isEqualTo ( ExampleServiceCaller .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( org.springframework.boot.test.mock.mockito.DefinitionsParserTests.SpyBeanMultipleClassesWithName .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.mock.mockito.MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition ( int int ) { return ( MockDefinition ) java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) . get ( int ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.mock.mockito.SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition ( int int ) { return ( SpyDefinition ) java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) . get ( int ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.test.mock.mockito.Definition> < Definition > java.util.List<org.springframework.boot.test.mock.mockito.Definition> ( ) { return new java.util.ArrayList <> ( this . org.springframework.boot.test.mock.mockito.DefinitionsParser . getDefinitions ( ) ) ; }  <METHOD_END>
