<METHOD_START> public void ( ConversionService org.springframework.core.convert.support.ConversionService ) { this . org.springframework.core.convert.support.ConversionService = org.springframework.core.convert.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( new ConvertiblePair ( java.util.Map .class , java.util.Map .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return boolean ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) && boolean ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( java.lang.Object == null ) { return null ; } java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ; boolean boolean = ! org.springframework.core.convert.support.TypeDescriptor . getType ( ) . isInstance ( java.lang.Object ) ; if ( ! boolean && java.util.Map<java.lang.Object,java.lang.Object> . boolean ( ) ) { return java.util.Map<java.lang.Object,java.lang.Object> ; } TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = org.springframework.core.convert.support.TypeDescriptor . getMapKeyTypeDescriptor ( ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = org.springframework.core.convert.support.TypeDescriptor . getMapValueTypeDescriptor ( ) ; java.util.List<org.springframework.core.convert.support.MapToMapConverter.MapEntry> < org.springframework.core.convert.support.MapToMapConverter.MapEntry > java.util.List<org.springframework.core.convert.support.MapToMapConverter.MapEntry> = new java.util.ArrayList<org.springframework.core.convert.support.MapToMapConverter.MapEntry> <> ( java.util.Map<java.lang.Object,java.lang.Object> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; java.util.List<org.springframework.core.convert.support.MapToMapConverter.MapEntry> . boolean ( new org.springframework.core.convert.support.MapToMapConverter.MapEntry ( java.lang.Object , java.lang.Object ) ) ; if ( java.lang.Object != java.lang.Object || java.lang.Object != java.lang.Object ) { boolean = true ; } } if ( ! boolean ) { return java.util.Map<java.lang.Object,java.lang.Object> ; } java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = CollectionFactory . createMap ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) , ( org.springframework.core.convert.support.TypeDescriptor != null ? org.springframework.core.convert.support.TypeDescriptor . getType ( ) : null ) , java.util.Map<java.lang.Object,java.lang.Object> . int ( ) ) ; for ( org.springframework.core.convert.support.MapToMapConverter.MapEntry org.springframework.core.convert.support.MapToMapConverter.MapEntry : java.util.List<org.springframework.core.convert.support.MapToMapConverter.MapEntry> ) { org.springframework.core.convert.support.MapToMapConverter.MapEntry . void ( java.util.Map<java.lang.Object,java.lang.Object> ) ; } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return ConversionUtils . canConvertElements ( org.springframework.core.convert.support.TypeDescriptor . getMapKeyTypeDescriptor ( ) , org.springframework.core.convert.support.TypeDescriptor . getMapKeyTypeDescriptor ( ) , this . org.springframework.core.convert.support.ConversionService ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return ConversionUtils . canConvertElements ( org.springframework.core.convert.support.TypeDescriptor . getMapValueTypeDescriptor ( ) , org.springframework.core.convert.support.TypeDescriptor . getMapValueTypeDescriptor ( ) , this . org.springframework.core.convert.support.ConversionService ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( org.springframework.core.convert.support.TypeDescriptor == null ) { return java.lang.Object ; } return this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor . getMapKeyTypeDescriptor ( java.lang.Object ) , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( org.springframework.core.convert.support.TypeDescriptor == null ) { return java.lang.Object ; } return this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor . getMapValueTypeDescriptor ( java.lang.Object ) , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( this . java.lang.Object , this . java.lang.Object ) ; }  <METHOD_END>
