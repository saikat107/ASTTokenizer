<METHOD_START> @ Before public void void ( ) { KeyValueMappingContext < ? , ? > org.springframework.data.rest.webmvc.json.KeyValueMappingContext<?,?> = new KeyValueMappingContext <> ( ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Person .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithCreatedDate .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Product .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TransientReadOnlyProperty .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference .class ) ; org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> . afterPropertiesSet ( ) ; PersistentEntities org.springframework.data.rest.webmvc.json.PersistentEntities = new PersistentEntities ( java.util.Collections . java.util.Set ( org.springframework.data.rest.webmvc.json.KeyValueMappingContext<,> ) ) ; this . org.springframework.data.rest.webmvc.json.DomainObjectReader = new DomainObjectReader ( org.springframework.data.rest.webmvc.json.PersistentEntities , new Associations ( org.springframework.data.rest.webmvc.json.ResourceMappings , mock ( RepositoryRestConfiguration .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser ( STRING , STRING ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser . java.lang.String ) . isNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; org.springframework.data.rest.webmvc.json.ObjectMapper . setPropertyNamingStrategy ( PropertyNamingStrategy . UPPER_CAMEL_CASE ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Person org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Person = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Person ( STRING , STRING ) , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Person . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Person . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser ( STRING , STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser . java.util.Map<java.lang.String,org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser> = java.util.Collections . java.util.Map<java.lang.String,org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser> ( STRING , new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser ( STRING , STRING ) ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser . java.util.Map<java.lang.String,org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser ( STRING ) . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser . java.util.Map<java.lang.String,org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleUser ( STRING ) . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Map .class ) ; assertThat ( ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ) . java.lang.Object ( STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode = ( ObjectNode ) org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( org.springframework.data.rest.webmvc.json.ObjectNode , STRING , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType . java.lang.Long = NUMBER ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType . java.lang.Long = NUMBER ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType . java.lang.String = STRING ; ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode = ( ObjectNode ) org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( org.springframework.data.rest.webmvc.json.ObjectNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType . java.lang.String ) . isNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType . java.lang.Long ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.VersionedType . java.lang.Long ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode = ( ObjectNode ) org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithCreatedDate org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithCreatedDate = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithCreatedDate ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithCreatedDate . java.util.Date = java.util.Date ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( org.springframework.data.rest.webmvc.json.ObjectNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithCreatedDate , org.springframework.data.rest.webmvc.json.ObjectMapper ) . createdDate ) . isEqualTo ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone . java.util.Calendar = new java.util.GregorianCalendar ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone> . boolean ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( STRING . byte[] ( Charsets . UTF_8 ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User = org.springframework.data.rest.webmvc.json.DomainObjectReader . read ( java.io.ByteArrayInputStream , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.User . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Phone ( NUMBER ) . java.util.Calendar ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.Arrays . java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.HashMap<java.lang.String,java.lang.Object> ) ; ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode = ( ObjectNode ) org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING + STRING + STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( org.springframework.data.rest.webmvc.json.ObjectNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , java.util.List .class ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> = java.util.List ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , java.util.List .class ) ; assertThat ( java.util.List<java.util.Map<java.lang.String,java.lang.String>> . java.util.Map<java.lang.String,java.lang.String> ( NUMBER ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; java.util.Map<java.lang.Object,java.lang.String> < java.lang.Object , java.lang.String > java.util.Map<java.lang.Object,java.lang.String> = java.util.Map ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TypeWithGenericMap . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , java.util.Map .class ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner . java.lang.String = STRING ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner . java.lang.String = STRING ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer . java.lang.String = STRING ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer . java.lang.String = STRING ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner = org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer = org.springframework.data.rest.webmvc.json.DomainObjectReader . doMerge ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer ) . isSameAs ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Outer . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner ) . isSameAs ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Inner ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient . java.lang.String = STRING ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient . java.lang.String = STRING ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithTransient . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item > ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . boolean ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( NUMBER ) . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item > ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . boolean ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING + STRING + STRING + STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( NUMBER ) . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( NUMBER ) . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( NUMBER ) . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item > ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . boolean ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( STRING ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . boolean ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( STRING ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . boolean ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( STRING ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( NUMBER ) . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> = null ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( NUMBER ) . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.lang.Object = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( STRING ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.lang.Object ) . isInstanceOf ( java.util.Collection .class ) ; java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.lang.Object ; assertThat ( java.util.Collection<> ) . hasSize ( NUMBER ) ; java.util.Iterator<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Iterator<java.util.Map<java.lang.String,java.lang.Object>> = ( java.util.Iterator<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ) java.util.Collection<> . java.util.Iterator<> ( ) ; assertThat ( java.util.Iterator<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; assertThat ( java.util.Iterator<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item > ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . boolean ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( STRING ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . boolean ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( STRING ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> ) . isNull ( ) ; assertThat ( ( java.lang.String ) org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.lang.Object ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.lang.Object = STRING ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child = org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = new ObjectMapper ( ) . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Item ( NUMBER ) . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Parent . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Child . java.lang.Object ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Product org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Product = org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Product ( ) , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Product . java.util.Map<java.util.Locale,org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.LocalizedValue> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.LocalizedValue ( java.util.Locale . java.util.Locale ) ) . isEqualTo ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.LocalizedValue ( STRING ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Product . java.util.Map<java.util.Locale,org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.LocalizedValue> . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.LocalizedValue ( java.util.Locale . java.util.Locale ) ) . isEqualTo ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.LocalizedValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReader . readPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.TransientReadOnlyProperty ( ) , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods ( ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum> . boolean ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum ) ; ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper = new ObjectMapper ( ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( STRING ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods = org.springframework.data.rest.webmvc.json.DomainObjectReader . merge ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.CollectionOfEnumWithMethods . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum> , contains ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum . org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleEnum ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested > java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> = java.util.Arrays . java.util.List<T> ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested ( NUMBER , NUMBER ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference ( java.util.Arrays . java.util.List<T> ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested ( NUMBER , NUMBER ) , new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested ( NUMBER , NUMBER ) ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference ( java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference = org.springframework.data.rest.webmvc.json.DomainObjectReader . mergeForPut ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) . isEqualTo ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> == java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested > java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested > ( java.util.Arrays . java.util.List<T> ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested ( NUMBER , NUMBER ) ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference ( new java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> < org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested > ( java.util.Arrays . java.util.List<T> ( new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested ( NUMBER , NUMBER ) , new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested ( NUMBER , NUMBER ) ) ) ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference = new org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference ( java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) ; org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference = org.springframework.data.rest.webmvc.json.DomainObjectReader . mergeForPut ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference , org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference , new ObjectMapper ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) . isEqualTo ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) ; assertThat ( org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.SampleWithReference . java.util.List<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) . isSameAs ( java.util.ArrayList<org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.Nested> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { assertThat ( java.lang.Object ) . isInstanceOf ( java.lang.Class<T> ) ; return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void ( ) {}  <METHOD_END>
<METHOD_START> @ Transient public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {}  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
