<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.mongodb.repository.support.MongoPersistentEntity<org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable> . getType ( ) ) . thenReturn ( org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistableMongoEntityInformation < org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable , java.lang.Long > org.springframework.data.mongodb.repository.support.PersistableMongoEntityInformation<org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable,java.lang.Long> = new PersistableMongoEntityInformation < org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable , java.lang.Long > ( new MappingMongoEntityInformation < org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable , java.lang.Long > ( org.springframework.data.mongodb.repository.support.MongoPersistentEntity<org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable> ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.PersistableMongoEntityInformation<org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable,java.lang.Long> . isNew ( new org.springframework.data.mongodb.repository.support.PersistableMappingMongoEntityInformationUnitTests.TypeImplementingPersistable ( NUMBER , false ) ) , is ( false ) ) ; }  <METHOD_END>
