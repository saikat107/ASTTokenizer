<METHOD_START> @ Before public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.ProceedTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.ProceedTests> ( ) ) ; org.springframework.aop.aspectj.SimpleBean = ( org.springframework.aop.aspectj.SimpleBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ProceedTestingAspect = ( org.springframework.aop.aspectj.ProceedTestingAspect ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ProceedTestingAspect = ( org.springframework.aop.aspectj.ProceedTestingAspect ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.aop.aspectj.SimpleBean . void ( STRING ) ; assertEquals ( STRING , STRING , this . org.springframework.aop.aspectj.SimpleBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.aop.aspectj.SimpleBean . void ( NUMBER ) ; assertEquals ( STRING , NUMBER , this . org.springframework.aop.aspectj.SimpleBean . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.aop.aspectj.SimpleBean . void ( NUMBER ) ; assertTrue ( STRING , this . org.springframework.aop.aspectj.SimpleBean . float ( ) > NUMBER ) ; assertTrue ( STRING , this . org.springframework.aop.aspectj.ProceedTestingAspect . float ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.aop.aspectj.SimpleBean . void ( STRING ) ; assertEquals ( STRING , STRING , this . org.springframework.aop.aspectj.SimpleBean . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , this . org.springframework.aop.aspectj.ProceedTestingAspect . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , this . org.springframework.aop.aspectj.ProceedTestingAspect . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> void void ( float float );  <METHOD_END>
<METHOD_START> float float ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public float float ( ) { return float ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( float float ) { this . float = float ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint , java.lang.String java.lang.String ) throws java.lang.Throwable { return org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( new java.lang.Object [] { java.lang.String . java.lang.String ( ) } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint ) throws java.lang.Throwable { int int = ( ( java.lang.Integer ) org.springframework.aop.aspectj.ProceedingJoinPoint . getArgs ( ) [ NUMBER ] ) . int ( ) ; org.springframework.aop.aspectj.ProceedingJoinPoint . getArgs ( ) [ NUMBER ] = new java.lang.Integer ( int * NUMBER ) ; return org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint , java.lang.Float java.lang.Float ) throws java.lang.Throwable { float float = java.lang.Float . float ( ) ; return org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( new java.lang.Object [] { new java.lang.Float ( float + NUMBER ) } ) ; }  <METHOD_END>
<METHOD_START> public void void ( JoinPoint org.springframework.aop.aspectj.JoinPoint , java.lang.String java.lang.String ) { if ( ! org.springframework.aop.aspectj.JoinPoint . getArgs ( ) [ NUMBER ] . equals ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + STRING + org.springframework.aop.aspectj.JoinPoint . getArgs ( ) [ NUMBER ] + STRING ) ; } this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.ProceedingJoinPoint , java.lang.String java.lang.String ) throws java.lang.Throwable { if ( ! org.springframework.aop.aspectj.ProceedingJoinPoint . getArgs ( ) [ NUMBER ] . equals ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + STRING + org.springframework.aop.aspectj.ProceedingJoinPoint . getArgs ( ) [ NUMBER ] + STRING ) ; } this . java.lang.String = java.lang.String ; return org.springframework.aop.aspectj.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( JoinPoint org.springframework.aop.aspectj.JoinPoint , float float ) { float float = ( ( java.lang.Float ) org.springframework.aop.aspectj.JoinPoint . getArgs ( ) [ NUMBER ] ) . float ( ) ; if ( java.lang.Math . float ( float - float ) > NUMBER ) { throw new java.lang.IllegalStateException ( STRING + float + STRING + STRING + float + STRING ) ; } this . float = float ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public float float ( ) { return this . float ; }  <METHOD_END>
