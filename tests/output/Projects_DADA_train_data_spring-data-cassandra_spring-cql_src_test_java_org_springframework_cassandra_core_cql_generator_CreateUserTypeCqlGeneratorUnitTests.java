<METHOD_START> @ Test public void void ( ) { CreateUserTypeSpecification org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( STRING ) . field ( STRING , DataType . varchar ( ) ) ; assertThat ( toCql ( org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateUserTypeSpecification org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( STRING ) . field ( STRING , DataType . ascii ( ) ) . field ( STRING , DataType . varchar ( ) ) ; assertThat ( toCql ( org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateUserTypeSpecification org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( ) . name ( STRING ) . ifNotExists ( ) . field ( STRING , DataType . ascii ( ) ) . field ( STRING , DataType . varchar ( ) ) ; assertThat ( toCql ( org.springframework.cassandra.core.cql.generator.CreateUserTypeSpecification ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { toCql ( CreateUserTypeSpecification . createType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { toCql ( CreateUserTypeSpecification . createType ( ) . name ( STRING ) ) ; }  <METHOD_END>
