<METHOD_START> public void ( ) { try { this . java.lang.Class<?> = java.lang.Class<? extends org.springframework.jdbc.datasource.WebSphereDataSourceAdapter> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.jdbc.datasource.WebSphereDataSourceAdapter> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.jdbc.datasource.WebSphereDataSourceAdapter> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( STRING ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , ( java.lang.Class<?> < ? > [] ) null ) ; this . java.lang.reflect.Method = this . java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.Class<> ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , int .class ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.Boolean .class ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterPropertiesSet ( ) ; if ( ! this . java.lang.Class<> . boolean ( getTargetDataSource ( ) ) ) { throw new java.lang.IllegalStateException ( STRING + getTargetDataSource ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.sql.SQLException { java.lang.Object java.lang.Object = java.lang.Object ( getCurrentIsolationLevel ( ) , getCurrentReadOnlyFlag ( ) , java.lang.String , java.lang.String ) ; if ( org.springframework.jdbc.datasource.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING + getTargetDataSource ( ) + STRING + java.lang.Object + STRING ) ; } return ( java.sql.Connection ) ReflectionUtils . invokeJdbcMethod ( this . java.lang.reflect.Method , getTargetDataSource ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Integer java.lang.Integer , java.lang.Boolean java.lang.Boolean , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.sql.SQLException { java.lang.Object java.lang.Object = ReflectionUtils . invokeJdbcMethod ( this . java.lang.reflect.Method , null ) ; if ( java.lang.Integer != null ) { ReflectionUtils . invokeJdbcMethod ( this . java.lang.reflect.Method , java.lang.Object , java.lang.Integer ) ; } if ( java.lang.Boolean != null ) { ReflectionUtils . invokeJdbcMethod ( this . java.lang.reflect.Method , java.lang.Object , java.lang.Boolean ) ; } if ( StringUtils . hasLength ( java.lang.String ) ) { ReflectionUtils . invokeJdbcMethod ( this . java.lang.reflect.Method , java.lang.Object , java.lang.String ) ; ReflectionUtils . invokeJdbcMethod ( this . java.lang.reflect.Method , java.lang.Object , java.lang.String ) ; } return java.lang.Object ; }  <METHOD_END>
