<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { MethodMapTransactionAttributeSource org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource = new MethodMapTransactionAttributeSource ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { PropertiesEditor org.springframework.transaction.interceptor.PropertiesEditor = new PropertiesEditor ( ) ; org.springframework.transaction.interceptor.PropertiesEditor . setAsText ( java.lang.String ) ; java.util.Properties java.util.Properties = ( java.util.Properties ) org.springframework.transaction.interceptor.PropertiesEditor . getValue ( ) ; TransactionAttributeEditor org.springframework.transaction.interceptor.TransactionAttributeEditor = new TransactionAttributeEditor ( ) ; java.util.Enumeration<?> < ? > java.util.Enumeration<?> = java.util.Properties . java.util.Enumeration<?> ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; org.springframework.transaction.interceptor.TransactionAttributeEditor . setAsText ( java.lang.String ) ; TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = ( TransactionAttribute ) org.springframework.transaction.interceptor.TransactionAttributeEditor . getValue ( ) ; org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource . addTransactionalMethod ( java.lang.String , org.springframework.transaction.interceptor.TransactionAttribute ) ; } } void ( org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource ) ; }  <METHOD_END>
