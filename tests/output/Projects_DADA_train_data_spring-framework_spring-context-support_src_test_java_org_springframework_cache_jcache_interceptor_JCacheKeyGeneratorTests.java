<METHOD_START> @ Before public void void ( ) { AnnotationConfigApplicationContext org.springframework.cache.jcache.interceptor.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.Config .class ) ; this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.TestKeyGenerator = org.springframework.cache.jcache.interceptor.AnnotationConfigApplicationContext . getBean ( org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.TestKeyGenerator .class ) ; this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService = org.springframework.cache.jcache.interceptor.AnnotationConfigApplicationContext . getBean ( org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService .class ) ; this . org.springframework.cache.jcache.interceptor.Cache = org.springframework.cache.jcache.interceptor.AnnotationConfigApplicationContext . getBean ( CacheManager .class ) . getCache ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.TestKeyGenerator . void ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService . java.lang.Object ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService . java.lang.Object ( NUMBER ) ; assertSame ( java.lang.Object , java.lang.Object ) ; java.lang.Object java.lang.Object = new SimpleKey ( NUMBER ) ; assertEquals ( java.lang.Object , org.springframework.cache.jcache.interceptor.Cache . get ( java.lang.Object ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.TestKeyGenerator . void ( NUMBER , STRING , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService . java.lang.Object ( NUMBER , STRING , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService . java.lang.Object ( NUMBER , STRING , STRING ) ; assertSame ( java.lang.Object , java.lang.Object ) ; java.lang.Object java.lang.Object = new SimpleKey ( NUMBER , STRING , STRING ) ; assertEquals ( java.lang.Object , org.springframework.cache.jcache.interceptor.Cache . get ( java.lang.Object ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.TestKeyGenerator . void ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService . java.lang.Object ( NUMBER , STRING , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService . java.lang.Object ( NUMBER , STRING , STRING ) ; assertSame ( java.lang.Object , java.lang.Object ) ; java.lang.Object java.lang.Object = new SimpleKey ( NUMBER ) ; assertEquals ( java.lang.Object , org.springframework.cache.jcache.interceptor.Cache . get ( java.lang.Object ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.cache.jcache.interceptor.CacheManager org.springframework.cache.jcache.interceptor.CacheManager ( ) { return new ConcurrentMapCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.cache.jcache.interceptor.KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ( ) { return new org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.TestKeyGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService ( ) { return new org.springframework.cache.jcache.interceptor.JCacheKeyGeneratorTests.SimpleService ( ) ; }  <METHOD_END>
<METHOD_START> @ CacheResult public java.lang.Object java.lang.Object ( long long ) { return java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ CacheResult public java.lang.Object java.lang.Object ( long long , java.lang.String ... java.lang.String[] ) { return java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ CacheResult public java.lang.Object java.lang.Object ( @ CacheKey long long , java.lang.String ... java.lang.String[] ) { return java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object ... java.lang.Object[] ) { this . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object ... java.lang.Object[] ) { assertTrue ( STRING + java.util.Arrays . java.lang.String ( this . java.lang.Object[] ) + STRING + java.util.Arrays . java.lang.String ( java.lang.Object[] ) , java.util.Arrays . boolean ( java.lang.Object[] , java.lang.Object[] ) ) ; return new SimpleKey ( java.lang.Object[] ) ; }  <METHOD_END>
