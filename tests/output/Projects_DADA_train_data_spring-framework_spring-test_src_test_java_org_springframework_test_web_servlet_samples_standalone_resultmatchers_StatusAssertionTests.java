<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is ( NUMBER ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is ( NUMBER ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isCreated ( ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isCreated ( ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isBadRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . reason ( STRING ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . reason ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . reason ( endsWith ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( CREATED ) public @ ResponseBody void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.test.web.servlet.samples.standalone.resultmatchers.StatusAssertionTests.Get ( java.lang.String[] = STRING , org.springframework.test.web.servlet.samples.standalone.resultmatchers.HttpStatus = CREATED ) public @ ResponseBody void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( code = BAD_REQUEST , reason = STRING ) public @ ResponseBody void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( NOT_IMPLEMENTED ) public @ ResponseBody void void ( ) {		}  <METHOD_END>
