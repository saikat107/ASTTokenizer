<METHOD_START> public void ( CassandraEntityInformation < T , ID > org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> , CassandraOperations org.springframework.data.cassandra.repository.support.CassandraOperations ) { Assert . notNull ( org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.repository.support.CassandraOperations , STRING ) ; this . org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> = org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> ; this . org.springframework.data.cassandra.repository.support.CassandraOperations = org.springframework.data.cassandra.repository.support.CassandraOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > S S ( S S ) { Assert . notNull ( S , STRING ) ; return org.springframework.data.cassandra.repository.support.CassandraOperations . insert ( S ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.util.List<S> < S > java.util.List<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { Assert . notNull ( java.lang.Iterable<S> , STRING ) ; java.util.List<S> < S > java.util.List<S> = new java.util.ArrayList<S> <> ( ) ; for ( S S : java.lang.Iterable<S> ) { S S ; if ( org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . isNew ( S ) ) { S = org.springframework.data.cassandra.repository.support.CassandraOperations . insert ( S ) ; } else { S = org.springframework.data.cassandra.repository.support.CassandraOperations . update ( S ) ; } if ( S != null ) { java.util.List<S> . boolean ( S ) ; } } return java.util.List<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > S S ( S S ) { Assert . notNull ( S , STRING ) ; return org.springframework.data.cassandra.repository.support.CassandraOperations . insert ( S ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.util.List<S> < S > java.util.List<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { Assert . notNull ( java.lang.Iterable<S> , STRING ) ; java.util.List<S> < S > java.util.List<S> = new java.util.ArrayList<S> <> ( ) ; for ( S S : java.lang.Iterable<S> ) { S S = org.springframework.data.cassandra.repository.support.CassandraOperations . insert ( S ) ; if ( S != null ) { java.util.List<S> . boolean ( S ) ; } } return java.util.List<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<T> < T > java.util.Optional<T> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.cassandra.repository.support.CassandraOperations . selectOneById ( ID , org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getJavaType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.cassandra.repository.support.CassandraOperations . exists ( ID , org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return org.springframework.data.cassandra.repository.support.CassandraOperations . count ( org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( ) { Select org.springframework.data.cassandra.repository.support.Select = QueryBuilder . select ( ) . all ( ) . from ( org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getTableName ( ) . toCql ( ) ) ; return org.springframework.data.cassandra.repository.support.CassandraOperations . select ( org.springframework.data.cassandra.repository.support.Select , org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> ) { Assert . notNull ( java.lang.Iterable<ID> , STRING ) ; return org.springframework.data.cassandra.repository.support.CassandraOperations . selectBySimpleIds ( java.lang.Iterable<ID> , org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ID ID ) { Assert . notNull ( ID , STRING ) ; org.springframework.data.cassandra.repository.support.CassandraOperations . deleteById ( ID , org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( T T ) { Assert . notNull ( T , STRING ) ; void ( org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getId ( T ) . orElseThrow ( ( ) new IllegalArgumentException ( String . format ( STRING , entity ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { Assert . notNull ( java.lang.Iterable<> , STRING ) ; java.lang.Iterable<> . void ( org.springframework.data.cassandra.repository.support.CassandraOperations :: delete ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.data.cassandra.repository.support.CassandraOperations . truncate ( org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
