<METHOD_START> @ Test public void void ( ) { SelectResults org.springframework.data.gemfire.repository.query.SelectResults = mock ( SelectResults .class , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; when ( org.springframework.data.gemfire.repository.query.SelectResults . asList ( ) ) . thenReturn ( java.util.List<java.lang.String> ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . toCollection ( org.springframework.data.gemfire.repository.query.SelectResults ) ; assertSame ( java.util.List<java.lang.String> , java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResultsBag org.springframework.data.gemfire.repository.query.ResultsBag = mock ( ResultsBag .class , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; when ( org.springframework.data.gemfire.repository.query.ResultsBag . asList ( ) ) . thenReturn ( java.util.List<java.lang.String> ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . toCollection ( org.springframework.data.gemfire.repository.query.ResultsBag ) ; assertSame ( java.util.List<java.lang.String> , java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . toCollection ( java.util.List<java.lang.String> ) ; assertSame ( java.util.List<java.lang.String> , java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { NUMBER , NUMBER , NUMBER } ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . toCollection ( java.lang.Object[] ) ; assertNotNull ( java.util.Collection<> ) ; assertNotSame ( java.lang.Object[] , java.util.Collection<> ) ; assertTrue ( java.util.Collection<> instanceof java.util.List ) ; assertEquals ( java.lang.Object[] . int , java.util.Collection<> . int ( ) ) ; assertTrue ( java.util.Collection<> . boolean ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . toCollection ( STRING ) ; assertTrue ( java.util.Collection<> instanceof java.util.List ) ; assertFalse ( java.util.Collection<> . boolean ( ) ) ; assertEquals ( NUMBER , java.util.Collection<> . int ( ) ) ; assertEquals ( STRING , ( ( java.util.List ) java.util.Collection<> ) . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . toCollection ( null ) ; assertNotNull ( java.util.Collection<> ) ; assertTrue ( java.util.Collection<> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod = mock ( GemfireQueryMethod .class , STRING ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasHint ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getHints ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) . java.lang.String[] ( new java.lang.String [ NUMBER ] ) ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasImport ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getImport ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasLimit ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getLimit ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasTrace ( ) ) . thenReturn ( true ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; StringBasedGemfireRepositoryQuery org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery = new StringBasedGemfireRepositoryQuery ( ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . applyQueryAnnotationExtensions ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , org.springframework.data.gemfire.repository.query.QueryString ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString , is ( not ( sameInstance ( org.springframework.data.gemfire.repository.query.QueryString ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasHint ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . getHints ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasImport ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . getImport ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasLimit ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . getLimit ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasTrace ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod = mock ( GemfireQueryMethod .class , STRING ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasHint ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getHints ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) . java.lang.String[] ( new java.lang.String [ NUMBER ] ) ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasImport ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasLimit ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getLimit ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasTrace ( ) ) . thenReturn ( true ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; StringBasedGemfireRepositoryQuery org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery = new StringBasedGemfireRepositoryQuery ( ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . applyQueryAnnotationExtensions ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , org.springframework.data.gemfire.repository.query.QueryString ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString , is ( not ( sameInstance ( org.springframework.data.gemfire.repository.query.QueryString ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasHint ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , never ( ) ) . getHints ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasImport ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , never ( ) ) . getImport ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasLimit ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , never ( ) ) . getLimit ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasTrace ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod = mock ( GemfireQueryMethod .class , STRING ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasHint ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasImport ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getImport ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasLimit ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasTrace ( ) ) . thenReturn ( true ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; StringBasedGemfireRepositoryQuery org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery = new StringBasedGemfireRepositoryQuery ( ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery . applyQueryAnnotationExtensions ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , org.springframework.data.gemfire.repository.query.QueryString ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString , is ( not ( sameInstance ( org.springframework.data.gemfire.repository.query.QueryString ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasHint ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , never ( ) ) . getHints ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasImport ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . getImport ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasLimit ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , never ( ) ) . getLimit ( ) ; verify ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , times ( NUMBER ) ) . hasTrace ( ) ; }  <METHOD_END>
