<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.io.IOException { ScannedGenericBeanDefinition org.springframework.boot.web.servlet.ScannedGenericBeanDefinition = new ScannedGenericBeanDefinition ( new SimpleMetadataReaderFactory ( ) . getMetadataReader ( org.springframework.boot.web.servlet.WebServletHandlerTests.DefaultConfigurationServlet .class . java.lang.String ( ) ) ) ; this . org.springframework.boot.web.servlet.WebServletHandler . handle ( org.springframework.boot.web.servlet.ScannedGenericBeanDefinition , this . org.springframework.boot.web.servlet.SimpleBeanDefinitionRegistry ) ; BeanDefinition org.springframework.boot.web.servlet.BeanDefinition = this . org.springframework.boot.web.servlet.SimpleBeanDefinitionRegistry . getBeanDefinition ( org.springframework.boot.web.servlet.WebServletHandlerTests.DefaultConfigurationServlet .class . java.lang.String ( ) ) ; MutablePropertyValues org.springframework.boot.web.servlet.MutablePropertyValues = org.springframework.boot.web.servlet.BeanDefinition . getPropertyValues ( ) ; assertThat ( org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . isEqualTo ( false ) ; assertThat ( ( ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) ) . isEmpty ( ) ; assertThat ( ( java.lang.Integer ) org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . isEqualTo ( - NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . isEqualTo ( org.springframework.boot.web.servlet.WebServletHandlerTests.DefaultConfigurationServlet .class . java.lang.String ( ) ) ; assertThat ( ( java.lang.String [] ) org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . isEmpty ( ) ; assertThat ( org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . isEqualTo ( org.springframework.boot.web.servlet.ScannedGenericBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ScannedGenericBeanDefinition org.springframework.boot.web.servlet.ScannedGenericBeanDefinition = new ScannedGenericBeanDefinition ( new SimpleMetadataReaderFactory ( ) . getMetadataReader ( org.springframework.boot.web.servlet.WebServletHandlerTests.CustomNameServlet .class . java.lang.String ( ) ) ) ; this . org.springframework.boot.web.servlet.WebServletHandler . handle ( org.springframework.boot.web.servlet.ScannedGenericBeanDefinition , this . org.springframework.boot.web.servlet.SimpleBeanDefinitionRegistry ) ; BeanDefinition org.springframework.boot.web.servlet.BeanDefinition = this . org.springframework.boot.web.servlet.SimpleBeanDefinitionRegistry . getBeanDefinition ( STRING ) ; MutablePropertyValues org.springframework.boot.web.servlet.MutablePropertyValues = org.springframework.boot.web.servlet.BeanDefinition . getPropertyValues ( ) ; assertThat ( org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { BeanDefinition org.springframework.boot.web.servlet.BeanDefinition = org.springframework.boot.web.servlet.BeanDefinition ( org.springframework.boot.web.servlet.WebServletHandlerTests.AsyncSupportedServlet .class ) ; MutablePropertyValues org.springframework.boot.web.servlet.MutablePropertyValues = org.springframework.boot.web.servlet.BeanDefinition . getPropertyValues ( ) ; assertThat ( org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.io.IOException { BeanDefinition org.springframework.boot.web.servlet.BeanDefinition = org.springframework.boot.web.servlet.BeanDefinition ( org.springframework.boot.web.servlet.WebServletHandlerTests.InitParametersServlet .class ) ; MutablePropertyValues org.springframework.boot.web.servlet.MutablePropertyValues = org.springframework.boot.web.servlet.BeanDefinition . getPropertyValues ( ) ; assertThat ( ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . containsEntry ( STRING , STRING ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { BeanDefinition org.springframework.boot.web.servlet.BeanDefinition = org.springframework.boot.web.servlet.BeanDefinition ( org.springframework.boot.web.servlet.WebServletHandlerTests.UrlPatternsServlet .class ) ; MutablePropertyValues org.springframework.boot.web.servlet.MutablePropertyValues = org.springframework.boot.web.servlet.BeanDefinition . getPropertyValues ( ) ; assertThat ( ( java.lang.String [] ) org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { BeanDefinition org.springframework.boot.web.servlet.BeanDefinition = org.springframework.boot.web.servlet.BeanDefinition ( org.springframework.boot.web.servlet.WebServletHandlerTests.UrlPatternsFromValueServlet .class ) ; MutablePropertyValues org.springframework.boot.web.servlet.MutablePropertyValues = org.springframework.boot.web.servlet.BeanDefinition . getPropertyValues ( ) ; assertThat ( ( java.lang.String [] ) org.springframework.boot.web.servlet.MutablePropertyValues . get ( STRING ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.web.servlet.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.web.servlet.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.BeanDefinition ( org.springframework.boot.web.servlet.WebServletHandlerTests.UrlPatternsDeclaredTwiceServlet .class ) ; }  <METHOD_END>
<METHOD_START> org.springframework.boot.web.servlet.BeanDefinition org.springframework.boot.web.servlet.BeanDefinition ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { ScannedGenericBeanDefinition org.springframework.boot.web.servlet.ScannedGenericBeanDefinition = new ScannedGenericBeanDefinition ( new SimpleMetadataReaderFactory ( ) . getMetadataReader ( java.lang.Class<> . java.lang.String ( ) ) ) ; this . org.springframework.boot.web.servlet.WebServletHandler . handle ( org.springframework.boot.web.servlet.ScannedGenericBeanDefinition , this . org.springframework.boot.web.servlet.SimpleBeanDefinitionRegistry ) ; return this . org.springframework.boot.web.servlet.SimpleBeanDefinitionRegistry . getBeanDefinition ( java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
