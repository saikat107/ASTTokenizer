<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( Marshaller org.springframework.integration.ws.Marshaller ) { Assert . notNull ( org.springframework.integration.ws.Marshaller , STRING ) ; Assert . isInstanceOf ( Unmarshaller .class , org.springframework.integration.ws.Marshaller , STRING + STRING ) ; this . org.springframework.integration.ws.Marshaller = org.springframework.integration.ws.Marshaller ; this . org.springframework.integration.ws.Unmarshaller = ( Unmarshaller ) org.springframework.integration.ws.Marshaller ; }  <METHOD_END>
<METHOD_START> public void ( Marshaller org.springframework.integration.ws.Marshaller , Unmarshaller org.springframework.integration.ws.Unmarshaller ) { Assert . notNull ( org.springframework.integration.ws.Marshaller , STRING ) ; Assert . notNull ( org.springframework.integration.ws.Unmarshaller , STRING ) ; this . org.springframework.integration.ws.Marshaller = org.springframework.integration.ws.Marshaller ; this . org.springframework.integration.ws.Unmarshaller = org.springframework.integration.ws.Unmarshaller ; }  <METHOD_END>
<METHOD_START> public void void ( Marshaller org.springframework.integration.ws.Marshaller ) { Assert . notNull ( org.springframework.integration.ws.Marshaller , STRING ) ; this . org.springframework.integration.ws.Marshaller = org.springframework.integration.ws.Marshaller ; }  <METHOD_END>
<METHOD_START> public void void ( Unmarshaller org.springframework.integration.ws.Unmarshaller ) { Assert . notNull ( org.springframework.integration.ws.Unmarshaller , STRING ) ; this . org.springframework.integration.ws.Unmarshaller = org.springframework.integration.ws.Unmarshaller ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; Assert . notNull ( this . org.springframework.integration.ws.Marshaller , STRING ) ; Assert . notNull ( this . org.springframework.integration.ws.Unmarshaller , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MessageContext org.springframework.integration.ws.MessageContext ) throws java.lang.Exception { WebServiceMessage org.springframework.integration.ws.WebServiceMessage = org.springframework.integration.ws.MessageContext . getRequest ( ) ; Assert . notNull ( org.springframework.integration.ws.WebServiceMessage , STRING ) ; java.lang.Object java.lang.Object = MarshallingUtils . unmarshal ( this . org.springframework.integration.ws.Unmarshaller , org.springframework.integration.ws.WebServiceMessage ) ; AbstractIntegrationMessageBuilder < ? > org.springframework.integration.ws.AbstractIntegrationMessageBuilder<?> = this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; this . fromSoapHeaders ( org.springframework.integration.ws.MessageContext , org.springframework.integration.ws.AbstractIntegrationMessageBuilder<> ) ; Message < ? > org.springframework.integration.ws.Message<?> = this . sendAndReceiveMessage ( org.springframework.integration.ws.AbstractIntegrationMessageBuilder<> . build ( ) ) ; if ( org.springframework.integration.ws.Message<> != null ) { WebServiceMessage org.springframework.integration.ws.WebServiceMessage = org.springframework.integration.ws.MessageContext . getResponse ( ) ; this . toSoapHeaders ( org.springframework.integration.ws.WebServiceMessage , org.springframework.integration.ws.Message<> ) ; MarshallingUtils . marshal ( this . org.springframework.integration.ws.Marshaller , org.springframework.integration.ws.Message<> . getPayload ( ) , org.springframework.integration.ws.WebServiceMessage ) ; } }  <METHOD_END>
