<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.solr.core.QueryParsers = new QueryParsers ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.QueryParsers . getForClass ( org.springframework.data.solr.core.QueryParsersTests.SomeSolrQuery .class ) , IsInstanceOf . instanceOf ( DefaultQueryParser .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.QueryParsers . getForClass ( TermsQuery .class ) , IsInstanceOf . instanceOf ( TermsQueryParser .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.QueryParsers . registerParser ( org.springframework.data.solr.core.QueryParsersTests.SomeSolrQuery .class , new org.springframework.data.solr.core.QueryParsersTests.CustomQueryParser ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.QueryParsers . getForClass ( org.springframework.data.solr.core.QueryParsersTests.SomeSolrQuery .class ) , IsInstanceOf . instanceOf ( org.springframework.data.solr.core.QueryParsersTests.CustomQueryParser .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.SolrQuery org.springframework.data.solr.core.SolrQuery ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return null ; }  <METHOD_END>
