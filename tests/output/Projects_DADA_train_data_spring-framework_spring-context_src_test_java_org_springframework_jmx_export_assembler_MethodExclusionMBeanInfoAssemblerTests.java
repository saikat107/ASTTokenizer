<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jmx.export.assembler.MBeanInfoAssembler org.springframework.jmx.export.assembler.MBeanInfoAssembler ( ) { MethodExclusionMBeanInfoAssembler org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler = new MethodExclusionMBeanInfoAssembler ( ) ; org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler . setIgnoredMethods ( new java.lang.String [] { STRING , STRING } ) ; return org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.modelmbean.ModelMBeanInfo javax.management.modelmbean.ModelMBeanInfo = getMBeanInfoFromAssembler ( ) ; javax.management.modelmbean.ModelMBeanAttributeInfo javax.management.modelmbean.ModelMBeanAttributeInfo = javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanAttributeInfo ( STRING ) ; assertTrue ( javax.management.modelmbean.ModelMBeanAttributeInfo . boolean ( ) ) ; assertFalse ( javax.management.modelmbean.ModelMBeanAttributeInfo . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; MethodExclusionMBeanInfoAssembler org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler = new MethodExclusionMBeanInfoAssembler ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String , STRING ) ; org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler . setIgnoredMethodMappings ( java.util.Properties ) ; java.lang.reflect.Method java.lang.reflect.Method = JmxTestBean .class . java.lang.reflect.Method ( STRING ) ; assertFalse ( org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler . isNotIgnored ( java.lang.reflect.Method , java.lang.String ) ) ; assertTrue ( org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler . isNotIgnored ( java.lang.reflect.Method , STRING ) ) ; }  <METHOD_END>
