<METHOD_START> @ Before public void void ( ) { org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer = mock ( org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; void ( STRING , java.lang.RuntimeException ) ; verify ( org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer , times ( NUMBER ) ) . analyze ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; void ( STRING , java.lang.RuntimeException ) ; verify ( org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer ) . setBeanFactory ( any ( BeanFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; void ( STRING , java.lang.RuntimeException ) ; verify ( org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer , times ( NUMBER ) ) . analyze ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; void ( STRING , java.lang.RuntimeException ) ; verify ( org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer , times ( NUMBER ) ) . analyze ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { AnnotationConfigApplicationContext org.springframework.boot.diagnostics.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; java.lang.ClassLoader java.lang.ClassLoader = new org.springframework.boot.diagnostics.FailureAnalyzersTests.CustomSpringFactoriesClassLoader ( java.lang.String ) ; new FailureAnalyzers ( org.springframework.boot.diagnostics.AnnotationConfigApplicationContext , java.lang.ClassLoader ) . reportException ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.diagnostics.FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable java.lang.Throwable ) { return org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer . analyze ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.diagnostics.FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable java.lang.Throwable ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.diagnostics.FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.NoClassDefFoundError ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.diagnostics.BeanFactory ) throws org.springframework.boot.diagnostics.BeansException { org.springframework.boot.diagnostics.FailureAnalyzersTests.BeanFactoryAwareFailureAnalyzer . setBeanFactory ( org.springframework.boot.diagnostics.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( org.springframework.boot.diagnostics.FailureAnalyzersTests.CustomSpringFactoriesClassLoader .class . java.lang.ClassLoader ( ) ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.net.URL> < java.net.URL > java.util.Enumeration<java.net.URL> ( java.lang.String java.lang.String ) throws java.io.IOException { if ( STRING . boolean ( java.lang.String ) ) { return super. java.util.Enumeration<java.net.URL> ( STRING + this . java.lang.String ) ; } return super. java.util.Enumeration<java.net.URL> ( java.lang.String ) ; }  <METHOD_END>
