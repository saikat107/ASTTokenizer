<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.adapter.jetty.Session = mock ( Session .class ) ; given ( this . org.springframework.web.socket.adapter.jetty.Session . getUpgradeRequest ( ) ) . willReturn ( Mockito . mock ( UpgradeRequest .class ) ) ; given ( this . org.springframework.web.socket.adapter.jetty.Session . getUpgradeResponse ( ) ) . willReturn ( Mockito . mock ( UpgradeResponse .class ) ) ; this . org.springframework.web.socket.adapter.jetty.WebSocketHandler = mock ( WebSocketHandler .class ) ; this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession = new JettyWebSocketSession ( null , null ) ; this . org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter = new JettyWebSocketHandlerAdapter ( this . org.springframework.web.socket.adapter.jetty.WebSocketHandler , this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { this . org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter . onWebSocketConnect ( this . org.springframework.web.socket.adapter.jetty.Session ) ; verify ( this . org.springframework.web.socket.adapter.jetty.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { this . org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter . onWebSocketClose ( NUMBER , STRING ) ; verify ( this . org.springframework.web.socket.adapter.jetty.WebSocketHandler ) . afterConnectionClosed ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , CloseStatus . NORMAL . withReason ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; this . org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter . onWebSocketError ( java.lang.Exception ) ; verify ( this . org.springframework.web.socket.adapter.jetty.WebSocketHandler ) . handleTransportError ( this . org.springframework.web.socket.adapter.jetty.JettyWebSocketSession , java.lang.Exception ) ; }  <METHOD_END>
