<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.trigger.AnnotationConfigApplicationContext org.springframework.statemachine.trigger.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.trigger.CleanTimerTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction = context . getBean ( STRING , org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction .class ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) ; java.util.Queue<?> < ? > java.util.Queue<?> = TestUtils . readField ( STRING , java.lang.Object ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S1 ) ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . sendEvent ( TestEvents . E1 ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . stop ( ) ; int int = java.util.Queue<> . int ( ) ; java.lang.Thread . void ( NUMBER ) ; int int = java.util.Queue<> . int ( ) ; assertThat ( int , is ( int ) ) ; int int = org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction . int ; java.lang.Thread . void ( NUMBER ) ; int int = org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction . int ; assertThat ( int , is ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.trigger.CleanTimerTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction = context . getBean ( STRING , org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction .class ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) ; java.util.Queue<?> < ? > java.util.Queue<?> = TestUtils . readField ( STRING , java.lang.Object ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S1 ) ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . sendEvent ( TestEvents . E1 ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.statemachine.trigger.StateMachine<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . sendEvent ( TestEvents . E2 ) ; java.lang.Thread . void ( NUMBER ) ; int int = java.util.Queue<> . int ( ) ; java.lang.Thread . void ( NUMBER ) ; int int = java.util.Queue<> . int ( ) ; assertThat ( int , is ( int ) ) ; int int = org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction . int ; java.lang.Thread . void ( NUMBER ) ; int int = org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction . int ; assertThat ( int , is ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachineStateConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineStateConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.trigger.StateMachineTransitionConfigurer<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withInternal ( ) . source ( TestStates . S2 ) . action ( org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction ( ) ) . timer ( NUMBER ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction ( ) { return new org.springframework.statemachine.trigger.CleanTimerTests.TestTimerAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.trigger.StateContext<org.springframework.statemachine.trigger.TestStates,org.springframework.statemachine.trigger.TestEvents> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
