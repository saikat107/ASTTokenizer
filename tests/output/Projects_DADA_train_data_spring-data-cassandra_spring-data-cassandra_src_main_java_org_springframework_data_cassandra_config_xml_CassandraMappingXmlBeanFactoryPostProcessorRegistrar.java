<METHOD_START> public static void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.cassandra.config.xml.ParserContext ) { BeanDefinitionRegistry org.springframework.data.cassandra.config.xml.BeanDefinitionRegistry = org.springframework.data.cassandra.config.xml.ParserContext . getRegistry ( ) ; if ( ! ( org.springframework.data.cassandra.config.xml.BeanDefinitionRegistry instanceof GenericApplicationContext ) ) { return; } ConfigurableListableBeanFactory org.springframework.data.cassandra.config.xml.ConfigurableListableBeanFactory = ( ( GenericApplicationContext ) org.springframework.data.cassandra.config.xml.BeanDefinitionRegistry ) . getBeanFactory ( ) ; java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.data.cassandra.config.xml.ConfigurableListableBeanFactory , CassandraMappingBeanFactoryPostProcessor .class , true , false ) ; if ( java.lang.String[] . int > NUMBER ) { return; } BeanComponentDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanComponentDefinitionBuilder = new BeanComponentDefinitionBuilder ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.ParserContext ) ; BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( CassandraMappingBeanFactoryPostProcessor .class ) ; org.springframework.data.cassandra.config.xml.ParserContext . registerBeanComponent ( org.springframework.data.cassandra.config.xml.BeanComponentDefinitionBuilder . getComponent ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) ) ; }  <METHOD_END>
