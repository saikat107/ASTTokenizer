<METHOD_START> protected static java.lang.annotation.Annotation java.lang.annotation.Annotation ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : Region . REGION_ANNOTATION_TYPES ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = AnnotatedElementUtils . getMergedAnnotation ( java.lang.Class<> , java.lang.Class<> ) ; if ( java.lang.annotation.Annotation != null ) { return java.lang.annotation.Annotation ; } } return null ; }  <METHOD_END>
<METHOD_START> protected static java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { java.lang.String java.lang.String = java.util.Optional . java.util.Optional<java.lang.annotation.Annotation> ( java.lang.annotation.Annotation ) . java.util.Optional<java.lang.String> ( ( java.lang.annotation.Annotation ) -> java.lang.String ( java.lang.annotation.Annotation , STRING ) ) . java.lang.String ( null ) ; return defaultIfEmpty ( java.lang.String , java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static java.lang.String java.lang.String ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String ) { return AnnotationAttributes . fromMap ( AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ) . getString ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( TypeInformation < T > org.springframework.data.gemfire.mapping.TypeInformation<T> ) { super( org.springframework.data.gemfire.mapping.TypeInformation<T> ); java.lang.Class<T> < T > java.lang.Class<T> = org.springframework.data.gemfire.mapping.TypeInformation<T> . getType ( ) ; this . java.lang.annotation.Annotation = java.lang.annotation.Annotation ( java.lang.Class<T> ) ; this . java.lang.String = java.lang.String ( java.lang.Class<T> , this . java.lang.annotation.Annotation ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T extends java.lang.annotation.Annotation > T T ( ) { return ( T ) this . java.lang.annotation.Annotation ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.annotation.Annotation ( ) ) . java.util.Optional<java.lang.Class<>> ( ( java.lang.Object ) -> ( ( java.lang.annotation.Annotation ) java.lang.Object ) . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) . java.lang.Class<> ( null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.mapping.GemfirePersistentProperty org.springframework.data.gemfire.mapping.GemfirePersistentProperty ( GemfirePersistentProperty org.springframework.data.gemfire.mapping.GemfirePersistentProperty ) { if ( org.springframework.data.gemfire.mapping.GemfirePersistentProperty . isIdProperty ( ) ) { java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> < GemfirePersistentProperty > java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> = getIdProperty ( ) ; if ( java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> . isPresent ( ) ) { GemfirePersistentProperty org.springframework.data.gemfire.mapping.GemfirePersistentProperty = getIdProperty ( ) . get ( ) ; if ( org.springframework.data.gemfire.mapping.GemfirePersistentProperty . isExplicitIdProperty ( ) ) { if ( org.springframework.data.gemfire.mapping.GemfirePersistentProperty . isExplicitIdProperty ( ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING + STRING , org.springframework.data.gemfire.mapping.GemfirePersistentProperty . getName ( ) , org.springframework.data.gemfire.mapping.GemfirePersistentProperty . getName ( ) , getType ( ) . getName ( ) ) ) ; } return null ; } return ( org.springframework.data.gemfire.mapping.GemfirePersistentProperty . isExplicitIdProperty ( ) ? org.springframework.data.gemfire.mapping.GemfirePersistentProperty : null ) ; } else { return org.springframework.data.gemfire.mapping.GemfirePersistentProperty ; } } return null ; }  <METHOD_END>
