<METHOD_START> public void ( HttpServerResponse org.springframework.http.server.reactive.HttpServerResponse , DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ) { super( org.springframework.http.server.reactive.DataBufferFactory ); Assert . notNull ( org.springframework.http.server.reactive.HttpServerResponse , STRING ) ; this . org.springframework.http.server.reactive.HttpServerResponse = org.springframework.http.server.reactive.HttpServerResponse ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.HttpServerResponse org.springframework.http.server.reactive.HttpServerResponse ( ) { return this . org.springframework.http.server.reactive.HttpServerResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { HttpStatus org.springframework.http.server.reactive.HttpStatus = this . getStatusCode ( ) ; if ( org.springframework.http.server.reactive.HttpStatus != null ) { org.springframework.http.server.reactive.HttpServerResponse ( ) . status ( HttpResponseStatus . valueOf ( org.springframework.http.server.reactive.HttpStatus . value ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer> ) { Publisher < ByteBuf > org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf> = org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf> ( org.springframework.http.server.reactive.Publisher<> ) ; return this . org.springframework.http.server.reactive.HttpServerResponse . send ( org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf> ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>> ) { Publisher < Publisher < ByteBuf > > org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf>> = Flux . from ( org.springframework.http.server.reactive.Publisher<> ) . map ( org.springframework.http.server.reactive.ReactorServerHttpResponse :: org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf> ) ; return this . org.springframework.http.server.reactive.HttpServerResponse . sendGroups ( org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf>> ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( java.lang.String java.lang.String : getHeaders ( ) . keySet ( ) ) { for ( java.lang.String java.lang.String : getHeaders ( ) . get ( java.lang.String ) ) { this . org.springframework.http.server.reactive.HttpServerResponse . responseHeaders ( ) . add ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( java.lang.String java.lang.String : getCookies ( ) . keySet ( ) ) { for ( ResponseCookie org.springframework.http.server.reactive.ResponseCookie : getCookies ( ) . get ( java.lang.String ) ) { Cookie org.springframework.http.server.reactive.Cookie = new DefaultCookie ( java.lang.String , org.springframework.http.server.reactive.ResponseCookie . getValue ( ) ) ; if ( ! org.springframework.http.server.reactive.ResponseCookie . getMaxAge ( ) . isNegative ( ) ) { org.springframework.http.server.reactive.Cookie . setMaxAge ( org.springframework.http.server.reactive.ResponseCookie . getMaxAge ( ) . getSeconds ( ) ) ; } org.springframework.http.server.reactive.ResponseCookie . getDomain ( ) . ifPresent ( org.springframework.http.server.reactive.Cookie :: setDomain ) ; org.springframework.http.server.reactive.ResponseCookie . getPath ( ) . ifPresent ( org.springframework.http.server.reactive.Cookie :: setPath ) ; org.springframework.http.server.reactive.Cookie . setSecure ( org.springframework.http.server.reactive.ResponseCookie . isSecure ( ) ) ; org.springframework.http.server.reactive.Cookie . setHttpOnly ( org.springframework.http.server.reactive.ResponseCookie . isHttpOnly ( ) ) ; this . org.springframework.http.server.reactive.HttpServerResponse . addCookie ( org.springframework.http.server.reactive.Cookie ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( java.io.File java.io.File , long long , long long ) { return doCommit ( ( ) this . response . sendFile ( file . toPath ( ) , position , count ) . then ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf> < ByteBuf > org.springframework.http.server.reactive.Publisher<org.springframework.http.server.reactive.ByteBuf> ( Publisher < ? extends DataBuffer > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer> ) { return Flux . from ( org.springframework.http.server.reactive.Publisher<> ) . map ( NettyDataBufferFactory :: toByteBuf ) ; }  <METHOD_END>
