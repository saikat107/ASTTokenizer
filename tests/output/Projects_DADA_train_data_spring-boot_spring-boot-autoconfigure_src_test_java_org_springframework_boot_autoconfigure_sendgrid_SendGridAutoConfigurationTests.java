<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; SendGrid org.springframework.boot.autoconfigure.sendgrid.SendGrid = this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . getBean ( SendGrid .class ) ; assertThat ( org.springframework.boot.autoconfigure.sendgrid.SendGrid ) . extracting ( STRING ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.sendgrid.SendGrid ) . extracting ( STRING ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; SendGrid org.springframework.boot.autoconfigure.sendgrid.SendGrid = this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . getBean ( SendGrid .class ) ; assertThat ( org.springframework.boot.autoconfigure.sendgrid.SendGrid ) . extracting ( STRING ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { void ( ) ; this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . getBean ( SendGrid .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfigurationTests.ManualSendGridConfiguration .class , STRING , STRING ) ; SendGrid org.springframework.boot.autoconfigure.sendgrid.SendGrid = this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . getBean ( SendGrid .class ) ; assertThat ( org.springframework.boot.autoconfigure.sendgrid.SendGrid ) . extracting ( STRING ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.sendgrid.SendGrid ) . extracting ( STRING ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING ) ; SendGrid org.springframework.boot.autoconfigure.sendgrid.SendGrid = this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . getBean ( SendGrid .class ) ; assertThat ( org.springframework.boot.autoconfigure.sendgrid.SendGrid ) . extracting ( STRING ) . extracting ( STRING ) . hasOnlyElementsOfType ( DefaultProxyRoutePlanner .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { this . void ( null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . register ( SendGridAutoConfiguration .class ) ; if ( java.lang.Class<> != null ) { this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } this . org.springframework.boot.autoconfigure.sendgrid.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.sendgrid.SendGrid org.springframework.boot.autoconfigure.sendgrid.SendGrid ( ) { return new SendGrid ( STRING , STRING ) ; }  <METHOD_END>
