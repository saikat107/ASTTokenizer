<METHOD_START> public void ( DSLContext sample.jooq.DSLContext , JdbcTemplate sample.jooq.JdbcTemplate ) { this . sample.jooq.DSLContext = sample.jooq.DSLContext ; this . sample.jooq.JdbcTemplate = sample.jooq.JdbcTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Result < Record > sample.jooq.Result<sample.jooq.Record> = this . sample.jooq.DSLContext . select ( ) . from ( AUTHOR ) . fetch ( ) ; for ( Record sample.jooq.Record : sample.jooq.Result<sample.jooq.Record> ) { java.lang.Integer java.lang.Integer = sample.jooq.Record . getValue ( AUTHOR . ID ) ; java.lang.String java.lang.String = sample.jooq.Record . getValue ( AUTHOR . FIRST_NAME ) ; java.lang.String java.lang.String = sample.jooq.Record . getValue ( AUTHOR . LAST_NAME ) ; java.lang.System . java.io.PrintStream . void ( STRING + java.lang.Integer + STRING + java.lang.String + STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { Query sample.jooq.Query = this . sample.jooq.DSLContext . select ( BOOK . TITLE , AUTHOR . FIRST_NAME , AUTHOR . LAST_NAME ) . from ( BOOK ) . join ( AUTHOR ) . on ( BOOK . AUTHOR_ID . equal ( AUTHOR . ID ) ) . where ( BOOK . PUBLISHED_IN . equal ( NUMBER ) ) ; java.lang.Object [] java.lang.Object[] = sample.jooq.Query . getBindValues ( ) . toArray ( new java.lang.Object [] {} ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . sample.jooq.JdbcTemplate . query ( sample.jooq.Query . getSQL ( ) , java.lang.Object[] , new RowMapper < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . java.lang.String ( NUMBER ) + STRING + java.sql.ResultSet . java.lang.String ( NUMBER ) + STRING + java.sql.ResultSet . java.lang.String ( NUMBER ) ; } } ) ; java.lang.System . java.io.PrintStream . void ( STRING + java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . java.lang.String ( NUMBER ) + STRING + java.sql.ResultSet . java.lang.String ( NUMBER ) + STRING + java.sql.ResultSet . java.lang.String ( NUMBER ) ; }  <METHOD_END>
