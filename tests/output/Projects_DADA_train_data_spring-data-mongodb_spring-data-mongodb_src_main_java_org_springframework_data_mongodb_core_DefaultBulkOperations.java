<METHOD_START> void ( MongoOperations org.springframework.data.mongodb.core.MongoOperations , BulkMode org.springframework.data.mongodb.core.BulkMode , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.mongodb.core.MongoOperations , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.BulkMode , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.data.mongodb.core.MongoOperations = org.springframework.data.mongodb.core.MongoOperations ; this . org.springframework.data.mongodb.core.BulkMode = org.springframework.data.mongodb.core.BulkMode ; this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = new MongoExceptionTranslator ( ) ; this . org.springframework.data.mongodb.core.WriteConcernResolver = DefaultWriteConcernResolver . INSTANCE ; this . org.springframework.data.mongodb.core.BulkWriteOptions = org.springframework.data.mongodb.core.BulkWriteOptions ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) { this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.PersistenceExceptionTranslator == null ? new MongoExceptionTranslator ( ) : org.springframework.data.mongodb.core.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public void void ( WriteConcernResolver org.springframework.data.mongodb.core.WriteConcernResolver ) { this . org.springframework.data.mongodb.core.WriteConcernResolver = org.springframework.data.mongodb.core.WriteConcernResolver == null ? DefaultWriteConcernResolver . INSTANCE : org.springframework.data.mongodb.core.WriteConcernResolver ; }  <METHOD_END>
<METHOD_START> public void void ( WriteConcern org.springframework.data.mongodb.core.WriteConcern ) { this . org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof Document ) { java.util.List<org.springframework.data.mongodb.core.WriteModel<org.springframework.data.mongodb.core.Document>> . add ( new InsertOneModel <> ( ( Document ) java.lang.Object ) ) ; return this ; } Document org.springframework.data.mongodb.core.Document = new Document ( ) ; org.springframework.data.mongodb.core.MongoOperations . getConverter ( ) . write ( java.lang.Object , org.springframework.data.mongodb.core.Document ) ; java.util.List<org.springframework.data.mongodb.core.WriteModel<org.springframework.data.mongodb.core.Document>> . add ( new InsertOneModel <> ( org.springframework.data.mongodb.core.Document ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( java.util.List<? extends java.lang.Object> < ? extends java.lang.Object > java.util.List<? extends java.lang.Object> ) { Assert . notNull ( java.util.List<> , STRING ) ; for ( java.lang.Object java.lang.Object : java.util.List<> ) { org.springframework.data.mongodb.core.BulkOperations ( java.lang.Object ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update ) { Assert . notNull ( org.springframework.data.mongodb.core.Query , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.Update , STRING ) ; return org.springframework.data.mongodb.core.BulkOperations ( java.util.Arrays . java.util.List ( Pair . of ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> < Pair < Query , Update > > java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) { Assert . notNull ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> , STRING ) ; for ( Pair < Query , Update > org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> : java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) { org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> . getFirst ( ) , org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> . getSecond ( ) , false , false ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update ) { Assert . notNull ( org.springframework.data.mongodb.core.Query , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.Update , STRING ) ; return org.springframework.data.mongodb.core.BulkOperations ( java.util.Arrays . java.util.List ( Pair . of ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> < Pair < Query , Update > > java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) { Assert . notNull ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> , STRING ) ; for ( Pair < Query , Update > org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> : java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) { org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> . getFirst ( ) , org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> . getSecond ( ) , false , true ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update ) { return org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , true , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> < Pair < Query , Update > > java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) { for ( Pair < Query , Update > org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> : java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) { org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> . getFirst ( ) , org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update> . getSecond ( ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( Query org.springframework.data.mongodb.core.Query ) { Assert . notNull ( org.springframework.data.mongodb.core.Query , STRING ) ; java.util.List<org.springframework.data.mongodb.core.WriteModel<org.springframework.data.mongodb.core.Document>> . add ( new DeleteManyModel < Document > ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( java.util.List<org.springframework.data.mongodb.core.Query> < Query > java.util.List<org.springframework.data.mongodb.core.Query> ) { Assert . notNull ( java.util.List<org.springframework.data.mongodb.core.Query> , STRING ) ; for ( Query org.springframework.data.mongodb.core.Query : java.util.List<org.springframework.data.mongodb.core.Query> ) { org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.Query ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public com . com.mongodb . com.mongodb . com.mongodb.bulk.BulkWriteResult com.mongodb.bulk.BulkWriteResult ( ) { try { MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoOperations . getCollection ( java.lang.String ) ; if ( org.springframework.data.mongodb.core.WriteConcern != null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . bulkWrite ( java.util.List<org.springframework.data.mongodb.core.WriteModel<org.springframework.data.mongodb.core.Document>> , org.springframework.data.mongodb.core.BulkWriteOptions ) ; } catch ( BulkWriteException org.springframework.data.mongodb.core.BulkWriteException ) { DataAccessException org.springframework.data.mongodb.core.DataAccessException = org.springframework.data.mongodb.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( org.springframework.data.mongodb.core.BulkWriteException ) ; throw org.springframework.data.mongodb.core.DataAccessException == null ? org.springframework.data.mongodb.core.BulkWriteException : org.springframework.data.mongodb.core.DataAccessException ; } finally { this . org.springframework.data.mongodb.core.BulkWriteOptions = org.springframework.data.mongodb.core.BulkWriteOptions ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , boolean boolean , boolean boolean ) { Assert . notNull ( org.springframework.data.mongodb.core.Query , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.Update , STRING ) ; UpdateOptions org.springframework.data.mongodb.core.UpdateOptions = new UpdateOptions ( ) ; org.springframework.data.mongodb.core.UpdateOptions . upsert ( boolean ) ; if ( boolean ) { java.util.List<org.springframework.data.mongodb.core.WriteModel<org.springframework.data.mongodb.core.Document>> . add ( new UpdateManyModel < Document > ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.UpdateOptions ) ) ; } else { java.util.List<org.springframework.data.mongodb.core.WriteModel<org.springframework.data.mongodb.core.Document>> . add ( new UpdateOneModel < Document > ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Update . getUpdateObject ( ) , org.springframework.data.mongodb.core.UpdateOptions ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> private final org.springframework.data.mongodb.core.BulkWriteOptions org.springframework.data.mongodb.core.BulkWriteOptions ( ) { BulkWriteOptions org.springframework.data.mongodb.core.BulkWriteOptions = new BulkWriteOptions ( ) ; switch ( org.springframework.data.mongodb.core.BulkMode ) { case ORDERED : return org.springframework.data.mongodb.core.BulkWriteOptions . ordered ( true ) ; case UNORDERED : return org.springframework.data.mongodb.core.BulkWriteOptions . ordered ( false ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
