<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.http.dsl.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.integration.http.dsl.WebApplicationContext ) . apply ( springSecurity ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplate org.springframework.integration.http.dsl.RestTemplate = new RestTemplate ( new MockMvcClientHttpRequestFactory ( this . org.springframework.integration.http.dsl.MockMvc ) ) ; new DirectFieldAccessor ( this . org.springframework.integration.http.dsl.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.dsl.RestTemplate ) ; this . org.springframework.integration.http.dsl.MockMvc . perform ( get ( STRING ) . with ( httpBasic ( STRING , STRING ) ) . param ( STRING , STRING ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientHttpConnector org.springframework.integration.http.dsl.ClientHttpConnector = new HttpHandlerConnector ( ( request , response ) -> { response . setStatusCode ( HttpStatus . OK ) ; response . getHeaders ( ) . setContentType ( MediaType . TEXT_PLAIN ) ; return response . writeWith ( Mono . just ( response . bufferFactory ( ) . wrap ( STRING . getBytes ( ) ) ) ) . then ( response :: setComplete ) ; } ) ; WebClient org.springframework.integration.http.dsl.WebClient = WebClient . builder ( ) . clientConnector ( org.springframework.integration.http.dsl.ClientHttpConnector ) . build ( ) ; new DirectFieldAccessor ( this . org.springframework.integration.http.dsl.ReactiveHttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.dsl.WebClient ) ; this . org.springframework.integration.http.dsl.MockMvc . perform ( get ( STRING ) . with ( httpBasic ( STRING , STRING ) ) . param ( STRING , STRING ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( AuthenticationManagerBuilder org.springframework.integration.http.dsl.AuthenticationManagerBuilder ) throws java.lang.Exception { org.springframework.integration.http.dsl.AuthenticationManagerBuilder . inMemoryAuthentication ( ) . withUser ( STRING ) . password ( STRING ) . roles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.integration.http.dsl.HttpSecurity ) throws java.lang.Exception { org.springframework.integration.http.dsl.HttpSecurity . authorizeRequests ( ) . anyRequest ( ) . hasRole ( STRING ) . and ( ) . httpBasic ( ) . and ( ) . csrf ( ) . disable ( ) . anonymous ( ) . disable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ SecuredChannel ( interceptor = STRING , sendAccess = STRING ) public org.springframework.integration.http.dsl.MessageChannel org.springframework.integration.http.dsl.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.http.dsl.IntegrationFlow org.springframework.integration.http.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Http . inboundGateway ( STRING ) . requestMapping ( r -> r . params ( STRING ) ) . payloadExpression ( STRING ) ) . channel ( org.springframework.integration.http.dsl.MessageChannel ( ) ) .< java.util.List<java.lang.String> < java.lang.String > , java.lang.String > transform ( p -> p . get ( NUMBER ) . toUpperCase ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.http.dsl.IntegrationFlow org.springframework.integration.http.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Http . inboundGateway ( STRING ) . requestMapping ( r -> r . params ( STRING ) ) ) . handle ( Http .< MultiValueMap < java.lang.String , java.lang.String > > outboundGateway ( STRING ) . uriVariable ( STRING , STRING ) . expectedResponseType ( java.lang.String .class ) , e -> e . id ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.http.dsl.IntegrationFlow org.springframework.integration.http.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Http . inboundGateway ( STRING ) . requestMapping ( r -> r . params ( STRING ) ) ) . handle ( Http .< MultiValueMap < java.lang.String , java.lang.String > > outboundReactiveGateway ( m -> UriComponentsBuilder . fromUriString ( STRING ) . queryParams ( m . getPayload ( ) ) . build ( ) . toUri ( ) ) . httpMethod ( HttpMethod . GET ) . expectedResponseType ( java.lang.String .class ) , e -> e . id ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.http.dsl.AccessDecisionManager org.springframework.integration.http.dsl.AccessDecisionManager ( ) { return new AffirmativeBased ( java.util.Collections . java.util.List ( new RoleVoter ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.http.dsl.ChannelSecurityInterceptor org.springframework.integration.http.dsl.ChannelSecurityInterceptor ( AccessDecisionManager org.springframework.integration.http.dsl.AccessDecisionManager )				throws java.lang.Exception { ChannelSecurityInterceptor org.springframework.integration.http.dsl.ChannelSecurityInterceptor = new ChannelSecurityInterceptor ( ) ; org.springframework.integration.http.dsl.ChannelSecurityInterceptor . setAuthenticationManager ( authenticationManager ( ) ) ; org.springframework.integration.http.dsl.ChannelSecurityInterceptor . setAccessDecisionManager ( org.springframework.integration.http.dsl.AccessDecisionManager ) ; return org.springframework.integration.http.dsl.ChannelSecurityInterceptor ; }  <METHOD_END>
