<METHOD_START> public void ( Resource org.springframework.boot.Resource ) { Assert . notNull ( org.springframework.boot.Resource , STRING ) ; Assert . isTrue ( org.springframework.boot.Resource . exists ( ) , STRING ) ; this . org.springframework.boot.Resource = org.springframework.boot.Resource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.Environment , java.lang.Class<?> < ? > java.lang.Class<?> , java.io.PrintStream java.io.PrintStream ) { try { java.lang.String java.lang.String = StreamUtils . copyToString ( this . org.springframework.boot.Resource . getInputStream ( ) , org.springframework.boot.Environment . getProperty ( STRING , java.nio.charset.Charset .class , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; for ( PropertyResolver org.springframework.boot.PropertyResolver : java.util.List<org.springframework.boot.PropertyResolver> ( org.springframework.boot.Environment , java.lang.Class<> ) ) { java.lang.String = org.springframework.boot.PropertyResolver . resolvePlaceholders ( java.lang.String ) ; } java.io.PrintStream . void ( java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.Log . warn ( STRING + this . org.springframework.boot.Resource + STRING + java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) + STRING + java.lang.Exception . java.lang.String ( ) + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.boot.PropertyResolver> < PropertyResolver > java.util.List<org.springframework.boot.PropertyResolver> ( Environment org.springframework.boot.Environment , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<org.springframework.boot.PropertyResolver> < PropertyResolver > java.util.List<org.springframework.boot.PropertyResolver> = new java.util.ArrayList<org.springframework.boot.PropertyResolver> <> ( ) ; java.util.List<org.springframework.boot.PropertyResolver> . add ( org.springframework.boot.Environment ) ; java.util.List<org.springframework.boot.PropertyResolver> . add ( org.springframework.boot.PropertyResolver ( java.lang.Class<> ) ) ; java.util.List<org.springframework.boot.PropertyResolver> . add ( org.springframework.boot.PropertyResolver ( ) ) ; java.util.List<org.springframework.boot.PropertyResolver> . add ( org.springframework.boot.PropertyResolver ( java.lang.Class<> ) ) ; return java.util.List<org.springframework.boot.PropertyResolver> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.PropertyResolver org.springframework.boot.PropertyResolver ( java.lang.Class<?> < ? > java.lang.Class<?> ) { MutablePropertySources org.springframework.boot.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.MutablePropertySources . addLast ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Class<> ) ) ) ; return new PropertySourcesPropertyResolver ( org.springframework.boot.MutablePropertySources ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = java.lang.String ( java.lang.Class<> ) ; java.lang.String java.lang.String = java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ( java.lang.String , false ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ( java.lang.String , false ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ( java.lang.String , true ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ( java.lang.String , true ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Package java.lang.Package = ( java.lang.Class<> == null ? null : java.lang.Class<> . java.lang.Package ( ) ) ; return ( java.lang.Package == null ? null : java.lang.Package . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return SpringBootVersion . getVersion ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , boolean boolean ) { if ( java.lang.String == null ) { return STRING ; } return ( boolean ? STRING + java.lang.String + STRING : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.PropertyResolver org.springframework.boot.PropertyResolver ( ) { MutablePropertySources org.springframework.boot.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.MutablePropertySources . addFirst ( new AnsiPropertySource ( STRING , true ) ) ; return new PropertySourcesPropertyResolver ( org.springframework.boot.MutablePropertySources ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.PropertyResolver org.springframework.boot.PropertyResolver ( java.lang.Class<?> < ? > java.lang.Class<?> ) { MutablePropertySources org.springframework.boot.MutablePropertySources = new MutablePropertySources ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.Class<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.String == null ? STRING : java.lang.String ) ) ; org.springframework.boot.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; return new PropertySourcesPropertyResolver ( org.springframework.boot.MutablePropertySources ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Package java.lang.Package = ( java.lang.Class<> == null ? null : java.lang.Class<> . java.lang.Package ( ) ) ; return ( java.lang.Package == null ? null : java.lang.Package . java.lang.String ( ) ) ; }  <METHOD_END>
