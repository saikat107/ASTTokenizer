<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.autoconfigure.properties.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.autoconfigure.properties.ExpectedException . expectMessage ( STRING ) ; new AnnotationsPropertySource ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.NoAnnotation .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.TypeLevel .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.TypeLevelWithPrefix .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.AttributeLevelWithPrefix .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.TypeAndAttributeLevelWithPrefix .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.NotMappedAtTypeLevel .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.NotMappedAtAttributeLevel .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.Arrays .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . contains ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( java.lang.Integer .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( java.lang.Long .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( false ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.CamelCaseToKebabCase .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.PropertiesFromSingleMetaAnnotation .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.PropertiesFromMultipleMetaAnnotations .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.PropertyMappedAttributeWithAnAlias .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.PropertyMappedWithSelfAnnotatingAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.PropertyMappedAnnotationOnSuperClass .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.AliasedPropertyMappedAnnotationOnSuperClass .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getPropertyNames ( ) ) . containsExactly ( STRING ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.EnumValueMapped .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . getProperty ( STRING ) ) . isEqualTo ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.EnumItem . org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.EnumItem ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationsPropertySource org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource = new AnnotationsPropertySource ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.EnumValueNotMapped .class ) ; assertThat ( org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource . containsProperty ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
