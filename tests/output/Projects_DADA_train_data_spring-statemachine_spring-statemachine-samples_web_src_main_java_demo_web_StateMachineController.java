<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { demo.web.StateMachine<demo.web.States,demo.web.Events> . addStateListener ( new StateMachineListenerAdapter < States , Events > ( ) { @ java.lang.Override public void void ( State < States , Events > demo.web.State<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.State<demo.web.States,demo.web.Events> . getId ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; } @ java.lang.Override public void void ( State < States , Events > demo.web.State<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.State<demo.web.States,demo.web.Events> . getId ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; } @ java.lang.Override public void void ( State < States , Events > demo.web.State<demo.web.States,demo.web.Events> , State < States , Events > demo.web.State<demo.web.States,demo.web.Events> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = demo.web.StateMachine<demo.web.States,demo.web.Events> . getExtendedState ( ) . getVariables ( ) ; java.util.ArrayList<demo.web.StateMachineEvent> < StateMachineEvent > java.util.ArrayList<demo.web.StateMachineEvent> = new java.util.ArrayList<demo.web.StateMachineEvent> < StateMachineEvent > ( ) ; for ( States demo.web.States : demo.web.StateMachine<demo.web.States,demo.web.Events> . getState ( ) . getIds ( ) ) { java.util.ArrayList<demo.web.StateMachineEvent> . add ( new StateMachineEvent ( demo.web.States . toString ( ) ) ) ; } demo.web.SimpMessagingTemplate . convertAndSend ( STRING , java.util.ArrayList<demo.web.StateMachineEvent> ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , java.util.Map<java.lang.Object,java.lang.Object> ) ; } @ java.lang.Override public void void ( Transition < States , Events > demo.web.Transition<demo.web.States,demo.web.Events> ) { if ( demo.web.Transition<demo.web.States,demo.web.Events> != null && demo.web.Transition<demo.web.States,demo.web.Events> . getKind ( ) == TransitionKind . INTERNAL ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = demo.web.StateMachine<demo.web.States,demo.web.Events> . getExtendedState ( ) . getVariables ( ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , java.util.Map<java.lang.Object,java.lang.Object> ) ; } } @ java.lang.Override public void void ( StateMachine < States , Events > demo.web.StateMachine<demo.web.States,demo.web.Events> , java.lang.Exception java.lang.Exception ) { java.lang.String ( new StateMachineException ( STRING , java.lang.Exception ) ) ; } } ) ; demo.web.StateMachineEnsemble<demo.web.States,demo.web.Events> . addEnsembleListener ( new EnsembleListenerAdapter < States , Events > ( ) { @ java.lang.Override public void void ( StateMachine < States , Events > demo.web.StateMachine<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.StateMachine<demo.web.States,demo.web.Events> . getUuid ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; } @ java.lang.Override public void void ( StateMachine < States , Events > demo.web.StateMachine<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.StateMachine<demo.web.States,demo.web.Events> . getUuid ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.web.State<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.State<demo.web.States,demo.web.Events> . getId ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.web.State<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.State<demo.web.States,demo.web.Events> . getId ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.web.State<demo.web.States,demo.web.Events> , State < States , Events > demo.web.State<demo.web.States,demo.web.Events> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = demo.web.StateMachine<demo.web.States,demo.web.Events> . getExtendedState ( ) . getVariables ( ) ; java.util.ArrayList<demo.web.StateMachineEvent> < StateMachineEvent > java.util.ArrayList<demo.web.StateMachineEvent> = new java.util.ArrayList<demo.web.StateMachineEvent> < StateMachineEvent > ( ) ; for ( States demo.web.States : demo.web.StateMachine<demo.web.States,demo.web.Events> . getState ( ) . getIds ( ) ) { java.util.ArrayList<demo.web.StateMachineEvent> . add ( new StateMachineEvent ( demo.web.States . toString ( ) ) ) ; } demo.web.SimpMessagingTemplate . convertAndSend ( STRING , java.util.ArrayList<demo.web.StateMachineEvent> ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , java.util.Map<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < States , Events > demo.web.Transition<demo.web.States,demo.web.Events> ) { if ( demo.web.Transition<demo.web.States,demo.web.Events> != null && demo.web.Transition<demo.web.States,demo.web.Events> . getKind ( ) == TransitionKind . INTERNAL ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = demo.web.StateMachine<demo.web.States,demo.web.Events> . getExtendedState ( ) . getVariables ( ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , java.util.Map<java.lang.Object,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < States , Events > demo.web.StateMachine<demo.web.States,demo.web.Events> , java.lang.Exception java.lang.Exception ) { java.lang.String ( new StateMachineException ( STRING , java.lang.Exception ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < States , Events > demo.web.StateMachine<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.StateMachine<demo.web.States,demo.web.Events> . getUuid ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < States , Events > demo.web.StateMachine<demo.web.States,demo.web.Events> ) { StateMachineMessage demo.web.StateMachineMessage = new StateMachineMessage ( ) ; demo.web.StateMachineMessage . setMessage ( STRING + demo.web.StateMachine<demo.web.States,demo.web.Events> . getUuid ( ) . toString ( ) ) ; demo.web.SimpMessagingTemplate . convertAndSend ( STRING , demo.web.StateMachineMessage ) ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) public java.lang.String java.lang.String ( ) { return demo.web.StateMachine<demo.web.States,demo.web.Events> . getUuid ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) public java.util.Collection<demo.web.StateMachineEvent> < StateMachineEvent > java.util.Collection<demo.web.StateMachineEvent> ( ) { java.util.ArrayList<demo.web.StateMachineEvent> < StateMachineEvent > java.util.ArrayList<demo.web.StateMachineEvent> = new java.util.ArrayList<demo.web.StateMachineEvent> < StateMachineEvent > ( ) ; for ( States demo.web.States : demo.web.StateMachine<demo.web.States,demo.web.Events> . getState ( ) . getIds ( ) ) { java.util.ArrayList<demo.web.StateMachineEvent> . add ( new StateMachineEvent ( demo.web.States . toString ( ) ) ) ; } return java.util.ArrayList<demo.web.StateMachineEvent> ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) public java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ) { return demo.web.StateMachine<demo.web.States,demo.web.Events> . getExtendedState ( ) . getVariables ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( HttpStatus . OK ) public void void ( @ RequestParam ( value = STRING ) Events demo.web.Events , @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String ) { demo.web.Log . info ( STRING + demo.web.Events + STRING + java.lang.String ) ; Message < Events > demo.web.Message<demo.web.Events> = MessageBuilder . withPayload ( demo.web.Events ) . setHeader ( STRING , java.lang.String ) . build ( ) ; demo.web.StateMachine<demo.web.States,demo.web.Events> . sendEvent ( demo.web.Message<demo.web.Events> ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( HttpStatus . OK ) public void void ( ) { demo.web.StateMachineEnsemble<demo.web.States,demo.web.Events> . join ( demo.web.StateMachine<demo.web.States,demo.web.Events> ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( HttpStatus . OK ) public void void ( ) { demo.web.StateMachineEnsemble<demo.web.States,demo.web.Events> . leave ( demo.web.StateMachine<demo.web.States,demo.web.Events> ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET , produces = STRING ) @ ResponseBody public java.util.Collection<demo.web.States> < States > java.util.Collection<demo.web.States> ( ) { return demo.web.StateMachine<demo.web.States,demo.web.Events> . getState ( ) . getIds ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET , produces = STRING ) @ ResponseBody public java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ) { java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.HashMap<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; java.util.HashMap<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , demo.web.StateMachine<demo.web.States,demo.web.Events> . hasStateMachineError ( ) ) ; java.util.HashMap<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , demo.web.StateMachine<demo.web.States,demo.web.Events> . isComplete ( ) ) ; java.util.HashMap<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , demo.web.StateMachine<demo.web.States,demo.web.Events> . getExtendedState ( ) . getVariables ( ) ) ; return java.util.HashMap<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ MessageExceptionHandler @ SendToUser ( value = STRING , broadcast = false ) public java.lang.String java.lang.String ( StateMachineException demo.web.StateMachineException ) { return demo.web.StateMachineException . getMessage ( ) ; }  <METHOD_END>
