<METHOD_START> @ Before public void void ( ) java.lang.Exception { MappingMongoConverter org.springframework.data.mongodb.repository.query.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.query.DbRefResolver , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; when ( org.springframework.data.mongodb.repository.query.MongoOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.mongodb.repository.query.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.repository.query.MongoOperations . find ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ) . thenReturn ( java.util.Collections .< Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( ) ) ; PagedExecution org.springframework.data.mongodb.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , new PageRequest ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.repository.query.PagedExecution . execute ( new Query ( ) , Person .class , STRING ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations ) . find ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , never ( ) ) . count ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.repository.query.MongoOperations . find ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ) . thenReturn ( java.util.Arrays . java.util.List ( new Person ( ) , new Person ( ) , new Person ( ) , new Person ( ) ) ) ; PagedExecution org.springframework.data.mongodb.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , new PageRequest ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.repository.query.PagedExecution . execute ( new Query ( ) , Person .class , STRING ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations ) . find ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , never ( ) ) . count ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.mongodb.repository.query.MongoOperations . find ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ) . thenReturn ( java.util.Collections .< Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( ) ) ; PagedExecution org.springframework.data.mongodb.repository.query.PagedExecution = new PagedExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , new PageRequest ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.repository.query.PagedExecution . execute ( new Query ( ) , Person .class , STRING ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations ) . find ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations ) . count ( any ( Query .class ) , eq ( Person .class ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Distance , new PageRequest ( NUMBER , NUMBER ) } ) ; PartTreeMongoQuery org.springframework.data.mongodb.repository.query.PartTreeMongoQuery = new PartTreeMongoQuery ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , org.springframework.data.mongodb.repository.query.MongoOperations ) ; GeoResult < Person > org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.Person> = new GeoResult < Person > ( new Person ( ) , org.springframework.data.mongodb.repository.query.Distance ) ; when ( org.springframework.data.mongodb.repository.query.MongoOperations . geoNear ( any ( NearQuery .class ) , eq ( Person .class ) , eq ( STRING ) ) ) . thenReturn ( new GeoResults < Person > ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.Person> , org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.Person> , org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.Person> , org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.Person> ) ) ) ; PagingGeoNearExecution org.springframework.data.mongodb.repository.query.PagingGeoNearExecution = new PagingGeoNearExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) , org.springframework.data.mongodb.repository.query.PartTreeMongoQuery ) ; org.springframework.data.mongodb.repository.query.PagingGeoNearExecution . execute ( new Query ( ) , Person .class , STRING ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations ) . geoNear ( any ( NearQuery .class ) , eq ( Person .class ) , eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations , never ( ) ) . count ( any ( Query .class ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Distance , new PageRequest ( NUMBER , NUMBER ) } ) ; PartTreeMongoQuery org.springframework.data.mongodb.repository.query.PartTreeMongoQuery = new PartTreeMongoQuery ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , org.springframework.data.mongodb.repository.query.MongoOperations ) ; when ( org.springframework.data.mongodb.repository.query.MongoOperations . geoNear ( any ( NearQuery .class ) , eq ( Person .class ) , eq ( STRING ) ) ) . thenReturn ( new GeoResults < Person > ( java.util.Collections .< GeoResult < Person > > java.util.List<org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.Person>> ( ) ) ) ; PagingGeoNearExecution org.springframework.data.mongodb.repository.query.PagingGeoNearExecution = new PagingGeoNearExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) , org.springframework.data.mongodb.repository.query.PartTreeMongoQuery ) ; org.springframework.data.mongodb.repository.query.PagingGeoNearExecution . execute ( new Query ( ) , Person .class , STRING ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations ) . geoNear ( any ( NearQuery .class ) , eq ( Person .class ) , eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.repository.query.MongoOperations ) . count ( any ( Query .class ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoPage<org.springframework.data.mongodb.repository.query.Person> < Person > org.springframework.data.mongodb.repository.query.GeoPage<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Distance org.springframework.data.mongodb.repository.query.Distance , Pageable org.springframework.data.mongodb.repository.query.Pageable );  <METHOD_END>
