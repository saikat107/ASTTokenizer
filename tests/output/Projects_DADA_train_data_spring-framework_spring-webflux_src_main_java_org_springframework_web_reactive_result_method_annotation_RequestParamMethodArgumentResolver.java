<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , boolean boolean ) { super( org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { if ( checkAnnotatedParamNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , RequestParam .class , this :: boolean ) ) { return true ; } else if ( this . boolean ) { return checkParameterTypeNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , BeanUtils :: isSimpleProperty ) || BeanUtils . isSimpleProperty ( org.springframework.web.reactive.result.method.annotation.MethodParameter . nestedIfOptional ( ) . getNestedParameterType ( ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( RequestParam org.springframework.web.reactive.result.method.annotation.RequestParam , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ! java.util.Map .class . boolean ( java.lang.Class<> ) || StringUtils . hasText ( org.springframework.web.reactive.result.method.annotation.RequestParam . name ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.NamedValueInfo org.springframework.web.reactive.result.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { RequestParam org.springframework.web.reactive.result.method.annotation.RequestParam = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotation ( RequestParam .class ) ; return ( org.springframework.web.reactive.result.method.annotation.RequestParam != null ? new org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver.RequestParamNamedValueInfo ( org.springframework.web.reactive.result.method.annotation.RequestParam ) : new org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver.RequestParamNamedValueInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) . get ( java.lang.String ) ; java.lang.Object java.lang.Object = null ; if ( java.util.List<java.lang.String> != null ) { java.lang.Object = ( java.util.List<java.lang.String> . int ( ) == NUMBER ? java.util.List<java.lang.String> . java.lang.String ( NUMBER ) : java.util.List<java.lang.String> ) ; } return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ( ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequestParams ( ) . subscribe ( ) . peek ( ) ; Assert . notNull ( org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> , STRING ) ; return org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + java.lang.String + STRING ; throw new ServerWebInputException ( java.lang.String , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING , false , ValueConstants . DEFAULT_NONE ); }  <METHOD_END>
<METHOD_START> void ( RequestParam org.springframework.web.reactive.result.method.annotation.RequestParam ) { super( org.springframework.web.reactive.result.method.annotation.RequestParam . name ( ) , org.springframework.web.reactive.result.method.annotation.RequestParam . required ( ) , org.springframework.web.reactive.result.method.annotation.RequestParam . defaultValue ( ) ); }  <METHOD_END>
