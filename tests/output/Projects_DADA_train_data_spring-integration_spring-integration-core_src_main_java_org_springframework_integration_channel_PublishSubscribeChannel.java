<METHOD_START> public void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { super( java.util.concurrent.Executor ); this . dispatcher = new BroadcastingDispatcher ( java.util.concurrent.Executor ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.integration.channel.ErrorHandler ) { this . org.springframework.integration.channel.ErrorHandler = org.springframework.integration.channel.ErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; org.springframework.integration.channel.BroadcastingDispatcher ( ) . setIgnoreFailures ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; org.springframework.integration.channel.BroadcastingDispatcher ( ) . setApplySequence ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; org.springframework.integration.channel.BroadcastingDispatcher ( ) . setMinSubscribers ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . executor != null ) { Assert . state ( org.springframework.integration.channel.BroadcastingDispatcher ( ) . getHandlerCount ( ) == NUMBER , STRING + STRING ) ; if ( ! ( this . executor instanceof ErrorHandlingTaskExecutor ) ) { if ( this . org.springframework.integration.channel.ErrorHandler == null ) { this . org.springframework.integration.channel.ErrorHandler = new MessagePublishingErrorHandler ( new BeanFactoryChannelResolver ( this . getBeanFactory ( ) ) ) ; } this . executor = new ErrorHandlingTaskExecutor ( this . executor , this . org.springframework.integration.channel.ErrorHandler ) ; } this . dispatcher = new BroadcastingDispatcher ( this . executor ) ; org.springframework.integration.channel.BroadcastingDispatcher ( ) . setIgnoreFailures ( this . boolean ) ; org.springframework.integration.channel.BroadcastingDispatcher ( ) . setApplySequence ( this . boolean ) ; org.springframework.integration.channel.BroadcastingDispatcher ( ) . setMinSubscribers ( this . int ) ; } if ( this . maxSubscribers == null ) { java.lang.Integer java.lang.Integer = getIntegrationProperty ( IntegrationProperties . CHANNELS_MAX_BROADCAST_SUBSCRIBERS , java.lang.Integer .class ) ; this . setMaxSubscribers ( java.lang.Integer ) ; } org.springframework.integration.channel.BroadcastingDispatcher ( ) . setBeanFactory ( this . getBeanFactory ( ) ) ; org.springframework.integration.channel.BroadcastingDispatcher ( ) . setMessageHandlingTaskDecorator ( task -> { if ( PublishSubscribeChannel .this . executorInterceptorsSize > NUMBER ) { return new MessageHandlingTask ( task ) ; } else { return task ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.channel.BroadcastingDispatcher org.springframework.integration.channel.BroadcastingDispatcher ( ) { return ( BroadcastingDispatcher ) this . dispatcher ; }  <METHOD_END>
