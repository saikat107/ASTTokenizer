<METHOD_START> protected void ( ObjectMapper org.springframework.http.codec.json.ObjectMapper ) { Assert . notNull ( org.springframework.http.codec.json.ObjectMapper , STRING ) ; this . org.springframework.http.codec.json.ObjectMapper = org.springframework.http.codec.json.ObjectMapper ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MimeType org.springframework.http.codec.json.MimeType ) { return ( org.springframework.http.codec.json.MimeType == null || java.util.List<org.springframework.http.codec.json.MimeType> . stream ( ) . anyMatch ( m -> m . isCompatibleWith ( mimeType ) ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.codec.json.JavaType org.springframework.http.codec.json.JavaType ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> ) { TypeFactory org.springframework.http.codec.json.TypeFactory = this . org.springframework.http.codec.json.ObjectMapper . getTypeFactory ( ) ; return org.springframework.http.codec.json.TypeFactory . constructType ( GenericTypeResolver . resolveType ( java.lang.reflect.Type , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ResolvableType org.springframework.http.codec.json.ResolvableType ) { return java.util.Optional<org.springframework.http.codec.json.MethodParameter> ( org.springframework.http.codec.json.ResolvableType ) . flatMap ( parameter -> Optional . ofNullable ( getAnnotation ( parameter , JsonView .class ) ) . map ( annotation -> { Class < ? > [] classes = annotation . value ( ) ; Assert . isTrue ( classes . length == NUMBER , JSON_VIEW_HINT_ERROR + parameter ) ; return Collections .< String , Object > singletonMap ( JSON_VIEW_HINT , classes [ NUMBER ] ) ; } ) ) . orElse ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Optional<org.springframework.http.codec.json.MethodParameter> < MethodParameter > java.util.Optional<org.springframework.http.codec.json.MethodParameter> ( ResolvableType org.springframework.http.codec.json.ResolvableType ) { return java.util.Optional . java.util.Optional ( org.springframework.http.codec.json.ResolvableType . getSource ( ) instanceof MethodParameter ? ( MethodParameter ) org.springframework.http.codec.json.ResolvableType . getSource ( ) : null ) ; }  <METHOD_END>
<METHOD_START> protected abstract < A extends java.lang.annotation.Annotation > A A ( MethodParameter org.springframework.http.codec.json.MethodParameter , java.lang.Class<A> < A > java.lang.Class<A> );  <METHOD_END>
