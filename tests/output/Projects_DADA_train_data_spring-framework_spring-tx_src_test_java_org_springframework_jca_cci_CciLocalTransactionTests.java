<METHOD_START> @ Test public void void ( ) org.springframework.jca.cci.ResourceException { final ConnectionFactory org.springframework.jca.cci.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jca.cci.Connection = mock ( Connection .class ) ; Interaction org.springframework.jca.cci.Interaction = mock ( Interaction .class ) ; LocalTransaction org.springframework.jca.cci.LocalTransaction = mock ( LocalTransaction .class ) ; final Record org.springframework.jca.cci.Record = mock ( Record .class ) ; final InteractionSpec org.springframework.jca.cci.InteractionSpec = mock ( InteractionSpec .class ) ; given ( org.springframework.jca.cci.ConnectionFactory . getConnection ( ) ) . willReturn ( org.springframework.jca.cci.Connection ) ; given ( org.springframework.jca.cci.Connection . getLocalTransaction ( ) ) . willReturn ( org.springframework.jca.cci.LocalTransaction ) ; given ( org.springframework.jca.cci.Connection . createInteraction ( ) ) . willReturn ( org.springframework.jca.cci.Interaction ) ; given ( org.springframework.jca.cci.Interaction . execute ( org.springframework.jca.cci.InteractionSpec , org.springframework.jca.cci.Record , org.springframework.jca.cci.Record ) ) . willReturn ( true ) ; given ( org.springframework.jca.cci.Connection . getLocalTransaction ( ) ) . willReturn ( org.springframework.jca.cci.LocalTransaction ) ; CciLocalTransactionManager org.springframework.jca.cci.CciLocalTransactionManager = new CciLocalTransactionManager ( ) ; org.springframework.jca.cci.CciLocalTransactionManager . setConnectionFactory ( org.springframework.jca.cci.ConnectionFactory ) ; TransactionTemplate org.springframework.jca.cci.TransactionTemplate = new TransactionTemplate ( org.springframework.jca.cci.CciLocalTransactionManager ) ; org.springframework.jca.cci.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.jca.cci.TransactionStatus ) { assertTrue ( STRING , TransactionSynchronizationManager . hasResource ( org.springframework.jca.cci.ConnectionFactory ) ) ; CciTemplate org.springframework.jca.cci.CciTemplate = new CciTemplate ( org.springframework.jca.cci.ConnectionFactory ) ; org.springframework.jca.cci.CciTemplate . execute ( org.springframework.jca.cci.InteractionSpec , org.springframework.jca.cci.Record , org.springframework.jca.cci.Record ) ; } } ) ; verify ( org.springframework.jca.cci.LocalTransaction ) . begin ( ) ; verify ( org.springframework.jca.cci.Interaction ) . close ( ) ; verify ( org.springframework.jca.cci.LocalTransaction ) . commit ( ) ; verify ( org.springframework.jca.cci.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.jca.cci.TransactionStatus ) { assertTrue ( STRING , TransactionSynchronizationManager . hasResource ( org.springframework.jca.cci.ConnectionFactory ) ) ; CciTemplate org.springframework.jca.cci.CciTemplate = new CciTemplate ( org.springframework.jca.cci.ConnectionFactory ) ; org.springframework.jca.cci.CciTemplate . execute ( org.springframework.jca.cci.InteractionSpec , org.springframework.jca.cci.Record , org.springframework.jca.cci.Record ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jca.cci.ResourceException { final ConnectionFactory org.springframework.jca.cci.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jca.cci.Connection = mock ( Connection .class ) ; Interaction org.springframework.jca.cci.Interaction = mock ( Interaction .class ) ; LocalTransaction org.springframework.jca.cci.LocalTransaction = mock ( LocalTransaction .class ) ; final Record org.springframework.jca.cci.Record = mock ( Record .class ) ; final InteractionSpec org.springframework.jca.cci.InteractionSpec = mock ( InteractionSpec .class ) ; given ( org.springframework.jca.cci.ConnectionFactory . getConnection ( ) ) . willReturn ( org.springframework.jca.cci.Connection ) ; given ( org.springframework.jca.cci.Connection . getLocalTransaction ( ) ) . willReturn ( org.springframework.jca.cci.LocalTransaction ) ; given ( org.springframework.jca.cci.Connection . createInteraction ( ) ) . willReturn ( org.springframework.jca.cci.Interaction ) ; given ( org.springframework.jca.cci.Interaction . execute ( org.springframework.jca.cci.InteractionSpec , org.springframework.jca.cci.Record , org.springframework.jca.cci.Record ) ) . willReturn ( true ) ; given ( org.springframework.jca.cci.Connection . getLocalTransaction ( ) ) . willReturn ( org.springframework.jca.cci.LocalTransaction ) ; CciLocalTransactionManager org.springframework.jca.cci.CciLocalTransactionManager = new CciLocalTransactionManager ( ) ; org.springframework.jca.cci.CciLocalTransactionManager . setConnectionFactory ( org.springframework.jca.cci.ConnectionFactory ) ; TransactionTemplate org.springframework.jca.cci.TransactionTemplate = new TransactionTemplate ( org.springframework.jca.cci.CciLocalTransactionManager ) ; try { org.springframework.jca.cci.TransactionTemplate . execute ( new TransactionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.jca.cci.TransactionStatus ) { assertTrue ( STRING , TransactionSynchronizationManager . hasResource ( org.springframework.jca.cci.ConnectionFactory ) ) ; CciTemplate org.springframework.jca.cci.CciTemplate = new CciTemplate ( org.springframework.jca.cci.ConnectionFactory ) ; org.springframework.jca.cci.CciTemplate . execute ( org.springframework.jca.cci.InteractionSpec , org.springframework.jca.cci.Record , org.springframework.jca.cci.Record ) ; throw new DataRetrievalFailureException ( STRING ) ; } } ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} verify ( org.springframework.jca.cci.LocalTransaction ) . begin ( ) ; verify ( org.springframework.jca.cci.Interaction ) . close ( ) ; verify ( org.springframework.jca.cci.LocalTransaction ) . rollback ( ) ; verify ( org.springframework.jca.cci.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.jca.cci.TransactionStatus ) { assertTrue ( STRING , TransactionSynchronizationManager . hasResource ( org.springframework.jca.cci.ConnectionFactory ) ) ; CciTemplate org.springframework.jca.cci.CciTemplate = new CciTemplate ( org.springframework.jca.cci.ConnectionFactory ) ; org.springframework.jca.cci.CciTemplate . execute ( org.springframework.jca.cci.InteractionSpec , org.springframework.jca.cci.Record , org.springframework.jca.cci.Record ) ; throw new DataRetrievalFailureException ( STRING ) ; }  <METHOD_END>
