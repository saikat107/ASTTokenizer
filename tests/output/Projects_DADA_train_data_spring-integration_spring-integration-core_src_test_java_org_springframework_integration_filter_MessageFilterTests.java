<METHOD_START> @ Test public void void ( ) { MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> true ) ; Message < ? > org.springframework.integration.filter.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; org.springframework.integration.filter.MessageFilter . handleMessage ( org.springframework.integration.filter.Message<> ) ; Message < ? > org.springframework.integration.filter.Message<?> = org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.filter.Message<> . getPayload ( ) , org.springframework.integration.filter.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.filter.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.filter.Message<> . getHeaders ( ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> false ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; org.springframework.integration.filter.MessageFilter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNull ( org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageRejectedException .class ) public void void ( ) { MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> false ) ; org.springframework.integration.filter.MessageFilter . setThrowExceptionOnRejection ( true ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; org.springframework.integration.filter.MessageFilter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.filter.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> true ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.filter.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.filter.DirectChannel , org.springframework.integration.filter.MessageFilter ) ; org.springframework.integration.filter.EventDrivenConsumer . start ( ) ; Message < ? > org.springframework.integration.filter.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.filter.DirectChannel . send ( org.springframework.integration.filter.Message<> ) ) ; Message < ? > org.springframework.integration.filter.Message<?> = org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.filter.Message<> ) ; assertEquals ( org.springframework.integration.filter.Message<> . getPayload ( ) , org.springframework.integration.filter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.filter.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> false ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.filter.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.filter.DirectChannel , org.springframework.integration.filter.MessageFilter ) ; org.springframework.integration.filter.EventDrivenConsumer . start ( ) ; Message < ? > org.springframework.integration.filter.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.filter.DirectChannel . send ( org.springframework.integration.filter.Message<> ) ) ; assertNull ( org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageRejectedException .class ) public void void ( ) { DirectChannel org.springframework.integration.filter.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> false ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; org.springframework.integration.filter.MessageFilter . setThrowExceptionOnRejection ( true ) ; EventDrivenConsumer org.springframework.integration.filter.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.filter.DirectChannel , org.springframework.integration.filter.MessageFilter ) ; org.springframework.integration.filter.EventDrivenConsumer . start ( ) ; Message < ? > org.springframework.integration.filter.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.filter.DirectChannel . send ( org.springframework.integration.filter.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.filter.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> false ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; org.springframework.integration.filter.MessageFilter . setDiscardChannel ( org.springframework.integration.filter.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.filter.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.filter.DirectChannel , org.springframework.integration.filter.MessageFilter ) ; org.springframework.integration.filter.EventDrivenConsumer . start ( ) ; Message < ? > org.springframework.integration.filter.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.filter.DirectChannel . send ( org.springframework.integration.filter.Message<> ) ) ; Message < ? > org.springframework.integration.filter.Message<?> = org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.filter.Message<> ) ; assertEquals ( org.springframework.integration.filter.Message<> , org.springframework.integration.filter.Message<> ) ; assertNull ( org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageRejectedException .class ) public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.filter.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.filter.QueueChannel = new QueueChannel ( ) ; MessageFilter org.springframework.integration.filter.MessageFilter = new MessageFilter ( message -> false ) ; org.springframework.integration.filter.MessageFilter . setOutputChannel ( org.springframework.integration.filter.QueueChannel ) ; org.springframework.integration.filter.MessageFilter . setDiscardChannel ( org.springframework.integration.filter.QueueChannel ) ; org.springframework.integration.filter.MessageFilter . setThrowExceptionOnRejection ( true ) ; EventDrivenConsumer org.springframework.integration.filter.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.filter.DirectChannel , org.springframework.integration.filter.MessageFilter ) ; org.springframework.integration.filter.EventDrivenConsumer . start ( ) ; Message < ? > org.springframework.integration.filter.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; try { assertTrue ( org.springframework.integration.filter.DirectChannel . send ( org.springframework.integration.filter.Message<> ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw java.lang.Exception ; } finally { Message < ? > org.springframework.integration.filter.Message<?> = org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.filter.Message<> ) ; assertEquals ( org.springframework.integration.filter.Message<> , org.springframework.integration.filter.Message<> ) ; assertNull ( org.springframework.integration.filter.QueueChannel . receive ( NUMBER ) ) ; } }  <METHOD_END>
