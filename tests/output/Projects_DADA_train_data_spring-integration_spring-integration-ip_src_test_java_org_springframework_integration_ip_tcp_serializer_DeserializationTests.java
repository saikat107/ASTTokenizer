<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendLength ( int , null ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; byte [] byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( byte[] ) ) ; byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( byte[] ) ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendStxEtx ( int , null ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer = new ByteArrayStxEtxSerializer ( ) ; byte [] byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( byte[] ) ) ; byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( byte[] ) ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendCrLf ( int , null ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; byte [] byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( byte[] ) ) ; byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( byte[] ) ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; SocketTestUtils . testSendRaw ( int ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayRawSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer = new ByteArrayRawSerializer ( ) ; byte [] byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( byte[] ) ) ; java.net.ServerSocket . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendSerialized ( int ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; DefaultDeserializer org.springframework.integration.ip.tcp.serializer.DefaultDeserializer = new DefaultDeserializer ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.ip.tcp.serializer.DefaultDeserializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING , java.lang.Object ) ; java.lang.Object = org.springframework.integration.ip.tcp.serializer.DefaultDeserializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING , java.lang.Object ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendLengthOverflow ( int ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; try { org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { if ( ! java.io.IOException . java.lang.String ( ) . boolean ( STRING ) ) { java.io.IOException . void ( ) ; fail ( STRING + java.io.IOException . java.lang.String ( ) ) ; } } java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendStxEtxOverflow ( int ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer = new ByteArrayStxEtxSerializer ( ) ; try { org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { if ( ! java.io.IOException . java.lang.String ( ) . boolean ( STRING ) ) { java.io.IOException . void ( ) ; fail ( STRING + java.io.IOException . java.lang.String ( ) ) ; } } java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendStxEtxOverflow ( int ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer = new ByteArrayStxEtxSerializer ( ) ; org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer . setMaxMessageSize ( NUMBER ) ; try { org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { if ( ! java.io.IOException . java.lang.String ( ) . boolean ( STRING ) ) { java.io.IOException . void ( ) ; fail ( STRING + java.io.IOException . java.lang.String ( ) ) ; } } java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendCrLfOverflow ( int ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; try { org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { if ( ! java.io.IOException . java.lang.String ( ) . boolean ( STRING ) ) { java.io.IOException . void ( ) ; fail ( STRING + java.io.IOException . java.lang.String ( ) ) ; } } java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendCrLfOverflow ( int ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . setMaxMessageSize ( NUMBER ) ; try { org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . deserialize ( java.net.Socket . java.io.InputStream ( ) ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { if ( ! java.io.IOException . java.lang.String ( ) . boolean ( STRING ) ) { java.io.IOException . void ( ) ; fail ( STRING + java.io.IOException . java.lang.String ( ) ) ; } } java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte byte = ( byte ) '\n' ; ByteArraySingleTerminatorSerializer org.springframework.integration.ip.tcp.serializer.ByteArraySingleTerminatorSerializer = new ByteArraySingleTerminatorSerializer ( byte ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ; try { byte [] byte[] = org.springframework.integration.ip.tcp.serializer.ByteArraySingleTerminatorSerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( NUMBER , byte[] . int ) ; assertEquals ( STRING . byte[] ( ) [ NUMBER ] , byte[] [ NUMBER ] ) ; byte[] = org.springframework.integration.ip.tcp.serializer.ByteArraySingleTerminatorSerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( NUMBER , byte[] . int ) ; } finally { java.io.ByteArrayInputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayCrLfSerializer ( ) , STRING ) ; org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayLengthHeaderSerializer ( ) , STRING ) ; TcpDeserializationExceptionEvent org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent = org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayLengthHeaderSerializer ( ) , STRING , new byte [] { NUMBER , NUMBER , NUMBER } , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent . getOffset ( ) ) ; assertEquals ( new java.lang.String ( new byte [] { NUMBER , NUMBER , NUMBER } ) , new java.lang.String ( org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent . getBuffer ( ) ) . java.lang.String ( NUMBER , NUMBER ) ) ; org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent = org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayLengthHeaderSerializer ( ) , STRING , new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent . getOffset ( ) ) ; assertEquals ( new java.lang.String ( new byte [] { NUMBER } ) , new java.lang.String ( org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent . getBuffer ( ) ) . java.lang.String ( NUMBER , NUMBER ) ) ; org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayLfSerializer ( ) , STRING ) ; org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayRawSerializer ( ) , STRING ) ; org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArraySingleTerminatorSerializer ( ( byte ) NUMBER ) , STRING ) ; org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayStxEtxSerializer ( ) , STRING ) ; org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent = org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( new ByteArrayStxEtxSerializer ( ) , STRING , new byte [] { NUMBER , NUMBER , NUMBER } , NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent . getOffset ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( AbstractByteArraySerializer org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer , java.lang.String java.lang.String ) { return org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer , java.lang.String , STRING . byte[] ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent ( AbstractByteArraySerializer org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer , java.lang.String java.lang.String , byte [] byte[] , int int ) { final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> < TcpDeserializationExceptionEvent > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> < TcpDeserializationExceptionEvent > ( ) ; class Publisher implements ApplicationEventPublisher { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.serializer.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> . set ( ( TcpDeserializationExceptionEvent ) org.springframework.integration.ip.tcp.serializer.ApplicationEvent ) ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } Publisher publisher = new Publisher ( ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . setApplicationEventPublisher ( publisher ) ; org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . setMaxMessageSize ( int ) ; try { org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer . deserialize ( java.io.ByteArrayInputStream ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> . get ( ) ) ; assertSame ( java.lang.Exception , java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> . get ( ) . getCause ( ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( java.lang.String ) ) ; } return java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.serializer.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.serializer.TcpDeserializationExceptionEvent> . set ( ( TcpDeserializationExceptionEvent ) org.springframework.integration.ip.tcp.serializer.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new org.springframework.integration.ip.tcp.serializer.DeserializationTests.CustomDeserializer ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new ByteArrayRawSerializer ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( AbstractByteArraySerializer org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer , java.lang.String java.lang.String ) throws java.lang.Exception { ByteArrayRawSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer = new ByteArrayRawSerializer ( ) ; TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.serializer.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( NUMBER ) ; org.springframework.integration.ip.tcp.serializer.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ) ; org.springframework.integration.ip.tcp.serializer.TcpNioServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer ) ; org.springframework.integration.ip.tcp.serializer.TcpNioServerConnectionFactory . afterPropertiesSet ( ) ; TcpInboundGateway org.springframework.integration.ip.tcp.serializer.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.serializer.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.serializer.TcpNioServerConnectionFactory ) ; QueueChannel org.springframework.integration.ip.tcp.serializer.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.serializer.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.serializer.QueueChannel ) ; org.springframework.integration.ip.tcp.serializer.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.serializer.TcpInboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.serializer.TcpInboundGateway . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.serializer.TcpNioServerConnectionFactory , null ) ; TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.serializer.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.serializer.TcpNioServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.serializer.TcpNioClientConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer ) ; org.springframework.integration.ip.tcp.serializer.TcpNioClientConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer ) ; org.springframework.integration.ip.tcp.serializer.TcpNioClientConnectionFactory . setSoTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.serializer.TcpNioClientConnectionFactory . afterPropertiesSet ( ) ; final TcpOutboundGateway org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway = new TcpOutboundGateway ( ) ; org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.serializer.TcpNioClientConnectionFactory ) ; QueueChannel org.springframework.integration.ip.tcp.serializer.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway . setOutputChannel ( org.springframework.integration.ip.tcp.serializer.QueueChannel ) ; org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway . setRemoteTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway . start ( ) ; java.lang.Runnable java.lang.Runnable = ( ) { try { org.springframework.integration.ip.tcp.serializer.TcpOutboundGateway . handleMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; Message < ? > org.springframework.integration.ip.tcp.serializer.Message<?> ; java.util.concurrent.ExecutorService . void ( java.lang.Runnable ) ; org.springframework.integration.ip.tcp.serializer.Message<?> = org.springframework.integration.ip.tcp.serializer.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.serializer.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.serializer.Message<> . getPayload ( ) ) ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; ( ( MessageChannel ) org.springframework.integration.ip.tcp.serializer.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . send ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; org.springframework.integration.ip.tcp.serializer.Message<?> = org.springframework.integration.ip.tcp.serializer.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.ip.tcp.serializer.Message<> ) ; if ( ( org.springframework.integration.ip.tcp.serializer.AbstractByteArraySerializer instanceof ByteArrayRawSerializer ) ) { org.springframework.integration.ip.tcp.serializer.TcpNioClientConnectionFactory . setDeserializer ( new ByteArrayRawSerializer ( true ) ) ; } java.util.concurrent.ExecutorService . void ( java.lang.Runnable ) ; org.springframework.integration.ip.tcp.serializer.Message<?> = org.springframework.integration.ip.tcp.serializer.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.serializer.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.serializer.Message<> . getPayload ( ) ) ) ; ( ( MessageChannel ) org.springframework.integration.ip.tcp.serializer.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . send ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; org.springframework.integration.ip.tcp.serializer.Message<?> = org.springframework.integration.ip.tcp.serializer.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.serializer.Message<> ) ; assertEquals ( java.lang.String , new java.lang.String ( ( ( byte [] ) org.springframework.integration.ip.tcp.serializer.Message<> . getPayload ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.io.InputStream . int ( ) ) ; } byte [] byte[] = new byte [ NUMBER ] ; byte[] [ NUMBER ] = ( byte ) java.io.InputStream . int ( ) ; if ( byte[] [ NUMBER ] < NUMBER ) { throw new SoftEndOfStreamException ( STRING ) ; } byte[] [ NUMBER ] = ( byte ) java.io.InputStream . int ( ) ; if ( byte[] [ NUMBER ] < NUMBER ) { checkClosure ( - NUMBER ) ; } java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; int int = java.nio.ByteBuffer . short ( ) ; byte [] byte[] = new byte [ int ] ; for ( int int = NUMBER ; int < int ; int ++ ) { byte[] [ int ] = ( byte ) java.io.InputStream . int ( ) ; } java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; int int ; if ( int == NUMBER ) { int = java.nio.ByteBuffer . short ( ) ; } else if ( int == NUMBER ) { int = java.nio.ByteBuffer . int ( ) ; } else { throw new java.io.IOException ( STRING ) ; } byte [] byte[] = new byte [ int ] ; for ( int int = NUMBER ; int < int ; int ++ ) { int int = java.io.InputStream . int ( ) ; if ( int < NUMBER ) { checkClosure ( - NUMBER ) ; } byte[] [ int ] = ( byte ) int ; } java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER + int + int ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; return java.nio.ByteBuffer . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException {		}  <METHOD_END>
