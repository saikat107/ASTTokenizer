<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties , java.lang.Class<? extends javax.sql.DataSource> < ? extends javax.sql.DataSource > java.lang.Class<? extends javax.sql.DataSource> ) { return ( T ) org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . initializeDataSourceBuilder ( ) . type ( java.lang.Class<> ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public org . org.apache . org.apache . org.apache . org.apache . org.apache.tomcat.jdbc.pool.DataSource org.apache.tomcat.jdbc.pool.DataSource ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ) { org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.jdbc.pool.DataSource = java.lang.Object ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties , org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ; DatabaseDriver org.springframework.boot.autoconfigure.jdbc.DatabaseDriver = DatabaseDriver . fromJdbcUrl ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.jdbc.DatabaseDriver . getValidationQuery ( ) ; if ( java.lang.String != null ) { org.apache.tomcat.jdbc.pool.DataSource . setTestOnBorrow ( true ) ; org.apache.tomcat.jdbc.pool.DataSource . setValidationQuery ( java.lang.String ) ; } return org.apache.tomcat.jdbc.pool.DataSource ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public org.springframework.boot.autoconfigure.jdbc.HikariDataSource org.springframework.boot.autoconfigure.jdbc.HikariDataSource ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ) { return java.lang.Object ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties , HikariDataSource .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public org . org.apache . org.apache . org.apache . org.apache.commons.dbcp2.BasicDataSource org.apache.commons.dbcp2.BasicDataSource ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ) { return java.lang.Object ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties , org . org.apache . org.apache . org.apache . org.apache .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ) { return org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . initializeDataSourceBuilder ( ) . build ( ) ; }  <METHOD_END>
