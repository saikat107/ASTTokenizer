<METHOD_START> @ Test public void void ( ) { void ( rootBeanDefinition ( org.springframework.beans.factory.Spr5475Tests.Foo .class ) . setFactoryMethod ( STRING ) . addConstructorArgValue ( STRING ) . getBeanDefinition ( ) , STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( rootBeanDefinition ( org.springframework.beans.factory.Spr5475Tests.Foo .class ) . setFactoryMethod ( STRING ) . addConstructorArgValue ( STRING ) . addConstructorArgValue ( STRING . byte[] ( ) ) . getBeanDefinition ( ) , STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.Spr5475Tests.Foo .class ) ; org.springframework.beans.factory.RootBeanDefinition . setFactoryMethodName ( STRING ) ; ConstructorArgumentValues org.springframework.beans.factory.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , STRING , java.lang.CharSequence .class . java.lang.String ( ) ) ; org.springframework.beans.factory.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , STRING . byte[] ( ) ) ; org.springframework.beans.factory.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.beans.factory.ConstructorArgumentValues ) ; void ( org.springframework.beans.factory.RootBeanDefinition , STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinition org.springframework.beans.factory.BeanDefinition , java.lang.String java.lang.String ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.BeanDefinition ) ; try { org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.BeanCreationException ) { assertThat ( org.springframework.beans.factory.BeanCreationException . getMessage ( ) , equalTo ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( rootBeanDefinition ( org.springframework.beans.factory.Spr5475Tests.Foo .class ) . setFactoryMethod ( STRING ) . getBeanDefinition ( ) , STRING + STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.beans.factory.Spr5475Tests.Foo org.springframework.beans.factory.Spr5475Tests.Foo ( ) { return new org.springframework.beans.factory.Spr5475Tests.Foo ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.beans.factory.Spr5475Tests.Foo org.springframework.beans.factory.Spr5475Tests.Foo ( java.lang.String java.lang.String ) { return new org.springframework.beans.factory.Spr5475Tests.Foo ( ) ; }  <METHOD_END>
