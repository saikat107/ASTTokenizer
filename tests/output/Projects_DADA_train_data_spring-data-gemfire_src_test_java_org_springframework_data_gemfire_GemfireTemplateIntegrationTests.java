<METHOD_START> protected static org.springframework.data.gemfire.User org.springframework.data.gemfire.User ( java.lang.String java.lang.String ) { return org.springframework.data.gemfire.User ( java.lang.String , true ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.User org.springframework.data.gemfire.User ( java.lang.String java.lang.String , java.lang.Boolean java.lang.Boolean ) { return org.springframework.data.gemfire.User ( java.lang.String , java.lang.String . java.lang.String ( STRING , java.lang.String ) , java.util.Calendar . java.util.Calendar ( ) , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.User org.springframework.data.gemfire.User ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.Calendar java.util.Calendar , java.lang.Boolean java.lang.Boolean ) { User org.springframework.data.gemfire.User = new User ( java.lang.String ) ; org.springframework.data.gemfire.User . setActive ( java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ) ) ; org.springframework.data.gemfire.User . setEmail ( java.lang.String ) ; org.springframework.data.gemfire.User . setSince ( java.util.Calendar ) ; return org.springframework.data.gemfire.User ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( User org.springframework.data.gemfire.User ) { return ( org.springframework.data.gemfire.User != null ? org.springframework.data.gemfire.User . getUsername ( ) : null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.User org.springframework.data.gemfire.User ( java.lang.String java.lang.String ) { for ( User org.springframework.data.gemfire.User : java.util.List<org.springframework.data.gemfire.User> ) { if ( org.springframework.data.gemfire.User . getUsername ( ) . equals ( java.lang.String ) ) { return org.springframework.data.gemfire.User ; } } return null ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.gemfire.User> < User > java.util.List<org.springframework.data.gemfire.User> ( java.lang.String ... java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; java.util.List<org.springframework.data.gemfire.User> < User > java.util.List<org.springframework.data.gemfire.User> = new java.util.ArrayList<org.springframework.data.gemfire.User> < User > ( java.lang.String[] . int ) ; for ( User org.springframework.data.gemfire.User : java.util.List<org.springframework.data.gemfire.User> ) { if ( java.util.List<java.lang.String> . boolean ( org.springframework.data.gemfire.User . getUsername ( ) ) ) { java.util.List<org.springframework.data.gemfire.User> . add ( org.springframework.data.gemfire.User ) ; } } return java.util.List<org.springframework.data.gemfire.User> ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ( java.lang.String ... java.lang.String[] ) { return java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ( java.util.List<org.springframework.data.gemfire.User> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ( User ... org.springframework.data.gemfire.User[] ) { return java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.User[] ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ( java.lang.Iterable<org.springframework.data.gemfire.User> < User > java.lang.Iterable<org.springframework.data.gemfire.User> ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > java.util.Map<java.lang.String,org.springframework.data.gemfire.User> = new java.util.HashMap<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > ( ) ; for ( User org.springframework.data.gemfire.User : java.lang.Iterable<org.springframework.data.gemfire.User> ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.User> . put ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ) ; } return java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { assertThat ( java.lang.Object == null ? java.lang.Object == null : java.lang.Object . boolean ( java.lang.Object ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> ) . isNotNull ( ) ; if ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . isEmpty ( ) ) { for ( User org.springframework.data.gemfire.User : java.util.List<org.springframework.data.gemfire.User> ) { org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . put ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ) ; } assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . isEmpty ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . size ( ) ) . isEqualTo ( java.util.List<org.springframework.data.gemfire.User> . size ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsKey ( java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsKey ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( CacheUtils . isClient ( org.springframework.data.gemfire.GemFireCache ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsKeyOnServer ( java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsKeyOnServer ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsValue ( org.springframework.data.gemfire.User ( STRING ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsValue ( org.springframework.data.gemfire.User ( STRING ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsValueForKey ( java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . containsValueForKey ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; org.springframework.data.gemfire.GemfireTemplate . create ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsKey ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValueForKey ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) ; assertThat ( ( java.lang.Object ) org.springframework.data.gemfire.GemfireTemplate . get ( java.lang.String ) ) . isEqualTo ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ) ) ; void ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( STRING ) , org.springframework.data.gemfire.GemfireTemplate . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . put ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . putIfAbsent ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . putIfAbsent ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ( STRING ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.User ) . isNotNull ( ) ; assertThat ( ( User ) org.springframework.data.gemfire.GemfireTemplate . remove ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsKey ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsKey ( STRING ) ) . isFalse ( ) ; assertThat ( ( User ) org.springframework.data.gemfire.GemfireTemplate . remove ( STRING ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsKey ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) ) ; User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; assertThat ( org.springframework.data.gemfire.User ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . replace ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . replace ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . replace ( java.lang.String ( org.springframework.data.gemfire.User ) , null , org.springframework.data.gemfire.User ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . replace ( java.lang.String ( org.springframework.data.gemfire.User ) , org.springframework.data.gemfire.User , org.springframework.data.gemfire.User ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . containsValue ( org.springframework.data.gemfire.User ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . get ( java.lang.String ( org.springframework.data.gemfire.User ) ) ) . isEqualTo ( org.springframework.data.gemfire.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > java.util.Map<java.lang.String,org.springframework.data.gemfire.User> = org.springframework.data.gemfire.GemfireTemplate . getAll ( java.util.List<java.lang.String> ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ) . isNotNull ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ) . isEqualTo ( this . org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . getAll ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > java.util.Map<java.lang.String,org.springframework.data.gemfire.User> = org.springframework.data.gemfire.GemfireTemplate . getAll ( java.util.Arrays . java.util.List ( java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) , java.lang.String ( org.springframework.data.gemfire.User ( STRING ) ) ) ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ) . isNotNull ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ) . isEqualTo ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ( org.springframework.data.gemfire.User ( STRING ) , org.springframework.data.gemfire.User ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; User org.springframework.data.gemfire.User = org.springframework.data.gemfire.User ( STRING ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.User> < java.lang.String , User > java.util.Map<java.lang.String,org.springframework.data.gemfire.User> = java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ( org.springframework.data.gemfire.User , org.springframework.data.gemfire.User , org.springframework.data.gemfire.User ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . keySet ( ) . containsAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> . keySet ( ) ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . values ( ) . containsAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> . values ( ) ) ) . isFalse ( ) ; org.springframework.data.gemfire.GemfireTemplate . putAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . keySet ( ) . containsAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> . keySet ( ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.Region<java.lang.String,org.springframework.data.gemfire.User> . values ( ) . containsAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.User> . values ( ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SelectResults < User > org.springframework.data.gemfire.SelectResults<org.springframework.data.gemfire.User> = org.springframework.data.gemfire.GemfireTemplate . query ( STRING ) ; assertThat ( org.springframework.data.gemfire.SelectResults<org.springframework.data.gemfire.User> ) . isNotNull ( ) ; java.util.List<org.springframework.data.gemfire.User> < User > java.util.List<org.springframework.data.gemfire.User> = org.springframework.data.gemfire.SelectResults<org.springframework.data.gemfire.User> . asList ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.User> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.User> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.User> . containsAll ( java.util.List<org.springframework.data.gemfire.User> ( STRING , STRING , STRING , STRING ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SelectResults < User > org.springframework.data.gemfire.SelectResults<org.springframework.data.gemfire.User> = org.springframework.data.gemfire.GemfireTemplate . find ( STRING , STRING , true ) ; assertThat ( org.springframework.data.gemfire.SelectResults<org.springframework.data.gemfire.User> ) . isNotNull ( ) ; java.util.List<org.springframework.data.gemfire.User> < User > java.util.List<org.springframework.data.gemfire.User> = org.springframework.data.gemfire.SelectResults<org.springframework.data.gemfire.User> . asList ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.User> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.User> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.User> . containsAll ( java.util.List<org.springframework.data.gemfire.User> ( STRING , STRING ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.gemfire.User = org.springframework.data.gemfire.GemfireTemplate . findUnique ( STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.User ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.User ) . isEqualTo ( org.springframework.data.gemfire.User ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { org.springframework.data.gemfire.GemfireTemplate . findUnique ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { org.springframework.data.gemfire.GemfireTemplate . findUnique ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> java.util.Properties java.util.Properties ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ( ) ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return org.springframework.data.gemfire.GemfireTemplateIntegrationTests .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.System . java.lang.String ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean ( ) { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setClose ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setProperties ( java.util.Properties ( ) ) ; return org.springframework.data.gemfire.CacheFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> ( GemFireCache org.springframework.data.gemfire.GemFireCache ) { LocalRegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> = new LocalRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.GemFireCache ) ; org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( false ) ; org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; return org.springframework.data.gemfire.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.GemfireTemplate org.springframework.data.gemfire.GemfireTemplate ( Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) { return new GemfireTemplate ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
