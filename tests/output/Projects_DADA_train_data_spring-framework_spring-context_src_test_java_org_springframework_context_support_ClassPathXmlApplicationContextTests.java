<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.String , java.lang.String ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; Service org.springframework.context.support.Service = ( Service ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.context.support.ClassPathXmlApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.support.Service . isProperlyDestroyed ( ) ) ; org.springframework.context.support.Service = ( Service ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; assertTrue ( org.springframework.context.support.Service . isProperlyDestroyed ( ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . refresh ( ) ; org.springframework.context.support.Service = ( Service ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; assertTrue ( org.springframework.context.support.Service . isProperlyDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; Service org.springframework.context.support.Service = ( Service ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; assertTrue ( org.springframework.context.support.Service . isProperlyDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.String , java.lang.String ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { java.lang.String } , false ) ; try { org.springframework.context.support.ClassPathXmlApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.context.support.BeanCreationException ) { assertTrue ( org.springframework.context.support.BeanCreationException . contains ( TypeMismatchException .class ) ) ; assertTrue ( org.springframework.context.support.BeanCreationException . toString ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.context.support.BeanCreationException . toString ( ) . contains ( STRING ) ) ; void ( org.springframework.context.support.BeanCreationException ) ; void ( new java.lang.ExceptionInInitializerError ( org.springframework.context.support.BeanCreationException ) ) ; assertFalse ( org.springframework.context.support.ClassPathXmlApplicationContext . isActive ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.lang.Throwable . void ( new java.io.PrintStream ( java.io.ByteArrayOutputStream ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; try { org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; fail ( STRING ) ; } catch ( CannotLoadBeanClassException org.springframework.context.support.CannotLoadBeanClassException ) { assertTrue ( org.springframework.context.support.CannotLoadBeanClassException . contains ( java.lang.ClassNotFoundException .class ) ) ; } org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) instanceof StaticMessageSource ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { java.lang.String , java.lang.String , java.lang.String } , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; org.springframework.context.support.ClassPathXmlApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new FactoryBeanAndApplicationListener ( ) ) ; assertEquals ( NUMBER , org.springframework.context.support.ClassPathXmlApplicationContext . getBeansOfType ( ApplicationListener .class ) . size ( ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; MessageSource org.springframework.context.support.MessageSource = ( MessageSource ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; Service org.springframework.context.support.Service = ( Service ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.context.support.ClassPathXmlApplicationContext , org.springframework.context.support.Service . getMessageSource ( ) ) ; Service org.springframework.context.support.Service = ( Service ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.context.support.ClassPathXmlApplicationContext , org.springframework.context.support.Service . getMessageSource ( ) ) ; AutowiredService org.springframework.context.support.AutowiredService = ( AutowiredService ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.context.support.MessageSource , org.springframework.context.support.AutowiredService . getMessageSource ( ) ) ; AutowiredService org.springframework.context.support.AutowiredService = ( AutowiredService ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.context.support.MessageSource , org.springframework.context.support.AutowiredService . getMessageSource ( ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; Service org.springframework.context.support.Service = ( Service ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.context.support.Service . getResources ( ) . length ) ; java.util.List<org.springframework.context.support.Resource> < Resource > java.util.List<org.springframework.context.support.Resource> = java.util.Arrays . java.util.List ( org.springframework.context.support.Service . getResources ( ) ) ; assertTrue ( java.util.List<org.springframework.context.support.Resource> . contains ( new FileSystemResource ( new ClassPathResource ( java.lang.String ) . getFile ( ) ) ) ) ; assertTrue ( java.util.List<org.springframework.context.support.Resource> . contains ( new FileSystemResource ( new ClassPathResource ( java.lang.String ) . getFile ( ) ) ) ) ; assertTrue ( java.util.List<org.springframework.context.support.Resource> . contains ( new FileSystemResource ( new ClassPathResource ( java.lang.String ) . getFile ( ) ) ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { java.lang.String } , org.springframework.context.support.ClassPathXmlApplicationContext ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ) ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { java.lang.String } , org.springframework.context.support.ClassPathXmlApplicationContext ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.context.support.ClassPathXmlApplicationContext . isSingleton ( STRING ) ) ; assertEquals ( StaticMessageSource .class , org.springframework.context.support.ClassPathXmlApplicationContext . getType ( STRING ) ) ; assertEquals ( StaticMessageSource .class , org.springframework.context.support.ClassPathXmlApplicationContext . getType ( STRING ) ) ; assertEquals ( StaticMessageSource .class , org.springframework.context.support.ClassPathXmlApplicationContext . getType ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertSame ( java.lang.Object , java.lang.Object ) ; assertSame ( java.lang.Object , java.lang.Object ) ; java.lang.String [] java.lang.String[] = org.springframework.context.support.ClassPathXmlApplicationContext . getAliases ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.context.support.ClassPathXmlApplicationContext . getAliases ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { java.lang.String } , org.springframework.context.support.ClassPathXmlApplicationContext ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertSame ( java.lang.Object , java.lang.Object ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; void ( org.springframework.context.support.ClassPathXmlApplicationContext , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertSame ( java.lang.Object , java.lang.Object ) ; void ( org.springframework.context.support.ClassPathXmlApplicationContext , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext , java.lang.Object java.lang.Object ) { java.lang.String [] java.lang.String[] = org.springframework.context.support.ClassPathXmlApplicationContext . getBeanNamesForType ( StaticMessageSource .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = org.springframework.context.support.ClassPathXmlApplicationContext . getBeanNamesForType ( StaticMessageSource .class , true , true ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.context.support.ClassPathXmlApplicationContext , StaticMessageSource .class ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.context.support.ClassPathXmlApplicationContext , StaticMessageSource .class , true , true ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.util.Map<?,org.springframework.context.support.StaticMessageSource> < ? , StaticMessageSource > java.util.Map<?,org.springframework.context.support.StaticMessageSource> = org.springframework.context.support.ClassPathXmlApplicationContext . getBeansOfType ( StaticMessageSource .class ) ; assertEquals ( NUMBER , java.util.Map<,org.springframework.context.support.StaticMessageSource> . size ( ) ) ; assertSame ( java.lang.Object , java.util.Map<,org.springframework.context.support.StaticMessageSource> . values ( ) . iterator ( ) . next ( ) ) ; java.util.Map<?,org.springframework.context.support.StaticMessageSource> = org.springframework.context.support.ClassPathXmlApplicationContext . getBeansOfType ( StaticMessageSource .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<,org.springframework.context.support.StaticMessageSource> . size ( ) ) ; assertSame ( java.lang.Object , java.util.Map<,org.springframework.context.support.StaticMessageSource> . values ( ) . iterator ( ) . next ( ) ) ; java.util.Map<?,org.springframework.context.support.StaticMessageSource> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.context.support.ClassPathXmlApplicationContext , StaticMessageSource .class ) ; assertEquals ( NUMBER , java.util.Map<,org.springframework.context.support.StaticMessageSource> . size ( ) ) ; assertSame ( java.lang.Object , java.util.Map<,org.springframework.context.support.StaticMessageSource> . values ( ) . iterator ( ) . next ( ) ) ; java.util.Map<?,org.springframework.context.support.StaticMessageSource> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.context.support.ClassPathXmlApplicationContext , StaticMessageSource .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<,org.springframework.context.support.StaticMessageSource> . size ( ) ) ; assertSame ( java.lang.Object , java.util.Map<,org.springframework.context.support.StaticMessageSource> . values ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) { @ java.lang.Override public org.springframework.context.support.Resource org.springframework.context.support.Resource ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return new ClassPathResource ( java.lang.String , org.springframework.context.support.ClassPathXmlApplicationContextTests .class ) ; } return super. getResource ( java.lang.String ) ; } } ; ResourceTestBean org.springframework.context.support.ResourceTestBean = ( ResourceTestBean ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; ResourceTestBean org.springframework.context.support.ResourceTestBean = ( ResourceTestBean ) org.springframework.context.support.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.context.support.ResourceTestBean . getResource ( ) instanceof ClassPathResource ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.context.support.ResourceTestBean . getResource ( ) . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.context.support.ResourceTestBean . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.context.support.ResourceTestBean . getResource ( ) . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.context.support.ResourceTestBean . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; org.springframework.context.support.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.support.Resource org.springframework.context.support.Resource ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return new ClassPathResource ( java.lang.String , org.springframework.context.support.ClassPathXmlApplicationContextTests .class ) ; } return super. getResource ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; XmlBeanDefinitionReader org.springframework.context.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.context.support.GenericApplicationContext ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.support.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.support.GenericApplicationContext . setClassLoader ( null ) ; XmlBeanDefinitionReader org.springframework.context.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.context.support.GenericApplicationContext ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertEquals ( ObjectUtils . identityToString ( org.springframework.context.support.GenericApplicationContext ) , org.springframework.context.support.GenericApplicationContext . getId ( ) ) ; assertEquals ( ObjectUtils . identityToString ( org.springframework.context.support.GenericApplicationContext ) , org.springframework.context.support.GenericApplicationContext . getDisplayName ( ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.support.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.support.GenericApplicationContext . setId ( STRING ) ; org.springframework.context.support.GenericApplicationContext . setDisplayName ( STRING ) ; XmlBeanDefinitionReader org.springframework.context.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.context.support.GenericApplicationContext ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.context.support.ClassPathXmlApplicationContextTests> ( ) ) ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertEquals ( STRING , org.springframework.context.support.GenericApplicationContext . getId ( ) ) ; assertEquals ( STRING , org.springframework.context.support.GenericApplicationContext . getDisplayName ( ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.support.GenericApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.support.GenericApplicationContext . close ( ) ; }  <METHOD_END>
