<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler = new SubProtocolWebSocketHandler ( this . org.springframework.web.socket.messaging.MessageChannel , this . org.springframework.web.socket.messaging.SubscribableChannel ) ; given ( org.springframework.web.socket.messaging.SubProtocolHandler . getSupportedProtocols ( ) ) . willReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; given ( org.springframework.web.socket.messaging.SubProtocolHandler . getSupportedProtocols ( ) ) . willReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession = new TestWebSocketSession ( ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession . setId ( STRING ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession . setOpen ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setProtocolHandlers ( java.util.Arrays . java.util.List ( org.springframework.web.socket.messaging.SubProtocolHandler , org.springframework.web.socket.messaging.SubProtocolHandler ) ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession . setAcceptedProtocol ( STRING ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler ) . afterSessionStarted ( isA ( ConcurrentWebSocketSessionDecorator .class ) , eq ( this . org.springframework.web.socket.messaging.MessageChannel ) ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler , times ( NUMBER ) ) . afterSessionStarted ( org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setDefaultProtocolHandler ( org.springframework.web.socket.messaging.SubProtocolHandler ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession . setAcceptedProtocol ( STRING ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler ) . afterSessionStarted ( isA ( ConcurrentWebSocketSessionDecorator .class ) , eq ( this . org.springframework.web.socket.messaging.MessageChannel ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setDefaultProtocolHandler ( org.springframework.web.socket.messaging.SubProtocolHandler ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setProtocolHandlers ( java.util.Arrays . java.util.List ( org.springframework.web.socket.messaging.SubProtocolHandler , org.springframework.web.socket.messaging.SubProtocolHandler ) ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession . setAcceptedProtocol ( STRING ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setDefaultProtocolHandler ( org.springframework.web.socket.messaging.SubProtocolHandler ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler ) . afterSessionStarted ( isA ( ConcurrentWebSocketSessionDecorator .class ) , eq ( this . org.springframework.web.socket.messaging.MessageChannel ) ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler , times ( NUMBER ) ) . afterSessionStarted ( org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler , times ( NUMBER ) ) . afterSessionStarted ( org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.TestWebSocketSession . setAcceptedProtocol ( STRING ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setDefaultProtocolHandler ( this . org.springframework.web.socket.messaging.SubProtocolHandler ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler ) . afterSessionStarted ( isA ( ConcurrentWebSocketSessionDecorator .class ) , eq ( this . org.springframework.web.socket.messaging.MessageChannel ) ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler , times ( NUMBER ) ) . afterSessionStarted ( org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler , times ( NUMBER ) ) . afterSessionStarted ( org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setProtocolHandlers ( java.util.Arrays . java.util.List ( org.springframework.web.socket.messaging.SubProtocolHandler ) ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; verify ( this . org.springframework.web.socket.messaging.SubProtocolHandler ) . afterSessionStarted ( isA ( ConcurrentWebSocketSessionDecorator .class ) , eq ( this . org.springframework.web.socket.messaging.MessageChannel ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setProtocolHandlers ( java.util.Arrays . java.util.List ( org.springframework.web.socket.messaging.SubProtocolHandler , org.springframework.web.socket.messaging.SubProtocolHandler ) ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setProtocolHandlers ( java.util.Arrays . java.util.List ( org.springframework.web.socket.messaging.SubProtocolHandler , org.springframework.web.socket.messaging.SubProtocolHandler ) ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { TestWebSocketSession org.springframework.web.socket.messaging.TestWebSocketSession = new TestWebSocketSession ( STRING ) ; TestWebSocketSession org.springframework.web.socket.messaging.TestWebSocketSession = new TestWebSocketSession ( STRING ) ; org.springframework.web.socket.messaging.TestWebSocketSession . setOpen ( true ) ; org.springframework.web.socket.messaging.TestWebSocketSession . setOpen ( true ) ; org.springframework.web.socket.messaging.TestWebSocketSession . setAcceptedProtocol ( STRING ) ; org.springframework.web.socket.messaging.TestWebSocketSession . setAcceptedProtocol ( STRING ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . setProtocolHandlers ( java.util.Arrays . java.util.List ( this . org.springframework.web.socket.messaging.SubProtocolHandler ) ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.messaging.TestWebSocketSession ) ; DirectFieldAccessor org.springframework.web.socket.messaging.DirectFieldAccessor = new DirectFieldAccessor ( this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.web.socket.messaging.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.web.socket.messaging.DirectFieldAccessor = new DirectFieldAccessor ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; DirectFieldAccessor org.springframework.web.socket.messaging.DirectFieldAccessor = new DirectFieldAccessor ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; long long = java.lang.System . long ( ) - NUMBER * NUMBER ; org.springframework.web.socket.messaging.DirectFieldAccessor . setPropertyValue ( STRING , long ) ; org.springframework.web.socket.messaging.DirectFieldAccessor . setPropertyValue ( STRING , long ) ; org.springframework.web.socket.messaging.DirectFieldAccessor . setPropertyValue ( STRING , long ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . start ( ) ; this . org.springframework.web.socket.messaging.SubProtocolWebSocketHandler . handleMessage ( org.springframework.web.socket.messaging.TestWebSocketSession , new TextMessage ( STRING ) ) ; assertTrue ( org.springframework.web.socket.messaging.TestWebSocketSession . isOpen ( ) ) ; assertNull ( org.springframework.web.socket.messaging.TestWebSocketSession . getCloseStatus ( ) ) ; assertFalse ( org.springframework.web.socket.messaging.TestWebSocketSession . isOpen ( ) ) ; assertEquals ( CloseStatus . SESSION_NOT_RELIABLE , org.springframework.web.socket.messaging.TestWebSocketSession . getCloseStatus ( ) ) ; assertNotEquals ( STRING , long , org.springframework.web.socket.messaging.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
