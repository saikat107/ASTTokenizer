<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.BeanDefinition org.springframework.context.annotation.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.context.annotation.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String = org.springframework.context.annotation.ParserContext . getReaderContext ( ) . getEnvironment ( ) . resolvePlaceholders ( java.lang.String ) ; java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , ConfigurableApplicationContext . CONFIG_LOCATION_DELIMITERS ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = org.springframework.context.annotation.ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.ParserContext , org.w3c.dom.Element ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . doScan ( java.lang.String[] ) ; void ( org.springframework.context.annotation.ParserContext . getReaderContext ( ) , java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> , org.w3c.dom.Element ) ; return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.context.annotation.ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner ( ParserContext org.springframework.context.annotation.ParserContext , org.w3c.dom.Element org.w3c.dom.Element ) { boolean boolean = true ; if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner = org.springframework.context.annotation.ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.ParserContext . getReaderContext ( ) , boolean ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanDefinitionDefaults ( org.springframework.context.annotation.ParserContext . getDelegate ( ) . getBeanDefinitionDefaults ( ) ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setAutowireCandidatePatterns ( org.springframework.context.annotation.ParserContext . getDelegate ( ) . getAutowireCandidatePatterns ( ) ) ; if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setResourcePattern ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } try { void ( org.w3c.dom.Element , org.springframework.context.annotation.ClassPathBeanDefinitionScanner ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.context.annotation.ParserContext . getReaderContext ( ) . error ( java.lang.Exception . java.lang.String ( ) , org.springframework.context.annotation.ParserContext . extractSource ( org.w3c.dom.Element ) , java.lang.Exception . java.lang.Throwable ( ) ) ; } try { void ( org.w3c.dom.Element , org.springframework.context.annotation.ClassPathBeanDefinitionScanner ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.context.annotation.ParserContext . getReaderContext ( ) . error ( java.lang.Exception . java.lang.String ( ) , org.springframework.context.annotation.ParserContext . extractSource ( org.w3c.dom.Element ) , java.lang.Exception . java.lang.Throwable ( ) ) ; } void ( org.w3c.dom.Element , org.springframework.context.annotation.ClassPathBeanDefinitionScanner , org.springframework.context.annotation.ParserContext ) ; return org.springframework.context.annotation.ClassPathBeanDefinitionScanner ; }  <METHOD_END>
<METHOD_START> protected org.springframework.context.annotation.ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner ( XmlReaderContext org.springframework.context.annotation.XmlReaderContext , boolean boolean ) { return new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.XmlReaderContext . getRegistry ( ) , boolean , org.springframework.context.annotation.XmlReaderContext . getEnvironment ( ) , org.springframework.context.annotation.XmlReaderContext . getResourceLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( XmlReaderContext org.springframework.context.annotation.XmlReaderContext , java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> , org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.Object java.lang.Object = org.springframework.context.annotation.XmlReaderContext . extractSource ( org.w3c.dom.Element ) ; CompositeComponentDefinition org.springframework.context.annotation.CompositeComponentDefinition = new CompositeComponentDefinition ( org.w3c.dom.Element . java.lang.String ( ) , java.lang.Object ) ; for ( BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder : java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ) { org.springframework.context.annotation.CompositeComponentDefinition . addNestedComponent ( new BeanComponentDefinition ( org.springframework.context.annotation.BeanDefinitionHolder ) ) ; } boolean boolean = true ; if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } if ( boolean ) { java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> = AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.context.annotation.XmlReaderContext . getRegistry ( ) , java.lang.Object ) ; for ( BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder : java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ) { org.springframework.context.annotation.CompositeComponentDefinition . addNestedComponent ( new BeanComponentDefinition ( org.springframework.context.annotation.BeanDefinitionHolder ) ) ; } } org.springframework.context.annotation.XmlReaderContext . fireComponentRegistered ( org.springframework.context.annotation.CompositeComponentDefinition ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner ) { if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator = ( BeanNameGenerator ) java.lang.Object ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) , BeanNameGenerator .class , org.springframework.context.annotation.ClassPathBeanDefinitionScanner . getResourceLoader ( ) . getClassLoader ( ) ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( org.springframework.context.annotation.BeanNameGenerator ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner ) { if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } ScopeMetadataResolver org.springframework.context.annotation.ScopeMetadataResolver = ( ScopeMetadataResolver ) java.lang.Object ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) , ScopeMetadataResolver .class , org.springframework.context.annotation.ClassPathBeanDefinitionScanner . getResourceLoader ( ) . getClassLoader ( ) ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setScopeMetadataResolver ( org.springframework.context.annotation.ScopeMetadataResolver ) ; } if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setScopedProxyMode ( ScopedProxyMode . TARGET_CLASS ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setScopedProxyMode ( ScopedProxyMode . INTERFACES ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.context.annotation.ClassPathBeanDefinitionScanner . setScopedProxyMode ( ScopedProxyMode . NO ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathBeanDefinitionScanner , ParserContext org.springframework.context.annotation.ParserContext ) { java.lang.ClassLoader java.lang.ClassLoader = org.springframework.context.annotation.ClassPathBeanDefinitionScanner . getResourceLoader ( ) . getClassLoader ( ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; if ( org.w3c.dom.Node . short ( ) == org.w3c.dom.Node . short ) { java.lang.String java.lang.String = org.springframework.context.annotation.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Node ) ; try { if ( java.lang.String . boolean ( java.lang.String ) ) { TypeFilter org.springframework.context.annotation.TypeFilter = org.springframework.context.annotation.TypeFilter ( ( org.w3c.dom.Element ) org.w3c.dom.Node , java.lang.ClassLoader , org.springframework.context.annotation.ParserContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addIncludeFilter ( org.springframework.context.annotation.TypeFilter ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { TypeFilter org.springframework.context.annotation.TypeFilter = org.springframework.context.annotation.TypeFilter ( ( org.w3c.dom.Element ) org.w3c.dom.Node , java.lang.ClassLoader , org.springframework.context.annotation.ParserContext ) ; org.springframework.context.annotation.ClassPathBeanDefinitionScanner . addExcludeFilter ( org.springframework.context.annotation.TypeFilter ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.context.annotation.ParserContext . getReaderContext ( ) . error ( java.lang.Exception . java.lang.String ( ) , org.springframework.context.annotation.ParserContext . extractSource ( org.w3c.dom.Element ) , java.lang.Exception . java.lang.Throwable ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.context.annotation.TypeFilter org.springframework.context.annotation.TypeFilter ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.ClassLoader java.lang.ClassLoader , ParserContext org.springframework.context.annotation.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String = org.springframework.context.annotation.ParserContext . getReaderContext ( ) . getEnvironment ( ) . resolvePlaceholders ( java.lang.String ) ; try { if ( STRING . boolean ( java.lang.String ) ) { return new AnnotationTypeFilter ( ( java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > ) java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return new AssignableTypeFilter ( java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return new AspectJTypeFilter ( java.lang.String , java.lang.ClassLoader ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; if ( ! TypeFilter .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + TypeFilter .class . java.lang.String ( ) + STRING + java.lang.String ) ; } return ( TypeFilter ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String ) ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new FatalBeanException ( STRING + java.lang.String , java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.Object java.lang.Object ; try { java.lang.Object = ReflectionUtils . accessibleConstructor ( java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ) . newInstance ( ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.lang.ClassNotFoundException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.lang.Throwable ) ; } if ( ! java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } return java.lang.Object ; }  <METHOD_END>
