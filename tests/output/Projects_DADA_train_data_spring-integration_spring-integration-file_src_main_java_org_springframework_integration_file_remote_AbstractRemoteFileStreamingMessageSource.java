<METHOD_START> protected void ( RemoteFileTemplate < F > org.springframework.integration.file.remote.RemoteFileTemplate<F> , java.util.Comparator<org.springframework.integration.file.remote.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.Comparator<org.springframework.integration.file.remote.AbstractFileInfo<F>> ) { this . org.springframework.integration.file.remote.RemoteFileTemplate<F> = org.springframework.integration.file.remote.RemoteFileTemplate<F> ; this . java.util.Comparator<org.springframework.integration.file.remote.AbstractFileInfo<F>> = java.util.Comparator<org.springframework.integration.file.remote.AbstractFileInfo<F>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.file.remote.Expression = new LiteralExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.file.remote.Expression ) { Assert . notNull ( org.springframework.integration.file.remote.Expression , STRING ) ; this . org.springframework.integration.file.remote.Expression = org.springframework.integration.file.remote.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( FileListFilter < F > org.springframework.integration.file.remote.FileListFilter<F> ) { void ( org.springframework.integration.file.remote.FileListFilter<F> ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( FileListFilter < F > org.springframework.integration.file.remote.FileListFilter<F> ) { this . org.springframework.integration.file.remote.FileListFilter<F> = org.springframework.integration.file.remote.FileListFilter<F> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.file.remote.RemoteFileTemplate<F> < F > org.springframework.integration.file.remote.RemoteFileTemplate<F> ( ) { return this . org.springframework.integration.file.remote.RemoteFileTemplate<F> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { Assert . state ( this . org.springframework.integration.file.remote.Expression != null , STRING ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { AbstractFileInfo < F > org.springframework.integration.file.remote.AbstractFileInfo<F> = org.springframework.integration.file.remote.AbstractFileInfo<F> ( ) ; if ( org.springframework.integration.file.remote.AbstractFileInfo<F> != null ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.file.remote.AbstractFileInfo<F> ) ; Session < ? > org.springframework.integration.file.remote.Session<?> = this . org.springframework.integration.file.remote.RemoteFileTemplate<F> . getSession ( ) ; try { return getMessageBuilderFactory ( ) . withPayload ( org.springframework.integration.file.remote.Session<> . readRaw ( java.lang.String ) ) . setHeader ( IntegrationMessageHeaderAccessor . CLOSEABLE_RESOURCE , org.springframework.integration.file.remote.Session<> ) . setHeader ( FileHeaders . REMOTE_DIRECTORY , org.springframework.integration.file.remote.AbstractFileInfo<F> . getRemoteDirectory ( ) ) . setHeader ( FileHeaders . REMOTE_FILE , org.springframework.integration.file.remote.AbstractFileInfo<F> . getFilename ( ) ) . setHeader ( FileHeaders . REMOTE_FILE_INFO , this . boolean ? org.springframework.integration.file.remote.AbstractFileInfo<F> . toJson ( ) : org.springframework.integration.file.remote.AbstractFileInfo<F> ) . build ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING + java.lang.String , java.io.IOException ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( int int ) { return java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.file.remote.AbstractFileInfo<F> < F > org.springframework.integration.file.remote.AbstractFileInfo<F> ( ) { if ( this . java.util.concurrent.BlockingQueue<org.springframework.integration.file.remote.AbstractFileInfo<F>> . size ( ) == NUMBER ) { void ( ) ; } return this . java.util.concurrent.BlockingQueue<org.springframework.integration.file.remote.AbstractFileInfo<F>> . poll ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( AbstractFileInfo < F > org.springframework.integration.file.remote.AbstractFileInfo<F> ) { java.lang.String java.lang.String = org.springframework.integration.file.remote.AbstractFileInfo<F> . getRemoteDirectory ( ) . endsWith ( this . java.lang.String ) ? org.springframework.integration.file.remote.AbstractFileInfo<F> . getRemoteDirectory ( ) + org.springframework.integration.file.remote.AbstractFileInfo<F> . getFilename ( ) : org.springframework.integration.file.remote.AbstractFileInfo<F> . getRemoteDirectory ( ) + this . java.lang.String + org.springframework.integration.file.remote.AbstractFileInfo<F> . getFilename ( ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String java.lang.String = this . org.springframework.integration.file.remote.Expression . getValue ( getEvaluationContext ( ) , java.lang.String .class ) ; F [] F[] = this . org.springframework.integration.file.remote.RemoteFileTemplate<F> . list ( java.lang.String ) ; int int = getMaxFetchSize ( ) ; java.util.List<F> < F > java.util.List<F> = this . org.springframework.integration.file.remote.FileListFilter<F> == null ? java.util.Arrays . java.util.List<F> ( F[] ) : this . org.springframework.integration.file.remote.FileListFilter<F> . filterFiles ( F[] ) ; if ( int > NUMBER && java.util.List<F> . int ( ) > int ) { void ( java.util.List<F> , java.util.List<F> . F ( int ) ) ; java.util.List<F> < F > java.util.List<F> = new java.util.ArrayList<F> <> ( int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.List<F> . boolean ( java.util.List<F> . F ( int ) ) ; } java.util.List<F> = java.util.List<F> ; } java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> = java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> ( java.util.List<F> ) ; java.util.Iterator<org.springframework.integration.file.remote.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.Iterator<org.springframework.integration.file.remote.AbstractFileInfo<F>> = java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> . iterator ( ) ; while ( java.util.Iterator<org.springframework.integration.file.remote.AbstractFileInfo<F>> . hasNext ( ) ) { AbstractFileInfo < F > org.springframework.integration.file.remote.AbstractFileInfo<F> = java.util.Iterator<org.springframework.integration.file.remote.AbstractFileInfo<F>> . next ( ) ; if ( org.springframework.integration.file.remote.AbstractFileInfo<F> . isDirectory ( ) ) { java.util.Iterator<org.springframework.integration.file.remote.AbstractFileInfo<F>> . remove ( ) ; } else { org.springframework.integration.file.remote.AbstractFileInfo<F> . setRemoteDirectory ( java.lang.String ) ; } } if ( this . java.util.Comparator<org.springframework.integration.file.remote.AbstractFileInfo<F>> != null ) { java.util.Collections . void ( java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> , this . java.util.Comparator<org.springframework.integration.file.remote.AbstractFileInfo<F>> ) ; } this . java.util.concurrent.BlockingQueue<org.springframework.integration.file.remote.AbstractFileInfo<F>> . addAll ( java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<F> < F > java.util.List<F> , F F ) { if ( this . org.springframework.integration.file.remote.FileListFilter<F> instanceof ReversibleFileListFilter ) { ( ( ReversibleFileListFilter < F > ) this . org.springframework.integration.file.remote.FileListFilter<F> ) . rollback ( F , java.util.List<F> ) ; } }  <METHOD_END>
<METHOD_START> abstract protected java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> < AbstractFileInfo < F > > java.util.List<org.springframework.integration.file.remote.AbstractFileInfo<F>> ( java.util.Collection<F> < F > java.util.Collection<F> );  <METHOD_END>
