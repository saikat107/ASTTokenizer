<METHOD_START> void ( ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange , HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ) { this . org.springframework.web.reactive.function.server.ServerWebExchange = org.springframework.web.reactive.function.server.ServerWebExchange ; this . org.springframework.web.reactive.function.server.HandlerStrategies = org.springframework.web.reactive.function.server.HandlerStrategies ; this . org.springframework.web.reactive.function.server.Headers = new org.springframework.web.reactive.function.server.DefaultServerRequest.DefaultHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.HttpMethod org.springframework.web.reactive.function.server.HttpMethod ( ) { return org.springframework.web.reactive.function.server.ServerHttpRequest ( ) . getMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return org.springframework.web.reactive.function.server.ServerHttpRequest ( ) . getURI ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Headers org.springframework.web.reactive.function.server.Headers ( ) { return this . org.springframework.web.reactive.function.server.Headers ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( BodyExtractor < T , ? super ServerHttpRequest > org.springframework.web.reactive.function.server.BodyExtractor<T,? super org.springframework.web.reactive.function.server.ServerHttpRequest> ) { return java.lang.Object ( org.springframework.web.reactive.function.server.BodyExtractor<T,> , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( BodyExtractor < T , ? super ServerHttpRequest > org.springframework.web.reactive.function.server.BodyExtractor<T,? super org.springframework.web.reactive.function.server.ServerHttpRequest> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notNull ( org.springframework.web.reactive.function.server.BodyExtractor<T,> , STRING ) ; return org.springframework.web.reactive.function.server.BodyExtractor<T,> . extract ( org.springframework.web.reactive.function.server.ServerHttpRequest ( ) , new BodyExtractor . BodyExtractor ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> ( ) { return org.springframework.web.reactive.function.server.DefaultServerRequest .this . org.springframework.web.reactive.function.server.HandlerStrategies . messageReaders ( ) ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.ServerWebExchange ( ) . getResponse ( ) ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> ( ) { return org.springframework.web.reactive.function.server.DefaultServerRequest .this . org.springframework.web.reactive.function.server.HandlerStrategies . messageReaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.ServerWebExchange ( ) . getResponse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.server.Mono<T> < T > org.springframework.web.reactive.function.server.Mono<T> ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { Mono < T > org.springframework.web.reactive.function.server.Mono<T> = java.lang.Object ( BodyExtractors . toMono ( java.lang.Class<> ) ) ; return org.springframework.web.reactive.function.server.Mono<T> . mapError ( UnsupportedMediaTypeException .class , java.util.function.Function<org.springframework.web.reactive.function.server.UnsupportedMediaTypeException,org.springframework.web.reactive.function.server.UnsupportedMediaTypeStatusException> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.server.Flux<T> < T > org.springframework.web.reactive.function.server.Flux<T> ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { Flux < T > org.springframework.web.reactive.function.server.Flux<T> = java.lang.Object ( BodyExtractors . toFlux ( java.lang.Class<> ) ) ; return org.springframework.web.reactive.function.server.Flux<T> . mapError ( UnsupportedMediaTypeException .class , java.util.function.Function<org.springframework.web.reactive.function.server.UnsupportedMediaTypeException,org.springframework.web.reactive.function.server.UnsupportedMediaTypeStatusException> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.lang.String java.lang.String ) { return this . org.springframework.web.reactive.function.server.ServerWebExchange . getAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . org.springframework.web.reactive.function.server.ServerWebExchange . getAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.reactive.function.server.ServerHttpRequest ( ) . getQueryParams ( ) . get ( java.lang.String ) ; return java.util.List<java.lang.String> != null ? java.util.List<java.lang.String> : java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . org.springframework.web.reactive.function.server.ServerWebExchange .< java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > getAttribute ( RouterFunctions . URI_TEMPLATE_VARIABLES_ATTRIBUTE ) . orElseGet ( java.util.Collections :: emptyMap ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.WebSession> < WebSession > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.WebSession> ( ) { return this . org.springframework.web.reactive.function.server.ServerWebExchange . getSession ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.server.ServerHttpRequest org.springframework.web.reactive.function.server.ServerHttpRequest ( ) { return this . org.springframework.web.reactive.function.server.ServerWebExchange . getRequest ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange ( ) { return this . org.springframework.web.reactive.function.server.ServerWebExchange ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , org.springframework.web.reactive.function.server.HttpMethod ( ) , path ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.server.HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ( ) { return org.springframework.web.reactive.function.server.ServerHttpRequest ( ) . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.server.MediaType> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getAccept ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getAcceptCharset ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.util.Locale.LanguageRange> < java.util.Locale . java.util.Locale.LanguageRange > java.util.List<java.util.Locale.LanguageRange> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getAcceptLanguage ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.OptionalLong java.util.OptionalLong ( ) { long long = org.springframework.web.reactive.function.server.HttpHeaders ( ) . getContentLength ( ) ; return ( long != - NUMBER ? java.util.OptionalLong . java.util.OptionalLong ( long ) : java.util.OptionalLong . java.util.OptionalLong ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.Optional<org.springframework.web.reactive.function.server.MediaType> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.HttpHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getHost ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.server.HttpRange> < HttpRange > java.util.List<org.springframework.web.reactive.function.server.HttpRange> ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . getRange ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.reactive.function.server.HttpHeaders ( ) . get ( java.lang.String ) ; return ( java.util.List<java.lang.String> != null ? java.util.List<java.lang.String> : java.util.Collections . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ( ) { return HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.reactive.function.server.HttpHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.web.reactive.function.server.HttpHeaders ( ) . toString ( ) ; }  <METHOD_END>
