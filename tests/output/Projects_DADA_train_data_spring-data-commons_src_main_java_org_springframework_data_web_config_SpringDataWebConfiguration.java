<METHOD_START> public void ( ApplicationContext org.springframework.data.web.config.ApplicationContext , @ Qualifier ( STRING ) ObjectFactory < ConversionService > org.springframework.data.web.config.ObjectFactory<org.springframework.data.web.config.ConversionService> ) { this . org.springframework.data.web.config.ApplicationContext = org.springframework.data.web.config.ApplicationContext ; this . org.springframework.data.web.config.ObjectFactory<org.springframework.data.web.config.ConversionService> = org.springframework.data.web.config.ObjectFactory<org.springframework.data.web.config.ConversionService> ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.web.config.PageableHandlerMethodArgumentResolver org.springframework.data.web.config.PageableHandlerMethodArgumentResolver ( ) { return new PageableHandlerMethodArgumentResolver ( org.springframework.data.web.config.SortHandlerMethodArgumentResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.web.config.SortHandlerMethodArgumentResolver org.springframework.data.web.config.SortHandlerMethodArgumentResolver ( ) { return new SortHandlerMethodArgumentResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.data.web.config.FormatterRegistry ) { org.springframework.data.web.config.FormatterRegistry . addFormatter ( DistanceFormatter . INSTANCE ) ; org.springframework.data.web.config.FormatterRegistry . addFormatter ( PointFormatter . INSTANCE ) ; if ( ! ( org.springframework.data.web.config.FormatterRegistry instanceof FormattingConversionService ) ) { return; } FormattingConversionService org.springframework.data.web.config.FormattingConversionService = ( FormattingConversionService ) org.springframework.data.web.config.FormatterRegistry ; DomainClassConverter < FormattingConversionService > org.springframework.data.web.config.DomainClassConverter<org.springframework.data.web.config.FormattingConversionService> = new DomainClassConverter <> ( org.springframework.data.web.config.FormattingConversionService ) ; org.springframework.data.web.config.DomainClassConverter<org.springframework.data.web.config.FormattingConversionService> . setApplicationContext ( org.springframework.data.web.config.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> ) { java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> . add ( org.springframework.data.web.config.SortHandlerMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> . add ( org.springframework.data.web.config.PageableHandlerMethodArgumentResolver ( ) ) ; ProxyingHandlerMethodArgumentResolver org.springframework.data.web.config.ProxyingHandlerMethodArgumentResolver = new ProxyingHandlerMethodArgumentResolver ( org.springframework.data.web.config.ObjectFactory<org.springframework.data.web.config.ConversionService> . getObject ( ) ) ; org.springframework.data.web.config.ProxyingHandlerMethodArgumentResolver . setBeanFactory ( org.springframework.data.web.config.ApplicationContext ) ; org.springframework.data.web.config.ProxyingHandlerMethodArgumentResolver . setBeanClassLoader ( org.springframework.data.web.config.ApplicationContext . getClassLoader ( ) ) ; java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> . add ( org.springframework.data.web.config.ProxyingHandlerMethodArgumentResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> ) { if ( ClassUtils . isPresent ( STRING , org.springframework.data.web.config.ApplicationContext . getClassLoader ( ) ) && ClassUtils . isPresent ( STRING , org.springframework.data.web.config.ApplicationContext . getClassLoader ( ) ) ) { ProjectingJackson2HttpMessageConverter org.springframework.data.web.config.ProjectingJackson2HttpMessageConverter = new ProjectingJackson2HttpMessageConverter ( new ObjectMapper ( ) ) ; org.springframework.data.web.config.ProjectingJackson2HttpMessageConverter . setBeanClassLoader ( org.springframework.data.web.config.ApplicationContext . getClassLoader ( ) ) ; org.springframework.data.web.config.ProjectingJackson2HttpMessageConverter . setBeanFactory ( org.springframework.data.web.config.ApplicationContext ) ; java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> . add ( NUMBER , org.springframework.data.web.config.ProjectingJackson2HttpMessageConverter ) ; } if ( ClassUtils . isPresent ( STRING , org.springframework.data.web.config.ApplicationContext . getClassLoader ( ) ) ) { java.util.List<org.springframework.data.web.config.HttpMessageConverter<?>> . add ( NUMBER , new XmlBeamHttpMessageConverter ( ) ) ; } }  <METHOD_END>
