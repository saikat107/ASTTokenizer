<METHOD_START> public void ( DependencyResolutionContext org.springframework.boot.cli.compiler.DependencyResolutionContext ) { super( java.util.Set<java.lang.String> , false ); this . org.springframework.boot.cli.compiler.DependencyResolutionContext = org.springframework.boot.cli.compiler.DependencyResolutionContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) { for ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode : java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) { void ( org.springframework.boot.cli.compiler.AnnotationNode ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode ) { org.springframework.boot.cli.compiler.AnnotationNode . setMember ( STRING , new ConstantExpression ( false ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.cli.compiler.AnnotationNode ) ; if ( java.lang.String != null && ! boolean ( java.lang.String ) ) { void ( org.springframework.boot.cli.compiler.AnnotationNode , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode ) { Expression org.springframework.boot.cli.compiler.Expression = org.springframework.boot.cli.compiler.AnnotationNode . getMember ( STRING ) ; if ( org.springframework.boot.cli.compiler.Expression instanceof ConstantExpression ) { java.lang.Object java.lang.Object = ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) ; return ( java.lang.Object instanceof java.lang.String ? ( java.lang.String ) java.lang.Object : null ) ; } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode , java.lang.String java.lang.String ) { if ( java.lang.String != null ) { void ( org.springframework.boot.cli.compiler.AnnotationNode , STRING , java.lang.String ) ; } else { Expression org.springframework.boot.cli.compiler.Expression = org.springframework.boot.cli.compiler.AnnotationNode . getMembers ( ) . get ( STRING ) ; java.lang.String = ( java.lang.String ) ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) ; } if ( org.springframework.boot.cli.compiler.AnnotationNode . getMember ( STRING ) == null ) { void ( org.springframework.boot.cli.compiler.AnnotationNode , STRING , this . org.springframework.boot.cli.compiler.DependencyResolutionContext . getArtifactCoordinatesResolver ( ) . getGroupId ( java.lang.String ) ) ; } if ( org.springframework.boot.cli.compiler.AnnotationNode . getMember ( STRING ) == null ) { void ( org.springframework.boot.cli.compiler.AnnotationNode , STRING , this . org.springframework.boot.cli.compiler.DependencyResolutionContext . getArtifactCoordinatesResolver ( ) . getVersion ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode , java.lang.String java.lang.String , java.lang.String java.lang.String ) { ConstantExpression org.springframework.boot.cli.compiler.ConstantExpression = new ConstantExpression ( java.lang.String ) ; org.springframework.boot.cli.compiler.AnnotationNode . setMember ( java.lang.String , org.springframework.boot.cli.compiler.ConstantExpression ) ; }  <METHOD_END>
