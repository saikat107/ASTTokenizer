<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext != null ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; RemoteTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( RemoteTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( UserInfoTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.AuthoritiesConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( UserInfoTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ) . extracting ( STRING ) . containsExactly ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( AuthoritiesExtractor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.PrincipalConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( UserInfoTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ) . extracting ( STRING ) . containsExactly ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( PrincipalExtractor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceNoClientConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . SERVLET ) . run ( ) ; BeanDefinition org.springframework.boot.autoconfigure.security.oauth2.resource.BeanDefinition = ( ( BeanDefinitionRegistry ) this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext ) . getBeanDefinition ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.BeanDefinition . getScope ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( UserInfoTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.Customizer .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( UserInfoTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; DefaultTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( DefaultTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices ) . isNotNull ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( RemoteTokenServices .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING + java.lang.String ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; DefaultTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( DefaultTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( false ) . run ( ) ; DefaultTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( DefaultTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices ) . isNotNull ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( RemoteTokenServices .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.SocialResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . SERVLET ) . run ( ) ; ConnectionFactoryLocator org.springframework.boot.autoconfigure.security.oauth2.resource.ConnectionFactoryLocator = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( ConnectionFactoryLocator .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.ConnectionFactoryLocator ) . isNotNull ( ) ; SpringSocialTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.SpringSocialTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( SpringSocialTokenServices .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.SpringSocialTokenServices ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.CustomUserInfoRestTemplateFactory .class , org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBeansOfType ( UserInfoRestTemplateFactory .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( UserInfoRestTemplateFactory .class ) ) . isInstanceOf ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.CustomUserInfoRestTemplateFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBeansOfType ( JwtAccessTokenConverter .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext = new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.ResourceConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfigurationTests.JwtAccessTokenConverterRestTemplateCustomizerConfiguration .class ) . environment ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableEnvironment ) . web ( WebApplicationType . NONE ) . run ( ) ; JwtAccessTokenConverterRestTemplateCustomizer org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ConfigurableApplicationContext . getBean ( JwtAccessTokenConverterRestTemplateCustomizer .class ) ; verify ( org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer ) . customize ( any ( RestTemplate .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor ( ) { return new AuthoritiesExtractor ( ) { @ java.lang.Override public java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.GrantedAuthority> < GrantedAuthority > java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.GrantedAuthority> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return AuthorityUtils . commaSeparatedStringToAuthorityList ( STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.GrantedAuthority> < GrantedAuthority > java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.GrantedAuthority> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return AuthorityUtils . commaSeparatedStringToAuthorityList ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor ( ) { return new PrincipalExtractor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.MockServletWebServerFactory org.springframework.boot.autoconfigure.security.oauth2.resource.MockServletWebServerFactory ( ) { return new MockServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> public void ( OAuth2ClientProperties org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientProperties ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientProperties = org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientProperties ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ( ) { return new ResourceServerProperties ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientProperties . getClientId ( ) , this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientProperties . getClientSecret ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.ServletWebServerFactory org.springframework.boot.autoconfigure.security.oauth2.resource.ServletWebServerFactory ( ) { return mock ( ServletWebServerFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( OAuth2RestTemplate org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestTemplate ) { org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestTemplate . getInterceptors ( ) . add ( new ClientHttpRequestInterceptor ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpResponse org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpResponse ( HttpRequest org.springframework.boot.autoconfigure.security.oauth2.resource.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpRequestExecution ) throws java.io.IOException { return org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpRequestExecution . execute ( org.springframework.boot.autoconfigure.security.oauth2.resource.HttpRequest , byte[] ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpResponse org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpResponse ( HttpRequest org.springframework.boot.autoconfigure.security.oauth2.resource.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpRequestExecution ) throws java.io.IOException { return org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpRequestExecution . execute ( org.springframework.boot.autoconfigure.security.oauth2.resource.HttpRequest , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestTemplate org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestTemplate ( ) { return this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestTemplate ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer ( ) { return mock ( JwtAccessTokenConverterRestTemplateCustomizer .class ) ; }  <METHOD_END>
