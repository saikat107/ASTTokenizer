<METHOD_START> public void void ( CqEvent org.springframework.data.gemfire.listener.CqEvent ) { java.util.List<org.springframework.data.gemfire.listener.CqEvent> . add ( org.springframework.data.gemfire.listener.CqEvent ) ; }  <METHOD_END>
<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int = findAvailablePort ( ) ; org.springframework.data.gemfire.listener.ProcessWrapper = run ( CqCacheServerProcess .class , java.lang.String . java.lang.String ( STRING , GEMFIRE_CACHE_SERVER_PORT_PROPERTY , int ) ) ; waitForServerToStart ( DEFAULT_HOSTNAME , int ) ; java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY ) ; stop ( org.springframework.data.gemfire.listener.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.ClientCache = new ClientCacheFactory ( ) . set ( STRING , STRING ) . set ( STRING , STRING ) . setPoolSubscriptionEnabled ( true ) . addPoolServer ( DEFAULT_HOSTNAME , int ) . create ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer = new ContinuousQueryListenerContainer ( ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanName ( STRING ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setCache ( org.springframework.data.gemfire.listener.ClientCache ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . afterPropertiesSet ( ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . addListener ( new ContinuousQueryDefinition ( STRING , java.lang.String , org.springframework.data.gemfire.listener.ContinuousQueryListenerAdapter ) ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . start ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.data.gemfire.listener.ClientCache != null ) { try { org.springframework.data.gemfire.listener.ClientCache . close ( ) ; } catch ( CacheClosedException org.springframework.data.gemfire.listener.CacheClosedException ) {			} } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.listener.ProcessWrapper . signal ( ) ; waitOn ( ( ) cqEvents . size ( ) == NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.listener.CqEvent> . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
