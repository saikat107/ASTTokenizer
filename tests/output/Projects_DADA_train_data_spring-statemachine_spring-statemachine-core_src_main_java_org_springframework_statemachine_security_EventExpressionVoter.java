<METHOD_START> public int int ( Authentication org.springframework.statemachine.security.Authentication , Message < T > org.springframework.statemachine.security.Message<T> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) { assert org.springframework.statemachine.security.Authentication != null ; assert org.springframework.statemachine.security.Message<T> != null ; assert java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> != null ; EventExpressionConfigAttribute org.springframework.statemachine.security.EventExpressionConfigAttribute = org.springframework.statemachine.security.EventExpressionConfigAttribute ( java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) ; if ( org.springframework.statemachine.security.EventExpressionConfigAttribute == null ) { return ACCESS_ABSTAIN ; } EvaluationContext org.springframework.statemachine.security.EvaluationContext = org.springframework.statemachine.security.SecurityExpressionHandler<org.springframework.statemachine.security.Message<T>> . createEvaluationContext ( org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Message<T> ) ; return ExpressionUtils . evaluateAsBoolean ( org.springframework.statemachine.security.EventExpressionConfigAttribute . getAuthorizeExpression ( ) , org.springframework.statemachine.security.EvaluationContext ) ? ACCESS_GRANTED : ACCESS_DENIED ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.security.EventExpressionConfigAttribute org.springframework.statemachine.security.EventExpressionConfigAttribute ( java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) { for ( ConfigAttribute org.springframework.statemachine.security.ConfigAttribute : java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) { if ( org.springframework.statemachine.security.ConfigAttribute instanceof EventExpressionConfigAttribute ) { return ( EventExpressionConfigAttribute ) org.springframework.statemachine.security.ConfigAttribute ; } } return null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ConfigAttribute org.springframework.statemachine.security.ConfigAttribute ) { return org.springframework.statemachine.security.ConfigAttribute instanceof EventExpressionConfigAttribute ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { boolean boolean = Message .class . boolean ( java.lang.Class<> ) ; return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( SecurityExpressionHandler < Message < T > > org.springframework.statemachine.security.SecurityExpressionHandler<org.springframework.statemachine.security.Message<T>> ) { Assert . notNull ( org.springframework.statemachine.security.SecurityExpressionHandler<org.springframework.statemachine.security.Message<T>> , STRING ) ; this . org.springframework.statemachine.security.SecurityExpressionHandler<org.springframework.statemachine.security.Message<T>> = org.springframework.statemachine.security.SecurityExpressionHandler<org.springframework.statemachine.security.Message<T>> ; }  <METHOD_END>
