<METHOD_START> @ Before public void void ( ) { org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel = new org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel . setBeanName ( java.lang.String ) ; MessageChannel org.springframework.integration.security.config.MessageChannel = ( MessageChannel ) applicationContext . getAutowireCapableBeanFactory ( ) . applyBeanPostProcessorsAfterInitialization ( org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel , java.lang.String ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.integration.security.config.MessageChannel ) ) ; Advisor [] org.springframework.integration.security.config.Advisor[] = ( ( Advised ) org.springframework.integration.security.config.MessageChannel ) . getAdvisors ( ) ; assertEquals ( STRING , NUMBER , advisors . length ) ; ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor = ( ChannelSecurityInterceptor ) org.springframework.integration.security.config.Advisor[] [ NUMBER ] . getAdvice ( ) ; ChannelAccessPolicy org.springframework.integration.security.config.ChannelAccessPolicy = this . org.springframework.integration.security.config.ChannelAccessPolicy ( java.lang.String , org.springframework.integration.security.config.ChannelSecurityInterceptor ) ; assertNotNull ( STRING + java.lang.String + STRING , org.springframework.integration.security.config.ChannelAccessPolicy ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForSend ( ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForReceive ( ) ; assertTrue ( STRING , this . java.util.Collection<java.lang.String> ( java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) . contains ( STRING ) ) ; assertTrue ( STRING , java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel . setBeanName ( java.lang.String ) ; MessageChannel org.springframework.integration.security.config.MessageChannel = ( MessageChannel ) applicationContext . getAutowireCapableBeanFactory ( ) . applyBeanPostProcessorsAfterInitialization ( org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel , java.lang.String ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.integration.security.config.MessageChannel ) ) ; Advisor [] org.springframework.integration.security.config.Advisor[] = ( ( Advised ) org.springframework.integration.security.config.MessageChannel ) . getAdvisors ( ) ; assertEquals ( STRING , NUMBER , advisors . length ) ; ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor = ( ChannelSecurityInterceptor ) org.springframework.integration.security.config.Advisor[] [ NUMBER ] . getAdvice ( ) ; ChannelAccessPolicy org.springframework.integration.security.config.ChannelAccessPolicy = this . org.springframework.integration.security.config.ChannelAccessPolicy ( java.lang.String , org.springframework.integration.security.config.ChannelSecurityInterceptor ) ; assertNotNull ( STRING + java.lang.String + STRING , org.springframework.integration.security.config.ChannelAccessPolicy ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForSend ( ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForReceive ( ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = this . java.util.Collection<java.lang.String> ( java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) ; assertTrue ( STRING , java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel . setBeanName ( java.lang.String ) ; MessageChannel org.springframework.integration.security.config.MessageChannel = ( MessageChannel ) applicationContext . getAutowireCapableBeanFactory ( ) . applyBeanPostProcessorsAfterInitialization ( org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel , java.lang.String ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.integration.security.config.MessageChannel ) ) ; Advisor [] org.springframework.integration.security.config.Advisor[] = ( ( Advised ) org.springframework.integration.security.config.MessageChannel ) . getAdvisors ( ) ; assertEquals ( STRING , NUMBER , advisors . length ) ; ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor = ( ChannelSecurityInterceptor ) org.springframework.integration.security.config.Advisor[] [ NUMBER ] . getAdvice ( ) ; ChannelAccessPolicy org.springframework.integration.security.config.ChannelAccessPolicy = this . org.springframework.integration.security.config.ChannelAccessPolicy ( java.lang.String , org.springframework.integration.security.config.ChannelSecurityInterceptor ) ; assertNotNull ( STRING + java.lang.String + STRING , org.springframework.integration.security.config.ChannelAccessPolicy ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForSend ( ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForReceive ( ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = this . java.util.Collection<java.lang.String> ( java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) ; assertTrue ( STRING , java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel . setBeanName ( java.lang.String ) ; MessageChannel org.springframework.integration.security.config.MessageChannel = ( MessageChannel ) applicationContext . getAutowireCapableBeanFactory ( ) . applyBeanPostProcessorsAfterInitialization ( org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel , java.lang.String ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.integration.security.config.MessageChannel ) ) ; Advisor [] org.springframework.integration.security.config.Advisor[] = ( ( Advised ) org.springframework.integration.security.config.MessageChannel ) . getAdvisors ( ) ; assertEquals ( STRING , NUMBER , advisors . length ) ; ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor = ( ChannelSecurityInterceptor ) org.springframework.integration.security.config.Advisor[] [ NUMBER ] . getAdvice ( ) ; ChannelAccessPolicy org.springframework.integration.security.config.ChannelAccessPolicy = this . org.springframework.integration.security.config.ChannelAccessPolicy ( java.lang.String , org.springframework.integration.security.config.ChannelSecurityInterceptor ) ; assertNotNull ( STRING + java.lang.String + STRING , org.springframework.integration.security.config.ChannelAccessPolicy ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForSend ( ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForReceive ( ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = this . java.util.Collection<java.lang.String> ( java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) ; assertTrue ( STRING , java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel . setBeanName ( java.lang.String ) ; MessageChannel org.springframework.integration.security.config.MessageChannel = ( MessageChannel ) applicationContext . getAutowireCapableBeanFactory ( ) . applyBeanPostProcessorsAfterInitialization ( org.springframework.integration.security.config.SecuredChannelsParserTests.TestMessageChannel , java.lang.String ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.integration.security.config.MessageChannel ) ) ; Advisor [] org.springframework.integration.security.config.Advisor[] = ( ( Advised ) org.springframework.integration.security.config.MessageChannel ) . getAdvisors ( ) ; assertEquals ( STRING , NUMBER , advisors . length ) ; ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor = ( ChannelSecurityInterceptor ) org.springframework.integration.security.config.Advisor[] [ NUMBER ] . getAdvice ( ) ; ChannelAccessPolicy org.springframework.integration.security.config.ChannelAccessPolicy = this . org.springframework.integration.security.config.ChannelAccessPolicy ( java.lang.String , org.springframework.integration.security.config.ChannelSecurityInterceptor ) ; assertNotNull ( STRING + java.lang.String + STRING , org.springframework.integration.security.config.ChannelAccessPolicy ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForSend ( ) ; java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> = org.springframework.integration.security.config.ChannelAccessPolicy . getConfigAttributesForReceive ( ) ; assertNotNull ( STRING , java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) ; assertNotNull ( STRING , java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = this . java.util.Collection<java.lang.String> ( java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = this . java.util.Collection<java.lang.String> ( java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) ; assertTrue ( STRING , java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.integration.security.config.ChannelAccessPolicy org.springframework.integration.security.config.ChannelAccessPolicy ( java.lang.String java.lang.String , ChannelSecurityInterceptor org.springframework.integration.security.config.ChannelSecurityInterceptor ) { DirectFieldAccessor org.springframework.integration.security.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.security.config.ChannelSecurityInterceptor . obtainSecurityMetadataSource ( ) ) ; java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> < java.util.regex.Pattern , ChannelAccessPolicy > java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> = ( java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> < java.util.regex.Pattern , ChannelAccessPolicy > ) org.springframework.integration.security.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; for ( java.util.Map . java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> < java.util.regex.Pattern , ChannelAccessPolicy > java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> : java.util.Map<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> . entrySet ( ) ) { if ( java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> . getKey ( ) . pattern ( ) . equals ( java.lang.String ) ) { return java.util.Map.Entry<java.util.regex.Pattern,org.springframework.integration.security.config.ChannelAccessPolicy> . getValue ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; for ( ConfigAttribute org.springframework.integration.security.config.ConfigAttribute : java.util.Collection<org.springframework.integration.security.config.ConfigAttribute> ) { ConfigAttribute org.springframework.integration.security.config.ConfigAttribute = org.springframework.integration.security.config.ConfigAttribute ; java.util.Set<java.lang.String> . boolean ( org.springframework.integration.security.config.ConfigAttribute . getAttribute ( ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.security.config.Message<?> < ? > org.springframework.integration.security.config.Message<?> ( long long ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.security.config.Message<?> , long long ) { return false ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.security.config.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.security.config.Message<?>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.security.config.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.security.config.Message<?>> ( MessageSelector org.springframework.integration.security.config.MessageSelector ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelInterceptor org.springframework.integration.security.config.ChannelInterceptor ) { java.util.List<org.springframework.integration.security.config.ChannelInterceptor> . add ( org.springframework.integration.security.config.ChannelInterceptor ) ; }  <METHOD_END>
