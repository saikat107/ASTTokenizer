<METHOD_START> public void void ( CacheManager org.springframework.cache.jcache.interceptor.CacheManager ) { this . org.springframework.cache.jcache.interceptor.CacheManager = org.springframework.cache.jcache.interceptor.CacheManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.jcache.interceptor.CacheManager org.springframework.cache.jcache.interceptor.CacheManager ( ) { return this . org.springframework.cache.jcache.interceptor.CacheManager ; }  <METHOD_END>
<METHOD_START> public void void ( CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ) { this . org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( ) { return this . org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> public void void ( CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ) { this . org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( ) { return this . org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> public void void ( KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ) { this . org.springframework.cache.jcache.interceptor.KeyGenerator = org.springframework.cache.jcache.interceptor.KeyGenerator ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.jcache.interceptor.KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ( ) { return this . org.springframework.cache.jcache.interceptor.KeyGenerator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.cache.jcache.interceptor.BeanFactory ) { this . org.springframework.cache.jcache.interceptor.BeanFactory = org.springframework.cache.jcache.interceptor.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.cache.jcache.interceptor.KeyGenerator = new KeyGeneratorAdapter ( this , this . org.springframework.cache.jcache.interceptor.KeyGenerator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( org.springframework.cache.jcache.interceptor.CacheResolver ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { try { return this . org.springframework.cache.jcache.interceptor.BeanFactory . getBean ( java.lang.Class<T> ) ; } catch ( NoUniqueBeanDefinitionException org.springframework.cache.jcache.interceptor.NoUniqueBeanDefinitionException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + STRING , org.springframework.cache.jcache.interceptor.NoUniqueBeanDefinitionException ) ; } catch ( NoSuchBeanDefinitionException org.springframework.cache.jcache.interceptor.NoSuchBeanDefinitionException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING , org.springframework.cache.jcache.interceptor.NoSuchBeanDefinitionException ) ; } return BeanUtils . instantiateClass ( java.lang.Class<T> ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheManager org.springframework.cache.jcache.interceptor.CacheManager ( ) { if ( this . org.springframework.cache.jcache.interceptor.CacheManager == null ) { try { this . org.springframework.cache.jcache.interceptor.CacheManager = this . org.springframework.cache.jcache.interceptor.BeanFactory . getBean ( CacheManager .class ) ; } catch ( NoUniqueBeanDefinitionException org.springframework.cache.jcache.interceptor.NoUniqueBeanDefinitionException ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.cache.jcache.interceptor.NoSuchBeanDefinitionException ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } } return this . org.springframework.cache.jcache.interceptor.CacheManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( ) { if ( this . org.springframework.cache.jcache.interceptor.CacheResolver == null ) { this . org.springframework.cache.jcache.interceptor.CacheResolver = new SimpleCacheResolver ( org.springframework.cache.jcache.interceptor.CacheManager ( ) ) ; } return this . org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( ) { if ( this . org.springframework.cache.jcache.interceptor.CacheResolver == null ) { this . org.springframework.cache.jcache.interceptor.CacheResolver = new org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.LazyCacheResolver ( ) ; } return this . org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.interceptor.KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ( ) { return this . org.springframework.cache.jcache.interceptor.KeyGenerator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> ( CacheOperationInvocationContext < ? > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<?> ) { if ( this . org.springframework.cache.jcache.interceptor.CacheResolver == null ) { this . org.springframework.cache.jcache.interceptor.CacheResolver = new SimpleExceptionCacheResolver ( org.springframework.cache.jcache.interceptor.CacheManager ( ) ) ; } return this . org.springframework.cache.jcache.interceptor.CacheResolver . resolveCaches ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<> ) ; }  <METHOD_END>
