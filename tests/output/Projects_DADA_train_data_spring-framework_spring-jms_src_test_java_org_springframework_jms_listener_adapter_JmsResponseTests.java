<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Destination org.springframework.jms.listener.adapter.Destination = mock ( Destination .class ) ; Destination org.springframework.jms.listener.adapter.Destination = JmsResponse . forDestination ( STRING , org.springframework.jms.listener.adapter.Destination ) . resolveDestination ( null , null ) ; assertSame ( org.springframework.jms.listener.adapter.Destination , org.springframework.jms.listener.adapter.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.listener.adapter.JMSException { Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; DestinationResolver org.springframework.jms.listener.adapter.DestinationResolver = mock ( DestinationResolver .class ) ; Destination org.springframework.jms.listener.adapter.Destination = mock ( Destination .class ) ; given ( org.springframework.jms.listener.adapter.DestinationResolver . resolveDestinationName ( org.springframework.jms.listener.adapter.Session , STRING , false ) ) . willReturn ( org.springframework.jms.listener.adapter.Destination ) ; JmsResponse < java.lang.String > org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> = JmsResponse . forQueue ( STRING , STRING ) ; Destination org.springframework.jms.listener.adapter.Destination = org.springframework.jms.listener.adapter.JmsResponse<java.lang.String> . resolveDestination ( org.springframework.jms.listener.adapter.DestinationResolver , org.springframework.jms.listener.adapter.Session ) ; assertSame ( org.springframework.jms.listener.adapter.Destination , org.springframework.jms.listener.adapter.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.listener.adapter.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; JmsResponse . forQueue ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.listener.adapter.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; JmsResponse . forQueue ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.listener.adapter.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; JmsResponse . forTopic ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.listener.adapter.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; JmsResponse . forDestination ( STRING , null ) ; }  <METHOD_END>
