<METHOD_START> @ Before public void void ( ) java.lang.InterruptedException { org.springframework.data.mongodb.repository.PersonRepository . deleteAll ( ) ; org.springframework.data.mongodb.repository.MongoOperations . remove ( new org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core ( ) , User .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { User org.springframework.data.mongodb.repository.User = new User ( ) ; thomas . username = STRING ; org.springframework.data.mongodb.repository.MongoOperations . save ( org.springframework.data.mongodb.repository.User ) ; Person org.springframework.data.mongodb.repository.Person = new Person ( ) ; org.springframework.data.mongodb.repository.Person . setFirstname ( STRING ) ; org.springframework.data.mongodb.repository.Person . setFans ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.User ) ) ; org.springframework.data.mongodb.repository.Person . setRealFans ( new java.util.ArrayList<org.springframework.data.mongodb.repository.User> < User > ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.User ) ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Person org.springframework.data.mongodb.repository.Person = org.springframework.data.mongodb.repository.PersonRepository . findOne ( person . id ) . get ( ) ; java.util.List<org.springframework.data.mongodb.repository.User> < User > java.util.List<org.springframework.data.mongodb.repository.User> = org.springframework.data.mongodb.repository.Person . getFans ( ) ; assertProxyIsResolved ( java.util.List<org.springframework.data.mongodb.repository.User> , false ) ; User org.springframework.data.mongodb.repository.User = java.util.List<org.springframework.data.mongodb.repository.User> . get ( NUMBER ) ; assertProxyIsResolved ( java.util.List<org.springframework.data.mongodb.repository.User> , true ) ; assertThat ( org.springframework.data.mongodb.repository.User . getUsername ( ) , is ( org.springframework.data.mongodb.repository.User . getUsername ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { User org.springframework.data.mongodb.repository.User = new User ( ) ; thomas . username = STRING ; org.springframework.data.mongodb.repository.MongoOperations . save ( org.springframework.data.mongodb.repository.User ) ; Person org.springframework.data.mongodb.repository.Person = new Person ( ) ; org.springframework.data.mongodb.repository.Person . setFirstname ( STRING ) ; org.springframework.data.mongodb.repository.Person . setFans ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.User ) ) ; org.springframework.data.mongodb.repository.Person . setRealFans ( new java.util.ArrayList<org.springframework.data.mongodb.repository.User> < User > ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.User ) ) ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Person org.springframework.data.mongodb.repository.Person = org.springframework.data.mongodb.repository.PersonRepository . findOne ( person . id ) . get ( ) ; java.util.List<org.springframework.data.mongodb.repository.User> < User > java.util.List<org.springframework.data.mongodb.repository.User> = org.springframework.data.mongodb.repository.Person . getRealFans ( ) ; assertProxyIsResolved ( java.util.List<org.springframework.data.mongodb.repository.User> , false ) ; User org.springframework.data.mongodb.repository.User = java.util.List<org.springframework.data.mongodb.repository.User> . get ( NUMBER ) ; assertProxyIsResolved ( java.util.List<org.springframework.data.mongodb.repository.User> , true ) ; assertThat ( org.springframework.data.mongodb.repository.User . getUsername ( ) , is ( org.springframework.data.mongodb.repository.User . getUsername ( ) ) ) ; java.util.List<org.springframework.data.mongodb.repository.User> = org.springframework.data.mongodb.repository.Person . getRealFans ( ) ; assertProxyIsResolved ( java.util.List<org.springframework.data.mongodb.repository.User> , true ) ; org.springframework.data.mongodb.repository.User = java.util.List<org.springframework.data.mongodb.repository.User> . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.repository.User . getUsername ( ) , is ( org.springframework.data.mongodb.repository.User . getUsername ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { User org.springframework.data.mongodb.repository.User = new User ( ) ; thomas . username = STRING ; org.springframework.data.mongodb.repository.MongoOperations . save ( org.springframework.data.mongodb.repository.User ) ; Person org.springframework.data.mongodb.repository.Person = new Person ( ) ; org.springframework.data.mongodb.repository.Person . setFirstname ( STRING ) ; org.springframework.data.mongodb.repository.Person . setCoworker ( org.springframework.data.mongodb.repository.User ) ; org.springframework.data.mongodb.repository.PersonRepository . save ( org.springframework.data.mongodb.repository.Person ) ; Person org.springframework.data.mongodb.repository.Person = org.springframework.data.mongodb.repository.PersonRepository . findOne ( person . id ) . get ( ) ; User org.springframework.data.mongodb.repository.User = org.springframework.data.mongodb.repository.Person . getCoworker ( ) ; assertProxyIsResolved ( org.springframework.data.mongodb.repository.User , false ) ; assertThat ( org.springframework.data.mongodb.repository.User . getUsername ( ) , is ( org.springframework.data.mongodb.repository.User . getUsername ( ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.repository.User , true ) ; assertThat ( org.springframework.data.mongodb.repository.User . getUsername ( ) , is ( org.springframework.data.mongodb.repository.User . getUsername ( ) ) ) ; }  <METHOD_END>
