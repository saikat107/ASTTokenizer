<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer = new org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer ( this . int ) ; this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . start ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { RestTemplate org.springframework.boot.devtools.livereload.RestTemplate = new RestTemplate ( ) ; java.net.URI java.net.URI = new java.net.URI ( STRING + this . int + STRING ) ; java.lang.String java.lang.String = org.springframework.boot.devtools.livereload.RestTemplate . getForObject ( java.net.URI , java.lang.String .class ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler = org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler ( ) ; this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . triggerReload ( ) ; java.lang.Thread . void ( NUMBER ) ; this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . stop ( ) ; assertThat ( org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler = org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler ( ) ; org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler . void ( new PingMessage ( ) ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler . int ( ) ) . isEqualTo ( NUMBER ) ; this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler = org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler ( ) ; org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler . void ( ) ; void ( ) ; assertThat ( this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . java.util.List<org.springframework.boot.devtools.livereload.ConnectionClosedException> ( ) . size ( ) ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.InterruptedException { long long = java.lang.System . long ( ) ; while ( this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . java.util.List<org.springframework.boot.devtools.livereload.ConnectionClosedException> ( ) . isEmpty ( ) && java.lang.System . long ( ) - long < NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler = org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler ( ) ; this . org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer . stop ( ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler . org.springframework.boot.devtools.livereload.CloseStatus ( ) . getCode ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler ( ) java.lang.Exception { WebSocketClient org.springframework.boot.devtools.livereload.WebSocketClient = new StandardWebSocketClient ( new WsWebSocketContainer ( ) ) ; org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler = new org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler ( ) ; org.springframework.boot.devtools.livereload.WebSocketClient . doHandshake ( org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler , STRING + this . int + STRING ) ; org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler . void ( ) ; return org.springframework.boot.devtools.livereload.LiveReloadServerTests.LiveReloadWebSocketHandler ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.io.IOException { LiveReloadServer org.springframework.boot.devtools.livereload.LiveReloadServer = new LiveReloadServer ( ) ; org.springframework.boot.devtools.livereload.LiveReloadServer . start ( ) ; while ( true ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } org.springframework.boot.devtools.livereload.LiveReloadServer . triggerReload ( ) ; } }  <METHOD_END>
<METHOD_START> void ( int int ) { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.devtools.livereload.Connection org.springframework.boot.devtools.livereload.Connection ( java . net . java.net.Socket java.net.Socket , java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { return new org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer.MonitoredConnection ( java.net.Socket , java.io.InputStream , java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.devtools.livereload.ConnectionClosedException> < ConnectionClosedException > java.util.List<org.springframework.boot.devtools.livereload.ConnectionClosedException> ( ) { synchronized ( this . java.lang.Object ) { return new java.util.ArrayList <> ( this . java.util.List<org.springframework.boot.devtools.livereload.ConnectionClosedException> ) ; } }  <METHOD_END>
<METHOD_START> void ( java . net . java.net.Socket java.net.Socket , java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { super( java.net.Socket , java.io.InputStream , java.io.OutputStream ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { try { super. run ( ) ; } catch ( ConnectionClosedException org.springframework.boot.devtools.livereload.ConnectionClosedException ) { org.springframework.boot.devtools.livereload.ConnectionClosedException . printStackTrace ( ) ; synchronized ( org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer .this . java.lang.Object ) { org.springframework.boot.devtools.livereload.LiveReloadServerTests.MonitoredLiveReloadServer .this . java.util.List<org.springframework.boot.devtools.livereload.ConnectionClosedException> . add ( org.springframework.boot.devtools.livereload.ConnectionClosedException ) ; } throw org.springframework.boot.devtools.livereload.ConnectionClosedException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.boot.devtools.livereload.WebSocketSession )				throws java.lang.Exception { this . org.springframework.boot.devtools.livereload.WebSocketSession = org.springframework.boot.devtools.livereload.WebSocketSession ; org.springframework.boot.devtools.livereload.WebSocketSession . sendMessage ( new TextMessage ( java.lang.String ) ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.lang.Thread . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketSession org.springframework.boot.devtools.livereload.WebSocketSession , TextMessage org.springframework.boot.devtools.livereload.TextMessage )				throws java.lang.Exception { if ( org.springframework.boot.devtools.livereload.TextMessage . getPayload ( ) . contains ( STRING ) ) { this . java.util.concurrent.CountDownLatch . void ( ) ; } this . java.util.List<java.lang.String> . boolean ( org.springframework.boot.devtools.livereload.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketSession org.springframework.boot.devtools.livereload.WebSocketSession , PongMessage org.springframework.boot.devtools.livereload.PongMessage )				throws java.lang.Exception { this . int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.boot.devtools.livereload.WebSocketSession , CloseStatus org.springframework.boot.devtools.livereload.CloseStatus )				throws java.lang.Exception { this . org.springframework.boot.devtools.livereload.CloseStatus = org.springframework.boot.devtools.livereload.CloseStatus ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketMessage < ? > org.springframework.boot.devtools.livereload.WebSocketMessage<?> ) throws java.io.IOException { this . org.springframework.boot.devtools.livereload.WebSocketSession . sendMessage ( org.springframework.boot.devtools.livereload.WebSocketMessage<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { this . org.springframework.boot.devtools.livereload.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.livereload.CloseStatus org.springframework.boot.devtools.livereload.CloseStatus ( ) { return this . org.springframework.boot.devtools.livereload.CloseStatus ; }  <METHOD_END>
