<METHOD_START> public void ( ) { try { java.lang.reflect.Method = ITestBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.Throwable .class } ) ; java.lang.reflect.Method = ITestBean .class . java.lang.reflect.Method ( STRING , ( java.lang.Class [] ) null ) ; java.lang.reflect.Method = ITestBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.RuntimeException ( STRING , java.lang.NoSuchMethodException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; TransactionAttributeSource org.springframework.transaction.interceptor.TransactionAttributeSource = new MapTransactionAttributeSource ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionAttributeSource ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . getName ( ) ; void ( false ) ; verifyZeroInteractions ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . getName ( ) ; void ( false ) ; verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; MockCallbackPreferringTransactionManager org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager = new MockCallbackPreferringTransactionManager ( ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . getName ( ) ; void ( false ) ; assertSame ( org.springframework.transaction.interceptor.TransactionAttribute , org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager . getDefinition ( ) ) ; assertFalse ( org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager . getStatus ( ) . isRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; MockCallbackPreferringTransactionManager org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager = new MockCallbackPreferringTransactionManager ( ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; void ( false ) ; try { org.springframework.transaction.interceptor.ITestBean . exceptional ( new OptimisticLockingFailureException ( STRING ) ) ; fail ( STRING ) ; } catch ( OptimisticLockingFailureException org.springframework.transaction.interceptor.OptimisticLockingFailureException ) { } void ( false ) ; assertSame ( org.springframework.transaction.interceptor.TransactionAttribute , org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager . getDefinition ( ) ) ; assertFalse ( org.springframework.transaction.interceptor.MockCallbackPreferringTransactionManager . getStatus ( ) . isRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , new TransactionAttributeSource [] { org.springframework.transaction.interceptor.MapTransactionAttributeSource , org.springframework.transaction.interceptor.MapTransactionAttributeSource } ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . getName ( ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . setName ( STRING ) ; void ( false ) ; verify ( org.springframework.transaction.interceptor.PlatformTransactionManager , times ( NUMBER ) ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . getName ( ) ; void ( false ) ; verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; final java.lang.String java.lang.String = STRING ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) { @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; assertEquals ( java.lang.String , getSpouse ( ) . getName ( ) ) ; } } ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertFalse ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; return java.lang.String ; } } ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; org.springframework.transaction.interceptor.TestBean . setSpouse ( org.springframework.transaction.interceptor.ITestBean ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . exceptional ( null ) ; void ( false ) ; verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; assertEquals ( java.lang.String , getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertFalse ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; final TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( TransactionDefinition . PROPAGATION_NESTED ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; final java.lang.String java.lang.String = STRING ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) { @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; assertEquals ( org.springframework.transaction.interceptor.TransactionAttribute , org.springframework.transaction.interceptor.TransactionInfo . getTransactionAttribute ( ) ) ; assertEquals ( java.lang.String , getSpouse ( ) . getName ( ) ) ; } } ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; assertEquals ( org.springframework.transaction.interceptor.TransactionAttribute , org.springframework.transaction.interceptor.TransactionInfo . getTransactionAttribute ( ) ) ; return java.lang.String ; } } ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; org.springframework.transaction.interceptor.TestBean . setSpouse ( org.springframework.transaction.interceptor.ITestBean ) ; void ( false ) ; org.springframework.transaction.interceptor.ITestBean . exceptional ( null ) ; void ( false ) ; verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; assertEquals ( org.springframework.transaction.interceptor.TransactionAttribute , org.springframework.transaction.interceptor.TransactionInfo . getTransactionAttribute ( ) ) ; assertEquals ( java.lang.String , getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { TransactionInfo org.springframework.transaction.interceptor.TransactionInfo = TransactionAspectSupport . currentTransactionInfo ( ) ; assertTrue ( org.springframework.transaction.interceptor.TransactionInfo . hasTransaction ( ) ) ; assertEquals ( org.springframework.transaction.interceptor.TransactionAttribute , org.springframework.transaction.interceptor.TransactionInfo . getTransactionAttribute ( ) ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.Exception ( ) , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.Exception ( ) , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.RuntimeException ( ) , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.RuntimeException ( ) , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.Exception ( ) , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.Exception ( ) , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.RuntimeException ( ) , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( new java.lang.RuntimeException ( ) , false , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( final java.lang.Exception java.lang.Exception , final boolean boolean , boolean boolean ) throws java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) { @ java.lang.Override public boolean boolean ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable == java.lang.Exception ) ; return boolean ; } } ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; TransactionSystemException org.springframework.transaction.interceptor.TransactionSystemException = new TransactionSystemException ( STRING ) ; if ( boolean ) { if ( boolean ) { willThrow ( org.springframework.transaction.interceptor.TransactionSystemException ) . given ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . rollback ( org.springframework.transaction.interceptor.TransactionStatus ) ; } else { willThrow ( org.springframework.transaction.interceptor.TransactionSystemException ) . given ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; } } TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; try { org.springframework.transaction.interceptor.ITestBean . exceptional ( java.lang.Exception ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( boolean ) { assertEquals ( STRING , org.springframework.transaction.interceptor.TransactionSystemException , java.lang.Throwable ) ; } else { assertEquals ( STRING , java.lang.Exception , java.lang.Throwable ) ; } } if ( ! boolean ) { if ( boolean ) { verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . rollback ( org.springframework.transaction.interceptor.TransactionStatus ) ; } else { verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable == java.lang.Exception ) ; return boolean ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; final java.lang.String java.lang.String = STRING ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = TransactionInterceptor . currentTransactionStatus ( ) ; org.springframework.transaction.interceptor.TransactionStatus . setRollbackOnly ( ) ; return java.lang.String ; } } ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; assertTrue ( java.lang.String . boolean ( org.springframework.transaction.interceptor.ITestBean . getName ( ) ) ) ; verify ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = TransactionInterceptor . currentTransactionStatus ( ) ; org.springframework.transaction.interceptor.TransactionStatus . setRollbackOnly ( ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; CannotCreateTransactionException org.springframework.transaction.interceptor.CannotCreateTransactionException = new CannotCreateTransactionException ( STRING , null ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willThrow ( org.springframework.transaction.interceptor.CannotCreateTransactionException ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } } ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; try { org.springframework.transaction.interceptor.ITestBean . getName ( ) ; fail ( STRING ) ; } catch ( CannotCreateTransactionException org.springframework.transaction.interceptor.CannotCreateTransactionException ) { assertTrue ( org.springframework.transaction.interceptor.CannotCreateTransactionException == org.springframework.transaction.interceptor.CannotCreateTransactionException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = new DefaultTransactionAttribute ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ; MapTransactionAttributeSource org.springframework.transaction.interceptor.MapTransactionAttributeSource = new MapTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.MapTransactionAttributeSource . register ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; given ( org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ) . willReturn ( org.springframework.transaction.interceptor.TransactionStatus ) ; UnexpectedRollbackException org.springframework.transaction.interceptor.UnexpectedRollbackException = new UnexpectedRollbackException ( STRING , null ) ; willThrow ( org.springframework.transaction.interceptor.UnexpectedRollbackException ) . given ( org.springframework.transaction.interceptor.PlatformTransactionManager ) . commit ( org.springframework.transaction.interceptor.TransactionStatus ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.transaction.interceptor.TestBean , org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.MapTransactionAttributeSource ) ; java.lang.String java.lang.String = STRING ; try { org.springframework.transaction.interceptor.ITestBean . setName ( java.lang.String ) ; fail ( STRING ) ; } catch ( UnexpectedRollbackException org.springframework.transaction.interceptor.UnexpectedRollbackException ) { assertTrue ( org.springframework.transaction.interceptor.UnexpectedRollbackException == org.springframework.transaction.interceptor.UnexpectedRollbackException ) ; } assertTrue ( org.springframework.transaction.interceptor.ITestBean . getName ( ) == java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { try { TransactionInterceptor . currentTransactionStatus ( ) ; if ( ! boolean ) { fail ( STRING ) ; } } catch ( NoTransactionException org.springframework.transaction.interceptor.NoTransactionException ) { if ( boolean ) { fail ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , TransactionAttributeSource [] org.springframework.transaction.interceptor.TransactionAttributeSource[] ) throws java.lang.Exception { return java.lang.Object ( java.lang.Object , org.springframework.transaction.interceptor.PlatformTransactionManager , new CompositeTransactionAttributeSource ( org.springframework.transaction.interceptor.TransactionAttributeSource[] ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , TransactionAttributeSource org.springframework.transaction.interceptor.TransactionAttributeSource ) throws java.lang.Exception ;  <METHOD_END>
