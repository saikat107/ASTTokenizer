<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ObjectFactory < ? > org.springframework.transaction.support.ObjectFactory<?> ) { org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder = ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ) TransactionSynchronizationManager . getResource ( this ) ; if ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder == null ) { org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder = new org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ( ) ; TransactionSynchronizationManager . registerSynchronization ( new org.springframework.transaction.support.SimpleTransactionScope.CleanupSynchronization ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ) ) ; TransactionSynchronizationManager . bindResource ( this , org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ) ; } java.lang.Object java.lang.Object = org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = org.springframework.transaction.support.ObjectFactory<> . getObject ( ) ; org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder = ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ) TransactionSynchronizationManager . getResource ( this ) ; if ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder != null ) { org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Runnable> . java.lang.Runnable ( java.lang.String ) ; return org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Runnable java.lang.Runnable ) { org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder = ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ) TransactionSynchronizationManager . getResource ( this ) ; if ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder != null ) { org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Runnable> . java.lang.Runnable ( java.lang.String , java.lang.Runnable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return TransactionSynchronizationManager . getCurrentTransactionName ( ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ) { this . org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder = org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { TransactionSynchronizationManager . unbindResource ( org.springframework.transaction.support.SimpleTransactionScope .this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { TransactionSynchronizationManager . bindResource ( org.springframework.transaction.support.SimpleTransactionScope .this , this . org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { TransactionSynchronizationManager . unbindResourceIfPossible ( org.springframework.transaction.support.SimpleTransactionScope .this ) ; for ( java.lang.Runnable java.lang.Runnable : this . org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Runnable> . java.util.Collection<java.lang.Runnable> ( ) ) { java.lang.Runnable . void ( ) ; } this . org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Runnable> . void ( ) ; this . org.springframework.transaction.support.SimpleTransactionScope.ScopedObjectsHolder . java.util.Map<java.lang.String,java.lang.Object> . void ( ) ; }  <METHOD_END>
