<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.gemfire.snapshot.filter.SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( boolean boolean ) { SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = mock ( SnapshotFilter .class , java.lang.String . java.lang.String ( STRING , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; when ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter . accept ( ( java.util.Map . java.util.Map.Entry ) any ( ) ) ) . thenReturn ( boolean ) ; return org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Operator . AND . isAnd ( ) , is ( true ) ) ; assertThat ( Operator . AND . isOr ( ) , is ( false ) ) ; assertThat ( Operator . OR . isAnd ( ) , is ( false ) ) ; assertThat ( Operator . OR . isOr ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Operator . AND . operate ( true , true ) , is ( true ) ) ; assertThat ( Operator . AND . operate ( true , false ) , is ( false ) ) ; assertThat ( Operator . AND . operate ( false , true ) , is ( false ) ) ; assertThat ( Operator . AND . operate ( false , false ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Operator . OR . operate ( true , true ) , is ( true ) ) ; assertThat ( Operator . OR . operate ( true , false ) , is ( true ) ) ; assertThat ( Operator . OR . operate ( false , true ) , is ( true ) ) ; assertThat ( Operator . OR . operate ( false , false ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotFilter [] org.springframework.data.gemfire.snapshot.filter.SnapshotFilter[] = {} ; assertThat ( ComposableSnapshotFilter . nullSafeArray ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter[] ) , is ( sameInstance ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotFilter [] org.springframework.data.gemfire.snapshot.filter.SnapshotFilter[] = ComposableSnapshotFilter . nullSafeArray ( ( SnapshotFilter [] ) null ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter[] , is ( notNullValue ( ) ) ) ; assertThat ( actualArray . length , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( false ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . compose ( Operator . AND , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , is ( sameInstance ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( false ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( true ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . compose ( Operator . AND , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , is ( not ( sameInstance ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , is ( not ( sameInstance ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ) ) ) ; assertThat ( ( ComposableSnapshotFilter ) org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , isA ( ComposableSnapshotFilter .class ) ) ; assertThat ( ( SnapshotFilter ) TestUtils . readField ( STRING , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ) ) ; assertThat ( ( Operator ) TestUtils . readField ( STRING , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) , is ( equalTo ( Operator . AND ) ) ) ; assertThat ( ( SnapshotFilter ) TestUtils . readField ( STRING , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) , is ( equalTo ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( false ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( true ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . and ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( ( ComposableSnapshotFilter ) org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , isA ( ComposableSnapshotFilter .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter . accept ( null ) , is ( true ) ) ; org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . and ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( ( ComposableSnapshotFilter ) org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , isA ( ComposableSnapshotFilter .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter . accept ( null ) , is ( false ) ) ; org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . and ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( ( ComposableSnapshotFilter ) org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , isA ( ComposableSnapshotFilter .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter . accept ( null ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( false ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ( true ) ; SnapshotFilter org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . or ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( ( ComposableSnapshotFilter ) org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , isA ( ComposableSnapshotFilter .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter . accept ( null ) , is ( true ) ) ; org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . or ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( ( ComposableSnapshotFilter ) org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , isA ( ComposableSnapshotFilter .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter . accept ( null ) , is ( true ) ) ; org.springframework.data.gemfire.snapshot.filter.SnapshotFilter = ComposableSnapshotFilter . or ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , org.springframework.data.gemfire.snapshot.filter.SnapshotFilter ) ; assertThat ( ( ComposableSnapshotFilter ) org.springframework.data.gemfire.snapshot.filter.SnapshotFilter , isA ( ComposableSnapshotFilter .class ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.filter.SnapshotFilter . accept ( null ) , is ( false ) ) ; }  <METHOD_END>
