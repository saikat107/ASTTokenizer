<METHOD_START> private void ( MimeType ... org.springframework.core.codec.MimeType[] ) { super( org.springframework.core.codec.MimeType[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.core.codec.ResolvableType , MimeType org.springframework.core.codec.MimeType ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.codec.ResolvableType . getRawClass ( ) ; return ( super. canEncode ( org.springframework.core.codec.ResolvableType , org.springframework.core.codec.MimeType ) && java.lang.CharSequence .class . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> < DataBuffer > org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> ( Publisher < ? extends java.lang.CharSequence > org.springframework.core.codec.Publisher<? extends java.lang.CharSequence> , DataBufferFactory org.springframework.core.codec.DataBufferFactory , ResolvableType org.springframework.core.codec.ResolvableType , MimeType org.springframework.core.codec.MimeType , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.nio.charset.Charset java.nio.charset.Charset ; if ( org.springframework.core.codec.MimeType != null && org.springframework.core.codec.MimeType . getCharset ( ) != null ) { java.nio.charset.Charset = org.springframework.core.codec.MimeType . getCharset ( ) ; } else { java.nio.charset.Charset = java.nio.charset.Charset ; } return Flux . from ( org.springframework.core.codec.Publisher<> ) . map ( charSequence -> { CharBuffer charBuffer = CharBuffer . wrap ( charSequence ) ; ByteBuffer byteBuffer = charset . encode ( charBuffer ) ; return bufferFactory . wrap ( byteBuffer ) ; } ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.codec.CharSequenceEncoder org.springframework.core.codec.CharSequenceEncoder ( ) { return new org.springframework.core.codec.CharSequenceEncoder ( new MimeType ( STRING , STRING , java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.codec.CharSequenceEncoder org.springframework.core.codec.CharSequenceEncoder ( ) { return new org.springframework.core.codec.CharSequenceEncoder ( new MimeType ( STRING , STRING , java.nio.charset.Charset ) , MimeTypeUtils . ALL ) ; }  <METHOD_END>
