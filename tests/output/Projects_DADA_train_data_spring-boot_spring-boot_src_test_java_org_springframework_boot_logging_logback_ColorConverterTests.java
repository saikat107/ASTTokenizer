<METHOD_START> @ BeforeClass public static void void ( ) { AnsiOutput . setEnabled ( AnsiOutput . Enabled . ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { AnsiOutput . setEnabled ( AnsiOutput . Enabled . DETECT ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.logging.logback.ColorConverter = new ColorConverter ( ) ; this . org.springframework.boot.logging.logback.LoggingEvent = new LoggingEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.ColorConverter . setOptionList ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.ColorConverter . setOptionList ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.ColorConverter . setOptionList ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.ColorConverter . setOptionList ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.ColorConverter . setOptionList ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.ColorConverter . setOptionList ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.ColorConverter . setOptionList ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LoggingEvent . setLevel ( Level . ERROR ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LoggingEvent . setLevel ( Level . WARN ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LoggingEvent . setLevel ( Level . DEBUG ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LoggingEvent . setLevel ( Level . TRACE ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.ColorConverter . transform ( this . org.springframework.boot.logging.logback.LoggingEvent , this . java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
