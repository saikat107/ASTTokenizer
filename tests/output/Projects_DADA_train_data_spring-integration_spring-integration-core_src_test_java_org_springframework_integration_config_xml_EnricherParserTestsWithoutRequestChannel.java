<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; assertEquals ( EventDrivenConsumer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( ContentEnricher .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; ContentEnricher org.springframework.integration.config.xml.ContentEnricher = ( ContentEnricher ) java.lang.Object ; assertEquals ( NUMBER , org.springframework.integration.config.xml.ContentEnricher . getOrder ( ) ) ; DirectFieldAccessor org.springframework.integration.config.xml.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.xml.ContentEnricher ) ; assertNull ( org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( false , org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> < Expression , Expression > java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> = ( java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> < Expression , Expression > ) org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ; for ( java.util.Map . java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> < Expression , Expression > java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> : java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . entrySet ( ) ) { if ( STRING . boolean ( java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ) { assertEquals ( STRING , java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getValue ( ) . getExpressionString ( ) ) ; } else if ( STRING . boolean ( java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ) { assertEquals ( STRING , java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getValue ( ) . getExpressionString ( ) ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target = new org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target ( ) ; org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target . void ( NUMBER ) ; org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target . void ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target ) . build ( ) ; org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , PollableChannel .class ) . receive ( NUMBER ) ; org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target = ( org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target . int ( ) ) ; assertSame ( org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target , org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target = new org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target ( ) ; org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target . void ( this . java.lang.String ) ; org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target . void ( this . int ) ; return org.springframework.integration.config.xml.EnricherParserTestsWithoutRequestChannel.Target ; }  <METHOD_END>
