<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int int = findAvailablePort ( ) ; org.springframework.data.gemfire.client.ProcessWrapper = run ( ServerProcess .class , java.lang.String . java.lang.String ( STRING , GEMFIRE_CACHE_SERVER_PORT_PROPERTY , int ) , getServerContextXmlFileLocation ( org.springframework.data.gemfire.client.GemFireDataSourceIntegrationTests .class ) ) ; waitForServerToStart ( DEFAULT_HOSTNAME , int ) ; java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY ) ; stop ( org.springframework.data.gemfire.client.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> , java.lang.String java.lang.String , DataPolicy org.springframework.data.gemfire.client.DataPolicy ) { void ( org.springframework.data.gemfire.client.Region<,> , java.lang.String , java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , STRING ) , org.springframework.data.gemfire.client.DataPolicy ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String , DataPolicy org.springframework.data.gemfire.client.DataPolicy ) { assertThat ( org.springframework.data.gemfire.client.Region<,> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getFullPath ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getAttributes ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) . isEqualTo ( org.springframework.data.gemfire.client.DataPolicy ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.ApplicationContext . getBean ( STRING , Pool .class ) ; assertThat ( org.springframework.data.gemfire.client.Pool ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getSubscriptionEnabled ( ) ) . isTrue ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.gemfire.client.ApplicationContext . getBeanNamesForType ( Region .class ) ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.List<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.List<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> = org.springframework.data.gemfire.client.ApplicationContext . getBean ( STRING , Region .class ) ; void ( org.springframework.data.gemfire.client.Region<,> , STRING , DataPolicy . EMPTY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.gemfire.client.Person = new Person ( NUMBER , STRING , STRING ) ; PersonRepository org.springframework.data.gemfire.client.PersonRepository = org.springframework.data.gemfire.client.ApplicationContext . getBean ( PersonRepository .class ) ; assertThat ( org.springframework.data.gemfire.client.PersonRepository . save ( org.springframework.data.gemfire.client.Person ) ) . isSameAs ( org.springframework.data.gemfire.client.Person ) ; java.util.Optional<org.springframework.data.gemfire.client.Person> < Person > java.util.Optional<org.springframework.data.gemfire.client.Person> = org.springframework.data.gemfire.client.PersonRepository . findOne ( NUMBER ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.client.Person> . isPresent ( ) ) . isTrue ( ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.client.Person> . get ( ) . getFirstname ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
