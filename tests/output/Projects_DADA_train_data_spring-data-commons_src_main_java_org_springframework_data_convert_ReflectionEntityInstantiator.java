<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T , E extends org.springframework.data.convert.PersistentEntity<? extends T,P> < ? extends T , P > , P extends org.springframework.data.convert.PersistentProperty<P> < P > > T T ( E E , ParameterValueProvider < P > org.springframework.data.convert.ParameterValueProvider<P> ) { return E . getPersistenceConstructor ( ) . map ( constructor -> { List < Object > params = Optional . ofNullable ( provider ) . map ( it -> constructor . getParameters ( ) . stream ( ) . map ( parameter -> it . getParameterValue ( parameter ) . orElse ( Optional . empty ( ) ) ) . collect ( Collectors . toList ( ) ) ) . orElseGet ( Collections :: emptyList ) ; List < Object > foo = new ArrayList <> ( params . size ( ) ) ; for ( Object element : params ) { foo . add ( ( element instanceof Optional ) ? null : element ) ; } try { return ( T ) BeanUtils . instantiateClass ( constructor . getConstructor ( ) , foo . toArray ( ) ) ; } catch ( BeanInstantiationException e ) { throw new MappingInstantiationException ( Optional . of ( entity ) , params , e ) ; } } ) . orElseGet ( ( ) { try { Class < ? extends T > clazz = entity . getType ( ) ; if ( clazz . isArray ( ) ) { Class < ? > ctype = clazz ; int dims = NUMBER ; while ( ctype . isArray ( ) ) { ctype = ctype . getComponentType ( ) ; dims ++ ; } return ( T ) Array . newInstance ( clazz , dims ) ; } else { return BeanUtils . instantiateClass ( clazz ) ; } } catch ( BeanInstantiationException e ) { throw new MappingInstantiationException ( Optional . of ( entity ) , Collections . emptyList ( ) , e ) ; } } ) ; }  <METHOD_END>
