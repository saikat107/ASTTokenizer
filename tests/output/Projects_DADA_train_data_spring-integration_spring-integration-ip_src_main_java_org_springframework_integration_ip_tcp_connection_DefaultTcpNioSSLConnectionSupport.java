<METHOD_START> public void ( TcpSSLContextSupport org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport ) { Assert . notNull ( org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport , STRING ) ; try { this . javax.net.ssl.SSLContext = org.springframework.integration.ip.tcp.connection.TcpSSLContextSupport . getSSLContext ( ) ; } catch ( java.security.GeneralSecurityException | java.io.IOException java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( STRING , java.lang.Exception ) ; } Assert . notNull ( this . javax.net.ssl.SSLContext , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection ( java.nio.channels.SocketChannel java.nio.channels.SocketChannel , boolean boolean , boolean boolean , ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher , java.lang.String java.lang.String ) throws java.lang.Exception { javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine = this . javax.net.ssl.SSLContext . javax.net.ssl.SSLEngine ( ) ; void ( javax.net.ssl.SSLEngine ) ; TcpNioSSLConnection org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection = new TcpNioSSLConnection ( java.nio.channels.SocketChannel , boolean , boolean , org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher , java.lang.String , javax.net.ssl.SSLEngine ) ; org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection . init ( ) ; return org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection ; }  <METHOD_END>
<METHOD_START> protected void void ( javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine ) { }  <METHOD_END>
