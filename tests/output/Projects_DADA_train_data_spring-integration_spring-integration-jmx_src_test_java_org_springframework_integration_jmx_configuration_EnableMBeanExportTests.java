<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) javax.management.MalformedObjectNameException , java.lang.ClassNotFoundException { assertSame ( this . javax.management.MBeanServer , this . org.springframework.integration.jmx.configuration.IntegrationMBeanExporter . getServer ( ) ) ; java.lang.String [] java.lang.String[] = TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.configuration.IntegrationMBeanExporter , STRING , java.lang.String [] .class ) ; assertThat ( java.lang.String[] , arrayContaining ( STRING , STRING , STRING ) ) ; java.lang.String [] java.lang.String[] = TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.configuration.IntegrationManagementConfigurer , STRING , java.lang.String [] .class ) ; assertThat ( java.lang.String[] , arrayContaining ( STRING , STRING , STRING ) ) ; java.lang.String [] java.lang.String[] = TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.configuration.IntegrationManagementConfigurer , STRING , java.lang.String [] .class ) ; assertThat ( java.lang.String[] , arrayContaining ( STRING , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.configuration.IntegrationManagementConfigurer , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.configuration.IntegrationManagementConfigurer , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.configuration.IntegrationManagementConfigurer , STRING , java.lang.Boolean .class ) ) ; assertSame ( this . org.springframework.integration.jmx.configuration.MetricsFactory , TestUtils . getPropertyValue ( this . org.springframework.integration.jmx.configuration.IntegrationManagementConfigurer , STRING ) ) ; java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = this . javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; assertEquals ( STRING , java.util.Set<javax.management.ObjectName> . java.util.Iterator<javax.management.ObjectName> ( ) . javax.management.ObjectName ( ) . java.lang.String ( STRING ) ) ; java.util.Set<javax.management.ObjectName> = this . javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = TestUtils . getPropertyValue ( org.springframework.integration.jmx.configuration.BeanFactory , STRING , java.util.List .class ) ; java.lang.Object java.lang.Object = null ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.Object = java.lang.Object ; break; } } assertNotNull ( java.lang.Object ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Set .class ) . contains ( STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Set .class ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jmx.configuration.MBeanServerFactoryBean org.springframework.integration.jmx.configuration.MBeanServerFactoryBean ( ) { MBeanServerFactoryBean org.springframework.integration.jmx.configuration.MBeanServerFactoryBean = new MBeanServerFactoryBean ( ) ; org.springframework.integration.jmx.configuration.MBeanServerFactoryBean . setLocateExistingServerIfPossible ( true ) ; return org.springframework.integration.jmx.configuration.MBeanServerFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jmx.configuration.QueueChannel org.springframework.integration.jmx.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jmx.configuration.QueueChannel org.springframework.integration.jmx.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jmx.configuration.MetricsFactory org.springframework.integration.jmx.configuration.MetricsFactory ( ) { return new DefaultMetricsFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericApplicationContext org.springframework.integration.jmx.configuration.GenericApplicationContext ) { org.springframework.integration.jmx.configuration.GenericApplicationContext . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) . withProperty ( STRING , STRING ) . withProperty ( STRING , STRING ) ) ; }  <METHOD_END>
