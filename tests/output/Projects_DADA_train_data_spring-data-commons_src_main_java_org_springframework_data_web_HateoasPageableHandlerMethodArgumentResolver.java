<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( HateoasSortHandlerMethodArgumentResolver org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ) { super( org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ( org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ) ); this . org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver = org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ( org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.web.TemplateVariables org.springframework.data.web.TemplateVariables ( MethodParameter org.springframework.data.web.MethodParameter , UriComponents org.springframework.data.web.UriComponents ) { java.lang.String java.lang.String = getParameterNameToUse ( getPageParameterName ( ) , org.springframework.data.web.MethodParameter ) ; java.lang.String java.lang.String = getParameterNameToUse ( getSizeParameterName ( ) , org.springframework.data.web.MethodParameter ) ; java.util.List<org.springframework.data.web.TemplateVariable> < TemplateVariable > java.util.List<org.springframework.data.web.TemplateVariable> = new java.util.ArrayList<org.springframework.data.web.TemplateVariable> <> ( ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.data.web.UriComponents . getQueryParams ( ) ; boolean boolean = ! org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) ; for ( java.lang.String java.lang.String : java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String , java.lang.String ) ) { if ( ! org.springframework.data.web.MultiValueMap<java.lang.String,java.lang.String> . containsKey ( java.lang.String ) ) { VariableType org.springframework.data.web.VariableType = boolean ? REQUEST_PARAM_CONTINUED : REQUEST_PARAM ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; java.util.List<org.springframework.data.web.TemplateVariable> . add ( new TemplateVariable ( java.lang.String , org.springframework.data.web.VariableType , java.lang.String ) ) ; } } TemplateVariables org.springframework.data.web.TemplateVariables = new TemplateVariables ( java.util.List<org.springframework.data.web.TemplateVariable> ) ; return org.springframework.data.web.TemplateVariables . concat ( org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver . getSortTemplateVariables ( org.springframework.data.web.MethodParameter , org.springframework.data.web.UriComponents ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( UriComponentsBuilder org.springframework.data.web.UriComponentsBuilder , MethodParameter org.springframework.data.web.MethodParameter , java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof Pageable ) ) { return; } Pageable org.springframework.data.web.Pageable = ( Pageable ) java.lang.Object ; java.lang.String java.lang.String = getParameterNameToUse ( getPageParameterName ( ) , org.springframework.data.web.MethodParameter ) ; java.lang.String java.lang.String = getParameterNameToUse ( getSizeParameterName ( ) , org.springframework.data.web.MethodParameter ) ; int int = org.springframework.data.web.Pageable . getPageNumber ( ) ; org.springframework.data.web.UriComponentsBuilder . replaceQueryParam ( java.lang.String , isOneIndexedParameters ( ) ? int + NUMBER : int ) ; org.springframework.data.web.UriComponentsBuilder . replaceQueryParam ( java.lang.String , org.springframework.data.web.Pageable . getPageSize ( ) <= getMaxPageSize ( ) ? org.springframework.data.web.Pageable . getPageSize ( ) : getMaxPageSize ( ) ) ; this . org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver . enhance ( org.springframework.data.web.UriComponentsBuilder , org.springframework.data.web.MethodParameter , org.springframework.data.web.Pageable . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ( HateoasSortHandlerMethodArgumentResolver org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ) { return org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver == null ? org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver : org.springframework.data.web.HateoasSortHandlerMethodArgumentResolver ; }  <METHOD_END>
