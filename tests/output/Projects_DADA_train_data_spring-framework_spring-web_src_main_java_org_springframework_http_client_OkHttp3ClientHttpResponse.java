<METHOD_START> public void ( Response org.springframework.http.client.Response ) { Assert . notNull ( org.springframework.http.client.Response , STRING ) ; this . org.springframework.http.client.Response = org.springframework.http.client.Response ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.http.client.Response . code ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.http.client.Response . message ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return this . org.springframework.http.client.Response . body ( ) . byteStream ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpHeaders org.springframework.http.client.HttpHeaders ( ) { if ( this . org.springframework.http.client.HttpHeaders == null ) { HttpHeaders org.springframework.http.client.HttpHeaders = new HttpHeaders ( ) ; for ( java.lang.String java.lang.String : this . org.springframework.http.client.Response . headers ( ) . names ( ) ) { for ( java.lang.String java.lang.String : this . org.springframework.http.client.Response . headers ( java.lang.String ) ) { org.springframework.http.client.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } } this . org.springframework.http.client.HttpHeaders = org.springframework.http.client.HttpHeaders ; } return this . org.springframework.http.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.http.client.Response . body ( ) . close ( ) ; }  <METHOD_END>
