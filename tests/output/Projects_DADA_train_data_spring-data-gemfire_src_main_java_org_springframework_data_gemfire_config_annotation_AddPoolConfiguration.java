<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { if ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . hasAnnotation ( EnablePool .class . java.lang.String ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.gemfire.config.annotation.AnnotationMetadata . getAnnotationAttributes ( EnablePool .class . java.lang.String ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { java.lang.String java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( PoolFactoryBean .class ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.ConnectionEndpointList ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING , GemfireUtils . DEFAULT_LOCATOR_PORT ) ) ; return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.ConnectionEndpointList ( java.util.Map<java.lang.String,java.lang.Object> , STRING , STRING , GemfireUtils . DEFAULT_CACHE_SERVER_PORT ) ) ; return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ConnectionEndpointList org.springframework.data.gemfire.config.annotation.ConnectionEndpointList ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , java.lang.String java.lang.String , int int ) { ConnectionEndpointList org.springframework.data.gemfire.config.annotation.ConnectionEndpointList = new ConnectionEndpointList ( ) ; AnnotationAttributes [] org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] = ( AnnotationAttributes [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; for ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes : org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] ) { org.springframework.data.gemfire.config.annotation.ConnectionEndpointList . add ( org.springframework.data.gemfire.config.annotation.ConnectionEndpoint ( ( java.lang.String ) org.springframework.data.gemfire.config.annotation.AnnotationAttributes . get ( STRING ) , ( java.lang.Integer ) org.springframework.data.gemfire.config.annotation.AnnotationAttributes . get ( STRING ) ) ) ; } java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.gemfire.config.annotation.ConnectionEndpointList . add ( ConnectionEndpointList . parse ( int , java.lang.String . java.lang.String[] ( STRING ) ) ) ; } return org.springframework.data.gemfire.config.annotation.ConnectionEndpointList ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ConnectionEndpoint org.springframework.data.gemfire.config.annotation.ConnectionEndpoint ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) { return new ConnectionEndpoint ( java.lang.String , java.lang.Integer ) ; }  <METHOD_END>
