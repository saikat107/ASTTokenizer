<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.method.annotation.ConfigurableBeanFactory ) { super( org.springframework.web.method.annotation.ConfigurableBeanFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { return ( org.springframework.web.method.annotation.MethodParameter . hasParameterAnnotation ( RequestHeader .class ) && ! java.util.Map .class . boolean ( org.springframework.web.method.annotation.MethodParameter . nestedIfOptional ( ) . getNestedParameterType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.method.annotation.NamedValueInfo org.springframework.web.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { RequestHeader org.springframework.web.method.annotation.RequestHeader = org.springframework.web.method.annotation.MethodParameter . getParameterAnnotation ( RequestHeader .class ) ; return new org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver.RequestHeaderNamedValueInfo ( org.springframework.web.method.annotation.RequestHeader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , MethodParameter org.springframework.web.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest ) throws java.lang.Exception { java.lang.String [] java.lang.String[] = org.springframework.web.method.annotation.NativeWebRequest . getHeaderValues ( java.lang.String ) ; if ( java.lang.String[] != null ) { return ( java.lang.String[] . int == NUMBER ? java.lang.String[] [ NUMBER ] : java.lang.String[] ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.method.annotation.MethodParameter ) throws org.springframework.web.method.annotation.ServletRequestBindingException { throw new ServletRequestBindingException ( STRING + java.lang.String + STRING + org.springframework.web.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ) ; }  <METHOD_END>
<METHOD_START> private void ( RequestHeader org.springframework.web.method.annotation.RequestHeader ) { super( org.springframework.web.method.annotation.RequestHeader . name ( ) , org.springframework.web.method.annotation.RequestHeader . required ( ) , org.springframework.web.method.annotation.RequestHeader . defaultValue ( ) ); }  <METHOD_END>
