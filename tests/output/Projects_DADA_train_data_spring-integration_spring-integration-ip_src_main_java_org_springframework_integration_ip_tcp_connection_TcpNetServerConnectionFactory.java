<METHOD_START> public void ( int int ) { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = super. getPort ( ) ; java.net.ServerSocket java.net.ServerSocket = this . java.net.ServerSocket ; if ( int == NUMBER && java.net.ServerSocket != null ) { int = java.net.ServerSocket . int ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.SocketAddress java.net.SocketAddress ( ) { if ( this . java.net.ServerSocket != null ) { return this . java.net.ServerSocket . java.net.SocketAddress ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.net.ServerSocket java.net.ServerSocket = null ; if ( getListener ( ) == null ) { logger . info ( this + STRING ) ; return; } try { if ( getLocalAddress ( ) == null ) { java.net.ServerSocket = java.net.ServerSocket ( super. getPort ( ) , getBacklog ( ) , null ) ; } else { java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( getLocalAddress ( ) ) ; java.net.ServerSocket = java.net.ServerSocket ( super. getPort ( ) , getBacklog ( ) , java.net.InetAddress ) ; } getTcpSocketSupport ( ) . postProcessServerSocket ( java.net.ServerSocket ) ; this . java.net.ServerSocket = java.net.ServerSocket ; setListening ( true ) ; logger . info ( this + STRING ) ; publishServerListeningEvent ( int ( ) ) ; while ( true ) { final java.net.Socket java.net.Socket ; try { if ( this . java.net.ServerSocket == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( this + STRING ) ; } throw new java.io.IOException ( this + STRING ) ; } else { java.net.Socket = this . java.net.ServerSocket . java.net.Socket ( ) ; } } catch ( java.net.SocketTimeoutException java.net.SocketTimeoutException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } continue; } if ( isShuttingDown ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.net.Socket . java.net.InetAddress ( ) . java.lang.String ( ) + STRING ) ; } java.net.Socket . void ( ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.net.Socket . java.net.InetAddress ( ) . java.lang.String ( ) ) ; } setSocketAttributes ( java.net.Socket ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = new TcpNetConnection ( java.net.Socket , true , isLookupHost ( ) , getApplicationEventPublisher ( ) , getComponentName ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = wrapConnection ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; initializeConnection ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.net.Socket ) ; getTaskExecutor ( ) . execute ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; harvestClosedConnections ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . publishConnectionOpenEvent ( ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof java.net.SocketException && java.net.ServerSocket != null ) { logger . info ( STRING ) ; } else if ( isActive ( ) ) { logger . error ( STRING + int ( ) , java.lang.Exception ) ; publishServerExceptionEvent ( java.lang.Exception ) ; } } finally { setListening ( false ) ; setActive ( false ) ; } }  <METHOD_END>
<METHOD_START> protected java.net.ServerSocket java.net.ServerSocket ( int int , int int , java.net.InetAddress java.net.InetAddress ) throws java.io.IOException { javax.net.ServerSocketFactory javax.net.ServerSocketFactory = this . org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport . getServerSocketFactory ( ) ; if ( java.net.InetAddress == null ) { return javax.net.ServerSocketFactory . java.net.ServerSocket ( int , java.lang.Math . int ( int ) ) ; } else { return javax.net.ServerSocketFactory . java.net.ServerSocket ( int , java.lang.Math . int ( int ) , java.net.InetAddress ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.net.ServerSocket == null ) { return; } try { this . java.net.ServerSocket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } this . java.net.ServerSocket = null ; super. stop ( ) ; }  <METHOD_END>
<METHOD_START> protected java.net.ServerSocket java.net.ServerSocket ( ) { return this . java.net.ServerSocket ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport ; }  <METHOD_END>
<METHOD_START> public void void ( TcpSocketFactorySupport org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport ) { Assert . notNull ( org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport , STRING ) ; this . org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport = org.springframework.integration.ip.tcp.connection.TcpSocketFactorySupport ; }  <METHOD_END>
