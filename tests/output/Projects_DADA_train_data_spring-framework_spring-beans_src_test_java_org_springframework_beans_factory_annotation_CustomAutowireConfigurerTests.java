<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; BeanDefinitionReader org.springframework.beans.factory.annotation.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.BeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.annotation.Resource ) ; CustomAutowireConfigurer org.springframework.beans.factory.annotation.CustomAutowireConfigurer = new CustomAutowireConfigurer ( ) ; org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.CustomResolver org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.CustomResolver = new org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.CustomResolver ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.CustomResolver ) ; org.springframework.beans.factory.annotation.CustomAutowireConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.TestBean org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.TestBean = ( org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.TestBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.annotation.CustomAutowireConfigurerTests.TestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( BeanDefinitionHolder org.springframework.beans.factory.annotation.BeanDefinitionHolder , DependencyDescriptor org.springframework.beans.factory.annotation.DependencyDescriptor ) { if ( ! org.springframework.beans.factory.annotation.BeanDefinitionHolder . getBeanDefinition ( ) . isAutowireCandidate ( ) ) { return false ; } if ( ! org.springframework.beans.factory.annotation.BeanDefinitionHolder . getBeanName ( ) . matches ( STRING ) ) { return false ; } if ( org.springframework.beans.factory.annotation.BeanDefinitionHolder . getBeanDefinition ( ) . getAttribute ( STRING ) . equals ( STRING ) ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.annotation.DependencyDescriptor ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.annotation.DependencyDescriptor , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
