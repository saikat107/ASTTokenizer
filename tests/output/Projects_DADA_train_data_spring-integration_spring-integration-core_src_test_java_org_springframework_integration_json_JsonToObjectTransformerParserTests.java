<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( this . org.springframework.integration.json.MessageHandler , STRING ) ; assertEquals ( Jackson2JsonObjectMapper .class , TestUtils . getPropertyValue ( java.lang.Object , STRING ) . getClass ( ) ) ; java.lang.String java.lang.String = STRING ; QueueChannel org.springframework.integration.json.QueueChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setReplyChannel ( org.springframework.integration.json.QueueChannel ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertNotNull ( org.springframework.integration.json.Message<> . getPayload ( ) ) ; assertEquals ( TestPerson .class , org.springframework.integration.json.Message<> . getPayload ( ) . getClass ( ) ) ; TestPerson org.springframework.integration.json.TestPerson = ( TestPerson ) org.springframework.integration.json.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getFirstName ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getLastName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.json.TestPerson . getAge ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getAddress ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( this . org.springframework.integration.json.MessageHandler , STRING ) ; assertSame ( this . org.springframework.integration.json.JsonObjectMapper<,> , TestUtils . getPropertyValue ( java.lang.Object , STRING , JsonObjectMapper .class ) ) ; java.lang.String java.lang.String = STRING ; QueueChannel org.springframework.integration.json.QueueChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setReplyChannel ( org.springframework.integration.json.QueueChannel ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertNotNull ( org.springframework.integration.json.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.json.JsonToObjectTransformerParserTests.TestJsonContainer .class , org.springframework.integration.json.Message<> . getPayload ( ) . getClass ( ) ) ; org.springframework.integration.json.JsonToObjectTransformerParserTests.TestJsonContainer org.springframework.integration.json.JsonToObjectTransformerParserTests.TestJsonContainer = ( org.springframework.integration.json.JsonToObjectTransformerParserTests.TestJsonContainer ) org.springframework.integration.json.Message<> . getPayload ( ) ; assertEquals ( java.lang.String , org.springframework.integration.json.JsonToObjectTransformerParserTests.TestJsonContainer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class java.lang.Class ) throws java.lang.Exception { return new org.springframework.integration.json.JsonToObjectTransformerParserTests.TestJsonContainer ( ( java.lang.String ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
