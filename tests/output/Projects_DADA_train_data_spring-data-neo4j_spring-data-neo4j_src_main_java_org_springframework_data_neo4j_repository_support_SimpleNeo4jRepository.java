<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> , Session org.springframework.data.neo4j.repository.support.Session ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . notNull ( org.springframework.data.neo4j.repository.support.Session , STRING ) ; this . java.lang.Class<T> = java.lang.Class<T> ; this . org.springframework.data.neo4j.repository.support.Session = org.springframework.data.neo4j.repository.support.Session ; }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public < S extends T > S S ( S S ) { org.springframework.data.neo4j.repository.support.Session . save ( S ) ; return S ; }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public < S extends T > java.lang.Iterable<S> < S > java.lang.Iterable<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { for ( S S : java.lang.Iterable<S> ) { org.springframework.data.neo4j.repository.support.Session . save ( S ) ; } return java.lang.Iterable<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<T> < T > java.util.Optional<T> ( ID ID ) { Assert . notNull ( ID , java.lang.String ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.neo4j.repository.support.Session . load ( java.lang.Class<T> , ID ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ID ID ) { return java.util.Optional<T> ( ID ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return org.springframework.data.neo4j.repository.support.Session . countEntitiesOfType ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public void void ( ID ID ) { java.util.Optional<T> ( ID ) . void ( org.springframework.data.neo4j.repository.support.Session :: delete ) ; }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public void void ( T T ) { org.springframework.data.neo4j.repository.support.Session . delete ( T ) ; }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public void void ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { for ( T T : java.lang.Iterable<> ) { org.springframework.data.neo4j.repository.support.Session . delete ( T ) ; } }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public void void ( ) { org.springframework.data.neo4j.repository.support.Session . deleteAll ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public < S extends T > S S ( S S , int int ) { org.springframework.data.neo4j.repository.support.Session . save ( S , int ) ; return S ; }  <METHOD_END>
<METHOD_START> @ Transactional @ java.lang.Override public < S extends T > java.lang.Iterable<S> < S > java.lang.Iterable<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> , int int ) { org.springframework.data.neo4j.repository.support.Session . save ( java.lang.Iterable<S> , int ) ; return java.lang.Iterable<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<T> < T > java.util.Optional<T> ( ID ID , int int ) { return java.util.Optional . java.util.Optional ( org.springframework.data.neo4j.repository.support.Session . load ( java.lang.Class<T> , ID , int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( ) { return java.lang.Iterable<T> ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( int int ) { return org.springframework.data.neo4j.repository.support.Session . loadAll ( java.lang.Class<T> , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> ) { return java.lang.Iterable<T> ( java.lang.Iterable<ID> , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> , int int ) { return org.springframework.data.neo4j.repository.support.Session . loadAll ( java.lang.Class<T> , ( java.util.Collection<ID> < ID > ) java.lang.Iterable<ID> , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( Sort org.springframework.data.neo4j.repository.support.Sort ) { return java.lang.Iterable<T> ( org.springframework.data.neo4j.repository.support.Sort , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( Sort org.springframework.data.neo4j.repository.support.Sort , int int ) { return org.springframework.data.neo4j.repository.support.Session . loadAll ( java.lang.Class<T> , PagingAndSortingUtils . convert ( org.springframework.data.neo4j.repository.support.Sort ) , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> , Sort org.springframework.data.neo4j.repository.support.Sort ) { return java.lang.Iterable<T> ( java.lang.Iterable<ID> , org.springframework.data.neo4j.repository.support.Sort , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> , Sort org.springframework.data.neo4j.repository.support.Sort , int int ) { return org.springframework.data.neo4j.repository.support.Session . loadAll ( java.lang.Class<T> , ( java.util.Collection<ID> < ID > ) java.lang.Iterable<ID> , PagingAndSortingUtils . convert ( org.springframework.data.neo4j.repository.support.Sort ) , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.neo4j.repository.support.Page<T> < T > org.springframework.data.neo4j.repository.support.Page<T> ( Pageable org.springframework.data.neo4j.repository.support.Pageable ) { return java.lang.Iterable<T> ( org.springframework.data.neo4j.repository.support.Pageable , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.neo4j.repository.support.Page<T> < T > org.springframework.data.neo4j.repository.support.Page<T> ( Pageable org.springframework.data.neo4j.repository.support.Pageable , int int ) { java.util.Collection<T> < T > java.util.Collection<T> = org.springframework.data.neo4j.repository.support.Session . loadAll ( java.lang.Class<T> , PagingAndSortingUtils . convert ( org.springframework.data.neo4j.repository.support.Pageable . getSort ( ) ) , new Pagination ( org.springframework.data.neo4j.repository.support.Pageable . getPageNumber ( ) , org.springframework.data.neo4j.repository.support.Pageable . getPageSize ( ) ) , int ) ; return org.springframework.data.neo4j.repository.support.Page<T> ( org.springframework.data.neo4j.repository.support.Pageable , new java.util.ArrayList <> ( java.util.Collection<T> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.neo4j.repository.support.Page<T> < T > org.springframework.data.neo4j.repository.support.Page<T> ( Pageable org.springframework.data.neo4j.repository.support.Pageable , java.util.List<T> < T > java.util.List<T> ) { int int = org.springframework.data.neo4j.repository.support.Pageable . getPageSize ( ) ; long long = org.springframework.data.neo4j.repository.support.Pageable . getOffset ( ) ; long long = long + java.util.List<T> . int ( ) + ( java.util.List<T> . int ( ) == int ? int : NUMBER ) ; return new PageImpl < T > ( java.util.List<T> , org.springframework.data.neo4j.repository.support.Pageable , long ) ; }  <METHOD_END>
