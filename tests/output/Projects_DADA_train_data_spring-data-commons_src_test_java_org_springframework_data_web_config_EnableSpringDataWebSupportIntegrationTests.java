<METHOD_START> public @ Bean org.springframework.data.web.config.SampleController org.springframework.data.web.config.SampleController ( ) { return new SampleController ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( java.lang.String ) ; void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.data.web.config.ApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.web.config.ApplicationContext . getBeanDefinitionNames ( ) ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING , STRING ) ; void ( org.springframework.data.web.config.ApplicationContext , SortHandlerMethodArgumentResolver .class , PageableHandlerMethodArgumentResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.data.web.config.ApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.web.config.ApplicationContext . getBeanDefinitionNames ( ) ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING , STRING ) ; void ( org.springframework.data.web.config.ApplicationContext , PagedResourcesAssemblerArgumentResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.lang.String ) ; ApplicationContext org.springframework.data.web.config.ApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.web.config.ApplicationContext . getBeanDefinitionNames ( ) ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING , STRING ) ; assertThat ( java.util.List<java.lang.String> ) . doesNotContain ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.data.web.config.ApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.web.config.ApplicationContext . getBeanDefinitionNames ( ) ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.lang.String ) ; ApplicationContext org.springframework.data.web.config.ApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.web.config.ApplicationContext . getBeanDefinitionNames ( ) ) ; assertThat ( java.util.List<java.lang.String> ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.data.web.config.ApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; ConversionService org.springframework.data.web.config.ConversionService = org.springframework.data.web.config.ApplicationContext . getBean ( ConversionService .class ) ; assertThat ( org.springframework.data.web.config.ConversionService . canConvert ( java.lang.String .class , Distance .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.config.ConversionService . canConvert ( Distance .class , java.lang.String .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.config.ConversionService . canConvert ( java.lang.String .class , Point .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.config.ConversionService . canConvert ( Point .class , java.lang.String .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebApplicationContext org.springframework.data.web.config.WebApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; MockMvc org.springframework.data.web.config.MockMvc = MockMvcBuilders . webAppContextSetup ( org.springframework.data.web.config.WebApplicationContext ) . build ( ) ; UriComponentsBuilder org.springframework.data.web.config.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( STRING ) ; org.springframework.data.web.config.UriComponentsBuilder . queryParam ( STRING , STRING ) ; org.springframework.data.web.config.UriComponentsBuilder . queryParam ( STRING , STRING ) ; org.springframework.data.web.config.UriComponentsBuilder . queryParam ( STRING , STRING ) ; org.springframework.data.web.config.UriComponentsBuilder . queryParam ( STRING , STRING ) ; org.springframework.data.web.config.UriComponentsBuilder . queryParam ( STRING , STRING ) ; org.springframework.data.web.config.UriComponentsBuilder . queryParam ( STRING , STRING ) ; org.springframework.data.web.config.MockMvc . perform ( post ( org.springframework.data.web.config.UriComponentsBuilder . build ( ) . toString ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.data.web.config.ApplicationContext = WebTestUtils . createApplicationContext ( org.springframework.data.web.config.EnableSpringDataWebSupportIntegrationTests.SampleConfig .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.web.config.ApplicationContext . getBeanDefinitionNames ( ) ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ApplicationContext org.springframework.data.web.config.ApplicationContext , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { RequestMappingHandlerAdapter org.springframework.data.web.config.RequestMappingHandlerAdapter = org.springframework.data.web.config.ApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertThat ( org.springframework.data.web.config.RequestMappingHandlerAdapter ) . isNotNull ( ) ; java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> = org.springframework.data.web.config.RequestMappingHandlerAdapter . getCustomArgumentResolvers ( ) ; java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) . void ( java.lang.Class<?> -> assertThat ( java.util.List<org.springframework.data.web.config.HandlerMethodArgumentResolver> ) . hasAtLeastOneElementOfType ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( SpringDataWebConfigurationImportSelector .class , java.lang.String ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , null , false ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( SpringDataWebConfigurationImportSelector .class , java.lang.String ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , null , true ) ; }  <METHOD_END>
