<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method ) { this . java.lang.reflect.Method = java.lang.reflect.Method ; int int = GemfireFunctionUtils . getAnnotationParameterPosition ( java.lang.reflect.Method , RegionData .class , new java.lang.Class [] { java.util.Map .class } ) ; int int = int ( java.lang.reflect.Method , Region .class ) ; if ( int >= NUMBER && int >= NUMBER ) { Assert . isTrue ( int == int , java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ) ; } int = ( int >= NUMBER ? int : ( int >= NUMBER ? int : - NUMBER ) ) ; int = GemfireFunctionUtils . getAnnotationParameterPosition ( java.lang.reflect.Method , Filter .class , new java.lang.Class [] { java.util.Set .class } ) ; if ( int >= NUMBER && int >= NUMBER ) { Assert . state ( int != int , STRING ) ; } int = int ( java.lang.reflect.Method , FunctionContext .class ) ; int = int ( java.lang.reflect.Method , ResultSender .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( FunctionContext org.springframework.data.gemfire.function.FunctionContext ) { java.lang.Object [] java.lang.Object[] = super. resolveFunctionArguments ( org.springframework.data.gemfire.function.FunctionContext ) ; if ( org.springframework.data.gemfire.function.FunctionContext instanceof RegionFunctionContext ) { if ( this . int >= NUMBER ) { java.lang.Object[] = ArrayUtils . insert ( java.lang.Object[] , int , org.springframework.data.gemfire.function.Region<?,?> ( ( RegionFunctionContext ) org.springframework.data.gemfire.function.FunctionContext ) ) ; } if ( this . int >= NUMBER ) { java.lang.Object[] = ArrayUtils . insert ( java.lang.Object[] , int , ( ( RegionFunctionContext ) org.springframework.data.gemfire.function.FunctionContext ) . getFilter ( ) ) ; } } if ( this . int >= NUMBER ) { java.lang.Object[] = ArrayUtils . insert ( java.lang.Object[] , int , org.springframework.data.gemfire.function.FunctionContext ) ; } if ( this . int >= NUMBER ) { java.lang.Object[] = ArrayUtils . insert ( java.lang.Object[] , int , org.springframework.data.gemfire.function.FunctionContext . getResultSender ( ) ) ; } Assert . isTrue ( java.lang.Object[] . int == java.lang.reflect.Method . java.lang.Class<?>[] ( ) . int , java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) . int , java.lang.Object[] . int ) ) ; return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.function.Region<?,?> < ? , ? > org.springframework.data.gemfire.function.Region<?,?> ( RegionFunctionContext org.springframework.data.gemfire.function.RegionFunctionContext ) { Region < ? , ? > org.springframework.data.gemfire.function.Region<?,?> = org.springframework.data.gemfire.function.RegionFunctionContext . getDataSet ( ) ; if ( PartitionRegionHelper . isPartitionedRegion ( org.springframework.data.gemfire.function.Region<,> ) ) { if ( org.springframework.data.gemfire.function.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.function.Log . debug ( STRING ) ; } org.springframework.data.gemfire.function.Region<?,?> = PartitionRegionHelper . getLocalDataForContext ( org.springframework.data.gemfire.function.RegionFunctionContext ) ; } if ( org.springframework.data.gemfire.function.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.function.Log . debug ( STRING + org.springframework.data.gemfire.function.Region<,> . size ( ) + STRING ) ; } return org.springframework.data.gemfire.function.Region<,> ; }  <METHOD_END>
<METHOD_START> private static int int ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { int int = NUMBER ; int int = - NUMBER ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { Assert . state ( int < NUMBER , java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; int = int ; } int ++ ; } return int ; }  <METHOD_END>
