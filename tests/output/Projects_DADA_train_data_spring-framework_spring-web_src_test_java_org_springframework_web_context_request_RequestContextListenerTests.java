<METHOD_START> @ Test public void void ( ) { RequestContextListener org.springframework.web.context.request.RequestContextListener = new RequestContextListener ( ) ; MockServletContext org.springframework.web.context.request.MockServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.context.request.MockServletContext ) ; org.springframework.web.context.request.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; assertNull ( RequestContextHolder . getRequestAttributes ( ) ) ; org.springframework.web.context.request.RequestContextListener . requestInitialized ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; assertNotNull ( RequestContextHolder . getRequestAttributes ( ) ) ; assertEquals ( STRING , RequestContextHolder . getRequestAttributes ( ) . getAttribute ( STRING , RequestAttributes . SCOPE_REQUEST ) ) ; MockRunnable org.springframework.web.context.request.MockRunnable = new MockRunnable ( ) ; RequestContextHolder . getRequestAttributes ( ) . registerDestructionCallback ( STRING , org.springframework.web.context.request.MockRunnable , RequestAttributes . SCOPE_REQUEST ) ; org.springframework.web.context.request.RequestContextListener . requestDestroyed ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; assertNull ( RequestContextHolder . getRequestAttributes ( ) ) ; assertTrue ( org.springframework.web.context.request.MockRunnable . wasExecuted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextListener org.springframework.web.context.request.RequestContextListener = new RequestContextListener ( ) ; MockServletContext org.springframework.web.context.request.MockServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.context.request.MockServletContext ) ; org.springframework.web.context.request.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; assertNull ( RequestContextHolder . getRequestAttributes ( ) ) ; org.springframework.web.context.request.RequestContextListener . requestInitialized ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; assertNotNull ( RequestContextHolder . getRequestAttributes ( ) ) ; assertEquals ( STRING , RequestContextHolder . getRequestAttributes ( ) . getAttribute ( STRING , RequestAttributes . SCOPE_REQUEST ) ) ; MockRunnable org.springframework.web.context.request.MockRunnable = new MockRunnable ( ) ; RequestContextHolder . getRequestAttributes ( ) . registerDestructionCallback ( STRING , org.springframework.web.context.request.MockRunnable , RequestAttributes . SCOPE_REQUEST ) ; org.springframework.web.context.request.MockHttpServletRequest . clearAttributes ( ) ; org.springframework.web.context.request.RequestContextListener . requestDestroyed ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; assertNull ( RequestContextHolder . getRequestAttributes ( ) ) ; assertTrue ( org.springframework.web.context.request.MockRunnable . wasExecuted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final RequestContextListener org.springframework.web.context.request.RequestContextListener = new RequestContextListener ( ) ; final MockServletContext org.springframework.web.context.request.MockServletContext = new MockServletContext ( ) ; final MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.context.request.MockServletContext ) ; org.springframework.web.context.request.MockHttpServletRequest . setAttribute ( STRING , STRING ) ; assertNull ( RequestContextHolder . getRequestAttributes ( ) ) ; org.springframework.web.context.request.RequestContextListener . requestInitialized ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; assertNotNull ( RequestContextHolder . getRequestAttributes ( ) ) ; assertEquals ( STRING , RequestContextHolder . getRequestAttributes ( ) . getAttribute ( STRING , RequestAttributes . SCOPE_REQUEST ) ) ; MockRunnable org.springframework.web.context.request.MockRunnable = new MockRunnable ( ) ; RequestContextHolder . getRequestAttributes ( ) . registerDestructionCallback ( STRING , org.springframework.web.context.request.MockRunnable , RequestAttributes . SCOPE_REQUEST ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { org.springframework.web.context.request.RequestContextListener . requestDestroyed ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; } } ; java.lang.Thread . void ( ) ; try { java.lang.Thread . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {		} assertNotNull ( RequestContextHolder . getRequestAttributes ( ) ) ; assertTrue ( org.springframework.web.context.request.MockRunnable . wasExecuted ( ) ) ; org.springframework.web.context.request.RequestContextListener . requestInitialized ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; org.springframework.web.context.request.RequestContextListener . requestDestroyed ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; assertNull ( RequestContextHolder . getRequestAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.web.context.request.RequestContextListener . requestDestroyed ( new ServletRequestEvent ( org.springframework.web.context.request.MockServletContext , org.springframework.web.context.request.MockHttpServletRequest ) ) ; }  <METHOD_END>
