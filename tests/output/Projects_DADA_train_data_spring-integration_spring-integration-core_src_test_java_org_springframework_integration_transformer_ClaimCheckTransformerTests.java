<METHOD_START> @ Test public void void ( ) { MessageStore org.springframework.integration.transformer.MessageStore = new SimpleMessageStore ( NUMBER ) ; ClaimCheckInTransformer org.springframework.integration.transformer.ClaimCheckInTransformer = new ClaimCheckInTransformer ( org.springframework.integration.transformer.MessageStore ) ; Message < ? > org.springframework.integration.transformer.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.ClaimCheckInTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; assertEquals ( org.springframework.integration.transformer.Message<> . getHeaders ( ) . getId ( ) , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageStore org.springframework.integration.transformer.MessageStore = new SimpleMessageStore ( NUMBER ) ; Message < ? > org.springframework.integration.transformer.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.util.UUID java.util.UUID = org.springframework.integration.transformer.Message<> . getHeaders ( ) . getId ( ) ; org.springframework.integration.transformer.MessageStore . addMessage ( org.springframework.integration.transformer.Message<> ) ; ClaimCheckOutTransformer org.springframework.integration.transformer.ClaimCheckOutTransformer = new ClaimCheckOutTransformer ( org.springframework.integration.transformer.MessageStore ) ; Message < ? > org.springframework.integration.transformer.Message<?> = MessageBuilder . withPayload ( java.util.UUID ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.ClaimCheckOutTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageTransformationException .class ) public void void ( ) { MessageStore org.springframework.integration.transformer.MessageStore = new SimpleMessageStore ( NUMBER ) ; ClaimCheckOutTransformer org.springframework.integration.transformer.ClaimCheckOutTransformer = new ClaimCheckOutTransformer ( org.springframework.integration.transformer.MessageStore ) ; org.springframework.integration.transformer.ClaimCheckOutTransformer . transform ( MessageBuilder . withPayload ( java.util.UUID . java.util.UUID ( ) ) . build ( ) ) ; }  <METHOD_END>
