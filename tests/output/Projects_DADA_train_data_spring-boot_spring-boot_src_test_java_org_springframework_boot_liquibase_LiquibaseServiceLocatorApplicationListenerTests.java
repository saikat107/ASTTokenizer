<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.liquibase.ConfigurableApplicationContext != null ) { this . org.springframework.boot.liquibase.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.liquibase.SpringApplication = new SpringApplication ( org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListenerTests.Conf .class ) ; org.springframework.boot.liquibase.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.liquibase.ConfigurableApplicationContext = org.springframework.boot.liquibase.SpringApplication . run ( ) ; ServiceLocator org.springframework.boot.liquibase.ServiceLocator = ServiceLocator . getInstance ( ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( ServiceLocator .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Field . java.lang.Object ( org.springframework.boot.liquibase.ServiceLocator ) ; assertThat ( java.lang.Object ) . isInstanceOf ( SpringPackageScanClassResolver .class ) ; }  <METHOD_END>
