<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = new TestBean ( ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = new ExtendedServletRequestDataBinder ( org.springframework.web.servlet.mvc.method.annotation.TestBean , STRING ) ; ( ( ServletRequestDataBinder ) org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) . bind ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = new TestBean ( ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = new ExtendedServletRequestDataBinder ( org.springframework.web.servlet.mvc.method.annotation.TestBean , STRING ) ; ( ( ServletRequestDataBinder ) org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) . bind ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = new TestBean ( ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = new ExtendedServletRequestDataBinder ( org.springframework.web.servlet.mvc.method.annotation.TestBean , STRING ) ; ( ( ServletRequestDataBinder ) org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) . bind ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; assertEquals ( null , org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
