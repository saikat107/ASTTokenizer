<METHOD_START> public void ( TemporaryFolder org.springframework.boot.loader.tools.TemporaryFolder ) throws java.io.IOException { this . org.springframework.boot.loader.tools.TemporaryFolder = org.springframework.boot.loader.tools.TemporaryFolder ; this . java.io.File = org.springframework.boot.loader.tools.TemporaryFolder . newFolder ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { void ( java.lang.String , java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Long java.lang.Long )			throws java.io.IOException { java.io.File java.io.File = java.io.File ( java.lang.String ) ; java.io.File . java.io.File ( ) . boolean ( ) ; java.io.InputStream java.io.InputStream = java.lang.Class<? extends org.springframework.boot.loader.tools.TestJarFile> ( ) . java.io.InputStream ( STRING + java.lang.Class<> . java.lang.String ( ) . java.lang.String ( '.' , '/' ) + STRING ) ; void ( java.io.InputStream , java.io.File ) ; if ( java.lang.Long != null ) { java.io.File . boolean ( java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.io.File java.io.File ) throws java.io.IOException { java.io.File java.io.File = java.io.File ( java.lang.String ) ; java.io.File . java.io.File ( ) . boolean ( ) ; java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( java.io.File ) ; try { void ( java.io.InputStream , java.io.File ) ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.jar.Manifest java.util.jar.Manifest ) throws java.io.IOException { java.io.File java.io.File = new java.io.File ( this . java.io.File , STRING ) ; java.io.File . java.io.File ( ) . boolean ( ) ; java.io.OutputStream java.io.OutputStream = new java.io.FileOutputStream ( java.io.File ) ; try { java.util.jar.Manifest . void ( java.io.OutputStream ) ; } finally { java.io.OutputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.io.File java.io.File = this . java.io.File ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; } return java.io.File ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , java.io.File java.io.File )			throws java.io.FileNotFoundException , java.io.IOException { java.io.OutputStream java.io.OutputStream = new java.io.FileOutputStream ( java.io.File ) ; try { void ( java.io.InputStream , java.io.OutputStream ) ; } finally { java.io.OutputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { int int = - NUMBER ; while ( ( int = java.io.InputStream . int ( this . byte[] ) ) != - NUMBER ) { java.io.OutputStream . void ( this . byte[] , NUMBER , int ) ; } }  <METHOD_END>
<METHOD_START> public java.util.jar.JarFile java.util.jar.JarFile ( ) java.io.IOException { return new java.util.jar.JarFile ( java.io.File ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) java.io.IOException { return java.io.File ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( java.lang.String java.lang.String ) throws java.io.IOException { java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; java.io.File = new java.io.File ( java.io.File . java.lang.String ( ) , java.io.File . java.lang.String ( ) + STRING + java.lang.String ) ; ZipUtil . pack ( this . java.io.File , java.io.File ) ; return java.io.File ; }  <METHOD_END>
