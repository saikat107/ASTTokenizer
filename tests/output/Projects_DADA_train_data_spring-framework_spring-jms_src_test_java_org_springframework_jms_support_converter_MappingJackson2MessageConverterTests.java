<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.jms.support.converter.Session = mock ( Session .class ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter = new MappingJackson2MessageConverter ( ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . setEncodingPropertyName ( STRING ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . setTypeIdPropertyName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BytesMessage org.springframework.jms.support.converter.BytesMessage = mock ( BytesMessage .class ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; given ( org.springframework.jms.support.converter.Session . createBytesMessage ( ) ) . willReturn ( org.springframework.jms.support.converter.BytesMessage ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . toMessage ( java.util.Date , org.springframework.jms.support.converter.Session ) ; verify ( org.springframework.jms.support.converter.BytesMessage ) . setStringProperty ( STRING , STRING ) ; verify ( org.springframework.jms.support.converter.BytesMessage ) . setStringProperty ( STRING , java.util.Date .class . java.lang.String ( ) ) ; verify ( org.springframework.jms.support.converter.BytesMessage ) . writeBytes ( isA ( byte [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BytesMessage org.springframework.jms.support.converter.BytesMessage = mock ( BytesMessage .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; byte [] byte[] = STRING . byte[] ( ) ; final java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; given ( org.springframework.jms.support.converter.BytesMessage . getStringProperty ( STRING ) ) . willReturn ( java.lang.Object .class . java.lang.String ( ) ) ; given ( org.springframework.jms.support.converter.BytesMessage . propertyExists ( STRING ) ) . willReturn ( false ) ; given ( org.springframework.jms.support.converter.BytesMessage . getBodyLength ( ) ) . willReturn ( new java.lang.Long ( byte[] . int ) ) ; given ( org.springframework.jms.support.converter.BytesMessage . readBytes ( any ( byte [] .class ) ) ) . willAnswer ( new Answer < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.jms.support.converter.InvocationOnMock ) throws java.lang.Throwable { return java.io.ByteArrayInputStream . int ( ( byte [] ) org.springframework.jms.support.converter.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; } } ) ; java.lang.Object java.lang.Object = org.springframework.jms.support.converter.MappingJackson2MessageConverter . fromMessage ( org.springframework.jms.support.converter.BytesMessage ) ; assertEquals ( STRING , java.lang.Object , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.jms.support.converter.InvocationOnMock ) throws java.lang.Throwable { return java.io.ByteArrayInputStream . int ( ( byte [] ) org.springframework.jms.support.converter.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jms.support.converter.MappingJackson2MessageConverter . setTargetType ( MessageType . TEXT ) ; TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; given ( org.springframework.jms.support.converter.Session . createTextMessage ( isA ( java.lang.String .class ) ) ) . willReturn ( org.springframework.jms.support.converter.TextMessage ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . toMessage ( java.util.Date , org.springframework.jms.support.converter.Session ) ; verify ( org.springframework.jms.support.converter.TextMessage ) . setStringProperty ( STRING , java.util.Date .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jms.support.converter.MappingJackson2MessageConverter . setTargetType ( MessageType . TEXT ) ; TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; given ( org.springframework.jms.support.converter.Session . createTextMessage ( isA ( java.lang.String .class ) ) ) . willReturn ( org.springframework.jms.support.converter.TextMessage ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . toMessage ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.jms.support.converter.Session ) ; verify ( org.springframework.jms.support.converter.TextMessage ) . setStringProperty ( STRING , java.util.HashMap .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean = new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean ( STRING ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.jms.support.converter.TextMessage . getStringProperty ( STRING ) ) . willReturn ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean .class . java.lang.String ( ) ) ; given ( org.springframework.jms.support.converter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean = ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean ) org.springframework.jms.support.converter.MappingJackson2MessageConverter . fromMessage ( org.springframework.jms.support.converter.TextMessage ) ; assertEquals ( STRING , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean = new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean ( STRING ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.jms.support.converter.TextMessage . getStringProperty ( STRING ) ) . willReturn ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean .class . java.lang.String ( ) ) ; given ( org.springframework.jms.support.converter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean = ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean ) org.springframework.jms.support.converter.MappingJackson2MessageConverter . fromMessage ( org.springframework.jms.support.converter.TextMessage ) ; assertEquals ( STRING , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.jms.support.converter.TextMessage . getStringProperty ( STRING ) ) . willReturn ( java.lang.Object .class . java.lang.String ( ) ) ; given ( org.springframework.jms.support.converter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.jms.support.converter.MappingJackson2MessageConverter . fromMessage ( org.springframework.jms.support.converter.TextMessage ) ; assertEquals ( STRING , java.lang.Object , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.jms.support.converter.TextMessage . getStringProperty ( STRING ) ) . willReturn ( java.util.HashMap .class . java.lang.String ( ) ) ; given ( org.springframework.jms.support.converter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.jms.support.converter.MappingJackson2MessageConverter . fromMessage ( org.springframework.jms.support.converter.TextMessage ) ; assertEquals ( STRING , java.lang.Object , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException , java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.Class<? extends org.springframework.jms.support.converter.MappingJackson2MessageConverterTests> ( ) . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.jms.support.converter.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; void ( org.springframework.jms.support.converter.MethodParameter ) ; verify ( org.springframework.jms.support.converter.Session ) . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException , java.lang.NoSuchMethodException { void ( null ) ; verify ( org.springframework.jms.support.converter.Session ) . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException , java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.Class<? extends org.springframework.jms.support.converter.MappingJackson2MessageConverterTests> ( ) . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.jms.support.converter.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; void ( org.springframework.jms.support.converter.MethodParameter ) ; verify ( org.springframework.jms.support.converter.Session ) . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException , java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.Class<? extends org.springframework.jms.support.converter.MappingJackson2MessageConverterTests> ( ) . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.jms.support.converter.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; org.springframework.jms.support.converter.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; void ( org.springframework.jms.support.converter.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.jms.support.converter.MethodParameter ) throws org.springframework.jms.support.converter.JMSException , java.lang.NoSuchMethodException { org.springframework.jms.support.converter.MappingJackson2MessageConverter . setTargetType ( MessageType . TEXT ) ; TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean = new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( STRING , STRING ) ; given ( org.springframework.jms.support.converter.Session . createTextMessage ( isA ( java.lang.String .class ) ) ) . willReturn ( org.springframework.jms.support.converter.TextMessage ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . toMessage ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean , org.springframework.jms.support.converter.Session , org.springframework.jms.support.converter.MethodParameter ) ; verify ( org.springframework.jms.support.converter.TextMessage ) . setStringProperty ( STRING , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException { org.springframework.jms.support.converter.MappingJackson2MessageConverter . setTargetType ( MessageType . TEXT ) ; TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean = new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( STRING , STRING ) ; given ( org.springframework.jms.support.converter.Session . createTextMessage ( isA ( java.lang.String .class ) ) ) . willReturn ( org.springframework.jms.support.converter.TextMessage ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . toMessage ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean , org.springframework.jms.support.converter.Session , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.Summary .class ) ; verify ( org.springframework.jms.support.converter.TextMessage ) . setStringProperty ( STRING , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean .class . java.lang.String ( ) ) ; verify ( org.springframework.jms.support.converter.Session ) . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException { org.springframework.jms.support.converter.MappingJackson2MessageConverter . setTargetType ( MessageType . TEXT ) ; TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean = new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( STRING , STRING ) ; given ( org.springframework.jms.support.converter.Session . createTextMessage ( isA ( java.lang.String .class ) ) ) . willReturn ( org.springframework.jms.support.converter.TextMessage ) ; org.springframework.jms.support.converter.MappingJackson2MessageConverter . toMessage ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean , org.springframework.jms.support.converter.Session , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.Full .class ) ; verify ( org.springframework.jms.support.converter.TextMessage ) . setStringProperty ( STRING , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean .class . java.lang.String ( ) ) ; verify ( org.springframework.jms.support.converter.Session ) . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ JsonView ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.Summary .class ) public org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( ) { return new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( ) { return new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( ) ; }  <METHOD_END>
<METHOD_START> @ JsonView ( { org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.Summary .class , org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.Full .class } ) public org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( ) { return new org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyAnotherBean ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean = ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean ) java.lang.Object ; if ( java.lang.String != null ? ! java.lang.String . boolean ( org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean . java.lang.String ) : org.springframework.jms.support.converter.MappingJackson2MessageConverterTests.MyBean . java.lang.String != null ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String != null ? java.lang.String . int ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> private void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
