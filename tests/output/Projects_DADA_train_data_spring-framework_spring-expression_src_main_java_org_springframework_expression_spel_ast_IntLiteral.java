<METHOD_START> public void ( java.lang.String java.lang.String , int int , int int ) { super( java.lang.String , int ); this . org.springframework.expression.spel.ast.TypedValue = new TypedValue ( int ) ; this . exitTypeDescriptor = STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ) { return this . org.springframework.expression.spel.ast.TypedValue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { int int = ( java.lang.Integer ) this . org.springframework.expression.spel.ast.TypedValue . getValue ( ) ; if ( int == - NUMBER ) { org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( ICONST_M1 ) ; } else if ( int >= NUMBER && int < NUMBER ) { org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( ICONST_0 + int ) ; } else { org.springframework.expression.spel.ast.MethodVisitor . visitLdcInsn ( int ) ; } org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
