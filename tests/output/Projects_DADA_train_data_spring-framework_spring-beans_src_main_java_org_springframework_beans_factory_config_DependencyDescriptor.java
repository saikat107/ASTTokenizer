<METHOD_START> public void ( MethodParameter org.springframework.beans.factory.config.MethodParameter , boolean boolean ) { this( org.springframework.beans.factory.config.MethodParameter , boolean , true ); }  <METHOD_END>
<METHOD_START> public void ( MethodParameter org.springframework.beans.factory.config.MethodParameter , boolean boolean , boolean boolean ) { super( org.springframework.beans.factory.config.MethodParameter ); this . java.lang.Class<?> = org.springframework.beans.factory.config.MethodParameter . getDeclaringClass ( ) ; if ( this . methodParameter . getMethod ( ) != null ) { this . java.lang.String = org.springframework.beans.factory.config.MethodParameter . getMethod ( ) . getName ( ) ; this . java.lang.Class<?>[] = org.springframework.beans.factory.config.MethodParameter . getMethod ( ) . getParameterTypes ( ) ; } else { this . java.lang.Class<?>[] = org.springframework.beans.factory.config.MethodParameter . getConstructor ( ) . getParameterTypes ( ) ; } this . int = org.springframework.beans.factory.config.MethodParameter . getParameterIndex ( ) ; this . java.lang.Class<?> = org.springframework.beans.factory.config.MethodParameter . getContainingClass ( ) ; this . boolean = boolean ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Field java.lang.reflect.Field , boolean boolean ) { this( java.lang.reflect.Field , boolean , true ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Field java.lang.reflect.Field , boolean boolean , boolean boolean ) { super( java.lang.reflect.Field ); this . java.lang.Class<?> = java.lang.reflect.Field . java.lang.Class<?> ( ) ; this . java.lang.String = java.lang.reflect.Field . java.lang.String ( ) ; this . boolean = boolean ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.beans.factory.config.DependencyDescriptor org.springframework.beans.factory.config.DependencyDescriptor ) { super( org.springframework.beans.factory.config.DependencyDescriptor ); this . java.lang.Class<?> = org.springframework.beans.factory.config.DependencyDescriptor . java.lang.Class<> ; this . java.lang.String = org.springframework.beans.factory.config.DependencyDescriptor . java.lang.String ; this . java.lang.Class<?>[] = org.springframework.beans.factory.config.DependencyDescriptor . java.lang.Class<?>[] ; this . int = org.springframework.beans.factory.config.DependencyDescriptor . int ; this . java.lang.String = org.springframework.beans.factory.config.DependencyDescriptor . java.lang.String ; this . java.lang.Class<?> = org.springframework.beans.factory.config.DependencyDescriptor . java.lang.Class<> ; this . boolean = org.springframework.beans.factory.config.DependencyDescriptor . boolean ; this . boolean = org.springframework.beans.factory.config.DependencyDescriptor . boolean ; this . int = org.springframework.beans.factory.config.DependencyDescriptor . int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { if ( ! this . boolean ) { return false ; } if ( this . field != null ) { return ! ( this . field . getType ( ) == java.util.Optional .class || boolean ( ) || ( boolean && org.springframework.beans.factory.config.DependencyDescriptor.KotlinDelegate . boolean ( this . field ) ) ) ; } else { return ! this . methodParameter . isOptional ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : getAnnotations ( ) ) { if ( STRING . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws org.springframework.beans.factory.config.BeansException { throw new NoUniqueBeanDefinitionException ( java.lang.Class<> , java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( BeanFactory org.springframework.beans.factory.config.BeanFactory ) throws org.springframework.beans.factory.config.BeansException { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , BeanFactory org.springframework.beans.factory.config.BeanFactory )			throws org.springframework.beans.factory.config.BeansException { return org.springframework.beans.factory.config.BeanFactory . getBean ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . int ++ ; this . org.springframework.beans.factory.config.ResolvableType = null ; if ( this . methodParameter != null ) { this . methodParameter . increaseNestingLevel ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.beans.factory.config.ResolvableType = null ; if ( this . methodParameter != null ) { GenericTypeResolver . resolveParameterType ( this . methodParameter , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.config.ResolvableType org.springframework.beans.factory.config.ResolvableType ( ) { if ( this . org.springframework.beans.factory.config.ResolvableType == null ) { this . org.springframework.beans.factory.config.ResolvableType = ( this . field != null ? ResolvableType . forField ( this . field , this . int , this . java.lang.Class<> ) : ResolvableType . forMethodParameter ( this . methodParameter ) ) ; } return this . org.springframework.beans.factory.config.ResolvableType ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.config.DependencyDescriptor org.springframework.beans.factory.config.DependencyDescriptor ( ) { return new org.springframework.beans.factory.config.DependencyDescriptor ( this ) { @ java.lang.Override public boolean boolean ( ) { return true ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( ParameterNameDiscoverer org.springframework.beans.factory.config.ParameterNameDiscoverer ) { if ( this . methodParameter != null ) { this . methodParameter . initParameterNameDiscovery ( org.springframework.beans.factory.config.ParameterNameDiscoverer ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . field != null ? this . field . getName ( ) : this . methodParameter . getParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . field != null ) { if ( this . int > NUMBER ) { java.lang.reflect.Type java.lang.reflect.Type = this . field . getGenericType ( ) ; for ( int int = NUMBER ; int <= this . int ; int ++ ) { if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type [] java.lang.reflect.Type[] = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) ; java.lang.reflect.Type = java.lang.reflect.Type[] [ java.lang.reflect.Type[] . int - NUMBER ] ; } } if ( java.lang.reflect.Type instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; } else if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type java.lang.reflect.Type = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) ; if ( java.lang.reflect.Type instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; } } return java.lang.Object .class ; } else { return this . field . getType ( ) ; } } else { return this . methodParameter . getNestedParameterType ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! super. boolean ( java.lang.Object ) ) { return false ; } org.springframework.beans.factory.config.DependencyDescriptor org.springframework.beans.factory.config.DependencyDescriptor = ( org.springframework.beans.factory.config.DependencyDescriptor ) java.lang.Object ; return ( this . boolean == org.springframework.beans.factory.config.DependencyDescriptor . boolean && this . boolean == org.springframework.beans.factory.config.DependencyDescriptor . boolean && this . int == org.springframework.beans.factory.config.DependencyDescriptor . int && this . java.lang.Class<> == org.springframework.beans.factory.config.DependencyDescriptor . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; try { if ( this . java.lang.String != null ) { this . field = this . java.lang.Class<> . java.lang.reflect.Field ( this . java.lang.String ) ; } else { if ( this . java.lang.String != null ) { this . methodParameter = new MethodParameter ( this . java.lang.Class<> . java.lang.reflect.Method ( this . java.lang.String , this . java.lang.Class<?>[] ) , this . int ) ; } else { this . methodParameter = new MethodParameter ( this . java.lang.Class<> . java.lang.reflect.Constructor<> ( this . java.lang.Class<?>[] ) , this . int ) ; } for ( int int = NUMBER ; int < this . int ; int ++ ) { this . methodParameter . increaseNestingLevel ( ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.Field java.lang.reflect.Field ) { if ( java.lang.reflect.Field . java.lang.Class<?> ( ) . boolean ( Metadata .class ) ) { KProperty < ? > org.springframework.beans.factory.config.KProperty<?> = ReflectJvmMapping . getKotlinProperty ( java.lang.reflect.Field ) ; return ( org.springframework.beans.factory.config.KProperty<> != null && org.springframework.beans.factory.config.KProperty<> . getReturnType ( ) . isMarkedNullable ( ) ) ; } return false ; }  <METHOD_END>
