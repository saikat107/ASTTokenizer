<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.solr.core.convert.CustomConversionsTests.StringToNumberConverter> ( org.springframework.data.solr.core.convert.CustomConversionsTests.StringToNumberConverter . org.springframework.data.solr.core.convert.CustomConversionsTests.StringToNumberConverter ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.CustomConversions . hasCustomReadTarget ( java.lang.String .class , java.lang.Number .class ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.convert.CustomConversions . hasCustomReadTarget ( java.util.Date .class , java.lang.Number .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.solr.core.convert.CustomConversionsTests.NumberToStringConverter> ( org.springframework.data.solr.core.convert.CustomConversionsTests.NumberToStringConverter . org.springframework.data.solr.core.convert.CustomConversionsTests.NumberToStringConverter ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.CustomConversions . hasCustomWriteTarget ( java.lang.Number .class , java.lang.String .class ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.convert.CustomConversions . hasCustomWriteTarget ( java.util.Date .class , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.solr.core.convert.CustomConversionsTests.StringToLocaleConverter> ( org.springframework.data.solr.core.convert.CustomConversionsTests.StringToLocaleConverter . org.springframework.data.solr.core.convert.CustomConversionsTests.StringToLocaleConverter ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.CustomConversions . hasCustomReadTarget ( java.lang.String .class , java.util.Locale .class ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.CustomConversions . hasCustomWriteTarget ( java.lang.String .class , java.util.Locale .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.solr.core.convert.CustomConversionsTests.NumberToStringConverter> ( org.springframework.data.solr.core.convert.CustomConversionsTests.NumberToStringConverter . org.springframework.data.solr.core.convert.CustomConversionsTests.NumberToStringConverter ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.CustomConversions . getCustomWriteTarget ( java.lang.Number .class ) , Matchers . is ( Matchers . typeCompatibleWith ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Number java.lang.Number ) { return java.lang.Number . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Number java.lang.Number ( java.lang.String java.lang.String ) { return NumberUtils . parseNumber ( java.lang.String , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( java.lang.String java.lang.String ) { return java.util.Locale . java.util.Locale ; }  <METHOD_END>
