<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { Person .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader == null ? org . springframework . util . ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.cassandra.repository.BeanFactory ) throws org.springframework.data.cassandra.repository.BeansException { this . org.springframework.data.cassandra.repository.BeanFactory = org.springframework.data.cassandra.repository.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { KeyspaceMetadata org.springframework.data.cassandra.repository.KeyspaceMetadata = org.springframework.data.cassandra.repository.Session . getCluster ( ) . getMetadata ( ) . getKeyspace ( org.springframework.data.cassandra.repository.Session . getLoggedKeyspace ( ) ) ; TableMetadata org.springframework.data.cassandra.repository.TableMetadata = org.springframework.data.cassandra.repository.KeyspaceMetadata . getTable ( STRING ) ; if ( org.springframework.data.cassandra.repository.TableMetadata . getIndex ( STRING ) == null ) { org.springframework.data.cassandra.repository.Session . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; } org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryFactory = new ReactiveCassandraRepositoryFactory ( org.springframework.data.cassandra.repository.ReactiveCassandraOperations ) ; org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryFactory . setRepositoryBaseClass ( SimpleReactiveCassandraRepository .class ) ; org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryFactory . setBeanClassLoader ( java.lang.ClassLoader ) ; org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryFactory . setBeanFactory ( org.springframework.data.cassandra.repository.BeanFactory ) ; org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryFactory . setEvaluationContextProvider ( DefaultEvaluationContextProvider . INSTANCE ) ; org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository = org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryFactory . getRepository ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository .class ) ; org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.GroupRepository = org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryFactory . getRepository ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.GroupRepository .class ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository . deleteAll ( ) . concatWith ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.GroupRepository . deleteAll ( ) ) ) . verifyComplete ( ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.Person , org.springframework.data.cassandra.repository.Person , org.springframework.data.cassandra.repository.Person , org.springframework.data.cassandra.repository.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository . org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository . org.springframework.data.cassandra.repository.Mono<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) . expectNext ( org.springframework.data.cassandra.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository . org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Person> ( Mono . just ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) ) . expectNext ( org.springframework.data.cassandra.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.PersonRepository . org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Person> ( Mono . just ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GroupKey org.springframework.data.cassandra.repository.GroupKey = new GroupKey ( STRING , STRING , STRING ) ; GroupKey org.springframework.data.cassandra.repository.GroupKey = new GroupKey ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.GroupRepository . save ( Flux . just ( new Group ( org.springframework.data.cassandra.repository.GroupKey ) , new Group ( org.springframework.data.cassandra.repository.GroupKey ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.GroupRepository . org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Group> ( STRING , STRING , new Sort ( Direction . ASC , STRING ) ) ) . expectNext ( new Group ( org.springframework.data.cassandra.repository.GroupKey ) , new Group ( org.springframework.data.cassandra.repository.GroupKey ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.ReactiveCassandraRepositoryIntegrationTests.GroupRepository . org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Group> ( STRING , STRING , new Sort ( Direction . DESC , STRING ) ) ) . expectNext ( new Group ( org.springframework.data.cassandra.repository.GroupKey ) , new Group ( org.springframework.data.cassandra.repository.GroupKey ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Mono<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Mono<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Mono<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Mono<org.springframework.data.cassandra.repository.Person> ( Publisher < java.lang.String > org.springframework.data.cassandra.repository.Publisher<java.lang.String> );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Person> ( Mono < java.lang.String > org.springframework.data.cassandra.repository.Mono<java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Group> < Group > org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.Group> ( java.lang.String java.lang.String , java.lang.String java.lang.String , Sort org.springframework.data.cassandra.repository.Sort );  <METHOD_END>
