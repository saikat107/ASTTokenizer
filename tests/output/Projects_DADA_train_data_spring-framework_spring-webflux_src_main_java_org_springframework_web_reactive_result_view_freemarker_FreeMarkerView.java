<METHOD_START> public void void ( Configuration org.springframework.web.reactive.result.view.freemarker.Configuration ) { this . org.springframework.web.reactive.result.view.freemarker.Configuration = org.springframework.web.reactive.result.view.freemarker.Configuration ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.view.freemarker.Configuration org.springframework.web.reactive.result.view.freemarker.Configuration ( ) { return this . org.springframework.web.reactive.result.view.freemarker.Configuration ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; if ( org.springframework.web.reactive.result.view.freemarker.Configuration ( ) == null ) { FreeMarkerConfig org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfig = org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfig ( ) ; void ( org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfig . getConfiguration ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfig org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfig ( ) org.springframework.web.reactive.result.view.freemarker.BeansException { try { return BeanFactoryUtils . beanOfTypeIncludingAncestors ( getApplicationContext ( ) , FreeMarkerConfig .class , true , false ) ; } catch ( NoSuchBeanDefinitionException org.springframework.web.reactive.result.view.freemarker.NoSuchBeanDefinitionException ) { throw new ApplicationContextException ( STRING + STRING + STRING , org.springframework.web.reactive.result.view.freemarker.NoSuchBeanDefinitionException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Locale java.util.Locale ) throws java.lang.Exception { try { org.springframework.web.reactive.result.view.freemarker.Template ( java.util.Locale ) ; return true ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getUrl ( ) ) ; } return false ; } catch ( ParseException org.springframework.web.reactive.result.view.freemarker.ParseException ) { throw new ApplicationContextException ( STRING + getUrl ( ) + STRING , org.springframework.web.reactive.result.view.freemarker.ParseException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new ApplicationContextException ( STRING + getUrl ( ) + STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.view.freemarker.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.view.freemarker.Mono<java.lang.Void> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , MediaType org.springframework.web.reactive.result.view.freemarker.MediaType , ServerWebExchange org.springframework.web.reactive.result.view.freemarker.ServerWebExchange ) { SimpleHash org.springframework.web.reactive.result.view.freemarker.SimpleHash = org.springframework.web.reactive.result.view.freemarker.SimpleHash ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.reactive.result.view.freemarker.ServerWebExchange ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getUrl ( ) + STRING ) ; } java.util.Locale java.util.Locale = org.springframework.web.reactive.result.view.freemarker.ServerWebExchange . getRequest ( ) . getHeaders ( ) . getAcceptLanguageAsLocale ( ) ; java.util.Locale java.util.Locale = java.util.Locale != null ? java.util.Locale : java.util.Locale . java.util.Locale ( ) ; DataBuffer org.springframework.web.reactive.result.view.freemarker.DataBuffer = org.springframework.web.reactive.result.view.freemarker.ServerWebExchange . getResponse ( ) . bufferFactory ( ) . allocateBuffer ( ) ; try { java.nio.charset.Charset java.nio.charset.Charset = java.util.Optional<java.nio.charset.Charset> ( org.springframework.web.reactive.result.view.freemarker.MediaType ) . orElse ( getDefaultCharset ( ) ) ; java.io.Writer java.io.Writer = new java.io.OutputStreamWriter ( org.springframework.web.reactive.result.view.freemarker.DataBuffer . asOutputStream ( ) , java.nio.charset.Charset ) ; org.springframework.web.reactive.result.view.freemarker.Template ( java.util.Locale ) . process ( org.springframework.web.reactive.result.view.freemarker.SimpleHash , java.io.Writer ) ; } catch ( java.io.IOException java.io.IOException ) { java.lang.String java.lang.String = STRING + getUrl ( ) + STRING ; return Mono . error ( new java.lang.IllegalStateException ( java.lang.String , java.io.IOException ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return Mono . error ( java.lang.Throwable ) ; } return org.springframework.web.reactive.result.view.freemarker.ServerWebExchange . getResponse ( ) . writeWith ( Flux . just ( org.springframework.web.reactive.result.view.freemarker.DataBuffer ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.Optional<java.nio.charset.Charset> ( MediaType org.springframework.web.reactive.result.view.freemarker.MediaType ) { return ( org.springframework.web.reactive.result.view.freemarker.MediaType != null ? java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.view.freemarker.MediaType . getCharset ( ) ) : java.util.Optional . java.util.Optional<java.nio.charset.Charset> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.view.freemarker.SimpleHash org.springframework.web.reactive.result.view.freemarker.SimpleHash ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ServerWebExchange org.springframework.web.reactive.result.view.freemarker.ServerWebExchange ) { SimpleHash org.springframework.web.reactive.result.view.freemarker.SimpleHash = new SimpleHash ( org.springframework.web.reactive.result.view.freemarker.ObjectWrapper ( ) ) ; org.springframework.web.reactive.result.view.freemarker.SimpleHash . putAll ( java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.web.reactive.result.view.freemarker.SimpleHash ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.view.freemarker.ObjectWrapper org.springframework.web.reactive.result.view.freemarker.ObjectWrapper ( ) { ObjectWrapper org.springframework.web.reactive.result.view.freemarker.ObjectWrapper = org.springframework.web.reactive.result.view.freemarker.Configuration ( ) . getObjectWrapper ( ) ; Version org.springframework.web.reactive.result.view.freemarker.Version = Configuration . DEFAULT_INCOMPATIBLE_IMPROVEMENTS ; return ( org.springframework.web.reactive.result.view.freemarker.ObjectWrapper != null ? org.springframework.web.reactive.result.view.freemarker.ObjectWrapper : new DefaultObjectWrapperBuilder ( org.springframework.web.reactive.result.view.freemarker.Version ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.view.freemarker.Template org.springframework.web.reactive.result.view.freemarker.Template ( java.util.Locale java.util.Locale ) throws java.io.IOException { return ( java.lang.String ( ) != null ? org.springframework.web.reactive.result.view.freemarker.Configuration ( ) . getTemplate ( getUrl ( ) , java.util.Locale , java.lang.String ( ) ) : org.springframework.web.reactive.result.view.freemarker.Configuration ( ) . getTemplate ( getUrl ( ) , java.util.Locale ) ) ; }  <METHOD_END>
