<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , ( java.lang.ClassLoader ) null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.String , STRING ) ; java.lang.String java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } this . java.lang.String = java.lang.String ; this . java.lang.ClassLoader = ( java.lang.ClassLoader != null ? java.lang.ClassLoader : ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> protected void ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public final java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public final java.lang.ClassLoader java.lang.ClassLoader ( ) { return ( this . java.lang.Class<> != null ? this . java.lang.Class<> . java.lang.ClassLoader ( ) : this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( java.net.URL ( ) != null ) ; }  <METHOD_END>
<METHOD_START> protected java.net.URL java.net.URL ( ) { if ( this . java.lang.Class<> != null ) { return this . java.lang.Class<> . java.net.URL ( this . java.lang.String ) ; } else if ( this . java.lang.ClassLoader != null ) { return this . java.lang.ClassLoader . java.net.URL ( this . java.lang.String ) ; } else { return java.lang.ClassLoader . java.net.URL ( this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { java.io.InputStream java.io.InputStream ; if ( this . java.lang.Class<> != null ) { java.io.InputStream = this . java.lang.Class<> . java.io.InputStream ( this . java.lang.String ) ; } else if ( this . java.lang.ClassLoader != null ) { java.io.InputStream = this . java.lang.ClassLoader . java.io.InputStream ( this . java.lang.String ) ; } else { java.io.InputStream = java.lang.ClassLoader . java.io.InputStream ( this . java.lang.String ) ; } if ( java.io.InputStream == null ) { throw new java.io.FileNotFoundException ( java.lang.String ( ) + STRING ) ; } return java.io.InputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( ) java.io.IOException { java.net.URL java.net.URL = java.net.URL ( ) ; if ( java.net.URL == null ) { throw new java.io.FileNotFoundException ( java.lang.String ( ) + STRING ) ; } return java.net.URL ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.Resource org.springframework.core.io.Resource ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = StringUtils . applyRelativePath ( this . java.lang.String , java.lang.String ) ; return new org.springframework.core.io.ClassPathResource ( java.lang.String , this . java.lang.ClassLoader , this . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return StringUtils . getFilename ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; java.lang.String java.lang.String = java.lang.String ; if ( this . java.lang.Class<> != null && ! java.lang.String . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ClassUtils . classPackageAsResourcePath ( this . java.lang.Class<> ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '/' ) ; } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ']' ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( java.lang.Object instanceof org.springframework.core.io.ClassPathResource ) { org.springframework.core.io.ClassPathResource org.springframework.core.io.ClassPathResource = ( org.springframework.core.io.ClassPathResource ) java.lang.Object ; return ( this . java.lang.String . boolean ( org.springframework.core.io.ClassPathResource . java.lang.String ) && ObjectUtils . nullSafeEquals ( this . java.lang.ClassLoader , org.springframework.core.io.ClassPathResource . java.lang.ClassLoader ) && ObjectUtils . nullSafeEquals ( this . java.lang.Class<> , org.springframework.core.io.ClassPathResource . java.lang.Class<> ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
