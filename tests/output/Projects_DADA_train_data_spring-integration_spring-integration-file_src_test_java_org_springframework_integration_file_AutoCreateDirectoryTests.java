<METHOD_START> @ Before @ After public void void ( ) { java.io.File java.io.File = new java.io.File ( java.lang.String ) ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FileReadingMessageSource org.springframework.integration.file.FileReadingMessageSource = new FileReadingMessageSource ( ) ; org.springframework.integration.file.FileReadingMessageSource . setDirectory ( new java.io.File ( java.lang.String ) ) ; org.springframework.integration.file.FileReadingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.FileReadingMessageSource . afterPropertiesSet ( ) ; assertTrue ( new java.io.File ( java.lang.String ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { FileReadingMessageSource org.springframework.integration.file.FileReadingMessageSource = new FileReadingMessageSource ( ) ; org.springframework.integration.file.FileReadingMessageSource . setDirectory ( new java.io.File ( java.lang.String ) ) ; org.springframework.integration.file.FileReadingMessageSource . setAutoCreateDirectory ( false ) ; org.springframework.integration.file.FileReadingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.FileReadingMessageSource . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FileWritingMessageHandler org.springframework.integration.file.FileWritingMessageHandler = new FileWritingMessageHandler ( new java.io.File ( java.lang.String ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.FileWritingMessageHandler . afterPropertiesSet ( ) ; assertTrue ( new java.io.File ( java.lang.String ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { FileWritingMessageHandler org.springframework.integration.file.FileWritingMessageHandler = new FileWritingMessageHandler ( new java.io.File ( java.lang.String ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.FileWritingMessageHandler . setAutoCreateDirectory ( false ) ; org.springframework.integration.file.FileWritingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
