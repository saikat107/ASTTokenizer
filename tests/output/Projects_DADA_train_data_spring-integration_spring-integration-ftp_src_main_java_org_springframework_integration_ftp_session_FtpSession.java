<METHOD_START> public void ( FTPClient org.springframework.integration.ftp.session.FTPClient ) { Assert . notNull ( org.springframework.integration.ftp.session.FTPClient , STRING ) ; this . org.springframework.integration.ftp.session.FTPClient = org.springframework.integration.ftp.session.FTPClient ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { Assert . hasText ( java.lang.String , STRING ) ; if ( ! this . org.springframework.integration.ftp.session.FTPClient . deleteFile ( java.lang.String ) ) { throw new java.io.IOException ( STRING + java.lang.String + STRING + this . org.springframework.integration.ftp.session.FTPClient . getReplyString ( ) ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ftp.session.FTPFile [] org.springframework.integration.ftp.session.FTPFile[] ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.ftp.session.FTPClient . listFiles ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.ftp.session.FTPClient . listNames ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.io.OutputStream , STRING ) ; boolean boolean = this . org.springframework.integration.ftp.session.FTPClient . retrieveFile ( java.lang.String , java.io.OutputStream ) ; if ( ! boolean ) { throw new java.io.IOException ( STRING + java.lang.String + STRING + this . org.springframework.integration.ftp.session.FTPClient . getReplyString ( ) ) ; } this . org.springframework.integration.ftp.session.Log . info ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.io.IOException { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { throw new java.io.IOException ( STRING ) ; } java.io.InputStream java.io.InputStream = this . org.springframework.integration.ftp.session.FTPClient . retrieveFileStream ( java.lang.String ) ; if ( java.io.InputStream == null ) { throw new java.io.IOException ( STRING + java.lang.String + STRING + this . org.springframework.integration.ftp.session.FTPClient . getReplyCode ( ) ) ; } return java.io.InputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) java.io.IOException { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true , false ) ) { throw new java.io.IOException ( STRING ) ; } if ( this . org.springframework.integration.ftp.session.FTPClient . completePendingCommand ( ) ) { int int = this . org.springframework.integration.ftp.session.FTPClient . getReplyCode ( ) ; if ( this . org.springframework.integration.ftp.session.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.ftp.session.Log . debug ( this + STRING + int ) ; } return FTPReply . isPositiveCompletion ( int ) ; } throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException { Assert . notNull ( java.io.InputStream , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; boolean boolean = this . org.springframework.integration.ftp.session.FTPClient . storeFile ( java.lang.String , java.io.InputStream ) ; if ( ! boolean ) { throw new java.io.IOException ( STRING + java.lang.String + STRING + this . org.springframework.integration.ftp.session.FTPClient . getReplyString ( ) ) ; } if ( this . org.springframework.integration.ftp.session.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.ftp.session.Log . info ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException { Assert . notNull ( java.io.InputStream , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; boolean boolean = this . org.springframework.integration.ftp.session.FTPClient . appendFile ( java.lang.String , java.io.InputStream ) ; if ( ! boolean ) { throw new java.io.IOException ( STRING + java.lang.String + STRING + this . org.springframework.integration.ftp.session.FTPClient . getReplyString ( ) ) ; } if ( this . org.springframework.integration.ftp.session.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.ftp.session.Log . info ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { if ( ! boolean ( ) ) { if ( this . org.springframework.integration.ftp.session.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.ftp.session.Log . warn ( STRING + this ) ; } } } this . org.springframework.integration.ftp.session.FTPClient . disconnect ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( this . org.springframework.integration.ftp.session.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.ftp.session.Log . warn ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { try { this . org.springframework.integration.ftp.session.FTPClient . noop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { this . org.springframework.integration.ftp.session.FTPClient . deleteFile ( java.lang.String ) ; boolean boolean = this . org.springframework.integration.ftp.session.FTPClient . rename ( java.lang.String , java.lang.String ) ; if ( ! boolean ) { throw new java.io.IOException ( STRING + java.lang.String + STRING + java.lang.String + STRING + this . org.springframework.integration.ftp.session.FTPClient . getReplyString ( ) ) ; } if ( this . org.springframework.integration.ftp.session.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.ftp.session.Log . info ( STRING + java.lang.String + STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.ftp.session.FTPClient . makeDirectory ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.ftp.session.FTPClient . removeDirectory ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { Assert . hasText ( java.lang.String , STRING ) ; java.lang.String [] java.lang.String[] = this . org.springframework.integration.ftp.session.FTPClient . listNames ( java.lang.String ) ; boolean boolean = ! ObjectUtils . isEmpty ( java.lang.String[] ) ; if ( ! boolean ) { java.lang.String java.lang.String = this . org.springframework.integration.ftp.session.FTPClient . printWorkingDirectory ( ) ; Assert . state ( java.lang.String != null , STRING ) ; try { boolean = this . org.springframework.integration.ftp.session.FTPClient . changeWorkingDirectory ( java.lang.String ) ; } finally { this . org.springframework.integration.ftp.session.FTPClient . changeWorkingDirectory ( java.lang.String ) ; } } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ftp.session.FTPClient org.springframework.integration.ftp.session.FTPClient ( ) { return this . org.springframework.integration.ftp.session.FTPClient ; }  <METHOD_END>
