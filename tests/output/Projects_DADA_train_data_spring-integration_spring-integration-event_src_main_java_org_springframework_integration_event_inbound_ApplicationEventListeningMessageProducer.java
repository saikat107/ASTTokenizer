<METHOD_START> public void ( ) { setPhase ( java.lang.Integer . int / NUMBER - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.Class<?>[] , STRING ) ; java.util.Set<org.springframework.integration.event.inbound.ResolvableType> < ResolvableType > java.util.Set<org.springframework.integration.event.inbound.ResolvableType> = new java.util.HashSet<org.springframework.integration.event.inbound.ResolvableType> < ResolvableType > ( java.lang.Class<?>[] . int ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.Class<> != null ) { java.util.Set<org.springframework.integration.event.inbound.ResolvableType> . add ( ResolvableType . forClass ( java.lang.Class<> ) ) ; } } this . java.util.Set<org.springframework.integration.event.inbound.ResolvableType> = ( java.util.Set<org.springframework.integration.event.inbound.ResolvableType> . size ( ) > NUMBER ? java.util.Set<org.springframework.integration.event.inbound.ResolvableType> : null ) ; if ( this . org.springframework.integration.event.inbound.ApplicationEventMulticaster != null ) { this . org.springframework.integration.event.inbound.ApplicationEventMulticaster . addApplicationListener ( this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onInit ( ) ; this . org.springframework.integration.event.inbound.ApplicationEventMulticaster = this . getBeanFactory ( ) . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME , ApplicationEventMulticaster .class ) ; Assert . notNull ( this . org.springframework.integration.event.inbound.ApplicationEventMulticaster , STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.event.inbound.ApplicationEvent ) { if ( this . boolean || ( ( org.springframework.integration.event.inbound.ApplicationEvent instanceof ContextStoppedEvent || org.springframework.integration.event.inbound.ApplicationEvent instanceof ContextClosedEvent ) && this . boolean ( ) ) ) { if ( org.springframework.integration.event.inbound.ApplicationEvent . getSource ( ) instanceof Message < ? > ) { this . sendMessage ( ( Message < ? > ) org.springframework.integration.event.inbound.ApplicationEvent . getSource ( ) ) ; } else { Message < ? > org.springframework.integration.event.inbound.Message<?> = null ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.integration.event.inbound.ApplicationEvent ) ; if ( java.lang.Object instanceof Message ) { org.springframework.integration.event.inbound.Message<?> = ( Message < ? > ) java.lang.Object ; } else { org.springframework.integration.event.inbound.Message<?> = this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . build ( ) ; } this . sendMessage ( org.springframework.integration.event.inbound.Message<> ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof PayloadApplicationEvent ) { return ( ( PayloadApplicationEvent < ? > ) java.lang.Object ) . getPayload ( ) ; } return evaluatePayloadExpression ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . long > java.lang.System . long ( ) - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.integration.event.inbound.ResolvableType ) { if ( this . java.util.Set<org.springframework.integration.event.inbound.ResolvableType> == null ) { return true ; } for ( ResolvableType org.springframework.integration.event.inbound.ResolvableType : this . java.util.Set<org.springframework.integration.event.inbound.ResolvableType> ) { if ( org.springframework.integration.event.inbound.ResolvableType . isAssignableFrom ( org.springframework.integration.event.inbound.ResolvableType ) ) { return true ; } } if ( org.springframework.integration.event.inbound.ResolvableType . getRawClass ( ) != null && PayloadApplicationEvent .class . boolean ( org.springframework.integration.event.inbound.ResolvableType . getRawClass ( ) ) ) { if ( org.springframework.integration.event.inbound.ResolvableType . hasUnresolvableGenerics ( ) ) { return true ; } ResolvableType org.springframework.integration.event.inbound.ResolvableType = org.springframework.integration.event.inbound.ResolvableType . as ( PayloadApplicationEvent .class ) . getGeneric ( ) ; for ( ResolvableType org.springframework.integration.event.inbound.ResolvableType : this . java.util.Set<org.springframework.integration.event.inbound.ResolvableType> ) { if ( org.springframework.integration.event.inbound.ResolvableType . isAssignableFrom ( org.springframework.integration.event.inbound.ResolvableType ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . LOWEST_PRECEDENCE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . long = java.lang.System . long ( ) ; this . boolean = false ; }  <METHOD_END>
