<METHOD_START> @ Before public void void ( ) java.lang.Exception { session . execute ( STRING ) ; session . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { session . execute ( STRING + STRING ) ; AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification = AlterTableSpecification . alterTable ( STRING ) . alter ( STRING , DataType . varint ( ) ) ; void ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) ; ColumnMetadata org.springframework.cassandra.core.cql.generator.ColumnMetadata = org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getColumn ( STRING ) ; assertThat ( org.springframework.cassandra.core.cql.generator.ColumnMetadata . getType ( ) ) . isEqualTo ( DataType . varint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { session . execute ( STRING + STRING ) ; AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification = AlterTableSpecification . alterTable ( STRING ) . alter ( STRING , DataType . list ( DataType . varchar ( ) ) ) ; void ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) ; ColumnMetadata org.springframework.cassandra.core.cql.generator.ColumnMetadata = org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getColumn ( STRING ) ; assertThat ( org.springframework.cassandra.core.cql.generator.ColumnMetadata . getType ( ) ) . isEqualTo ( ( DataType ) DataType . list ( DataType . varchar ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { session . execute ( STRING + STRING ) ; AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification = AlterTableSpecification . alterTable ( STRING ) . add ( STRING , DataType . varchar ( ) ) ; void ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) ; ColumnMetadata org.springframework.cassandra.core.cql.generator.ColumnMetadata = org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getColumn ( STRING ) ; assertThat ( org.springframework.cassandra.core.cql.generator.ColumnMetadata . getType ( ) ) . isEqualTo ( DataType . varchar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { session . execute ( STRING ) ; AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification = AlterTableSpecification . alterTable ( STRING ) . add ( STRING , DataType . list ( DataType . ascii ( ) ) ) ; void ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) ; ColumnMetadata org.springframework.cassandra.core.cql.generator.ColumnMetadata = org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getColumn ( STRING ) ; assertThat ( org.springframework.cassandra.core.cql.generator.ColumnMetadata . getType ( ) ) . isEqualTo ( ( DataType ) DataType . list ( DataType . ascii ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { session . execute ( STRING ) ; AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification = AlterTableSpecification . alterTable ( STRING ) . drop ( STRING ) ; void ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) ; assertThat ( org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getColumn ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { session . execute ( STRING ) ; AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification = AlterTableSpecification . alterTable ( STRING ) . rename ( STRING , STRING ) ; void ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) ; assertThat ( org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getColumn ( STRING ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getColumn ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { session . execute ( STRING ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> <> ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( CachingOption . KEYS , KeyCachingOption . NONE ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( CachingOption . ROWS_PER_PARTITION , STRING ) ; AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification = AlterTableSpecification . alterTable ( STRING ) . with ( TableOption . CACHING , java.util.Map<java.lang.Object,java.lang.Object> ) ; void ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) ; assertThat ( org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getOptions ( ) . getCaching ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.cassandra.core.cql.generator.TableMetadata ( STRING ) . getOptions ( ) . getCaching ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) { session . execute ( new AlterTableCqlGenerator ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) . toCql ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.core.cql.generator.TableMetadata org.springframework.cassandra.core.cql.generator.TableMetadata ( java.lang.String java.lang.String ) { KeyspaceMetadata org.springframework.cassandra.core.cql.generator.KeyspaceMetadata = session . getCluster ( ) . getMetadata ( ) . getKeyspace ( session . getLoggedKeyspace ( ) ) ; return org.springframework.cassandra.core.cql.generator.KeyspaceMetadata . getTable ( java.lang.String ) ; }  <METHOD_END>
