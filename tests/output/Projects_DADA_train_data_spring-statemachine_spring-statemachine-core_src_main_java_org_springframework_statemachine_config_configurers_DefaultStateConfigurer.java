<METHOD_START> @ java.lang.Override public void void ( StateMachineStateBuilder < S , E > org.springframework.statemachine.config.configurers.StateMachineStateBuilder<S,E> ) throws java.lang.Exception { java.util.Collection<org.springframework.statemachine.config.configurers.StateData<S,E>> < StateData < S , E > > java.util.Collection<org.springframework.statemachine.config.configurers.StateData<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.configurers.StateData<S,E>> < StateData < S , E > > ( ) ; for ( StateData < S , E > org.springframework.statemachine.config.configurers.StateData<S,E> : java.util.Map<S,org.springframework.statemachine.config.configurers.StateData<S,E>> . values ( ) ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setParent ( java.lang.Object ) ; java.util.Collection<org.springframework.statemachine.config.configurers.StateData<S,E>> . add ( org.springframework.statemachine.config.configurers.StateData<S,E> ) ; if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) == S ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setInitial ( true ) ; org.springframework.statemachine.config.configurers.StateData<S,E> . setInitialAction ( org.springframework.statemachine.config.configurers.Action<S,E> ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) == S ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setEnd ( true ) ; } if ( java.util.Collection<S> . boolean ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . CHOICE ) ; } else if ( java.util.Collection<S> . boolean ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . JUNCTION ) ; } else if ( java.util.Collection<S> . boolean ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . FORK ) ; } else if ( java.util.Collection<S> . boolean ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . JOIN ) ; } else if ( java.util.Collection<S> . boolean ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . ENTRY ) ; } else if ( java.util.Collection<S> . boolean ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . EXIT ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) == S ) { if ( History . SHALLOW == org.springframework.statemachine.config.configurers.History ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . HISTORY_SHALLOW ) ; } else if ( History . DEEP == org.springframework.statemachine.config.configurers.History ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setPseudoStateKind ( PseudoStateKind . HISTORY_DEEP ) ; } } org.springframework.statemachine.config.configurers.StateData<S,E> . setSubmachine ( java.util.Map<S,org.springframework.statemachine.config.configurers.StateMachine<S,E>> . get ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) ; org.springframework.statemachine.config.configurers.StateData<S,E> . setSubmachineFactory ( java.util.Map<S,org.springframework.statemachine.config.configurers.StateMachineFactory<S,E>> . get ( org.springframework.statemachine.config.configurers.StateData<S,E> . getState ( ) ) ) ; } org.springframework.statemachine.config.configurers.StateMachineStateBuilder<S,E> . addStateData ( java.util.Collection<org.springframework.statemachine.config.configurers.StateData<S,E>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { this . S = S ; org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { this . org.springframework.statemachine.config.configurers.Action<S,E> = org.springframework.statemachine.config.configurers.Action<S,E> ; return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { this . java.lang.Object = S ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { this . S = S ; org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , ( E [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , StateMachine < S , E > org.springframework.statemachine.config.configurers.StateMachine<S,E> ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Map<S,org.springframework.statemachine.config.configurers.StateMachine<S,E>> . put ( S , org.springframework.statemachine.config.configurers.StateMachine<S,E> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , StateMachineFactory < S , E > org.springframework.statemachine.config.configurers.StateMachineFactory<S,E> ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Map<S,org.springframework.statemachine.config.configurers.StateMachineFactory<S,E>> . put ( S , org.springframework.statemachine.config.configurers.StateMachineFactory<S,E> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> ) { void ( null , S , null , null , null , java.util.Collection<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = null ; if ( org.springframework.statemachine.config.configurers.Action<S,E> != null ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > ( NUMBER ) ; java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> . add ( org.springframework.statemachine.config.configurers.Action<S,E> ) ; } return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , org.springframework.statemachine.config.configurers.Action<S,E> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = null ; if ( org.springframework.statemachine.config.configurers.Action<S,E> != null ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > ( NUMBER ) ; java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> . add ( org.springframework.statemachine.config.configurers.Action<S,E> != null ? Actions . errorCallingAction ( org.springframework.statemachine.config.configurers.Action<S,E> , org.springframework.statemachine.config.configurers.Action<S,E> ) : org.springframework.statemachine.config.configurers.Action<S,E> ) ; } return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> ) { void ( null , S , null , java.util.Collection<> , java.util.Collection<> , null ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = null ; if ( org.springframework.statemachine.config.configurers.Action<S,E> != null ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > ( NUMBER ) ; java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> . add ( org.springframework.statemachine.config.configurers.Action<S,E> ) ; } java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = null ; if ( org.springframework.statemachine.config.configurers.Action<S,E> != null ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > ( NUMBER ) ; java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> . add ( org.springframework.statemachine.config.configurers.Action<S,E> ) ; } return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> , java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , org.springframework.statemachine.config.configurers.Action<S,E> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = null ; if ( org.springframework.statemachine.config.configurers.Action<S,E> != null ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > ( NUMBER ) ; java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> . add ( org.springframework.statemachine.config.configurers.Action<S,E> != null ? Actions . errorCallingAction ( org.springframework.statemachine.config.configurers.Action<S,E> , org.springframework.statemachine.config.configurers.Action<S,E> ) : org.springframework.statemachine.config.configurers.Action<S,E> ) ; } return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , null , org.springframework.statemachine.config.configurers.Action<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> , Action < S , E > org.springframework.statemachine.config.configurers.Action<S,E> ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = null ; if ( org.springframework.statemachine.config.configurers.Action<S,E> != null ) { java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> = new java.util.ArrayList<org.springframework.statemachine.config.configurers.Action<S,E>> < Action < S , E > > ( NUMBER ) ; java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> . add ( org.springframework.statemachine.config.configurers.Action<S,E> != null ? Actions . errorCallingAction ( org.springframework.statemachine.config.configurers.Action<S,E> , org.springframework.statemachine.config.configurers.Action<S,E> ) : org.springframework.statemachine.config.configurers.Action<S,E> ) ; } return org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S , null , java.util.Collection<org.springframework.statemachine.config.configurers.Action<S,E>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , E ... E[] ) { java.util.Collection<E> < E > java.util.Collection<E> = null ; if ( E[] != null ) { java.util.Collection<E> = java.util.Arrays . java.util.List<E> ( E[] ) ; } void ( null , S , java.util.Collection<E> , null , null , null ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( java.util.Set<S> < S > java.util.Set<S> ) { for ( S S : java.util.Set<S> ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Collection<S> . boolean ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Collection<S> . boolean ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Collection<S> . boolean ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Collection<S> . boolean ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S , History org.springframework.statemachine.config.configurers.History ) { this . S = S ; this . org.springframework.statemachine.config.configurers.History = org.springframework.statemachine.config.configurers.History ; org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Collection<S> . boolean ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configurers.StateConfigurer<S,E> < S , E > org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S S ) { org.springframework.statemachine.config.configurers.StateConfigurer<S,E> ( S ) ; java.util.Collection<S> . boolean ( S ) ; return this ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , S S , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.config.configurers.Action<S,E>> ) { StateData < S , E > org.springframework.statemachine.config.configurers.StateData<S,E> = java.util.Map<S,org.springframework.statemachine.config.configurers.StateData<S,E>> . get ( S ) ; if ( org.springframework.statemachine.config.configurers.StateData<S,E> == null ) { org.springframework.statemachine.config.configurers.StateData<S,E> = new StateData < S , E > ( java.lang.Object , java.lang.Object , S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> ) ; java.util.Map<S,org.springframework.statemachine.config.configurers.StateData<S,E>> . put ( S , org.springframework.statemachine.config.configurers.StateData<S,E> ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getParent ( ) == null ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setParent ( java.lang.Object ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getRegion ( ) == null ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setRegion ( java.lang.Object ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getDeferred ( ) == null ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setDeferred ( java.util.Collection<E> ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getEntryActions ( ) == null ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setEntryActions ( java.util.Collection<> ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getExitActions ( ) == null ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setExitActions ( java.util.Collection<> ) ; } if ( org.springframework.statemachine.config.configurers.StateData<S,E> . getStateActions ( ) == null ) { org.springframework.statemachine.config.configurers.StateData<S,E> . setStateActions ( java.util.Collection<> ) ; } }  <METHOD_END>
