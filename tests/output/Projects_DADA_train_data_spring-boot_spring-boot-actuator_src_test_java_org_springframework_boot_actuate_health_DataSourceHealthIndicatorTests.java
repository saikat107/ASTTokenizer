<METHOD_START> @ Before public void void ( ) { EmbeddedDatabaseConnection org.springframework.boot.actuate.health.EmbeddedDatabaseConnection = EmbeddedDatabaseConnection . HSQL ; this . org.springframework.boot.actuate.health.SingleConnectionDataSource = new SingleConnectionDataSource ( org.springframework.boot.actuate.health.EmbeddedDatabaseConnection . getUrl ( ) + STRING , STRING , STRING , false ) ; this . org.springframework.boot.actuate.health.SingleConnectionDataSource . setDriverClassName ( org.springframework.boot.actuate.health.EmbeddedDatabaseConnection . getDriverClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.health.SingleConnectionDataSource != null ) { this . org.springframework.boot.actuate.health.SingleConnectionDataSource . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . setDataSource ( this . org.springframework.boot.actuate.health.SingleConnectionDataSource ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . setDataSource ( this . org.springframework.boot.actuate.health.SingleConnectionDataSource ) ; new JdbcTemplate ( this . org.springframework.boot.actuate.health.SingleConnectionDataSource ) . execute ( STRING ) ; this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . setQuery ( STRING ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . health ( ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.boot.actuate.health.Health ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . setDataSource ( this . org.springframework.boot.actuate.health.SingleConnectionDataSource ) ; this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . setQuery ( STRING ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( java.sql.Connection . java.sql.DatabaseMetaData ( ) ) . willReturn ( this . org.springframework.boot.actuate.health.SingleConnectionDataSource . getConnection ( ) . getMetaData ( ) ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . setDataSource ( javax.sql.DataSource ) ; Health org.springframework.boot.actuate.health.Health = this . org.springframework.boot.actuate.health.DataSourceHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNotNull ( ) ; verify ( java.sql.Connection , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
