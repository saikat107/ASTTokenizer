<METHOD_START> @ After public void void ( ) { ApplicationContextTestUtils . closeAll ( this . org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableWebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public void void ( ConfigurableWebApplicationContext org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableWebApplicationContext ) { this . org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableWebApplicationContext = org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableWebApplicationContext ; this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableWebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ( ConfigurableWebApplicationContext ) new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.ParentConfiguration .class ) . child ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.ChildConfiguration .class ) . run ( STRING ) ) ; MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . is5xxServerError ( ) ) . andReturn ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getResponse ( ) . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ( ConfigurableWebApplicationContext ) new SpringApplication ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.WebMvcIncludedConfiguration .class ) . run ( STRING ) ) ; MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . is5xxServerError ( ) ) . andReturn ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getResponse ( ) . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ( ConfigurableWebApplicationContext ) new SpringApplication ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.WebMvcIncludedConfiguration .class ) . run ( STRING , STRING ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.error.ExpectedException . expect ( ServletException .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ( ConfigurableWebApplicationContext ) new SpringApplication ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.WithAopConfiguration .class ) . run ( STRING ) ) ; MvcResult org.springframework.boot.autoconfigure.web.servlet.error.MvcResult = this . org.springframework.boot.autoconfigure.web.servlet.error.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . is5xxServerError ( ) ) . andReturn ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.error.MvcResult . getResponse ( ) . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { SpringApplication . run ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.WebMvcIncludedConfiguration .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { SpringApplication . run ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.VanillaConfiguration .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { new SpringApplicationBuilder ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.ParentConfiguration .class ) . child ( org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorControllerDirectMockMvcTests.ChildConfiguration .class ) . run ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) private void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.boot.autoconfigure.web.servlet.error.ProceedingJoinPoint ) throws java.lang.Throwable { return org.springframework.boot.autoconfigure.web.servlet.error.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
