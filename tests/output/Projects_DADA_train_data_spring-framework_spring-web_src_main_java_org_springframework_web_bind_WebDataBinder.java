<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { super( java.lang.Object , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MutablePropertyValues org.springframework.web.bind.MutablePropertyValues ) { void ( org.springframework.web.bind.MutablePropertyValues ) ; void ( org.springframework.web.bind.MutablePropertyValues ) ; super. doBind ( org.springframework.web.bind.MutablePropertyValues ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MutablePropertyValues org.springframework.web.bind.MutablePropertyValues ) { if ( java.lang.String ( ) != null ) { java.lang.String java.lang.String = java.lang.String ( ) ; PropertyValue [] org.springframework.web.bind.PropertyValue[] = org.springframework.web.bind.MutablePropertyValues . getPropertyValues ( ) ; for ( PropertyValue org.springframework.web.bind.PropertyValue : org.springframework.web.bind.PropertyValue[] ) { if ( org.springframework.web.bind.PropertyValue . getName ( ) . startsWith ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.web.bind.PropertyValue . getName ( ) . substring ( java.lang.String . int ( ) ) ; if ( getPropertyAccessor ( ) . isWritableProperty ( java.lang.String ) && ! org.springframework.web.bind.MutablePropertyValues . contains ( java.lang.String ) ) { org.springframework.web.bind.MutablePropertyValues . add ( java.lang.String , org.springframework.web.bind.PropertyValue . getValue ( ) ) ; } org.springframework.web.bind.MutablePropertyValues . removePropertyValue ( org.springframework.web.bind.PropertyValue ) ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( MutablePropertyValues org.springframework.web.bind.MutablePropertyValues ) { if ( java.lang.String ( ) != null ) { java.lang.String java.lang.String = java.lang.String ( ) ; PropertyValue [] org.springframework.web.bind.PropertyValue[] = org.springframework.web.bind.MutablePropertyValues . getPropertyValues ( ) ; for ( PropertyValue org.springframework.web.bind.PropertyValue : org.springframework.web.bind.PropertyValue[] ) { if ( org.springframework.web.bind.PropertyValue . getName ( ) . startsWith ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.web.bind.PropertyValue . getName ( ) . substring ( java.lang.String . int ( ) ) ; if ( getPropertyAccessor ( ) . isWritableProperty ( java.lang.String ) && ! org.springframework.web.bind.MutablePropertyValues . contains ( java.lang.String ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = getPropertyAccessor ( ) . getPropertyType ( java.lang.String ) ; org.springframework.web.bind.MutablePropertyValues . add ( java.lang.String , java.lang.Object ( java.lang.String , java.lang.Class<> ) ) ; } org.springframework.web.bind.MutablePropertyValues . removePropertyValue ( org.springframework.web.bind.PropertyValue ) ; } } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> != null ) { try { if ( boolean .class == java.lang.Class<> || java.lang.Boolean .class == java.lang.Class<> ) { return java.lang.Boolean . java.lang.Boolean ; } else if ( java.lang.Class<> . boolean ( ) ) { return java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> . java.lang.Class<?> ( ) , NUMBER ) ; } else if ( java.util.Collection .class . boolean ( java.lang.Class<> ) ) { return CollectionFactory . createCollection ( java.lang.Class<> , NUMBER ) ; } else if ( java.util.Map .class . boolean ( java.lang.Class<> ) ) { return CollectionFactory . createMap ( java.lang.Class<> , NUMBER ) ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return null ; } } return null ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.util.List<org.springframework.web.bind.MultipartFile>> < java.lang.String , java.util.List<org.springframework.web.bind.MultipartFile> < MultipartFile > > java.util.Map<java.lang.String,java.util.List<org.springframework.web.bind.MultipartFile>> , MutablePropertyValues org.springframework.web.bind.MutablePropertyValues ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.MultipartFile>> < java.lang.String , java.util.List<org.springframework.web.bind.MultipartFile> < MultipartFile > > java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.MultipartFile>> : java.util.Map<java.lang.String,java.util.List<org.springframework.web.bind.MultipartFile>> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.MultipartFile>> . getKey ( ) ; java.util.List<org.springframework.web.bind.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.bind.MultipartFile> = java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.MultipartFile>> . getValue ( ) ; if ( java.util.List<org.springframework.web.bind.MultipartFile> . size ( ) == NUMBER ) { MultipartFile org.springframework.web.bind.MultipartFile = java.util.List<org.springframework.web.bind.MultipartFile> . get ( NUMBER ) ; if ( boolean ( ) || ! org.springframework.web.bind.MultipartFile . isEmpty ( ) ) { org.springframework.web.bind.MutablePropertyValues . add ( java.lang.String , org.springframework.web.bind.MultipartFile ) ; } } else { org.springframework.web.bind.MutablePropertyValues . add ( java.lang.String , java.util.List<org.springframework.web.bind.MultipartFile> ) ; } } }  <METHOD_END>
