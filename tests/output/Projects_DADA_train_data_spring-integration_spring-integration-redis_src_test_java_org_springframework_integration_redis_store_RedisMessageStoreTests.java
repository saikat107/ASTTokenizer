<METHOD_START> @ Before @ After public void void ( ) { StringRedisTemplate org.springframework.integration.redis.store.StringRedisTemplate = this . createStringRedisTemplate ( this . getConnectionFactoryForTest ( ) ) ; org.springframework.integration.redis.store.StringRedisTemplate . delete ( org.springframework.integration.redis.store.StringRedisTemplate . keys ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = org.springframework.integration.redis.store.RedisMessageStore . getMessage ( java.util.UUID . java.util.UUID ( ) ) ; assertNull ( org.springframework.integration.redis.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.RedisMessageStore . getMessageCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = org.springframework.integration.redis.store.RedisMessageStore . addMessage ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; assertNotSame ( org.springframework.integration.redis.store.Message<java.lang.String> , org.springframework.integration.redis.store.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.redis.store.Message<java.lang.String> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.RedisMessageStoreTests.Address org.springframework.integration.redis.store.RedisMessageStoreTests.Address = new org.springframework.integration.redis.store.RedisMessageStoreTests.Address ( ) ; org.springframework.integration.redis.store.RedisMessageStoreTests.Address . void ( STRING ) ; org.springframework.integration.redis.store.RedisMessageStoreTests.Person org.springframework.integration.redis.store.RedisMessageStoreTests.Person = new org.springframework.integration.redis.store.RedisMessageStoreTests.Person ( org.springframework.integration.redis.store.RedisMessageStoreTests.Address , STRING ) ; Message < org.springframework.integration.redis.store.RedisMessageStoreTests.Person > org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Person> = new GenericMessage < org.springframework.integration.redis.store.RedisMessageStoreTests.Person > ( org.springframework.integration.redis.store.RedisMessageStoreTests.Person ) ; Message < org.springframework.integration.redis.store.RedisMessageStoreTests.Person > org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Person> = org.springframework.integration.redis.store.RedisMessageStore . addMessage ( org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Person> ) ; assertNotSame ( org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Person> , org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Person> ) ; assertEquals ( STRING , org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Person> . getPayload ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < org.springframework.integration.redis.store.RedisMessageStoreTests.Foo > org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Foo> = new GenericMessage < org.springframework.integration.redis.store.RedisMessageStoreTests.Foo > ( new org.springframework.integration.redis.store.RedisMessageStoreTests.Foo ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessage ( org.springframework.integration.redis.store.Message<org.springframework.integration.redis.store.RedisMessageStoreTests.Foo> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessage ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = ( Message < java.lang.String > ) org.springframework.integration.redis.store.RedisMessageStore . getMessage ( org.springframework.integration.redis.store.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.redis.store.Message<java.lang.String> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessage ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = ( Message < java.lang.String > ) org.springframework.integration.redis.store.RedisMessageStore . removeMessage ( org.springframework.integration.redis.store.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.redis.store.Message<java.lang.String> . getPayload ( ) ) ; assertNull ( org.springframework.integration.redis.store.RedisMessageStore . getMessage ( org.springframework.integration.redis.store.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; DirectChannel org.springframework.integration.redis.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.redis.store.DirectChannel . setBeanName ( STRING ) ; DirectChannel org.springframework.integration.redis.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.redis.store.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.redis.store.Message<?> = MessageHistory . write ( org.springframework.integration.redis.store.Message<> , org.springframework.integration.redis.store.DirectChannel ) ; org.springframework.integration.redis.store.Message<?> = MessageHistory . write ( org.springframework.integration.redis.store.Message<> , org.springframework.integration.redis.store.DirectChannel ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessage ( org.springframework.integration.redis.store.Message<> ) ; org.springframework.integration.redis.store.Message<?> = org.springframework.integration.redis.store.RedisMessageStore . getMessage ( org.springframework.integration.redis.store.Message<> . getHeaders ( ) . getId ( ) ) ; MessageHistory org.springframework.integration.redis.store.MessageHistory = MessageHistory . read ( org.springframework.integration.redis.store.Message<> ) ; assertNotNull ( org.springframework.integration.redis.store.MessageHistory ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageHistory . size ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.redis.store.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.integration.redis.store.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.redis.store.Message<?>> = new java.util.ArrayList<org.springframework.integration.redis.store.Message<?>> < Message < ? > > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.redis.store.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.redis.store.Message<?>> . add ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; } org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( java.lang.String , java.util.List<org.springframework.integration.redis.store.Message<?>> ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessageGroup ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.integration.redis.store.RedisMessageStoreTests.Address org.springframework.integration.redis.store.RedisMessageStoreTests.Address , java.lang.String java.lang.String ) { this . org.springframework.integration.redis.store.RedisMessageStoreTests.Address = org.springframework.integration.redis.store.RedisMessageStoreTests.Address ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.redis.store.RedisMessageStoreTests.Address org.springframework.integration.redis.store.RedisMessageStoreTests.Address ( ) { return org.springframework.integration.redis.store.RedisMessageStoreTests.Address ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.redis.store.RedisMessageStoreTests.Address org.springframework.integration.redis.store.RedisMessageStoreTests.Address ) { this . org.springframework.integration.redis.store.RedisMessageStoreTests.Address = org.springframework.integration.redis.store.RedisMessageStoreTests.Address ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
