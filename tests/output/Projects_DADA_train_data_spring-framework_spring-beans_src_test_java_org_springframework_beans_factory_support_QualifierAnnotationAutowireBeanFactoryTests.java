<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class . java.lang.reflect.Field ( STRING ) , false ) ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class . java.lang.reflect.Field ( STRING ) , true ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireCandidate ( false ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class . java.lang.reflect.Field ( STRING ) , false ) ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class . java.lang.reflect.Field ( STRING ) , true ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Field ( STRING ) , false ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Field ( STRING ) , false ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireCandidate ( false ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Field ( STRING ) , false ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Field ( STRING ) , false ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( ClassUtils . getShortName ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier .class ) ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Field ( STRING ) , false ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Field ( STRING ) , false ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; MethodParameter org.springframework.beans.factory.support.MethodParameter = new MethodParameter ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Constructor<org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean> ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class ) , NUMBER ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.MethodParameter , false ) ; org.springframework.beans.factory.support.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.MethodParameter . getParameterName ( ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; MethodParameter org.springframework.beans.factory.support.MethodParameter = new MethodParameter ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Method ( STRING , org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class ) , NUMBER ) ; MethodParameter org.springframework.beans.factory.support.MethodParameter = new MethodParameter ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Method ( STRING , org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class ) , NUMBER ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.MethodParameter , false ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.MethodParameter , false ) ; org.springframework.beans.factory.support.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.MethodParameter . getParameterName ( ) ) ; org.springframework.beans.factory.support.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.MethodParameter . getParameterName ( ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , null ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( new MethodParameter ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean .class . java.lang.reflect.Constructor<org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.QualifiedTestBean> ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person .class ) , NUMBER ) , false ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultListableBeanFactory . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> public void ( @ org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person ) {		}  <METHOD_END>
<METHOD_START> public void void ( @ org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.TestQualifier org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireBeanFactoryTests.Person ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
