<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( java.util.Properties ( STRING , STRING , STRING , STRING ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getBranch ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.GitProperties . getShortCommitId ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( new java.util.Properties ( ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getBranch ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitId ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.info.GitProperties . getShortCommitId ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitTime ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( java.util.Properties ( STRING , STRING , null , STRING ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitTime ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.info.GitProperties . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitTime ( ) . getTime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( java.util.Properties ( STRING , STRING , null , STRING ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitTime ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.info.GitProperties . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitTime ( ) . getTime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( java.util.Properties ( STRING , STRING , null , STRING ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitTime ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.info.GitProperties . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( java.util.Properties ( STRING , STRING , STRING , STRING ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.GitProperties . getShortCommitId ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( java.util.Properties ( STRING , STRING , null , STRING ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.GitProperties . getShortCommitId ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GitProperties org.springframework.boot.info.GitProperties = new GitProperties ( java.util.Properties ( STRING , STRING , null , STRING ) ) ; assertThat ( org.springframework.boot.info.GitProperties . getCommitId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.info.GitProperties . getShortCommitId ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Properties java.util.Properties ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ) ; if ( java.lang.String != null ) { java.util.Properties . java.lang.Object ( STRING , java.lang.String ) ; } java.util.Properties . java.lang.Object ( STRING , java.lang.String ) ; return java.util.Properties ; }  <METHOD_END>
