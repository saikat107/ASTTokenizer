<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.mongodb.repository.query.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.repository.query.DbRefResolver = new DefaultDbRefResolver ( org.springframework.data.mongodb.repository.query.MongoDbFactory ) ; this . org.springframework.data.mongodb.repository.query.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.query.DbRefResolver , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MappingMongoConverter ( ( DbRefResolver ) null , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MappingMongoConverter ( org.springframework.data.mongodb.repository.query.DbRefResolver , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getBindableValue ( NUMBER ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.mongodb.repository.query.MappingMongoConverter , org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor . getBindableValue ( NUMBER ) ; BasicDBList org.springframework.data.mongodb.repository.query.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.repository.query.BasicDBList . add ( STRING ) ; assertThat ( java.lang.Object , is ( ( java.lang.Object ) org.springframework.data.mongodb.repository.query.BasicDBList ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property = new org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property ( ) ; org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property . java.lang.Long = NUMBER ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property ) ; assertThat ( java.lang.Object , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; com . com.mongodb . com.mongodb com.mongodb.DBRef = ( com . com.mongodb . com.mongodb ) java.lang.Object ; assertThat ( com.mongodb.DBRef . getCollectionName ( ) , is ( STRING ) ) ; assertThat ( com.mongodb.DBRef . getId ( ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property = new org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property ( ) ; org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property . java.lang.Long = NUMBER ; java.lang.Object java.lang.Object = java.lang.Object ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property> ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Property ) ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.Collection .class ) ) ) ; java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; assertThat ( java.util.Collection<> , hasSize ( NUMBER ) ) ; java.lang.Object java.lang.Object = java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ; assertThat ( java.lang.Object , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; com . com.mongodb . com.mongodb com.mongodb.DBRef = ( com . com.mongodb . com.mongodb ) java.lang.Object ; assertThat ( com.mongodb.DBRef . getCollectionName ( ) , is ( STRING ) ) ; assertThat ( com.mongodb.DBRef . getId ( ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object ... java.lang.Object[] ) { MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new StubParameterAccessor ( java.lang.Object[] ) ; PotentiallyConvertingIterator org.springframework.data.mongodb.repository.query.PotentiallyConvertingIterator = new ConvertingParameterAccessor ( org.springframework.data.mongodb.repository.query.MappingMongoConverter , org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) . iterator ( ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.repository.query.MongoPersistentEntity<?> = org.springframework.data.mongodb.repository.query.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessorUnitTests.Entity .class ) ; MongoPersistentProperty org.springframework.data.mongodb.repository.query.MongoPersistentProperty = org.springframework.data.mongodb.repository.query.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; return org.springframework.data.mongodb.repository.query.PotentiallyConvertingIterator . nextConverted ( org.springframework.data.mongodb.repository.query.MongoPersistentProperty ) ; }  <METHOD_END>
