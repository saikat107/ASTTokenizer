<METHOD_START> public void ( WebHandler org.springframework.web.server.handler.WebHandler , java.util.List<org.springframework.web.server.handler.WebExceptionHandler> < WebExceptionHandler > java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ) { super( org.springframework.web.server.handler.WebHandler ); this . java.util.List<org.springframework.web.server.handler.WebExceptionHandler> = java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ( java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.server.handler.WebExceptionHandler> < WebExceptionHandler > java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ( java.util.List<org.springframework.web.server.handler.WebExceptionHandler> < WebExceptionHandler > java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ) { java.util.List<org.springframework.web.server.handler.WebExceptionHandler> < WebExceptionHandler > java.util.List<org.springframework.web.server.handler.WebExceptionHandler> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ) ; java.util.List<org.springframework.web.server.handler.WebExceptionHandler> . add ( new org.springframework.web.server.handler.ExceptionHandlingWebHandler.UnresolvedExceptionHandler ( ) ) ; return java.util.Collections . java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ( java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.server.handler.WebExceptionHandler> < WebExceptionHandler > java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ( ) { return this . java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange ) { Mono < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ; try { org.springframework.web.server.handler.Mono<java.lang.Void> = super. handle ( org.springframework.web.server.handler.ServerWebExchange ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.server.handler.Mono<java.lang.Void> = Mono . error ( java.lang.Throwable ) ; } for ( WebExceptionHandler org.springframework.web.server.handler.WebExceptionHandler : this . java.util.List<org.springframework.web.server.handler.WebExceptionHandler> ) { org.springframework.web.server.handler.Mono<java.lang.Void> = org.springframework.web.server.handler.Mono<java.lang.Void> . otherwise ( ex -> handler . handle ( exchange , ex ) ) ; } return org.springframework.web.server.handler.Mono<java.lang.Void> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; org.springframework.web.server.handler.ServerWebExchange . getResponse ( ) . setStatusCode ( HttpStatus . INTERNAL_SERVER_ERROR ) ; return org.springframework.web.server.handler.ServerWebExchange . getResponse ( ) . setComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.Throwable java.lang.Throwable ) { NestedCheckedException org.springframework.web.server.handler.NestedCheckedException = new NestedCheckedException ( STRING , java.lang.Throwable ) {} ; if ( STRING . boolean ( org.springframework.web.server.handler.NestedCheckedException . getMostSpecificCause ( ) . getMessage ( ) ) || java.util.Set<java.lang.String> . boolean ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) . java.lang.String ( ) ) ) { if ( org.springframework.web.server.handler.Log . isTraceEnabled ( ) ) { org.springframework.web.server.handler.Log . trace ( STRING , java.lang.Throwable ) ; } else if ( org.springframework.web.server.handler.Log . isDebugEnabled ( ) ) { org.springframework.web.server.handler.Log . debug ( STRING + org.springframework.web.server.handler.NestedCheckedException . getMessage ( ) + STRING + STRING + java.lang.String + STRING ) ; } } else { org.springframework.web.server.handler.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
