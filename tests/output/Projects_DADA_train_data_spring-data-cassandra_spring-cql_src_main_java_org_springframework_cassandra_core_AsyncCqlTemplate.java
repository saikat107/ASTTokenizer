<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.cassandra.core.Session ) { Assert . notNull ( org.springframework.cassandra.core.Session , STRING ) ; setSession ( org.springframework.cassandra.core.Session ) ; }  <METHOD_END>
<METHOD_START> public void ( SessionFactory org.springframework.cassandra.core.SessionFactory ) { Assert . notNull ( org.springframework.cassandra.core.SessionFactory , STRING ) ; setSessionFactory ( org.springframework.cassandra.core.SessionFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( AsyncSessionCallback < T > org.springframework.cassandra.core.AsyncSessionCallback<T> ) throws org.springframework.cassandra.core.DataAccessException { Assert . notNull ( org.springframework.cassandra.core.AsyncSessionCallback<T> , STRING ) ; try { return org.springframework.cassandra.core.AsyncSessionCallback<T> . doInSession ( org.springframework.cassandra.core.Session ( ) ) ; } catch ( DriverException org.springframework.cassandra.core.DriverException ) { throw org.springframework.cassandra.core.DataAccessException ( STRING , toCql ( org.springframework.cassandra.core.AsyncSessionCallback<T> ) , org.springframework.cassandra.core.DriverException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ( java.lang.String java.lang.String ) throws org.springframework.cassandra.core.DataAccessException { Assert . hasText ( java.lang.String , STRING ) ; return new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> ( java.lang.String ) , ResultSet :: wasApplied ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , ResultSetExtractor < T > org.springframework.cassandra.core.ResultSetExtractor<T> )			throws org.springframework.cassandra.core.DataAccessException { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.ResultSetExtractor<T> , STRING ) ; try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , java.lang.String ) ; } SimpleStatement org.springframework.cassandra.core.SimpleStatement = applyStatementSettings ( new SimpleStatement ( java.lang.String ) ) ; ResultSetFuture org.springframework.cassandra.core.ResultSetFuture = org.springframework.cassandra.core.Session ( ) . executeAsync ( org.springframework.cassandra.core.SimpleStatement ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( new GuavaListenableFutureAdapter <> ( org.springframework.cassandra.core.ResultSetFuture , ex -> translateExceptionIfPossible ( STRING , cql , ex ) ) , org.springframework.cassandra.core.ResultSetExtractor<T> :: extractData ) , getExceptionTranslator ( ) ) ; } catch ( DriverException org.springframework.cassandra.core.DriverException ) { throw org.springframework.cassandra.core.DataAccessException ( STRING , java.lang.String , org.springframework.cassandra.core.DriverException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String java.lang.String , RowCallbackHandler org.springframework.cassandra.core.RowCallbackHandler ) throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < ? > org.springframework.cassandra.core.ListenableFuture<?> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String , newResultSetExtractor ( org.springframework.cassandra.core.RowCallbackHandler ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<> , o -> null ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( java.lang.String java.lang.String , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.util.List<java.util.Map<java.lang.String,java.lang.Object>>> < java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > > org.springframework.cassandra.core.ListenableFuture<java.util.List<java.util.Map<java.lang.String,java.lang.Object>>> ( java.lang.String java.lang.String ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String , newResultSetExtractor ( newColumnMapRowMapper ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String , newResultSetExtractor ( newSingleColumnRowMapper ( java.lang.Class<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > org.springframework.cassandra.core.ListenableFuture<java.util.Map<java.lang.String,java.lang.Object>> ( java.lang.String java.lang.String ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture ( java.lang.String , newColumnMapRowMapper ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture ( java.lang.String , newSingleColumnRowMapper ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> ) throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> , DataAccessUtils :: requiredSingleResult ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> ( java.lang.String java.lang.String ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String , rs -> rs ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ( Statement org.springframework.cassandra.core.Statement ) throws org.springframework.cassandra.core.DataAccessException { Assert . notNull ( org.springframework.cassandra.core.Statement , STRING ) ; return new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> ( org.springframework.cassandra.core.Statement ) , ResultSet :: wasApplied ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( Statement org.springframework.cassandra.core.Statement , ResultSetExtractor < T > org.springframework.cassandra.core.ResultSetExtractor<T> )			throws org.springframework.cassandra.core.DataAccessException { Assert . notNull ( org.springframework.cassandra.core.Statement , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.ResultSetExtractor<T> , STRING ) ; try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , org.springframework.cassandra.core.Statement ) ; } ResultSetFuture org.springframework.cassandra.core.ResultSetFuture = org.springframework.cassandra.core.Session ( ) . executeAsync ( applyStatementSettings ( org.springframework.cassandra.core.Statement ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( new GuavaListenableFutureAdapter <> ( org.springframework.cassandra.core.ResultSetFuture , ex -> translateExceptionIfPossible ( STRING , statement . toString ( ) , ex ) ) , org.springframework.cassandra.core.ResultSetExtractor<T> :: extractData ) , getExceptionTranslator ( ) ) ; } catch ( DriverException org.springframework.cassandra.core.DriverException ) { throw org.springframework.cassandra.core.DataAccessException ( STRING , org.springframework.cassandra.core.Statement . toString ( ) , org.springframework.cassandra.core.DriverException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( Statement org.springframework.cassandra.core.Statement , RowCallbackHandler org.springframework.cassandra.core.RowCallbackHandler )			throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < ? > org.springframework.cassandra.core.ListenableFuture<?> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.Statement , newResultSetExtractor ( org.springframework.cassandra.core.RowCallbackHandler ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<> , o -> null ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( Statement org.springframework.cassandra.core.Statement , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.Statement , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.util.List<java.util.Map<java.lang.String,java.lang.Object>>> < java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > > org.springframework.cassandra.core.ListenableFuture<java.util.List<java.util.Map<java.lang.String,java.lang.Object>>> ( Statement org.springframework.cassandra.core.Statement ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.Statement , newResultSetExtractor ( newColumnMapRowMapper ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( Statement org.springframework.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.Statement , newResultSetExtractor ( newSingleColumnRowMapper ( java.lang.Class<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > org.springframework.cassandra.core.ListenableFuture<java.util.Map<java.lang.String,java.lang.Object>> ( Statement org.springframework.cassandra.core.Statement ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture ( org.springframework.cassandra.core.Statement , newColumnMapRowMapper ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( Statement org.springframework.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture ( org.springframework.cassandra.core.Statement , newSingleColumnRowMapper ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( Statement org.springframework.cassandra.core.Statement , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> )			throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.Statement , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> , DataAccessUtils :: requiredSingleResult ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> ( Statement org.springframework.cassandra.core.Statement ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture ( org.springframework.cassandra.core.Statement , rs -> rs ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , ResultSet :: wasApplied ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ( java.lang.String , newPreparedStatementBinder ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ( java.lang.String java.lang.String , PreparedStatementBinder org.springframework.cassandra.core.PreparedStatementBinder )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , org.springframework.cassandra.core.PreparedStatementBinder , ResultSet :: wasApplied ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , PreparedStatementCallback < T > org.springframework.cassandra.core.PreparedStatementCallback<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , org.springframework.cassandra.core.PreparedStatementCallback<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator , PreparedStatementCallback < T > org.springframework.cassandra.core.PreparedStatementCallback<T> ) throws org.springframework.cassandra.core.DataAccessException { Assert . notNull ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.PreparedStatementCallback<T> , STRING ) ; try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , toCql ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ) , org.springframework.cassandra.core.AsyncPreparedStatementCreator ) ; } Session org.springframework.cassandra.core.Session = org.springframework.cassandra.core.Session ( ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) , preparedStatement -> { try { return action . doInPreparedStatement ( currentSession , applyStatementSettings ( preparedStatement ) ) ; } catch ( DriverException e ) { throw translateException ( STRING , preparedStatement . toString ( ) , e ) ; } } ) , getExceptionTranslator ( ) ) ; } catch ( DriverException org.springframework.cassandra.core.DriverException ) { throw org.springframework.cassandra.core.DataAccessException ( STRING , toCql ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ) , org.springframework.cassandra.core.DriverException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator , ResultSetExtractor < T > org.springframework.cassandra.core.ResultSetExtractor<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , null , org.springframework.cassandra.core.ResultSetExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator , RowCallbackHandler org.springframework.cassandra.core.RowCallbackHandler ) throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < ? > org.springframework.cassandra.core.ListenableFuture<?> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , null , newResultSetExtractor ( org.springframework.cassandra.core.RowCallbackHandler ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<> , o -> null ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , null , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator , PreparedStatementBinder org.springframework.cassandra.core.PreparedStatementBinder , ResultSetExtractor < T > org.springframework.cassandra.core.ResultSetExtractor<T> )			throws org.springframework.cassandra.core.DataAccessException { Assert . notNull ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.ResultSetExtractor<T> , STRING ) ; try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , toCql ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ) , org.springframework.cassandra.core.AsyncPreparedStatementCreator ) ; } Session org.springframework.cassandra.core.Session = org.springframework.cassandra.core.Session ( ) ; PersistenceExceptionTranslator org.springframework.cassandra.core.PersistenceExceptionTranslator = ex -> translateExceptionIfPossible ( STRING , toCql ( preparedStatementCreator ) , ex ) ; ListenableFuture < BoundStatement > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.BoundStatement> = new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator . createPreparedStatement ( org.springframework.cassandra.core.Session ) , preparedStatement -> { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , preparedStatement ) ; } return applyStatementSettings ( preparedStatementBinder != null ? preparedStatementBinder . bindValues ( preparedStatement ) : preparedStatement . bind ( ) ) ; } ) ; SettableListenableFuture < T > org.springframework.cassandra.core.SettableListenableFuture<T> = new SettableListenableFuture <> ( ) ; org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.BoundStatement> . addCallback ( boundStatement -> Futures . addCallback ( session . executeAsync ( boundStatement ) , new FutureCallback < ResultSet > ( ) { @ Override public void onSuccess ( ResultSet result ) { try { settableListenableFuture . set ( resultSetExtractor . extractData ( result ) ) ; } catch ( DriverException e ) { settableListenableFuture . setException ( exceptionTranslator . translateExceptionIfPossible ( e ) ) ; } } @ Override public void onFailure ( Throwable ex ) { if ( ex instanceof DriverException ) { settableListenableFuture . setException ( exceptionTranslator . translateExceptionIfPossible ( ( DriverException ) ex ) ) ; } else { settableListenableFuture . setException ( ex ) ; } } } ) , ex -> { if ( ex instanceof DriverException ) { settableListenableFuture . setException ( exceptionTranslator . translateExceptionIfPossible ( ( DriverException ) ex ) ) ; } else { settableListenableFuture . setException ( ex ) ; } } ) ; return org.springframework.cassandra.core.SettableListenableFuture<T> ; } catch ( DriverException org.springframework.cassandra.core.DriverException ) { throw org.springframework.cassandra.core.DataAccessException ( STRING , toCql ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ) , org.springframework.cassandra.core.DriverException ) ; } }  <METHOD_END>
<METHOD_START> @ Override public void onSuccess ( ResultSet result ) { try { settableListenableFuture . set ( resultSetExtractor . extractData ( result ) ) ; } catch ( DriverException e ) { settableListenableFuture . setException ( exceptionTranslator . translateExceptionIfPossible ( e ) ) ; } }  <METHOD_END>
<METHOD_START> @ Override public void onFailure ( Throwable ex ) { if ( ex instanceof DriverException ) { settableListenableFuture . setException ( exceptionTranslator . translateExceptionIfPossible ( ( DriverException ) ex ) ) ; } else { settableListenableFuture . setException ( ex ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator , PreparedStatementBinder org.springframework.cassandra.core.PreparedStatementBinder , RowCallbackHandler org.springframework.cassandra.core.RowCallbackHandler )			throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < ? > org.springframework.cassandra.core.ListenableFuture<?> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , org.springframework.cassandra.core.PreparedStatementBinder , newResultSetExtractor ( org.springframework.cassandra.core.RowCallbackHandler ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<> , o -> null ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator , PreparedStatementBinder org.springframework.cassandra.core.PreparedStatementBinder , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator , org.springframework.cassandra.core.PreparedStatementBinder , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , ResultSetExtractor < T > org.springframework.cassandra.core.ResultSetExtractor<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , newPreparedStatementBinder ( java.lang.Object[] ) , org.springframework.cassandra.core.ResultSetExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String java.lang.String , RowCallbackHandler org.springframework.cassandra.core.RowCallbackHandler , java.lang.Object ... java.lang.Object[] )			throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < ? > org.springframework.cassandra.core.ListenableFuture<?> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , newPreparedStatementBinder ( java.lang.Object[] ) , newResultSetExtractor ( org.springframework.cassandra.core.RowCallbackHandler ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<> , o -> null ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( java.lang.String java.lang.String , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , newPreparedStatementBinder ( java.lang.Object[] ) , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , PreparedStatementBinder org.springframework.cassandra.core.PreparedStatementBinder , ResultSetExtractor < T > org.springframework.cassandra.core.ResultSetExtractor<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , org.springframework.cassandra.core.PreparedStatementBinder , org.springframework.cassandra.core.ResultSetExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String java.lang.String , PreparedStatementBinder org.springframework.cassandra.core.PreparedStatementBinder , RowCallbackHandler org.springframework.cassandra.core.RowCallbackHandler ) throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < ? > org.springframework.cassandra.core.ListenableFuture<?> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , org.springframework.cassandra.core.PreparedStatementBinder , newResultSetExtractor ( org.springframework.cassandra.core.RowCallbackHandler ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<> , o -> null ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( java.lang.String java.lang.String , PreparedStatementBinder org.springframework.cassandra.core.PreparedStatementBinder , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , org.springframework.cassandra.core.PreparedStatementBinder , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.util.List<java.util.Map<java.lang.String,java.lang.Object>>> < java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > > org.springframework.cassandra.core.ListenableFuture<java.util.List<java.util.Map<java.lang.String,java.lang.Object>>> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , newPreparedStatementBinder ( java.lang.Object[] ) , newResultSetExtractor ( newColumnMapRowMapper ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , newPreparedStatementBinder ( java.lang.Object[] ) , newResultSetExtractor ( newSingleColumnRowMapper ( java.lang.Class<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > org.springframework.cassandra.core.ListenableFuture<java.util.Map<java.lang.String,java.lang.Object>> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture ( java.lang.String , newColumnMapRowMapper ( ) , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture ( java.lang.String , newSingleColumnRowMapper ( java.lang.Class<T> ) , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , RowMapper < T > org.springframework.cassandra.core.RowMapper<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.cassandra.core.DataAccessException { ListenableFuture < java.util.List<T> < T > > org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> = org.springframework.cassandra.core.ListenableFuture<java.lang.Void> ( org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String ) , newPreparedStatementBinder ( java.lang.Object[] ) , newResultSetExtractor ( org.springframework.cassandra.core.RowMapper<T> , NUMBER ) ) ; return new ExceptionTranslatingListenableFutureAdapter <> ( new org.springframework.cassandra.core.AsyncCqlTemplate.MappingListenableFutureAdapter <> ( org.springframework.cassandra.core.ListenableFuture<java.util.List<T>> , DataAccessUtils :: requiredSingleResult ) , getExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.cassandra.core.DataAccessException { return org.springframework.cassandra.core.ListenableFuture<T> ( java.lang.String , rs -> rs , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.core.AsyncPreparedStatementCreator org.springframework.cassandra.core.AsyncPreparedStatementCreator ( java.lang.String java.lang.String ) { return new org.springframework.cassandra.core.AsyncCqlTemplate.SimpleAsyncPreparedStatementCreator ( java.lang.String , ex -> translateExceptionIfPossible ( STRING , cql , ex ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.cassandra.core.DataAccessException org.springframework.cassandra.core.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , DriverException org.springframework.cassandra.core.DriverException ) { return translate ( java.lang.String , java.lang.String , org.springframework.cassandra.core.DriverException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.cassandra.core.DataAccessException org.springframework.cassandra.core.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.RuntimeException java.lang.RuntimeException ) { return ( java.lang.RuntimeException instanceof DriverException ? translate ( java.lang.String , java.lang.String , ( DriverException ) java.lang.RuntimeException ) : null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cassandra.core.Session org.springframework.cassandra.core.Session ( ) { return getSessionFactory ( ) . getSession ( ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , PersistenceExceptionTranslator org.springframework.cassandra.core.PersistenceExceptionTranslator ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.cassandra.core.PersistenceExceptionTranslator = org.springframework.cassandra.core.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.PreparedStatement> < PreparedStatement > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.PreparedStatement> ( Session org.springframework.cassandra.core.Session ) throws org.springframework.cassandra.core.DriverException { return new GuavaListenableFutureAdapter <> ( org.springframework.cassandra.core.Session . prepareAsync ( java.lang.String ( ) ) , this . org.springframework.cassandra.core.PersistenceExceptionTranslator ) ; }  <METHOD_END>
<METHOD_START> private void ( ListenableFuture < S > org.springframework.cassandra.core.ListenableFuture<S> , java.util.function.Function<S,T> < S , T > java.util.function.Function<S,T> ) { super( org.springframework.cassandra.core.ListenableFuture<S> ); this . java.util.function.Function<S,T> = java.util.function.Function<S,T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected T T ( S S ) throws java.util.concurrent.ExecutionException { return java.util.function.Function<S,T> . T ( S ) ; }  <METHOD_END>
