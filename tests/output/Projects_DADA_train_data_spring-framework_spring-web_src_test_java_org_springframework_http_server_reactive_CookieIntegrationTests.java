<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.HttpHandler org.springframework.http.server.reactive.HttpHandler ( ) { this . org.springframework.http.server.reactive.CookieIntegrationTests.CookieHandler = new org.springframework.http.server.reactive.CookieIntegrationTests.CookieHandler ( ) ; return this . org.springframework.http.server.reactive.CookieIntegrationTests.CookieHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + port ) ; java.lang.String java.lang.String = STRING ; ResponseEntity < java.lang.Void > org.springframework.http.server.reactive.ResponseEntity<java.lang.Void> = new RestTemplate ( ) . exchange ( RequestEntity . get ( java.net.URI ) . header ( STRING , java.lang.String ) . build ( ) , java.lang.Void .class ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> < java.lang.String , java.util.List<org.springframework.http.server.reactive.HttpCookie> < HttpCookie > > java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> = this . org.springframework.http.server.reactive.CookieIntegrationTests.CookieHandler . java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> . size ( ) ) ; java.util.List<org.springframework.http.server.reactive.HttpCookie> < HttpCookie > java.util.List<org.springframework.http.server.reactive.HttpCookie> = java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.server.reactive.HttpCookie> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.http.server.reactive.HttpCookie> . iterator ( ) . next ( ) . getValue ( ) ) ; java.util.List<org.springframework.http.server.reactive.HttpCookie> = java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.server.reactive.HttpCookie> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.http.server.reactive.HttpCookie> . iterator ( ) . next ( ) . getValue ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.server.reactive.ResponseEntity<java.lang.Void> . getHeaders ( ) . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertThat ( java.util.List<java.lang.String> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) , containsInAnyOrder ( equalTo ( STRING ) , equalToIgnoringCase ( STRING ) , equalToIgnoringCase ( STRING ) , equalToIgnoringCase ( STRING ) ) ) ; assertThat ( java.util.List<java.lang.String> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) , containsInAnyOrder ( equalTo ( STRING ) , equalToIgnoringCase ( STRING ) , equalToIgnoringCase ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String . java.lang.String[] ( STRING ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest , ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ) { this . java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> = org.springframework.http.server.reactive.ServerHttpRequest . getCookies ( ) ; this . java.util.Map<java.lang.String,java.util.List<org.springframework.http.server.reactive.HttpCookie>> . size ( ) ; org.springframework.http.server.reactive.ServerHttpResponse . getCookies ( ) . add ( STRING , ResponseCookie . from ( STRING , STRING ) . path ( STRING ) . secure ( true ) . httpOnly ( true ) . build ( ) ) ; org.springframework.http.server.reactive.ServerHttpResponse . getCookies ( ) . add ( STRING , ResponseCookie . from ( STRING , STRING ) . domain ( STRING ) . path ( STRING ) . build ( ) ) ; return org.springframework.http.server.reactive.ServerHttpResponse . setComplete ( ) ; }  <METHOD_END>
