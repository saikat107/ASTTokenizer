<METHOD_START> @ Before public void void ( ) { org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext = org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext != null ) { org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.zookeeper.AbstractZookeeperTests.TestingServerWrapper org.springframework.statemachine.zookeeper.AbstractZookeeperTests.TestingServerWrapper ( ) java.lang.Exception { return new org.springframework.statemachine.zookeeper.AbstractZookeeperTests.TestingServerWrapper ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( destroyMethod = STRING ) public org.springframework.statemachine.zookeeper.CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework ( ) java.lang.Exception { CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = CuratorFrameworkFactory . builder ( ) . defaultData ( new byte [ NUMBER ] ) . retryPolicy ( new ExponentialBackoffRetry ( NUMBER , NUMBER ) ) . connectString ( STRING + org.springframework.statemachine.zookeeper.AbstractZookeeperTests.TestingServerWrapper . int ( ) ) . build ( ) ; org.springframework.statemachine.zookeeper.CuratorFramework . start ( ) ; return org.springframework.statemachine.zookeeper.CuratorFramework ; }  <METHOD_END>
<METHOD_START> public void ( ) java.lang.Exception { this . org.springframework.statemachine.zookeeper.TestingServer = new TestingServer ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { try { org.springframework.statemachine.zookeeper.TestingServer . close ( ) ; } catch ( java.io.IOException java.io.IOException ) {			} }  <METHOD_END>
<METHOD_START> public int int ( ) { return org.springframework.statemachine.zookeeper.TestingServer . getPort ( ) ; }  <METHOD_END>
