<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationBeanNameTests.A .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationBeanNameTests.A . org.springframework.context.annotation.configuration.ConfigurationBeanNameTests.A.B .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . setBeanNameGenerator ( new AnnotationBeanNameGenerator ( ) { @ java.lang.Override public java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.configuration.BeanDefinition , BeanDefinitionRegistry org.springframework.context.annotation.configuration.BeanDefinitionRegistry ) { return STRING + super. generateBeanName ( org.springframework.context.annotation.configuration.BeanDefinition , org.springframework.context.annotation.configuration.BeanDefinitionRegistry ) ; } } ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationBeanNameTests.A .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.configuration.BeanDefinition , BeanDefinitionRegistry org.springframework.context.annotation.configuration.BeanDefinitionRegistry ) { return STRING + super. generateBeanName ( org.springframework.context.annotation.configuration.BeanDefinition , org.springframework.context.annotation.configuration.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
