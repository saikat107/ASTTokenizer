<METHOD_START> public void ( ) { super( STRING , STRING , STRING ); }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsOutboundGateway org.springframework.integration.jms.JmsOutboundGateway = new JmsOutboundGateway ( ) ; org.springframework.integration.jms.JmsOutboundGateway . setConnectionFactory ( mock ( ConnectionFactory .class ) ) ; org.springframework.integration.jms.JmsOutboundGateway . setRequestDestinationName ( STRING ) ; org.springframework.integration.jms.JmsOutboundGateway . setUseReplyContainer ( true ) ; org.springframework.integration.jms.JmsOutboundGateway . setReplyContainerProperties ( new ReplyContainerProperties ( ) ) ; org.springframework.integration.jms.JmsOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsOutboundGateway . afterPropertiesSet ( ) ; assertEquals ( STRING + ObjectUtils . getIdentityHexString ( org.springframework.integration.jms.JmsOutboundGateway ) + STRING , TestUtils . getPropertyValue ( org.springframework.integration.jms.JmsOutboundGateway , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { JmsOutboundGateway org.springframework.integration.jms.JmsOutboundGateway = new JmsOutboundGateway ( ) ; ConnectionFactory org.springframework.integration.jms.ConnectionFactory = mock ( ConnectionFactory .class ) ; org.springframework.integration.jms.JmsOutboundGateway . setConnectionFactory ( org.springframework.integration.jms.ConnectionFactory ) ; org.springframework.integration.jms.JmsOutboundGateway . setRequestDestinationName ( STRING ) ; org.springframework.integration.jms.JmsOutboundGateway . setUseReplyContainer ( true ) ; ReplyContainerProperties org.springframework.integration.jms.ReplyContainerProperties = new ReplyContainerProperties ( ) ; final java.util.List<java.lang.Throwable> < java.lang.Throwable > java.util.List<java.lang.Throwable> = new java.util.ArrayList<java.lang.Throwable> < java.lang.Throwable > ( ) ; ErrorHandlingTaskExecutor org.springframework.integration.jms.ErrorHandlingTaskExecutor = new ErrorHandlingTaskExecutor ( java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) , t -> { errors . add ( t ) ; throw new RuntimeException ( t ) ; } ) ; org.springframework.integration.jms.ReplyContainerProperties . setTaskExecutor ( org.springframework.integration.jms.ErrorHandlingTaskExecutor ) ; org.springframework.integration.jms.ReplyContainerProperties . setRecoveryInterval ( NUMBER ) ; org.springframework.integration.jms.JmsOutboundGateway . setReplyContainerProperties ( org.springframework.integration.jms.ReplyContainerProperties ) ; final Connection org.springframework.integration.jms.Connection = mock ( Connection .class ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; doAnswer ( invocation -> { int theCount = connectionAttempts . incrementAndGet ( ) ; if ( theCount > NUMBER && theCount < NUMBER ) { throw new JmsException ( STRING ) {				} ; } return connection ; } ) . when ( org.springframework.integration.jms.ConnectionFactory ) . createConnection ( ) ; Session org.springframework.integration.jms.Session = mock ( Session .class ) ; when ( org.springframework.integration.jms.Connection . createSession ( false , NUMBER ) ) . thenReturn ( org.springframework.integration.jms.Session ) ; MessageConsumer org.springframework.integration.jms.MessageConsumer = mock ( MessageConsumer .class ) ; when ( org.springframework.integration.jms.Session . createConsumer ( any ( Destination .class ) , isNull ( ) ) ) . thenReturn ( org.springframework.integration.jms.MessageConsumer ) ; when ( org.springframework.integration.jms.Session . createTemporaryQueue ( ) ) . thenReturn ( mock ( TemporaryQueue .class ) ) ; final Message org.springframework.integration.jms.Message = mock ( Message .class ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; doAnswer ( invocation -> { int theCount = count . incrementAndGet ( ) ; if ( theCount > NUMBER && theCount < NUMBER ) { throw new JmsException ( STRING ) {				} ; } if ( theCount > NUMBER ) { Thread . sleep ( NUMBER ) ; return null ; } return message ; } ) . when ( org.springframework.integration.jms.MessageConsumer ) . receive ( anyLong ( ) ) ; when ( org.springframework.integration.jms.Message . getJMSCorrelationID ( ) ) . thenReturn ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.jms.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ThreadPoolTaskScheduler org.springframework.integration.jms.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.jms.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.jms.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.jms.ThreadPoolTaskScheduler ) ; org.springframework.integration.jms.JmsOutboundGateway . setBeanFactory ( org.springframework.integration.jms.DefaultListableBeanFactory ) ; org.springframework.integration.jms.JmsOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.jms.JmsOutboundGateway . start ( ) ; try { int int = NUMBER ; while ( int ++ < NUMBER && java.util.concurrent.atomic.AtomicInteger . int ( ) < NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER ) ; assertEquals ( NUMBER , java.util.List<java.lang.Throwable> . int ( ) ) ; } finally { org.springframework.integration.jms.JmsOutboundGateway . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( new ActiveMQConnectionFactory ( STRING ) ) ; final JmsOutboundGateway org.springframework.integration.jms.JmsOutboundGateway = new JmsOutboundGateway ( ) ; org.springframework.integration.jms.JmsOutboundGateway . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.jms.JmsOutboundGateway . setRequestDestinationName ( java.lang.String ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.jms.JmsOutboundGateway . setReplyDestinationName ( java.lang.String ) ; QueueChannel org.springframework.integration.jms.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.jms.JmsOutboundGateway . setOutputChannel ( org.springframework.integration.jms.QueueChannel ) ; org.springframework.integration.jms.JmsOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsOutboundGateway . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jms.JmsOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.jms.JmsOutboundGateway . start ( ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) org.springframework.integration.jms.JmsOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( new ActiveMQConnectionFactory ( STRING ) ) ; JmsTemplate org.springframework.integration.jms.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jms.JmsTemplate . afterPropertiesSet ( ) ; final Message org.springframework.integration.jms.Message = org.springframework.integration.jms.JmsTemplate . receive ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jms.Message ) ; org.springframework.integration.jms.CachingConnectionFactory . resetConnection ( ) ; MessageCreator org.springframework.integration.jms.MessageCreator = session -> { TextMessage reply1 = session . createTextMessage ( STRING ) ; reply1 . setJMSCorrelationID ( request . getJMSMessageID ( ) ) ; return reply1 ; } ; org.springframework.integration.jms.JmsTemplate . send ( java.lang.String , org.springframework.integration.jms.MessageCreator ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > received = org.springframework.integration.jms.QueueChannel . receive ( NUMBER ) ; assertNotNull ( received ) ; assertEquals ( STRING , received . getPayload ( ) ) ; org.springframework.integration.jms.JmsOutboundGateway . stop ( ) ; org.springframework.integration.jms.CachingConnectionFactory . destroy ( ) ; org.springframework.integration.jms.CachingConnectionFactory . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( new ActiveMQConnectionFactory ( STRING ) ) ; final JmsOutboundGateway org.springframework.integration.jms.JmsOutboundGateway = new JmsOutboundGateway ( ) ; org.springframework.integration.jms.JmsOutboundGateway . setConnectionFactory ( org.springframework.integration.jms.CachingConnectionFactory ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.jms.JmsOutboundGateway . setRequestDestinationName ( java.lang.String ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.jms.JmsOutboundGateway . setReplyDestinationName ( java.lang.String ) ; QueueChannel org.springframework.integration.jms.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.jms.JmsOutboundGateway . setOutputChannel ( org.springframework.integration.jms.QueueChannel ) ; org.springframework.integration.jms.JmsOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.JmsOutboundGateway . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jms.JmsOutboundGateway . setCorrelationKey ( STRING ) ; org.springframework.integration.jms.JmsOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.jms.JmsOutboundGateway . start ( ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) org.springframework.integration.jms.JmsOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; CachingConnectionFactory org.springframework.integration.jms.CachingConnectionFactory = new CachingConnectionFactory ( new ActiveMQConnectionFactory ( STRING ) ) ; JmsTemplate org.springframework.integration.jms.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.CachingConnectionFactory ) ; org.springframework.integration.jms.JmsTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jms.JmsTemplate . afterPropertiesSet ( ) ; final Message org.springframework.integration.jms.Message = org.springframework.integration.jms.JmsTemplate . receive ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jms.Message ) ; org.springframework.integration.jms.CachingConnectionFactory . resetConnection ( ) ; MessageCreator org.springframework.integration.jms.MessageCreator = session -> { TextMessage reply1 = session . createTextMessage ( STRING ) ; reply1 . setJMSCorrelationID ( request . getJMSCorrelationID ( ) ) ; return reply1 ; } ; org.springframework.integration.jms.Log . debug ( STRING + java.lang.String ) ; org.springframework.integration.jms.JmsTemplate . send ( java.lang.String , org.springframework.integration.jms.MessageCreator ) ; org.springframework.integration.jms.Log . debug ( STRING + java.lang.String ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > received = org.springframework.integration.jms.QueueChannel . receive ( NUMBER ) ; assertNotNull ( received ) ; assertEquals ( STRING , received . getPayload ( ) ) ; org.springframework.integration.jms.JmsOutboundGateway . stop ( ) ; org.springframework.integration.jms.CachingConnectionFactory . destroy ( ) ; org.springframework.integration.jms.CachingConnectionFactory . destroy ( ) ; }  <METHOD_END>
