<METHOD_START> @ Test public void void ( ) { AnnotationAuditingMetadata org.springframework.data.auditing.AnnotationAuditingMetadata = AnnotationAuditingMetadata . getMetadata ( AnnotatedUser .class ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata ) . isNotNull ( ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata . getCreatedByField ( ) ) . hasValue ( java.lang.reflect.Field ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata . getCreatedDateField ( ) ) . hasValue ( java.lang.reflect.Field ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata . getLastModifiedByField ( ) ) . hasValue ( java.lang.reflect.Field ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata . getLastModifiedDateField ( ) ) . hasValue ( java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAuditingMetadata org.springframework.data.auditing.AnnotationAuditingMetadata = AnnotationAuditingMetadata . getMetadata ( AnnotatedUser .class ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata ) . isNotNull ( ) ; AnnotationAuditingMetadata org.springframework.data.auditing.AnnotationAuditingMetadata = AnnotationAuditingMetadata . getMetadata ( AnnotatedUser .class ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata ) . isEqualTo ( org.springframework.data.auditing.AnnotationAuditingMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationAuditingMetadata org.springframework.data.auditing.AnnotationAuditingMetadata = AnnotationAuditingMetadata . getMetadata ( AnnotatedUser .class ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata ) . isNotNull ( ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata . isAuditable ( ) ) . isTrue ( ) ; org.springframework.data.auditing.AnnotationAuditingMetadata = AnnotationAuditingMetadata . getMetadata ( org.springframework.data.auditing.AnnotationAuditingMetadataUnitTests.NonAuditableUser .class ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata ) . isNotNull ( ) ; assertThat ( org.springframework.data.auditing.AnnotationAuditingMetadata . isAuditable ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class Sample { @ CreatedDate java.lang.String java.lang.String ; } org.springframework.data.auditing.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.auditing.ExpectedException . expectMessage ( java.lang.String .class . java.lang.String ( ) ) ; org.springframework.data.auditing.ExpectedException . expectMessage ( STRING ) ; AnnotationAuditingMetadata . getMetadata ( Sample .class ) ; }  <METHOD_END>
