<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.queries.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.queries.PlatformTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { getGraphDatabaseService ( ) . execute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; java.util.Collection<org.springframework.data.neo4j.queries.User> < User > java.util.Collection<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.User> < User > java.util.Iterator<org.springframework.data.neo4j.queries.User> = java.util.Collection<org.springframework.data.neo4j.queries.User> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; User org.springframework.data.neo4j.queries.User = java.util.Iterator<org.springframework.data.neo4j.queries.User> . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.User . getFriends ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getFriends ( ) . iterator ( ) . next ( ) . getName ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; java.util.Collection<org.springframework.data.neo4j.queries.User> < User > java.util.Collection<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByMiddleName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.User> < User > java.util.Iterator<org.springframework.data.neo4j.queries.User> = java.util.Collection<org.springframework.data.neo4j.queries.User> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; User org.springframework.data.neo4j.queries.User = java.util.Iterator<org.springframework.data.neo4j.queries.User> . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getMiddleName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.User . getFriends ( ) . size ( ) ) ; User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.User . getFriends ( ) . iterator ( ) . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getMiddleName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.Collection<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.Collection<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> = java.util.Collection<org.springframework.data.neo4j.queries.Cinema> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; Cinema org.springframework.data.neo4j.queries.Cinema = java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . iterator ( ) . next ( ) . getName ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocation ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.Collection<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.Collection<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> = java.util.Collection<org.springframework.data.neo4j.queries.Cinema> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; Cinema org.springframework.data.neo4j.queries.Cinema = java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . iterator ( ) . next ( ) . getName ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocation ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByNameAndLocation ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getVisited ( ) . iterator ( ) . next ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByNameOrLocation ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; java.util.Collection<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.Collection<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityGreaterThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityGreaterThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityLessThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityLessThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityGreaterThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityGreaterThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityLessThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityLessThan ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationAndCapacityGreaterThan ( STRING , NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityLessThanAndLocation ( NUMBER , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationAndCapacityGreaterThan ( STRING , NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityLessThanAndLocation ( NUMBER , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationOrCapacityLessThan ( STRING , NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityGreaterThanOrLocation ( NUMBER , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationOrCapacityLessThan ( STRING , NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacityGreaterThanOrLocation ( NUMBER , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedName ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationAndVisitedName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { void ( STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationOrVisitedName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.User> < User > java.util.List<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByRatingsStars ( NUMBER ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.User> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.User> . contains ( new User ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.User> . contains ( new User ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { void ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameOrBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameOrBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameOrBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameOrBlockbusterOfTheWeekName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndVisitedMiddleName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndVisitedMiddleName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndVisitedMiddleName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.Cinema> . contains ( new Cinema ( STRING ) ) ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedNameAndVisitedMiddleName ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.User> < User > java.util.List<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByRatingsStarsAndInterestedName ( NUMBER , STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.User> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.neo4j.queries.User> . contains ( new User ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByNameMatches ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getLocation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationLike ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationLike ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.User> < User > java.util.List<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameIsNotLike ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.data.neo4j.queries.User> . size ( ) ) ; assertEquals ( STRING , STRING , java.util.List<org.springframework.data.neo4j.queries.User> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.Collection<org.springframework.data.neo4j.queries.Director> < Director > java.util.Collection<org.springframework.data.neo4j.queries.Director> = org.springframework.data.neo4j.queries.DirectorRepository . findByName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.Director> < Director > java.util.Iterator<org.springframework.data.neo4j.queries.Director> = java.util.Collection<org.springframework.data.neo4j.queries.Director> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.Director> . hasNext ( ) ) ; Director org.springframework.data.neo4j.queries.Director = java.util.Iterator<org.springframework.data.neo4j.queries.Director> . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Director . getName ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.Director> . hasNext ( ) ) ; java.util.Collection<org.springframework.data.neo4j.queries.Director> = org.springframework.data.neo4j.queries.DirectorRepository . findByName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.Director> = java.util.Collection<org.springframework.data.neo4j.queries.Director> . iterator ( ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.Director> . hasNext ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.Collection<org.springframework.data.neo4j.queries.Director> < Director > java.util.Collection<org.springframework.data.neo4j.queries.Director> = org.springframework.data.neo4j.queries.DirectorRepository . findByName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.Director> < Director > java.util.Iterator<org.springframework.data.neo4j.queries.Director> = java.util.Collection<org.springframework.data.neo4j.queries.Director> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.Director> . hasNext ( ) ) ; Director org.springframework.data.neo4j.queries.Director = java.util.Iterator<org.springframework.data.neo4j.queries.Director> . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Director . getName ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.Director> . hasNext ( ) ) ; java.util.Collection<org.springframework.data.neo4j.queries.Director> = org.springframework.data.neo4j.queries.DirectorRepository . findByName ( STRING ) ; java.util.Iterator<org.springframework.data.neo4j.queries.Director> = java.util.Collection<org.springframework.data.neo4j.queries.Director> . iterator ( ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.Director> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { Cinema org.springframework.data.neo4j.queries.Cinema = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING , NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.queries.Cinema ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( null , org.springframework.data.neo4j.queries.Cinema . getBlockbusterOfTheWeek ( ) ) ; org.springframework.data.neo4j.queries.Cinema = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING , NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.queries.Cinema ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . iterator ( ) . next ( ) . getRatings ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getBlockbusterOfTheWeek ( ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Cinema = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING , NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.queries.Cinema ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . iterator ( ) . next ( ) . getRatings ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getBlockbusterOfTheWeek ( ) . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { Cinema org.springframework.data.neo4j.queries.Cinema = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING , NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.queries.Cinema ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( null , org.springframework.data.neo4j.queries.Cinema . getBlockbusterOfTheWeek ( ) ) ; org.springframework.data.neo4j.queries.Cinema = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING , NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.queries.Cinema ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . iterator ( ) . next ( ) . getRatings ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getBlockbusterOfTheWeek ( ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Cinema = org.springframework.data.neo4j.queries.CinemaRepository . findByName ( STRING , NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.queries.Cinema ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Cinema . getVisited ( ) . iterator ( ) . next ( ) . getRatings ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Cinema . getBlockbusterOfTheWeek ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findBySurname ( STRING ) ; assertNotNull ( org.springframework.data.neo4j.queries.User ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getSurname ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.User . getFriends ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING ) ; java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> < EntityWrappingQueryResult > java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> = org.springframework.data.neo4j.queries.UserRepository . findRatingsWithLiteralMap ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . size ( ) ) ; EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . get ( NUMBER ) ; if ( org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) . equals ( STRING ) ) { assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getLiteralMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getLiteralMap ( ) . iterator ( ) . next ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getLiteralMap ( ) . iterator ( ) . next ( ) . get ( STRING ) ) ; } else { assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getLiteralMap ( ) . size ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { int int = NUMBER ; void ( STRING ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( int ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.concurrent.ExecutorService . java.util.concurrent.Future<?> ( new org.springframework.data.neo4j.queries.DerivedQueryTests.DerivedQueryRunner ( java.util.concurrent.CountDownLatch , java.lang.String[] [ int ] , java.lang.String[] [ int ] ) ) ; } java.util.concurrent.CountDownLatch . void ( ) ; java.util.concurrent.ExecutorService . java.util.List<java.lang.Runnable> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.data.neo4j.queries.UserRepository . save ( new User ( STRING , STRING ) ) ; } org.springframework.data.neo4j.queries.UserRepository . save ( new User ( STRING , STRING ) ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < User > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndSurname ( STRING , STRING , org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getTotalElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumber ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isFirst ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isLast ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndSurname ( STRING , STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getTotalElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumber ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isFirst ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isLast ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndSurname ( STRING , STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getTotalElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumber ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isFirst ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isLast ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndSurname ( STRING , STRING , new PageRequest ( NUMBER , NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getTotalElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . getNumber ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isFirst ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . isLast ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { User org.springframework.data.neo4j.queries.User = new User ( STRING ) ; org.springframework.data.neo4j.queries.User . rate ( new TempMovie ( STRING ) , NUMBER , STRING ) ; org.springframework.data.neo4j.queries.UserRepository . save ( org.springframework.data.neo4j.queries.User ) ; } org.springframework.data.neo4j.queries.UserRepository . save ( new User ( STRING , STRING ) ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Slice < User > org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndRatingsStars ( STRING , NUMBER , org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndRatingsStars ( STRING , NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndRatingsStars ( STRING , NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findByNameAndRatingsStars ( STRING , NUMBER , new PageRequest ( NUMBER , NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.User> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findBySurname ( java.lang.String ) ; assertNotNull ( org.springframework.data.neo4j.queries.User ) ; assertEquals ( java.lang.String , org.springframework.data.neo4j.queries.User . getName ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.neo4j.queries.User . getSurname ( ) ) ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.PlatformTransactionManager org.springframework.data.neo4j.queries.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.queries.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.SessionFactory org.springframework.data.neo4j.queries.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
