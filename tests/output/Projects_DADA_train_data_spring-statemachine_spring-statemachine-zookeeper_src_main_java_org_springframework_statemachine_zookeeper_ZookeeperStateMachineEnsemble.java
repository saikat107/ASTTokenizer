<METHOD_START> public void ( CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework , java.lang.String java.lang.String ) { this( org.springframework.statemachine.zookeeper.CuratorFramework , java.lang.String , true , int ); }  <METHOD_END>
<METHOD_START> public void ( CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework , java.lang.String java.lang.String , boolean boolean , int int ) { this . org.springframework.statemachine.zookeeper.CuratorFramework = org.springframework.statemachine.zookeeper.CuratorFramework ; this . boolean = boolean ; this . int = int ; this . java.lang.String = java.lang.String + STRING ; this . java.lang.String = java.lang.String + STRING + java.lang.String ; this . java.lang.String = java.lang.String + STRING + java.lang.String ; this . java.lang.String = java.lang.String + STRING + java.lang.String ; this . java.lang.String = java.lang.String + STRING + java.lang.String ; this . org.springframework.statemachine.zookeeper.StateMachinePersist<S,E,org.springframework.statemachine.zookeeper.Stat> = new ZookeeperStateMachinePersist < S , E > ( org.springframework.statemachine.zookeeper.CuratorFramework , java.lang.String , java.lang.String , int ) ; setAutoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { void ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper == null ) { try { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.zookeeper.Log . error ( STRING , java.lang.Exception ) ; } } org.springframework.statemachine.zookeeper.CuratorFramework . getConnectionStateListenable ( ) . addListener ( org.springframework.statemachine.zookeeper.ConnectionStateListener ) ; if ( org.springframework.statemachine.zookeeper.CuratorFramework . getState ( ) == CuratorFrameworkState . STARTED ) { void ( ) ; } else { org.springframework.statemachine.zookeeper.CuratorFramework . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( org.springframework.statemachine.zookeeper.PersistentEphemeralNode != null && org.springframework.statemachine.zookeeper.CuratorFramework . getState ( ) != CuratorFrameworkState . STOPPED ) { try { org.springframework.statemachine.zookeeper.PersistentEphemeralNode . close ( ) ; } catch ( java.io.IOException java.io.IOException ) {			} finally { org.springframework.statemachine.zookeeper.PersistentEphemeralNode = null ; } } org.springframework.statemachine.zookeeper.CuratorFramework . getConnectionStateListenable ( ) . removeListener ( org.springframework.statemachine.zookeeper.ConnectionStateListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.zookeeper.StateMachine<S,E> ) { if ( ! isRunning ( ) ) { java.util.Queue<org.springframework.statemachine.zookeeper.StateMachine<S,E>> . add ( org.springframework.statemachine.zookeeper.StateMachine<S,E> ) ; } else { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; synchronized ( java.lang.Object ) { java.util.List<org.springframework.statemachine.zookeeper.StateMachine<S,E>> . add ( org.springframework.statemachine.zookeeper.StateMachine<S,E> ) ; } void ( org.springframework.statemachine.zookeeper.StateMachine<S,E> , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper != null ? org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> : null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.zookeeper.StateMachine<S,E> < S , E > org.springframework.statemachine.zookeeper.StateMachine<S,E> ( ) { return null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { StateMachine < S , E > org.springframework.statemachine.zookeeper.StateMachine<S,E> = null ; synchronized ( java.lang.Object ) { while ( ( org.springframework.statemachine.zookeeper.StateMachine<S,E> = java.util.Queue<org.springframework.statemachine.zookeeper.StateMachine<S,E>> . poll ( ) ) != null ) { java.util.List<org.springframework.statemachine.zookeeper.StateMachine<S,E>> . add ( org.springframework.statemachine.zookeeper.StateMachine<S,E> ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; synchronized ( java.lang.Object ) { for ( StateMachine < S , E > org.springframework.statemachine.zookeeper.StateMachine<S,E> : java.util.List<org.springframework.statemachine.zookeeper.StateMachine<S,E>> ) { void ( org.springframework.statemachine.zookeeper.StateMachine<S,E> , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper != null ? org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> : null ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; synchronized ( java.lang.Object ) { for ( StateMachine < S , E > org.springframework.statemachine.zookeeper.StateMachine<S,E> : java.util.List<org.springframework.statemachine.zookeeper.StateMachine<S,E>> ) { void ( org.springframework.statemachine.zookeeper.StateMachine<S,E> , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper != null ? org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> : null ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.zookeeper.StateMachine<S,E> ) { if ( org.springframework.statemachine.zookeeper.PersistentEphemeralNode != null ) { try { org.springframework.statemachine.zookeeper.PersistentEphemeralNode . close ( ) ; } catch ( java.io.IOException java.io.IOException ) {			} } boolean boolean = false ; synchronized ( java.lang.Object ) { boolean = java.util.List<org.springframework.statemachine.zookeeper.StateMachine<S,E>> . remove ( org.springframework.statemachine.zookeeper.StateMachine<S,E> ) ; } if ( boolean ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; void ( org.springframework.statemachine.zookeeper.StateMachine<S,E> , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper != null ? org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> : null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( StateMachineContext < S , E > org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ) { if ( org.springframework.statemachine.zookeeper.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . debug ( STRING + org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ) ; } try { Stat org.springframework.statemachine.zookeeper.Stat = new Stat ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper != null ) { org.springframework.statemachine.zookeeper.Stat . setVersion ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int ) ; } if ( org.springframework.statemachine.zookeeper.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . debug ( STRING + org.springframework.statemachine.zookeeper.StateMachineContext<S,E> + STRING + org.springframework.statemachine.zookeeper.Stat . getVersion ( ) + STRING + java.lang.String ) ; } org.springframework.statemachine.zookeeper.StateMachinePersist<S,E,org.springframework.statemachine.zookeeper.Stat> . write ( org.springframework.statemachine.zookeeper.StateMachineContext<S,E> , org.springframework.statemachine.zookeeper.Stat ) ; if ( org.springframework.statemachine.zookeeper.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . debug ( STRING + org.springframework.statemachine.zookeeper.StateMachineContext<S,E> + STRING + org.springframework.statemachine.zookeeper.Stat . getVersion ( ) + STRING + java.lang.String ) ; } java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . void ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( org.springframework.statemachine.zookeeper.StateMachineContext<S,E> , org.springframework.statemachine.zookeeper.Stat . getVersion ( ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new StateMachineException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.zookeeper.StateMachineContext<S,E> < S , E > org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ( ) { return org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.statemachine.zookeeper.Log . info ( STRING ) ; void ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.statemachine.zookeeper.Log . info ( STRING ) ; notifyError ( new StateMachineEnsembleException ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) { try { Stat org.springframework.statemachine.zookeeper.Stat = new Stat ( ) ; void ( ) ; StateMachineContext < S , E > org.springframework.statemachine.zookeeper.StateMachineContext<S,E> = org.springframework.statemachine.zookeeper.StateMachinePersist<S,E,org.springframework.statemachine.zookeeper.Stat> . read ( org.springframework.statemachine.zookeeper.Stat ) ; return new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( org.springframework.statemachine.zookeeper.StateMachineContext<S,E> , org.springframework.statemachine.zookeeper.Stat . getVersion ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new StateMachineException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { InterProcessSemaphoreMutex org.springframework.statemachine.zookeeper.InterProcessSemaphoreMutex = new InterProcessSemaphoreMutex ( org.springframework.statemachine.zookeeper.CuratorFramework , java.lang.String ) ; try { if ( org.springframework.statemachine.zookeeper.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . trace ( STRING ) ; } org.springframework.statemachine.zookeeper.InterProcessSemaphoreMutex . acquire ( ) ; if ( org.springframework.statemachine.zookeeper.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . trace ( STRING ) ; } if ( boolean ) { if ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( java.lang.String ) != null ) { if ( org.springframework.statemachine.zookeeper.CuratorFramework . getChildren ( ) . forPath ( java.lang.String ) . size ( ) == NUMBER ) { org.springframework.statemachine.zookeeper.Log . info ( STRING + java.lang.String ) ; org.springframework.statemachine.zookeeper.CuratorFramework . delete ( ) . deletingChildrenIfNeeded ( ) . forPath ( java.lang.String ) ; } } } org.springframework.statemachine.zookeeper.PersistentEphemeralNode = new PersistentEphemeralNode ( org.springframework.statemachine.zookeeper.CuratorFramework , Mode . EPHEMERAL , java.lang.String + STRING + java.lang.String , new byte [ NUMBER ] ) ; org.springframework.statemachine.zookeeper.PersistentEphemeralNode . start ( ) ; org.springframework.statemachine.zookeeper.PersistentEphemeralNode . waitForInitialCreate ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( java.lang.String ) == null ) { CuratorTransaction org.springframework.statemachine.zookeeper.CuratorTransaction = org.springframework.statemachine.zookeeper.CuratorFramework . inTransaction ( ) ; CuratorTransactionFinal org.springframework.statemachine.zookeeper.CuratorTransactionFinal = org.springframework.statemachine.zookeeper.CuratorTransaction . create ( ) . forPath ( java.lang.String ) . and ( ) ; org.springframework.statemachine.zookeeper.CuratorTransactionFinal = org.springframework.statemachine.zookeeper.CuratorTransactionFinal . create ( ) . forPath ( java.lang.String ) . and ( ) ; org.springframework.statemachine.zookeeper.CuratorTransactionFinal = org.springframework.statemachine.zookeeper.CuratorTransactionFinal . create ( ) . forPath ( java.lang.String ) . and ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.statemachine.zookeeper.CuratorTransactionFinal = org.springframework.statemachine.zookeeper.CuratorTransactionFinal . create ( ) . forPath ( java.lang.String + STRING + int ) . and ( ) ; } org.springframework.statemachine.zookeeper.CuratorTransactionFinal . commit ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.zookeeper.Log . warn ( STRING , java.lang.Exception ) ; } finally { try { org.springframework.statemachine.zookeeper.InterProcessSemaphoreMutex . release ( ) ; if ( org.springframework.statemachine.zookeeper.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . trace ( STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) {			} } }  <METHOD_END>
<METHOD_START> protected void void ( ) { try { if ( org.springframework.statemachine.zookeeper.CuratorFramework . getState ( ) != CuratorFrameworkState . STOPPED ) { org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . usingWatcher ( org.springframework.statemachine.zookeeper.CuratorWatcher ) . forPath ( java.lang.String ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.zookeeper.Log . warn ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper == null ) { if ( org.springframework.statemachine.zookeeper.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . debug ( STRING + org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper + STRING + this ) ; } java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; notifyStateChanged ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ) ; } else if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int ) { if ( org.springframework.statemachine.zookeeper.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . debug ( STRING + org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper + STRING + org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper + STRING + this ) ; } java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; notifyStateChanged ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) { if ( org.springframework.statemachine.zookeeper.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . trace ( STRING + java.lang.String + STRING + org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper + STRING + org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper + STRING + org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WatchedEvent org.springframework.statemachine.zookeeper.WatchedEvent ) throws java.lang.Exception { if ( org.springframework.statemachine.zookeeper.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . trace ( STRING + java.lang.String + STRING + org.springframework.statemachine.zookeeper.WatchedEvent ) ; } switch ( org.springframework.statemachine.zookeeper.WatchedEvent . getType ( ) ) { case NodeDataChanged : try { if ( boolean ( ) ) { boolean ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.zookeeper.Log . error ( STRING , java.lang.Exception ) ; } void ( ) ; break; default: void ( ) ; break; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) java.lang.Exception { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int + NUMBER == org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int && org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int >= org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int && java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . boolean ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ) { void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; } else { final int int = ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper != null ? ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int ) : NUMBER ) % int ; int int = org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int - ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper != null ? ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int ) : NUMBER ) ; if ( org.springframework.statemachine.zookeeper.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . debug ( STRING + int + STRING + int ) ; } for ( int int = int ; int < ( int + int ) ; int ++ ) { Stat org.springframework.statemachine.zookeeper.Stat = new Stat ( ) ; StateMachineContext < S , E > org.springframework.statemachine.zookeeper.StateMachineContext<S,E> = ( ( ZookeeperStateMachinePersist < S , E > ) org.springframework.statemachine.zookeeper.StateMachinePersist<S,E,org.springframework.statemachine.zookeeper.Stat> ) . readLog ( int , org.springframework.statemachine.zookeeper.Stat ) ; int int = ( org.springframework.statemachine.zookeeper.Stat . getVersion ( ) - NUMBER ) * int + ( int + NUMBER ) ; if ( int + int < int ) { notifyError ( new StateMachineEnsembleException ( STRING ) ) ; break; } if ( org.springframework.statemachine.zookeeper.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.zookeeper.Log . debug ( STRING + int + STRING + int ) ; org.springframework.statemachine.zookeeper.Log . debug ( STRING + int + STRING + org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ) ; } org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( org.springframework.statemachine.zookeeper.StateMachineContext<S,E> , int ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper = java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ( ) ; if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> == null ) { java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; } else if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int == org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper . int + NUMBER ) { java.util.concurrent.atomic.AtomicReference<org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper> . void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; } void ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<S,E>.StateWrapper ) ; } return int > NUMBER ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework , ConnectionState org.springframework.statemachine.zookeeper.ConnectionState ) { if ( org.springframework.statemachine.zookeeper.CuratorFramework == org.springframework.statemachine.zookeeper.CuratorFramework ) { switch ( org.springframework.statemachine.zookeeper.ConnectionState ) { case CONNECTED : case RECONNECTED : void ( ) ; break; case READ_ONLY : break; case LOST : case SUSPENDED : void ( ) ; break; default: break; } } }  <METHOD_END>
<METHOD_START> public void ( StateMachineContext < S , E > org.springframework.statemachine.zookeeper.StateMachineContext<S,E> , int int ) { this . org.springframework.statemachine.zookeeper.StateMachineContext<S,E> = org.springframework.statemachine.zookeeper.StateMachineContext<S,E> ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.statemachine.zookeeper.StateMachineContext<S,E> + STRING + int + STRING ; }  <METHOD_END>
