<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String ... java.lang.String[] ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; assertEquals ( java.lang.String[] . int , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getAsyncEventQueueIds ( ) . size ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) { assertTrue ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . boolean ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String ... java.lang.String[] ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheListeners ( ) ) ; assertEquals ( java.lang.String[] . int , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheListeners ( ) . length ) ; for ( CacheListener org.springframework.data.gemfire.config.xml.CacheListener : org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheListeners ( ) ) { assertTrue ( org.springframework.data.gemfire.config.xml.CacheListener instanceof org.springframework.data.gemfire.config.xml.TemplateRegionsNamespaceTests.TestCacheListener ) ; assertTrue ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . boolean ( org.springframework.data.gemfire.config.xml.CacheListener . toString ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheLoader ( ) instanceof org.springframework.data.gemfire.config.xml.TemplateRegionsNamespaceTests.TestCacheLoader ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheLoader ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheWriter ( ) instanceof org.springframework.data.gemfire.config.xml.TemplateRegionsNamespaceTests.TestCacheWriter ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCacheWriter ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final EvictionAttributes org.springframework.data.gemfire.config.xml.EvictionAttributes ) { assumeNotNull ( org.springframework.data.gemfire.config.xml.EvictionAttributes ) ; void ( org.springframework.data.gemfire.config.xml.EvictionAttributes , EvictionAction . NONE , EvictionAlgorithm . NONE , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final EvictionAttributes org.springframework.data.gemfire.config.xml.EvictionAttributes , final EvictionAction org.springframework.data.gemfire.config.xml.EvictionAction , final EvictionAlgorithm org.springframework.data.gemfire.config.xml.EvictionAlgorithm , final int int , final ObjectSizer org.springframework.data.gemfire.config.xml.ObjectSizer ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.EvictionAttributes ) ; assertEquals ( org.springframework.data.gemfire.config.xml.EvictionAction , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAction ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.EvictionAlgorithm , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAlgorithm ( ) ) ; assertEquals ( int , org.springframework.data.gemfire.config.xml.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.ObjectSizer , org.springframework.data.gemfire.config.xml.EvictionAttributes . getObjectSizer ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes ) { assumeNotNull ( org.springframework.data.gemfire.config.xml.ExpirationAttributes ) ; assertEquals ( ExpirationAction . INVALIDATE , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ExpirationAttributes org.springframework.data.gemfire.config.xml.ExpirationAttributes , final ExpirationAction org.springframework.data.gemfire.config.xml.ExpirationAction , final int int ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.ExpirationAttributes ) ; assertEquals ( org.springframework.data.gemfire.config.xml.ExpirationAction , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getAction ( ) ) ; assertEquals ( int , org.springframework.data.gemfire.config.xml.ExpirationAttributes . getTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String ... java.lang.String[] ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertEquals ( java.lang.String[] . int , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getGatewaySenderIds ( ) . size ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getGatewaySenderIds ( ) ) { assertTrue ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . boolean ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final MembershipAttributes org.springframework.data.gemfire.config.xml.MembershipAttributes ) { assumeNotNull ( org.springframework.data.gemfire.config.xml.MembershipAttributes ) ; void ( org.springframework.data.gemfire.config.xml.MembershipAttributes , LossAction . FULL_ACCESS , ResumptionAction . NONE ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final MembershipAttributes org.springframework.data.gemfire.config.xml.MembershipAttributes , final LossAction org.springframework.data.gemfire.config.xml.LossAction , final ResumptionAction org.springframework.data.gemfire.config.xml.ResumptionAction , final java.lang.String ... java.lang.String[] ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.MembershipAttributes ) ; assertEquals ( org.springframework.data.gemfire.config.xml.LossAction , org.springframework.data.gemfire.config.xml.MembershipAttributes . getLossAction ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.ResumptionAction , org.springframework.data.gemfire.config.xml.MembershipAttributes . getResumptionAction ( ) ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { for ( Role org.springframework.data.gemfire.config.xml.Role : org.springframework.data.gemfire.config.xml.MembershipAttributes . getRequiredRoles ( ) ) { assertTrue ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.xml.Role ) , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . boolean ( org.springframework.data.gemfire.config.xml.Role . getName ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String ... java.lang.String[] ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) . getPartitionListeners ( ) ) ; assertEquals ( java.lang.String[] . int , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) . getPartitionListeners ( ) . length ) ; for ( PartitionListener org.springframework.data.gemfire.config.xml.PartitionListener : org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) . getPartitionListeners ( ) ) { assertTrue ( org.springframework.data.gemfire.config.xml.PartitionListener instanceof org.springframework.data.gemfire.config.xml.TemplateRegionsNamespaceTests.TestPartitionListener ) ; assertTrue ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . boolean ( org.springframework.data.gemfire.config.xml.PartitionListener . toString ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) . getPartitionResolver ( ) instanceof org.springframework.data.gemfire.config.xml.TemplateRegionsNamespaceTests.TestPartitionResolver ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) . getPartitionResolver ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final Region org.springframework.data.gemfire.config.xml.Region ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCompressor ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCustomEntryIdleTimeout ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCustomEntryTimeToLive ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDiskStoreName ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getMulticastEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getPoolName ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getRegionTimeToLive ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getRegionIdleTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final SubscriptionAttributes org.springframework.data.gemfire.config.xml.SubscriptionAttributes ) { assumeNotNull ( org.springframework.data.gemfire.config.xml.SubscriptionAttributes ) ; void ( org.springframework.data.gemfire.config.xml.SubscriptionAttributes , InterestPolicy . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final SubscriptionAttributes org.springframework.data.gemfire.config.xml.SubscriptionAttributes , final InterestPolicy org.springframework.data.gemfire.config.xml.InterestPolicy ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.SubscriptionAttributes ) ; assertEquals ( org.springframework.data.gemfire.config.xml.InterestPolicy , org.springframework.data.gemfire.config.xml.SubscriptionAttributes . getInterestPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final java.lang.Object [] java.lang.Object[] ) { assertTrue ( ( java.lang.Object[] == null || java.lang.Object[] . int == NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { assertTrue ( java.lang.Iterable<> == null || ! java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final java.lang.String java.lang.String ) { assertFalse ( StringUtils . hasText ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String ) { void ( org.springframework.data.gemfire.config.xml.Region<,> , java.lang.String , Region . SEPARATOR + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING , STRING } ; for ( java.lang.String java.lang.String : java.lang.String[] ) { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( java.lang.String ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBeanDefinition ( java.lang.String ) ) ; try { org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( java.lang.String ) ; fail ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } catch ( BeansException org.springframework.data.gemfire.config.xml.BeansException ) { assertTrue ( org.springframework.data.gemfire.config.xml.BeansException instanceof BeanIsAbstractException ) ; assertTrue ( org.springframework.data.gemfire.config.xml.BeansException . getMessage ( ) . contains ( java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getCacheListeners ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> , STRING ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getConcurrencyLevel ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getDataPolicy ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEnableAsyncConflation ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEnableSubscriptionConflation ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEvictionAttributes ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEntryIdleTimeout ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEntryTimeToLive ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . isLockGrantor ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getMembershipAttributes ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( Scope . DISTRIBUTED_NO_ACK , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getScope ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getStatisticsEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getSubscriptionAttributes ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> , STRING ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getConcurrencyLevel ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEnableAsyncConflation ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEnableSubscriptionConflation ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEvictionAttributes ( ) , EvictionAction . OVERFLOW_TO_DISK , EvictionAlgorithm . LRU_ENTRY , NUMBER , null ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEntryIdleTimeout ( ) , ExpirationAction . DESTROY , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEntryTimeToLive ( ) , ExpirationAction . INVALIDATE , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . isLockGrantor ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getMembershipAttributes ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( Scope . GLOBAL , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getScope ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getStatisticsEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getSubscriptionAttributes ( ) , InterestPolicy . CACHE_CONTENT ) ; assertEquals ( java.lang.Object .class , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> , STRING ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getConcurrencyLevel ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEnableAsyncConflation ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEnableSubscriptionConflation ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEvictionAttributes ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEntryIdleTimeout ( ) , ExpirationAction . DESTROY , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getEntryTimeToLive ( ) , ExpirationAction . DESTROY , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . isLockGrantor ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getMembershipAttributes ( ) , LossAction . LIMITED_ACCESS , ResumptionAction . NONE , STRING ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( Scope . DISTRIBUTED_NO_ACK , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getScope ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getStatisticsEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getSubscriptionAttributes ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Integer,java.lang.String> . getAttributes ( ) . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> , STRING ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getCacheLoader ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getCacheWriter ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getConcurrencyLevel ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEnableAsyncConflation ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEnableSubscriptionConflation ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEvictionAttributes ( ) , EvictionAction . OVERFLOW_TO_DISK , EvictionAlgorithm . LRU_ENTRY , NUMBER , null ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEntryIdleTimeout ( ) , ExpirationAction . DESTROY , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getEntryTimeToLive ( ) , ExpirationAction . INVALIDATE , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getLoadFactor ( ) , NUMBER ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . isLockGrantor ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getMembershipAttributes ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( Scope . DISTRIBUTED_ACK , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getScope ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getStatisticsEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getSubscriptionAttributes ( ) , InterestPolicy . CACHE_CONTENT ) ; assertEquals ( java.lang.Object .class , org.springframework.data.gemfire.config.xml.Region<java.lang.String,java.lang.Object> . getAttributes ( ) . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_PARTITION , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getDataPolicy ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getEnableAsyncConflation ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getEnableSubscriptionConflation ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getEvictionAttributes ( ) , EvictionAction . OVERFLOW_TO_DISK , EvictionAlgorithm . LRU_ENTRY , NUMBER , null ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getEntryIdleTimeout ( ) , ExpirationAction . DESTROY , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getEntryTimeToLive ( ) , ExpirationAction . INVALIDATE , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( java.util.Date .class , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . isLockGrantor ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getMembershipAttributes ( ) , LossAction . NO_ACCESS , ResumptionAction . REINITIALIZE , STRING , STRING , STRING ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) . getColocatedWith ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) . getLocalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) . getRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) . getStartupRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) . getTotalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getPartitionAttributes ( ) . getTotalNumBuckets ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> , STRING ) ; assertEquals ( Scope . DISTRIBUTED_NO_ACK , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getScope ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getStatisticsEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getSubscriptionAttributes ( ) , InterestPolicy . ALL ) ; assertEquals ( java.lang.Object .class , org.springframework.data.gemfire.config.xml.Region<java.util.Date,java.lang.Object> . getAttributes ( ) . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> , STRING ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> , STRING , STRING , STRING ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getCacheLoader ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getCacheWriter ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getConcurrencyLevel ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getEnableAsyncConflation ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getEnableSubscriptionConflation ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getEvictionAttributes ( ) , EvictionAction . LOCAL_DESTROY , EvictionAlgorithm . LRU_ENTRY , NUMBER , null ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getEntryIdleTimeout ( ) , ExpirationAction . DESTROY , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getEntryTimeToLive ( ) , ExpirationAction . INVALIDATE , NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( java.lang.Long .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . isLockGrantor ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getMembershipAttributes ( ) ) ; assertNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( Scope . LOCAL , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getScope ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getStatisticsEnabled ( ) ) ; void ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getSubscriptionAttributes ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.util.List<org.springframework.data.gemfire.config.xml.AsyncEvent> < AsyncEvent > java.util.List<org.springframework.data.gemfire.config.xml.AsyncEvent> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final LoaderHelper org.springframework.data.gemfire.config.xml.LoaderHelper ) throws org.springframework.data.gemfire.config.xml.CacheLoaderException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final EntryOperation org.springframework.data.gemfire.config.xml.EntryOperation ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
