<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { RequestParam org.springframework.web.method.annotation.RequestParam = org.springframework.web.method.annotation.MethodParameter . getParameterAnnotation ( RequestParam .class ) ; if ( org.springframework.web.method.annotation.RequestParam != null ) { if ( java.util.Map .class . boolean ( org.springframework.web.method.annotation.MethodParameter . getParameterType ( ) ) ) { return ! StringUtils . hasText ( org.springframework.web.method.annotation.RequestParam . name ( ) ) ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.method.annotation.MethodParameter . getParameterType ( ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.web.method.annotation.NativeWebRequest . getParameterMap ( ) ; if ( MultiValueMap .class . boolean ( java.lang.Class<> ) ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map.Entry<java.lang.String,java.lang.String[]> : java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String[]>> ( ) ) { for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String[] ( ) ) { org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . add ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String ( ) , java.lang.String ) ; } } return org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ; } else { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map.Entry<java.lang.String,java.lang.String[]> : java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String[]>> ( ) ) { if ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String[] ( ) . int > NUMBER ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String[] ( ) [ NUMBER ] ) ; } } return java.util.Map<java.lang.String,java.lang.String> ; } }  <METHOD_END>
