<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.config.common.annotation.importing.BeanDefinition org.springframework.statemachine.config.common.annotation.importing.BeanDefinition ( AnnotationMetadata org.springframework.statemachine.config.common.annotation.importing.AnnotationMetadata , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) throws java.lang.Exception { java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> = java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) ; java.lang.String [] java.lang.String[] = null ; if ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { AnnotationAttributes org.springframework.statemachine.config.common.annotation.importing.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.statemachine.config.common.annotation.importing.AnnotationMetadata . getAnnotationAttributes ( java.lang.Class<> . java.lang.String ( ) , false ) ) ; if ( org.springframework.statemachine.config.common.annotation.importing.AnnotationAttributes . containsKey ( STRING ) ) { java.lang.String[] = org.springframework.statemachine.config.common.annotation.importing.AnnotationAttributes . getStringArray ( STRING ) ; break; } } } BeanDefinitionBuilder org.springframework.statemachine.config.common.annotation.importing.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( org.springframework.statemachine.config.common.annotation.importing.SimpleImportingConfiguration.SimpleUUIDDelegatingFactoryBean .class ) ; org.springframework.statemachine.config.common.annotation.importing.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfigBuilder ) ; org.springframework.statemachine.config.common.annotation.importing.BeanDefinitionBuilder . addConstructorArgValue ( java.util.UUID .class ) ; org.springframework.statemachine.config.common.annotation.importing.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String[] ) ; return org.springframework.statemachine.config.common.annotation.importing.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> = new java.util.ArrayList<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > ( ) ; java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( EnableImportingTest .class ) ; return java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ; }  <METHOD_END>
<METHOD_START> public void ( ImportingTestConfigBuilder org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfigBuilder , java.lang.Class<java.util.UUID> < java.util.UUID > java.lang.Class<java.util.UUID> , java.lang.String [] java.lang.String[] ) { super( org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfigBuilder , java.lang.Class<java.util.UUID> ); this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { for ( AnnotationConfigurer < ImportingTestConfig , ImportingTestConfigBuilder > org.springframework.statemachine.config.common.annotation.importing.AnnotationConfigurer<org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfig,org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfigBuilder> : getConfigurers ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.statemachine.config.common.annotation.importing.AnnotationConfigurer<org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfig,org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfigBuilder> . getClass ( ) ; EnableImportingTest org.springframework.statemachine.config.common.annotation.importing.EnableImportingTest = AnnotationUtils . findAnnotation ( java.lang.Class<> , EnableImportingTest .class ) ; java.lang.String [] java.lang.String[] = org.springframework.statemachine.config.common.annotation.importing.EnableImportingTest . name ( ) ; if ( java.lang.String[] [ NUMBER ] . boolean ( java.lang.String[] [ NUMBER ] ) ) { getBuilder ( ) . apply ( org.springframework.statemachine.config.common.annotation.importing.AnnotationConfigurer<org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfig,org.springframework.statemachine.config.common.annotation.importing.ImportingTestConfigBuilder> ) ; } } setObject ( getBuilder ( ) . getOrBuild ( ) . importingData ) ; }  <METHOD_END>
