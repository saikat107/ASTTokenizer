<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this( java.lang.String[] , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { this( java.lang.String[] , java.lang.String[] , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] , RequestedContentTypeResolver org.springframework.web.reactive.result.condition.RequestedContentTypeResolver ) { this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> = new java.util.ArrayList<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> <> ( java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( java.lang.String[] , java.lang.String[] ) ) ; java.util.Collections . void ( this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ) ; this . org.springframework.web.reactive.result.condition.RequestedContentTypeResolver = ( org.springframework.web.reactive.result.condition.RequestedContentTypeResolver != null ? org.springframework.web.reactive.result.condition.RequestedContentTypeResolver : new HeaderContentTypeResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> private void ( java.util.Collection<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> < org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression > java.util.Collection<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> , RequestedContentTypeResolver org.springframework.web.reactive.result.condition.RequestedContentTypeResolver ) { this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> = new java.util.ArrayList<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> <> ( java.util.Collection<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ) ; java.util.Collections . void ( this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ) ; this . org.springframework.web.reactive.result.condition.RequestedContentTypeResolver = ( org.springframework.web.reactive.result.condition.RequestedContentTypeResolver != null ? org.springframework.web.reactive.result.condition.RequestedContentTypeResolver : new RequestedContentTypeResolverBuilder ( ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> < org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression > java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> < org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression > java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> = new java.util.LinkedHashSet<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> <> ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { HeadersRequestCondition . HeadersRequestCondition HeadersRequestCondition.HeaderExpression = new HeadersRequestCondition . HeadersRequestCondition ( java.lang.String ) ; if ( STRING . boolean ( expr . name ) ) { for ( MediaType org.springframework.web.reactive.result.condition.MediaType : MediaType . parseMediaTypes ( expr . value ) ) { java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . boolean ( new org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ( org.springframework.web.reactive.result.condition.MediaType , expr . isNegated ) ) ; } } } } if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . boolean ( new org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ( java.lang.String ) ) ; } } return java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.reactive.result.condition.MediaTypeExpression> < MediaTypeExpression > java.util.Set<org.springframework.web.reactive.result.condition.MediaTypeExpression> ( ) { return new java.util.LinkedHashSet <> ( this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.reactive.result.condition.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.condition.MediaType> ( ) { java.util.Set<org.springframework.web.reactive.result.condition.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.condition.MediaType> = new java.util.LinkedHashSet<org.springframework.web.reactive.result.condition.MediaType> <> ( ) ; for ( org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression : this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ) { if ( ! org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression . isNegated ( ) ) { java.util.Set<org.springframework.web.reactive.result.condition.MediaType> . add ( org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression . getMediaType ( ) ) ; } } return java.util.Set<org.springframework.web.reactive.result.condition.MediaType> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> < org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression > java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) { return this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition ( org.springframework.web.reactive.result.condition.ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition ) { return ( ! org.springframework.web.reactive.result.condition.ProducesRequestCondition . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . boolean ( ) ? org.springframework.web.reactive.result.condition.ProducesRequestCondition : this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.condition.ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { if ( CorsUtils . isPreFlightRequest ( org.springframework.web.reactive.result.condition.ServerWebExchange . getRequest ( ) ) ) { return org.springframework.web.reactive.result.condition.ProducesRequestCondition ; } if ( boolean ( ) ) { return this ; } java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> < org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression > java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> = new java.util.LinkedHashSet<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> <> ( java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ) ; for ( java.util.Iterator<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> < org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression > java.util.Iterator<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> = java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . java.util.Iterator<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) ; java.util.Iterator<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . boolean ( ) ;) { org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression = java.util.Iterator<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ( ) ; if ( ! org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression . match ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ) { java.util.Iterator<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . void ( ) ; } } return ( java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . boolean ( ) ) ? null : new org.springframework.web.reactive.result.condition.ProducesRequestCondition ( java.util.Set<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> , this . org.springframework.web.reactive.result.condition.RequestedContentTypeResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.reactive.result.condition.ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition , ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) { try { java.util.List<org.springframework.web.reactive.result.condition.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.condition.MediaType> = java.util.List<org.springframework.web.reactive.result.condition.MediaType> ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; for ( MediaType org.springframework.web.reactive.result.condition.MediaType : java.util.List<org.springframework.web.reactive.result.condition.MediaType> ) { int int = this . int ( org.springframework.web.reactive.result.condition.MediaType ) ; int int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . int ( org.springframework.web.reactive.result.condition.MediaType ) ; int int = int ( this , int , org.springframework.web.reactive.result.condition.ProducesRequestCondition , int ) ; if ( int != NUMBER ) { return int ; } int = this . int ( org.springframework.web.reactive.result.condition.MediaType ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . int ( org.springframework.web.reactive.result.condition.MediaType ) ; int = int ( this , int , org.springframework.web.reactive.result.condition.ProducesRequestCondition , int ) ; if ( int != NUMBER ) { return int ; } } return NUMBER ; } catch ( NotAcceptableStatusException org.springframework.web.reactive.result.condition.NotAcceptableStatusException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.web.reactive.result.condition.NotAcceptableStatusException ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.condition.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.condition.MediaType> ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange )			throws org.springframework.web.reactive.result.condition.NotAcceptableStatusException { java.util.List<org.springframework.web.reactive.result.condition.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.condition.MediaType> = this . org.springframework.web.reactive.result.condition.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; return java.util.List<org.springframework.web.reactive.result.condition.MediaType> . isEmpty ( ) ? java.util.Collections . java.util.List ( MediaType . ALL ) : java.util.List<org.springframework.web.reactive.result.condition.MediaType> ; }  <METHOD_END>
<METHOD_START> private int int ( MediaType org.springframework.web.reactive.result.condition.MediaType ) { for ( int int = NUMBER ; int < java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) . int ( ) ; int ++ ) { MediaType org.springframework.web.reactive.result.condition.MediaType = java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) . org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ( int ) . getMediaType ( ) ; if ( org.springframework.web.reactive.result.condition.MediaType . getType ( ) . equalsIgnoreCase ( org.springframework.web.reactive.result.condition.MediaType . getType ( ) ) && org.springframework.web.reactive.result.condition.MediaType . getSubtype ( ) . equalsIgnoreCase ( org.springframework.web.reactive.result.condition.MediaType . getSubtype ( ) ) ) { return int ; } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> private int int ( MediaType org.springframework.web.reactive.result.condition.MediaType ) { for ( int int = NUMBER ; int < java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) . int ( ) ; int ++ ) { if ( org.springframework.web.reactive.result.condition.MediaType . includes ( java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) . org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ( int ) . getMediaType ( ) ) ) { return int ; } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> private int int ( org.springframework.web.reactive.result.condition.ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition , int int , org.springframework.web.reactive.result.condition.ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition , int int ) { int int = NUMBER ; if ( int != int ) { int = int - int ; } else if ( int != - NUMBER ) { org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression = org.springframework.web.reactive.result.condition.ProducesRequestCondition . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) . org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ( int ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression = org.springframework.web.reactive.result.condition.ProducesRequestCondition . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) . org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ( int ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression ) ; int = ( int != NUMBER ) ? int : org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression . getMediaType ( ) . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression . getMediaType ( ) ) ; } return int ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> < org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression > java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ( ) { return ( this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> . boolean ( ) ? java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> : this . java.util.List<org.springframework.web.reactive.result.condition.ProducesRequestCondition.ProduceMediaTypeExpression> ) ; }  <METHOD_END>
<METHOD_START> void ( MediaType org.springframework.web.reactive.result.condition.MediaType , boolean boolean ) { super( org.springframework.web.reactive.result.condition.MediaType , boolean ); }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange ) throws org.springframework.web.reactive.result.condition.NotAcceptableStatusException { java.util.List<org.springframework.web.reactive.result.condition.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.condition.MediaType> = java.util.List<org.springframework.web.reactive.result.condition.MediaType> ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; for ( MediaType org.springframework.web.reactive.result.condition.MediaType : java.util.List<org.springframework.web.reactive.result.condition.MediaType> ) { if ( getMediaType ( ) . isCompatibleWith ( org.springframework.web.reactive.result.condition.MediaType ) ) { return true ; } } return false ; }  <METHOD_END>
