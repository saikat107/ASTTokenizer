<METHOD_START> private void ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( ) { return new SynthesizingMethodParameter ( this . java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return new org.springframework.web.method.ResolvableMethod.ArgResolver ( ) . org.springframework.web.method.MethodParameter ( java.lang.Class<> , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.web.method.ResolvableType , ResolvableType ... org.springframework.web.method.ResolvableType[] ) { return new org.springframework.web.method.ResolvableMethod.ArgResolver ( ) . org.springframework.web.method.MethodParameter ( java.lang.Class<> , org.springframework.web.method.ResolvableType , org.springframework.web.method.ResolvableType[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( ResolvableType org.springframework.web.method.ResolvableType ) { return new org.springframework.web.method.ResolvableMethod.ArgResolver ( ) . org.springframework.web.method.MethodParameter ( org.springframework.web.method.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.ArgResolver org.springframework.web.method.ResolvableMethod.ArgResolver ( java.util.function.Predicate<org.springframework.web.method.MethodParameter> < MethodParameter > ... java.util.function.Predicate<org.springframework.web.method.MethodParameter>[] ) { return new org.springframework.web.method.ResolvableMethod.ArgResolver ( java.util.function.Predicate<org.springframework.web.method.MethodParameter>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.ArgResolver org.springframework.web.method.ResolvableMethod.ArgResolver ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { return new org.springframework.web.method.ResolvableMethod.ArgResolver ( ) . org.springframework.web.method.ResolvableMethod.ArgResolver ( java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.ArgResolver org.springframework.web.method.ResolvableMethod.ArgResolver ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { return new org.springframework.web.method.ResolvableMethod.ArgResolver ( ) . org.springframework.web.method.ResolvableMethod.ArgResolver ( java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . java.lang.reflect.Method ( ) . java.lang.String ( ) + java.util.Arrays . java.util.stream.Stream<java.lang.reflect.Parameter> ( this . java.lang.reflect.Method . java.lang.reflect.Parameter[] ( ) ) . java.util.stream.Stream<java.lang.String> ( this :: java.lang.String ) . java.lang.String ( java.util.stream.Collector<java.lang.CharSequence,?,java.lang.String> ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.reflect.Parameter java.lang.reflect.Parameter ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.reflect.Parameter . java.lang.annotation.Annotation[] ( ) ; return java.lang.annotation.Annotation[] . int > NUMBER ? java.util.Arrays . java.util.stream.Stream<java.lang.annotation.Annotation> ( java.lang.annotation.Annotation[] ) . java.util.stream.Stream<java.lang.String> ( this :: java.lang.String ) . java.lang.String ( java.util.stream.Collector<java.lang.CharSequence,?,java.lang.String> ( STRING , STRING , STRING ) ) + STRING + java.lang.reflect.Parameter : java.lang.reflect.Parameter . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( ( java.lang.String , java.lang.Object ) -> { if ( java.lang.Object . boolean ( ValueConstants . DEFAULT_NONE ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , STRING ) ; } } ) ; return java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) + java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.method.ResolvableType org.springframework.web.method.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ? ResolvableType . forClass ( java.lang.Class<> ) : ResolvableType . forClassWithGenerics ( java.lang.Class<> , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.method.ResolvableType org.springframework.web.method.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.web.method.ResolvableType , ResolvableType ... org.springframework.web.method.ResolvableType[] ) { ResolvableType [] org.springframework.web.method.ResolvableType[] = new ResolvableType [ generics . length + NUMBER ] ; org.springframework.web.method.ResolvableType[] [ NUMBER ] = org.springframework.web.method.ResolvableType ; java.lang.System . void ( org.springframework.web.method.ResolvableType[] , NUMBER , org.springframework.web.method.ResolvableType[] , NUMBER , generics . length ) ; return ResolvableType . forClassWithGenerics ( java.lang.Class<> , org.springframework.web.method.ResolvableType[] ) ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.web.method.ResolvableMethod.Builder<T> <> ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.function.Predicate<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.function.Predicate<java.lang.reflect.Method> ) { this . java.util.List<java.util.function.Predicate<java.lang.reflect.Method>> . boolean ( new org.springframework.web.method.ResolvableMethod.LabeledPredicate<java.lang.reflect.Method> <> ( java.lang.String , java.util.function.Predicate<java.lang.reflect.Method> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String , java.lang.reflect.Method -> java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( java.util.function.Predicate<java.lang.reflect.Method> < java.lang.reflect.Method > ... java.util.function.Predicate<java.lang.reflect.Method>[] ) { this . java.util.List<java.util.function.Predicate<java.lang.reflect.Method>> . boolean ( java.util.Arrays . java.util.List<java.util.function.Predicate<java.lang.reflect.Method>> ( java.util.function.Predicate<java.lang.reflect.Method>[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { java.lang.String java.lang.String = STRING + java.util.Arrays . java.lang.String ( java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; void ( java.lang.String , java.lang.reflect.Method -> java.util.Arrays . java.util.stream.Stream<java.lang.Class<? extends java.lang.annotation.Annotation>> ( java.lang.Class<? extends java.lang.annotation.Annotation>[] ) . boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> -> AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , java.lang.Class<> ) != null ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { java.lang.String java.lang.String = STRING + java.util.Arrays . java.lang.String ( java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; void ( java.lang.String , java.lang.reflect.Method -> { if ( java.lang.Class<? extends java.lang.annotation.Annotation>[] . int != NUMBER ) { return java.util.Arrays . java.util.stream.Stream<java.lang.Class<? extends java.lang.annotation.Annotation>> ( java.lang.Class<? extends java.lang.annotation.Annotation>[] ) . boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> -> AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , java.lang.Class<> ) != null ) ; } else { return java.lang.reflect.Method . java.lang.annotation.Annotation[] ( ) . int == NUMBER ; } } ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return org.springframework.web.method.ResolvableMethod.Builder<T> ( org.springframework.web.method.ResolvableType ( java.lang.Class<> , java.lang.Class<?>[] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.web.method.ResolvableType , ResolvableType ... org.springframework.web.method.ResolvableType[] ) { return org.springframework.web.method.ResolvableMethod.Builder<T> ( org.springframework.web.method.ResolvableType ( java.lang.Class<> , org.springframework.web.method.ResolvableType , org.springframework.web.method.ResolvableType[] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.ResolvableMethod.Builder<T> < T > org.springframework.web.method.ResolvableMethod.Builder<T> ( ResolvableType org.springframework.web.method.ResolvableType ) { java.lang.String java.lang.String = org.springframework.web.method.ResolvableType . toString ( ) ; java.lang.String java.lang.String = STRING + java.lang.String ; void ( java.lang.String , java.lang.reflect.Method -> java.lang.String . boolean ( ResolvableType . forMethodReturnType ( java.lang.reflect.Method ) . toString ( ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.ResolvableMethod org.springframework.web.method.ResolvableMethod ( ) { java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = MethodIntrospector . selectMethods ( this . java.lang.Class<> , this :: boolean ) ; Assert . state ( ! java.util.Set<java.lang.reflect.Method> . boolean ( ) , STRING + this ) ; Assert . state ( java.util.Set<java.lang.reflect.Method> . int ( ) == NUMBER , STRING + this + java.lang.String ( java.util.Set<java.lang.reflect.Method> ) ) ; return new org.springframework.web.method.ResolvableMethod ( java.util.Set<java.lang.reflect.Method> . java.util.Iterator<java.lang.reflect.Method> ( ) . java.lang.reflect.Method ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return this . java.util.List<java.util.function.Predicate<java.lang.reflect.Method>> . java.util.stream.Stream<java.util.function.Predicate<java.lang.reflect.Method>> ( ) . boolean ( java.util.function.Predicate<java.lang.reflect.Method> -> java.util.function.Predicate<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> ) { return STRING + java.util.Set<java.lang.reflect.Method> . java.util.stream.Stream<java.lang.reflect.Method> ( ) . java.util.stream.Stream<java.lang.String> ( java.lang.reflect.Method :: java.lang.String ) . java.lang.String ( java.util.stream.Collector<java.lang.CharSequence,?,java.lang.String> ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.ResolvableMethod org.springframework.web.method.ResolvableMethod ( java.util.function.Consumer<T> < T > java.util.function.Consumer<T> ) { org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor = new org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor ( ) ; T T = T ( this . java.lang.Class<> , org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor ) ; java.util.function.Consumer<T> . void ( T ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor . java.lang.reflect.Method ( ) ; return new org.springframework.web.method.ResolvableMethod ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public final java.lang.reflect.Method java.lang.reflect.Method ( ) { return org.springframework.web.method.ResolvableMethod ( ) . java.lang.reflect.Method ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( java.lang.String java.lang.String ) { return org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.String ) . org.springframework.web.method.ResolvableMethod ( ) . java.lang.reflect.Method ( ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( ) { return org.springframework.web.method.ResolvableMethod ( ) . org.springframework.web.method.MethodParameter ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.Class<> , java.lang.Class<?>[] ) . org.springframework.web.method.ResolvableMethod ( ) . org.springframework.web.method.MethodParameter ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.web.method.ResolvableType , ResolvableType ... org.springframework.web.method.ResolvableType[] ) { return org.springframework.web.method.ResolvableMethod.Builder<T> ( java.lang.Class<> , org.springframework.web.method.ResolvableType , org.springframework.web.method.ResolvableType[] ) . build ( ) . returnType ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( ResolvableType org.springframework.web.method.ResolvableType ) { return org.springframework.web.method.ResolvableMethod.Builder<T> ( org.springframework.web.method.ResolvableType ) . build ( ) . returnType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + this . java.lang.Class<> . java.lang.String ( ) + STRING + STRING + java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . java.util.List<java.util.function.Predicate<java.lang.reflect.Method>> . java.util.stream.Stream<java.util.function.Predicate<java.lang.reflect.Method>> ( ) . java.util.stream.Stream<java.lang.String> ( java.lang.Object :: java.lang.String ) . java.lang.String ( java.util.stream.Collector<java.lang.CharSequence,?,java.lang.String> ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.util.function.Predicate<T> < T > java.util.function.Predicate<T> ) { this . java.lang.String = java.lang.String ; this . java.util.function.Predicate<T> = java.util.function.Predicate<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( T T ) { return this . java.util.function.Predicate<T> . boolean ( T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Predicate<T> < T > java.util.function.Predicate<T> ( java.util.function.Predicate<? super T> < ? super T > java.util.function.Predicate<? super T> ) { return this . java.util.function.Predicate<T> . java.util.function.Predicate<T> ( java.util.function.Predicate<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Predicate<T> < T > java.util.function.Predicate<T> ( ) { return this . java.util.function.Predicate<T> . java.util.function.Predicate<T> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Predicate<T> < T > java.util.function.Predicate<T> ( java.util.function.Predicate<? super T> < ? super T > java.util.function.Predicate<? super T> ) { return this . java.util.function.Predicate<T> . java.util.function.Predicate<T> ( java.util.function.Predicate<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs private void ( java.util.function.Predicate<org.springframework.web.method.MethodParameter> < MethodParameter > ... java.util.function.Predicate<org.springframework.web.method.MethodParameter>[] ) { this . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> . addAll ( java.util.Arrays . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> ( java.util.function.Predicate<org.springframework.web.method.MethodParameter>[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.ArgResolver org.springframework.web.method.ResolvableMethod.ArgResolver ( java.util.function.Predicate<org.springframework.web.method.MethodParameter> < MethodParameter > ... java.util.function.Predicate<org.springframework.web.method.MethodParameter>[] ) { this . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> . addAll ( java.util.Arrays . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> ( java.util.function.Predicate<org.springframework.web.method.MethodParameter>[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.ArgResolver org.springframework.web.method.ResolvableMethod.ArgResolver ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { this . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> . add ( param -> Arrays . stream ( annotationTypes ) . allMatch ( param :: hasParameterAnnotation ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final org.springframework.web.method.ResolvableMethod.ArgResolver org.springframework.web.method.ResolvableMethod.ArgResolver ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { this . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> . add ( param -> ( annotationTypes . length != NUMBER ) ? Arrays . stream ( annotationTypes ) . noneMatch ( param :: hasParameterAnnotation ) : param . getParameterAnnotations ( ) . length == NUMBER ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return org.springframework.web.method.MethodParameter ( org.springframework.web.method.ResolvableType ( java.lang.Class<> , java.lang.Class<?>[] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.web.method.ResolvableType , ResolvableType ... org.springframework.web.method.ResolvableType[] ) { return org.springframework.web.method.MethodParameter ( org.springframework.web.method.ResolvableType ( java.lang.Class<> , org.springframework.web.method.ResolvableType , org.springframework.web.method.ResolvableType[] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( ResolvableType org.springframework.web.method.ResolvableType ) { this . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> . add ( p -> type . toString ( ) . equals ( ResolvableType . forMethodParameter ( p ) . toString ( ) ) ) ; return org.springframework.web.method.MethodParameter ( ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.web.method.MethodParameter org.springframework.web.method.MethodParameter ( ) { java.util.List<org.springframework.web.method.MethodParameter> < MethodParameter > java.util.List<org.springframework.web.method.MethodParameter> = java.util.List<org.springframework.web.method.MethodParameter> ( ) ; Assert . state ( ! java.util.List<org.springframework.web.method.MethodParameter> . isEmpty ( ) , ( ) STRING + formatMethod ( ) ) ; Assert . state ( java.util.List<org.springframework.web.method.MethodParameter> . size ( ) == NUMBER , ( ) STRING + formatMethod ( ) + STRING + matches ) ; return java.util.List<org.springframework.web.method.MethodParameter> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.method.MethodParameter> < MethodParameter > java.util.List<org.springframework.web.method.MethodParameter> ( ) { java.util.List<org.springframework.web.method.MethodParameter> < MethodParameter > java.util.List<org.springframework.web.method.MethodParameter> = new java.util.ArrayList<org.springframework.web.method.MethodParameter> <> ( ) ; for ( int int = NUMBER ; int < java.lang.reflect.Method . int ( ) ; int ++ ) { MethodParameter org.springframework.web.method.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , int ) ; org.springframework.web.method.MethodParameter . initParameterNameDiscovery ( org.springframework.web.method.ParameterNameDiscoverer ) ; if ( this . java.util.List<java.util.function.Predicate<org.springframework.web.method.MethodParameter>> . stream ( ) . allMatch ( p -> p . test ( param ) ) ) { java.util.List<org.springframework.web.method.MethodParameter> . add ( org.springframework.web.method.MethodParameter ) ; } } return java.util.List<org.springframework.web.method.MethodParameter> ; }  <METHOD_END>
<METHOD_START> java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.web.method.MethodProxy ) { if ( ReflectionUtils . isObjectMethod ( java.lang.reflect.Method ) ) { return ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object[] ) ; } else { this . java.lang.reflect.Method = java.lang.reflect.Method ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( org . org.aopalliance . org.aopalliance . org.aopalliance org.aopalliance.intercept.MethodInvocation ) throws java.lang.Throwable { return java.lang.Object ( org.aopalliance.intercept.MethodInvocation . getThis ( ) , org.aopalliance.intercept.MethodInvocation . getMethod ( ) , org.aopalliance.intercept.MethodInvocation . getArguments ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < T > T T ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.Class<> . boolean ( ) ) { ProxyFactory org.springframework.web.method.ProxyFactory = new ProxyFactory ( EmptyTargetSource . INSTANCE ) ; org.springframework.web.method.ProxyFactory . addInterface ( java.lang.Class<> ) ; org.springframework.web.method.ProxyFactory . addInterface ( java.util.function.Supplier .class ) ; org.springframework.web.method.ProxyFactory . addAdvice ( org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor ) ; return ( T ) org.springframework.web.method.ProxyFactory . getProxy ( ) ; } else { Enhancer org.springframework.web.method.Enhancer = new Enhancer ( ) ; org.springframework.web.method.Enhancer . setSuperclass ( java.lang.Class<> ) ; org.springframework.web.method.Enhancer . setInterfaces ( new java.lang.Class<?> < ? > [] { java.util.function.Supplier .class } ) ; org.springframework.web.method.Enhancer . setNamingPolicy ( SpringNamingPolicy . INSTANCE ) ; org.springframework.web.method.Enhancer . setCallbackType ( org . springframework . org.springframework.cglib . org.springframework.cglib . org.springframework.cglib .class ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.method.Enhancer . createClass ( ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.web.method.SpringObjenesis . isWorthTrying ( ) ) { try { java.lang.Object = org.springframework.web.method.SpringObjenesis . newInstance ( java.lang.Class<> , org.springframework.web.method.Enhancer . getUseCache ( ) ) ; } catch ( ObjenesisException org.springframework.web.method.ObjenesisException ) { org.springframework.web.method.Log . debug ( STRING , org.springframework.web.method.ObjenesisException ) ; } } if ( java.lang.Object == null ) { try { java.lang.Object = ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + STRING , java.lang.Throwable ) ; } } ( ( Factory ) java.lang.Object ) . setCallbacks ( new Callback [] { org.springframework.web.method.ResolvableMethod.MethodInvocationInterceptor } ) ; return ( T ) java.lang.Object ; } }  <METHOD_END>
