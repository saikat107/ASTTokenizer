<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.handler.advice.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.handler.advice.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; assertThat ( org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdviceTests.EERHAConfig . org.springframework.integration.handler.advice.Message<> , instanceOf ( AdviceMessage .class ) ) ; assertThat ( org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdviceTests.EERHAConfig . org.springframework.integration.handler.advice.Message<> . getPayload ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdviceTests.EERHAConfig . org.springframework.integration.handler.advice.Message<> , instanceOf ( ErrorMessage .class ) ) ; java.lang.Object java.lang.Object = ( ( MessageHandlingExpressionEvaluatingAdviceException ) org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdviceTests.EERHAConfig . org.springframework.integration.handler.advice.Message<> . getPayload ( ) ) . getEvaluationResult ( ) ; assertThat ( ( java.lang.String ) java.lang.Object , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.handler.advice.IntegrationFlow org.springframework.integration.handler.advice.IntegrationFlow ( ) { return f -> f . handle ( ( GenericHandler < String > ) ( payload , headers ) -> { if ( payload . equals ( STRING ) ) { return null ; } else { throw new RuntimeException ( STRING ) ; } } , c -> c . advice ( expressionAdvice ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.handler.advice.Advice org.springframework.integration.handler.advice.Advice ( ) { ExpressionEvaluatingRequestHandlerAdvice org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice = new ExpressionEvaluatingRequestHandlerAdvice ( ) ; org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice . setSuccessChannelName ( STRING ) ; org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice . setOnSuccessExpressionString ( STRING ) ; org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice . setFailureChannelName ( STRING ) ; org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice . setOnFailureExpressionString ( STRING ) ; org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice . setTrapException ( true ) ; return org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.handler.advice.IntegrationFlow org.springframework.integration.handler.advice.IntegrationFlow ( ) { return f -> f . handle ( m -> this . successful = m ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.handler.advice.IntegrationFlow org.springframework.integration.handler.advice.IntegrationFlow ( ) { return f -> f . handle ( m -> this . failed = m ) ; }  <METHOD_END>
