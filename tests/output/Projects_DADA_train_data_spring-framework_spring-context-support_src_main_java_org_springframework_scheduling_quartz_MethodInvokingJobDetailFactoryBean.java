<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.scheduling.quartz.BeanFactory ) { this . org.springframework.scheduling.quartz.BeanFactory = org.springframework.scheduling.quartz.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { return ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.ClassNotFoundException , java.lang.NoSuchMethodException { prepare ( ) ; java.lang.String java.lang.String = ( this . java.lang.String != null ? this . java.lang.String : this . java.lang.String ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( this . boolean ? org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.MethodInvokingJob .class : org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob .class ) ; JobDetailImpl org.springframework.scheduling.quartz.JobDetailImpl = new JobDetailImpl ( ) ; org.springframework.scheduling.quartz.JobDetailImpl . setName ( java.lang.String ) ; org.springframework.scheduling.quartz.JobDetailImpl . setGroup ( this . java.lang.String ) ; org.springframework.scheduling.quartz.JobDetailImpl . setJobClass ( ( java.lang.Class ) java.lang.Class<> ) ; org.springframework.scheduling.quartz.JobDetailImpl . setDurability ( true ) ; org.springframework.scheduling.quartz.JobDetailImpl . getJobDataMap ( ) . put ( STRING , this ) ; this . org.springframework.scheduling.quartz.JobDetail = org.springframework.scheduling.quartz.JobDetailImpl ; void ( this . org.springframework.scheduling.quartz.JobDetail ) ; }  <METHOD_END>
<METHOD_START> protected void void ( JobDetail org.springframework.scheduling.quartz.JobDetail ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = super. getTargetClass ( ) ; if ( java.lang.Class<> == null && this . java.lang.String != null ) { Assert . state ( this . org.springframework.scheduling.quartz.BeanFactory != null , STRING ) ; java.lang.Class<?> = this . org.springframework.scheduling.quartz.BeanFactory . getType ( this . java.lang.String ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { java.lang.Object java.lang.Object = super. getTargetObject ( ) ; if ( java.lang.Object == null && this . java.lang.String != null ) { Assert . state ( this . org.springframework.scheduling.quartz.BeanFactory != null , STRING ) ; java.lang.Object = this . org.springframework.scheduling.quartz.BeanFactory . getBean ( this . java.lang.String ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.quartz.JobDetail org.springframework.scheduling.quartz.JobDetail ( ) { return this . org.springframework.scheduling.quartz.JobDetail ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.scheduling.quartz.JobDetail> < ? extends JobDetail > java.lang.Class<? extends org.springframework.scheduling.quartz.JobDetail> ( ) { return ( this . org.springframework.scheduling.quartz.JobDetail != null ? this . org.springframework.scheduling.quartz.JobDetail . getClass ( ) : JobDetail .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( MethodInvoker org.springframework.scheduling.quartz.MethodInvoker ) { this . org.springframework.scheduling.quartz.MethodInvoker = org.springframework.scheduling.quartz.MethodInvoker ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JobExecutionContext org.springframework.scheduling.quartz.JobExecutionContext ) throws org.springframework.scheduling.quartz.JobExecutionException { try { org.springframework.scheduling.quartz.JobExecutionContext . setResult ( this . org.springframework.scheduling.quartz.MethodInvoker . invoke ( ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof JobExecutionException ) { throw ( JobExecutionException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } else { throw new JobMethodInvocationFailedException ( this . org.springframework.scheduling.quartz.MethodInvoker , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new JobMethodInvocationFailedException ( this . org.springframework.scheduling.quartz.MethodInvoker , java.lang.Exception ) ; } }  <METHOD_END>
