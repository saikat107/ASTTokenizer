<METHOD_START> protected static org.springframework.data.gemfire.repository.support.Customer org.springframework.data.gemfire.repository.support.Customer ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { Customer org.springframework.data.gemfire.repository.support.Customer = new org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryTransactionalIntegrationTest.SerializableCustomer ( java.lang.String , java.lang.String ) ; org.springframework.data.gemfire.repository.support.Customer . setId ( java.util.concurrent.atomic.AtomicLong . long ( ) ) ; return org.springframework.data.gemfire.repository.support.Customer ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.repository.support.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.repository.support.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.repository.support.Region . getFullPath ( ) ) ; assertTrue ( org.springframework.data.gemfire.repository.support.Region . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.gemfire.repository.support.Region . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> < Customer > java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> = new java.util.ArrayList<org.springframework.data.gemfire.repository.support.Customer> < Customer > ( NUMBER ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> . add ( org.springframework.data.gemfire.repository.support.Customer ( STRING , STRING ) ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> . add ( org.springframework.data.gemfire.repository.support.Customer ( STRING , STRING ) ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> . add ( org.springframework.data.gemfire.repository.support.Customer ( STRING , STRING ) ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> . add ( org.springframework.data.gemfire.repository.support.Customer ( STRING , STRING ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryTransactionalIntegrationTest.CustomerService . void ( java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> ) ; assertFalse ( org.springframework.data.gemfire.repository.support.Region . isEmpty ( ) ) ; assertEquals ( java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> . size ( ) , org.springframework.data.gemfire.repository.support.Region . size ( ) ) ; try { org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryTransactionalIntegrationTest.CustomerService . void ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } assertFalse ( org.springframework.data.gemfire.repository.support.Region . isEmpty ( ) ) ; assertEquals ( java.util.Collection<org.springframework.data.gemfire.repository.support.Customer> . size ( ) , org.springframework.data.gemfire.repository.support.Region . size ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryTransactionalIntegrationTest.CustomerService . void ( ) ; assertTrue ( org.springframework.data.gemfire.repository.support.Region . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( final java.lang.Long java.lang.Long ) { super( java.lang.Long ); }  <METHOD_END>
<METHOD_START> public void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ Autowired public void ( GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate , PlatformTransactionManager org.springframework.data.gemfire.repository.support.PlatformTransactionManager ) { org.springframework.data.gemfire.repository.support.GemfireRepository<org.springframework.data.gemfire.repository.support.Customer,java.lang.Long> = new SimpleGemfireRepository < Customer , java.lang.Long > ( org.springframework.data.gemfire.repository.support.GemfireTemplate , new ReflectionEntityInformation < Customer , java.lang.Long > ( Customer .class ) ) ; org.springframework.data.gemfire.repository.support.TransactionTemplate = new TransactionTemplate ( org.springframework.data.gemfire.repository.support.PlatformTransactionManager ) ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.Iterable<org.springframework.data.gemfire.repository.support.Customer> < Customer > java.lang.Iterable<org.springframework.data.gemfire.repository.support.Customer> ) { org.springframework.data.gemfire.repository.support.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( final TransactionStatus org.springframework.data.gemfire.repository.support.TransactionStatus ) { org.springframework.data.gemfire.repository.support.GemfireRepository<org.springframework.data.gemfire.repository.support.Customer,java.lang.Long> . save ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Customer> ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final TransactionStatus org.springframework.data.gemfire.repository.support.TransactionStatus ) { org.springframework.data.gemfire.repository.support.GemfireRepository<org.springframework.data.gemfire.repository.support.Customer,java.lang.Long> . save ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Customer> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.data.gemfire.repository.support.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( final TransactionStatus org.springframework.data.gemfire.repository.support.TransactionStatus ) { void ( ) ; throw new java.lang.IllegalStateException ( STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final TransactionStatus org.springframework.data.gemfire.repository.support.TransactionStatus ) { void ( ) ; throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.data.gemfire.repository.support.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( final TransactionStatus org.springframework.data.gemfire.repository.support.TransactionStatus ) { org.springframework.data.gemfire.repository.support.GemfireRepository<org.springframework.data.gemfire.repository.support.Customer,java.lang.Long> . deleteAll ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final TransactionStatus org.springframework.data.gemfire.repository.support.TransactionStatus ) { org.springframework.data.gemfire.repository.support.GemfireRepository<org.springframework.data.gemfire.repository.support.Customer,java.lang.Long> . deleteAll ( ) ; }  <METHOD_END>
