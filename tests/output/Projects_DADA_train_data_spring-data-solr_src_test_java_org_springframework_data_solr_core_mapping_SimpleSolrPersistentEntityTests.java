<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithSolrDocumentAnnotation .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithSolrDocumentAnnotation > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithSolrDocumentAnnotation> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; assertEquals ( java.lang.String , org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithSolrDocumentAnnotation> . getSolrCoreName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.InheritingClass .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.InheritingClass > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.InheritingClass> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; assertEquals ( java.lang.String , org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.InheritingClass> . getSolrCoreName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithoutSolrDocumentAnnotation .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithoutSolrDocumentAnnotation > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithoutSolrDocumentAnnotation> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; assertEquals ( STRING , org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithoutSolrDocumentAnnotation> . getSolrCoreName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; assertEquals ( STRING , org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation> . getSolrCoreName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithBoost .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithBoost > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithBoost> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; assertThat ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithBoost> . isBoosted ( ) , is ( true ) ) ; assertThat ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithBoost> . getBoost ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; assertThat ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation> . isBoosted ( ) , is ( false ) ) ; assertThat ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithEmptySolrDocumentAnnotation> . getBoost ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( BeanWithScore .class ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isScoreProperty ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isAnnotationPresent ( eq ( Score .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) . thenReturn ( STRING ) ; SimpleSolrPersistentEntity < BeanWithScore > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.BeanWithScore> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.BeanWithScore> . addPersistentProperty ( org.springframework.data.solr.core.mapping.SolrPersistentProperty ) ; assertTrue ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.BeanWithScore> . hasScoreProperty ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional ( org.springframework.data.solr.core.mapping.SolrPersistentProperty ) , org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.BeanWithScore> . getScoreProperty ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.BeanWithScore> . getScoreProperty ( ) . get ( ) . getFieldName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.data.solr.core.mapping.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.solr.core.mapping.ExpectedException . expectMessage ( STRING ) ; when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; SolrPersistentProperty org.springframework.data.solr.core.mapping.SolrPersistentProperty = mock ( SolrPersistentProperty .class ) ; SolrPersistentProperty org.springframework.data.solr.core.mapping.SolrPersistentProperty = mock ( SolrPersistentProperty .class ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isScoreProperty ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isAnnotationPresent ( eq ( Score .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isScoreProperty ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isAnnotationPresent ( eq ( Score .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) . thenReturn ( STRING ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> . addPersistentProperty ( org.springframework.data.solr.core.mapping.SolrPersistentProperty ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> . addPersistentProperty ( org.springframework.data.solr.core.mapping.SolrPersistentProperty ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.data.solr.core.mapping.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.solr.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.solr.core.mapping.ExpectedException . expectMessage ( STRING ) ; when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithoutSolrDocumentAnnotation .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; SolrPersistentProperty org.springframework.data.solr.core.mapping.SolrPersistentProperty = mock ( SolrPersistentProperty .class ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isDynamicProperty ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isAnnotationPresent ( eq ( Dynamic .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . containsWildcard ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isMap ( ) ) . thenReturn ( false ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> . addPersistentProperty ( org.springframework.data.solr.core.mapping.SolrPersistentProperty ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.data.solr.core.mapping.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.solr.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.solr.core.mapping.ExpectedException . expectMessage ( STRING ) ; when ( org.springframework.data.solr.core.mapping.TypeInformation . getType ( ) ) . thenReturn ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.SearchableBeanWithoutSolrDocumentAnnotation .class ) ; SimpleSolrPersistentEntity < org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore > org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> = new SimpleSolrPersistentEntity <> ( org.springframework.data.solr.core.mapping.TypeInformation ) ; SolrPersistentProperty org.springframework.data.solr.core.mapping.SolrPersistentProperty = mock ( SolrPersistentProperty .class ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isDynamicProperty ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isAnnotationPresent ( eq ( Dynamic .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . containsWildcard ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isMap ( ) ) . thenReturn ( true ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> . addPersistentProperty ( org.springframework.data.solr.core.mapping.SolrPersistentProperty ) ; org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity<org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntityTests.DocumentWithScore> . verify ( ) ; }  <METHOD_END>
