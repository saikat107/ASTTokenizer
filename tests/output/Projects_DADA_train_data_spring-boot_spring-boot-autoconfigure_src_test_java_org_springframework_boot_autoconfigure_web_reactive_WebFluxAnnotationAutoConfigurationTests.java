<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( WebFluxConfigurationSupport .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( RequestMappingHandlerMapping .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( RequestMappingHandlerAdapter .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( RequestMappingHandlerMapping .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( RequestMappingHandlerAdapter .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( CompositeContentTypeResolver .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , HandlerMapping .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.CustomArgumentResolvers .class ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.reactive.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertThat ( ( java.util.List<org.springframework.boot.autoconfigure.web.reactive.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.web.reactive.RequestMappingHandlerAdapter . getArgumentResolverConfigurer ( ) , STRING ) ) . contains ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , HandlerMethodArgumentResolver .class ) , this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , HandlerMethodArgumentResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; SimpleUrlHandlerMapping org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , SimpleUrlHandlerMapping .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ) . isInstanceOf ( ResourceWebHandler .class ) ; ResourceWebHandler org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler = ( ResourceWebHandler ) org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler . getLocations ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ) . isInstanceOf ( ResourceWebHandler .class ) ; ResourceWebHandler org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler = ( ResourceWebHandler ) org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler . getLocations ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler . getLocations ( ) . get ( NUMBER ) ) . isEqualTo ( new ClassPathResource ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; SimpleUrlHandlerMapping org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , SimpleUrlHandlerMapping .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ) . isInstanceOf ( ResourceWebHandler .class ) ; ResourceWebHandler org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler = ( ResourceWebHandler ) org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler . getLocations ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING ) ) . isNotInstanceOf ( SimpleUrlHandlerMapping .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; SimpleUrlHandlerMapping org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , SimpleUrlHandlerMapping .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ) . isInstanceOf ( ResourceWebHandler .class ) ; ResourceWebHandler org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler = ( ResourceWebHandler ) org.springframework.boot.autoconfigure.web.reactive.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler . getResourceResolvers ( ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceResolver .class , PathResourceResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.ResourceWebHandler . getResourceTransformers ( ) ) . extractingResultOf ( STRING ) . containsOnly ( CachingResourceTransformer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.ViewResolvers .class ) ; ViewResolutionResultHandler org.springframework.boot.autoconfigure.web.reactive.ViewResolutionResultHandler = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( ViewResolutionResultHandler .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.ViewResolutionResultHandler . getViewResolvers ( ) ) . containsExactly ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , ViewResolver .class ) , this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , ViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.WebFluxValidator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.reactive.Validator = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.Validator ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.WebFluxValidator .class ) . validator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.WebFluxJsr303Validator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.reactive.Validator = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.Validator ) . isInstanceOf ( SpringValidator .class ) ; assertThat ( ( ( SpringValidator ) org.springframework.boot.autoconfigure.web.reactive.Validator ) . getTarget ( ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.WebFluxJsr303Validator .class ) . validator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.CustomValidator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.reactive.Validator = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.Validator ) . isInstanceOf ( SpringValidator .class ) ; assertThat ( ( ( SpringValidator ) org.springframework.boot.autoconfigure.web.reactive.Validator ) . getTarget ( ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( javax . javax.validation . javax.validation .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.Jsr303Validator .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( ValidatorFactory .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( javax . javax.validation . javax.validation .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; Validator org.springframework.boot.autoconfigure.web.reactive.Validator = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( Validator .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.Validator ) . isInstanceOf ( SpringValidator .class ) ; SpringValidatorAdapter org.springframework.boot.autoconfigure.web.reactive.SpringValidatorAdapter = ( ( SpringValidator ) org.springframework.boot.autoconfigure.web.reactive.Validator ) . getTarget ( ) ; assertThat ( new DirectFieldAccessor ( org.springframework.boot.autoconfigure.web.reactive.SpringValidatorAdapter ) . getPropertyValue ( STRING ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( javax . javax.validation . javax.validation .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { void ( null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext = new GenericReactiveWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext , java.lang.String[] ) ; if ( java.lang.Class<> != null ) { this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . register ( java.lang.Class<> ) ; } this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . register ( org.springframework.boot.autoconfigure.web.reactive.WebFluxAnnotationAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.HandlerMethodArgumentResolver org.springframework.boot.autoconfigure.web.reactive.HandlerMethodArgumentResolver ( ) { return mock ( HandlerMethodArgumentResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.HandlerMethodArgumentResolver org.springframework.boot.autoconfigure.web.reactive.HandlerMethodArgumentResolver ( ) { return mock ( HandlerMethodArgumentResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( Ordered . HIGHEST_PRECEDENCE ) public org.springframework.boot.autoconfigure.web.reactive.ViewResolver org.springframework.boot.autoconfigure.web.reactive.ViewResolver ( ) { return mock ( ViewResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.ViewResolver org.springframework.boot.autoconfigure.web.reactive.ViewResolver ( ) { return mock ( ViewResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.MockReactiveWebServerFactory org.springframework.boot.autoconfigure.web.reactive.MockReactiveWebServerFactory ( ) { return new MockReactiveWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.HttpHandler org.springframework.boot.autoconfigure.web.reactive.HttpHandler ( ) { return ( serverHttpRequest , serverHttpResponse ) -> null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.boot.autoconfigure.web.reactive.Validator> < Validator > java.util.Optional<org.springframework.boot.autoconfigure.web.reactive.Validator> ( ) { return java.util.Optional . java.util.Optional ( this . org.springframework.boot.autoconfigure.web.reactive.Validator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.boot.autoconfigure.web.reactive.Validator> < Validator > java.util.Optional<org.springframework.boot.autoconfigure.web.reactive.Validator> ( ) { return java.util.Optional . java.util.Optional ( this . org.springframework.boot.autoconfigure.web.reactive.LocalValidatorFactoryBean ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax . javax.validation . javax.validation.Validator javax.validation.Validator ( ) { return mock ( javax . javax.validation . javax.validation .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.Validator org.springframework.boot.autoconfigure.web.reactive.Validator ( ) { return new LocalValidatorFactoryBean ( ) ; }  <METHOD_END>
