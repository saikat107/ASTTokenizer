<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GemfirePersistentEntity < org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person > org.springframework.data.gemfire.mapping.GemfirePersistentEntity<org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person> = ( GemfirePersistentEntity < org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person > ) org.springframework.data.gemfire.mapping.GemfireMappingContext . getPersistentEntity ( org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person .class ) . orElseThrow ( ( ) newIllegalStateException ( STRING , Person .class . getName ( ) ) ) ; assertThat ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person> . getRegionName ( ) ) . isEqualTo ( STRING ) ; java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> < GemfirePersistentProperty > java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> = org.springframework.data.gemfire.mapping.GemfirePersistentEntity<org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person> . getPersistentProperty ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> . isPresent ( ) ) . isTrue ( ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> . get ( ) . isEntity ( ) ) . isFalse ( ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> . get ( ) . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> . get ( ) . getOwner ( ) ) . isEqualTo ( org.springframework.data.gemfire.mapping.GemfirePersistentEntity<org.springframework.data.gemfire.mapping.GemfireMappingContextUnitTests.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.mapping.GemfireMappingContext . getPersistentEntity ( java.math.BigDecimal .class ) . isPresent ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.mapping.GemfireMappingContext . getPersistentEntity ( java.math.BigInteger .class ) . isPresent ( ) ) . isFalse ( ) ; }  <METHOD_END>
