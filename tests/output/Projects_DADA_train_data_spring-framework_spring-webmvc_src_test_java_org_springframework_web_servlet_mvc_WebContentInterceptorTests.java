<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheSeconds ( NUMBER ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . hasItem ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheSeconds ( NUMBER ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheMappings ( java.util.Properties ) ; org.springframework.web.servlet.mvc.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . emptyIterable ( ) ) ; org.springframework.web.servlet.mvc.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . hasItem ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheSeconds ( NUMBER ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheSeconds ( - NUMBER ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . emptyIterable ( ) ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . emptyIterable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheSeconds ( NUMBER ) ; org.springframework.web.servlet.mvc.MockHttpServletResponse . setHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.MockHttpServletResponse . setHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; assertThat ( org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeader ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeader ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheSeconds ( NUMBER ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setAlwaysMustRevalidate ( true ) ; org.springframework.web.servlet.mvc.MockHttpServletResponse . setHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.MockHttpServletResponse . setHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; assertThat ( org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeader ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeader ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheSeconds ( NUMBER ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setUseExpiresHeader ( true ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setAlwaysMustRevalidate ( true ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setCacheMappings ( java.util.Properties ) ; org.springframework.web.servlet.mvc.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . iterableWithSize ( NUMBER ) ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . contains ( STRING , STRING ) ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . contains ( STRING ) ) ; org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . preHandle ( org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse , null ) ; java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . iterableWithSize ( NUMBER ) ) ; java.lang.Iterable<java.lang.String> = org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeaders ( STRING ) ; assertThat ( java.lang.Iterable<java.lang.String> , Matchers . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { WebContentInterceptor org.springframework.web.servlet.mvc.WebContentInterceptor = new WebContentInterceptor ( ) ; org.springframework.web.servlet.mvc.WebContentInterceptor . setPathMatcher ( null ) ; }  <METHOD_END>
