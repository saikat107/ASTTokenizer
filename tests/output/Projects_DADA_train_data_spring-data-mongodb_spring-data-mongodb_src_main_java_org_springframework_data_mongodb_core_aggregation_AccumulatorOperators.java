<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.AccumulatorOperatorFactory org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.AccumulatorOperatorFactory ( java.lang.String java.lang.String ) { return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.AccumulatorOperatorFactory ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.AccumulatorOperatorFactory org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.AccumulatorOperatorFactory ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.AccumulatorOperatorFactory ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.core.aggregation.AggregationExpression = null ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; this . java.lang.String = null ; this . org.springframework.data.mongodb.core.aggregation.AggregationExpression = org.springframework.data.mongodb.core.aggregation.AggregationExpression ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( ) { return boolean ( ) ? org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( java.lang.String ) : org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( ) { return boolean ( ) ? org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( java.lang.String ) : org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( ) { return boolean ( ) ? org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( java.lang.String ) : org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( ) { return boolean ( ) ? org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( java.lang.String ) : org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( ) { return boolean ( ) ? org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( java.lang.String ) : org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( ) { return boolean ( ) ? org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( java.lang.String ) : org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp . org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return java.lang.String != null ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( asFields ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( append ( Fields . field ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Sum ( append ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.Object java.lang.Object , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { if ( java.lang.Object instanceof java.util.List ) { if ( ( ( java.util.List ) java.lang.Object ) . int ( ) == NUMBER ) { return super. toDocument ( ( ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } } return super. toDocument ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( asFields ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( append ( Fields . field ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Avg ( append ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.Object java.lang.Object , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { if ( java.lang.Object instanceof java.util.List ) { if ( ( ( java.util.List ) java.lang.Object ) . int ( ) == NUMBER ) { return super. toDocument ( ( ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } } return super. toDocument ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( asFields ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( append ( Fields . field ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Max ( append ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.Object java.lang.Object , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { if ( java.lang.Object instanceof java.util.List ) { if ( ( ( java.util.List ) java.lang.Object ) . int ( ) == NUMBER ) { return super. toDocument ( ( ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } } return super. toDocument ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( asFields ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( append ( Fields . field ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.Min ( append ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.Object java.lang.Object , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { if ( java.lang.Object instanceof java.util.List ) { if ( ( ( java.util.List ) java.lang.Object ) . int ( ) == NUMBER ) { return super. toDocument ( ( ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } } return super. toDocument ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( asFields ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( append ( Fields . field ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevPop ( append ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.Object java.lang.Object , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { if ( java.lang.Object instanceof java.util.List ) { if ( ( ( java.util.List ) java.lang.Object ) . int ( ) == NUMBER ) { return super. toDocument ( ( ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } } return super. toDocument ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( asFields ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( append ( Fields . field ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.AccumulatorOperators.StdDevSamp ( append ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.Object java.lang.Object , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { if ( java.lang.Object instanceof java.util.List ) { if ( ( ( java.util.List ) java.lang.Object ) . int ( ) == NUMBER ) { return super. toDocument ( ( ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } } return super. toDocument ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; }  <METHOD_END>
