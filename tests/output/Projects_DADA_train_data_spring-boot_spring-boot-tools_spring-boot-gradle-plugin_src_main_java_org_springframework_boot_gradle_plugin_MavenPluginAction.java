<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.boot.gradle.plugin.Plugin<? extends org.springframework.boot.gradle.plugin.Project>> < ? extends Plugin < ? extends Project > > java.lang.Class<? extends org.springframework.boot.gradle.plugin.Plugin<? extends org.springframework.boot.gradle.plugin.Project>> ( ) { return MavenPlugin .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Project org.springframework.boot.gradle.plugin.Project ) { org.springframework.boot.gradle.plugin.Project . getTasks ( ) . withType ( Upload .class , upload -> { if ( this . uploadTaskName . equals ( upload . getName ( ) ) ) { project . afterEvaluate ( evaluated -> clearConfigurationMappings ( upload ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> private void void ( Upload org.springframework.boot.gradle.plugin.Upload ) { org.springframework.boot.gradle.plugin.Upload . getRepositories ( ) . withType ( MavenResolver .class , resolver -> resolver . getPom ( ) . getScopeMappings ( ) . getMappings ( ) . clear ( ) ) ; }  <METHOD_END>
