<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( LoggersEndpoint .class ) . setEnabled ( true ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . alwaysDo ( MockMvcResultHandlers . print ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Before @ After public void void ( ) { Mockito . reset ( this . org.springframework.boot.actuate.endpoint.mvc.LoggingSystem ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.LoggingSystem . getSupportedLogLevels ( ) ) . willReturn ( java.util.EnumSet . java.util.EnumSet<E> ( LogLevel .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.actuate.endpoint.mvc.LoggingSystem . getLoggerConfigurations ( ) ) . willReturn ( java.util.Collections . java.util.List<T> ( new LoggerConfiguration ( STRING , null , LogLevel . DEBUG ) ) ) ; java.lang.String java.lang.String = STRING + STRING ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . json ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( LoggersEndpoint .class ) . setEnabled ( false ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.actuate.endpoint.mvc.LoggingSystem . getLoggerConfiguration ( STRING ) ) . willReturn ( new LoggerConfiguration ( STRING , null , LogLevel . DEBUG ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( equalTo ( STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( LoggersEndpoint .class ) . setEnabled ( false ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . header ( HttpHeaders . ACCEPT , MediaType . APPLICATION_JSON_VALUE ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( STRING , MediaType . APPLICATION_JSON_UTF8_VALUE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( post ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . content ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; verify ( this . org.springframework.boot.actuate.endpoint.mvc.LoggingSystem ) . setLogLevel ( STRING , LogLevel . DEBUG ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( post ( STRING ) . contentType ( ActuatorMediaTypes . APPLICATION_ACTUATOR_V2_JSON ) . content ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; verify ( this . org.springframework.boot.actuate.endpoint.mvc.LoggingSystem ) . setLogLevel ( STRING , LogLevel . DEBUG ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( LoggersEndpoint .class ) . setEnabled ( false ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( post ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . content ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; verifyZeroInteractions ( this . org.springframework.boot.actuate.endpoint.mvc.LoggingSystem ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.mvc.LoggingSystem org.springframework.boot.actuate.endpoint.mvc.LoggingSystem ( ) { return mock ( LoggingSystem .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.mvc.LoggersEndpoint org.springframework.boot.actuate.endpoint.mvc.LoggersEndpoint ( LoggingSystem org.springframework.boot.actuate.endpoint.mvc.LoggingSystem ) { return new LoggersEndpoint ( org.springframework.boot.actuate.endpoint.mvc.LoggingSystem ) ; }  <METHOD_END>
