<METHOD_START> @ java.lang.Override protected void void ( ) { AnnotationConfigApplicationContext org.springframework.statemachine.data.redis.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.statemachine.data.redis.AnnotationConfigApplicationContext . register ( org.springframework.statemachine.data.redis.RedisRepositoryTests.TestConfig .class ) ; org.springframework.statemachine.data.redis.AnnotationConfigApplicationContext . refresh ( ) ; KeyValueTemplate org.springframework.statemachine.data.redis.KeyValueTemplate = org.springframework.statemachine.data.redis.AnnotationConfigApplicationContext . getBean ( KeyValueTemplate .class ) ; org.springframework.statemachine.data.redis.KeyValueTemplate . delete ( RedisRepositoryAction .class ) ; org.springframework.statemachine.data.redis.KeyValueTemplate . delete ( RedisRepositoryGuard .class ) ; org.springframework.statemachine.data.redis.KeyValueTemplate . delete ( RedisRepositoryState .class ) ; org.springframework.statemachine.data.redis.KeyValueTemplate . delete ( RedisRepositoryTransition .class ) ; org.springframework.statemachine.data.redis.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( java.lang.Class<?>[] ( ) ) ; context . register ( Config2 .class ) ; context . refresh ( ) ; RedisStateRepository org.springframework.statemachine.data.redis.RedisStateRepository = context . getBean ( RedisStateRepository .class ) ; RedisTransitionRepository org.springframework.statemachine.data.redis.RedisTransitionRepository = context . getBean ( RedisTransitionRepository .class ) ; assertThat ( org.springframework.statemachine.data.redis.RedisStateRepository . count ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.data.redis.RedisTransitionRepository . count ( ) , is ( NUMBER ) ) ; java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryState> < RedisRepositoryState > java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryState> = new java.util.ArrayList<org.springframework.statemachine.data.redis.RedisRepositoryState> <> ( ) ; org.springframework.statemachine.data.redis.RedisStateRepository . findAll ( ) . iterator ( ) . forEachRemaining ( java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryState> :: add ) ; java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryTransition> < RedisRepositoryTransition > java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryTransition> = new java.util.ArrayList<org.springframework.statemachine.data.redis.RedisRepositoryTransition> <> ( ) ; org.springframework.statemachine.data.redis.RedisTransitionRepository . findAll ( ) . iterator ( ) . forEachRemaining ( java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryTransition> :: add ) ; assertThat ( java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryState> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryTransition> . size ( ) , is ( NUMBER ) ) ; RedisRepositoryTransition org.springframework.statemachine.data.redis.RedisRepositoryTransition = java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryTransition> . get ( NUMBER ) ; assertThat ( org.springframework.statemachine.data.redis.RedisRepositoryTransition . getSource ( ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.data.redis.RedisRepositoryTransition . getTarget ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( java.lang.Class<?>[] ( ) ) ; context . refresh ( ) ; RedisStateRepository org.springframework.statemachine.data.redis.RedisStateRepository = context . getBean ( RedisStateRepository .class ) ; RedisRepositoryState org.springframework.statemachine.data.redis.RedisRepositoryState = new RedisRepositoryState ( STRING ) ; RedisRepositoryState org.springframework.statemachine.data.redis.RedisRepositoryState = new RedisRepositoryState ( STRING ) ; assertThat ( org.springframework.statemachine.data.redis.RedisStateRepository . count ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.data.redis.RedisStateRepository . save ( org.springframework.statemachine.data.redis.RedisRepositoryState ) ; org.springframework.statemachine.data.redis.RedisStateRepository . save ( org.springframework.statemachine.data.redis.RedisRepositoryState ) ; assertThat ( org.springframework.statemachine.data.redis.RedisStateRepository . count ( ) , is ( NUMBER ) ) ; RedisTransitionRepository org.springframework.statemachine.data.redis.RedisTransitionRepository = context . getBean ( RedisTransitionRepository .class ) ; RedisRepositoryTransition org.springframework.statemachine.data.redis.RedisRepositoryTransition = new RedisRepositoryTransition ( org.springframework.statemachine.data.redis.RedisRepositoryState , org.springframework.statemachine.data.redis.RedisRepositoryState , STRING ) ; org.springframework.statemachine.data.redis.RedisRepositoryTransition . setKind ( TransitionKind . EXTERNAL ) ; org.springframework.statemachine.data.redis.RedisTransitionRepository . save ( org.springframework.statemachine.data.redis.RedisRepositoryTransition ) ; assertThat ( org.springframework.statemachine.data.redis.RedisStateRepository . count ( ) , is ( NUMBER ) ) ; RedisRepositoryTransition org.springframework.statemachine.data.redis.RedisRepositoryTransition = org.springframework.statemachine.data.redis.RedisTransitionRepository . findAll ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.statemachine.data.redis.RedisRepositoryTransition . getSource ( ) . getState ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.data.redis.RedisRepositoryTransition . getTarget ( ) . getState ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.data.redis.RedisRepositoryTransition . getEvent ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.data.redis.RedisRepositoryTransition . getKind ( ) , is ( TransitionKind . EXTERNAL ) ) ; java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryState> < RedisRepositoryState > java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryState> = org.springframework.statemachine.data.redis.RedisStateRepository . findByMachineId ( STRING ) ; assertThat ( java.util.List<org.springframework.statemachine.data.redis.RedisRepositoryState> . size ( ) , is ( NUMBER ) ) ; context . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.statemachine.data.redis.RedisRepositoryTests.TestConfig .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.data.redis.AnnotationConfigApplicationContext org.springframework.statemachine.data.redis.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
