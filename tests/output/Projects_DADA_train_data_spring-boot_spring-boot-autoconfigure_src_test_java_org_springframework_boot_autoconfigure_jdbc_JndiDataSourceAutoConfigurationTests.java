<METHOD_START> @ Before public void void ( ) { this . java.lang.String = java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String ) ; java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String , TestableInitialContextFactory .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.lang.Thread . java.lang.Thread ( ) . void ( new JndiPropertiesHidingClassLoader ( java.lang.Class<? extends org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfigurationTests> ( ) . java.lang.ClassLoader ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { TestableInitialContextFactory . clearAll ( ) ; if ( this . java.lang.String != null ) { java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String , this . java.lang.String ) ; } else { java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String ) ; } if ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . close ( ) ; } java.lang.Thread . java.lang.Thread ( ) . void ( this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.IllegalStateException , javax.naming.NamingException { javax.sql.DataSource javax.sql.DataSource = new BasicDataSource ( ) ; void ( STRING , javax.sql.DataSource ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( JndiDataSourceAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isEqualTo ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.IllegalStateException , javax.naming.NamingException { javax.sql.DataSource javax.sql.DataSource = new BasicDataSource ( ) ; void ( STRING , javax.sql.DataSource ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( JndiDataSourceAutoConfiguration .class , org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfigurationTests.MBeanExporterConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isEqualTo ( javax.sql.DataSource ) ; MBeanExporter org.springframework.boot.autoconfigure.jdbc.MBeanExporter = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( MBeanExporter .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = ( java.util.Set<java.lang.String> < java.lang.String > ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.jdbc.MBeanExporter ) . getPropertyValue ( STRING ) ; assertThat ( java.util.Set<java.lang.String> ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.IllegalStateException , javax.naming.NamingException { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; void ( STRING , javax.sql.DataSource ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( JndiDataSourceAutoConfiguration .class , org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfigurationTests.MBeanExporterConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isEqualTo ( javax.sql.DataSource ) ; MBeanExporter org.springframework.boot.autoconfigure.jdbc.MBeanExporter = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( MBeanExporter .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = ( java.util.Set<java.lang.String> < java.lang.String > ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.jdbc.MBeanExporter ) . getPropertyValue ( STRING ) ; assertThat ( java.util.Set<java.lang.String> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , javax.sql.DataSource javax.sql.DataSource )			throws java.lang.IllegalStateException , javax.naming.NamingException { TestableInitialContextFactory . bind ( java.lang.String , javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.jdbc.MBeanExporter org.springframework.boot.autoconfigure.jdbc.MBeanExporter ( ) { return new MBeanExporter ( ) ; }  <METHOD_END>
