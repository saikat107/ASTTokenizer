<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this( java.lang.String[] , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] , PathMatcher org.springframework.messaging.handler.PathMatcher ) { this( java.util.List<java.lang.String> ( java.lang.String[] ) , org.springframework.messaging.handler.PathMatcher ); }  <METHOD_END>
<METHOD_START> private void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , PathMatcher org.springframework.messaging.handler.PathMatcher ) { this . org.springframework.messaging.handler.PathMatcher = ( org.springframework.messaging.handler.PathMatcher != null ? org.springframework.messaging.handler.PathMatcher : new AntPathMatcher ( ) ) ; this . java.util.Set<java.lang.String> = java.util.Collections . java.util.Set ( java.util.Set<java.lang.String> ( java.util.Collection<java.lang.String> , this . org.springframework.messaging.handler.PathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String ... java.lang.String[] ) { return ( java.lang.String[] != null ? java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) : java.util.Collections . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , PathMatcher org.springframework.messaging.handler.PathMatcher ) { if ( java.util.Collection<java.lang.String> == null ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } boolean boolean = org.springframework.messaging.handler.PathMatcher . combine ( STRING , STRING ) . equals ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Collection<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { if ( boolean ) { if ( StringUtils . hasLength ( java.lang.String ) && ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } } java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.handler.DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition ( org.springframework.messaging.handler.DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; if ( ! this . java.util.Set<java.lang.String> . boolean ( ) && ! org.springframework.messaging.handler.DestinationPatternsMessageCondition . java.util.Set<java.lang.String> . boolean ( ) ) { for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { for ( java.lang.String java.lang.String : org.springframework.messaging.handler.DestinationPatternsMessageCondition . java.util.Set<java.lang.String> ) { java.util.Set<java.lang.String> . boolean ( this . org.springframework.messaging.handler.PathMatcher . combine ( java.lang.String , java.lang.String ) ) ; } } } else if ( ! this . java.util.Set<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( this . java.util.Set<java.lang.String> ) ; } else if ( ! org.springframework.messaging.handler.DestinationPatternsMessageCondition . java.util.Set<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.messaging.handler.DestinationPatternsMessageCondition . java.util.Set<java.lang.String> ) ; } else { java.util.Set<java.lang.String> . boolean ( STRING ) ; } return new org.springframework.messaging.handler.DestinationPatternsMessageCondition ( java.util.Set<java.lang.String> , this . org.springframework.messaging.handler.PathMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.handler.DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition ( Message < ? > org.springframework.messaging.handler.Message<?> ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.messaging.handler.Message<> . getHeaders ( ) . get ( java.lang.String ) ; if ( java.lang.String == null ) { return null ; } if ( this . java.util.Set<java.lang.String> . boolean ( ) ) { return this ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) || this . org.springframework.messaging.handler.PathMatcher . match ( java.lang.String , java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( java.util.List<java.lang.String> . boolean ( ) ) { return null ; } java.util.Collections . void ( java.util.List<java.lang.String> , this . org.springframework.messaging.handler.PathMatcher . getPatternComparator ( java.lang.String ) ) ; return new org.springframework.messaging.handler.DestinationPatternsMessageCondition ( java.util.List<java.lang.String> , this . org.springframework.messaging.handler.PathMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.messaging.handler.DestinationPatternsMessageCondition org.springframework.messaging.handler.DestinationPatternsMessageCondition , Message < ? > org.springframework.messaging.handler.Message<?> ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.messaging.handler.Message<> . getHeaders ( ) . get ( java.lang.String ) ; java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> = this . org.springframework.messaging.handler.PathMatcher . getPatternComparator ( java.lang.String ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.messaging.handler.DestinationPatternsMessageCondition . java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) && java.util.Iterator<java.lang.String> . boolean ( ) ) { int int = java.util.Comparator<java.lang.String> . int ( java.util.Iterator<java.lang.String> . java.lang.String ( ) , java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; if ( int != NUMBER ) { return int ; } } if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { return - NUMBER ; } else if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { return NUMBER ; } else { return NUMBER ; } }  <METHOD_END>
