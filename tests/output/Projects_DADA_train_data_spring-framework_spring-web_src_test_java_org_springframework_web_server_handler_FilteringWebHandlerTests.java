<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter = new org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter = new org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter = new org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler = new org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler ( ) ; new FilteringWebHandler ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler , java.util.Arrays . java.util.List<org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter> ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter , org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter , org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter ) ) . handle ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) . block ( java.time.Duration . java.time.Duration ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter . boolean ( ) ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter . boolean ( ) ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter . boolean ( ) ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler = new org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler ( ) ; new FilteringWebHandler ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler , java.util.Collections . java.util.List<java.lang.Object> ( ) ) . handle ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) . block ( java.time.Duration . java.time.Duration ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter = new org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.ShortcircuitingFilter org.springframework.web.server.handler.FilteringWebHandlerTests.ShortcircuitingFilter = new org.springframework.web.server.handler.FilteringWebHandlerTests.ShortcircuitingFilter ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter = new org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler = new org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler ( ) ; new FilteringWebHandler ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler , java.util.Arrays . java.util.List<org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter> ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter , org.springframework.web.server.handler.FilteringWebHandlerTests.ShortcircuitingFilter , org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter ) ) . handle ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) . block ( java.time.Duration . java.time.Duration ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter . boolean ( ) ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.ShortcircuitingFilter . boolean ( ) ) ; assertFalse ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestFilter . boolean ( ) ) ; assertFalse ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.server.handler.FilteringWebHandlerTests.AsyncFilter org.springframework.web.server.handler.FilteringWebHandlerTests.AsyncFilter = new org.springframework.web.server.handler.FilteringWebHandlerTests.AsyncFilter ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler = new org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler ( ) ; new FilteringWebHandler ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler , java.util.Collections . java.util.List<org.springframework.web.server.handler.FilteringWebHandlerTests.AsyncFilter> ( org.springframework.web.server.handler.FilteringWebHandlerTests.AsyncFilter ) ) . handle ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) . block ( java.time.Duration . java.time.Duration ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.AsyncFilter . boolean ( ) ) ; assertTrue ( org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerHttpRequest org.springframework.web.server.handler.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.server.handler.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.server.handler.FilteringWebHandlerTests.TestExceptionHandler org.springframework.web.server.handler.FilteringWebHandlerTests.TestExceptionHandler = new org.springframework.web.server.handler.FilteringWebHandlerTests.TestExceptionHandler ( ) ; WebHttpHandlerBuilder . webHandler ( new org.springframework.web.server.handler.FilteringWebHandlerTests.StubWebHandler ( ) ) . filters ( java.util.Collections . java.util.List<org.springframework.web.server.handler.FilteringWebHandlerTests.ExceptionFilter> ( new org.springframework.web.server.handler.FilteringWebHandlerTests.ExceptionFilter ( ) ) ) . exceptionHandlers ( java.util.Collections . java.util.List<org.springframework.web.server.handler.FilteringWebHandlerTests.TestExceptionHandler> ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestExceptionHandler ) ) . build ( ) . handle ( org.springframework.web.server.handler.MockServerHttpRequest , org.springframework.web.server.handler.MockServerHttpResponse ) . block ( ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.web.server.handler.MockServerHttpResponse . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.server.handler.FilteringWebHandlerTests.TestExceptionHandler . java.lang.Throwable ) ; assertEquals ( STRING , org.springframework.web.server.handler.FilteringWebHandlerTests.TestExceptionHandler . java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , WebFilterChain org.springframework.web.server.handler.WebFilterChain ) { this . boolean = true ; return org.springframework.web.server.handler.Mono<java.lang.Void> ( org.springframework.web.server.handler.ServerWebExchange , org.springframework.web.server.handler.WebFilterChain ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , WebFilterChain org.springframework.web.server.handler.WebFilterChain ) { return org.springframework.web.server.handler.WebFilterChain . filter ( org.springframework.web.server.handler.ServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , WebFilterChain org.springframework.web.server.handler.WebFilterChain ) { return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , WebFilterChain org.springframework.web.server.handler.WebFilterChain ) { return org.springframework.web.server.handler.Mono<java.lang.String> ( ) . then ( asyncResult -> { logger . debug ( STRING + asyncResult ) ; return chain . filter ( exchange ) ; } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.server.handler.Mono<java.lang.String> < java.lang.String > org.springframework.web.server.handler.Mono<java.lang.String> ( ) { return Mono . just ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , WebFilterChain org.springframework.web.server.handler.WebFilterChain ) { return Mono . error ( new java.lang.IllegalStateException ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; return Mono . error ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange ) { org.springframework.web.server.handler.Log . trace ( STRING ) ; this . boolean = true ; return Mono . empty ( ) ; }  <METHOD_END>
