<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.ConfigurableApplicationContext org.springframework.cache.jcache.ConfigurableApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.cache.jcache.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.cache.jcache.AnnotationConfigApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.cache.jcache.CachingProvider ( ) ) ; org.springframework.cache.jcache.AnnotationConfigApplicationContext . register ( org.springframework.cache.jcache.JCacheEhCacheAnnotationTests.EnableCachingConfig .class ) ; org.springframework.cache.jcache.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.cache.jcache.CacheManager = org.springframework.cache.jcache.AnnotationConfigApplicationContext . getBean ( STRING , CacheManager .class ) ; return org.springframework.cache.jcache.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.CachingProvider org.springframework.cache.jcache.CachingProvider ( ) { return Caching . getCachingProvider ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.cache.jcache.CacheManager != null ) { org.springframework.cache.jcache.CacheManager . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test @ Ignore ( STRING ) public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org . springframework . cache . org.springframework.cache.CacheManager org.springframework.cache.CacheManager ( ) { return new JCacheCacheManager ( org.springframework.cache.jcache.CacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.CacheManager org.springframework.cache.jcache.CacheManager ( ) { CacheManager org.springframework.cache.jcache.CacheManager = this . org.springframework.cache.jcache.CachingProvider . getCacheManager ( ) ; MutableConfiguration < java.lang.Object , java.lang.Object > org.springframework.cache.jcache.MutableConfiguration<java.lang.Object,java.lang.Object> = new MutableConfiguration <> ( ) ; org.springframework.cache.jcache.MutableConfiguration<java.lang.Object,java.lang.Object> . setStoreByValue ( false ) ; org.springframework.cache.jcache.CacheManager . createCache ( STRING , org.springframework.cache.jcache.MutableConfiguration<java.lang.Object,java.lang.Object> ) ; org.springframework.cache.jcache.CacheManager . createCache ( STRING , org.springframework.cache.jcache.MutableConfiguration<java.lang.Object,java.lang.Object> ) ; org.springframework.cache.jcache.CacheManager . createCache ( STRING , org.springframework.cache.jcache.MutableConfiguration<java.lang.Object,java.lang.Object> ) ; return org.springframework.cache.jcache.CacheManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.CacheableService<?> < ? > org.springframework.cache.jcache.CacheableService<?> ( ) { return new DefaultCacheableService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.CacheableService<?> < ? > org.springframework.cache.jcache.CacheableService<?> ( ) { return new AnnotatedClassCacheableService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.jcache.KeyGenerator org.springframework.cache.jcache.KeyGenerator ( ) { return new SimpleKeyGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.jcache.KeyGenerator org.springframework.cache.jcache.KeyGenerator ( ) { return new SomeCustomKeyGenerator ( ) ; }  <METHOD_END>
