<METHOD_START> @ Test public void void ( ) { SampleMappingContext org.springframework.data.mapping.context.SampleMappingContext = new SampleMappingContext ( ) ; org.springframework.data.mapping.context.SampleMappingContext . setInitialEntitySet ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests.Person>> ( org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.Person .class ) ) ; org.springframework.data.mapping.context.SampleMappingContext . initialize ( ) ; assertThat ( org.springframework.data.mapping.context.SampleMappingContext . getManagedTypes ( ) ) . contains ( ClassTypeInformation . from ( org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SampleMappingContext org.springframework.data.mapping.context.SampleMappingContext = new SampleMappingContext ( ) ; org.springframework.data.mapping.context.SampleMappingContext . setInitialEntitySet ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests.Person>> ( org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.Person .class ) ) ; org.springframework.data.mapping.context.SampleMappingContext . initialize ( ) ; assertThat ( org.springframework.data.mapping.context.SampleMappingContext . hasPersistentEntityFor ( org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.Person .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SampleMappingContext org.springframework.data.mapping.context.SampleMappingContext = new SampleMappingContext ( ) ; PersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.context.PersistentEntity<java.lang.Object,org.springframework.data.mapping.context.SamplePersistentProperty> = org.springframework.data.mapping.context.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests.InterfaceOnly .class ) ; assertThat ( org.springframework.data.mapping.context.PersistentEntity<java.lang.Object,org.springframework.data.mapping.context.SamplePersistentProperty> . getIdProperty ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { final org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.DummyMappingContext org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.DummyMappingContext = new org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.DummyMappingContext ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.DummyMappingContext . getPersistentEntity ( org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.Person .class ) ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { PersistentEntity < java.lang.Object , T > org.springframework.data.mapping.context.PersistentEntity<java.lang.Object,T> = org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.DummyMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.context.AbstractMappingContextIntegrationTests<T>.Person .class ) ; org.springframework.data.mapping.context.PersistentEntity<java.lang.Object,T> . doWithProperties ( ( PropertyHandler < T > ) persistentProperty -> { try { Thread . sleep ( NUMBER ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } } ) ; } ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected < S > org.springframework.data.mapping.context.BasicPersistentEntity<java.lang.Object,T> < java.lang.Object , T > org.springframework.data.mapping.context.BasicPersistentEntity<java.lang.Object,T> ( TypeInformation < S > org.springframework.data.mapping.context.TypeInformation<S> ) { return ( BasicPersistentEntity < java.lang.Object , T > ) new BasicPersistentEntity < S , T > ( org.springframework.data.mapping.context.TypeInformation<S> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected T T ( Property org.springframework.data.mapping.context.Property , BasicPersistentEntity < java.lang.Object , T > org.springframework.data.mapping.context.BasicPersistentEntity<java.lang.Object,T> , SimpleTypeHolder org.springframework.data.mapping.context.SimpleTypeHolder ) { PersistentProperty org.springframework.data.mapping.context.PersistentProperty = mock ( PersistentProperty .class ) ; when ( org.springframework.data.mapping.context.PersistentProperty . getTypeInformation ( ) ) . thenReturn ( org.springframework.data.mapping.context.BasicPersistentEntity<java.lang.Object,T> . getTypeInformation ( ) ) ; when ( org.springframework.data.mapping.context.PersistentProperty . getName ( ) ) . thenReturn ( org.springframework.data.mapping.context.Property . getName ( ) ) ; when ( org.springframework.data.mapping.context.PersistentProperty . getPersistentEntityType ( ) ) . thenReturn ( java.util.Collections . java.util.Set ) ; try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } return ( T ) org.springframework.data.mapping.context.PersistentProperty ; }  <METHOD_END>
<METHOD_START> @ Id java.lang.String java.lang.String ( )  <METHOD_END>
