<METHOD_START> void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.boot.devtools.livereload.Frame.Type = org.springframework.boot.devtools.livereload.Frame.Type . org.springframework.boot.devtools.livereload.Frame.Type ; this . byte[] = java.lang.String . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.devtools.livereload.Frame.Type org.springframework.boot.devtools.livereload.Frame.Type ) { Assert . notNull ( org.springframework.boot.devtools.livereload.Frame.Type , STRING ) ; this . org.springframework.boot.devtools.livereload.Frame.Type = org.springframework.boot.devtools.livereload.Frame.Type ; this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.devtools.livereload.Frame.Type org.springframework.boot.devtools.livereload.Frame.Type , byte [] byte[] ) { this . org.springframework.boot.devtools.livereload.Frame.Type = org.springframework.boot.devtools.livereload.Frame.Type ; this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.livereload.Frame.Type org.springframework.boot.devtools.livereload.Frame.Type ( ) { return this . org.springframework.boot.devtools.livereload.Frame.Type ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return this . byte[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return new java.lang.String ( this . byte[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { java.io.OutputStream . void ( NUMBER | this . org.springframework.boot.devtools.livereload.Frame.Type . int ) ; if ( this . byte[] . int < NUMBER ) { java.io.OutputStream . void ( NUMBER | ( this . byte[] . int & NUMBER ) ) ; } else { java.io.OutputStream . void ( NUMBER ) ; java.io.OutputStream . void ( this . byte[] . int >> NUMBER & NUMBER ) ; java.io.OutputStream . void ( this . byte[] . int >> NUMBER & NUMBER ) ; } java.io.OutputStream . void ( this . byte[] ) ; java.io.OutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.livereload.Frame org.springframework.boot.devtools.livereload.Frame ( ConnectionInputStream org.springframework.boot.devtools.livereload.ConnectionInputStream ) throws java.io.IOException { int int = org.springframework.boot.devtools.livereload.ConnectionInputStream . checkedRead ( ) ; Assert . state ( ( int & NUMBER ) != NUMBER , STRING ) ; int int = org.springframework.boot.devtools.livereload.ConnectionInputStream . checkedRead ( ) ; boolean boolean = ( int & NUMBER ) != NUMBER ; int int = ( int & NUMBER ) ; Assert . state ( int != NUMBER , STRING ) ; if ( int == NUMBER ) { int = ( ( org.springframework.boot.devtools.livereload.ConnectionInputStream . checkedRead ( ) ) << NUMBER | org.springframework.boot.devtools.livereload.ConnectionInputStream . checkedRead ( ) ) ; } byte [] byte[] = new byte [ NUMBER ] ; if ( boolean ) { org.springframework.boot.devtools.livereload.ConnectionInputStream . readFully ( byte[] , NUMBER , byte[] . int ) ; } byte [] byte[] = new byte [ int ] ; org.springframework.boot.devtools.livereload.ConnectionInputStream . readFully ( byte[] , NUMBER , int ) ; if ( boolean ) { for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { byte[] [ int ] ^= byte[] [ int % NUMBER ] ; } } return new org.springframework.boot.devtools.livereload.Frame ( org.springframework.boot.devtools.livereload.Frame.Type . org.springframework.boot.devtools.livereload.Frame.Type ( int & NUMBER ) , byte[] ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.livereload.Frame.Type org.springframework.boot.devtools.livereload.Frame.Type ( int int ) { for ( org.springframework.boot.devtools.livereload.Frame.Type org.springframework.boot.devtools.livereload.Frame.Type : org.springframework.boot.devtools.livereload.Frame.Type[] ( ) ) { if ( org.springframework.boot.devtools.livereload.Frame.Type . int == int ) { return org.springframework.boot.devtools.livereload.Frame.Type ; } } throw new java.lang.IllegalStateException ( STRING + int ) ; }  <METHOD_END>
