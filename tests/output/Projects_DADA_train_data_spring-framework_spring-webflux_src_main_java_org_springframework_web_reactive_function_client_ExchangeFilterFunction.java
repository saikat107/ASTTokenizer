<METHOD_START> org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> < ClientResponse > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ( ClientRequest org.springframework.web.reactive.function.client.ClientRequest , ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction );  <METHOD_END>
<METHOD_START> default org.springframework.web.reactive.function.client.ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction ( org.springframework.web.reactive.function.client.ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction ) { Assert . notNull ( org.springframework.web.reactive.function.client.ExchangeFilterFunction , STRING ) ; return ( org.springframework.web.reactive.function.client.ClientRequest , org.springframework.web.reactive.function.client.ExchangeFunction ) -> { ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction = exchangeRequest -> after . filter ( exchangeRequest , next ) ; return org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ( org.springframework.web.reactive.function.client.ClientRequest , org.springframework.web.reactive.function.client.ExchangeFunction ) ; } ; }  <METHOD_END>
<METHOD_START> default org.springframework.web.reactive.function.client.ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction ( ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction ) { Assert . notNull ( org.springframework.web.reactive.function.client.ExchangeFunction , STRING ) ; return request -> this . filter ( request , exchange ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction ( java.util.function.Function<org.springframework.web.reactive.function.client.ClientRequest,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientRequest>> < ClientRequest , Mono < ClientRequest > > java.util.function.Function<org.springframework.web.reactive.function.client.ClientRequest,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientRequest>> ) { Assert . notNull ( java.util.function.Function<org.springframework.web.reactive.function.client.ClientRequest,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientRequest>> , STRING ) ; return ( org.springframework.web.reactive.function.client.ClientRequest , org.springframework.web.reactive.function.client.ExchangeFunction ) -> java.util.function.Function<org.springframework.web.reactive.function.client.ClientRequest,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientRequest>> . apply ( org.springframework.web.reactive.function.client.ClientRequest ) . then ( org.springframework.web.reactive.function.client.ExchangeFunction :: exchange ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction ( java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse>> < ClientResponse , Mono < ClientResponse > > java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse>> ) { Assert . notNull ( java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse>> , STRING ) ; return ( org.springframework.web.reactive.function.client.ClientRequest , org.springframework.web.reactive.function.client.ExchangeFunction ) -> org.springframework.web.reactive.function.client.ExchangeFunction . exchange ( org.springframework.web.reactive.function.client.ClientRequest ) . then ( java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse>> ) ; }  <METHOD_END>
