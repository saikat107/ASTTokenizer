<METHOD_START> public void ( ) { super( MediaType . ALL ); this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { super( MediaType . ALL ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return Resource .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.converter.Resource org.springframework.http.converter.Resource ( java.lang.Class<? extends org.springframework.http.converter.Resource> < ? extends Resource > java.lang.Class<? extends org.springframework.http.converter.Resource> , HttpInputMessage org.springframework.http.converter.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotReadableException { final java.lang.String java.lang.String = org.springframework.http.converter.HttpInputMessage . getHeaders ( ) . getContentDisposition ( ) . getFilename ( ) ; if ( this . boolean && InputStreamResource .class == java.lang.Class<> ) { return new InputStreamResource ( org.springframework.http.converter.HttpInputMessage . getBody ( ) ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; } else if ( java.lang.Class<> . boolean ( ByteArrayResource .class ) ) { byte [] byte[] = StreamUtils . copyToByteArray ( org.springframework.http.converter.HttpInputMessage . getBody ( ) ) ; return new ByteArrayResource ( byte[] ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.converter.MediaType org.springframework.http.converter.MediaType ( Resource org.springframework.http.converter.Resource ) { return MediaTypeFactory . getMediaType ( org.springframework.http.converter.Resource ) . orElse ( MediaType . APPLICATION_OCTET_STREAM ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Long java.lang.Long ( Resource org.springframework.http.converter.Resource , MediaType org.springframework.http.converter.MediaType ) throws java.io.IOException { if ( InputStreamResource .class == org.springframework.http.converter.Resource . getClass ( ) ) { return null ; } long long = org.springframework.http.converter.Resource . contentLength ( ) ; return ( long < NUMBER ? null : long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Resource org.springframework.http.converter.Resource , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { void ( org.springframework.http.converter.Resource , org.springframework.http.converter.HttpOutputMessage ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Resource org.springframework.http.converter.Resource , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { try { java.io.InputStream java.io.InputStream = org.springframework.http.converter.Resource . getInputStream ( ) ; try { StreamUtils . copy ( java.io.InputStream , org.springframework.http.converter.HttpOutputMessage . getBody ( ) ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } finally { try { java.io.InputStream . void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { } }  <METHOD_END>
