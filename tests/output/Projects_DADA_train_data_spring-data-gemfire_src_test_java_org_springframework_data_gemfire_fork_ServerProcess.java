<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.lang.Throwable { ConfigurableApplicationContext org.springframework.data.gemfire.fork.ConfigurableApplicationContext = null ; try { org.springframework.data.gemfire.fork.ConfigurableApplicationContext = org.springframework.data.gemfire.fork.ConfigurableApplicationContext ( java.lang.String[] ) ; void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.data.gemfire.fork.Logger . debug ( STRING , java.lang.Throwable ) ; throw java.lang.Throwable ; } finally { boolean ( org.springframework.data.gemfire.fork.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.ConfigurableApplicationContext org.springframework.data.gemfire.fork.ConfigurableApplicationContext ( java.lang.String [] java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.fork.ServerProcess .class . java.lang.String ( ) , STRING ) ) ; ConfigurableApplicationContext org.springframework.data.gemfire.fork.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String[] ) ; org.springframework.data.gemfire.fork.ConfigurableApplicationContext . registerShutdownHook ( ) ; return org.springframework.data.gemfire.fork.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ConfigurableApplicationContext org.springframework.data.gemfire.fork.ConfigurableApplicationContext ) { if ( org.springframework.data.gemfire.fork.ConfigurableApplicationContext != null ) { org.springframework.data.gemfire.fork.ConfigurableApplicationContext . close ( ) ; return ! ( org.springframework.data.gemfire.fork.ConfigurableApplicationContext . isRunning ( ) || org.springframework.data.gemfire.fork.ConfigurableApplicationContext . isActive ( ) ) ; } return true ; }  <METHOD_END>
<METHOD_START> private static void void ( ) java.io.IOException { ProcessUtils . writePid ( new java.io.File ( FileSystemUtils . WORKING_DIRECTORY , java.lang.String ( ) ) , ProcessUtils . currentPid ( ) ) ; ProcessUtils . waitForStopSignal ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return org.springframework.data.gemfire.fork.ServerProcess .class . java.lang.String ( ) . java.lang.String ( ) . java.lang.String ( STRING ) ; }  <METHOD_END>
