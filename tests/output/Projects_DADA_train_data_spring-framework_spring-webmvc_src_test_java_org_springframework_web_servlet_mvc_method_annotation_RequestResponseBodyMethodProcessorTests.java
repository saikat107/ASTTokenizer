<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean .class , MultiValueMap .class , java.lang.String .class ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_JSON_VALUE ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> = ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean > ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ( NUMBER ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_FORM_URLENCODED_VALUE ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new AllEncompassingFormHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; @ java.lang.SuppressWarnings ( STRING ) MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = ( MultiValueMap < java.lang.String , java.lang.String > ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean = ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMessageNotReadableException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = java.util.Collections . java.util.List ( new StringHttpMessageConverter ( ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections . java.util.List<java.lang.Object> ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.EmptyRequestBodyAdvice ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , java.util.List<java.lang.Object> ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyParameterizedController .class . java.lang.reflect.Method ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MySimpleParameterizedController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_JSON_VALUE ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean = ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyParameterizedControllerWithList .class . java.lang.reflect.Method ( STRING , java.util.List .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MySimpleParameterizedControllerWithList ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_JSON_VALUE ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> = ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean > ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ( NUMBER ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyParameterizedController .class . java.lang.reflect.Method ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MySimpleParameterizedController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_JSON_VALUE ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; HttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter = new MappingJackson2HttpMessageConverter ( ) ; HttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter = ProxyFactory . getProxy ( HttpMessageConverter .class , new SingletonTargetSource ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean = ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . writeWithMessageConverters ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ResponseBodyController .class . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( new java.lang.StringBuilder ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . writeWithMessageConverters ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests> ( ) . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ResourceHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; ClassPathResource org.springframework.web.servlet.mvc.method.annotation.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests> ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . writeWithMessageConverters ( org.springframework.web.servlet.mvc.method.annotation.ClassPathResource , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests> ( ) . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( new java.util.ArrayList <> ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . writeWithMessageConverters ( new java.io.ByteArrayOutputStream ( ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . addMediaType ( STRING , new MediaType ( STRING , STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.Collections . java.util.List ( new StringHttpMessageConverter ( ) ) , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , false , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , false , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , true , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , false , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , true , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , true , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , false , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , true , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , true , STRING , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , true , STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( WebUtils . FORWARD_REQUEST_URI_ATTRIBUTE , STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , true , STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . removeAttribute ( WebUtils . FORWARD_REQUEST_URI_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ResponseBodyController .class . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.TestRestController .class . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewResponseBodyAdvice ( ) ) ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; HttpEntityMethodProcessor org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor = new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewResponseBodyAdvice ( ) ) ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2XmlHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewResponseBodyAdvice ( ) ) ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2XmlHttpMessageConverter ( ) ) ; HttpEntityMethodProcessor org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor = new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewResponseBodyAdvice ( ) ) ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_JSON_VALUE ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewRequestBodyAdvice ( ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean = ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , this . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . java.lang.String ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . java.lang.String ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_JSON_VALUE ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING , HttpEntity .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; HttpEntityMethodProcessor org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor = new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewRequestBodyAdvice ( ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) HttpEntity < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> = ( HttpEntity < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean > ) org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , this . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) . getWithView1 ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) . getWithView2 ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) . getWithoutView ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_XML_VALUE ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2XmlHttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewRequestBodyAdvice ( ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean = ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , this . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . java.lang.String ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . java.lang.String ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_XML_VALUE ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING , HttpEntity .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2XmlHttpMessageConverter ( ) ) ; HttpEntityMethodProcessor org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor = new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.Collections . java.util.List ( new JsonViewRequestBodyAdvice ( ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) HttpEntity < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> = ( HttpEntity < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean > ) org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , this . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ValidatingBinderFactory ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) . getWithView1 ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) . getWithView2 ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) . getWithoutView ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable> ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController .class . java.lang.reflect.Method ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getReturnType ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonController ( ) . java.lang.String ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . APPLICATION_JSON_UTF8_VALUE ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyControllerImplementingInterface .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyControllerImplementingInterface ( ) , java.lang.reflect.Method ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethodParameters ( ) [ NUMBER ] ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . readWithMessageConverters ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getGenericParameterType ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( RequestResponseBodyMethodProcessor org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor , boolean boolean , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ; if ( boolean ) { assertEquals ( STRING + java.lang.String + STRING , STRING , java.lang.String ) ; } else { assertNull ( STRING + java.lang.String + STRING , java.lang.String ) ; } this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( @ RequestBody java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean> , @ RequestBody org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean , @ RequestBody MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> , @ RequestBody java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.Resource org.springframework.web.servlet.mvc.method.annotation.Resource ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping java.io.OutputStream java.io.OutputStream ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ RequestBody DTO DTO ) {}  <METHOD_END>
<METHOD_START> java.lang.Long java.lang.Long ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.Long java.lang.Long );  <METHOD_END>
<METHOD_START> public void void ( @ RequestBody java.util.List<DTO> < DTO > java.util.List<DTO> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ( NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { LocalValidatorFactoryBean org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = new WebDataBinder ( java.lang.Object , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setValidator ( org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean ) ; return org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public java.lang.CharSequence java.lang.CharSequence ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ RequestMapping @ ResponseBody @ JsonView ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyJacksonView2 .class ) public org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ( ) { org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . void ( STRING ) ; return org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ JsonView ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyJacksonView2 .class ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> ( ) { org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean . void ( STRING ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( new MappingJackson2JsonView ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndView . addObject ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ) ; return new ResponseEntity <> ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean , HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ ResponseBody public org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ( @ JsonView ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyJacksonView1 .class ) @ RequestBody org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ) { return org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ ResponseBody public org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean ( @ JsonView ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.MyJacksonView1 .class ) HttpEntity < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> ) { return org.springframework.web.servlet.mvc.method.annotation.HttpEntity<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.JacksonViewBean> . getBody ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ ResponseBody public java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass > java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass > java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> . boolean ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Foo ( STRING ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> . boolean ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Bar ( STRING ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.ParentClass> ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ ResponseBody public org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable ( ) { org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . void ( STRING ) ; return org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ ResponseBody public java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable> < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable > java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable> ( ) { org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean = new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean . void ( STRING ) ; return java.util.Arrays . java.util.List<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.Identifiable> ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests.SimpleBean ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( produces = MediaType . APPLICATION_JSON_VALUE ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { return StringHttpMessageConverter .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage ( HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { return org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> default A A ( @ RequestBody A A ) { return A ; }  <METHOD_END>
