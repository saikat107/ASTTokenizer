<METHOD_START> public void ( PropertyResolver org.springframework.boot.bind.PropertyResolver ) { this( org.springframework.boot.bind.PropertyResolver , null ); }  <METHOD_END>
<METHOD_START> public void ( PropertyResolver org.springframework.boot.bind.PropertyResolver , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.boot.bind.PropertyResolver , STRING ) ; this . org.springframework.boot.bind.PropertyResolver = org.springframework.boot.bind.PropertyResolver ; this . java.lang.String = ( java.lang.String == null ? STRING : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.IllegalStateException { return java.lang.String ( java.lang.String , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> )			throws java.lang.IllegalStateException { T T = T ( java.lang.String , java.lang.Class<T> ) ; Assert . state ( T != null , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , java.lang.String .class , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , java.lang.String .class , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return T ( java.lang.String , java.lang.Class<T> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , T T ) { RelaxedNames org.springframework.boot.bind.RelaxedNames = new RelaxedNames ( this . java.lang.String ) ; RelaxedNames org.springframework.boot.bind.RelaxedNames = new RelaxedNames ( java.lang.String ) ; for ( java.lang.String java.lang.String : org.springframework.boot.bind.RelaxedNames ) { for ( java.lang.String java.lang.String : org.springframework.boot.bind.RelaxedNames ) { if ( this . org.springframework.boot.bind.PropertyResolver . containsProperty ( java.lang.String + java.lang.String ) ) { return this . org.springframework.boot.bind.PropertyResolver . getProperty ( java.lang.String + java.lang.String , java.lang.Class<T> ) ; } } } return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { RelaxedNames org.springframework.boot.bind.RelaxedNames = new RelaxedNames ( this . java.lang.String ) ; RelaxedNames org.springframework.boot.bind.RelaxedNames = new RelaxedNames ( java.lang.String ) ; for ( java.lang.String java.lang.String : org.springframework.boot.bind.RelaxedNames ) { for ( java.lang.String java.lang.String : org.springframework.boot.bind.RelaxedNames ) { if ( this . org.springframework.boot.bind.PropertyResolver . containsProperty ( java.lang.String + java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String )			throws java.lang.IllegalArgumentException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String ) { Assert . isInstanceOf ( ConfigurableEnvironment .class , this . org.springframework.boot.bind.PropertyResolver , STRING ) ; ConfigurableEnvironment org.springframework.boot.bind.ConfigurableEnvironment = ( ConfigurableEnvironment ) this . org.springframework.boot.bind.PropertyResolver ; return PropertySourceUtils . getSubProperties ( org.springframework.boot.bind.ConfigurableEnvironment . getPropertySources ( ) , this . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.bind.RelaxedPropertyResolver org.springframework.boot.bind.RelaxedPropertyResolver ( Environment org.springframework.boot.bind.Environment , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.boot.bind.Environment , STRING ) ; PropertyResolver org.springframework.boot.bind.PropertyResolver = org.springframework.boot.bind.Environment ; if ( org.springframework.boot.bind.Environment instanceof ConfigurableEnvironment ) { org.springframework.boot.bind.PropertyResolver = new PropertySourcesPropertyResolver ( ( ( ConfigurableEnvironment ) org.springframework.boot.bind.Environment ) . getPropertySources ( ) ) ; ( ( PropertySourcesPropertyResolver ) org.springframework.boot.bind.PropertyResolver ) . setIgnoreUnresolvableNestedPlaceholders ( true ) ; } return new org.springframework.boot.bind.RelaxedPropertyResolver ( org.springframework.boot.bind.PropertyResolver , java.lang.String ) ; }  <METHOD_END>
