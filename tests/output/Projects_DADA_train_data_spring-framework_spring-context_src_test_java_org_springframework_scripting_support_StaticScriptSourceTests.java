<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new StaticScriptSource ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new StaticScriptSource ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new StaticScriptSource ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( STRING , org.springframework.scripting.support.StaticScriptSource . isModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scripting.support.StaticScriptSource . getScriptAsString ( ) ; assertFalse ( STRING , org.springframework.scripting.support.StaticScriptSource . isModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { boolean boolean = org.springframework.scripting.support.StaticScriptSource . isModified ( ) ; org.springframework.scripting.support.StaticScriptSource . toString ( ) ; assertEquals ( STRING , boolean , org.springframework.scripting.support.StaticScriptSource . isModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scripting.support.StaticScriptSource . setScript ( STRING ) ; assertTrue ( STRING , org.springframework.scripting.support.StaticScriptSource . isModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scripting.support.StaticScriptSource . setScript ( java.lang.String ) ; assertFalse ( STRING , org.springframework.scripting.support.StaticScriptSource . isModified ( ) ) ; }  <METHOD_END>
