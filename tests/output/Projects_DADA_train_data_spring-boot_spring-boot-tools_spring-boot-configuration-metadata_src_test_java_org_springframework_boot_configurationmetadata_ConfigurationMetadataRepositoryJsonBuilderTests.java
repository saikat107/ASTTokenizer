<METHOD_START> @ Test public void void ( ) java.io.IOException { this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; ConfigurationMetadataRepositoryJsonBuilder . create ( ) . withJsonResource ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; try { ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = ConfigurationMetadataRepositoryJsonBuilder . create ( java.io.InputStream ) . build ( ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; try { ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = ConfigurationMetadataRepositoryJsonBuilder . create ( java.io.InputStream ) . build ( ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; try { ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = ConfigurationMetadataRepositoryJsonBuilder . create ( java.io.InputStream , java.io.InputStream ) . build ( ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) , STRING , STRING , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; } finally { java.io.InputStream . void ( ) ; java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; try { ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = ConfigurationMetadataRepositoryJsonBuilder . create ( java.io.InputStream , java.io.InputStream ) . build ( ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) , STRING , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; } finally { java.io.InputStream . void ( ) ; java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; try { ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = ConfigurationMetadataRepositoryJsonBuilder . create ( java.io.InputStream , java.io.InputStream ) . build ( ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; ConfigurationMetadataGroup org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getProperties ( ) , STRING , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getProperties ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) , STRING , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; } finally { java.io.InputStream . void ( ) ; java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; try { ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = ConfigurationMetadataRepositoryJsonBuilder . create ( java.io.InputStream ) . build ( ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; java.io.InputStream java.io.InputStream = getInputStreamFor ( STRING ) ; try { ConfigurationMetadataRepositoryJsonBuilder org.springframework.boot.configurationmetadata.ConfigurationMetadataRepositoryJsonBuilder = ConfigurationMetadataRepositoryJsonBuilder . create ( ) ; ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepositoryJsonBuilder . withJsonResource ( java.io.InputStream ) . build ( ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepositoryJsonBuilder . withJsonResource ( java.io.InputStream ) . build ( ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) . isNotEqualTo ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) ) . hasSize ( NUMBER ) ; } finally { java.io.InputStream . void ( ) ; java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) { ConfigurationMetadataGroup org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) , STRING , STRING ) ; ConfigurationMetadataSource org.springframework.boot.configurationmetadata.ConfigurationMetadataSource = org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) ) . hasSize ( NUMBER ) ; ConfigurationMetadataSource org.springframework.boot.configurationmetadata.ConfigurationMetadataSource = org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) { ConfigurationMetadataGroup org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) , STRING , STRING ) ; ConfigurationMetadataSource org.springframework.boot.configurationmetadata.ConfigurationMetadataSource = org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) ) . hasSize ( NUMBER ) ; ConfigurationMetadataSource org.springframework.boot.configurationmetadata.ConfigurationMetadataSource = org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) { ConfigurationMetadataGroup org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) . get ( STRING ) ; ConfigurationMetadataSource org.springframework.boot.configurationmetadata.ConfigurationMetadataSource = org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) ) . hasSize ( NUMBER ) ; ConfigurationMetadataProperty org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getKeyHints ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getKeyHints ( ) . get ( NUMBER ) . getValue ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getKeyHints ( ) . get ( NUMBER ) . getDescription ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getKeyHints ( ) . get ( NUMBER ) . getValue ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getKeyHints ( ) . get ( NUMBER ) . getDescription ( ) ) . isEqualTo ( STRING ) ; ConfigurationMetadataProperty org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) . get ( NUMBER ) . getValue ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) . get ( NUMBER ) . getDescription ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) . get ( NUMBER ) . getValue ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) . get ( NUMBER ) . getDescription ( ) ) . isNull ( ) ; ConfigurationMetadataProperty org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) . get ( NUMBER ) . getName ( ) ) . isEqualTo ( STRING ) ; ConfigurationMetadataProperty org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) . get ( NUMBER ) . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) . get ( NUMBER ) . getParameters ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) . get ( NUMBER ) . getParameters ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationMetadataRepository org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository ) { ConfigurationMetadataGroup org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup = org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllGroups ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) , STRING , STRING ) ; ConfigurationMetadataSource org.springframework.boot.configurationmetadata.ConfigurationMetadataSource = org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) ) . hasSize ( NUMBER ) ; ConfigurationMetadataSource org.springframework.boot.configurationmetadata.ConfigurationMetadataSource = org.springframework.boot.configurationmetadata.ConfigurationMetadataGroup . getSources ( ) . get ( STRING ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) , STRING ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataSource . getProperties ( ) ) . hasSize ( NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; void ( org.springframework.boot.configurationmetadata.ConfigurationMetadataRepository . getAllProperties ( ) . get ( STRING ) , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurationMetadataProperty org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty , int int , int int ) { assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueHints ( ) . size ( ) ) . isEqualTo ( int ) ; assertThat ( org.springframework.boot.configurationmetadata.ConfigurationMetadataProperty . getHints ( ) . getValueProviders ( ) . size ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { assertThat ( java.util.Map<java.lang.String,> ) . containsKey ( java.lang.String ) ; } }  <METHOD_END>
