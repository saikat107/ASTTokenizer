<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( int int ) { this( null ); Assert . isTrue ( int > NUMBER , STRING ) ; this . org.springframework.integration.file.DirectoryScanner = new HeadDirectoryScanner ( int ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Comparator<java.io.File> < java.io.File > java.util.Comparator<java.io.File> ) { this . java.util.Queue<java.io.File> = new java.util.concurrent.PriorityBlockingQueue<java.io.File> < java.io.File > ( int , java.util.Comparator<java.io.File> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { Assert . notNull ( java.io.File , STRING ) ; this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> public void void ( DirectoryScanner org.springframework.integration.file.DirectoryScanner ) { Assert . notNull ( org.springframework.integration.file.DirectoryScanner , STRING ) ; this . org.springframework.integration.file.DirectoryScanner = org.springframework.integration.file.DirectoryScanner ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.file.DirectoryScanner org.springframework.integration.file.DirectoryScanner ( ) { return this . org.springframework.integration.file.DirectoryScanner ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( FileListFilter < java.io.File > org.springframework.integration.file.FileListFilter<java.io.File> ) { Assert . notNull ( org.springframework.integration.file.FileListFilter<java.io.File> , STRING ) ; this . org.springframework.integration.file.FileListFilter<java.io.File> = org.springframework.integration.file.FileListFilter<java.io.File> ; }  <METHOD_END>
<METHOD_START> public void void ( FileLocker org.springframework.integration.file.FileLocker ) { Assert . notNull ( org.springframework.integration.file.FileLocker , STRING ) ; this . org.springframework.integration.file.FileLocker = org.springframework.integration.file.FileLocker ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.file.FileReadingMessageSource.WatchEventType ... org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] ) { Assert . notEmpty ( org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] , STRING ) ; Assert . noNullElements ( org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] , STRING ) ; Assert . state ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , STRING ) ; this . org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] = java.util.Arrays . org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] ( org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] , org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) && this . org.springframework.integration.file.DirectoryScanner instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.file.DirectoryScanner ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false ) && this . org.springframework.integration.file.DirectoryScanner instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.file.DirectoryScanner ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . notNull ( this . java.io.File , STRING ) ; if ( ! this . java.io.File . boolean ( ) && this . boolean ) { this . java.io.File . boolean ( ) ; } Assert . isTrue ( this . java.io.File . boolean ( ) , STRING + this . java.io.File + STRING ) ; Assert . isTrue ( this . java.io.File . boolean ( ) , STRING + this . java.io.File + STRING ) ; Assert . isTrue ( this . java.io.File . boolean ( ) , STRING + this . java.io.File + STRING ) ; Assert . state ( ! ( this . boolean && this . boolean ) , STRING + this . org.springframework.integration.file.DirectoryScanner ) ; if ( this . boolean ) { this . org.springframework.integration.file.DirectoryScanner = new org.springframework.integration.file.FileReadingMessageSource.WatchServiceDirectoryScanner ( ) ; } Assert . state ( ! ( this . boolean && ( this . org.springframework.integration.file.FileListFilter<java.io.File> != null || this . org.springframework.integration.file.FileLocker != null ) ) , STRING + this . org.springframework.integration.file.DirectoryScanner ) ; if ( this . org.springframework.integration.file.FileListFilter<java.io.File> != null ) { this . org.springframework.integration.file.DirectoryScanner . setFilter ( this . org.springframework.integration.file.FileListFilter<java.io.File> ) ; } if ( this . org.springframework.integration.file.FileLocker != null ) { this . org.springframework.integration.file.DirectoryScanner . setLocker ( this . org.springframework.integration.file.FileLocker ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.Message<java.io.File> < java.io.File > org.springframework.integration.file.Message<java.io.File> ( ) org.springframework.integration.file.MessagingException { Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = null ; if ( this . boolean || this . java.util.Queue<java.io.File> . boolean ( ) ) { void ( ) ; } java.io.File java.io.File = this . java.util.Queue<java.io.File> . java.io.File ( ) ; while ( ( java.io.File != null ) && ! this . org.springframework.integration.file.DirectoryScanner . tryClaim ( java.io.File ) ) { java.io.File = this . java.util.Queue<java.io.File> . java.io.File ( ) ; } if ( java.io.File != null ) { org.springframework.integration.file.Message<java.io.File> = getMessageBuilderFactory ( ) . withPayload ( java.io.File ) . setHeader ( FileHeaders . RELATIVE_PATH , java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( this . java.io.File . java.lang.String ( ) + java.io.File . java.lang.String ) , STRING ) ) . setHeader ( FileHeaders . FILENAME , java.io.File . java.lang.String ( ) ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.io.File ) . build ( ) ; if ( org.springframework.integration.file.Log . isInfoEnabled ( ) ) { org.springframework.integration.file.Log . info ( STRING + org.springframework.integration.file.Message<java.io.File> + STRING ) ; } } return org.springframework.integration.file.Message<java.io.File> ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = this . org.springframework.integration.file.DirectoryScanner . listFiles ( this . java.io.File ) ; java.util.Set<java.io.File> < java.io.File > java.util.Set<java.io.File> = new java.util.LinkedHashSet<java.io.File> < java.io.File > ( java.util.List<java.io.File> ) ; if ( ! java.util.Set<java.io.File> . boolean ( ) ) { this . java.util.Queue<java.io.File> . boolean ( java.util.Set<java.io.File> ) ; if ( org.springframework.integration.file.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.Log . debug ( STRING + java.util.Set<java.io.File> ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( Message < java.io.File > org.springframework.integration.file.Message<java.io.File> ) { if ( org.springframework.integration.file.Log . isWarnEnabled ( ) ) { org.springframework.integration.file.Log . warn ( STRING + org.springframework.integration.file.Message<java.io.File> ) ; } this . java.util.Queue<java.io.File> . boolean ( org.springframework.integration.file.Message<java.io.File> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.nio.file.WatchEvent . java.nio.file.WatchEvent.Kind<java.nio.file.Path> < java.nio.file.Path > java.nio.file.WatchEvent.Kind<java.nio.file.Path> ) { this . java.nio.file.WatchEvent.Kind<java.nio.file.Path> = java.nio.file.WatchEvent.Kind<java.nio.file.Path> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . java.nio.file.WatchService = java.nio.file.FileSystems . java.nio.file.FileSystem ( ) . java.nio.file.WatchService ( ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.integration.file.Log . error ( STRING + org.springframework.integration.file.FileReadingMessageSource .this . java.io.File , java.io.IOException ) ; } this . java.nio.file.WatchEvent.Kind<?>[] = new java.nio.file.WatchEvent . java.nio.file.WatchEvent.Kind<?> < ? > [ org.springframework.integration.file.FileReadingMessageSource .this . org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] . int ] ; for ( int int = NUMBER ; int < org.springframework.integration.file.FileReadingMessageSource .this . org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] . int ; int ++ ) { this . java.nio.file.WatchEvent.Kind<?>[] [ int ] = org.springframework.integration.file.FileReadingMessageSource .this . org.springframework.integration.file.FileReadingMessageSource.WatchEventType[] [ int ] . java.nio.file.WatchEvent.Kind<java.nio.file.Path> ; } final java.util.Set<java.io.File> < java.io.File > java.util.Set<java.io.File> = java.util.Set<java.io.File> ( org.springframework.integration.file.FileReadingMessageSource .this . java.io.File . java.nio.file.Path ( ) , null ) ; java.util.Set<java.io.File> . boolean ( java.util.Set<java.io.File> ( ) ) ; this . java.util.Collection<java.io.File> = java.util.Set<java.io.File> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . java.nio.file.WatchService . void ( ) ; this . java.nio.file.WatchService = null ; this . java.util.concurrent.ConcurrentMap<java.nio.file.Path,java.nio.file.WatchKey> . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.integration.file.Log . error ( STRING + org.springframework.integration.file.FileReadingMessageSource .this . java.io.File , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.File [] java.io.File[] ( java.io.File java.io.File ) { Assert . state ( this . java.nio.file.WatchService != null , STRING ) ; if ( this . java.util.Collection<java.io.File> != null ) { java.io.File [] java.io.File[] = this . java.util.Collection<java.io.File> . java.io.File[] ( new java.io.File [ this . java.util.Collection<java.io.File> . int ( ) ] ) ; this . java.util.Collection<java.io.File> = null ; return java.io.File[] ; } java.util.Collection<java.io.File> < java.io.File > java.util.Collection<java.io.File> = java.util.Set<java.io.File> ( ) ; return java.util.Collection<java.io.File> . java.io.File[] ( new java.io.File [ java.util.Collection<java.io.File> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.io.File> < java.io.File > java.util.Set<java.io.File> ( ) { java.nio.file.WatchKey java.nio.file.WatchKey = this . java.nio.file.WatchService . java.nio.file.WatchKey ( ) ; java.util.Set<java.io.File> < java.io.File > java.util.Set<java.io.File> = new java.util.LinkedHashSet<java.io.File> < java.io.File > ( ) ; while ( java.nio.file.WatchKey != null ) { java.io.File java.io.File = ( ( java.nio.file.Path ) java.nio.file.WatchKey . java.nio.file.Watchable ( ) ) . java.nio.file.Path ( ) . java.io.File ( ) ; for ( java.nio.file.WatchEvent<?> < ? > java.nio.file.WatchEvent<?> : java.nio.file.WatchKey . java.util.List<java.nio.file.WatchEvent<?>> ( ) ) { if ( java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) == java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.nio.file.Path> || java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) == java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.nio.file.Path> || java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) == java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.nio.file.Path> ) { java.nio.file.Path java.nio.file.Path = ( java.nio.file.Path ) java.nio.file.WatchEvent<> . context ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.nio.file.Path . java.io.File ( ) . java.lang.String ( ) ) ; if ( org.springframework.integration.file.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.Log . debug ( STRING + java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) + STRING + java.io.File + STRING ) ; } if ( java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) == java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.nio.file.Path> ) { if ( getFilter ( ) instanceof ResettableFileListFilter ) { ( ( ResettableFileListFilter < java.io.File > ) getFilter ( ) ) . remove ( java.io.File ) ; } boolean boolean = java.util.Set<java.io.File> . boolean ( java.io.File ) ; if ( boolean && org.springframework.integration.file.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.Log . debug ( STRING + java.io.File + STRING ) ; } } else { if ( java.io.File . boolean ( ) ) { if ( java.io.File . boolean ( ) ) { java.util.Set<java.io.File> . boolean ( java.util.Set<java.io.File> ( java.io.File . java.nio.file.Path ( ) , java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) ) ) ; } else { java.util.Set<java.io.File> . boolean ( java.io.File ) ; java.util.Set<java.io.File> . boolean ( java.io.File ) ; } } else { if ( org.springframework.integration.file.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.Log . debug ( STRING + java.io.File + STRING + java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) + STRING ) ; } } } } else if ( java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) == java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.lang.Object> ) { if ( org.springframework.integration.file.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.Log . debug ( STRING + java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.lang.Object> + STRING + java.nio.file.WatchEvent<> . context ( ) + STRING ) ; } for ( java.nio.file.WatchKey java.nio.file.WatchKey : this . java.util.concurrent.ConcurrentMap<java.nio.file.Path,java.nio.file.WatchKey> . java.util.Collection<java.nio.file.WatchKey> ( ) ) { java.nio.file.WatchKey . void ( ) ; } this . java.util.concurrent.ConcurrentMap<java.nio.file.Path,java.nio.file.WatchKey> . void ( ) ; if ( java.nio.file.WatchEvent<> . context ( ) != null && java.nio.file.WatchEvent<> . context ( ) instanceof java.nio.file.Path ) { java.util.Set<java.io.File> . boolean ( java.util.Set<java.io.File> ( ( java.nio.file.Path ) java.nio.file.WatchEvent<> . context ( ) , java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) ) ) ; } else { java.util.Set<java.io.File> . boolean ( java.util.Set<java.io.File> ( org.springframework.integration.file.FileReadingMessageSource .this . java.io.File . java.nio.file.Path ( ) , java.nio.file.WatchEvent<> . java.nio.file.WatchEvent.Kind<> ( ) ) ) ; } } } java.nio.file.WatchKey . boolean ( ) ; java.nio.file.WatchKey = this . java.nio.file.WatchService . java.nio.file.WatchKey ( ) ; } return java.util.Set<java.io.File> ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.io.File> < java.io.File > java.util.Set<java.io.File> ( java.nio.file.Path java.nio.file.Path , final java.nio.file.WatchEvent . java.nio.file.WatchEvent.Kind<?> < ? > java.nio.file.WatchEvent.Kind<?> ) { final java.util.Set<java.io.File> < java.io.File > java.util.Set<java.io.File> = new java.util.LinkedHashSet<java.io.File> < java.io.File > ( ) ; try { void ( java.nio.file.Path ) ; java.nio.file.Files . java.nio.file.Path ( java.nio.file.Path , new java.nio.file.SimpleFileVisitor<java.nio.file.Path> < java.nio.file.Path > ( ) { @ java.lang.Override public java.nio.file.FileVisitResult java.nio.file.FileVisitResult ( java.nio.file.Path java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes java.nio.file.attribute.BasicFileAttributes ) throws java.io.IOException { java.nio.file.FileVisitResult java.nio.file.FileVisitResult = super. java.nio.file.FileVisitResult ( java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes ) ; void ( java.nio.file.Path ) ; return java.nio.file.FileVisitResult ; } @ java.lang.Override public java.nio.file.FileVisitResult java.nio.file.FileVisitResult ( java.nio.file.Path java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes java.nio.file.attribute.BasicFileAttributes ) throws java.io.IOException { java.nio.file.FileVisitResult java.nio.file.FileVisitResult = super. java.nio.file.FileVisitResult ( java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes ) ; if ( ! java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.nio.file.Path> . boolean ( java.nio.file.WatchEvent.Kind<> ) ) { java.util.Set<java.io.File> . boolean ( java.nio.file.Path . java.io.File ( ) ) ; } return java.nio.file.FileVisitResult ; } } ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.integration.file.Log . error ( STRING + java.nio.file.Path . java.lang.String ( ) , java.io.IOException ) ; } return java.util.Set<java.io.File> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.nio.file.FileVisitResult java.nio.file.FileVisitResult ( java.nio.file.Path java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes java.nio.file.attribute.BasicFileAttributes ) throws java.io.IOException { java.nio.file.FileVisitResult java.nio.file.FileVisitResult = super. java.nio.file.FileVisitResult ( java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes ) ; void ( java.nio.file.Path ) ; return java.nio.file.FileVisitResult ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.nio.file.FileVisitResult java.nio.file.FileVisitResult ( java.nio.file.Path java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes java.nio.file.attribute.BasicFileAttributes ) throws java.io.IOException { java.nio.file.FileVisitResult java.nio.file.FileVisitResult = super. java.nio.file.FileVisitResult ( java.nio.file.Path , java.nio.file.attribute.BasicFileAttributes ) ; if ( ! java.nio.file.StandardWatchEventKinds . java.nio.file.WatchEvent.Kind<java.nio.file.Path> . boolean ( java.nio.file.WatchEvent.Kind<> ) ) { java.util.Set<java.io.File> . boolean ( java.nio.file.Path . java.io.File ( ) ) ; } return java.nio.file.FileVisitResult ; }  <METHOD_END>
<METHOD_START> private void void ( java.nio.file.Path java.nio.file.Path ) throws java.io.IOException { if ( ! this . java.util.concurrent.ConcurrentMap<java.nio.file.Path,java.nio.file.WatchKey> . boolean ( java.nio.file.Path ) ) { if ( org.springframework.integration.file.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.Log . debug ( STRING + java.nio.file.Path + STRING ) ; } java.nio.file.WatchKey java.nio.file.WatchKey = java.nio.file.Path . java.nio.file.WatchKey ( this . java.nio.file.WatchService , this . java.nio.file.WatchEvent.Kind<?>[] ) ; this . java.util.concurrent.ConcurrentMap<java.nio.file.Path,java.nio.file.WatchKey> . java.nio.file.WatchKey ( java.nio.file.Path , java.nio.file.WatchKey ) ; } }  <METHOD_END>
