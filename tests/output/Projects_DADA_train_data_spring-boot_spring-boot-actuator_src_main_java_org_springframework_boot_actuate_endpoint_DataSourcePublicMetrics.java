<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { javax.sql.DataSource javax.sql.DataSource = javax.sql.DataSource ( ) ; DataSourcePoolMetadataProvider org.springframework.boot.actuate.endpoint.DataSourcePoolMetadataProvider = new DataSourcePoolMetadataProviders ( this . java.util.Collection<org.springframework.boot.actuate.endpoint.DataSourcePoolMetadataProvider> ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map.Entry<java.lang.String,javax.sql.DataSource> : this . org.springframework.boot.actuate.endpoint.ApplicationContext . getBeansOfType ( javax.sql.DataSource .class ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,javax.sql.DataSource> . java.lang.String ( ) ; javax.sql.DataSource javax.sql.DataSource = java.util.Map.Entry<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , javax.sql.DataSource , javax.sql.DataSource . boolean ( javax.sql.DataSource ) ) ; DataSourcePoolMetadata org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata = org.springframework.boot.actuate.endpoint.DataSourcePoolMetadataProvider . getDataSourcePoolMetadata ( javax.sql.DataSource ) ; if ( org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata != null ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata> . put ( java.lang.String , org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.boot.actuate.endpoint.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.endpoint.Metric<?>> ( ) { java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> < Metric < ? > > java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> = new java.util.LinkedHashSet<org.springframework.boot.actuate.endpoint.Metric<?>> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata> < java.lang.String , DataSourcePoolMetadata > java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata> : this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata> . getKey ( ) ; java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String + STRING ) ; DataSourcePoolMetadata org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata = java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata> . getValue ( ) ; void ( java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> , java.lang.String + STRING , org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata . getActive ( ) ) ; void ( java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> , java.lang.String + STRING , org.springframework.boot.actuate.endpoint.DataSourcePoolMetadata . getUsage ( ) ) ; } return java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> ; }  <METHOD_END>
<METHOD_START> private < T extends java.lang.Number > void void ( java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> < Metric < ? > > java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> , java.lang.String java.lang.String , T T ) { if ( T != null ) { java.util.Set<org.springframework.boot.actuate.endpoint.Metric<?>> . add ( new Metric <> ( java.lang.String , T ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , javax.sql.DataSource javax.sql.DataSource , boolean boolean ) { if ( boolean ) { return STRING ; } if ( java.lang.String . int ( ) > java.lang.String . int ( ) && java.lang.String . java.lang.String ( ) . boolean ( java.lang.String . java.lang.String ( ) ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; } return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> private javax.sql.DataSource javax.sql.DataSource ( ) { try { return this . org.springframework.boot.actuate.endpoint.ApplicationContext . getBean ( javax.sql.DataSource .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.actuate.endpoint.NoSuchBeanDefinitionException ) { return null ; } }  <METHOD_END>
