<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.BindingContext ( STRING , WebDataBinder .class ) ; WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , null , null ) ; assertNotNull ( org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConversionService org.springframework.web.reactive.result.method.annotation.ConversionService = new DefaultFormattingConversionService ( ) ; org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( org.springframework.web.reactive.result.method.annotation.ConversionService ) ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.BindingContext ( STRING , WebDataBinder .class ) ; WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , null , null ) ; assertSame ( org.springframework.web.reactive.result.method.annotation.ConversionService , org.springframework.web.reactive.result.method.annotation.WebDataBinder . getConversionService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.BindingContext ( STRING , WebDataBinder .class ) ; WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , null , STRING ) ; assertNotNull ( org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.BindingContext ( STRING , WebDataBinder .class ) ; WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , null , STRING ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.BindingContext ( STRING , WebDataBinder .class ) ; WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , null , null ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.BindingContext ( STRING , WebDataBinder .class ) ; org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.SyncHandlerMethodArgumentResolver> . add ( new RequestParamMethodArgumentResolver ( null , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , false ) ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = org.springframework.web.reactive.result.method.annotation.BindingContext ( STRING , WebDataBinder .class , int .class ) ; WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder = org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , null , STRING ) ; assertNotNull ( org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.WebDataBinder . getDisallowedFields ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.Object java.lang.Object = new org.springframework.web.reactive.result.method.annotation.InitBinderBindingContextTests.InitBinderHandler ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; SyncInvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod = new SyncInvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod . setArgumentResolvers ( new java.util.ArrayList <> ( this . java.util.List<org.springframework.web.reactive.result.method.annotation.SyncHandlerMethodArgumentResolver> ) ) ; org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod . setParameterNameDiscoverer ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; return new InitBinderBindingContext ( this . org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer , java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod ) ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder ) { org.springframework.web.reactive.result.method.annotation.WebDataBinder . setDisallowedFields ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder ( value = STRING ) public void void ( WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder ) { org.springframework.web.reactive.result.method.annotation.WebDataBinder . setDisallowedFields ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public java.lang.String java.lang.String ( WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder , @ RequestParam int int ) { org.springframework.web.reactive.result.method.annotation.WebDataBinder . setDisallowedFields ( STRING + int ) ; }  <METHOD_END>
