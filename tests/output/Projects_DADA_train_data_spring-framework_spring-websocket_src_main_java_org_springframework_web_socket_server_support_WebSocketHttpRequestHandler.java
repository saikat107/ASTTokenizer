<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler ) { this( org.springframework.web.socket.server.support.WebSocketHandler , new DefaultHandshakeHandler ( ) ); }  <METHOD_END>
<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler , HandshakeHandler org.springframework.web.socket.server.support.HandshakeHandler ) { Assert . notNull ( org.springframework.web.socket.server.support.WebSocketHandler , STRING ) ; Assert . notNull ( org.springframework.web.socket.server.support.HandshakeHandler , STRING ) ; this . org.springframework.web.socket.server.support.WebSocketHandler = new ExceptionWebSocketHandlerDecorator ( new LoggingWebSocketHandlerDecorator ( org.springframework.web.socket.server.support.WebSocketHandler ) ) ; this . org.springframework.web.socket.server.support.HandshakeHandler = org.springframework.web.socket.server.support.HandshakeHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.server.support.WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler ( ) { return this . org.springframework.web.socket.server.support.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.server.support.HandshakeHandler org.springframework.web.socket.server.support.HandshakeHandler ( ) { return this . org.springframework.web.socket.server.support.HandshakeHandler ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> ) { this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> . clear ( ) ; if ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> != null ) { this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> . addAll ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> ( ) { return this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.socket.server.support.ServletContext ) { if ( this . org.springframework.web.socket.server.support.HandshakeHandler instanceof ServletContextAware ) { ( ( ServletContextAware ) this . org.springframework.web.socket.server.support.HandshakeHandler ) . setServletContext ( org.springframework.web.socket.server.support.ServletContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! boolean ( ) ) { this . boolean = true ; if ( this . org.springframework.web.socket.server.support.HandshakeHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.server.support.HandshakeHandler ) . start ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) ) { this . boolean = false ; if ( this . org.springframework.web.socket.server.support.HandshakeHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.server.support.HandshakeHandler ) . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.socket.server.support.HttpServletRequest , HttpServletResponse org.springframework.web.socket.server.support.HttpServletResponse )			throws org.springframework.web.socket.server.support.ServletException , java.io.IOException { ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest = new ServletServerHttpRequest ( org.springframework.web.socket.server.support.HttpServletRequest ) ; ServerHttpResponse org.springframework.web.socket.server.support.ServerHttpResponse = new ServletServerHttpResponse ( org.springframework.web.socket.server.support.HttpServletResponse ) ; HandshakeInterceptorChain org.springframework.web.socket.server.support.HandshakeInterceptorChain = new HandshakeInterceptorChain ( this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> , this . org.springframework.web.socket.server.support.WebSocketHandler ) ; HandshakeFailureException org.springframework.web.socket.server.support.HandshakeFailureException = null ; try { if ( org.springframework.web.socket.server.support.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.server.support.Log . debug ( org.springframework.web.socket.server.support.HttpServletRequest . getMethod ( ) + STRING + org.springframework.web.socket.server.support.HttpServletRequest . getRequestURI ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( ! org.springframework.web.socket.server.support.HandshakeInterceptorChain . applyBeforeHandshake ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ) { return; } this . org.springframework.web.socket.server.support.HandshakeHandler . doHandshake ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , this . org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.socket.server.support.HandshakeInterceptorChain . applyAfterHandshake ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , null ) ; org.springframework.web.socket.server.support.ServerHttpResponse . close ( ) ; } catch ( HandshakeFailureException org.springframework.web.socket.server.support.HandshakeFailureException ) { org.springframework.web.socket.server.support.HandshakeFailureException = org.springframework.web.socket.server.support.HandshakeFailureException ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.server.support.HandshakeFailureException = new HandshakeFailureException ( STRING + org.springframework.web.socket.server.support.ServerHttpRequest . getURI ( ) , java.lang.Throwable ) ; } finally { if ( org.springframework.web.socket.server.support.HandshakeFailureException != null ) { org.springframework.web.socket.server.support.HandshakeInterceptorChain . applyAfterHandshake ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , org.springframework.web.socket.server.support.HandshakeFailureException ) ; throw org.springframework.web.socket.server.support.HandshakeFailureException ; } } }  <METHOD_END>
