<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setSerializeNulls ( true ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ( ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setSerializeNulls ( false ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ( ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setPrettyPrinting ( true ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean . void ( STRING ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setPrettyPrinting ( false ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean . void ( STRING ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setDisableHtmlEscaping ( true ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean . void ( STRING ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setDisableHtmlEscaping ( false ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean . void ( STRING ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.StringBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setDateFormatPattern ( java.lang.String ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean ( ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , java.util.Calendar . int ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean . void ( java.util.Date ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean ( ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , java.util.Calendar . int ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean . void ( java.util.Date ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.DateBean ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setBase64EncodeByteArrays ( true ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean . void ( new byte [] { NUMBER , NUMBER } ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setBase64EncodeByteArrays ( true ) ; this . org.springframework.http.converter.json.GsonFactoryBean . setDisableHtmlEscaping ( true ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean . void ( new byte [] { NUMBER , NUMBER } ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.http.converter.json.GsonFactoryBean . setBase64EncodeByteArrays ( false ) ; this . org.springframework.http.converter.json.GsonFactoryBean . afterPropertiesSet ( ) ; Gson org.springframework.http.converter.json.Gson = this . org.springframework.http.converter.json.GsonFactoryBean . getObject ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean = new org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean ( ) ; org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean . void ( new byte [] { NUMBER , NUMBER } ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.Gson . toJson ( org.springframework.http.converter.json.GsonFactoryBeanTests.ByteArrayBean ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Date java.util.Date ( ) { return this . java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public byte [] byte[] ( ) { return this . byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
