<METHOD_START> @ TaskAction public void void ( ) { try { new BuildPropertiesWriter ( new java.io.File ( java.io.File ( ) , STRING ) ) . writeBuildProperties ( new ProjectDetails ( this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties . getGroup ( ) , this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties . getArtifact ( ) == null ? STRING : this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties . getArtifact ( ) , this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties . getVersion ( ) , this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties . getName ( ) , java.util.Map<java.lang.String,java.lang.String> ( this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties . getAdditional ( ) ) ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new TaskExecutionException ( this , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ OutputDirectory public java.io.File java.io.File ( ) { return this . java.io.File != null ? this . java.io.File : getProject ( ) . getBuildDir ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> @ Input public org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties ( ) { return this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties ; }  <METHOD_END>
<METHOD_START> public void void ( Action < BuildInfoProperties > org.springframework.boot.gradle.tasks.buildinfo.Action<org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties> ) { org.springframework.boot.gradle.tasks.buildinfo.Action<org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties> . execute ( this . org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) . java.lang.String ( ) ) ; } return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
