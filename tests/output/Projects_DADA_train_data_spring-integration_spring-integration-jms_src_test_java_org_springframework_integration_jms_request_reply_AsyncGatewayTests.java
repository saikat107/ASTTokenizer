<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jms.request_reply.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . setOutputChannel ( org.springframework.integration.jms.request_reply.QueueChannel ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . start ( ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( JmsHeaders . CORRELATION_ID , STRING ) . build ( ) ) ; JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( this . org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; org.springframework.integration.jms.request_reply.JmsTemplate . setReceiveTimeout ( NUMBER ) ; final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( STRING ) ; assertNotNull ( org.springframework.integration.jms.request_reply.Message ) ; org.springframework.integration.jms.request_reply.JmsTemplate . send ( org.springframework.integration.jms.request_reply.Message . getJMSReplyTo ( ) , ( MessageCreator ) session -> { TextMessage textMessage = session . createTextMessage ( STRING ) ; textMessage . setJMSCorrelationID ( received . getJMSCorrelationID ( ) ) ; return textMessage ; } ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > reply = org.springframework.integration.jms.request_reply.QueueChannel . receive ( NUMBER ) ; assertNotNull ( reply ) ; assertEquals ( STRING , reply . getPayload ( ) ) ; assertEquals ( STRING , reply . getHeaders ( ) . get ( JmsHeaders . CORRELATION_ID ) ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jms.request_reply.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . setOutputChannel ( org.springframework.integration.jms.request_reply.QueueChannel ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . start ( ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . handleMessage ( MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.jms.request_reply.QueueChannel ) . build ( ) ) ; JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( this . org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( STRING ) ; assertNotNull ( org.springframework.integration.jms.request_reply.Message ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > error = org.springframework.integration.jms.request_reply.QueueChannel . receive ( NUMBER ) ; assertNotNull ( error ) ; assertThat ( error , instanceOf ( ErrorMessage .class ) ) ; assertThat ( error . getPayload ( ) , instanceOf ( MessagingException .class ) ) ; assertThat ( ( ( MessagingException ) error . getPayload ( ) ) . getCause ( ) , instanceOf ( JmsTimeoutException .class ) ) ; assertEquals ( STRING , ( ( MessagingException ) error . getPayload ( ) ) . getFailedMessage ( ) . getPayload ( ) ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jms.request_reply.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . setOutputChannel ( org.springframework.integration.jms.request_reply.QueueChannel ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . setRequiresReply ( false ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . start ( ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . handleMessage ( MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.jms.request_reply.QueueChannel ) . build ( ) ) ; JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( this . org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( STRING ) ; assertNotNull ( org.springframework.integration.jms.request_reply.Message ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > error = org.springframework.integration.jms.request_reply.QueueChannel . receive ( NUMBER ) ; assertNull ( error ) ; this . org.springframework.integration.jms.request_reply.JmsOutboundGateway . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.request_reply.CachingConnectionFactory org.springframework.integration.jms.request_reply.CachingConnectionFactory ( ) { return new CachingConnectionFactory ( new ActiveMQConnectionFactory ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.request_reply.JmsOutboundGateway org.springframework.integration.jms.request_reply.JmsOutboundGateway ( ) { JmsOutboundGateway org.springframework.integration.jms.request_reply.JmsOutboundGateway = new JmsOutboundGateway ( ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setUseReplyContainer ( true ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setConnectionFactory ( org.springframework.integration.jms.request_reply.CachingConnectionFactory ( ) ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setRequestDestinationName ( STRING ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setReplyDestinationName ( STRING ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setRequiresReply ( true ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setAsync ( true ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setCorrelationKey ( STRING ) ; return org.springframework.integration.jms.request_reply.JmsOutboundGateway ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.request_reply.JmsOutboundGateway org.springframework.integration.jms.request_reply.JmsOutboundGateway ( ) { JmsOutboundGateway org.springframework.integration.jms.request_reply.JmsOutboundGateway = new JmsOutboundGateway ( ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setUseReplyContainer ( true ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setConnectionFactory ( org.springframework.integration.jms.request_reply.CachingConnectionFactory ( ) ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setRequestDestinationName ( STRING ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setReplyDestinationName ( STRING ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setRequiresReply ( true ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setAsync ( true ) ; org.springframework.integration.jms.request_reply.JmsOutboundGateway . setCorrelationKey ( STRING ) ; return org.springframework.integration.jms.request_reply.JmsOutboundGateway ; }  <METHOD_END>
