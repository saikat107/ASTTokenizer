<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public final static java.util.UUID java.util.UUID ( ) { return java.util.UUID ( java.lang.System . long ( ) ) ; }  <METHOD_END>
<METHOD_START> public final static java.util.UUID java.util.UUID ( long long ) { long long ; synchronized ( java.lang.Object ) { if ( long > long ) { long = long ; long = NUMBER ; } else { ++ long ; } } long = long ; long = long << NUMBER ; long |= ( ( long & NUMBER ) >> NUMBER ) ; long |= NUMBER | ( ( long >> NUMBER ) & NUMBER ) ; long long = long ; long <<= NUMBER ; long long = NUMBER | long ; long long = long | long ; if ( boolean ) { java.util.logging.Logger . void ( STRING ) ; return java.util.UUID . java.util.UUID ( ) ; } else { return new java.util.UUID ( long , long ) ; } }  <METHOD_END>
<METHOD_START> private static long long ( ) { long long = NUMBER ; try { java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( ) ; java.net.NetworkInterface java.net.NetworkInterface = java.net.NetworkInterface . java.net.NetworkInterface ( java.net.InetAddress ) ; if ( java.net.NetworkInterface != null ) { byte [] byte[] = STRING . byte[] ( ) ; if ( byte[] != null ) { for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { long <<= NUMBER ; long ^= ( long ) byte[] [ int ] & NUMBER ; } } } boolean = false ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } return long ; }  <METHOD_END>
