<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler = new org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler ( ) ; org.springframework.integration.gemfire.inbound.SubscribableChannel . subscribe ( org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler ) ; org.springframework.integration.gemfire.inbound.LocalRegion . put ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler = new org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler ( ) ; org.springframework.integration.gemfire.inbound.SubscribableChannel . subscribe ( org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler ) ; org.springframework.integration.gemfire.inbound.LocalRegion . put ( STRING , STRING ) ; assertTrue ( org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler . java.lang.Object instanceof EntryEvent ) ; EntryEvent < ? , ? > org.springframework.integration.gemfire.inbound.EntryEvent<?,?> = ( EntryEvent < ? , ? > ) org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.EventHandler . java.lang.Object ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.EntryEvent<,> . getNewValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.gemfire.inbound.SubscribableChannel . subscribe ( message -> { throw new MessagingException ( STRING ) ; } ) ; org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.ErrorHandler org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.ErrorHandler = new org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.ErrorHandler ( ) ; org.springframework.integration.gemfire.inbound.SubscribableChannel . subscribe ( org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.ErrorHandler ) ; org.springframework.integration.gemfire.inbound.LocalRegion . put ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.inbound.GemfireInboundChannelAdapterTests.ErrorHandler . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.gemfire.inbound.Message<?> ) throws org.springframework.integration.gemfire.inbound.MessagingException { assertTrue ( org.springframework.integration.gemfire.inbound.Message<> instanceof ErrorMessage ) ; int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.gemfire.inbound.Message<?> ) throws org.springframework.integration.gemfire.inbound.MessagingException { java.lang.Object = org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ; }  <METHOD_END>
