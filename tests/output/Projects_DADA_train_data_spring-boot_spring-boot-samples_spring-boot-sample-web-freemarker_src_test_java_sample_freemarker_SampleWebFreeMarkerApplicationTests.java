<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.freemarker.ResponseEntity<java.lang.String> = this . sample.freemarker.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.freemarker.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.freemarker.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.freemarker.HttpHeaders = new HttpHeaders ( ) ; sample.freemarker.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; HttpEntity < java.lang.String > sample.freemarker.HttpEntity<java.lang.String> = new HttpEntity <> ( sample.freemarker.HttpHeaders ) ; ResponseEntity < java.lang.String > sample.freemarker.ResponseEntity<java.lang.String> = this . sample.freemarker.TestRestTemplate . exchange ( STRING , HttpMethod . GET , sample.freemarker.HttpEntity<java.lang.String> , java.lang.String .class ) ; assertThat ( sample.freemarker.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . NOT_FOUND ) ; assertThat ( sample.freemarker.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
