<METHOD_START> @ java.lang.Override public final void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ; SimpMessageType org.springframework.messaging.simp.broker.SimpMessageType = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( ! SimpMessageType . SUBSCRIBE . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( java.lang.String == null ) { if ( org.springframework.messaging.simp.broker.Log . isErrorEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . error ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } return; } java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSubscriptionId ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( java.lang.String == null ) { if ( org.springframework.messaging.simp.broker.Log . isErrorEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . error ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } return; } java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( java.lang.String == null ) { if ( org.springframework.messaging.simp.broker.Log . isErrorEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . error ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } return; } void ( java.lang.String , java.lang.String , java.lang.String , org.springframework.messaging.simp.broker.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ; SimpMessageType org.springframework.messaging.simp.broker.SimpMessageType = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( ! SimpMessageType . UNSUBSCRIBE . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( java.lang.String == null ) { if ( org.springframework.messaging.simp.broker.Log . isErrorEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . error ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } return; } java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSubscriptionId ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( java.lang.String == null ) { if ( org.springframework.messaging.simp.broker.Log . isErrorEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . error ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } return; } void ( java.lang.String , java.lang.String , org.springframework.messaging.simp.broker.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ( Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ; SimpMessageType org.springframework.messaging.simp.broker.SimpMessageType = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( ! SimpMessageType . MESSAGE . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.messaging.simp.broker.SimpMessageType ) ; } java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( java.lang.String == null ) { if ( org.springframework.messaging.simp.broker.Log . isErrorEnabled ( ) ) { org.springframework.messaging.simp.broker.Log . error ( STRING + org.springframework.messaging.simp.broker.Message<> ) ; } return org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ; } return org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String , org.springframework.messaging.simp.broker.Message<> ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> );  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> );  <METHOD_END>
