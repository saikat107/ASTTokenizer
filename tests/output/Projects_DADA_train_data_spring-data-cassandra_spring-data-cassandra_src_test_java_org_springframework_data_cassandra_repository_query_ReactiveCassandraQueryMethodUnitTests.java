<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.repository.query.CassandraMappingContext = new BasicCassandraMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod = org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethodUnitTests.SampleRepository .class , STRING ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . isStreamQuery ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod = org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethodUnitTests.SampleRepository .class , STRING ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . isCollectionQuery ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod = org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethodUnitTests.SampleRepository .class , STRING ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . isCollectionQuery ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . isQueryForEntity ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod = org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethodUnitTests.SampleRepository .class , STRING ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . isCollectionQuery ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . isQueryForEntity ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; ProjectionFactory org.springframework.data.cassandra.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; return new ReactiveCassandraQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( java.lang.Class<> ) , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.CassandraMappingContext ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.Person> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Single<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Single<org.springframework.data.cassandra.repository.query.Person> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Mono<org.springframework.data.cassandra.repository.query.Person> < Person > org.springframework.data.cassandra.repository.query.Mono<org.springframework.data.cassandra.repository.query.Person> ( )  <METHOD_END>
