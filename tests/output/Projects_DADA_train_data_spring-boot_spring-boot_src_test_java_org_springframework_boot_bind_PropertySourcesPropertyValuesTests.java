<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new PropertySource < java.lang.String > ( STRING , STRING ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( getSource ( ) ) ) { return STRING ; } return null ; } } ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( getSource ( ) ) ) { return STRING ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , NUMBER ) ; this . org.springframework.boot.bind.MutablePropertySources . replace ( STRING , new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValues ( ) [ NUMBER ] . getValue ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValues ( ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.LinkedHashMap<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.LinkedHashMap<java.lang.String,java.lang.Object> ) ) ; PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ; PropertyValue [] org.springframework.boot.bind.PropertyValue[] = org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValues ( ) ; assertThat ( org.springframework.boot.bind.PropertyValue[] ) . hasSize ( NUMBER ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( PropertyValue org.springframework.boot.bind.PropertyValue : org.springframework.boot.bind.PropertyValue[] ) { java.util.Collection<java.lang.String> . boolean ( org.springframework.boot.bind.PropertyValue . getName ( ) ) ; } assertThat ( java.util.Collection<java.lang.String> ) . containsExactly ( STRING , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValue ( STRING ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySource < ? > org.springframework.boot.bind.PropertySource<?> = this . org.springframework.boot.bind.MutablePropertySources . get ( STRING ) ; CompositePropertySource org.springframework.boot.bind.CompositePropertySource = new CompositePropertySource ( STRING ) ; org.springframework.boot.bind.CompositePropertySource . addPropertySource ( org.springframework.boot.bind.PropertySource<> ) ; this . org.springframework.boot.bind.MutablePropertySources . replace ( STRING , org.springframework.boot.bind.CompositePropertySource ) ; PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValue ( STRING ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValue ( STRING ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new PropertySource < java.lang.String > ( STRING , STRING ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( getSource ( ) ) ) { return STRING ; } return null ; } } ) ; PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources , ( java.util.Collection<java.lang.String> < java.lang.String > ) null , java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValue ( STRING ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( getSource ( ) ) ) { return STRING ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ) ; PropertySourcesPropertyValues org.springframework.boot.bind.PropertySourcesPropertyValues = new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValues . getPropertyValue ( STRING ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean = new org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ( ) ; DataBinder org.springframework.boot.bind.DataBinder = new DataBinder ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ) ; org.springframework.boot.bind.DataBinder . bind ( new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.bind.PropertySourcesPropertyValuesTests.FooBean org.springframework.boot.bind.PropertySourcesPropertyValuesTests.FooBean = new org.springframework.boot.bind.PropertySourcesPropertyValuesTests.FooBean ( ) ; DataBinder org.springframework.boot.bind.DataBinder = new DataBinder ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.FooBean ) ; org.springframework.boot.bind.DataBinder . bind ( new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources , ( java.util.Collection<java.lang.String> < java.lang.String > ) null , java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.FooBean . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean = new org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ( ) ; DataBinder org.springframework.boot.bind.DataBinder = new DataBinder ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ) ; org.springframework.boot.bind.DataBinder . bind ( new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean = new org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ( ) ; DataBinder org.springframework.boot.bind.DataBinder = new DataBinder ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new PropertySource < java.lang.Object > ( STRING , STRING ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; } } ) ; org.springframework.boot.bind.DataBinder . bind ( new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources , ( java.util.Collection<java.lang.String> < java.lang.String > ) null , java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean . java.lang.String ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean = new org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean ( ) ; DataBinder org.springframework.boot.bind.DataBinder = new DataBinder ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; org.springframework.boot.bind.DataBinder . bind ( new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean . java.util.List<java.lang.String> ( ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean = new org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean ( ) ; DataBinder org.springframework.boot.bind.DataBinder = new DataBinder ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; org.springframework.boot.bind.DataBinder . bind ( new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListBean . java.util.List<java.lang.String> ( ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListTestBean org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListTestBean = new org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListTestBean ( ) ; DataBinder org.springframework.boot.bind.DataBinder = new DataBinder ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListTestBean ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; this . org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; org.springframework.boot.bind.DataBinder . bind ( new PropertySourcesPropertyValues ( this . org.springframework.boot.bind.MutablePropertySources ) ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListTestBean . java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListTestBean . java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> ( ) . org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ( NUMBER ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertySourcesPropertyValuesTests.ListTestBean . java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> ( ) . org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean ( NUMBER ) . java.lang.String ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> < org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean > java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> ( ) { return this . java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> < org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean > java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> ) { this . java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> = java.util.List<org.springframework.boot.bind.PropertySourcesPropertyValuesTests.TestBean> ; }  <METHOD_END>
