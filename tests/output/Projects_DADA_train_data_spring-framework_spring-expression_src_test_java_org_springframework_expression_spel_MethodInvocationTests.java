<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , 'l' , java.lang.Character .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . METHOD_NOT_FOUND , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , - NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , false , java.lang.Boolean .class ) ; evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.lang.Object , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new PlaceOfBirth ( STRING ) ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; try { java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof SpelEvaluationException ) { fail ( STRING + java.lang.Exception ) ; } } assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; try { java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( ! ( java.lang.Exception instanceof ExpressionInvocationTargetException ) ) { fail ( STRING + java.lang.Exception ) ; } } assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; eContext . setVariable ( STRING , NUMBER ) ; try { org.springframework.expression.spel.Expression . getValue ( eContext ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof SpelEvaluationException ) { fail ( STRING + java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; eContext . setVariable ( STRING , NUMBER ) ; try { org.springframework.expression.spel.Expression . getValue ( eContext ) ; fail ( ) ; } catch ( ExpressionInvocationTargetException org.springframework.expression.spel.ExpressionInvocationTargetException ) { java.lang.Throwable java.lang.Throwable = org.springframework.expression.spel.ExpressionInvocationTargetException . getCause ( ) ; assertEquals ( STRING , java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.MethodInvocationTests.TestObject ( ) ) ; org.springframework.expression.spel.MethodInvocationTests.LocalFilter org.springframework.expression.spel.MethodInvocationTests.LocalFilter = new org.springframework.expression.spel.MethodInvocationTests.LocalFilter ( ) ; org.springframework.expression.spel.StandardEvaluationContext . registerMethodFilter ( org.springframework.expression.spel.MethodInvocationTests.TestObject .class , org.springframework.expression.spel.MethodInvocationTests.LocalFilter ) ; SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertTrue ( org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean ) ; org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean = true ; org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean = false ; org.springframework.expression.spel.SpelExpression = ( SpelExpression ) org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; java.lang.String = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertTrue ( org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean ) ; org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean = false ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new java.lang.String ( STRING ) ) ; org.springframework.expression.spel.SpelExpression = ( SpelExpression ) org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; java.lang.String = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertFalse ( org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean ) ; org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean = false ; org.springframework.expression.spel.StandardEvaluationContext . registerMethodFilter ( org.springframework.expression.spel.MethodInvocationTests.TestObject .class , null ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.MethodInvocationTests.TestObject ( ) ) ; org.springframework.expression.spel.SpelExpression = ( SpelExpression ) org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; java.lang.String = org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertFalse ( org.springframework.expression.spel.MethodInvocationTests.LocalFilter . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.util.List<org.springframework.expression.spel.MethodResolver> < MethodResolver > java.util.List<org.springframework.expression.spel.MethodResolver> = org.springframework.expression.spel.StandardEvaluationContext . getMethodResolvers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.expression.spel.MethodResolver> . size ( ) ) ; MethodResolver org.springframework.expression.spel.MethodResolver = new org.springframework.expression.spel.MethodInvocationTests.DummyMethodResolver ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addMethodResolver ( org.springframework.expression.spel.MethodResolver ) ; assertEquals ( NUMBER , org.springframework.expression.spel.StandardEvaluationContext . getMethodResolvers ( ) . size ( ) ) ; java.util.List<org.springframework.expression.spel.MethodResolver> < MethodResolver > java.util.List<org.springframework.expression.spel.MethodResolver> = new java.util.ArrayList<org.springframework.expression.spel.MethodResolver> <> ( ) ; java.util.List<org.springframework.expression.spel.MethodResolver> . addAll ( org.springframework.expression.spel.StandardEvaluationContext . getMethodResolvers ( ) ) ; assertTrue ( org.springframework.expression.spel.StandardEvaluationContext . removeMethodResolver ( org.springframework.expression.spel.MethodResolver ) ) ; assertFalse ( org.springframework.expression.spel.StandardEvaluationContext . removeMethodResolver ( org.springframework.expression.spel.MethodResolver ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.StandardEvaluationContext . getMethodResolvers ( ) . size ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setMethodResolvers ( java.util.List<org.springframework.expression.spel.MethodResolver> ) ; assertEquals ( NUMBER , org.springframework.expression.spel.StandardEvaluationContext . getMethodResolvers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( new StandardEvaluationContext ( java.lang.String .class ) ) ; assertEquals ( java.lang.Object , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final org.springframework.expression.spel.MethodInvocationTests.BytesService org.springframework.expression.spel.MethodInvocationTests.BytesService = new org.springframework.expression.spel.MethodInvocationTests.BytesService ( ) ; byte [] byte[] = new byte [ NUMBER ] ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( byte[] ) ; org.springframework.expression.spel.StandardEvaluationContext . setBeanResolver ( new BeanResolver ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.expression.spel.MethodInvocationTests.BytesService ; } return null ; } } ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; byte [] byte[] = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , byte [] .class ) ; assertSame ( byte[] , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.expression.spel.MethodInvocationTests.BytesService ; } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.reflect.Method . java.lang.annotation.Annotation[] ( ) ; if ( java.lang.annotation.Annotation[] == null ) { return false ; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { java.lang.String java.lang.String = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ( java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ) { boolean = true ; java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { if ( boolean && ! boolean ( java.lang.reflect.Method ) ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } return java.util.List<java.lang.reflect.Method> ; }  <METHOD_END>
<METHOD_START> public int int ( int int ) { return int ; }  <METHOD_END>
<METHOD_START> @ org.springframework.expression.spel.MethodInvocationTests.Anno public java.lang.String java.lang.String ( double double ) { return STRING + double ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.MethodExecutor org.springframework.expression.spel.MethodExecutor ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> ) throws org.springframework.expression.spel.AccessException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( byte [] byte[] ) { return byte[] ; }  <METHOD_END>
