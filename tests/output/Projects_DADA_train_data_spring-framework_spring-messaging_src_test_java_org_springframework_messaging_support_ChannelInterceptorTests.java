<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.support.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( ) ; this . org.springframework.messaging.support.ChannelInterceptorTests.TestMessageHandler = new org.springframework.messaging.support.ChannelInterceptorTests.TestMessageHandler ( ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . subscribe ( this . org.springframework.messaging.support.ChannelInterceptorTests.TestMessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.support.Message<?> = mock ( Message .class ) ; org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor = new org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ( ) ; org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . void ( org.springframework.messaging.support.Message<> ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . addInterceptor ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.support.ChannelInterceptorTests.TestMessageHandler . java.util.List<org.springframework.messaging.support.Message<?>> ( ) . size ( ) ) ; Message < ? > org.springframework.messaging.support.Message<?> = this . org.springframework.messaging.support.ChannelInterceptorTests.TestMessageHandler . java.util.List<org.springframework.messaging.support.Message<?>> ( ) . get ( NUMBER ) ; assertNotNull ( org.springframework.messaging.support.Message<> ) ; assertSame ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.Message<> ) ; assertTrue ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor = new org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ( ) ; org.springframework.messaging.support.ChannelInterceptorTests.NullReturningPreSendInterceptor org.springframework.messaging.support.ChannelInterceptorTests.NullReturningPreSendInterceptor = new org.springframework.messaging.support.ChannelInterceptorTests.NullReturningPreSendInterceptor ( ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . addInterceptor ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . addInterceptor ( org.springframework.messaging.support.ChannelInterceptorTests.NullReturningPreSendInterceptor ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . send ( org.springframework.messaging.support.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.support.ChannelInterceptorTests.NullReturningPreSendInterceptor . java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.support.ChannelInterceptorTests.TestMessageHandler . java.util.List<org.springframework.messaging.support.Message<?>> ( ) . size ( ) ) ; assertTrue ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . boolean ( ) ) ; assertFalse ( org.springframework.messaging.support.ChannelInterceptorTests.NullReturningPreSendInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } private void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.messaging.support.Message<> ) ; assertNotNull ( org.springframework.messaging.support.MessageChannel ) ; assertSame ( org.springframework.messaging.support.ChannelInterceptorTests .this . org.springframework.messaging.support.ExecutorSubscribableChannel , org.springframework.messaging.support.MessageChannel ) ; assertTrue ( boolean ) ; } } ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.messaging.support.Message<> ) ; assertNotNull ( org.springframework.messaging.support.MessageChannel ) ; assertSame ( org.springframework.messaging.support.ChannelInterceptorTests .this . org.springframework.messaging.support.ExecutorSubscribableChannel , org.springframework.messaging.support.MessageChannel ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final AbstractMessageChannel org.springframework.messaging.support.AbstractMessageChannel = new AbstractMessageChannel ( ) { @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.messaging.support.Message<?> , long long ) { return false ; } } ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; org.springframework.messaging.support.AbstractMessageChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } private void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.messaging.support.Message<> ) ; assertNotNull ( org.springframework.messaging.support.MessageChannel ) ; assertSame ( org.springframework.messaging.support.AbstractMessageChannel , org.springframework.messaging.support.MessageChannel ) ; assertFalse ( boolean ) ; } } ) ; org.springframework.messaging.support.AbstractMessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.messaging.support.Message<?> , long long ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { void ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel , boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.messaging.support.Message<> ) ; assertNotNull ( org.springframework.messaging.support.MessageChannel ) ; assertSame ( org.springframework.messaging.support.AbstractMessageChannel , org.springframework.messaging.support.MessageChannel ) ; assertFalse ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final AbstractMessageChannel org.springframework.messaging.support.AbstractMessageChannel = new AbstractMessageChannel ( ) { @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.messaging.support.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor = new org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ( ) ; org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor = new org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ( ) ; org.springframework.messaging.support.AbstractMessageChannel . addInterceptor ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ) ; org.springframework.messaging.support.AbstractMessageChannel . addInterceptor ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ) ; try { org.springframework.messaging.support.AbstractMessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } assertTrue ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . boolean ( ) ) ; assertTrue ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.messaging.support.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor = new org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ( ) ; org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor = new org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ( ) ; org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . void ( new java.lang.RuntimeException ( STRING ) ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . addInterceptor ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ) ; this . org.springframework.messaging.support.ExecutorSubscribableChannel . addInterceptor ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor ) ; try { this . org.springframework.messaging.support.ExecutorSubscribableChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } assertTrue ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . boolean ( ) ) ; assertFalse ( org.springframework.messaging.support.ChannelInterceptorTests.PreSendInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.support.Message<?>> < Message < ? > > java.util.List<org.springframework.messaging.support.Message<?>> ( ) { return this . java.util.List<org.springframework.messaging.support.Message<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> ) throws org.springframework.messaging.support.MessagingException { this . java.util.List<org.springframework.messaging.support.Message<?>> . add ( org.springframework.messaging.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ( ) { return this . java.util.concurrent.atomic.AtomicInteger ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.support.Message<?> < ? > org.springframework.messaging.support.Message<?> ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel ) { assertNotNull ( org.springframework.messaging.support.Message<> ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; return org.springframework.messaging.support.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.messaging.support.Message<?> ) { this . org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.RuntimeException java.lang.RuntimeException ) { this . java.lang.RuntimeException = java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.support.Message<?> < ? > org.springframework.messaging.support.Message<?> ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel ) { super. org.springframework.messaging.support.Message<?> ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel ) ; if ( this . java.lang.RuntimeException != null ) { throw this . java.lang.RuntimeException ; } return ( this . org.springframework.messaging.support.Message<> != null ? this . org.springframework.messaging.support.Message<> : org.springframework.messaging.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.support.Message<?> < ? > org.springframework.messaging.support.Message<?> ( Message < ? > org.springframework.messaging.support.Message<?> , MessageChannel org.springframework.messaging.support.MessageChannel ) { super. org.springframework.messaging.support.Message<?> ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.MessageChannel ) ; return null ; }  <METHOD_END>
