<METHOD_START> @ java.lang.Override public void void ( IHookCallBack org.springframework.test.context.testng.transaction.programmatic.IHookCallBack , ITestResult org.springframework.test.context.testng.transaction.programmatic.ITestResult ) { this . java.lang.String = org.springframework.test.context.testng.transaction.programmatic.ITestResult . getMethod ( ) . getMethodName ( ) ; super. run ( org.springframework.test.context.testng.transaction.programmatic.IHookCallBack , org.springframework.test.context.testng.transaction.programmatic.ITestResult ) ; }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { deleteFromTables ( STRING ) ; executeSqlScript ( STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ AfterTransaction public void void ( ) { switch ( java.lang.String ) { case STRING : case STRING : { void ( STRING ) ; break; } case STRING : case STRING : case STRING : { void ( STRING ) ; break; } case STRING : { void ( STRING , STRING ) ; break; } default: { fail ( STRING + java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ Test @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { assertFalse ( TestTransaction . isActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expectedExceptions = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . flagForRollback ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expectedExceptions = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . flagForCommit ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expectedExceptions = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . isFlaggedForRollback ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expectedExceptions = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expectedExceptions = java.lang.IllegalStateException .class ) public void void ( ) { TestTransaction . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expectedExceptions = java.lang.IllegalStateException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { TestTransaction . end ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; deleteFromTables ( STRING ) ; void ( ) ; TestTransaction . flagForCommit ( ) ; assertFalse ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertInTransaction ( false ) ; assertFalse ( TestTransaction . isActive ( ) ) ; void ( ) ; executeSqlScript ( STRING , false ) ; void ( STRING ) ; TestTransaction . start ( ) ; assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; deleteFromTables ( STRING ) ; void ( ) ; TestTransaction . flagForCommit ( ) ; assertFalse ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( ) ; executeSqlScript ( STRING , false ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; deleteFromTables ( STRING ) ; void ( ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( STRING ) ; TestTransaction . start ( ) ; assertInTransaction ( true ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; assertTrue ( TestTransaction . isActive ( ) ) ; executeSqlScript ( STRING , false ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; deleteFromTables ( STRING ) ; void ( ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Commit public void void ( ) { assertInTransaction ( true ) ; assertTrue ( TestTransaction . isActive ( ) ) ; void ( STRING ) ; deleteFromTables ( STRING ) ; void ( ) ; TestTransaction . flagForRollback ( ) ; assertTrue ( TestTransaction . isFlaggedForRollback ( ) ) ; TestTransaction . end ( ) ; assertFalse ( TestTransaction . isActive ( ) ) ; assertInTransaction ( false ) ; void ( STRING ) ; TestTransaction . start ( ) ; assertInTransaction ( true ) ; assertFalse ( TestTransaction . isFlaggedForRollback ( ) ) ; assertTrue ( TestTransaction . isActive ( ) ) ; executeSqlScript ( STRING , false ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = jdbcTemplate . queryForList ( STRING , java.lang.String .class ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.context.testng.transaction.programmatic.PlatformTransactionManager org.springframework.test.context.testng.transaction.programmatic.PlatformTransactionManager ( ) { return new DataSourceTransactionManager ( javax.sql.DataSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return new EmbeddedDatabaseBuilder ( ) . setName ( STRING ) . addScript ( STRING ) . build ( ) ; }  <METHOD_END>
