<METHOD_START> @ Bean public org.springframework.data.mongodb.core.MongoClient org.springframework.data.mongodb.core.MongoClient ( ) { return new MongoClient ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.core.MongoTemplate org.springframework.data.mongodb.core.MongoTemplate ( ) java.lang.Exception { return new MongoTemplate ( org.springframework.data.mongodb.core.MongoClient ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . getCollection ( java.lang.String ) . deleteMany ( new Document ( ) ) ; this . org.springframework.data.mongodb.core.DefaultScriptOperations = new DefaultScriptOperations ( org.springframework.data.mongodb.core.MongoTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.DefaultScriptOperations . execute ( org.springframework.data.mongodb.core.ExecutableMongoScript , NUMBER ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( java.lang.String ) ) ; assumeThat ( org.springframework.data.mongodb.core.MongoTemplate . exists ( org.springframework.data.mongodb.core.Query , java.lang.String ) , is ( false ) ) ; org.springframework.data.mongodb.core.DefaultScriptOperations . register ( org.springframework.data.mongodb.core.NamedMongoScript ) ; assumeThat ( org.springframework.data.mongodb.core.MongoTemplate . exists ( org.springframework.data.mongodb.core.Query , java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NamedMongoScript org.springframework.data.mongodb.core.NamedMongoScript = org.springframework.data.mongodb.core.DefaultScriptOperations . register ( org.springframework.data.mongodb.core.ExecutableMongoScript ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.NamedMongoScript . getName ( ) ) ) ; assumeThat ( org.springframework.data.mongodb.core.MongoTemplate . exists ( org.springframework.data.mongodb.core.Query , java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.DefaultScriptOperations . register ( org.springframework.data.mongodb.core.NamedMongoScript ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( java.lang.String ) ) ; assumeThat ( org.springframework.data.mongodb.core.MongoTemplate . exists ( org.springframework.data.mongodb.core.Query , java.lang.String ) , is ( true ) ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.DefaultScriptOperations . call ( org.springframework.data.mongodb.core.NamedMongoScript . getName ( ) , NUMBER ) ; assertThat ( java.lang.Object , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.DefaultScriptOperations . register ( org.springframework.data.mongodb.core.NamedMongoScript ) ; assertThat ( org.springframework.data.mongodb.core.DefaultScriptOperations . exists ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.DefaultScriptOperations . exists ( java.lang.String ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.DefaultScriptOperations . register ( org.springframework.data.mongodb.core.NamedMongoScript ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.DefaultScriptOperations . call ( java.lang.String , NUMBER ) ; assertThat ( java.lang.Object , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = UncategorizedDataAccessException .class ) public void void ( ) { org.springframework.data.mongodb.core.DefaultScriptOperations . call ( java.lang.String , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.DefaultScriptOperations . register ( org.springframework.data.mongodb.core.NamedMongoScript ) ; assertThat ( org.springframework.data.mongodb.core.DefaultScriptOperations . getScriptNames ( ) , hasItems ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.DefaultScriptOperations . getScriptNames ( ) , is ( empty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.DefaultScriptOperations . execute ( org.springframework.data.mongodb.core.ExecutableMongoScript , STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
