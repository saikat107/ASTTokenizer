<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; this . org.springframework.web.reactive.result.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; this . org.springframework.web.reactive.result.condition.ParamsRequestCondition = this . org.springframework.web.reactive.result.condition.ParamsRequestCondition . combine ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; this . org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; this . org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; this . org.springframework.web.reactive.result.condition.HeadersRequestCondition = this . org.springframework.web.reactive.result.condition.HeadersRequestCondition . combine ( this . org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition , this . org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition , this . org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition , this . org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; assertEquals ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.CompositeRequestCondition . combine ( org.springframework.web.reactive.result.condition.CompositeRequestCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; assertSame ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.CompositeRequestCondition . combine ( org.springframework.web.reactive.result.condition.CompositeRequestCondition ) ) ; assertSame ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.CompositeRequestCondition . combine ( org.springframework.web.reactive.result.condition.CompositeRequestCondition ) ) ; assertSame ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.CompositeRequestCondition . combine ( org.springframework.web.reactive.result.condition.CompositeRequestCondition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition , this . org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; org.springframework.web.reactive.result.condition.CompositeRequestCondition . combine ( org.springframework.web.reactive.result.condition.CompositeRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; RequestCondition < ? > org.springframework.web.reactive.result.condition.RequestCondition<?> = new RequestMethodsRequestCondition ( RequestMethod . GET , RequestMethod . POST ) ; RequestCondition < ? > org.springframework.web.reactive.result.condition.RequestCondition<?> = new RequestMethodsRequestCondition ( RequestMethod . GET ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition , org.springframework.web.reactive.result.condition.RequestCondition<> ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition , org.springframework.web.reactive.result.condition.RequestCondition<> ) ; assertEquals ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.CompositeRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; assertNull ( org.springframework.web.reactive.result.condition.CompositeRequestCondition . getMatchingCondition ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( ) ; assertSame ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.CompositeRequestCondition . getMatchingCondition ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.CompositeRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; assertEquals ( - NUMBER , org.springframework.web.reactive.result.condition.CompositeRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.CompositeRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; assertEquals ( - NUMBER , org.springframework.web.reactive.result.condition.CompositeRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.CompositeRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition ) ; CompositeRequestCondition org.springframework.web.reactive.result.condition.CompositeRequestCondition = new CompositeRequestCondition ( this . org.springframework.web.reactive.result.condition.ParamsRequestCondition , this . org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; org.springframework.web.reactive.result.condition.CompositeRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.CompositeRequestCondition , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ; }  <METHOD_END>
