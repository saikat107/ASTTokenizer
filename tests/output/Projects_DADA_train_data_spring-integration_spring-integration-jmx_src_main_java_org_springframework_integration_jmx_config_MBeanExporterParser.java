<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element ) { return IntegrationMBeanExporter .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.jmx.config.ParserContext , BeanDefinitionBuilder org.springframework.integration.jmx.config.BeanDefinitionBuilder ) { java.lang.Object java.lang.Object = java.lang.Object ( org.w3c.dom.Element , org.springframework.integration.jmx.config.ParserContext ) ; org.springframework.integration.jmx.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setSource ( org.springframework.integration.jmx.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jmx.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.jmx.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jmx.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.jmx.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; org.springframework.integration.jmx.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.jmx.config.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return new RuntimeBeanReference ( java.lang.String ) ; } else { return javax.management.MBeanServerFactory . javax.management.MBeanServer ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.integration.jmx.config.AbstractBeanDefinition , ParserContext org.springframework.integration.jmx.config.ParserContext ) throws org.springframework.integration.jmx.config.BeanDefinitionStoreException { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.integration.jmx.config.AbstractBeanDefinition , org.springframework.integration.jmx.config.ParserContext ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.integration.jmx.config.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING , org.springframework.integration.jmx.config.AbstractBeanDefinition ) ; } if ( java.lang.String . boolean ( IntegrationMBeanExporter .class . java.lang.String ( ) + STRING ) ) { java.lang.String += STRING + java.util.UUID . java.util.UUID ( ) ; } return java.lang.String ; }  <METHOD_END>
