<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.mock.mockito.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.mock.mockito.ExpectedException . expectMessage ( STRING ) ; new MockDefinition ( null , null , null , null , false , null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = new MockDefinition ( null , org.springframework.boot.test.mock.mockito.ResolvableType , null , null , false , null , null ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getName ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) ) . isEqualTo ( org.springframework.boot.test.mock.mockito.ResolvableType ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getExtraInterfaces ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getAnswer ( ) ) . isEqualTo ( Answers . RETURNS_DEFAULTS ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . isSerializable ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getReset ( ) ) . isEqualTo ( MockReset . AFTER ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition = mock ( QualifierDefinition .class ) ; MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = new MockDefinition ( STRING , org.springframework.boot.test.mock.mockito.ResolvableType , new java.lang.Class<?> < ? > [] { ExampleExtraInterface .class } , Answers . RETURNS_SMART_NULLS , true , MockReset . BEFORE , org.springframework.boot.test.mock.mockito.QualifierDefinition ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) ) . isEqualTo ( org.springframework.boot.test.mock.mockito.ResolvableType ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getExtraInterfaces ( ) ) . containsExactly ( ExampleExtraInterface .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getAnswer ( ) ) . isEqualTo ( Answers . RETURNS_SMART_NULLS ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . isSerializable ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getReset ( ) ) . isEqualTo ( MockReset . BEFORE ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . isProxyTargetAware ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) ) . isEqualTo ( org.springframework.boot.test.mock.mockito.QualifierDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = new MockDefinition ( STRING , org.springframework.boot.test.mock.mockito.ResolvableType , new java.lang.Class<?> < ? > [] { ExampleExtraInterface .class } , Answers . RETURNS_SMART_NULLS , true , MockReset . BEFORE , null ) ; ExampleService org.springframework.boot.test.mock.mockito.ExampleService = org.springframework.boot.test.mock.mockito.MockDefinition . createMock ( ) ; MockCreationSettings < ? > org.springframework.boot.test.mock.mockito.MockCreationSettings<?> = MockitoApi . get ( ) . getMockSettings ( org.springframework.boot.test.mock.mockito.ExampleService ) ; assertThat ( org.springframework.boot.test.mock.mockito.ExampleService ) . isInstanceOf ( ExampleService .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.ExampleService ) . isInstanceOf ( ExampleExtraInterface .class ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockCreationSettings<> . getMockName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockCreationSettings<> . getDefaultAnswer ( ) ) . isEqualTo ( Answers . RETURNS_SMART_NULLS ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockCreationSettings<> . isSerializable ( ) ) . isTrue ( ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.ExampleService ) ) . isEqualTo ( MockReset . BEFORE ) ; }  <METHOD_END>
