<METHOD_START> public static java.sql.Connection java.sql.Connection ( javax.sql.DataSource javax.sql.DataSource ) throws org.springframework.jdbc.datasource.CannotGetJdbcConnectionException { try { return java.sql.Connection ( javax.sql.DataSource ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { throw new CannotGetJdbcConnectionException ( STRING , java.sql.SQLException ) ; } }  <METHOD_END>
<METHOD_START> public static java.sql.Connection java.sql.Connection ( javax.sql.DataSource javax.sql.DataSource ) throws java.sql.SQLException { Assert . notNull ( javax.sql.DataSource , STRING ) ; ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( javax.sql.DataSource ) ; if ( org.springframework.jdbc.datasource.ConnectionHolder != null && ( org.springframework.jdbc.datasource.ConnectionHolder . hasConnection ( ) || org.springframework.jdbc.datasource.ConnectionHolder . isSynchronizedWithTransaction ( ) ) ) { org.springframework.jdbc.datasource.ConnectionHolder . requested ( ) ; if ( ! org.springframework.jdbc.datasource.ConnectionHolder . hasConnection ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING ) ; org.springframework.jdbc.datasource.ConnectionHolder . setConnection ( javax.sql.DataSource . java.sql.Connection ( ) ) ; } return org.springframework.jdbc.datasource.ConnectionHolder . getConnection ( ) ; } org.springframework.jdbc.datasource.Log . debug ( STRING ) ; java.sql.Connection java.sql.Connection = javax.sql.DataSource . java.sql.Connection ( ) ; if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING ) ; ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = org.springframework.jdbc.datasource.ConnectionHolder ; if ( org.springframework.jdbc.datasource.ConnectionHolder == null ) { org.springframework.jdbc.datasource.ConnectionHolder = new ConnectionHolder ( java.sql.Connection ) ; } else { org.springframework.jdbc.datasource.ConnectionHolder . setConnection ( java.sql.Connection ) ; } org.springframework.jdbc.datasource.ConnectionHolder . requested ( ) ; TransactionSynchronizationManager . registerSynchronization ( new org.springframework.jdbc.datasource.DataSourceUtils.ConnectionSynchronization ( org.springframework.jdbc.datasource.ConnectionHolder , javax.sql.DataSource ) ) ; org.springframework.jdbc.datasource.ConnectionHolder . setSynchronizedWithTransaction ( true ) ; if ( org.springframework.jdbc.datasource.ConnectionHolder != org.springframework.jdbc.datasource.ConnectionHolder ) { TransactionSynchronizationManager . bindResource ( javax.sql.DataSource , org.springframework.jdbc.datasource.ConnectionHolder ) ; } } return java.sql.Connection ; }  <METHOD_END>
<METHOD_START> public static java.lang.Integer java.lang.Integer ( java.sql.Connection java.sql.Connection , TransactionDefinition org.springframework.jdbc.datasource.TransactionDefinition )			throws java.sql.SQLException { Assert . notNull ( java.sql.Connection , STRING ) ; if ( org.springframework.jdbc.datasource.TransactionDefinition != null && org.springframework.jdbc.datasource.TransactionDefinition . isReadOnly ( ) ) { try { if ( org.springframework.jdbc.datasource.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING + java.sql.Connection + STRING ) ; } java.sql.Connection . void ( true ) ; } catch ( java.sql.SQLException | java.lang.RuntimeException java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception ; while ( java.lang.Throwable != null ) { if ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { throw java.lang.Exception ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } org.springframework.jdbc.datasource.Log . debug ( STRING , java.lang.Exception ) ; } } java.lang.Integer java.lang.Integer = null ; if ( org.springframework.jdbc.datasource.TransactionDefinition != null && org.springframework.jdbc.datasource.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ) { if ( org.springframework.jdbc.datasource.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING + java.sql.Connection + STRING + org.springframework.jdbc.datasource.TransactionDefinition . getIsolationLevel ( ) ) ; } int int = java.sql.Connection . int ( ) ; if ( int != org.springframework.jdbc.datasource.TransactionDefinition . getIsolationLevel ( ) ) { java.lang.Integer = int ; java.sql.Connection . void ( org.springframework.jdbc.datasource.TransactionDefinition . getIsolationLevel ( ) ) ; } } return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.Connection java.sql.Connection , java.lang.Integer java.lang.Integer ) { Assert . notNull ( java.sql.Connection , STRING ) ; try { if ( java.lang.Integer != null ) { if ( org.springframework.jdbc.datasource.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING + java.sql.Connection + STRING + java.lang.Integer ) ; } java.sql.Connection . void ( java.lang.Integer ) ; } if ( java.sql.Connection . boolean ( ) ) { if ( org.springframework.jdbc.datasource.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.datasource.Log . debug ( STRING + java.sql.Connection + STRING ) ; } java.sql.Connection . void ( false ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jdbc.datasource.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.sql.Connection java.sql.Connection , javax.sql.DataSource javax.sql.DataSource ) { if ( javax.sql.DataSource == null ) { return false ; } ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( javax.sql.DataSource ) ; return ( org.springframework.jdbc.datasource.ConnectionHolder != null && boolean ( org.springframework.jdbc.datasource.ConnectionHolder , java.sql.Connection ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.Statement java.sql.Statement , javax.sql.DataSource javax.sql.DataSource ) throws java.sql.SQLException { void ( java.sql.Statement , javax.sql.DataSource , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.Statement java.sql.Statement , javax.sql.DataSource javax.sql.DataSource , int int ) throws java.sql.SQLException { Assert . notNull ( java.sql.Statement , STRING ) ; Assert . notNull ( javax.sql.DataSource , STRING ) ; ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( javax.sql.DataSource ) ; if ( org.springframework.jdbc.datasource.ConnectionHolder != null && org.springframework.jdbc.datasource.ConnectionHolder . hasTimeout ( ) ) { java.sql.Statement . void ( org.springframework.jdbc.datasource.ConnectionHolder . getTimeToLiveInSeconds ( ) ) ; } else if ( int >= NUMBER ) { java.sql.Statement . void ( int ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.Connection java.sql.Connection , javax.sql.DataSource javax.sql.DataSource ) { try { void ( java.sql.Connection , javax.sql.DataSource ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.datasource.Log . debug ( STRING , java.sql.SQLException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jdbc.datasource.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.Connection java.sql.Connection , javax.sql.DataSource javax.sql.DataSource ) throws java.sql.SQLException { if ( java.sql.Connection == null ) { return; } if ( javax.sql.DataSource != null ) { ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( javax.sql.DataSource ) ; if ( org.springframework.jdbc.datasource.ConnectionHolder != null && boolean ( org.springframework.jdbc.datasource.ConnectionHolder , java.sql.Connection ) ) { org.springframework.jdbc.datasource.ConnectionHolder . released ( ) ; return; } } org.springframework.jdbc.datasource.Log . debug ( STRING ) ; void ( java.sql.Connection , javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.Connection java.sql.Connection , javax.sql.DataSource javax.sql.DataSource ) throws java.sql.SQLException { if ( ! ( javax.sql.DataSource instanceof SmartDataSource ) || ( ( SmartDataSource ) javax.sql.DataSource ) . shouldClose ( java.sql.Connection ) ) { java.sql.Connection . void ( ) ; } }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder , java.sql.Connection java.sql.Connection ) { if ( ! org.springframework.jdbc.datasource.ConnectionHolder . hasConnection ( ) ) { return false ; } java.sql.Connection java.sql.Connection = org.springframework.jdbc.datasource.ConnectionHolder . getConnection ( ) ; return ( java.sql.Connection == java.sql.Connection || java.sql.Connection . boolean ( java.sql.Connection ) || java.sql.Connection ( java.sql.Connection ) . boolean ( java.sql.Connection ) ) ; }  <METHOD_END>
<METHOD_START> public static java.sql.Connection java.sql.Connection ( java.sql.Connection java.sql.Connection ) { java.sql.Connection java.sql.Connection = java.sql.Connection ; while ( java.sql.Connection instanceof ConnectionProxy ) { java.sql.Connection = ( ( ConnectionProxy ) java.sql.Connection ) . getTargetConnection ( ) ; } return java.sql.Connection ; }  <METHOD_END>
<METHOD_START> private static int int ( javax.sql.DataSource javax.sql.DataSource ) { int int = int ; javax.sql.DataSource javax.sql.DataSource = javax.sql.DataSource ; while ( javax.sql.DataSource instanceof DelegatingDataSource ) { int -- ; javax.sql.DataSource = ( ( DelegatingDataSource ) javax.sql.DataSource ) . getTargetDataSource ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> public void ( ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder , javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.jdbc.datasource.ConnectionHolder = org.springframework.jdbc.datasource.ConnectionHolder ; this . javax.sql.DataSource = javax.sql.DataSource ; this . int = int ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { TransactionSynchronizationManager . unbindResource ( this . javax.sql.DataSource ) ; if ( this . org.springframework.jdbc.datasource.ConnectionHolder . hasConnection ( ) && ! this . org.springframework.jdbc.datasource.ConnectionHolder . isOpen ( ) ) { void ( this . org.springframework.jdbc.datasource.ConnectionHolder . getConnection ( ) , this . javax.sql.DataSource ) ; this . org.springframework.jdbc.datasource.ConnectionHolder . setConnection ( null ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { TransactionSynchronizationManager . bindResource ( this . javax.sql.DataSource , this . org.springframework.jdbc.datasource.ConnectionHolder ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . org.springframework.jdbc.datasource.ConnectionHolder . isOpen ( ) ) { TransactionSynchronizationManager . unbindResource ( this . javax.sql.DataSource ) ; this . boolean = false ; if ( this . org.springframework.jdbc.datasource.ConnectionHolder . hasConnection ( ) ) { void ( this . org.springframework.jdbc.datasource.ConnectionHolder . getConnection ( ) , this . javax.sql.DataSource ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { if ( this . boolean ) { TransactionSynchronizationManager . unbindResourceIfPossible ( this . javax.sql.DataSource ) ; this . boolean = false ; if ( this . org.springframework.jdbc.datasource.ConnectionHolder . hasConnection ( ) ) { void ( this . org.springframework.jdbc.datasource.ConnectionHolder . getConnection ( ) , this . javax.sql.DataSource ) ; this . org.springframework.jdbc.datasource.ConnectionHolder . setConnection ( null ) ; } } this . org.springframework.jdbc.datasource.ConnectionHolder . reset ( ) ; }  <METHOD_END>
