<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.ftp.dsl.QueueChannel = new QueueChannel ( ) ; IntegrationFlow org.springframework.integration.ftp.dsl.IntegrationFlow = IntegrationFlows . from ( Ftp . inboundAdapter ( sessionFactory ( ) ) . preserveTimestamp ( true ) . remoteDirectory ( STRING ) . regexFilter ( STRING ) . localFilename ( f -> f . toUpperCase ( ) + STRING ) . localDirectory ( getTargetLocalDirectory ( ) ) , e -> e . id ( STRING ) . poller ( Pollers . fixedDelay ( NUMBER ) ) ) . channel ( org.springframework.integration.ftp.dsl.QueueChannel ) . get ( ) ; IntegrationFlowRegistration org.springframework.integration.ftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.ftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.ftp.dsl.IntegrationFlow ) . register ( ) ; Message < ? > org.springframework.integration.ftp.dsl.Message<?> = org.springframework.integration.ftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.dsl.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.ftp.dsl.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.io.File .class ) ) ; java.io.File java.io.File = ( java.io.File ) java.lang.Object ; assertThat ( java.io.File . java.lang.String ( ) , isOneOf ( STRING , STRING ) ) ; assertThat ( java.io.File . java.lang.String ( ) , containsString ( STRING ) ) ; org.springframework.integration.ftp.dsl.Message<?> = org.springframework.integration.ftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.dsl.Message<> ) ; java.io.File = ( java.io.File ) org.springframework.integration.ftp.dsl.Message<> . getPayload ( ) ; assertThat ( java.io.File . java.lang.String ( ) , isOneOf ( STRING , STRING ) ) ; assertThat ( java.io.File . java.lang.String ( ) , containsString ( STRING ) ) ; assertNull ( org.springframework.integration.ftp.dsl.QueueChannel . receive ( NUMBER ) ) ; java.io.File java.io.File = new java.io.File ( this . sourceRemoteDirectory , STRING + prefix ( ) + STRING ) ; java.io.File . boolean ( java.lang.System . long ( ) - NUMBER * NUMBER * NUMBER * NUMBER ) ; org.springframework.integration.ftp.dsl.Message<?> = org.springframework.integration.ftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.dsl.Message<> ) ; java.lang.Object = org.springframework.integration.ftp.dsl.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.io.File .class ) ) ; java.io.File = ( java.io.File ) java.lang.Object ; assertEquals ( STRING , java.io.File . java.lang.String ( ) ) ; org.springframework.integration.ftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.ftp.dsl.QueueChannel = new QueueChannel ( ) ; StandardIntegrationFlow org.springframework.integration.ftp.dsl.StandardIntegrationFlow = IntegrationFlows . from ( Ftp . inboundStreamingAdapter ( new FtpRemoteFileTemplate ( sessionFactory ( ) ) ) . remoteDirectory ( STRING ) . regexFilter ( STRING ) , e -> e . id ( STRING ) . poller ( Pollers . fixedDelay ( NUMBER ) ) ) . channel ( org.springframework.integration.ftp.dsl.QueueChannel ) . get ( ) ; IntegrationFlowRegistration org.springframework.integration.ftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.ftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.ftp.dsl.StandardIntegrationFlow ) . register ( ) ; Message < ? > org.springframework.integration.ftp.dsl.Message<?> = org.springframework.integration.ftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.dsl.Message<> ) ; assertThat ( org.springframework.integration.ftp.dsl.Message<> . getPayload ( ) , instanceOf ( java.io.InputStream .class ) ) ; assertThat ( org.springframework.integration.ftp.dsl.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) , isOneOf ( STRING , STRING ) ) ; new IntegrationMessageHeaderAccessor ( org.springframework.integration.ftp.dsl.Message<> ) . getCloseableResource ( ) . close ( ) ; org.springframework.integration.ftp.dsl.Message<?> = org.springframework.integration.ftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.dsl.Message<> ) ; assertThat ( org.springframework.integration.ftp.dsl.Message<> . getPayload ( ) , instanceOf ( java.io.InputStream .class ) ) ; assertThat ( org.springframework.integration.ftp.dsl.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) , isOneOf ( STRING , STRING ) ) ; new IntegrationMessageHeaderAccessor ( org.springframework.integration.ftp.dsl.Message<> ) . getCloseableResource ( ) . close ( ) ; org.springframework.integration.ftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IntegrationFlow org.springframework.integration.ftp.dsl.IntegrationFlow = f -> f . handle ( Ftp . outboundAdapter ( sessionFactory ( ) , FileExistsMode . FAIL ) . useTemporaryFileName ( false ) . fileNameExpression ( STRING + FileHeaders . FILENAME + STRING ) . remoteDirectory ( STRING ) ) ; IntegrationFlowRegistration org.springframework.integration.ftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.ftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.ftp.dsl.IntegrationFlow ) . register ( ) ; java.lang.String java.lang.String = STRING ; Message < java.io.ByteArrayInputStream > org.springframework.integration.ftp.dsl.Message<java.io.ByteArrayInputStream> = MessageBuilder . withPayload ( new java.io.ByteArrayInputStream ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) . setHeader ( FileHeaders . FILENAME , java.lang.String ) . build ( ) ; org.springframework.integration.ftp.dsl.IntegrationFlowRegistration . getInputChannel ( ) . send ( org.springframework.integration.ftp.dsl.Message<java.io.ByteArrayInputStream> ) ; RemoteFileTemplate < FTPFile > org.springframework.integration.ftp.dsl.RemoteFileTemplate<org.springframework.integration.ftp.dsl.FTPFile> = new RemoteFileTemplate <> ( sessionFactory ( ) ) ; FTPFile [] org.springframework.integration.ftp.dsl.FTPFile[] = org.springframework.integration.ftp.dsl.RemoteFileTemplate<org.springframework.integration.ftp.dsl.FTPFile> . execute ( session -> session . list ( getTargetRemoteDirectory ( ) . getName ( ) + STRING + fileName ) ) ; assertEquals ( NUMBER , files . length ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.dsl.FTPFile[] [ NUMBER ] . getSize ( ) ) ; org.springframework.integration.ftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { QueueChannel org.springframework.integration.ftp.dsl.QueueChannel = new QueueChannel ( ) ; IntegrationFlow org.springframework.integration.ftp.dsl.IntegrationFlow = f -> f . handle ( Ftp . outboundGateway ( sessionFactory ( ) , AbstractRemoteFileOutboundGateway . Command . MGET , STRING ) . options ( AbstractRemoteFileOutboundGateway . Option . RECURSIVE ) . filterExpression ( STRING ) . localDirectoryExpression ( STRING + getTargetLocalDirectoryName ( ) + STRING ) . localFilenameExpression ( STRING ) ) . channel ( out ) ; IntegrationFlowRegistration org.springframework.integration.ftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.ftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.ftp.dsl.IntegrationFlow ) . register ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.ftp.dsl.IntegrationFlowRegistration . getInputChannel ( ) . send ( new GenericMessage <> ( java.lang.String + STRING ) ) ; Message < ? > org.springframework.integration.ftp.dsl.Message<?> = org.springframework.integration.ftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.dsl.Message<> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = ( java.util.List<java.io.File> < java.io.File > ) org.springframework.integration.ftp.dsl.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , Matchers . containsString ( java.lang.String ) ) ; } assertThat ( java.util.List<java.io.File> . java.io.File ( NUMBER ) . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , Matchers . containsString ( java.lang.String + STRING ) ) ; org.springframework.integration.ftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
