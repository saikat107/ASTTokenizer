<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisList < java.lang.String > org.springframework.integration.redis.outbound.RedisList<java.lang.String> = new DefaultRedisList < java.lang.String > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new StringRedisTemplate ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = new GenericMessage < java.util.List<java.lang.String> < java.lang.String > > ( java.util.List<java.lang.String> ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . get ( NUMBER ) ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisList < java.lang.String > org.springframework.integration.redis.outbound.RedisList<java.lang.String> = new DefaultRedisList < java.lang.String > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new StringRedisTemplate ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setHeader ( STRING , java.lang.String ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . get ( NUMBER ) ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ RedisAvailable @ Test ( expected = MessageHandlingException .class ) public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisList < java.lang.String > org.springframework.integration.redis.outbound.RedisList<java.lang.String> = new DefaultRedisList < java.lang.String > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , java.lang.String > ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisList < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.RedisList<java.util.List<java.lang.String>> = new DefaultRedisList < java.util.List<java.lang.String> < java.lang.String > > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.util.List<java.lang.String>> . size ( ) ) ; RedisTemplate < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.List<java.lang.String>> = this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.List<java.lang.String>> ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setExtractPayloadElements ( false ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = new GenericMessage < java.util.List<java.lang.String> < java.lang.String > > ( java.util.List<java.lang.String> ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.util.List<java.lang.String>> . size ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.redis.outbound.RedisList<java.util.List<java.lang.String>> . get ( NUMBER ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new StringRedisTemplate ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = new GenericMessage < java.util.List<java.lang.String> < java.lang.String > > ( java.util.List<java.lang.String> ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> < TypedTuple < java.lang.String > > java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> = org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; for ( TypedTuple < java.lang.String > org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> : java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> ) { assertTrue ( org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> . getScore ( ) == NUMBER ) ; } org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> = org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; for ( TypedTuple < java.lang.String > org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> : java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> ) { assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> . getScore ( ) ) ; } this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new StringRedisTemplate ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setHeader ( RedisHeaders . ZSET_INCREMENT_SCORE , java.lang.Boolean . java.lang.Boolean ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> < TypedTuple < java.lang.String > > java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> = org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; for ( TypedTuple < java.lang.String > org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> : java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> ) { assertTrue ( org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> . getScore ( ) == NUMBER ) ; } org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> = org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; for ( TypedTuple < java.lang.String > org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> : java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> ) { assertTrue ( org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> . getScore ( ) == NUMBER ) ; } this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new StringRedisTemplate ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setHeader ( RedisHeaders . ZSET_INCREMENT_SCORE , STRING ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> < TypedTuple < java.lang.String > > java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> = org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; for ( TypedTuple < java.lang.String > org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> : java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> ) { assertTrue ( org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> . getScore ( ) == NUMBER ) ; } org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> = org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; for ( TypedTuple < java.lang.String > org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> : java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> ) { assertTrue ( org.springframework.integration.redis.outbound.TypedTuple<java.lang.String> . getScore ( ) == NUMBER ) ; } this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisZSet < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.RedisZSet<java.util.List<java.lang.String>> = new DefaultRedisZSet < java.util.List<java.lang.String> < java.lang.String > > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.util.List<java.lang.String>> . size ( ) ) ; RedisTemplate < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.List<java.lang.String>> = this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.List<java.lang.String>> ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setExtractPayloadElements ( false ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setHeader ( STRING , java.lang.String ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.util.List<java.lang.String>> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.util.List<java.lang.String>>> < TypedTuple < java.util.List<java.lang.String> < java.lang.String > > > java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.util.List<java.lang.String>>> = org.springframework.integration.redis.outbound.RedisZSet<java.util.List<java.lang.String>> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; for ( TypedTuple < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.TypedTuple<java.util.List<java.lang.String>> : java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.util.List<java.lang.String>>> ) { assertTrue ( org.springframework.integration.redis.outbound.TypedTuple<java.util.List<java.lang.String>> . getScore ( ) == NUMBER ) ; } this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deletePresidents ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; java.lang.String java.lang.String = STRING ; RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new StringRedisTemplate ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Double> < java.lang.String , java.lang.Double > java.util.Map<java.lang.String,java.lang.Double> = new java.util.HashMap<java.lang.String,java.lang.Double> < java.lang.String , java.lang.Double > ( ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Double> . java.lang.Double ( STRING , NUMBER ) ; Message < java.util.Map<java.lang.String,java.lang.Double> < java.lang.String , java.lang.Double > > org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.Double>> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Double> ) . setHeader ( STRING , java.lang.String ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.Double>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> < TypedTuple < java.lang.String > > java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> = org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<java.lang.String>> . size ( ) ) ; this . deletePresidents ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deletePresidents ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; java.lang.String java.lang.String = STRING ; RedisZSet < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President > org.springframework.integration.redis.outbound.RedisZSet<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President> = new DefaultRedisZSet < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President > ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President> . size ( ) ) ; RedisTemplate < java.lang.String , org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President> = this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President > ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President> ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> = new java.util.HashMap<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > ( ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; Message < java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > > org.springframework.integration.redis.outbound.Message<java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> = MessageBuilder . withPayload ( java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> ) . setHeader ( STRING , java.lang.String ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President> . size ( ) ) ; java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President>> < TypedTuple < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President > > java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President>> = org.springframework.integration.redis.outbound.RedisZSet<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President> . rangeByScoreWithScores ( NUMBER , NUMBER ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.redis.outbound.TypedTuple<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President>> . size ( ) ) ; this . deletePresidents ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deletePresidents ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; java.lang.String java.lang.String = STRING ; RedisZSet < java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > > org.springframework.integration.redis.outbound.RedisZSet<java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> = new DefaultRedisZSet < java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > > ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > > ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> . size ( ) ) ; RedisTemplate < java.lang.String , java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> = this . org.springframework.integration.redis.outbound.RedisTemplate ( org.springframework.integration.redis.outbound.RedisConnectionFactory , new RedisTemplate < java.lang.String , java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > > ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setExtractPayloadElements ( false ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> = new java.util.HashMap<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > ( ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> . java.lang.Double ( new org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President ( STRING ) , NUMBER ) ; Message < java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> < org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President , java.lang.Double > > org.springframework.integration.redis.outbound.Message<java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> = MessageBuilder . withPayload ( java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double> ) . setHeader ( STRING , java.lang.String ) . build ( ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . handleMessage ( org.springframework.integration.redis.outbound.Message<java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.util.Map<org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandlerTests.President,java.lang.Double>> . size ( ) ) ; this . deletePresidents ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; java.lang.String java.lang.String = STRING ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setMapKeyExpression ( new LiteralExpression ( java.lang.String ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; java.lang.String java.lang.String = STRING ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . SET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setMapKeyExpression ( new LiteralExpression ( java.lang.String ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; java.lang.String java.lang.String = STRING ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . ZSET ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setMapKeyExpression ( new LiteralExpression ( java.lang.String ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . MAP ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setMapKeyExpression ( new LiteralExpression ( java.lang.String ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; try { org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; java.lang.String java.lang.String = STRING ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = new RedisStoreWritingMessageHandler ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setKey ( java.lang.String ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setCollectionType ( CollectionType . PROPERTIES ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setMapKeyExpression ( new LiteralExpression ( java.lang.String ) ) ; org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; try { org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } this . deleteKey ( org.springframework.integration.redis.outbound.RedisConnectionFactory , STRING ) ; }  <METHOD_END>
<METHOD_START> private < K , V > org.springframework.integration.redis.outbound.RedisTemplate<K,V> < K , V > org.springframework.integration.redis.outbound.RedisTemplate<K,V> ( RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory , RedisTemplate < K , V > org.springframework.integration.redis.outbound.RedisTemplate<K,V> ) { org.springframework.integration.redis.outbound.RedisTemplate<K,V> . setConnectionFactory ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<K,V> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<K,V> . afterPropertiesSet ( ) ; return org.springframework.integration.redis.outbound.RedisTemplate<K,V> ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
