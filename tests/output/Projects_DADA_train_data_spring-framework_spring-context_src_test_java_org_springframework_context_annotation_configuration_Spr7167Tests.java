<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.context.annotation.configuration.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.MyConfig .class ) ; assertThat ( STRING , org.springframework.context.annotation.configuration.ConfigurableApplicationContext . getBeanFactory ( ) . getBeanDefinition ( STRING ) . getDescription ( ) , equalTo ( STRING ) ) ; org.springframework.context.annotation.configuration.MyConfig org.springframework.context.annotation.configuration.MyConfig = org.springframework.context.annotation.configuration.ConfigurableApplicationContext . getBean ( org.springframework.context.annotation.configuration.MyConfig .class ) ; assertTrue ( STRING , ClassUtils . isCglibProxy ( org.springframework.context.annotation.configuration.MyConfig ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.Dependency org.springframework.context.annotation.configuration.Dependency ( ) { return new org.springframework.context.annotation.configuration.Dependency ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.BeanFactoryPostProcessor org.springframework.context.annotation.configuration.BeanFactoryPostProcessor ( ) { return new org.springframework.context.annotation.configuration.MyPostProcessor ( org.springframework.context.annotation.configuration.Dependency ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.context.annotation.configuration.Dependency org.springframework.context.annotation.configuration.Dependency ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.context.annotation.configuration.ConfigurableListableBeanFactory ) throws org.springframework.context.annotation.configuration.BeansException { AbstractBeanDefinition org.springframework.context.annotation.configuration.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.context.annotation.configuration.ConfigurableListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.context.annotation.configuration.AbstractBeanDefinition . setDescription ( STRING ) ; }  <METHOD_END>
