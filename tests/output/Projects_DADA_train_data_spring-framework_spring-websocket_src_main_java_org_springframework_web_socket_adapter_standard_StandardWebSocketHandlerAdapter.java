<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.adapter.standard.WebSocketHandler , StandardWebSocketSession org.springframework.web.socket.adapter.standard.StandardWebSocketSession ) { Assert . notNull ( org.springframework.web.socket.adapter.standard.WebSocketHandler , STRING ) ; Assert . notNull ( org.springframework.web.socket.adapter.standard.StandardWebSocketSession , STRING ) ; this . org.springframework.web.socket.adapter.standard.WebSocketHandler = org.springframework.web.socket.adapter.standard.WebSocketHandler ; this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession = org.springframework.web.socket.adapter.standard.StandardWebSocketSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final javax . javax.websocket . javax.websocket javax.websocket.Session , EndpointConfig org.springframework.web.socket.adapter.standard.EndpointConfig ) { this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession . initializeNativeSession ( javax.websocket.Session ) ; if ( this . org.springframework.web.socket.adapter.standard.WebSocketHandler . supportsPartialMessages ( ) ) { javax.websocket.Session . addMessageHandler ( new MessageHandler . MessageHandler < java.lang.String > ( ) { @ Override public void onMessage ( String message , boolean isLast ) { handleTextMessage ( session , message , isLast ) ; } } ) ; javax.websocket.Session . addMessageHandler ( new MessageHandler . MessageHandler < java.nio.ByteBuffer > ( ) { @ Override public void onMessage ( ByteBuffer message , boolean isLast ) { handleBinaryMessage ( session , message , isLast ) ; } } ) ; } else { javax.websocket.Session . addMessageHandler ( new MessageHandler . MessageHandler < java.lang.String > ( ) { @ Override public void onMessage ( String message ) { handleTextMessage ( session , message , true ) ; } } ) ; javax.websocket.Session . addMessageHandler ( new MessageHandler . MessageHandler < java.nio.ByteBuffer > ( ) { @ Override public void onMessage ( ByteBuffer message ) { handleBinaryMessage ( session , message , true ) ; } } ) ; } javax.websocket.Session . addMessageHandler ( new MessageHandler . MessageHandler < javax . javax.websocket . javax.websocket > ( ) { @ Override public void onMessage ( javax . websocket . PongMessage message ) { handlePongMessage ( session , message . getApplicationData ( ) ) ; } } ) ; try { this . org.springframework.web.socket.adapter.standard.WebSocketHandler . afterConnectionEstablished ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.standard.Log ) ; } }  <METHOD_END>
<METHOD_START> @ Override public void onMessage ( String message , boolean isLast ) { handleTextMessage ( session , message , isLast ) ; }  <METHOD_END>
<METHOD_START> @ Override public void onMessage ( ByteBuffer message , boolean isLast ) { handleBinaryMessage ( session , message , isLast ) ; }  <METHOD_END>
<METHOD_START> @ Override public void onMessage ( String message ) { handleTextMessage ( session , message , true ) ; }  <METHOD_END>
<METHOD_START> @ Override public void onMessage ( ByteBuffer message ) { handleBinaryMessage ( session , message , true ) ; }  <METHOD_END>
<METHOD_START> @ Override public void onMessage ( javax . websocket . PongMessage message ) { handlePongMessage ( session , message . getApplicationData ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.websocket . javax.websocket javax.websocket.Session , java.lang.String java.lang.String , boolean boolean ) { TextMessage org.springframework.web.socket.adapter.standard.TextMessage = new TextMessage ( java.lang.String , boolean ) ; try { this . org.springframework.web.socket.adapter.standard.WebSocketHandler . handleMessage ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , org.springframework.web.socket.adapter.standard.TextMessage ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.standard.Log ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.websocket . javax.websocket javax.websocket.Session , java.nio.ByteBuffer java.nio.ByteBuffer , boolean boolean ) { BinaryMessage org.springframework.web.socket.adapter.standard.BinaryMessage = new BinaryMessage ( java.nio.ByteBuffer , boolean ) ; try { this . org.springframework.web.socket.adapter.standard.WebSocketHandler . handleMessage ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , org.springframework.web.socket.adapter.standard.BinaryMessage ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.standard.Log ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.websocket . javax.websocket javax.websocket.Session , java.nio.ByteBuffer java.nio.ByteBuffer ) { PongMessage org.springframework.web.socket.adapter.standard.PongMessage = new PongMessage ( java.nio.ByteBuffer ) ; try { this . org.springframework.web.socket.adapter.standard.WebSocketHandler . handleMessage ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , org.springframework.web.socket.adapter.standard.PongMessage ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.standard.Log ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax . javax.websocket . javax.websocket javax.websocket.Session , CloseReason org.springframework.web.socket.adapter.standard.CloseReason ) { CloseStatus org.springframework.web.socket.adapter.standard.CloseStatus = new CloseStatus ( org.springframework.web.socket.adapter.standard.CloseReason . getCloseCode ( ) . getCode ( ) , org.springframework.web.socket.adapter.standard.CloseReason . getReasonPhrase ( ) ) ; try { this . org.springframework.web.socket.adapter.standard.WebSocketHandler . afterConnectionClosed ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , org.springframework.web.socket.adapter.standard.CloseStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.adapter.standard.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.adapter.standard.Log . error ( STRING + this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax . javax.websocket . javax.websocket javax.websocket.Session , java.lang.Throwable java.lang.Throwable ) { try { this . org.springframework.web.socket.adapter.standard.WebSocketHandler . handleTransportError ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Throwable ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { ExceptionWebSocketHandlerDecorator . tryCloseWithError ( this . org.springframework.web.socket.adapter.standard.StandardWebSocketSession , java.lang.Throwable , org.springframework.web.socket.adapter.standard.Log ) ; } }  <METHOD_END>
