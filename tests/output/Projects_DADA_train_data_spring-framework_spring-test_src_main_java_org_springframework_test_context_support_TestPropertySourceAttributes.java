<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> , TestPropertySource org.springframework.test.context.support.TestPropertySource ) { this( java.lang.Class<> , org.springframework.test.context.support.TestPropertySource . locations ( ) , org.springframework.test.context.support.TestPropertySource . inheritLocations ( ) , org.springframework.test.context.support.TestPropertySource . properties ( ) , org.springframework.test.context.support.TestPropertySource . inheritProperties ( ) ); }  <METHOD_END>
<METHOD_START> private void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String [] java.lang.String[] , boolean boolean , java.lang.String [] java.lang.String[] , boolean boolean ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) && ObjectUtils . isEmpty ( java.lang.String[] ) ) { java.lang.String[] = new java.lang.String [] { java.lang.String ( java.lang.Class<> ) } ; } this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.String[] = java.lang.String[] ; this . boolean = boolean ; this . java.lang.String[] = java.lang.String[] ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return new ToStringCreator ( this ) . append ( STRING , java.lang.Class<> . java.lang.String ( ) ) . append ( STRING , ObjectUtils . nullSafeToString ( java.lang.String[] ) ) . append ( STRING , boolean ) . append ( STRING , ObjectUtils . nullSafeToString ( java.lang.String[] ) ) . append ( STRING , boolean ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = ClassUtils . convertClassNameToResourcePath ( java.lang.Class<> . java.lang.String ( ) ) + STRING ; java.lang.String java.lang.String = ResourceUtils . CLASSPATH_URL_PREFIX + java.lang.String ; ClassPathResource org.springframework.test.context.support.ClassPathResource = new ClassPathResource ( java.lang.String ) ; if ( org.springframework.test.context.support.ClassPathResource . exists ( ) ) { if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Class<> . java.lang.String ( ) ) ) ; } return java.lang.String ; } else { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING + STRING , java.lang.Class<> . java.lang.String ( ) , org.springframework.test.context.support.ClassPathResource ) ; org.springframework.test.context.support.Log . error ( java.lang.String ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } }  <METHOD_END>
