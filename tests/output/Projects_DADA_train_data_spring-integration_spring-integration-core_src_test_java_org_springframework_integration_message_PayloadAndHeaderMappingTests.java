<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.integration.message.ConfigurableApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.message.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean = new org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class , java.lang.Object .class ) ; java.lang.Object java.lang.Object = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.lang.Object , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.String .class , java.util.Properties .class ) ; java.lang.Object java.lang.Object = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.lang.Object , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.lang.Object .class ) ; java.lang.Object java.lang.Object = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.lang.Object , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Object .class , java.util.Map .class ) ; java.lang.Object java.lang.Object = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.lang.Object , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertFalse ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.lang.String .class , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertFalse ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.String .class , java.util.Map .class , java.lang.String .class , java.lang.Object .class ) ; java.lang.Object java.lang.Object = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.lang.Object , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( java.lang.String , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.Integer ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Properties ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Properties , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map ) ; assertNotNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object instanceof java.util.Properties ) ; java.util.Properties java.util.Properties = ( java.util.Properties ) org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ; assertTrue ( java.util.Properties . boolean ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.Integer ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class ) ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Properties ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.util.Properties .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Properties .class , java.util.Map .class , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertTrue ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.util.Map .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( null , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean = new org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean ( ) ; new ServiceActivatingHandler ( org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean = new org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean ( ) ; new ServiceActivatingHandler ( org.springframework.integration.message.PayloadAndHeaderMappingTests.SingleAmbiguousMethodTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.String .class , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.lang.Object .class , java.util.Map .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.util.Map .class , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNotNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( new java.lang.Integer ( NUMBER ) ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Integer .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( new java.lang.Integer ( NUMBER ) ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Integer .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( new java.lang.Integer ( NUMBER ) ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Integer .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Object .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Object .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( new java.lang.Object ( ) ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Object .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( new java.lang.Integer ( NUMBER ) ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.Object .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHandler org.springframework.integration.message.MessageHandler = this . org.springframework.integration.message.ServiceActivatingHandler ( STRING , java.lang.String .class , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.message.MessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; assertNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.util.Map ) ; assertNotNull ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; assertEquals ( STRING , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.message.ServiceActivatingHandler org.springframework.integration.message.ServiceActivatingHandler ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { ServiceActivatingHandler org.springframework.integration.message.ServiceActivatingHandler = new ServiceActivatingHandler ( org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean , org.springframework.integration.message.PayloadAndHeaderMappingTests.TestBean .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ) ; org.springframework.integration.message.ServiceActivatingHandler . setBeanFactory ( org.springframework.integration.message.ConfigurableApplicationContext ) ; org.springframework.integration.message.ServiceActivatingHandler . afterPropertiesSet ( ) ; return org.springframework.integration.message.ServiceActivatingHandler ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return STRING + STRING ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties , java.lang.Object java.lang.Object ) { this . java.util.Map = java.util.Properties ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { this . java.util.Map = java.util.Properties ; this . java.lang.Object = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.util.Map java.util.Map ) { this . java.util.Map = java.util.Map ; this . java.lang.Object = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , java.lang.Object java.lang.Object ) { this . java.util.Map = java.util.Map ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.util.Map java.util.Map ) { this . java.util.Map = java.util.Map ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( @ Header ( STRING ) java.lang.String java.lang.String , java.util.Map java.util.Map , @ Header ( STRING ) java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; this . java.util.Map . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map . void ( java.util.Map ) ; this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , @ Header ( STRING ) java.lang.String java.lang.String ) { this . java.util.Map = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; this . java.util.Map . java.lang.Object ( STRING , java.lang.String ) ; this . java.lang.Object = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , @ Header ( STRING ) java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String ) { this . java.util.Map = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; this . java.util.Map . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map . java.lang.Object ( STRING , java.lang.String ) ; this . java.lang.Object = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , @ Headers java.util.Map java.util.Map ) { this . java.util.Map = java.util.Map ; this . java.lang.Object = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( @ Headers java.util.Map java.util.Map , java.util.Map java.util.Map ) { this . java.util.Map = java.util.Map ; this . java.lang.Object = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , @ Headers java.util.Properties java.util.Properties ) { this . java.util.Map = java.util.Properties ; this . java.lang.Object = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( @ Headers java.util.Properties java.util.Properties , java.util.Map java.util.Map , @ Header ( STRING ) java.lang.String java.lang.String ) { this . java.util.Map = java.util.Properties ; this . java.util.Map . java.lang.Object ( STRING , java.lang.String ) ; this . java.lang.Object = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( @ Headers java.util.Map java.util.Map ) { this . java.util.Map = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void void ( @ Headers java.util.Properties java.util.Properties ) { this . java.util.Map = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map ) { if ( java.util.Map . boolean ( STRING ) ) { this . java.lang.Object = java.util.Map ; } else { this . java.util.Map = java.util.Map ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { if ( java.util.Properties . boolean ( STRING ) ) { this . java.lang.Object = java.util.Properties ; } else { this . java.util.Map = java.util.Properties ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { }  <METHOD_END>
<METHOD_START> public void void ( @ Headers java.util.Map java.util.Map , @ Headers java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { this . java.util.Map = new java.util.HashMap ( java.util.Map ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { this . java.util.Map . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) + STRING , java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( @ Headers java.util.Map java.util.Map , java.lang.Object java.lang.Object , @ Headers java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { this . java.lang.Object = java.lang.Object ; this . java.util.Map = new java.util.HashMap ( java.util.Map ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { this . java.util.Map . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) + STRING , java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , java.lang.Object java.lang.Object , java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , @ Header ( STRING ) java.lang.String java.lang.String ) { this . java.util.Map = new java.util.HashMap ( java.util.Map ) ; this . java.util.Map . java.lang.Object ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map java.util.Map , @ Header ( STRING ) java.lang.String java.lang.String ) { this . java.lang.Object = java.util.Map ; this . java.util.Map = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ Header ( STRING ) java.lang.String java.lang.String ) { this . java.util.Map = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ Header ( STRING ) java.lang.Integer java.lang.Integer ) { this . java.util.Map = java.util.Collections . java.util.Map<java.lang.String,java.lang.Integer> ( STRING , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ Header ( STRING ) java.lang.Object java.lang.Object ) { this . java.util.Map = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ Payload ( STRING ) java.lang.String java.lang.String , @ Payload ( STRING ) java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.String + java.lang.String ; }  <METHOD_END>
