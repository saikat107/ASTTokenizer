<METHOD_START> public void ( ) { this . org.springframework.aop.support.ClassFilter = ClassFilter . TRUE ; this . org.springframework.aop.support.MethodMatcher = MethodMatcher . TRUE ; }  <METHOD_END>
<METHOD_START> public void ( Pointcut org.springframework.aop.support.Pointcut ) { Assert . notNull ( org.springframework.aop.support.Pointcut , STRING ) ; this . org.springframework.aop.support.ClassFilter = org.springframework.aop.support.Pointcut . getClassFilter ( ) ; this . org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.Pointcut . getMethodMatcher ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ClassFilter org.springframework.aop.support.ClassFilter ) { Assert . notNull ( org.springframework.aop.support.ClassFilter , STRING ) ; this . org.springframework.aop.support.ClassFilter = org.springframework.aop.support.ClassFilter ; this . org.springframework.aop.support.MethodMatcher = MethodMatcher . TRUE ; }  <METHOD_END>
<METHOD_START> public void ( MethodMatcher org.springframework.aop.support.MethodMatcher ) { Assert . notNull ( org.springframework.aop.support.MethodMatcher , STRING ) ; this . org.springframework.aop.support.ClassFilter = ClassFilter . TRUE ; this . org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.MethodMatcher ; }  <METHOD_END>
<METHOD_START> public void ( ClassFilter org.springframework.aop.support.ClassFilter , MethodMatcher org.springframework.aop.support.MethodMatcher ) { Assert . notNull ( org.springframework.aop.support.ClassFilter , STRING ) ; Assert . notNull ( org.springframework.aop.support.MethodMatcher , STRING ) ; this . org.springframework.aop.support.ClassFilter = org.springframework.aop.support.ClassFilter ; this . org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.MethodMatcher ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.support.ComposablePointcut org.springframework.aop.support.ComposablePointcut ( ClassFilter org.springframework.aop.support.ClassFilter ) { this . org.springframework.aop.support.ClassFilter = ClassFilters . union ( this . org.springframework.aop.support.ClassFilter , org.springframework.aop.support.ClassFilter ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.support.ComposablePointcut org.springframework.aop.support.ComposablePointcut ( ClassFilter org.springframework.aop.support.ClassFilter ) { this . org.springframework.aop.support.ClassFilter = ClassFilters . intersection ( this . org.springframework.aop.support.ClassFilter , org.springframework.aop.support.ClassFilter ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.support.ComposablePointcut org.springframework.aop.support.ComposablePointcut ( MethodMatcher org.springframework.aop.support.MethodMatcher ) { this . org.springframework.aop.support.MethodMatcher = MethodMatchers . union ( this . org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.MethodMatcher ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.support.ComposablePointcut org.springframework.aop.support.ComposablePointcut ( MethodMatcher org.springframework.aop.support.MethodMatcher ) { this . org.springframework.aop.support.MethodMatcher = MethodMatchers . intersection ( this . org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.MethodMatcher ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.support.ComposablePointcut org.springframework.aop.support.ComposablePointcut ( Pointcut org.springframework.aop.support.Pointcut ) { this . org.springframework.aop.support.MethodMatcher = MethodMatchers . union ( this . org.springframework.aop.support.MethodMatcher , this . org.springframework.aop.support.ClassFilter , org.springframework.aop.support.Pointcut . getMethodMatcher ( ) , org.springframework.aop.support.Pointcut . getClassFilter ( ) ) ; this . org.springframework.aop.support.ClassFilter = ClassFilters . union ( this . org.springframework.aop.support.ClassFilter , org.springframework.aop.support.Pointcut . getClassFilter ( ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.support.ComposablePointcut org.springframework.aop.support.ComposablePointcut ( Pointcut org.springframework.aop.support.Pointcut ) { this . org.springframework.aop.support.ClassFilter = ClassFilters . intersection ( this . org.springframework.aop.support.ClassFilter , org.springframework.aop.support.Pointcut . getClassFilter ( ) ) ; this . org.springframework.aop.support.MethodMatcher = MethodMatchers . intersection ( this . org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.Pointcut . getMethodMatcher ( ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ) { return this . org.springframework.aop.support.ClassFilter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.support.MethodMatcher org.springframework.aop.support.MethodMatcher ( ) { return this . org.springframework.aop.support.MethodMatcher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.aop.support.ComposablePointcut ) ) { return false ; } org.springframework.aop.support.ComposablePointcut org.springframework.aop.support.ComposablePointcut = ( org.springframework.aop.support.ComposablePointcut ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( org.springframework.aop.support.ComposablePointcut . org.springframework.aop.support.ClassFilter , this . org.springframework.aop.support.ClassFilter ) && ObjectUtils . nullSafeEquals ( org.springframework.aop.support.ComposablePointcut . org.springframework.aop.support.MethodMatcher , this . org.springframework.aop.support.MethodMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; if ( this . org.springframework.aop.support.ClassFilter != null ) { int = NUMBER * int + this . org.springframework.aop.support.ClassFilter . hashCode ( ) ; } if ( this . org.springframework.aop.support.MethodMatcher != null ) { int = NUMBER * int + this . org.springframework.aop.support.MethodMatcher . hashCode ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.aop.support.ClassFilter + STRING + this . org.springframework.aop.support.MethodMatcher ; }  <METHOD_END>
