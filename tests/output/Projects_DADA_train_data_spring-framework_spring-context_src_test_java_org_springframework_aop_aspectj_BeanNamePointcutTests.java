<METHOD_START> @ Before public void void ( ) { org.springframework.aop.aspectj.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.BeanNamePointcutTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.BeanNamePointcutTests> ( ) ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.Counter = ( Counter ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.BeanNamePointcutTests.TestInterceptor = ( org.springframework.aop.aspectj.BeanNamePointcutTests.TestInterceptor ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.Counter . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , this . org.springframework.aop.aspectj.ITestBean instanceof Advised ) ; this . org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; this . org.springframework.aop.aspectj.ITestBean . setName ( STRING ) ; assertEquals ( STRING , NUMBER , this . org.springframework.aop.aspectj.Counter . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( STRING , this . org.springframework.aop.aspectj.ITestBean instanceof Advised ) ; this . org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; assertEquals ( STRING , NUMBER , this . org.springframework.aop.aspectj.Counter . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( STRING , this . org.springframework.aop.aspectj.ITestBean . getDoctor ( ) instanceof Advised ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , this . java.util.Map<,> instanceof Advised ) ; assertEquals ( STRING , this . java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , this . java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , NUMBER , this . org.springframework.aop.aspectj.Counter . getCount ( ) ) ; FactoryBean < ? > org.springframework.aop.aspectj.FactoryBean<?> = ( FactoryBean < ? > ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , ! ( org.springframework.aop.aspectj.FactoryBean<> instanceof Advised ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , ! ( this . java.util.Map<,> instanceof Advised ) ) ; FactoryBean < ? > org.springframework.aop.aspectj.FactoryBean<?> = ( FactoryBean < ? > ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.aop.aspectj.FactoryBean<> instanceof Advised ) ; assertTrue ( java.util.Map .class . boolean ( org.springframework.aop.aspectj.FactoryBean<> . getObjectType ( ) ) ) ; assertTrue ( java.util.Map .class . boolean ( org.springframework.aop.aspectj.FactoryBean<> . getObjectType ( ) ) ) ; assertEquals ( STRING , NUMBER , this . org.springframework.aop.aspectj.Counter . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , this . org.springframework.aop.aspectj.ITestBean instanceof Advised ) ; assertFalse ( STRING , this . org.springframework.aop.aspectj.ITestBean instanceof Advised ) ; org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.BeanNamePointcutTests.TestInterceptor . int ) ; org.springframework.aop.aspectj.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.BeanNamePointcutTests.TestInterceptor . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { int ++ ; }  <METHOD_END>
