<METHOD_START> @ Before public void void ( ) { org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> = new SimpleLdapRepository <> ( org.springframework.data.ldap.repository.LdapOperations , org.springframework.data.ldap.repository.ObjectDirectoryMapper , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Filter org.springframework.data.ldap.repository.Filter = mock ( Filter .class ) ; when ( org.springframework.data.ldap.repository.ObjectDirectoryMapper . filterFor ( java.lang.Object .class , null ) ) . thenReturn ( org.springframework.data.ldap.repository.Filter ) ; ArgumentCaptor < LdapQuery > org.springframework.data.ldap.repository.ArgumentCaptor<org.springframework.data.ldap.repository.LdapQuery> = ArgumentCaptor . forClass ( LdapQuery .class ) ; doNothing ( ) . when ( org.springframework.data.ldap.repository.LdapOperations ) . search ( org.springframework.data.ldap.repository.ArgumentCaptor<org.springframework.data.ldap.repository.LdapQuery> . capture ( ) , any ( CountNameClassPairCallbackHandler .class ) ) ; long long = org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . count ( ) ; assertThat ( long ) . isEqualTo ( NUMBER ) ; LdapQuery org.springframework.data.ldap.repository.LdapQuery = org.springframework.data.ldap.repository.ArgumentCaptor<org.springframework.data.ldap.repository.LdapQuery> . getValue ( ) ; assertThat ( org.springframework.data.ldap.repository.LdapQuery . filter ( ) ) . isEqualTo ( org.springframework.data.ldap.repository.Filter ) ; assertThat ( org.springframework.data.ldap.repository.LdapQuery . attributes ( ) ) . isEqualTo ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; when ( org.springframework.data.ldap.repository.ObjectDirectoryMapper . getId ( java.lang.Object ) ) . thenReturn ( LdapUtils . emptyLdapName ( ) ) ; org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . save ( java.lang.Object ) ; verify ( org.springframework.data.ldap.repository.LdapOperations ) . update ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; javax.naming.ldap.LdapName javax.naming.ldap.LdapName = LdapUtils . newLdapName ( STRING ) ; when ( org.springframework.data.ldap.repository.ObjectDirectoryMapper . getId ( java.lang.Object ) ) . thenReturn ( LdapUtils . emptyLdapName ( ) ) ; org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . save ( java.lang.Object ) ; verify ( org.springframework.data.ldap.repository.LdapOperations ) . update ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; javax.naming.ldap.LdapName javax.naming.ldap.LdapName = LdapUtils . emptyLdapName ( ) ; when ( org.springframework.data.ldap.repository.ObjectDirectoryMapper . getId ( java.lang.Object ) ) . thenReturn ( null ) ; org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . save ( java.lang.Object ) ; verify ( org.springframework.data.ldap.repository.LdapOperations ) . create ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Persistable org.springframework.data.ldap.repository.Persistable = mock ( Persistable .class ) ; when ( org.springframework.data.ldap.repository.Persistable . isNew ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.ldap.repository.ObjectDirectoryMapper . getId ( org.springframework.data.ldap.repository.Persistable ) ) . thenReturn ( LdapUtils . emptyLdapName ( ) ) ; org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . save ( org.springframework.data.ldap.repository.Persistable ) ; verify ( org.springframework.data.ldap.repository.LdapOperations ) . create ( org.springframework.data.ldap.repository.Persistable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Persistable org.springframework.data.ldap.repository.Persistable = mock ( Persistable .class ) ; javax.naming.ldap.LdapName javax.naming.ldap.LdapName = LdapUtils . emptyLdapName ( ) ; when ( org.springframework.data.ldap.repository.Persistable . isNew ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.ldap.repository.ObjectDirectoryMapper . getId ( org.springframework.data.ldap.repository.Persistable ) ) . thenReturn ( null ) ; org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . save ( org.springframework.data.ldap.repository.Persistable ) ; verify ( org.springframework.data.ldap.repository.LdapOperations ) . create ( org.springframework.data.ldap.repository.Persistable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Persistable org.springframework.data.ldap.repository.Persistable = mock ( Persistable .class ) ; when ( org.springframework.data.ldap.repository.Persistable . isNew ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.ldap.repository.ObjectDirectoryMapper . getId ( org.springframework.data.ldap.repository.Persistable ) ) . thenReturn ( LdapUtils . emptyLdapName ( ) ) ; org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . save ( org.springframework.data.ldap.repository.Persistable ) ; verify ( org.springframework.data.ldap.repository.LdapOperations ) . update ( org.springframework.data.ldap.repository.Persistable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.naming.ldap.LdapName javax.naming.ldap.LdapName = LdapUtils . emptyLdapName ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; when ( org.springframework.data.ldap.repository.LdapOperations . findByDn ( javax.naming.ldap.LdapName , java.lang.Object .class ) ) . thenReturn ( java.lang.Object ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . findOne ( javax.naming.ldap.LdapName ) ; assertThat ( java.util.Optional<java.lang.Object> ) . contains ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.naming.ldap.LdapName javax.naming.ldap.LdapName = LdapUtils . emptyLdapName ( ) ; when ( org.springframework.data.ldap.repository.LdapOperations . findByDn ( javax.naming.ldap.LdapName , java.lang.Object .class ) ) . thenThrow ( new NameNotFoundException ( STRING ) ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . findOne ( javax.naming.ldap.LdapName ) ; assertThat ( java.util.Optional<java.lang.Object> ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.naming.ldap.LdapName javax.naming.ldap.LdapName = LdapUtils . emptyLdapName ( ) ; when ( org.springframework.data.ldap.repository.LdapOperations . findByDn ( javax.naming.ldap.LdapName , java.lang.Object .class ) ) . thenReturn ( null ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . findOne ( javax.naming.ldap.LdapName ) ; assertThat ( java.util.Optional<java.lang.Object> ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.naming.Name javax.naming.Name = LdapUtils . newLdapName ( STRING ) ; javax.naming.Name javax.naming.Name = LdapUtils . newLdapName ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; when ( org.springframework.data.ldap.repository.LdapOperations . findByDn ( javax.naming.Name , java.lang.Object .class ) ) . thenReturn ( java.lang.Object ) ; when ( org.springframework.data.ldap.repository.LdapOperations . findByDn ( javax.naming.Name , java.lang.Object .class ) ) . thenReturn ( java.lang.Object ) ; java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . findAll ( java.util.Arrays . java.util.List<javax.naming.Name> ( javax.naming.Name , javax.naming.Name ) ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.lang.Iterable<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ; assertThat ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) . isSameAs ( java.lang.Object ) ; assertThat ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) . isSameAs ( java.lang.Object ) ; assertThat ( java.util.Iterator<java.lang.Object> . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.naming.Name javax.naming.Name = LdapUtils . newLdapName ( STRING ) ; javax.naming.Name javax.naming.Name = LdapUtils . newLdapName ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; when ( org.springframework.data.ldap.repository.LdapOperations . findByDn ( javax.naming.Name , java.lang.Object .class ) ) . thenReturn ( null ) ; when ( org.springframework.data.ldap.repository.LdapOperations . findByDn ( javax.naming.Name , java.lang.Object .class ) ) . thenReturn ( java.lang.Object ) ; java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = org.springframework.data.ldap.repository.SimpleLdapRepository<java.lang.Object> . findAll ( java.util.Arrays . java.util.List<javax.naming.Name> ( javax.naming.Name , javax.naming.Name ) ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.lang.Iterable<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ; assertThat ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) . isSameAs ( java.lang.Object ) ; assertThat ( java.util.Iterator<java.lang.Object> . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
