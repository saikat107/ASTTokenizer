<METHOD_START> @ Before public void void ( ) { this . org.springframework.cassandra.core.CqlTemplate = new CqlTemplate ( ) ; this . org.springframework.cassandra.core.CqlTemplate . setSession ( org.springframework.cassandra.core.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.cassandra.core.CqlTemplate . execute ( ( SessionCallback < java.lang.String > ) session -> { throw new InvalidQueryException ( STRING ) ; } ) ; fail ( STRING ) ; } catch ( CassandraInvalidQueryException org.springframework.cassandra.core.CassandraInvalidQueryException ) { assertThat ( org.springframework.cassandra.core.CassandraInvalidQueryException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.cassandra.core.CqlTemplate . execute ( STRING ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { org.springframework.cassandra.core.CqlTemplate . execute ( STRING ) ; verify ( org.springframework.cassandra.core.Session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , cqlTemplate -> { cqlTemplate . execute ( STRING ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { ResultSet org.springframework.cassandra.core.ResultSet = org.springframework.cassandra.core.CqlTemplate . queryForResultSet ( STRING ) ; assertThat ( org.springframework.cassandra.core.ResultSet ) . hasSize ( NUMBER ) ; verify ( org.springframework.cassandra.core.Session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.core.CqlTemplate . query ( STRING , ( row , index ) -> row . getString ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( org.springframework.cassandra.core.Session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , cqlTemplate -> { List < String > rows = cqlTemplate . query ( STRING , ( row , index ) -> row . getString ( NUMBER ) ) ; assertThat ( rows ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.cassandra.core.CqlTemplate . query ( STRING , ResultSet :: wasApplied ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; try { org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; fail ( STRING ) ; } catch ( EmptyResultDataAccessException org.springframework.cassandra.core.EmptyResultDataAccessException ) { assertThat ( org.springframework.cassandra.core.EmptyResultDataAccessException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> null ) ; assertThat ( java.lang.String ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; try { org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) { assertThat ( org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.core.CqlTemplate . queryForList ( STRING , java.lang.String .class ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; boolean boolean = org.springframework.cassandra.core.CqlTemplate . execute ( STRING ) ; assertThat ( boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { org.springframework.cassandra.core.CqlTemplate . execute ( new SimpleStatement ( STRING ) ) ; verify ( org.springframework.cassandra.core.Session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , cqlTemplate -> { cqlTemplate . execute ( new SimpleStatement ( STRING ) ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { ResultSet org.springframework.cassandra.core.ResultSet = org.springframework.cassandra.core.CqlTemplate . queryForResultSet ( new SimpleStatement ( STRING ) ) ; assertThat ( org.springframework.cassandra.core.ResultSet ) . hasSize ( NUMBER ) ; verify ( org.springframework.cassandra.core.Session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.core.CqlTemplate . query ( new SimpleStatement ( STRING ) , ( row , index ) -> row . getString ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( org.springframework.cassandra.core.Session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , cqlTemplate -> { List < String > result = cqlTemplate . query ( new SimpleStatement ( STRING ) , ( row , index ) -> row . getString ( NUMBER ) ) ; assertThat ( result ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.cassandra.core.CqlTemplate . query ( new SimpleStatement ( STRING ) , ResultSet :: wasApplied ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; try { org.springframework.cassandra.core.CqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) { assertThat ( org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> null ) ; assertThat ( java.lang.String ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; try { org.springframework.cassandra.core.CqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) { assertThat ( org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.core.CqlTemplate . queryForList ( new SimpleStatement ( STRING ) , java.lang.String .class ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; boolean boolean = org.springframework.cassandra.core.CqlTemplate . execute ( new SimpleStatement ( STRING ) ) ; assertThat ( boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { ResultSet org.springframework.cassandra.core.ResultSet = org.springframework.cassandra.core.CqlTemplate . execute ( STRING , ( session , ps ) -> session . execute ( ps . bind ( STRING ) ) ) ; try { assertThat ( org.springframework.cassandra.core.ResultSet ) . hasSize ( NUMBER ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.CqlTemplate -> { when ( this . org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( this . org.springframework.cassandra.core.BoundStatement ) ; when ( this . org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; boolean boolean = org.springframework.cassandra.core.CqlTemplate . execute ( STRING , STRING ) ; assertThat ( boolean ) . isTrue ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.cassandra.core.CqlTemplate . execute ( session -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } , ( session , ps ) -> session . execute ( boundStatement ) ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.cassandra.core.CqlTemplate . execute ( session -> preparedStatement , ( session , ps ) -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.PreparedStatement . bind ( ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; java.util.Iterator<org.springframework.cassandra.core.Row> < Row > java.util.Iterator<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.CqlTemplate . query ( session -> preparedStatement , ResultSet :: iterator ) ; assertThat ( java.util.Iterator<org.springframework.cassandra.core.Row> ) . hasSize ( NUMBER ) . contains ( org.springframework.cassandra.core.Row ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ResultSet org.springframework.cassandra.core.ResultSet = org.springframework.cassandra.core.CqlTemplate . query ( session -> preparedStatement , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , rs -> rs ) ; assertThat ( org.springframework.cassandra.core.ResultSet ) . contains ( org.springframework.cassandra.core.Row ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.cassandra.core.CqlTemplate . query ( session -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , rs -> rs ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.cassandra.core.CqlTemplate . query ( session -> preparedStatement , ps -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } , rs -> rs ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; try { org.springframework.cassandra.core.CqlTemplate . query ( session -> preparedStatement , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , rs -> rs ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; java.util.List<org.springframework.cassandra.core.Row> < Row > java.util.List<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.CqlTemplate . query ( session -> preparedStatement , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , ( row , rowNum ) -> row ) ; assertThat ( java.util.List<org.springframework.cassandra.core.Row> ) . hasSize ( NUMBER ) . contains ( org.springframework.cassandra.core.Row ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepare ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; try { org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) { assertThat ( org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepare ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepare ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; try { org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) { assertThat ( org.springframework.cassandra.core.IncorrectResultSizeDataAccessException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepare ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , java.lang.String .class , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepare ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.core.CqlTemplate . queryForList ( STRING , java.lang.String .class , STRING ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepare ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; boolean boolean = org.springframework.cassandra.core.CqlTemplate . execute ( STRING , STRING ) ; assertThat ( boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private < T > void void ( java.lang.Integer java.lang.Integer , ConsistencyLevel org.springframework.cassandra.core.ConsistencyLevel , com . com.datastax . com.datastax . com.datastax . com.datastax . com.datastax com.datastax.driver.core.policies.RetryPolicy , java.util.function.Consumer<org.springframework.cassandra.core.CqlTemplate> < CqlTemplate > java.util.function.Consumer<org.springframework.cassandra.core.CqlTemplate> ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; when ( this . org.springframework.cassandra.core.Session . execute ( ( Statement ) any ( ) ) ) . thenReturn ( org.springframework.cassandra.core.ResultSet ) ; when ( this . org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( this . org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; when ( this . org.springframework.cassandra.core.Session . prepare ( anyString ( ) ) ) . thenReturn ( org.springframework.cassandra.core.PreparedStatement ) ; CqlTemplate org.springframework.cassandra.core.CqlTemplate = new CqlTemplate ( ) ; org.springframework.cassandra.core.CqlTemplate . setSession ( this . org.springframework.cassandra.core.Session ) ; if ( java.lang.Integer != null ) { org.springframework.cassandra.core.CqlTemplate . setFetchSize ( java.lang.Integer ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { org.springframework.cassandra.core.CqlTemplate . setRetryPolicy ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( org.springframework.cassandra.core.ConsistencyLevel != null ) { org.springframework.cassandra.core.CqlTemplate . setConsistencyLevel ( org.springframework.cassandra.core.ConsistencyLevel ) ; } java.util.function.Consumer<org.springframework.cassandra.core.CqlTemplate> . accept ( org.springframework.cassandra.core.CqlTemplate ) ; ArgumentCaptor < Statement > org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> = ArgumentCaptor . forClass ( Statement .class ) ; verify ( this . org.springframework.cassandra.core.Session ) . execute ( org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> . capture ( ) ) ; Statement org.springframework.cassandra.core.Statement = org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> . getValue ( ) ; if ( org.springframework.cassandra.core.Statement instanceof PreparedStatement || org.springframework.cassandra.core.Statement instanceof BoundStatement ) { if ( java.lang.Integer != null ) { verify ( org.springframework.cassandra.core.Statement ) . setFetchSize ( java.lang.Integer . int ( ) ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { verify ( org.springframework.cassandra.core.Statement ) . setRetryPolicy ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( org.springframework.cassandra.core.ConsistencyLevel != null ) { verify ( org.springframework.cassandra.core.Statement ) . setConsistencyLevel ( org.springframework.cassandra.core.ConsistencyLevel ) ; } } else { if ( java.lang.Integer != null ) { assertThat ( org.springframework.cassandra.core.Statement . getFetchSize ( ) ) . isEqualTo ( java.lang.Integer . int ( ) ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { assertThat ( org.springframework.cassandra.core.Statement . getRetryPolicy ( ) ) . isEqualTo ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( org.springframework.cassandra.core.ConsistencyLevel != null ) { assertThat ( org.springframework.cassandra.core.Statement . getConsistencyLevel ( ) ) . isEqualTo ( org.springframework.cassandra.core.ConsistencyLevel ) ; } } }  <METHOD_END>
