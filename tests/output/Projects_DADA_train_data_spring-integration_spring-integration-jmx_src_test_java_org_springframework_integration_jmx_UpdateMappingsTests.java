<METHOD_START> @ Test public void void ( ) { org.springframework.integration.jmx.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.jmx.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.jmx.MessageChannel . send ( org.springframework.integration.jmx.Message<> ) ; assertNotNull ( org.springframework.integration.jmx.PollableChannel . receive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.jmx.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.jmx.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.jmx.MessagingTemplate . convertAndSend ( org.springframework.integration.jmx.MessageChannel , STRING ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.integration.jmx.MessagingTemplate . convertSendAndReceive ( org.springframework.integration.jmx.MessageChannel , STRING , java.util.Map .class ) ; assertNotNull ( java.util.Map<,> ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; org.springframework.integration.jmx.MessagingTemplate . convertAndSend ( org.springframework.integration.jmx.MessageChannel , STRING ) ; java.util.Map<?,?> = org.springframework.integration.jmx.MessagingTemplate . convertSendAndReceive ( org.springframework.integration.jmx.MessageChannel , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessagingTemplate org.springframework.integration.jmx.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.jmx.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = this . javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { java.util.Map<java.lang.String,java.lang.String> } ; this . javax.management.MBeanServer . java.lang.Object ( java.util.Set<javax.management.ObjectName> . java.util.Iterator<javax.management.ObjectName> ( ) . javax.management.ObjectName ( ) , STRING , java.lang.Object[] , new java.lang.String [] { STRING } ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.integration.jmx.MessagingTemplate . convertSendAndReceive ( org.springframework.integration.jmx.MessageChannel , STRING , java.util.Map .class ) ; assertNotNull ( java.util.Map<,> ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; }  <METHOD_END>
