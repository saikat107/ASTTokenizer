<METHOD_START> public void ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest ) { Assert . notNull ( org.springframework.http.server.reactive.ServerHttpRequest , STRING ) ; this . org.springframework.http.server.reactive.ServerHttpRequest = org.springframework.http.server.reactive.ServerHttpRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerHttpRequest . ServerHttpRequest.Builder ServerHttpRequest.Builder ( HttpMethod org.springframework.http.server.reactive.HttpMethod ) { this . org.springframework.http.server.reactive.HttpMethod = org.springframework.http.server.reactive.HttpMethod ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerHttpRequest . ServerHttpRequest.Builder ServerHttpRequest.Builder ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerHttpRequest . ServerHttpRequest.Builder ServerHttpRequest.Builder ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerHttpRequest . ServerHttpRequest.Builder ServerHttpRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( this . org.springframework.http.server.reactive.HttpHeaders == null ) { this . org.springframework.http.server.reactive.HttpHeaders = new HttpHeaders ( ) ; } this . org.springframework.http.server.reactive.HttpHeaders . add ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest ( ) { java.net.URI java.net.URI = null ; if ( this . java.lang.String != null ) { java.net.URI = this . org.springframework.http.server.reactive.ServerHttpRequest . getURI ( ) ; try { java.net.URI = new java.net.URI ( java.net.URI . java.lang.String ( ) , java.net.URI . java.lang.String ( ) , java.net.URI . java.lang.String ( ) , java.net.URI . int ( ) , this . java.lang.String , java.net.URI . java.lang.String ( ) , java.net.URI . java.lang.String ( ) ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING ) ; } } return new org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.MutativeDecorator ( this . org.springframework.http.server.reactive.ServerHttpRequest , this . org.springframework.http.server.reactive.HttpMethod , java.net.URI , this . java.lang.String , this . org.springframework.http.server.reactive.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> public void ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest , HttpMethod org.springframework.http.server.reactive.HttpMethod , java.net.URI java.net.URI , java.lang.String java.lang.String , HttpHeaders org.springframework.http.server.reactive.HttpHeaders ) { super( org.springframework.http.server.reactive.ServerHttpRequest ); this . org.springframework.http.server.reactive.HttpMethod = org.springframework.http.server.reactive.HttpMethod ; this . java.net.URI = java.net.URI ; this . java.lang.String = java.lang.String ; if ( org.springframework.http.server.reactive.HttpHeaders != null ) { this . org.springframework.http.server.reactive.HttpHeaders = new HttpHeaders ( ) ; this . org.springframework.http.server.reactive.HttpHeaders . putAll ( super. getHeaders ( ) ) ; this . org.springframework.http.server.reactive.HttpHeaders . putAll ( org.springframework.http.server.reactive.HttpHeaders ) ; } else { this . org.springframework.http.server.reactive.HttpHeaders = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpMethod org.springframework.http.server.reactive.HttpMethod ( ) { return ( this . org.springframework.http.server.reactive.HttpMethod != null ? this . org.springframework.http.server.reactive.HttpMethod : super. getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return ( this . java.net.URI != null ? this . java.net.URI : super. getURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . java.lang.String != null ? this . java.lang.String : super. getContextPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( ) { return ( this . org.springframework.http.server.reactive.HttpHeaders != null ? this . org.springframework.http.server.reactive.HttpHeaders : super. getHeaders ( ) ) ; }  <METHOD_END>
