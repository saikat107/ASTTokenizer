<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.messaging.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Object java.lang.Object = org.springframework.messaging.converter.Message<> . getPayload ( ) ; if ( java.lang.Class<> == null ) { return java.lang.Object ; } return ( ClassUtils . isAssignableValue ( java.lang.Class<> , java.lang.Object ) ? java.lang.Object : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.converter.Message<?> < ? > org.springframework.messaging.converter.Message<?> ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.messaging.converter.MessageHeaders ) { if ( java.lang.Object == null ) { return null ; } if ( org.springframework.messaging.converter.MessageHeaders != null ) { MessageHeaderAccessor org.springframework.messaging.converter.MessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.converter.MessageHeaders , MessageHeaderAccessor .class ) ; if ( org.springframework.messaging.converter.MessageHeaderAccessor != null && org.springframework.messaging.converter.MessageHeaderAccessor . isMutable ( ) ) { return MessageBuilder . createMessage ( java.lang.Object , org.springframework.messaging.converter.MessageHeaderAccessor . getMessageHeaders ( ) ) ; } } return MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.messaging.converter.MessageHeaders ) . build ( ) ; }  <METHOD_END>
