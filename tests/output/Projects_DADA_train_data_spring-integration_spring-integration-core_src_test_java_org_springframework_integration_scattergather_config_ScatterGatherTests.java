<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.scattergather.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.scattergather.config.Message<?> = this . org.springframework.integration.scattergather.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.scattergather.config.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.scattergather.config.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.List .class ) ) ; assertThat ( ( ( java.util.List<?> < ? > ) java.lang.Object ) . int ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.scattergather.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.scattergather.config.Message<?> = this . org.springframework.integration.scattergather.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.scattergather.config.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.scattergather.config.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.List .class ) ) ; assertThat ( ( ( java.util.List<?> < ? > ) java.lang.Object ) . int ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.scattergather.config.Message<?> = this . org.springframework.integration.scattergather.config.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.scattergather.config.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.List .class ) ) ; assertThat ( ( ( java.util.List<?> < ? > ) java.lang.Object ) . int ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.scattergather.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.scattergather.config.Message<?> = this . org.springframework.integration.scattergather.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.scattergather.config.Message<> ) ; } }  <METHOD_END>
