<METHOD_START> @ java.lang.Override protected org.springframework.integration.xml.config.BeanDefinitionBuilder org.springframework.integration.xml.config.BeanDefinitionBuilder ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.xml.config.ParserContext ) { final BeanDefinitionBuilder org.springframework.integration.xml.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ) ; org.springframework.integration.xml.config.BeanDefinitionBuilder . getBeanDefinition ( ) . setBeanClass ( BooleanTestXPathMessageSelector .class ) ; this . void ( org.w3c.dom.Element , org.springframework.integration.xml.config.BeanDefinitionBuilder , org.springframework.integration.xml.config.ParserContext ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.integration.xml.config.BeanDefinitionBuilder . addConstructorArgValue ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.integration.xml.config.BeanDefinitionBuilder . getBeanDefinition ( ) . setBeanClass ( StringValueTestXPathMessageSelector .class ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.integration.xml.config.BeanDefinitionBuilder . getBeanDefinition ( ) . setBeanClass ( StringValueTestXPathMessageSelector .class ) ; org.springframework.integration.xml.config.BeanDefinitionBuilder . addPropertyValue ( STRING , false ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.integration.xml.config.BeanDefinitionBuilder . getBeanDefinition ( ) . setBeanClass ( RegexTestXPathMessageSelector .class ) ; } } BeanDefinitionBuilder org.springframework.integration.xml.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( FilterFactoryBean .class ) ; org.springframework.integration.xml.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.xml.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.xml.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.xml.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.xml.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; return org.springframework.integration.xml.config.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionBuilder org.springframework.integration.xml.config.BeanDefinitionBuilder , ParserContext org.springframework.integration.xml.config.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( org.w3c.dom.Element . java.lang.String ( ) , STRING ) ; Assert . isTrue ( org.w3c.dom.NodeList . int ( ) <= NUMBER , STRING ) ; boolean boolean = org.w3c.dom.NodeList . int ( ) == NUMBER ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; Assert . isTrue ( boolean ^ boolean , STRING ) ; if ( boolean ) { BeanDefinition org.springframework.integration.xml.config.BeanDefinition = this . org.springframework.integration.xml.config.XPathExpressionParser . parse ( ( org.w3c.dom.Element ) org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) , org.springframework.integration.xml.config.ParserContext ) ; org.springframework.integration.xml.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.xml.config.BeanDefinition ) ; } else { org.springframework.integration.xml.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } }  <METHOD_END>
