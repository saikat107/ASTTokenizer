<METHOD_START> public void ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> < Region < ? , ? > > java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> , MappingContext < ? extends GemfirePersistentEntity < ? > , GemfirePersistentProperty > org.springframework.data.gemfire.repository.support.MappingContext<? extends org.springframework.data.gemfire.repository.support.GemfirePersistentEntity<?>,org.springframework.data.gemfire.repository.support.GemfirePersistentProperty> ) { Assert . notNull ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> , STRING ) ; Assert . notNull ( org.springframework.data.gemfire.repository.support.MappingContext<,org.springframework.data.gemfire.repository.support.GemfirePersistentProperty> , STRING ) ; this . org.springframework.data.gemfire.repository.support.MappingContext<? extends org.springframework.data.gemfire.repository.support.GemfirePersistentEntity<?>,org.springframework.data.gemfire.repository.support.GemfirePersistentProperty> = org.springframework.data.gemfire.repository.support.MappingContext<,org.springframework.data.gemfire.repository.support.GemfirePersistentProperty> ; this . org.springframework.data.gemfire.repository.support.Regions = new Regions ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> , this . org.springframework.data.gemfire.repository.support.MappingContext<,org.springframework.data.gemfire.repository.support.GemfirePersistentProperty> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T , ID extends java.io.Serializable > org.springframework.data.gemfire.repository.support.GemfireEntityInformation<T,ID> < T , ID > org.springframework.data.gemfire.repository.support.GemfireEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { GemfirePersistentEntity < T > org.springframework.data.gemfire.repository.support.GemfirePersistentEntity<T> = ( GemfirePersistentEntity < T > ) org.springframework.data.gemfire.repository.support.MappingContext<,org.springframework.data.gemfire.repository.support.GemfirePersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) . orElseThrow ( ( ) newIllegalArgumentException ( STRING , domainClass ) ) ; return new DefaultGemfireEntityInformation <> ( org.springframework.data.gemfire.repository.support.GemfirePersistentEntity<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.gemfire.repository.support.RepositoryInformation ) { GemfireEntityInformation < ? , java.io.Serializable > org.springframework.data.gemfire.repository.support.GemfireEntityInformation<?,java.io.Serializable> = org.springframework.data.gemfire.repository.support.GemfireEntityInformation ( org.springframework.data.gemfire.repository.support.RepositoryInformation . getDomainType ( ) ) ; GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate = org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.RepositoryInformation ) ; return getTargetRepositoryViaReflection ( org.springframework.data.gemfire.repository.support.RepositoryInformation , org.springframework.data.gemfire.repository.support.GemfireTemplate , org.springframework.data.gemfire.repository.support.GemfireEntityInformation<,java.io.Serializable> ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.repository.support.GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate ( RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata ) { GemfirePersistentEntity < ? > org.springframework.data.gemfire.repository.support.GemfirePersistentEntity<?> = org.springframework.data.gemfire.repository.support.MappingContext<,org.springframework.data.gemfire.repository.support.GemfirePersistentProperty> . getPersistentEntity ( org.springframework.data.gemfire.repository.support.RepositoryMetadata . getDomainType ( ) ) . orElseThrow ( ( ) newIllegalArgumentException ( STRING , metadata . getDomainType ( ) ) ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.repository.support.GemfirePersistentEntity<> . getRegionName ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.data.gemfire.repository.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ) ; Region < ? , ? > org.springframework.data.gemfire.repository.support.Region<?,?> = org.springframework.data.gemfire.repository.support.Regions . getRegion ( java.lang.String ) ; if ( org.springframework.data.gemfire.repository.support.Region<,> == null ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , org.springframework.data.gemfire.repository.support.RepositoryMetadata . getDomainType ( ) . getName ( ) ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.gemfire.repository.support.Region<,> . getAttributes ( ) . getKeyConstraint ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.gemfire.repository.support.RepositoryMetadata . getIdType ( ) ; if ( java.lang.Class<> != null && org.springframework.data.gemfire.repository.support.GemfirePersistentEntity<> . getIdProperty ( ) != null ) { Assert . isTrue ( java.lang.Class<> . boolean ( java.lang.Class<> ) , java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; } return new GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<,> ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.Class<> . boolean ( org . springframework . data . gemfire . org.springframework.data.gemfire.mapping . org.springframework.data.gemfire.mapping . org.springframework.data.gemfire.mapping .class ) ? java.lang.Class<> . A ( org . springframework . data . gemfire . org.springframework.data.gemfire.mapping . org.springframework.data.gemfire.mapping . org.springframework.data.gemfire.mapping .class ) . value ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata ) { return SimpleGemfireRepository .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.gemfire.repository.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.gemfire.repository.support.QueryLookupStrategy> ( Key org.springframework.data.gemfire.repository.support.Key , EvaluationContextProvider org.springframework.data.gemfire.repository.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ( java.lang.reflect.Method method , RepositoryMetadata metadata , ProjectionFactory factory , NamedQueries namedQueries ) -> { GemfireQueryMethod queryMethod = new GemfireQueryMethod ( method , metadata , factory , mappingContext ) ; GemfireTemplate template = getTemplate ( metadata ) ; if ( queryMethod . hasAnnotatedQuery ( ) ) { return new StringBasedGemfireRepositoryQuery ( queryMethod , template ) . asUserDefinedQuery ( ) ; } if ( namedQueries . hasQuery ( queryMethod . getNamedQueryName ( ) ) ) { return new StringBasedGemfireRepositoryQuery ( namedQueries . getQuery ( queryMethod . getNamedQueryName ( ) ) , queryMethod , template ) . asUserDefinedQuery ( ) ; } return new PartTreeGemfireRepositoryQuery ( queryMethod , template ) ; } ) ; }  <METHOD_END>
