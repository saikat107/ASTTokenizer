<METHOD_START> public void void ( int int ) { Assert . isNull ( this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> , STRING ) ; this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> = new SimplePool < byte [] > ( int , new PoolItemCallback < byte [] > ( ) { @ java.lang.Override public byte [] byte[] ( ) { return new byte [ getMaxMessageSize ( ) ] ; } @ java.lang.Override public boolean boolean ( byte [] byte[] ) { return false ; } @ java.lang.Override public void void ( byte [] byte[] ) {			} } ) ; this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> . setWaitTimeout ( this . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ) { return new byte [ getMaxMessageSize ( ) ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( byte [] byte[] ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] ) {			}  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; if ( this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> != null ) { this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> . setWaitTimeout ( long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final byte [] byte[] ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { byte [] byte[] = this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> == null ? new byte [ this . maxMessageSize ] : this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> . getItem ( ) ; try { return byte[] ( java.io.InputStream , byte[] ) ; } finally { if ( this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> != null ) { this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> . releaseItem ( byte[] ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract byte [] byte[] ( java.io.InputStream java.io.InputStream , byte [] byte[] ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected byte [] byte[] ( byte [] byte[] , int int ) { if ( int == byte[] . int && this . org.springframework.integration.ip.tcp.serializer.SimplePool<byte[]> == null ) { return byte[] ; } byte [] byte[] = new byte [ int ] ; java.lang.System . void ( byte[] , NUMBER , byte[] , NUMBER , int ) ; return byte[] ; }  <METHOD_END>
