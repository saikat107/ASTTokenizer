<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.hypermedia.jpa.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.hypermedia.jpa.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.hypermedia.jpa.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult sample.hypermedia.jpa.MvcResult = this . sample.hypermedia.jpa.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isOk ( ) ) . andReturn ( ) ; java.lang.System . java.io.PrintStream . void ( sample.hypermedia.jpa.MvcResult . getResponse ( ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult sample.hypermedia.jpa.MvcResult = this . sample.hypermedia.jpa.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isFound ( ) ) . andReturn ( ) ; assertThat ( sample.hypermedia.jpa.MvcResult . getResponse ( ) . getHeaders ( STRING ) . get ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
