<METHOD_START> void ( InitializrService org.springframework.boot.cli.command.init.InitializrService ) { this . org.springframework.boot.cli.command.init.InitializrService = org.springframework.boot.cli.command.init.InitializrService ; }  <METHOD_END>
<METHOD_START> public void void ( ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest , boolean boolean )			throws java.io.IOException { ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse = this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; java.lang.String java.lang.String = ( org.springframework.boot.cli.command.init.ProjectGenerationRequest . getOutput ( ) != null ? org.springframework.boot.cli.command.init.ProjectGenerationRequest . getOutput ( ) : org.springframework.boot.cli.command.init.ProjectGenerationResponse . getFileName ( ) ) ; if ( boolean ( org.springframework.boot.cli.command.init.ProjectGenerationRequest , org.springframework.boot.cli.command.init.ProjectGenerationResponse ) ) { if ( boolean ( org.springframework.boot.cli.command.init.ProjectGenerationResponse ) ) { void ( org.springframework.boot.cli.command.init.ProjectGenerationResponse , org.springframework.boot.cli.command.init.ProjectGenerationRequest . getOutput ( ) , boolean ) ; return; } else { Log . info ( STRING + org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContentType ( ) + STRING ) ; java.lang.String = org.springframework.boot.cli.command.init.ProjectGenerationResponse . getFileName ( ) ; } } if ( java.lang.String == null ) { throw new ReportableException ( STRING + STRING + STRING ) ; } void ( org.springframework.boot.cli.command.init.ProjectGenerationResponse , java.lang.String , boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest , ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse ) { if ( org.springframework.boot.cli.command.init.ProjectGenerationRequest . isExtract ( ) ) { return true ; } if ( boolean ( org.springframework.boot.cli.command.init.ProjectGenerationResponse ) && org.springframework.boot.cli.command.init.ProjectGenerationRequest . getOutput ( ) != null && ! org.springframework.boot.cli.command.init.ProjectGenerationRequest . getOutput ( ) . contains ( STRING ) ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse ) { if ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContentType ( ) != null ) { try { return java.lang.String . boolean ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContentType ( ) . getMimeType ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse , java.lang.String java.lang.String , boolean boolean ) throws java.io.IOException { java.io.File java.io.File = ( java.lang.String != null ? new java.io.File ( java.lang.String ) : new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ) ; if ( ! java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream ( new java.io.ByteArrayInputStream ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContent ( ) ) ) ; try { void ( java.util.zip.ZipInputStream , boolean , java.io.File ) ; void ( java.io.File , STRING ) ; void ( java.io.File , STRING ) ; Log . info ( STRING + java.io.File . java.lang.String ( ) + STRING ) ; } finally { java.util.zip.ZipInputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.zip.ZipInputStream java.util.zip.ZipInputStream , boolean boolean , java.io.File java.io.File ) throws java.io.IOException { java.util.zip.ZipEntry java.util.zip.ZipEntry = java.util.zip.ZipInputStream . java.util.zip.ZipEntry ( ) ; while ( java.util.zip.ZipEntry != null ) { java.io.File java.io.File = new java.io.File ( java.io.File , java.util.zip.ZipEntry . java.lang.String ( ) ) ; if ( java.io.File . boolean ( ) && ! boolean ) { throw new ReportableException ( ( java.io.File . boolean ( ) ? STRING : STRING ) + STRING + java.io.File . java.lang.String ( ) + STRING + STRING ) ; } if ( ! java.util.zip.ZipEntry . boolean ( ) ) { FileCopyUtils . copy ( StreamUtils . nonClosing ( java.util.zip.ZipInputStream ) , new java.io.FileOutputStream ( java.io.File ) ) ; } else { java.io.File . boolean ( ) ; } java.util.zip.ZipInputStream . void ( ) ; java.util.zip.ZipEntry = java.util.zip.ZipInputStream . java.util.zip.ZipEntry ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse , java.lang.String java.lang.String , boolean boolean ) throws java.io.IOException { java.io.File java.io.File = new java.io.File ( java.lang.String ) ; if ( java.io.File . boolean ( ) ) { if ( ! boolean ) { throw new ReportableException ( STRING + java.io.File . java.lang.String ( ) + STRING + STRING ) ; } if ( ! java.io.File . boolean ( ) ) { throw new ReportableException ( STRING + java.io.File . java.lang.String ( ) ) ; } } FileCopyUtils . copy ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContent ( ) , java.io.File ) ; Log . info ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.lang.String java.lang.String ) { java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( true , false ) ; } }  <METHOD_END>
