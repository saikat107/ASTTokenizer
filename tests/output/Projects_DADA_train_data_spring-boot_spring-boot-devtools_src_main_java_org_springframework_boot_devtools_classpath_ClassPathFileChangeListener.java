<METHOD_START> void ( ApplicationEventPublisher org.springframework.boot.devtools.classpath.ApplicationEventPublisher , ClassPathRestartStrategy org.springframework.boot.devtools.classpath.ClassPathRestartStrategy , FileSystemWatcher org.springframework.boot.devtools.classpath.FileSystemWatcher ) { Assert . notNull ( org.springframework.boot.devtools.classpath.ApplicationEventPublisher , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.classpath.ClassPathRestartStrategy , STRING ) ; this . org.springframework.boot.devtools.classpath.ApplicationEventPublisher = org.springframework.boot.devtools.classpath.ApplicationEventPublisher ; this . org.springframework.boot.devtools.classpath.ClassPathRestartStrategy = org.springframework.boot.devtools.classpath.ClassPathRestartStrategy ; this . org.springframework.boot.devtools.classpath.FileSystemWatcher = org.springframework.boot.devtools.classpath.FileSystemWatcher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> ) { boolean boolean = boolean ( java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> ) ; void ( new ClassPathChangedEvent ( this , java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> , boolean ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathChangedEvent org.springframework.boot.devtools.classpath.ClassPathChangedEvent ) { this . org.springframework.boot.devtools.classpath.ApplicationEventPublisher . publishEvent ( org.springframework.boot.devtools.classpath.ClassPathChangedEvent ) ; if ( org.springframework.boot.devtools.classpath.ClassPathChangedEvent . isRestartRequired ( ) && this . org.springframework.boot.devtools.classpath.FileSystemWatcher != null ) { this . org.springframework.boot.devtools.classpath.FileSystemWatcher . stop ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> ) { if ( AgentReloader . isActive ( ) ) { return false ; } for ( ChangedFiles org.springframework.boot.devtools.classpath.ChangedFiles : java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> ) { for ( ChangedFile org.springframework.boot.devtools.classpath.ChangedFile : org.springframework.boot.devtools.classpath.ChangedFiles ) { if ( this . org.springframework.boot.devtools.classpath.ClassPathRestartStrategy . isRestartRequired ( org.springframework.boot.devtools.classpath.ChangedFile ) ) { return true ; } } } return false ; }  <METHOD_END>
