<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ; return ( WebRequest .class . boolean ( java.lang.Class<> ) || ServletRequest .class . boolean ( java.lang.Class<> ) || MultipartRequest .class . boolean ( java.lang.Class<> ) || HttpSession .class . boolean ( java.lang.Class<> ) || ( java.lang.reflect.Method != null && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) ) || java.security.Principal .class . boolean ( java.lang.Class<> ) || java.io.InputStream .class . boolean ( java.lang.Class<> ) || java.io.Reader .class . boolean ( java.lang.Class<> ) || HttpMethod .class == java.lang.Class<> || java.util.Locale .class == java.lang.Class<> || java.util.TimeZone .class == java.lang.Class<> || java.time.ZoneId .class == java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ; if ( WebRequest .class . boolean ( java.lang.Class<> ) ) { if ( ! java.lang.Class<> . boolean ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; } return org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ; } if ( ServletRequest .class . boolean ( java.lang.Class<> ) || MultipartRequest .class . boolean ( java.lang.Class<> ) ) { return java.lang.Object ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Class<> ) ; } return java.lang.Object ( java.lang.Class<> , java.lang.Object ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , HttpServletRequest .class ) ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Class<T> < T > java.lang.Class<T> ) { T T = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( java.lang.Class<T> ) ; if ( T == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; } return T ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) throws java.io.IOException { if ( HttpSession .class . boolean ( java.lang.Class<> ) ) { HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getSession ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.HttpSession != null && ! java.lang.Class<> . boolean ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; } return org.springframework.web.servlet.mvc.method.annotation.HttpSession ; } else if ( java.lang.reflect.Method != null && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) ) { java.lang.Object java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; if ( java.lang.Object != null && ! java.lang.Class<> . boolean ( java.lang.Object ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.Object ) ; } return java.lang.Object ; } else if ( java.io.InputStream .class . boolean ( java.lang.Class<> ) ) { java.io.InputStream java.io.InputStream = org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getInputStream ( ) ; if ( java.io.InputStream != null && ! java.lang.Class<> . boolean ( java.io.InputStream ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.io.InputStream ) ; } return java.io.InputStream ; } else if ( java.io.Reader .class . boolean ( java.lang.Class<> ) ) { java.io.Reader java.io.Reader = org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getReader ( ) ; if ( java.io.Reader != null && ! java.lang.Class<> . boolean ( java.io.Reader ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.io.Reader ) ; } return java.io.Reader ; } else if ( java.security.Principal .class . boolean ( java.lang.Class<> ) ) { java.security.Principal java.security.Principal = org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getUserPrincipal ( ) ; if ( java.security.Principal != null && ! java.lang.Class<> . boolean ( java.security.Principal ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.security.Principal ) ; } return java.security.Principal ; } else if ( HttpMethod .class == java.lang.Class<> ) { return HttpMethod . resolve ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getMethod ( ) ) ; } else if ( java.util.Locale .class == java.lang.Class<> ) { return RequestContextUtils . getLocale ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; } else if ( java.util.TimeZone .class == java.lang.Class<> ) { java.util.TimeZone java.util.TimeZone = RequestContextUtils . getTimeZone ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; return ( java.util.TimeZone != null ? java.util.TimeZone : java.util.TimeZone . java.util.TimeZone ( ) ) ; } else if ( java.time.ZoneId .class == java.lang.Class<> ) { java.util.TimeZone java.util.TimeZone = RequestContextUtils . getTimeZone ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; return ( java.util.TimeZone != null ? java.util.TimeZone . java.time.ZoneId ( ) : java.time.ZoneId . java.time.ZoneId ( ) ) ; } throw new java.lang.UnsupportedOperationException ( STRING + java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
