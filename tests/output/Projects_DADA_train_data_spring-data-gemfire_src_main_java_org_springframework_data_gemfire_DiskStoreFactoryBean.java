<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.DiskStore org.springframework.data.gemfire.DiskStore ( ) java.lang.Exception { return org.springframework.data.gemfire.DiskStore ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( org.springframework.data.gemfire.DiskStore != null ? org.springframework.data.gemfire.DiskStore . getClass ( ) : DiskStore .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { Assert . state ( org.springframework.data.gemfire.GemFireCache != null , java.lang.String . java.lang.String ( STRING , java.lang.String ( ) ) ) ; DiskStoreFactory org.springframework.data.gemfire.DiskStoreFactory = org.springframework.data.gemfire.GemFireCache . createDiskStoreFactory ( ) ; if ( java.lang.Boolean != null ) { org.springframework.data.gemfire.DiskStoreFactory . setAllowForceCompaction ( java.lang.Boolean ) ; } if ( java.lang.Boolean != null ) { org.springframework.data.gemfire.DiskStoreFactory . setAutoCompact ( java.lang.Boolean ) ; } if ( java.lang.Integer != null ) { org.springframework.data.gemfire.DiskStoreFactory . setCompactionThreshold ( java.lang.Integer ) ; } if ( java.lang.Float != null ) { org.springframework.data.gemfire.DiskStoreFactory . setDiskUsageCriticalPercentage ( java.lang.Float ) ; } if ( java.lang.Float != null ) { org.springframework.data.gemfire.DiskStoreFactory . setDiskUsageWarningPercentage ( java.lang.Float ) ; } if ( java.lang.Integer != null ) { org.springframework.data.gemfire.DiskStoreFactory . setMaxOplogSize ( java.lang.Integer ) ; } if ( java.lang.Integer != null ) { org.springframework.data.gemfire.DiskStoreFactory . setQueueSize ( java.lang.Integer ) ; } if ( java.lang.Integer != null ) { org.springframework.data.gemfire.DiskStoreFactory . setTimeInterval ( java.lang.Integer ) ; } if ( java.lang.Integer != null ) { org.springframework.data.gemfire.DiskStoreFactory . setWriteBufferSize ( java.lang.Integer ) ; } if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> ) ) { java.io.File [] java.io.File[] = new java.io.File [ java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> . int ( ) ] ; int [] int[] = new int [ java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> . int ( ) ] ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> . int ( ) ; int ++ ) { org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir = java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> . org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir ( int ) ; java.io.File[] [ int ] = new java.io.File ( org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir . java.lang.String ) ; int[] [ int ] = ( org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir . java.lang.Integer != null ? org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir . java.lang.Integer : DiskStoreFactory . DEFAULT_DISK_DIR_SIZE ) ; } org.springframework.data.gemfire.DiskStoreFactory . setDiskDirsAndSizes ( java.io.File[] , int[] ) ; } org.springframework.data.gemfire.DiskStore = org.springframework.data.gemfire.DiskStoreFactory . create ( java.lang.String ( ) ) ; Assert . notNull ( org.springframework.data.gemfire.DiskStore , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.DiskStore . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( GemFireCache org.springframework.data.gemfire.GemFireCache ) { this . org.springframework.data.gemfire.GemFireCache = org.springframework.data.gemfire.GemFireCache ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { void ( java.lang.Integer ) ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.lang.Integer java.lang.Integer ) { Assert . isTrue ( java.lang.Integer == null || ( java.lang.Integer >= NUMBER && java.lang.Integer <= NUMBER ) , java.lang.String . java.lang.String ( STRING , this . java.lang.String , java.lang.Integer ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> < org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir > java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> ) { this . java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> = java.util.List<org.springframework.data.gemfire.DiskStoreFactoryBean.DiskDir> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Float java.lang.Float ) { this . java.lang.Float = java.lang.Float ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Float java.lang.Float ) { this . java.lang.Float = java.lang.Float ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> final java.lang.String java.lang.String ( ) { return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : DiskStoreFactory . DEFAULT_DISK_STORE_NAME ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.Integer = null ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . java.lang.Integer = int ; }  <METHOD_END>
