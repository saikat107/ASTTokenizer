<METHOD_START> public void ( java.lang.String java.lang.String , int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl ( ) { return this . children [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl ( ) { return this . children [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> public final java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( NUMBER ) . toStringAST ( ) ) ; for ( int int = NUMBER ; int < getChildCount ( ) ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( int ) . toStringAST ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = org.springframework.expression.spel.ast.SpelNodeImpl ( ) ; SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = org.springframework.expression.spel.ast.SpelNodeImpl ( ) ; if ( ! org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) || ! org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) ) { return false ; } java.lang.String java.lang.String = left . exitTypeDescriptor ; java.lang.String java.lang.String = right . exitTypeDescriptor ; org.springframework.expression.spel.ast.Operator.DescriptorComparison org.springframework.expression.spel.ast.Operator.DescriptorComparison = org.springframework.expression.spel.ast.Operator.DescriptorComparison . org.springframework.expression.spel.ast.Operator.DescriptorComparison ( java.lang.String , java.lang.String , this . java.lang.String , this . java.lang.String ) ; return ( org.springframework.expression.spel.ast.Operator.DescriptorComparison . boolean && org.springframework.expression.spel.ast.Operator.DescriptorComparison . boolean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow , int int , int int ) { java.lang.String java.lang.String = org.springframework.expression.spel.ast.SpelNodeImpl ( ) . exitTypeDescriptor ; java.lang.String java.lang.String = org.springframework.expression.spel.ast.SpelNodeImpl ( ) . exitTypeDescriptor ; boolean boolean = ! CodeFlow . isPrimitive ( java.lang.String ) ; boolean boolean = ! CodeFlow . isPrimitive ( java.lang.String ) ; org.springframework.expression.spel.ast.Operator.DescriptorComparison org.springframework.expression.spel.ast.Operator.DescriptorComparison = org.springframework.expression.spel.ast.Operator.DescriptorComparison . org.springframework.expression.spel.ast.Operator.DescriptorComparison ( java.lang.String , java.lang.String , this . java.lang.String , this . java.lang.String ) ; char char = org.springframework.expression.spel.ast.Operator.DescriptorComparison . char ; org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; org.springframework.expression.spel.ast.SpelNodeImpl ( ) . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; if ( boolean ) { CodeFlow . insertUnboxInsns ( org.springframework.expression.spel.ast.MethodVisitor , char , java.lang.String ) ; } org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; org.springframework.expression.spel.ast.SpelNodeImpl ( ) . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; if ( boolean ) { CodeFlow . insertUnboxInsns ( org.springframework.expression.spel.ast.MethodVisitor , char , java.lang.String ) ; } Label org.springframework.expression.spel.ast.Label = new Label ( ) ; Label org.springframework.expression.spel.ast.Label = new Label ( ) ; if ( char == 'D' ) { org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( DCMPG ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( int , org.springframework.expression.spel.ast.Label ) ; } else if ( char == 'F' ) { org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( FCMPG ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( int , org.springframework.expression.spel.ast.Label ) ; } else if ( char == 'J' ) { org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( LCMP ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( int , org.springframework.expression.spel.ast.Label ) ; } else if ( char == 'I' ) { org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( int , org.springframework.expression.spel.ast.Label ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.String ) ; } org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( ICONST_1 ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( GOTO , org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( ICONST_0 ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( EvaluationContext org.springframework.expression.spel.ast.EvaluationContext , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Number && java.lang.Object instanceof java.lang.Number ) { java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; if ( java.lang.Number instanceof java.math.BigDecimal || java.lang.Number instanceof java.math.BigDecimal ) { java.math.BigDecimal java.math.BigDecimal = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigDecimal .class ) ; java.math.BigDecimal java.math.BigDecimal = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigDecimal .class ) ; return ( java.math.BigDecimal == null ? java.math.BigDecimal == null : java.math.BigDecimal . int ( java.math.BigDecimal ) == NUMBER ) ; } else if ( java.lang.Number instanceof java.lang.Double || java.lang.Number instanceof java.lang.Double ) { return ( java.lang.Number . double ( ) == java.lang.Number . double ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Float || java.lang.Number instanceof java.lang.Float ) { return ( java.lang.Number . float ( ) == java.lang.Number . float ( ) ) ; } else if ( java.lang.Number instanceof java.math.BigInteger || java.lang.Number instanceof java.math.BigInteger ) { java.math.BigInteger java.math.BigInteger = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigInteger .class ) ; java.math.BigInteger java.math.BigInteger = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigInteger .class ) ; return ( java.math.BigInteger == null ? java.math.BigInteger == null : java.math.BigInteger . int ( java.math.BigInteger ) == NUMBER ) ; } else if ( java.lang.Number instanceof java.lang.Long || java.lang.Number instanceof java.lang.Long ) { return ( java.lang.Number . long ( ) == java.lang.Number . long ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Integer || java.lang.Number instanceof java.lang.Integer ) { return ( java.lang.Number . int ( ) == java.lang.Number . int ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Short || java.lang.Number instanceof java.lang.Short ) { return ( java.lang.Number . short ( ) == java.lang.Number . short ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Byte || java.lang.Number instanceof java.lang.Byte ) { return ( java.lang.Number . byte ( ) == java.lang.Number . byte ( ) ) ; } else { return ( java.lang.Number . double ( ) == java.lang.Number . double ( ) ) ; } } if ( java.lang.Object instanceof java.lang.CharSequence && java.lang.Object instanceof java.lang.CharSequence ) { return java.lang.Object . java.lang.String ( ) . boolean ( java.lang.Object . java.lang.String ( ) ) ; } if ( ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { return true ; } if ( java.lang.Object instanceof java.lang.Comparable && java.lang.Object instanceof java.lang.Comparable ) { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . determineCommonAncestor ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( java.lang.Class<> != null && java.lang.Comparable .class . boolean ( java.lang.Class<> ) ) { return ( org.springframework.expression.spel.ast.EvaluationContext . getTypeComparator ( ) . compare ( java.lang.Object , java.lang.Object ) == NUMBER ) ; } } return false ; }  <METHOD_END>
<METHOD_START> private void ( boolean boolean , boolean boolean , char char ) { this . boolean = boolean ; this . boolean = boolean ; this . char = char ; }  <METHOD_END>
<METHOD_START> public static org.springframework.expression.spel.ast.Operator.DescriptorComparison org.springframework.expression.spel.ast.Operator.DescriptorComparison ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ; java.lang.String java.lang.String = java.lang.String ; boolean boolean = CodeFlow . isPrimitiveOrUnboxableSupportedNumberOrBoolean ( java.lang.String ) ; boolean boolean = CodeFlow . isPrimitiveOrUnboxableSupportedNumberOrBoolean ( java.lang.String ) ; if ( ! boolean && ! java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = java.lang.String ; boolean = CodeFlow . isPrimitiveOrUnboxableSupportedNumberOrBoolean ( java.lang.String ) ; } if ( ! boolean && ! java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = java.lang.String ; boolean = CodeFlow . isPrimitiveOrUnboxableSupportedNumberOrBoolean ( java.lang.String ) ; } if ( boolean && boolean ) { if ( CodeFlow . areBoxingCompatible ( java.lang.String , java.lang.String ) ) { return new org.springframework.expression.spel.ast.Operator.DescriptorComparison ( true , true , CodeFlow . toPrimitiveTargetDesc ( java.lang.String ) ) ; } else { return org.springframework.expression.spel.ast.Operator.DescriptorComparison . org.springframework.expression.spel.ast.Operator.DescriptorComparison ; } } else { return org.springframework.expression.spel.ast.Operator.DescriptorComparison . org.springframework.expression.spel.ast.Operator.DescriptorComparison ; } }  <METHOD_END>
