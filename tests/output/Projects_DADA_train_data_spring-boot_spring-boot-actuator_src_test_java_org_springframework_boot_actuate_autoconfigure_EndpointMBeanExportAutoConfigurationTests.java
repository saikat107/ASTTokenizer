<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfigurationTests.TestConfiguration .class , JmxAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointMBeanExportAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ) . isNotNull ( ) ; MBeanExporter org.springframework.boot.actuate.autoconfigure.MBeanExporter = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.MBeanExporter . getServer ( ) . queryNames ( javax.management.ObjectName ( STRING , STRING , this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext ) , null ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfigurationTests.TestConfiguration .class , JmxAutoConfiguration .class , org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfigurationTests.ManagedEndpoint .class , EndpointMBeanExportAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ) . isNotNull ( ) ; MBeanExporter org.springframework.boot.actuate.autoconfigure.MBeanExporter = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.MBeanExporter . getServer ( ) . queryNames ( javax.management.ObjectName ( STRING , STRING , this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext ) , null ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfigurationTests.TestConfiguration .class , JmxAutoConfiguration .class , org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfigurationTests.NestedInManagedEndpoint .class , EndpointMBeanExportAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ) . isNotNull ( ) ; MBeanExporter org.springframework.boot.actuate.autoconfigure.MBeanExporter = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.MBeanExporter . getServer ( ) . queryNames ( javax.management.ObjectName ( STRING , STRING , this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext ) , null ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { MockEnvironment org.springframework.boot.actuate.autoconfigure.MockEnvironment = new MockEnvironment ( ) ; org.springframework.boot.actuate.autoconfigure.MockEnvironment . setProperty ( STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.boot.actuate.autoconfigure.MockEnvironment ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( JmxAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointMBeanExportAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.IntrospectionException , javax.management.InstanceNotFoundException , javax.management.MalformedObjectNameException , javax.management.ReflectionException { MockEnvironment org.springframework.boot.actuate.autoconfigure.MockEnvironment = new MockEnvironment ( ) ; org.springframework.boot.actuate.autoconfigure.MockEnvironment . setProperty ( STRING , STRING ) ; org.springframework.boot.actuate.autoconfigure.MockEnvironment . setProperty ( STRING , STRING ) ; org.springframework.boot.actuate.autoconfigure.MockEnvironment . setProperty ( STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.boot.actuate.autoconfigure.MockEnvironment ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( JmxAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointMBeanExportAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ; MBeanExporter org.springframework.boot.actuate.autoconfigure.MBeanExporter = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.MBeanExporter . getServer ( ) . getMBeanInfo ( ObjectNameManager . getInstance ( javax.management.ObjectName ( STRING , STRING , this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext ) . toString ( ) + STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.IntrospectionException , javax.management.InstanceNotFoundException , javax.management.MalformedObjectNameException , javax.management.ReflectionException { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( JmxAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointMBeanExportAutoConfiguration .class ) ; AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( JmxAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointMBeanExportAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . setParent ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( java.lang.String java.lang.String , java.lang.String java.lang.String , ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext ) throws javax.management.MalformedObjectNameException { java.lang.String java.lang.String = STRING ; if ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getParent ( ) != null ) { java.lang.String = java.lang.String + STRING ; } if ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getEnvironment ( ) . getProperty ( STRING , java.lang.Boolean .class , false ) ) { java.lang.String = java.lang.String + STRING + ObjectUtils . getIdentityHexString ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( java.lang.String ) ) ; } if ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getParent ( ) != null ) { return ObjectNameManager . getInstance ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String , java.lang.String , ObjectUtils . getIdentityHexString ( org.springframework.boot.actuate.autoconfigure.ApplicationContext ) ) ) ; } return ObjectNameManager . getInstance ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING , true ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.Endpoint<java.lang.Boolean> < java.lang.Boolean > org.springframework.boot.actuate.autoconfigure.Endpoint<java.lang.Boolean> ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfigurationTests.NestedInManagedEndpoint.Nested ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING , true ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { return true ; }  <METHOD_END>
