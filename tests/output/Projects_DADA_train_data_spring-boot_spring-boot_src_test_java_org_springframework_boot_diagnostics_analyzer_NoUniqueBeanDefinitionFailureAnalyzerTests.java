<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.FieldConsumer .class ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.FieldConsumer .class . java.lang.String ( ) + STRING ) ; void ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.MethodConsumer .class ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.MethodConsumer .class . java.lang.String ( ) + STRING ) ; void ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ConstructorConsumer .class ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ConstructorConsumer .class . java.lang.String ( ) + STRING ) ; void ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ObjectProviderMethodConsumer .class ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ObjectProviderMethodConsumer .class . java.lang.String ( ) + STRING ) ; void ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.XmlConsumer .class ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( STRING + TestBeanConsumer .class . java.lang.String ( ) + STRING ) ; void ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ObjectProviderConstructorConsumer .class ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ObjectProviderConstructorConsumer .class . java.lang.String ( ) + STRING ) ; void ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.diagnostics.analyzer.BeanCreationException org.springframework.boot.diagnostics.analyzer.BeanCreationException ( java.lang.Class<?> < ? > java.lang.Class<?> ) { AnnotationConfigApplicationContext org.springframework.boot.diagnostics.analyzer.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.diagnostics.analyzer.AnnotationConfigApplicationContext . register ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.DuplicateBeansProducer .class , java.lang.Class<> ) ; org.springframework.boot.diagnostics.analyzer.AnnotationConfigApplicationContext . setParent ( new AnnotationConfigApplicationContext ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ParentProducer .class ) ) ; try { org.springframework.boot.diagnostics.analyzer.AnnotationConfigApplicationContext . refresh ( ) ; return null ; } catch ( BeanCreationException org.springframework.boot.diagnostics.analyzer.BeanCreationException ) { this . org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer . setBeanFactory ( org.springframework.boot.diagnostics.analyzer.AnnotationConfigApplicationContext . getBeanFactory ( ) ) ; return org.springframework.boot.diagnostics.analyzer.BeanCreationException ; } finally { org.springframework.boot.diagnostics.analyzer.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.diagnostics.analyzer.FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( BeanCreationException org.springframework.boot.diagnostics.analyzer.BeanCreationException ) { return this . org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer . analyze ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ) ; }  <METHOD_END>
<METHOD_START> private void void ( FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis ) { assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.DuplicateBeansProducer .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.DuplicateBeansProducer .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( STRING + org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.ParentProducer .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.diagnostics.analyzer.TestBean org.springframework.boot.diagnostics.analyzer.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.diagnostics.analyzer.TestBean org.springframework.boot.diagnostics.analyzer.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.diagnostics.analyzer.TestBean org.springframework.boot.diagnostics.analyzer.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> void ( ObjectProvider < TestBean > org.springframework.boot.diagnostics.analyzer.ObjectProvider<org.springframework.boot.diagnostics.analyzer.TestBean> ) { org.springframework.boot.diagnostics.analyzer.ObjectProvider<org.springframework.boot.diagnostics.analyzer.TestBean> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> void ( TestBean org.springframework.boot.diagnostics.analyzer.TestBean ) {		}  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( TestBean org.springframework.boot.diagnostics.analyzer.TestBean ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( ObjectProvider < TestBean > org.springframework.boot.diagnostics.analyzer.ObjectProvider<org.springframework.boot.diagnostics.analyzer.TestBean> ) { org.springframework.boot.diagnostics.analyzer.ObjectProvider<org.springframework.boot.diagnostics.analyzer.TestBean> . getIfAvailable ( ) ; return STRING ; }  <METHOD_END>
