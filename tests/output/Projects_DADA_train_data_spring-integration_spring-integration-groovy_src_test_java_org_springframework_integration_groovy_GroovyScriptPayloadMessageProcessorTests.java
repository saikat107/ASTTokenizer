<METHOD_START> @ Test @ Repeat ( NUMBER ) public void void ( ) java.lang.Exception { int int = java.util.concurrent.atomic.AtomicInteger . int ( ) ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setHeader ( STRING + int , STRING ) . build ( ) ; org.springframework.integration.groovy.GroovyCommandMessageProcessor = new GroovyCommandMessageProcessor ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.GroovyCommandMessageProcessor . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.groovy.GroovyCommandMessageProcessor = new GroovyCommandMessageProcessor ( ) ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.GroovyCommandMessageProcessor . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.Object = org.springframework.integration.groovy.GroovyCommandMessageProcessor . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; ScriptVariableGenerator org.springframework.integration.groovy.ScriptVariableGenerator = new DefaultScriptVariableGenerator ( java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ; MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyCommandMessageProcessor ( org.springframework.integration.groovy.ScriptVariableGenerator ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Binding org.springframework.integration.groovy.Binding = new Binding ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.groovy.GroovyCommandMessageProcessor = new GroovyCommandMessageProcessor ( org.springframework.integration.groovy.Binding ) ; try { org.springframework.integration.groovy.GroovyCommandMessageProcessor . processMessage ( org.springframework.integration.groovy.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { Assert . assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; Binding org.springframework.integration.groovy.Binding = new Binding ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { try { return super. getVariable ( java.lang.String ) ; } catch ( MissingPropertyException org.springframework.integration.groovy.MissingPropertyException ) { } return java.lang.String ; } } ; ScriptVariableGenerator org.springframework.integration.groovy.ScriptVariableGenerator = new DefaultScriptVariableGenerator ( java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.groovy.GroovyCommandMessageProcessor = new GroovyCommandMessageProcessor ( org.springframework.integration.groovy.Binding , org.springframework.integration.groovy.ScriptVariableGenerator ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.GroovyCommandMessageProcessor . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { try { return super. getVariable ( java.lang.String ) ; } catch ( MissingPropertyException org.springframework.integration.groovy.MissingPropertyException ) { } return java.lang.String ; }  <METHOD_END>
