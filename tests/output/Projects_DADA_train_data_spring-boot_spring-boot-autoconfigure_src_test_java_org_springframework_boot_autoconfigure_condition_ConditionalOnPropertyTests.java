<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MultiplePropertiesRequiredConfiguration .class , STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MultiplePropertiesRequiredConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MultiplePropertiesRequiredConfiguration .class , STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MultiplePropertiesRequiredConfiguration .class , STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.RelaxedPropertiesRequiredConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.RelaxedPropertiesRequiredConfigurationWithShortPrefix .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.NonRelaxedPropertiesRequiredConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.EnabledIfNotConfiguredOtherwiseConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.EnabledIfNotConfiguredOtherwiseConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.EnabledIfNotConfiguredOtherwiseConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.DisabledIfNotConfiguredOtherwiseConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.DisabledIfNotConfiguredOtherwiseConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.DisabledIfNotConfiguredOtherwiseConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.SimpleValueConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.SimpleValueConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.DefaultValueConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.DefaultValueConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.DefaultValueConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.PrefixValueConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.PrefixValueConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.StrictNameConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.StrictNameConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MultiValuesConfig .class , STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MultiValuesConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.ValueAttribute .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectCause ( hasMessage ( containsString ( STRING + STRING ) ) ) ; void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.NoNameOrValueAttribute .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectCause ( hasMessage ( containsString ( STRING + STRING ) ) ) ; void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.NameAndValueAttribute .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MetaAnnotation .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MetaAnnotation .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MetaAnnotationAndDirectAnnotation .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MetaAnnotationAndDirectAnnotation .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MetaAnnotationAndDirectAnnotation .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.condition.ConditionalOnPropertyTests.MetaAnnotationAndDirectAnnotation .class , STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; this . org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
