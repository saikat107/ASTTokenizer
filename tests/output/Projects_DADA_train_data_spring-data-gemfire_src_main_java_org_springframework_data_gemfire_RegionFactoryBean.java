<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; org.springframework.data.gemfire.RegionFactory<K,V> ( getRegion ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING } ) protected org.springframework.data.gemfire.Region<K,V> < K , V > org.springframework.data.gemfire.Region<K,V> ( GemFireCache org.springframework.data.gemfire.GemFireCache , java.lang.String java.lang.String ) throws java.lang.Exception { Assert . isTrue ( org.springframework.data.gemfire.GemFireCache instanceof Cache , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.GemFireCache ) ) ; Cache org.springframework.data.gemfire.Cache = ( Cache ) org.springframework.data.gemfire.GemFireCache ; RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> = org.springframework.data.gemfire.RegionFactory<K,V> ( org.springframework.data.gemfire.Cache ) ; for ( AsyncEventQueue org.springframework.data.gemfire.AsyncEventQueue : ArrayUtils . nullSafeArray ( org.springframework.data.gemfire.AsyncEventQueue[] , AsyncEventQueue .class ) ) { org.springframework.data.gemfire.RegionFactory<K,V> . addAsyncEventQueueId ( org.springframework.data.gemfire.AsyncEventQueue . getId ( ) ) ; } for ( CacheListener < K , V > org.springframework.data.gemfire.CacheListener<K,V> : ArrayUtils . nullSafeArray ( org.springframework.data.gemfire.CacheListener<K,V>[] , CacheListener .class ) ) { org.springframework.data.gemfire.RegionFactory<K,V> . addCacheListener ( org.springframework.data.gemfire.CacheListener<K,V> ) ; } if ( org.springframework.data.gemfire.CacheLoader<K,V> != null ) { org.springframework.data.gemfire.RegionFactory<K,V> . setCacheLoader ( org.springframework.data.gemfire.CacheLoader<K,V> ) ; } if ( org.springframework.data.gemfire.CacheWriter<K,V> != null ) { org.springframework.data.gemfire.RegionFactory<K,V> . setCacheWriter ( org.springframework.data.gemfire.CacheWriter<K,V> ) ; } for ( GatewaySender org.springframework.data.gemfire.GatewaySender : ArrayUtils . nullSafeArray ( org.springframework.data.gemfire.GatewaySender[] , GatewaySender .class ) ) { org.springframework.data.gemfire.RegionFactory<K,V> . addGatewaySenderId ( org.springframework.data.gemfire.GatewaySender . getId ( ) ) ; } void ( org.springframework.data.gemfire.RegionFactory<K,V> , java.lang.Boolean , org.springframework.data.gemfire.DataPolicy ) ; if ( boolean ( ) ) { org.springframework.data.gemfire.RegionFactory<K,V> . setDiskStoreName ( java.lang.String ) ; } if ( org.springframework.data.gemfire.EvictionAttributes != null ) { org.springframework.data.gemfire.RegionFactory<K,V> . setEvictionAttributes ( org.springframework.data.gemfire.EvictionAttributes ) ; } if ( java.lang.Class<K> != null ) { org.springframework.data.gemfire.RegionFactory<K,V> . setKeyConstraint ( java.lang.Class<K> ) ; } if ( org.springframework.data.gemfire.Scope != null ) { org.springframework.data.gemfire.RegionFactory<K,V> . setScope ( org.springframework.data.gemfire.Scope ) ; } if ( java.lang.Class<V> != null ) { org.springframework.data.gemfire.RegionFactory<K,V> . setValueConstraint ( java.lang.Class<V> ) ; } if ( org.springframework.data.gemfire.RegionAttributes<K,V> != null ) { Assert . state ( ! org.springframework.data.gemfire.RegionAttributes<K,V> . isLockGrantor ( ) || ( org.springframework.data.gemfire.Scope == null ) || org.springframework.data.gemfire.Scope . isGlobal ( ) , STRING ) ; } org.springframework.data.gemfire.RegionFactory<K,V> ( org.springframework.data.gemfire.RegionFactory<K,V> ) ; Region < K , V > org.springframework.data.gemfire.Region<K,V> = ( getParent ( ) != null ? org.springframework.data.gemfire.RegionFactory<K,V> . createSubregion ( getParent ( ) , java.lang.String ) : org.springframework.data.gemfire.RegionFactory<K,V> . create ( java.lang.String ) ) ; if ( org.springframework.data.gemfire.Log . isInfoEnabled ( ) ) { if ( getParent ( ) != null ) { org.springframework.data.gemfire.Log . info ( java.lang.String . java.lang.String ( STRING , java.lang.String , getParent ( ) . getName ( ) ) ) ; } else { org.springframework.data.gemfire.Log . info ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } } if ( org.springframework.data.gemfire.Resource != null ) { org.springframework.data.gemfire.Region<K,V> . loadSnapshot ( org.springframework.data.gemfire.Resource . getInputStream ( ) ) ; } if ( org.springframework.data.gemfire.RegionAttributes<K,V> != null && org.springframework.data.gemfire.RegionAttributes<K,V> . isLockGrantor ( ) ) { org.springframework.data.gemfire.Region<K,V> . becomeLockGrantor ( ) ; } return org.springframework.data.gemfire.Region<K,V> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.RegionFactory<K,V> ( Cache org.springframework.data.gemfire.Cache ) { if ( org.springframework.data.gemfire.RegionShortcut != null ) { RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> = org.springframework.data.gemfire.RegionFactory ( org.springframework.data.gemfire.Cache . createRegionFactory ( org.springframework.data.gemfire.RegionShortcut ) , org.springframework.data.gemfire.RegionAttributes<K,V> ) ; void ( org.springframework.data.gemfire.DataPolicy ( org.springframework.data.gemfire.RegionFactory<K,V> ) ) ; return org.springframework.data.gemfire.RegionFactory<K,V> ; } else if ( org.springframework.data.gemfire.RegionAttributes<K,V> != null ) { return org.springframework.data.gemfire.Cache . createRegionFactory ( org.springframework.data.gemfire.RegionAttributes<K,V> ) ; } else { return org.springframework.data.gemfire.Cache . createRegionFactory ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) org.springframework.data.gemfire.DataPolicy org.springframework.data.gemfire.DataPolicy ( RegionFactory org.springframework.data.gemfire.RegionFactory ) { return ( ( RegionAttributes ) java.lang.Object ( org.springframework.data.gemfire.AttributesFactory ( org.springframework.data.gemfire.RegionFactory , STRING , AttributesFactory .class ) , STRING , null ) ) . getDataPolicy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String , java.lang.Class<T> ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( T ) ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > org.springframework.data.gemfire.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.RegionFactory<K,V> ( RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> , RegionAttributes < K , V > org.springframework.data.gemfire.RegionAttributes<K,V> ) { if ( org.springframework.data.gemfire.RegionAttributes<K,V> != null ) { void ( org.springframework.data.gemfire.RegionAttributes<K,V> ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setCloningEnabled ( org.springframework.data.gemfire.RegionAttributes<K,V> . getCloningEnabled ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setCompressor ( org.springframework.data.gemfire.RegionAttributes<K,V> . getCompressor ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setConcurrencyChecksEnabled ( org.springframework.data.gemfire.RegionAttributes<K,V> . getConcurrencyChecksEnabled ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setConcurrencyLevel ( org.springframework.data.gemfire.RegionAttributes<K,V> . getConcurrencyLevel ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setCustomEntryIdleTimeout ( org.springframework.data.gemfire.RegionAttributes<K,V> . getCustomEntryIdleTimeout ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setCustomEntryTimeToLive ( org.springframework.data.gemfire.RegionAttributes<K,V> . getCustomEntryTimeToLive ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setDiskSynchronous ( org.springframework.data.gemfire.RegionAttributes<K,V> . isDiskSynchronous ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setEnableAsyncConflation ( org.springframework.data.gemfire.RegionAttributes<K,V> . getEnableAsyncConflation ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setEnableSubscriptionConflation ( org.springframework.data.gemfire.RegionAttributes<K,V> . getEnableSubscriptionConflation ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setEntryIdleTimeout ( org.springframework.data.gemfire.RegionAttributes<K,V> . getEntryIdleTimeout ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setEntryTimeToLive ( org.springframework.data.gemfire.RegionAttributes<K,V> . getEntryTimeToLive ( ) ) ; if ( boolean ( org.springframework.data.gemfire.RegionAttributes<K,V> ) ) { org.springframework.data.gemfire.RegionFactory<K,V> . setEvictionAttributes ( org.springframework.data.gemfire.RegionAttributes<K,V> . getEvictionAttributes ( ) ) ; } org.springframework.data.gemfire.RegionFactory<K,V> . setIgnoreJTA ( org.springframework.data.gemfire.RegionAttributes<K,V> . getIgnoreJTA ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setIndexMaintenanceSynchronous ( org.springframework.data.gemfire.RegionAttributes<K,V> . getIndexMaintenanceSynchronous ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setInitialCapacity ( org.springframework.data.gemfire.RegionAttributes<K,V> . getInitialCapacity ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setKeyConstraint ( org.springframework.data.gemfire.RegionAttributes<K,V> . getKeyConstraint ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setLoadFactor ( org.springframework.data.gemfire.RegionAttributes<K,V> . getLoadFactor ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setLockGrantor ( org.springframework.data.gemfire.RegionAttributes<K,V> . isLockGrantor ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setMembershipAttributes ( org.springframework.data.gemfire.RegionAttributes<K,V> . getMembershipAttributes ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setMulticastEnabled ( org.springframework.data.gemfire.RegionAttributes<K,V> . getMulticastEnabled ( ) ) ; void ( org.springframework.data.gemfire.RegionFactory<K,V> , org.springframework.data.gemfire.RegionAttributes<K,V> ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setPoolName ( org.springframework.data.gemfire.RegionAttributes<K,V> . getPoolName ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setRegionIdleTimeout ( org.springframework.data.gemfire.RegionAttributes<K,V> . getRegionIdleTimeout ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setRegionTimeToLive ( org.springframework.data.gemfire.RegionAttributes<K,V> . getRegionTimeToLive ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setStatisticsEnabled ( org.springframework.data.gemfire.RegionAttributes<K,V> . getStatisticsEnabled ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setSubscriptionAttributes ( org.springframework.data.gemfire.RegionAttributes<K,V> . getSubscriptionAttributes ( ) ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setValueConstraint ( org.springframework.data.gemfire.RegionAttributes<K,V> . getValueConstraint ( ) ) ; } return org.springframework.data.gemfire.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( final RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> , RegionAttributes < K , V > org.springframework.data.gemfire.RegionAttributes<K,V> ) { if ( org.springframework.data.gemfire.RegionAttributes<K,V> . getPartitionAttributes ( ) != null ) { PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.RegionAttributes<K,V> . getPartitionAttributes ( ) ; PartitionAttributesFactory org.springframework.data.gemfire.PartitionAttributesFactory = new PartitionAttributesFactory ( org.springframework.data.gemfire.PartitionAttributes ) ; RegionShortcutWrapper org.springframework.data.gemfire.RegionShortcutWrapper = RegionShortcutWrapper . valueOf ( org.springframework.data.gemfire.RegionShortcut ) ; if ( org.springframework.data.gemfire.RegionShortcutWrapper . isRedundant ( ) && org.springframework.data.gemfire.PartitionAttributes . getRedundantCopies ( ) == NUMBER ) { org.springframework.data.gemfire.PartitionAttributesFactory . setRedundantCopies ( NUMBER ) ; } if ( org.springframework.data.gemfire.RegionShortcutWrapper . isProxy ( ) ) { org.springframework.data.gemfire.PartitionAttributesFactory . setLocalMaxMemory ( NUMBER ) ; } org.springframework.data.gemfire.RegionFactory<K,V> . setPartitionAttributes ( org.springframework.data.gemfire.PartitionAttributesFactory . create ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void void ( RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { org . org.apache . org.apache . org.apache . AttributesFactory . validateAttributes ( org.springframework.data.gemfire.RegionAttributes ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { return ( org.springframework.data.gemfire.RegionAttributes instanceof UserSpecifiedRegionAttributes && ( ( UserSpecifiedRegionAttributes ) org.springframework.data.gemfire.RegionAttributes ) . hasEvictionAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { boolean boolean = ( java.lang.String != null ) ; boolean &= ( org.springframework.data.gemfire.DataPolicy ( ) . withPersistence ( ) || ( org.springframework.data.gemfire.RegionAttributes ( ) != null && org.springframework.data.gemfire.RegionAttributes ( ) . getEvictionAttributes ( ) != null && EvictionAction . OVERFLOW_TO_DISK . equals ( org.springframework.data.gemfire.RegionAttributes<K,V> . getEvictionAttributes ( ) . getAction ( ) ) ) ) ; return boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return ( java.lang.Boolean == null ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( DataPolicy org.springframework.data.gemfire.DataPolicy ) { if ( org.springframework.data.gemfire.DataPolicy . withPersistence ( ) ) { Assert . isTrue ( boolean ( ) || boolean ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.DataPolicy ) ) ; } else { Assert . isTrue ( boolean ( ) || boolean ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.DataPolicy ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.RegionFactory<K,V> ( RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> ) { return org.springframework.data.gemfire.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.Region<K,V> < K , V > org.springframework.data.gemfire.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.Region<K,V> ) { return org.springframework.data.gemfire.Region<K,V> ; }  <METHOD_END>
<METHOD_START> protected void void ( RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> , java.lang.Boolean java.lang.Boolean , DataPolicy org.springframework.data.gemfire.DataPolicy ) { if ( org.springframework.data.gemfire.DataPolicy != null ) { void ( org.springframework.data.gemfire.DataPolicy ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; void ( org.springframework.data.gemfire.DataPolicy ) ; } else { void ( org.springframework.data.gemfire.RegionFactory<K,V> , java.lang.Boolean , ( java.lang.String ) null ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> , java.lang.Boolean java.lang.Boolean , java.lang.String java.lang.String ) { if ( java.lang.String != null ) { DataPolicy org.springframework.data.gemfire.DataPolicy = new DataPolicyConverter ( ) . convert ( java.lang.String ) ; Assert . notNull ( org.springframework.data.gemfire.DataPolicy , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; void ( org.springframework.data.gemfire.DataPolicy ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; void ( org.springframework.data.gemfire.DataPolicy ) ; } else { DataPolicy org.springframework.data.gemfire.DataPolicy = org.springframework.data.gemfire.DataPolicy ( org.springframework.data.gemfire.RegionAttributes ( ) , DataPolicy . DEFAULT ) ; DataPolicy org.springframework.data.gemfire.DataPolicy = ( boolean ( ) && DataPolicy . DEFAULT . equals ( org.springframework.data.gemfire.DataPolicy ) ? DataPolicy . PERSISTENT_REPLICATE : org.springframework.data.gemfire.DataPolicy ) ; void ( org.springframework.data.gemfire.DataPolicy ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; void ( org.springframework.data.gemfire.DataPolicy ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.DataPolicy org.springframework.data.gemfire.DataPolicy ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes , final DataPolicy org.springframework.data.gemfire.DataPolicy ) { return ( org.springframework.data.gemfire.RegionAttributes != null ? org.springframework.data.gemfire.RegionAttributes . getDataPolicy ( ) : org.springframework.data.gemfire.DataPolicy ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { Region < K , V > org.springframework.data.gemfire.Region<K,V> = getObject ( ) ; if ( org.springframework.data.gemfire.Region<K,V> != null ) { if ( boolean ) { if ( ! org.springframework.data.gemfire.Region<K,V> . getRegionService ( ) . isClosed ( ) ) { try { org.springframework.data.gemfire.Region<K,V> . close ( ) ; } catch ( java.lang.Exception java.lang.Exception ) {					} } } if ( boolean ) { org.springframework.data.gemfire.Region<K,V> . destroyRegion ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( AsyncEventQueue [] org.springframework.data.gemfire.AsyncEventQueue[] ) { this . org.springframework.data.gemfire.AsyncEventQueue[] = org.springframework.data.gemfire.AsyncEventQueue[] ; }  <METHOD_END>
<METHOD_START> public void void ( RegionAttributes < K , V > org.springframework.data.gemfire.RegionAttributes<K,V> ) { this . org.springframework.data.gemfire.RegionAttributes<K,V> = org.springframework.data.gemfire.RegionAttributes<K,V> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.RegionAttributes org.springframework.data.gemfire.RegionAttributes ( ) { Region < K , V > org.springframework.data.gemfire.Region<K,V> = getRegion ( ) ; return ( org.springframework.data.gemfire.Region<K,V> != null ? org.springframework.data.gemfire.Region<K,V> . getAttributes ( ) : org.springframework.data.gemfire.RegionAttributes<K,V> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.gemfire.CacheListener<K,V> < K , V > [] org.springframework.data.gemfire.CacheListener<K,V>[] ) { this . org.springframework.data.gemfire.CacheListener<K,V>[] = org.springframework.data.gemfire.CacheListener<K,V>[] ; }  <METHOD_END>
<METHOD_START> public void void ( CacheLoader < K , V > org.springframework.data.gemfire.CacheLoader<K,V> ) { this . org.springframework.data.gemfire.CacheLoader<K,V> = org.springframework.data.gemfire.CacheLoader<K,V> ; }  <METHOD_END>
<METHOD_START> public void void ( CacheWriter < K , V > org.springframework.data.gemfire.CacheWriter<K,V> ) { this . org.springframework.data.gemfire.CacheWriter<K,V> = org.springframework.data.gemfire.CacheWriter<K,V> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( DataPolicy org.springframework.data.gemfire.DataPolicy ) { this . org.springframework.data.gemfire.DataPolicy = org.springframework.data.gemfire.DataPolicy ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( java.lang.String java.lang.String ) { void ( new DataPolicyConverter ( ) . convert ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.DataPolicy org.springframework.data.gemfire.DataPolicy ( ) { Assert . state ( org.springframework.data.gemfire.DataPolicy != null , STRING ) ; return org.springframework.data.gemfire.DataPolicy ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( EvictionAttributes org.springframework.data.gemfire.EvictionAttributes ) { this . org.springframework.data.gemfire.EvictionAttributes = org.springframework.data.gemfire.EvictionAttributes ; }  <METHOD_END>
<METHOD_START> public void void ( GatewaySender [] org.springframework.data.gemfire.GatewaySender[] ) { this . org.springframework.data.gemfire.GatewaySender[] = org.springframework.data.gemfire.GatewaySender[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<K> < K > java.lang.Class<K> ) { this . java.lang.Class<K> = java.lang.Class<K> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Scope org.springframework.data.gemfire.Scope ) { this . org.springframework.data.gemfire.Scope = org.springframework.data.gemfire.Scope ; }  <METHOD_END>
<METHOD_START> public void void ( RegionShortcut org.springframework.data.gemfire.RegionShortcut ) { this . org.springframework.data.gemfire.RegionShortcut = org.springframework.data.gemfire.RegionShortcut ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.data.gemfire.RegionShortcut org.springframework.data.gemfire.RegionShortcut ( ) { return org.springframework.data.gemfire.RegionShortcut ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.data.gemfire.Resource ) { this . org.springframework.data.gemfire.Resource = org.springframework.data.gemfire.Resource ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<V> < V > java.lang.Class<V> ) { this . java.lang.Class<V> = java.lang.Class<V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { if ( ! ObjectUtils . isEmpty ( org.springframework.data.gemfire.GatewaySender[] ) ) { synchronized ( org.springframework.data.gemfire.GatewaySender[] ) { for ( GatewaySender org.springframework.data.gemfire.GatewaySender : org.springframework.data.gemfire.GatewaySender[] ) { if ( ! ( org.springframework.data.gemfire.GatewaySender . isManualStart ( ) || org.springframework.data.gemfire.GatewaySender . isRunning ( ) ) ) { org.springframework.data.gemfire.GatewaySender . start ( ) ; } } } } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! ObjectUtils . isEmpty ( org.springframework.data.gemfire.GatewaySender[] ) ) { synchronized ( org.springframework.data.gemfire.GatewaySender[] ) { for ( GatewaySender org.springframework.data.gemfire.GatewaySender : org.springframework.data.gemfire.GatewaySender[] ) { org.springframework.data.gemfire.GatewaySender . stop ( ) ; } } } this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Integer . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
