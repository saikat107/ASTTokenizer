<METHOD_START> public static void void ( final java.lang.String ... java.lang.String[] ) throws java.io.IOException { org.springframework.data.gemfire.fork.InternalLocator ( ) ; void ( ) ; void ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; ProcessUtils . writePid ( new java.io.File ( FileSystemUtils . WORKING_DIRECTORY , java.lang.String ( ) ) , ProcessUtils . currentPid ( ) ) ; ProcessUtils . waitForStopSignal ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return org.springframework.data.gemfire.fork.LocatorProcess .class . java.lang.String ( ) . java.lang.String ( ) . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static org.springframework.data.gemfire.fork.InternalLocator org.springframework.data.gemfire.fork.InternalLocator ( ) java.io.IOException { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING , java.lang.String ) ; int int = java.lang.Integer . java.lang.Integer ( STRING , int ) ; boolean boolean = java.lang.Boolean . boolean ( STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( DistributionConfig . ENABLE_CLUSTER_CONFIGURATION_NAME , java.lang.String . java.lang.String ( java.lang.Boolean . boolean ( STRING ) ) ) ; java.util.Properties . java.lang.Object ( DistributionConfig . HTTP_SERVICE_PORT_NAME , java.lang.System . java.lang.String ( STRING , java.lang.String ) ) ; java.util.Properties . java.lang.Object ( DistributionConfig . JMX_MANAGER_NAME , java.lang.System . java.lang.String ( STRING , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ) ; java.util.Properties . java.lang.Object ( DistributionConfig . JMX_MANAGER_START_NAME , java.lang.System . java.lang.String ( STRING , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ) ; java.util.Properties . java.lang.Object ( DistributionConfig . LOAD_CLUSTER_CONFIG_FROM_DIR_NAME , java.lang.String . java.lang.String ( boolean ) ) ; java.util.Properties . java.lang.Object ( DistributionConfig . LOG_LEVEL_NAME , java.lang.System . java.lang.String ( STRING , java.lang.String ) ) ; return InternalLocator . startLocator ( int , null , null , null , null , null , java.util.Properties , true , true , java.lang.String , boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static org.springframework.data.gemfire.fork.LocatorLauncher org.springframework.data.gemfire.fork.LocatorLauncher ( ) { LocatorLauncher org.springframework.data.gemfire.fork.LocatorLauncher = org.springframework.data.gemfire.fork.LocatorLauncher ( ) ; org.springframework.data.gemfire.fork.LocatorLauncher . start ( ) ; return org.springframework.data.gemfire.fork.LocatorLauncher ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.LocatorLauncher org.springframework.data.gemfire.fork.LocatorLauncher ( ) { return new LocatorLauncher . LocatorLauncher ( ) . setMemberName ( java.lang.String ) . setHostnameForClients ( java.lang.String ( STRING , java.lang.String ) ) . setPort ( int ( STRING , int ) ) . setRedirectOutput ( false ) . set ( DistributionConfig . ENABLE_CLUSTER_CONFIGURATION_NAME , java.lang.String . java.lang.String ( boolean ( STRING ) ) ) . set ( DistributionConfig . HTTP_SERVICE_PORT_NAME , java.lang.String ( STRING , java.lang.String ) ) . set ( DistributionConfig . JMX_MANAGER_NAME , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) . set ( DistributionConfig . JMX_MANAGER_START_NAME , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) . set ( DistributionConfig . LOAD_CLUSTER_CONFIG_FROM_DIR_NAME , java.lang.String . java.lang.String ( boolean ( STRING ) ) ) . set ( DistributionConfig . LOG_LEVEL_NAME , java.lang.String ( STRING , java.lang.String ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.String java.lang.String ) { return java.lang.Boolean . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static int int ( java.lang.String java.lang.String , int int ) { return java.lang.Integer . java.lang.Integer ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { java.lang.Runtime . java.lang.Runtime ( ) . void ( new java.lang.Thread ( ( ) { Locator org.springframework.data.gemfire.fork.Locator = GemfireUtils . getLocator ( ) ; if ( org.springframework.data.gemfire.fork.Locator != null ) { org.springframework.data.gemfire.fork.Locator ( org.springframework.data.gemfire.fork.Locator ) . stop ( ) ; } } ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( Locator org.springframework.data.gemfire.fork.Locator ) { return ( org.springframework.data.gemfire.fork.Locator instanceof InternalLocator && java.lang.Boolean . java.lang.Boolean ( org.springframework.data.gemfire.fork.Locator . getDistributedSystem ( ) . getProperties ( ) . getProperty ( DistributionConfig . ENABLE_CLUSTER_CONFIGURATION_NAME ) ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.Locator org.springframework.data.gemfire.fork.Locator ( Locator org.springframework.data.gemfire.fork.Locator ) { if ( boolean ( org.springframework.data.gemfire.fork.Locator ) ) { SharedConfiguration org.springframework.data.gemfire.fork.SharedConfiguration = ( ( InternalLocator ) org.springframework.data.gemfire.fork.Locator ) . getSharedConfiguration ( ) ; if ( org.springframework.data.gemfire.fork.SharedConfiguration != null ) { if ( java.lang.Boolean . java.lang.Boolean ( java.lang.String ( STRING , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ) ) { org.springframework.data.gemfire.fork.SharedConfiguration . destroySharedConfiguration ( ) ; } } } return org.springframework.data.gemfire.fork.Locator ; }  <METHOD_END>
<METHOD_START> private static void void ( long long ) { InternalLocator org.springframework.data.gemfire.fork.InternalLocator = InternalLocator . getLocator ( ) ; if ( boolean ( org.springframework.data.gemfire.fork.InternalLocator ) ) { ThreadUtils . timedWait ( long , NUMBER , ( ) ! locator . isSharedConfigurationRunning ( ) ) ; } else { LocatorLauncher . getInstance ( ) . waitOnStatusResponse ( long , java.lang.Math . long ( NUMBER , long ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } }  <METHOD_END>
