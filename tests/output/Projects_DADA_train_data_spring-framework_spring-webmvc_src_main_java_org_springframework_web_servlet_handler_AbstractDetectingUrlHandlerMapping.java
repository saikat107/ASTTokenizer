<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.servlet.handler.ApplicationContextException { super. initApplicationContext ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.web.servlet.handler.BeansException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getApplicationContext ( ) ) ; } java.lang.String [] java.lang.String[] = ( this . boolean ? BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( getApplicationContext ( ) , java.lang.Object .class ) : getApplicationContext ( ) . getBeanNamesForType ( java.lang.Object .class ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { registerHandler ( java.lang.String[] , java.lang.String ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String );  <METHOD_END>
