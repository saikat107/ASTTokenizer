<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return HIBERNATE_CONFIG_LOCATIONS ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManagerFactoryInfo org.springframework.orm.jpa.hibernate.EntityManagerFactoryInfo = ( EntityManagerFactoryInfo ) entityManagerFactory ; assertTrue ( org.springframework.orm.jpa.hibernate.EntityManagerFactoryInfo . getNativeEntityManagerFactory ( ) instanceof org . org.hibernate . org.hibernate . org.hibernate ) ; assertTrue ( org.springframework.orm.jpa.hibernate.EntityManagerFactoryInfo . getNativeEntityManagerFactory ( ) instanceof SessionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( sharedEntityManager instanceof org . org.hibernate . org.hibernate . org.hibernate ) ; assertTrue ( ( ( EntityManagerProxy ) sharedEntityManager ) . getTargetEntityManager ( ) instanceof Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.hibernate.EntityManager = entityManagerFactory . createEntityManager ( ) ; EntityManager org.springframework.orm.jpa.hibernate.EntityManager = ProxyFactory . getProxy ( EntityManager .class , new SingletonTargetSource ( org.springframework.orm.jpa.hibernate.EntityManager ) ) ; assertTrue ( org.springframework.orm.jpa.hibernate.EntityManager instanceof org . org.hibernate . org.hibernate . org.hibernate ) ; assertFalse ( org.springframework.orm.jpa.hibernate.EntityManager instanceof org . org.hibernate . org.hibernate . org.hibernate ) ; assertTrue ( org.springframework.orm.jpa.hibernate.EntityManager . unwrap ( org . org.hibernate . org.hibernate . org.hibernate .class ) != null ) ; assertSame ( org.springframework.orm.jpa.hibernate.EntityManager , org.springframework.orm.jpa.hibernate.EntityManager . unwrap ( org . org.hibernate . org.hibernate . org.hibernate .class ) ) ; assertSame ( org.springframework.orm.jpa.hibernate.EntityManager . getDelegate ( ) , org.springframework.orm.jpa.hibernate.EntityManager . getDelegate ( ) ) ; }  <METHOD_END>
