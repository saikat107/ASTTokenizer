<METHOD_START> void ( final ClassWriter org.springframework.asm.ClassWriter , final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String [] java.lang.String[] , final int int ) { super( Opcodes . ASM5 ); if ( cw . firstMethod == null ) { cw . firstMethod = this ; } else { cw . lastMethod . mv = this ; } cw . lastMethod = this ; this . org.springframework.asm.ClassWriter = org.springframework.asm.ClassWriter ; this . int = int ; if ( STRING . boolean ( java.lang.String ) ) { this . int |= int ; } this . int = org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ; this . int = org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ; this . java.lang.String = java.lang.String ; if ( ClassReader . SIGNATURES ) { this . java.lang.String = java.lang.String ; } if ( java.lang.String[] != null && java.lang.String[] . int > NUMBER ) { int = java.lang.String[] . int ; this . int[] = new int [ int ] ; for ( int int = NUMBER ; int < int ; ++ int ) { this . int[] [ int ] = org.springframework.asm.ClassWriter . newClass ( java.lang.String[] [ int ] ) ; } } this . int = int ; if ( int != int ) { int int = Type . getArgumentsAndReturnSizes ( java.lang.String ) >> NUMBER ; if ( ( int & Opcodes . ACC_STATIC ) != NUMBER ) { -- int ; } int = int ; int = int ; org.springframework.asm.Label = new Label ( ) ; org.springframework.asm.Label . status |= Label . PUSHED ; void ( org.springframework.asm.Label ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int ) { if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = new ByteVector ( ) ; } ++ int ; org.springframework.asm.ByteVector . putShort ( ( java.lang.String == null ) ? NUMBER : org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } org.springframework.asm.ByteVector = new ByteVector ( ) ; return new AnnotationWriter ( org.springframework.asm.ClassWriter , false , org.springframework.asm.ByteVector , null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final java.lang.String java.lang.String , final boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final int int , final TypePath org.springframework.asm.TypePath , final java.lang.String java.lang.String , final boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; AnnotationWriter . putTarget ( int , org.springframework.asm.TypePath , org.springframework.asm.ByteVector ) ; org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , bv . length - NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final int int , final java.lang.String java.lang.String , final boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; if ( STRING . boolean ( java.lang.String ) ) { int = java.lang.Math . int ( int , int + NUMBER ) ; return new AnnotationWriter ( org.springframework.asm.ClassWriter , false , org.springframework.asm.ByteVector , null , NUMBER ) ; } org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , NUMBER ) ; if ( boolean ) { if ( org.springframework.asm.AnnotationWriter[] == null ) { org.springframework.asm.AnnotationWriter[] = new AnnotationWriter [ Type . getArgumentTypes ( java.lang.String ) . length ] ; } aw . next = org.springframework.asm.AnnotationWriter[] [ int ] ; org.springframework.asm.AnnotationWriter[] [ int ] = org.springframework.asm.AnnotationWriter ; } else { if ( org.springframework.asm.AnnotationWriter[] == null ) { org.springframework.asm.AnnotationWriter[] = new AnnotationWriter [ Type . getArgumentTypes ( java.lang.String ) . length ] ; } aw . next = org.springframework.asm.AnnotationWriter[] [ int ] ; org.springframework.asm.AnnotationWriter[] [ int ] = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Attribute org.springframework.asm.Attribute ) { if ( org.springframework.asm.Attribute . isCodeAttribute ( ) ) { attr . next = org.springframework.asm.Attribute ; org.springframework.asm.Attribute = org.springframework.asm.Attribute ; } else { attr . next = org.springframework.asm.Attribute ; org.springframework.asm.Attribute = org.springframework.asm.Attribute ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {    }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final int int , final java.lang.Object [] java.lang.Object[] , final int int , final java.lang.Object [] java.lang.Object[] ) { if ( ! ClassReader . FRAMES || int == int ) { return; } if ( int == int ) { if ( org.springframework.asm.Label . frame == null ) { org.springframework.asm.Label . frame = new CurrentFrame ( ) ; org.springframework.asm.Label . frame . owner = org.springframework.asm.Label ; org.springframework.asm.Label . frame . initInputFrame ( org.springframework.asm.ClassWriter , int , Type . getArgumentTypes ( java.lang.String ) , int ) ; void ( ) ; } else { if ( int == Opcodes . F_NEW ) { org.springframework.asm.Label . frame . set ( org.springframework.asm.ClassWriter , int , java.lang.Object[] , int , java.lang.Object[] ) ; } else { } void ( org.springframework.asm.Label . frame ) ; } } else if ( int == Opcodes . F_NEW ) { if ( int[] == null ) { void ( ) ; } int = int ; int int = int ( org.springframework.asm.ByteVector . length , int , int ) ; for ( int int = NUMBER ; int < int ; ++ int ) { if ( java.lang.Object[] [ int ] instanceof java.lang.String ) { int[] [ int ++ ] = Frame . OBJECT | org.springframework.asm.ClassWriter . addType ( ( java.lang.String ) java.lang.Object[] [ int ] ) ; } else if ( java.lang.Object[] [ int ] instanceof java.lang.Integer ) { int[] [ int ++ ] = ( ( java.lang.Integer ) java.lang.Object[] [ int ] ) . int ( ) ; } else { int[] [ int ++ ] = Frame . UNINITIALIZED | org.springframework.asm.ClassWriter . addUninitializedType ( STRING , ( ( Label ) java.lang.Object[] [ int ] ) . position ) ; } } for ( int int = NUMBER ; int < int ; ++ int ) { if ( java.lang.Object[] [ int ] instanceof java.lang.String ) { int[] [ int ++ ] = Frame . OBJECT | org.springframework.asm.ClassWriter . addType ( ( java.lang.String ) java.lang.Object[] [ int ] ) ; } else if ( java.lang.Object[] [ int ] instanceof java.lang.Integer ) { int[] [ int ++ ] = ( ( java.lang.Integer ) java.lang.Object[] [ int ] ) . int ( ) ; } else { int[] [ int ++ ] = Frame . UNINITIALIZED | org.springframework.asm.ClassWriter . addUninitializedType ( STRING , ( ( Label ) java.lang.Object[] [ int ] ) . position ) ; } } void ( ) ; } else { int int ; if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = new ByteVector ( ) ; int = org.springframework.asm.ByteVector . length ; } else { int = org.springframework.asm.ByteVector . length - int - NUMBER ; if ( int < NUMBER ) { if ( int == Opcodes . F_SAME ) { return; } else { throw new java.lang.IllegalStateException ( ) ; } } } switch ( int ) { case Opcodes . F_FULL : int = int ; org.springframework.asm.ByteVector . putByte ( int ) . putShort ( int ) . putShort ( int ) ; for ( int int = NUMBER ; int < int ; ++ int ) { void ( java.lang.Object[] [ int ] ) ; } org.springframework.asm.ByteVector . putShort ( int ) ; for ( int int = NUMBER ; int < int ; ++ int ) { void ( java.lang.Object[] [ int ] ) ; } break; case Opcodes . F_APPEND : int += int ; org.springframework.asm.ByteVector . putByte ( int + int ) . putShort ( int ) ; for ( int int = NUMBER ; int < int ; ++ int ) { void ( java.lang.Object[] [ int ] ) ; } break; case Opcodes . F_CHOP : int -= int ; org.springframework.asm.ByteVector . putByte ( int - int ) . putShort ( int ) ; break; case Opcodes . F_SAME : if ( int < NUMBER ) { org.springframework.asm.ByteVector . putByte ( int ) ; } else { org.springframework.asm.ByteVector . putByte ( int ) . putShort ( int ) ; } break; case Opcodes . F_SAME1 : if ( int < NUMBER ) { org.springframework.asm.ByteVector . putByte ( int + int ) ; } else { org.springframework.asm.ByteVector . putByte ( int ) . putShort ( int ) ; } void ( java.lang.Object[] [ NUMBER ] ) ; break; } int = org.springframework.asm.ByteVector . length ; ++ int ; } int = java.lang.Math . int ( int , int ) ; int = java.lang.Math . int ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int ) { int = org.springframework.asm.ByteVector . length ; org.springframework.asm.ByteVector . putByte ( int ) ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( int , NUMBER , null , null ) ; } else { int int = int + Frame . SIZE [ int ] ; if ( int > int ) { int = int ; } int = int ; } if ( ( int >= Opcodes . IRETURN && int <= Opcodes . RETURN ) || int == Opcodes . ATHROW ) { void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final int int ) { int = org.springframework.asm.ByteVector . length ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( int , int , null , null ) ; } else if ( int != Opcodes . NEWARRAY ) { int int = int + NUMBER ; if ( int > int ) { int = int ; } int = int ; } } if ( int == Opcodes . SIPUSH ) { org.springframework.asm.ByteVector . put12 ( int , int ) ; } else { org.springframework.asm.ByteVector . put11 ( int , int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final int int ) { int = org.springframework.asm.ByteVector . length ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( int , int , null , null ) ; } else { if ( int == Opcodes . RET ) { org.springframework.asm.Label . status |= Label . RET ; org.springframework.asm.Label . inputStackTop = int ; void ( ) ; } else { int int = int + Frame . SIZE [ int ] ; if ( int > int ) { int = int ; } int = int ; } } } if ( int != int ) { int int ; if ( int == Opcodes . LLOAD || int == Opcodes . DLOAD || int == Opcodes . LSTORE || int == Opcodes . DSTORE ) { int = int + NUMBER ; } else { int = int + NUMBER ; } if ( int > int ) { int = int ; } } if ( int < NUMBER && int != Opcodes . RET ) { int int ; if ( int < Opcodes . ISTORE ) { int = NUMBER + ( ( int - Opcodes . ILOAD ) << NUMBER ) + int ; } else { int = NUMBER + ( ( int - Opcodes . ISTORE ) << NUMBER ) + int ; } org.springframework.asm.ByteVector . putByte ( int ) ; } else if ( int >= NUMBER ) { org.springframework.asm.ByteVector . putByte ( NUMBER ) . put12 ( int , int ) ; } else { org.springframework.asm.ByteVector . put11 ( int , int ) ; } if ( int >= Opcodes . ISTORE && int == int && int > NUMBER ) { void ( new Label ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final java.lang.String java.lang.String ) { int = org.springframework.asm.ByteVector . length ; Item org.springframework.asm.Item = org.springframework.asm.ClassWriter . newClassItem ( java.lang.String ) ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( int , org.springframework.asm.ByteVector . length , org.springframework.asm.ClassWriter , org.springframework.asm.Item ) ; } else if ( int == Opcodes . NEW ) { int int = int + NUMBER ; if ( int > int ) { int = int ; } int = int ; } } org.springframework.asm.ByteVector . put12 ( int , i . index ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { int = org.springframework.asm.ByteVector . length ; Item org.springframework.asm.Item = org.springframework.asm.ClassWriter . newFieldItem ( java.lang.String , java.lang.String , java.lang.String ) ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( int , NUMBER , org.springframework.asm.ClassWriter , org.springframework.asm.Item ) ; } else { int int ; char char = java.lang.String . char ( NUMBER ) ; switch ( int ) { case Opcodes . GETSTATIC : int = int + ( char == 'D' || char == 'J' ? NUMBER : NUMBER ) ; break; case Opcodes . PUTSTATIC : int = int + ( char == 'D' || char == 'J' ? - NUMBER : - NUMBER ) ; break; case Opcodes . GETFIELD : int = int + ( char == 'D' || char == 'J' ? NUMBER : NUMBER ) ; break; default: int = int + ( char == 'D' || char == 'J' ? - NUMBER : - NUMBER ) ; break; } if ( int > int ) { int = int ; } int = int ; } } org.springframework.asm.ByteVector . put12 ( int , i . index ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final boolean boolean ) { int = org.springframework.asm.ByteVector . length ; Item org.springframework.asm.Item = org.springframework.asm.ClassWriter . newMethodItem ( java.lang.String , java.lang.String , java.lang.String , boolean ) ; int int = i . intVal ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( int , NUMBER , org.springframework.asm.ClassWriter , org.springframework.asm.Item ) ; } else { if ( int == NUMBER ) { int = Type . getArgumentsAndReturnSizes ( java.lang.String ) ; i . intVal = int ; } int int ; if ( int == Opcodes . INVOKESTATIC ) { int = int - ( int >> NUMBER ) + ( int & NUMBER ) + NUMBER ; } else { int = int - ( int >> NUMBER ) + ( int & NUMBER ) ; } if ( int > int ) { int = int ; } int = int ; } } if ( int == Opcodes . INVOKEINTERFACE ) { if ( int == NUMBER ) { int = Type . getArgumentsAndReturnSizes ( java.lang.String ) ; i . intVal = int ; } org.springframework.asm.ByteVector . put12 ( Opcodes . INVOKEINTERFACE , i . index ) . put11 ( int >> NUMBER , NUMBER ) ; } else { org.springframework.asm.ByteVector . put12 ( int , i . index ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final Handle org.springframework.asm.Handle , final java.lang.Object ... java.lang.Object[] ) { int = org.springframework.asm.ByteVector . length ; Item org.springframework.asm.Item = org.springframework.asm.ClassWriter . newInvokeDynamicItem ( java.lang.String , java.lang.String , org.springframework.asm.Handle , java.lang.Object[] ) ; int int = i . intVal ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( Opcodes . INVOKEDYNAMIC , NUMBER , org.springframework.asm.ClassWriter , org.springframework.asm.Item ) ; } else { if ( int == NUMBER ) { int = Type . getArgumentsAndReturnSizes ( java.lang.String ) ; i . intVal = int ; } int int = int - ( int >> NUMBER ) + ( int & NUMBER ) + NUMBER ; if ( int > int ) { int = int ; } int = int ; } } org.springframework.asm.ByteVector . put12 ( Opcodes . INVOKEDYNAMIC , i . index ) ; org.springframework.asm.ByteVector . putShort ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , final Label org.springframework.asm.Label ) { boolean boolean = int >= NUMBER ; int = boolean ? int - NUMBER : int ; int = org.springframework.asm.ByteVector . length ; Label org.springframework.asm.Label = null ; if ( org.springframework.asm.Label != null ) { if ( int == int ) { org.springframework.asm.Label . frame . execute ( int , NUMBER , null , null ) ; org.springframework.asm.Label . getFirst ( ) . status |= Label . TARGET ; void ( Edge . NORMAL , org.springframework.asm.Label ) ; if ( int != Opcodes . GOTO ) { org.springframework.asm.Label = new Label ( ) ; } } else if ( int == int ) { org.springframework.asm.Label . frame . execute ( int , NUMBER , null , null ) ; } else { if ( int == Opcodes . JSR ) { if ( ( label . status & Label . SUBROUTINE ) == NUMBER ) { label . status |= Label . SUBROUTINE ; ++ int ; } org.springframework.asm.Label . status |= Label . JSR ; void ( int + NUMBER , org.springframework.asm.Label ) ; org.springframework.asm.Label = new Label ( ) ; } else { int += Frame . SIZE [ int ] ; void ( int , org.springframework.asm.Label ) ; } } } if ( ( label . status & Label . RESOLVED ) != NUMBER && label . position - org.springframework.asm.ByteVector . length < java.lang.Short . short ) { if ( int == Opcodes . GOTO ) { org.springframework.asm.ByteVector . putByte ( NUMBER ) ; } else if ( int == Opcodes . JSR ) { org.springframework.asm.ByteVector . putByte ( NUMBER ) ; } else { if ( org.springframework.asm.Label != null ) { nextInsn . status |= Label . TARGET ; } org.springframework.asm.ByteVector . putByte ( int <= NUMBER ? ( ( int + NUMBER ) ^ NUMBER ) - NUMBER : int ^ NUMBER ) ; org.springframework.asm.ByteVector . putShort ( NUMBER ) ; org.springframework.asm.ByteVector . putByte ( NUMBER ) ; } org.springframework.asm.Label . put ( this , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector . length - NUMBER , true ) ; } else if ( boolean ) { org.springframework.asm.ByteVector . putByte ( int + NUMBER ) ; org.springframework.asm.Label . put ( this , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector . length - NUMBER , true ) ; } else { org.springframework.asm.ByteVector . putByte ( int ) ; org.springframework.asm.Label . put ( this , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector . length - NUMBER , false ) ; } if ( org.springframework.asm.Label != null ) { if ( org.springframework.asm.Label != null ) { void ( org.springframework.asm.Label ) ; } if ( int == Opcodes . GOTO ) { void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Label org.springframework.asm.Label ) { org.springframework.asm.ClassWriter . hasAsmInsns |= org.springframework.asm.Label . resolve ( this , org.springframework.asm.ByteVector . length , org.springframework.asm.ByteVector . data ) ; if ( ( label . status & Label . DEBUG ) != NUMBER ) { return; } if ( int == int ) { if ( org.springframework.asm.Label != null ) { if ( label . position == org.springframework.asm.Label . position ) { org.springframework.asm.Label . status |= ( label . status & Label . TARGET ) ; label . frame = org.springframework.asm.Label . frame ; return; } void ( Edge . NORMAL , org.springframework.asm.Label ) ; } org.springframework.asm.Label = org.springframework.asm.Label ; if ( label . frame == null ) { label . frame = new Frame ( ) ; label . frame . owner = org.springframework.asm.Label ; } if ( org.springframework.asm.Label != null ) { if ( label . position == org.springframework.asm.Label . position ) { org.springframework.asm.Label . status |= ( label . status & Label . TARGET ) ; label . frame = org.springframework.asm.Label . frame ; org.springframework.asm.Label = org.springframework.asm.Label ; return; } org.springframework.asm.Label . successor = org.springframework.asm.Label ; } org.springframework.asm.Label = org.springframework.asm.Label ; } else if ( int == int ) { if ( org.springframework.asm.Label == null ) { org.springframework.asm.Label = org.springframework.asm.Label ; } else { org.springframework.asm.Label . frame . owner = org.springframework.asm.Label ; } } else if ( int == int ) { if ( org.springframework.asm.Label != null ) { org.springframework.asm.Label . outputStackMax = int ; void ( int , org.springframework.asm.Label ) ; } org.springframework.asm.Label = org.springframework.asm.Label ; int = NUMBER ; int = NUMBER ; if ( org.springframework.asm.Label != null ) { org.springframework.asm.Label . successor = org.springframework.asm.Label ; } org.springframework.asm.Label = org.springframework.asm.Label ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.Object java.lang.Object ) { int = org.springframework.asm.ByteVector . length ; Item org.springframework.asm.Item = org.springframework.asm.ClassWriter . newConstItem ( java.lang.Object ) ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( Opcodes . LDC , NUMBER , org.springframework.asm.ClassWriter , org.springframework.asm.Item ) ; } else { int int ; if ( i . type == ClassWriter . LONG || i . type == ClassWriter . DOUBLE ) { int = int + NUMBER ; } else { int = int + NUMBER ; } if ( int > int ) { int = int ; } int = int ; } } int int = i . index ; if ( i . type == ClassWriter . LONG || i . type == ClassWriter . DOUBLE ) { org.springframework.asm.ByteVector . put12 ( NUMBER , int ) ; } else if ( int >= NUMBER ) { org.springframework.asm.ByteVector . put12 ( NUMBER , int ) ; } else { org.springframework.asm.ByteVector . put11 ( Opcodes . LDC , int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final int int ) { int = org.springframework.asm.ByteVector . length ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( Opcodes . IINC , int , null , null ) ; } } if ( int != int ) { int int = int + NUMBER ; if ( int > int ) { int = int ; } } if ( ( int > NUMBER ) || ( int > NUMBER ) || ( int < - NUMBER ) ) { org.springframework.asm.ByteVector . putByte ( NUMBER ) . put12 ( Opcodes . IINC , int ) . putShort ( int ) ; } else { org.springframework.asm.ByteVector . putByte ( Opcodes . IINC ) . put11 ( int , int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final int int , final Label org.springframework.asm.Label , final Label ... org.springframework.asm.Label[] ) { int = org.springframework.asm.ByteVector . length ; int int = org.springframework.asm.ByteVector . length ; org.springframework.asm.ByteVector . putByte ( Opcodes . TABLESWITCH ) ; org.springframework.asm.ByteVector . putByteArray ( null , NUMBER , ( NUMBER - org.springframework.asm.ByteVector . length % NUMBER ) % NUMBER ) ; org.springframework.asm.Label . put ( this , org.springframework.asm.ByteVector , int , true ) ; org.springframework.asm.ByteVector . putInt ( int ) . putInt ( int ) ; for ( int int = NUMBER ; int < labels . length ; ++ int ) { org.springframework.asm.Label[] [ int ] . put ( this , org.springframework.asm.ByteVector , int , true ) ; } void ( org.springframework.asm.Label , org.springframework.asm.Label[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Label org.springframework.asm.Label , final int [] int[] , final Label [] org.springframework.asm.Label[] ) { int = org.springframework.asm.ByteVector . length ; int int = org.springframework.asm.ByteVector . length ; org.springframework.asm.ByteVector . putByte ( Opcodes . LOOKUPSWITCH ) ; org.springframework.asm.ByteVector . putByteArray ( null , NUMBER , ( NUMBER - org.springframework.asm.ByteVector . length % NUMBER ) % NUMBER ) ; org.springframework.asm.Label . put ( this , org.springframework.asm.ByteVector , int , true ) ; org.springframework.asm.ByteVector . putInt ( labels . length ) ; for ( int int = NUMBER ; int < labels . length ; ++ int ) { org.springframework.asm.ByteVector . putInt ( int[] [ int ] ) ; org.springframework.asm.Label[] [ int ] . put ( this , org.springframework.asm.ByteVector , int , true ) ; } void ( org.springframework.asm.Label , org.springframework.asm.Label[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( final Label org.springframework.asm.Label , final Label [] org.springframework.asm.Label[] ) { if ( org.springframework.asm.Label != null ) { if ( int == int ) { org.springframework.asm.Label . frame . execute ( Opcodes . LOOKUPSWITCH , NUMBER , null , null ) ; void ( Edge . NORMAL , org.springframework.asm.Label ) ; org.springframework.asm.Label . getFirst ( ) . status |= Label . TARGET ; for ( int int = NUMBER ; int < labels . length ; ++ int ) { void ( Edge . NORMAL , org.springframework.asm.Label[] [ int ] ) ; org.springframework.asm.Label[] [ int ] . getFirst ( ) . status |= Label . TARGET ; } } else { -- int ; void ( int , org.springframework.asm.Label ) ; for ( int int = NUMBER ; int < labels . length ; ++ int ) { void ( int , org.springframework.asm.Label[] [ int ] ) ; } } void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String , final int int ) { int = org.springframework.asm.ByteVector . length ; Item org.springframework.asm.Item = org.springframework.asm.ClassWriter . newClassItem ( java.lang.String ) ; if ( org.springframework.asm.Label != null ) { if ( int == int || int == int ) { org.springframework.asm.Label . frame . execute ( Opcodes . MULTIANEWARRAY , int , org.springframework.asm.ClassWriter , org.springframework.asm.Item ) ; } else { int += NUMBER - int ; } } org.springframework.asm.ByteVector . put12 ( Opcodes . MULTIANEWARRAY , i . index ) . putByte ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( int int , TypePath org.springframework.asm.TypePath , java.lang.String java.lang.String , boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; int = ( int & NUMBER ) | ( int << NUMBER ) ; AnnotationWriter . putTarget ( int , org.springframework.asm.TypePath , org.springframework.asm.ByteVector ) ; org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , bv . length - NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Label org.springframework.asm.Label , final Label org.springframework.asm.Label , final Label org.springframework.asm.Label , final java.lang.String java.lang.String ) { ++ int ; Handler org.springframework.asm.Handler = new Handler ( ) ; h . start = org.springframework.asm.Label ; h . end = org.springframework.asm.Label ; h . handler = org.springframework.asm.Label ; h . desc = java.lang.String ; h . type = java.lang.String != null ? org.springframework.asm.ClassWriter . newClass ( java.lang.String ) : NUMBER ; if ( org.springframework.asm.Handler == null ) { org.springframework.asm.Handler = org.springframework.asm.Handler ; } else { org.springframework.asm.Handler . next = org.springframework.asm.Handler ; } org.springframework.asm.Handler = org.springframework.asm.Handler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( int int , TypePath org.springframework.asm.TypePath , java.lang.String java.lang.String , boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; AnnotationWriter . putTarget ( int , org.springframework.asm.TypePath , org.springframework.asm.ByteVector ) ; org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , bv . length - NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final Label org.springframework.asm.Label , final Label org.springframework.asm.Label , final int int ) { if ( java.lang.String != null ) { if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = new ByteVector ( ) ; } ++ int ; org.springframework.asm.ByteVector . putShort ( start . position ) . putShort ( end . position - start . position ) . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( int ) ; } if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = new ByteVector ( ) ; } ++ int ; org.springframework.asm.ByteVector . putShort ( start . position ) . putShort ( end . position - start . position ) . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( int ) ; if ( int != int ) { char char = java.lang.String . char ( NUMBER ) ; int int = int + ( char == 'J' || char == 'D' ? NUMBER : NUMBER ) ; if ( int > int ) { int = int ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( int int , TypePath org.springframework.asm.TypePath , Label [] org.springframework.asm.Label[] , Label [] org.springframework.asm.Label[] , int [] int[] , java.lang.String java.lang.String , boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; org.springframework.asm.ByteVector . putByte ( int >>> NUMBER ) . putShort ( start . length ) ; for ( int int = NUMBER ; int < start . length ; ++ int ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.Label[] [ int ] . position ) . putShort ( org.springframework.asm.Label[] [ int ] . position - org.springframework.asm.Label[] [ int ] . position ) . putShort ( int[] [ int ] ) ; } if ( org.springframework.asm.TypePath == null ) { org.springframework.asm.ByteVector . putByte ( NUMBER ) ; } else { int int = typePath . b [ typePath . offset ] * NUMBER + NUMBER ; org.springframework.asm.ByteVector . putByteArray ( typePath . b , typePath . offset , int ) ; } org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , bv . length - NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final Label org.springframework.asm.Label ) { if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = new ByteVector ( ) ; } ++ int ; org.springframework.asm.ByteVector . putShort ( start . position ) ; org.springframework.asm.ByteVector . putShort ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final int int , final int int ) { if ( ClassReader . FRAMES && int == int ) { Handler org.springframework.asm.Handler = org.springframework.asm.Handler ; while ( org.springframework.asm.Handler != null ) { Label org.springframework.asm.Label = handler . start . getFirst ( ) ; Label org.springframework.asm.Label = handler . handler . getFirst ( ) ; Label org.springframework.asm.Label = handler . end . getFirst ( ) ; java.lang.String java.lang.String = handler . desc == null ? STRING : handler . desc ; int int = Frame . OBJECT | org.springframework.asm.ClassWriter . addType ( java.lang.String ) ; h . status |= Label . TARGET ; while ( org.springframework.asm.Label != org.springframework.asm.Label ) { Edge org.springframework.asm.Edge = new Edge ( ) ; b . info = int ; b . successor = org.springframework.asm.Label ; b . next = l . successors ; l . successors = org.springframework.asm.Edge ; org.springframework.asm.Label = l . successor ; } org.springframework.asm.Handler = handler . next ; } Frame org.springframework.asm.Frame = org.springframework.asm.Label . frame ; org.springframework.asm.Frame . initInputFrame ( org.springframework.asm.ClassWriter , int , Type . getArgumentTypes ( java.lang.String ) , this . int ) ; void ( org.springframework.asm.Frame ) ; int int = NUMBER ; Label org.springframework.asm.Label = org.springframework.asm.Label ; while ( org.springframework.asm.Label != null ) { Label org.springframework.asm.Label = org.springframework.asm.Label ; org.springframework.asm.Label = changed . next ; l . next = null ; org.springframework.asm.Frame = l . frame ; if ( ( l . status & Label . TARGET ) != NUMBER ) { l . status |= Label . STORE ; } l . status |= Label . REACHABLE ; int int = f . inputStack . length + l . outputStackMax ; if ( int > int ) { int = int ; } Edge org.springframework.asm.Edge = l . successors ; while ( org.springframework.asm.Edge != null ) { Label org.springframework.asm.Label = e . successor . getFirst ( ) ; boolean boolean = org.springframework.asm.Frame . merge ( org.springframework.asm.ClassWriter , n . frame , e . info ) ; if ( boolean && n . next == null ) { n . next = org.springframework.asm.Label ; org.springframework.asm.Label = org.springframework.asm.Label ; } org.springframework.asm.Edge = e . next ; } } Label org.springframework.asm.Label = org.springframework.asm.Label ; while ( org.springframework.asm.Label != null ) { org.springframework.asm.Frame = l . frame ; if ( ( l . status & Label . STORE ) != NUMBER ) { void ( org.springframework.asm.Frame ) ; } if ( ( l . status & Label . REACHABLE ) == NUMBER ) { Label org.springframework.asm.Label = l . successor ; int int = l . position ; int int = ( org.springframework.asm.Label == null ? org.springframework.asm.ByteVector . length : k . position ) - NUMBER ; if ( int >= int ) { int = java.lang.Math . int ( int , NUMBER ) ; for ( int int = int ; int < int ; ++ int ) { org.springframework.asm.ByteVector . data [ int ] = Opcodes . NOP ; } org.springframework.asm.ByteVector . data [ int ] = ( byte ) Opcodes . ATHROW ; int int = int ( int , NUMBER , NUMBER ) ; int[] [ int ] = Frame . OBJECT | org.springframework.asm.ClassWriter . addType ( STRING ) ; void ( ) ; org.springframework.asm.Handler = Handler . remove ( org.springframework.asm.Handler , org.springframework.asm.Label , org.springframework.asm.Label ) ; } } org.springframework.asm.Label = l . successor ; } org.springframework.asm.Handler = org.springframework.asm.Handler ; int = NUMBER ; while ( org.springframework.asm.Handler != null ) { int += NUMBER ; org.springframework.asm.Handler = handler . next ; } this . int = int ; } else if ( int == int ) { Handler org.springframework.asm.Handler = org.springframework.asm.Handler ; while ( org.springframework.asm.Handler != null ) { Label org.springframework.asm.Label = handler . start ; Label org.springframework.asm.Label = handler . handler ; Label org.springframework.asm.Label = handler . end ; while ( org.springframework.asm.Label != org.springframework.asm.Label ) { Edge org.springframework.asm.Edge = new Edge ( ) ; b . info = Edge . EXCEPTION ; b . successor = org.springframework.asm.Label ; if ( ( l . status & Label . JSR ) == NUMBER ) { b . next = l . successors ; l . successors = org.springframework.asm.Edge ; } else { b . next = l . successors . next . next ; l . successors . next . next = org.springframework.asm.Edge ; } org.springframework.asm.Label = l . successor ; } org.springframework.asm.Handler = handler . next ; } if ( int > NUMBER ) { int int = NUMBER ; org.springframework.asm.Label . visitSubroutine ( null , NUMBER , int ) ; Label org.springframework.asm.Label = org.springframework.asm.Label ; while ( org.springframework.asm.Label != null ) { if ( ( l . status & Label . JSR ) != NUMBER ) { Label org.springframework.asm.Label = l . successors . next . successor ; if ( ( subroutine . status & Label . VISITED ) == NUMBER ) { int += NUMBER ; org.springframework.asm.Label . visitSubroutine ( null , ( int / NUMBER ) << NUMBER | ( NUMBER << ( int % NUMBER ) ) , int ) ; } } org.springframework.asm.Label = l . successor ; } org.springframework.asm.Label = org.springframework.asm.Label ; while ( org.springframework.asm.Label != null ) { if ( ( l . status & Label . JSR ) != NUMBER ) { Label org.springframework.asm.Label = org.springframework.asm.Label ; while ( org.springframework.asm.Label != null ) { L . status &= ~ Label . VISITED2 ; org.springframework.asm.Label = L . successor ; } Label org.springframework.asm.Label = l . successors . next . successor ; org.springframework.asm.Label . visitSubroutine ( org.springframework.asm.Label , NUMBER , int ) ; } org.springframework.asm.Label = l . successor ; } } int int = NUMBER ; Label org.springframework.asm.Label = org.springframework.asm.Label ; while ( org.springframework.asm.Label != null ) { Label org.springframework.asm.Label = org.springframework.asm.Label ; org.springframework.asm.Label = stack . next ; int int = l . inputStackTop ; int int = int + l . outputStackMax ; if ( int > int ) { int = int ; } Edge org.springframework.asm.Edge = l . successors ; if ( ( l . status & Label . JSR ) != NUMBER ) { org.springframework.asm.Edge = b . next ; } while ( org.springframework.asm.Edge != null ) { org.springframework.asm.Label = b . successor ; if ( ( l . status & Label . PUSHED ) == NUMBER ) { l . inputStackTop = b . info == Edge . EXCEPTION ? NUMBER : int + b . info ; l . status |= Label . PUSHED ; l . next = org.springframework.asm.Label ; org.springframework.asm.Label = org.springframework.asm.Label ; } org.springframework.asm.Edge = b . next ; } } this . int = java.lang.Math . int ( int , int ) ; } else { this . int = int ; this . int = int ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {    }  <METHOD_END>
<METHOD_START> private void void ( final int int , final Label org.springframework.asm.Label ) { Edge org.springframework.asm.Edge = new Edge ( ) ; b . info = int ; b . successor = org.springframework.asm.Label ; b . next = org.springframework.asm.Label . successors ; org.springframework.asm.Label . successors = org.springframework.asm.Edge ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( int == int ) { Label org.springframework.asm.Label = new Label ( ) ; l . frame = new Frame ( ) ; l . frame . owner = org.springframework.asm.Label ; org.springframework.asm.Label . resolve ( this , org.springframework.asm.ByteVector . length , org.springframework.asm.ByteVector . data ) ; org.springframework.asm.Label . successor = org.springframework.asm.Label ; org.springframework.asm.Label = org.springframework.asm.Label ; } else { org.springframework.asm.Label . outputStackMax = int ; } if ( int != int ) { org.springframework.asm.Label = null ; } }  <METHOD_END>
<METHOD_START> private void void ( final Frame org.springframework.asm.Frame ) { int int , int ; int int = NUMBER ; int int = NUMBER ; int int = NUMBER ; int [] int[] = f . inputLocals ; int [] int[] = f . inputStack ; for ( int = NUMBER ; int < int[] . int ; ++ int ) { int = int[] [ int ] ; if ( int == Frame . TOP ) { ++ int ; } else { int += int + NUMBER ; int = NUMBER ; } if ( int == Frame . LONG || int == Frame . DOUBLE ) { ++ int ; } } for ( int = NUMBER ; int < int[] . int ; ++ int ) { int = int[] [ int ] ; ++ int ; if ( int == Frame . LONG || int == Frame . DOUBLE ) { ++ int ; } } int int = int ( f . owner . position , int , int ) ; for ( int = NUMBER ; int > NUMBER ; ++ int , -- int ) { int = int[] [ int ] ; int[] [ int ++ ] = int ; if ( int == Frame . LONG || int == Frame . DOUBLE ) { ++ int ; } } for ( int = NUMBER ; int < int[] . int ; ++ int ) { int = int[] [ int ] ; int[] [ int ++ ] = int ; if ( int == Frame . LONG || int == Frame . DOUBLE ) { ++ int ; } } void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { int int = int ( NUMBER , java.lang.String . int ( ) + NUMBER , NUMBER ) ; if ( ( int & Opcodes . ACC_STATIC ) == NUMBER ) { if ( ( int & int ) == NUMBER ) { int[] [ int ++ ] = Frame . OBJECT | org.springframework.asm.ClassWriter . addType ( org.springframework.asm.ClassWriter . thisName ) ; } else { int[] [ int ++ ] = NUMBER ; } } int int = NUMBER ; loop : while ( true ) { int int = int ; switch ( java.lang.String . char ( int ++ ) ) { case 'Z' : case 'C' : case 'B' : case 'S' : case 'I' : int[] [ int ++ ] = NUMBER ; break; case 'F' : int[] [ int ++ ] = NUMBER ; break; case 'J' : int[] [ int ++ ] = NUMBER ; break; case 'D' : int[] [ int ++ ] = NUMBER ; break; case '[' : while ( java.lang.String . char ( int ) == '[' ) { ++ int ; } if ( java.lang.String . char ( int ) == 'L' ) { ++ int ; while ( java.lang.String . char ( int ) != ';' ) { ++ int ; } } int[] [ int ++ ] = Frame . OBJECT | org.springframework.asm.ClassWriter . addType ( java.lang.String . java.lang.String ( int , ++ int ) ) ; break; case 'L' : while ( java.lang.String . char ( int ) != ';' ) { ++ int ; } int[] [ int ++ ] = Frame . OBJECT | org.springframework.asm.ClassWriter . addType ( java.lang.String . java.lang.String ( int + NUMBER , int ++ ) ) ; break; default: break loop ; } } int[] [ NUMBER ] = int - NUMBER ; void ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( final int int , final int int , final int int ) { int int = NUMBER + int + int ; if ( int[] == null || int[] . int < int ) { int[] = new int [ int ] ; } int[] [ NUMBER ] = int ; int[] [ NUMBER ] = int ; int[] [ NUMBER ] = int ; return NUMBER ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( int[] != null ) { if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = new ByteVector ( ) ; } void ( ) ; ++ int ; } int[] = int[] ; int[] = null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { int int = int[] [ NUMBER ] ; int int = int[] [ NUMBER ] ; if ( ( org.springframework.asm.ClassWriter . version & NUMBER ) < Opcodes . V1_6 ) { org.springframework.asm.ByteVector . putShort ( int[] [ NUMBER ] ) . putShort ( int ) ; void ( NUMBER , NUMBER + int ) ; org.springframework.asm.ByteVector . putShort ( int ) ; void ( NUMBER + int , NUMBER + int + int ) ; return; } int int = int[] [ NUMBER ] ; int int = int ; int int = NUMBER ; int int ; if ( int == NUMBER ) { int = int[] [ NUMBER ] ; } else { int = int[] [ NUMBER ] - int[] [ NUMBER ] - NUMBER ; } if ( int == NUMBER ) { int = int - int ; switch ( int ) { case - NUMBER : case - NUMBER : case - NUMBER : int = int ; int = int ; break; case NUMBER : int = int < NUMBER ? int : int ; break; case NUMBER : case NUMBER : case NUMBER : int = int ; break; } } else if ( int == int && int == NUMBER ) { int = int < NUMBER ? int : int ; } if ( int != int ) { int int = NUMBER ; for ( int int = NUMBER ; int < int ; int ++ ) { if ( int[] [ int ] != int[] [ int ] ) { int = int ; break; } int ++ ; } } switch ( int ) { case int : org.springframework.asm.ByteVector . putByte ( int ) ; break; case int : org.springframework.asm.ByteVector . putByte ( int + int ) ; void ( NUMBER + int , NUMBER + int ) ; break; case int : org.springframework.asm.ByteVector . putByte ( int ) . putShort ( int ) ; void ( NUMBER + int , NUMBER + int ) ; break; case int : org.springframework.asm.ByteVector . putByte ( int ) . putShort ( int ) ; break; case int : org.springframework.asm.ByteVector . putByte ( int + int ) . putShort ( int ) ; break; case int : org.springframework.asm.ByteVector . putByte ( int + int ) . putShort ( int ) ; void ( NUMBER + int , NUMBER + int ) ; break; default: org.springframework.asm.ByteVector . putByte ( int ) . putShort ( int ) . putShort ( int ) ; void ( NUMBER , NUMBER + int ) ; org.springframework.asm.ByteVector . putShort ( int ) ; void ( NUMBER + int , NUMBER + int + int ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final int int , final int int ) { for ( int int = int ; int < int ; ++ int ) { int int = int[] [ int ] ; int int = int & Frame . DIM ; if ( int == NUMBER ) { int int = int & Frame . BASE_VALUE ; switch ( int & Frame . BASE_KIND ) { case Frame . OBJECT : org.springframework.asm.ByteVector . putByte ( NUMBER ) . putShort ( org.springframework.asm.ClassWriter . newClass ( org.springframework.asm.ClassWriter . typeTable [ int ] . strVal1 ) ) ; break; case Frame . UNINITIALIZED : org.springframework.asm.ByteVector . putByte ( NUMBER ) . putShort ( org.springframework.asm.ClassWriter . typeTable [ int ] . intVal ) ; break; default: org.springframework.asm.ByteVector . putByte ( int ) ; } } else { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; int >>= NUMBER ; while ( int -- > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( '[' ) ; } if ( ( int & Frame . BASE_KIND ) == Frame . OBJECT ) { java.lang.StringBuilder . java.lang.StringBuilder ( 'L' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.asm.ClassWriter . typeTable [ int & Frame . BASE_VALUE ] . strVal1 ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ';' ) ; } else { switch ( int & NUMBER ) { case NUMBER : java.lang.StringBuilder . java.lang.StringBuilder ( 'I' ) ; break; case NUMBER : java.lang.StringBuilder . java.lang.StringBuilder ( 'F' ) ; break; case NUMBER : java.lang.StringBuilder . java.lang.StringBuilder ( 'D' ) ; break; case NUMBER : java.lang.StringBuilder . java.lang.StringBuilder ( 'Z' ) ; break; case NUMBER : java.lang.StringBuilder . java.lang.StringBuilder ( 'B' ) ; break; case NUMBER : java.lang.StringBuilder . java.lang.StringBuilder ( 'C' ) ; break; case NUMBER : java.lang.StringBuilder . java.lang.StringBuilder ( 'S' ) ; break; default: java.lang.StringBuilder . java.lang.StringBuilder ( 'J' ) ; } } org.springframework.asm.ByteVector . putByte ( NUMBER ) . putShort ( org.springframework.asm.ClassWriter . newClass ( java.lang.StringBuilder . java.lang.String ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.asm.ByteVector . putByte ( NUMBER ) . putShort ( org.springframework.asm.ClassWriter . newClass ( ( java.lang.String ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.Integer ) { org.springframework.asm.ByteVector . putByte ( ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ) ; } else { org.springframework.asm.ByteVector . putByte ( NUMBER ) . putShort ( ( ( Label ) java.lang.Object ) . position ) ; } }  <METHOD_END>
<METHOD_START> final int int ( ) { if ( int != NUMBER ) { return NUMBER + int ; } int int = NUMBER ; if ( org.springframework.asm.ByteVector . length > NUMBER ) { if ( org.springframework.asm.ByteVector . length > NUMBER ) { throw new java.lang.RuntimeException ( STRING ) ; } org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.ByteVector . length + NUMBER * int ; if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( org.springframework.asm.ByteVector != null ) { boolean boolean = ( org.springframework.asm.ClassWriter . version & NUMBER ) >= Opcodes . V1_6 ; org.springframework.asm.ClassWriter . newUTF8 ( boolean ? STRING : STRING ) ; int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getSize ( org.springframework.asm.ClassWriter , org.springframework.asm.ByteVector . data , org.springframework.asm.ByteVector . length , int , int ) ; } } if ( int > NUMBER ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + NUMBER * int ; } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( org.springframework.asm.ClassWriter . version & NUMBER ) < Opcodes . V1_5 || ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) != NUMBER ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER ; } } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER ; } if ( ClassReader . SIGNATURES && java.lang.String != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ; int += NUMBER ; } if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.ByteVector != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter[] != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + NUMBER * ( org.springframework.asm.AnnotationWriter[] . length - int ) ; for ( int int = org.springframework.asm.AnnotationWriter[] . length - NUMBER ; int >= int ; -- int ) { int += org.springframework.asm.AnnotationWriter[] [ int ] == null ? NUMBER : org.springframework.asm.AnnotationWriter[] [ int ] . getSize ( ) ; } } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter[] != null ) { org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ; int += NUMBER + NUMBER * ( org.springframework.asm.AnnotationWriter[] . length - int ) ; for ( int int = org.springframework.asm.AnnotationWriter[] . length - NUMBER ; int >= int ; -- int ) { int += org.springframework.asm.AnnotationWriter[] [ int ] == null ? NUMBER : org.springframework.asm.AnnotationWriter[] [ int ] . getSize ( ) ; } } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getSize ( org.springframework.asm.ClassWriter , null , NUMBER , - NUMBER , - NUMBER ) ; } return int ; }  <METHOD_END>
<METHOD_START> final void void ( final ByteVector org.springframework.asm.ByteVector ) { final int int = ClassWriter . TO_ACC_SYNTHETIC ; int int = int | Opcodes . ACC_DEPRECATED | ClassWriter . ACC_SYNTHETIC_ATTRIBUTE | ( ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) / int ) ; org.springframework.asm.ByteVector . putShort ( int & ~ int ) . putShort ( int ) . putShort ( int ) ; if ( int != NUMBER ) { org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ClassWriter . cr . b , int , int ) ; return; } int int = NUMBER ; if ( org.springframework.asm.ByteVector . length > NUMBER ) { ++ int ; } if ( int > NUMBER ) { ++ int ; } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( org.springframework.asm.ClassWriter . version & NUMBER ) < Opcodes . V1_5 || ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) != NUMBER ) { ++ int ; } } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { ++ int ; } if ( ClassReader . SIGNATURES && java.lang.String != null ) { ++ int ; } if ( org.springframework.asm.ByteVector != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.ByteVector != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter[] != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter[] != null ) { ++ int ; } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getCount ( ) ; } org.springframework.asm.ByteVector . putShort ( int ) ; if ( org.springframework.asm.ByteVector . length > NUMBER ) { int int = NUMBER + org.springframework.asm.ByteVector . length + NUMBER * int ; if ( org.springframework.asm.ByteVector != null ) { int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( org.springframework.asm.ByteVector != null ) { int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( org.springframework.asm.ByteVector != null ) { int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( org.springframework.asm.ByteVector != null ) { int += NUMBER + org.springframework.asm.ByteVector . length ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getSize ( org.springframework.asm.ClassWriter , org.springframework.asm.ByteVector . data , org.springframework.asm.ByteVector . length , int , int ) ; } org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) . putInt ( int ) ; org.springframework.asm.ByteVector . putShort ( int ) . putShort ( int ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length ) . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; org.springframework.asm.ByteVector . putShort ( int ) ; if ( int > NUMBER ) { Handler org.springframework.asm.Handler = org.springframework.asm.Handler ; while ( org.springframework.asm.Handler != null ) { org.springframework.asm.ByteVector . putShort ( h . start . position ) . putShort ( h . end . position ) . putShort ( h . handler . position ) . putShort ( h . type ) ; org.springframework.asm.Handler = h . next ; } } int = NUMBER ; if ( org.springframework.asm.ByteVector != null ) { ++ int ; } if ( org.springframework.asm.ByteVector != null ) { ++ int ; } if ( org.springframework.asm.ByteVector != null ) { ++ int ; } if ( org.springframework.asm.ByteVector != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getCount ( ) ; } org.springframework.asm.ByteVector . putShort ( int ) ; if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length + NUMBER ) . putShort ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length + NUMBER ) . putShort ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length + NUMBER ) . putShort ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( org.springframework.asm.ByteVector != null ) { boolean boolean = ( org.springframework.asm.ClassWriter . version & NUMBER ) >= Opcodes . V1_6 ; org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( boolean ? STRING : STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length + NUMBER ) . putShort ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( org.springframework.asm.Attribute != null ) { org.springframework.asm.Attribute . put ( org.springframework.asm.ClassWriter , org.springframework.asm.ByteVector . data , org.springframework.asm.ByteVector . length , int , int , org.springframework.asm.ByteVector ) ; } } if ( int > NUMBER ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) . putInt ( NUMBER * int + NUMBER ) ; org.springframework.asm.ByteVector . putShort ( int ) ; for ( int int = NUMBER ; int < int ; ++ int ) { org.springframework.asm.ByteVector . putShort ( int[] [ int ] ) ; } } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( org.springframework.asm.ClassWriter . version & NUMBER ) < Opcodes . V1_5 || ( int & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) != NUMBER ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) . putInt ( NUMBER ) ; } } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) . putInt ( NUMBER ) ; } if ( ClassReader . SIGNATURES && java.lang.String != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) . putInt ( NUMBER ) . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) ; } if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length + NUMBER ) . putByte ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.ByteVector != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter[] != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; AnnotationWriter . put ( org.springframework.asm.AnnotationWriter[] , int , org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter[] != null ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( STRING ) ) ; AnnotationWriter . put ( org.springframework.asm.AnnotationWriter[] , int , org.springframework.asm.ByteVector ) ; } if ( org.springframework.asm.Attribute != null ) { org.springframework.asm.Attribute . put ( org.springframework.asm.ClassWriter , null , NUMBER , - NUMBER , - NUMBER , org.springframework.asm.ByteVector ) ; } }  <METHOD_END>
