<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithTempReplyQueuesTests> ( ) ) ; RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; CachingConnectionFactory org.springframework.integration.jms.request_reply.CachingConnectionFactory = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( CachingConnectionFactory .class ) ; final JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; new java.lang.Thread ( ( ) { final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( org.springframework.integration.jms.request_reply.Destination ) ; Destination org.springframework.integration.jms.request_reply.Destination = null ; try { org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.Message . getJMSReplyTo ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( ) ; } org.springframework.integration.jms.request_reply.JmsTemplate . send ( org.springframework.integration.jms.request_reply.Destination , ( MessageCreator ) session -> { try { TextMessage message = session . createTextMessage ( ) ; message . setText ( STRING ) ; message . setJMSCorrelationID ( requestMessage . getJMSMessageID ( ) ) ; return message ; } catch ( Exception e ) { } return null ; } ) ; } ) . void ( ) ; org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithTempReplyQueuesTests> ( ) ) ; RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; ConnectionFactory org.springframework.integration.jms.request_reply.ConnectionFactory = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( ConnectionFactory .class ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; DefaultMessageListenerContainer org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer = new DefaultMessageListenerContainer ( ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . setConnectionFactory ( org.springframework.integration.jms.request_reply.ConnectionFactory ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . setDestination ( org.springframework.integration.jms.request_reply.Destination ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . setMessageListener ( ( SessionAwareMessageListener < Message > ) ( message , session ) -> { Destination replyTo = null ; try { replyTo = message . getJMSReplyTo ( ) ; } catch ( Exception e1 ) { fail ( ) ; } String requestPayload = ( String ) extractPayload ( message ) ; if ( requestPayload . equals ( STRING ) ) { try { Thread . sleep ( NUMBER ) ; } catch ( Exception e2 ) { } } try { TextMessage replyMessage = session . createTextMessage ( ) ; replyMessage . setText ( requestPayload ) ; replyMessage . setJMSCorrelationID ( message . getJMSMessageID ( ) ) ; MessageProducer producer = session . createProducer ( replyTo ) ; producer . send ( replyMessage ) ; } catch ( Exception e3 ) { } } ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . afterPropertiesSet ( ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . start ( ) ; try { org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } java.lang.Thread . void ( NUMBER ) ; try { assertEquals ( STRING , org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) . getPayload ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; fail ( ) ; } org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BrokerService org.springframework.integration.jms.request_reply.BrokerService = new BrokerService ( ) ; org.springframework.integration.jms.request_reply.BrokerService . setPersistent ( false ) ; org.springframework.integration.jms.request_reply.BrokerService . setUseJmx ( false ) ; org.springframework.integration.jms.request_reply.BrokerService . setTransportConnectorURIs ( new java.lang.String [] { STRING } ) ; org.springframework.integration.jms.request_reply.BrokerService . setDeleteAllMessagesOnStartup ( true ) ; org.springframework.integration.jms.request_reply.BrokerService . start ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithTempReplyQueuesTests> ( ) ) ; final RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; int int = NUMBER ; int int = NUMBER ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { try { assertEquals ( int + STRING , org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( java.lang.String . java.lang.String ( int ) ) ) . getPayload ( ) ) ; int ++ ; } catch ( java.lang.Exception java.lang.Exception ) { int ++ ; } if ( int == NUMBER || int == NUMBER || int == NUMBER ) { java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING ) , STRING ) ; if ( java.lang.Object != null ) { org.springframework.integration.jms.request_reply.BrokerService . removeDestination ( ( ActiveMQDestination ) java.lang.Object ) ; } } } assertEquals ( NUMBER , int + int ) ; org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithTempReplyQueuesTests> ( ) ) ; final RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; final int int = NUMBER ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { final int int = int ; java.util.concurrent.Executor . void ( ( ) { try { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( java.lang.String . java.lang.String ( int ) ) ) . getPayload ( ) ; if ( ! java.lang.String . java.lang.String ( int ) . boolean ( java.lang.String ) ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof MessageDeliveryException ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } else { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } java.util.concurrent.CountDownLatch . void ( ) ; } ) ; } java.util.concurrent.CountDownLatch . void ( ) ; void ( java.util.concurrent.atomic.AtomicInteger , java.util.concurrent.atomic.AtomicInteger , java.util.concurrent.atomic.AtomicInteger , int ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger , java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger , java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger , long long ) { org.springframework.integration.jms.request_reply.Log . info ( STRING ) ; org.springframework.integration.jms.request_reply.Log . info ( long + STRING ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.jms.request_reply.Log . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { int int = java.util.Random . int ( NUMBER ) ; java.lang.Thread . void ( int ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message org.springframework.integration.jms.request_reply.Message ) { try { return org.springframework.integration.jms.request_reply.SimpleMessageConverter . fromMessage ( org.springframework.integration.jms.request_reply.Message ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; fail ( ) ; } return null ; }  <METHOD_END>
