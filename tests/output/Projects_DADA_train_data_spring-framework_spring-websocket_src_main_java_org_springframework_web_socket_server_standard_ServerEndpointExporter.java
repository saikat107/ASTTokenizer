<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.util.List<java.lang.Class<?>> = java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ServerContainer org.springframework.web.socket.server.standard.ServerContainer ) { this . org.springframework.web.socket.server.standard.ServerContainer = org.springframework.web.socket.server.standard.ServerContainer ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.server.standard.ServerContainer org.springframework.web.socket.server.standard.ServerContainer ( ) { return this . org.springframework.web.socket.server.standard.ServerContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServletContext org.springframework.web.socket.server.standard.ServletContext ) { if ( this . org.springframework.web.socket.server.standard.ServerContainer == null ) { this . org.springframework.web.socket.server.standard.ServerContainer = ( ServerContainer ) org.springframework.web.socket.server.standard.ServletContext . getAttribute ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . state ( org.springframework.web.socket.server.standard.ServerContainer ( ) != null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>> <> ( ) ; if ( this . java.util.List<java.lang.Class<?>> != null ) { java.util.Set<java.lang.Class<?>> . boolean ( this . java.util.List<java.lang.Class<?>> ) ; } ApplicationContext org.springframework.web.socket.server.standard.ApplicationContext = getApplicationContext ( ) ; if ( org.springframework.web.socket.server.standard.ApplicationContext != null ) { java.lang.String [] java.lang.String[] = org.springframework.web.socket.server.standard.ApplicationContext . getBeanNamesForAnnotation ( ServerEndpoint .class ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<java.lang.Class<?>> . boolean ( org.springframework.web.socket.server.standard.ApplicationContext . getType ( java.lang.String ) ) ; } } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { void ( java.lang.Class<> ) ; } if ( org.springframework.web.socket.server.standard.ApplicationContext != null ) { java.util.Map<java.lang.String,org.springframework.web.socket.server.standard.ServerEndpointConfig> < java.lang.String , ServerEndpointConfig > java.util.Map<java.lang.String,org.springframework.web.socket.server.standard.ServerEndpointConfig> = org.springframework.web.socket.server.standard.ApplicationContext . getBeansOfType ( ServerEndpointConfig .class ) ; for ( ServerEndpointConfig org.springframework.web.socket.server.standard.ServerEndpointConfig : java.util.Map<java.lang.String,org.springframework.web.socket.server.standard.ServerEndpointConfig> . values ( ) ) { void ( org.springframework.web.socket.server.standard.ServerEndpointConfig ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { try { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.Class<> ) ; } org.springframework.web.socket.server.standard.ServerContainer ( ) . addEndpoint ( java.lang.Class<> ) ; } catch ( DeploymentException org.springframework.web.socket.server.standard.DeploymentException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> , org.springframework.web.socket.server.standard.DeploymentException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ServerEndpointConfig org.springframework.web.socket.server.standard.ServerEndpointConfig ) { try { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.web.socket.server.standard.ServerEndpointConfig ) ; } org.springframework.web.socket.server.standard.ServerContainer ( ) . addEndpoint ( org.springframework.web.socket.server.standard.ServerEndpointConfig ) ; } catch ( DeploymentException org.springframework.web.socket.server.standard.DeploymentException ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.socket.server.standard.ServerEndpointConfig , org.springframework.web.socket.server.standard.DeploymentException ) ; } }  <METHOD_END>
