<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { return java.lang.Object ( java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { Assert . notNull ( java.lang.String , STRING ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; T T ; try { T = getJndiTemplate ( ) . lookup ( java.lang.String , java.lang.Class<T> ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { if ( ! java.lang.String . boolean ( java.lang.String ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING + javax.naming.NamingException ) ; } T = getJndiTemplate ( ) . lookup ( java.lang.String , java.lang.Class<T> ) ; } else { throw javax.naming.NamingException ; } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return T ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( boolean ( ) && ! java.lang.String . boolean ( java.lang.String ) && java.lang.String . int ( ':' ) == - NUMBER ) { java.lang.String = java.lang.String + java.lang.String ; } return java.lang.String ; }  <METHOD_END>
