<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . javax.script.ScriptEngineManager = new javax.script.ScriptEngineManager ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.script.ScriptEngineManager javax.script.ScriptEngineManager ) { this . javax.script.ScriptEngineManager = javax.script.ScriptEngineManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { this . javax.script.ScriptEngineManager . void ( StandardScriptUtils . getBindings ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( this . javax.script.ScriptEngineManager == null ) { this . javax.script.ScriptEngineManager = new javax.script.ScriptEngineManager ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.support.ScriptSource ) { return java.lang.Object ( org.springframework.scripting.support.ScriptSource , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.support.ScriptSource , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { javax.script.ScriptEngine javax.script.ScriptEngine = javax.script.ScriptEngine ( org.springframework.scripting.support.ScriptSource ) ; try { if ( CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.Object> ) ) { return javax.script.ScriptEngine . java.lang.Object ( org.springframework.scripting.support.ScriptSource . getScriptAsString ( ) ) ; } else { javax.script.Bindings javax.script.Bindings = StandardScriptUtils . getBindings ( java.util.Map<java.lang.String,java.lang.Object> ) ; return javax.script.ScriptEngine . java.lang.Object ( org.springframework.scripting.support.ScriptSource . getScriptAsString ( ) , javax.script.Bindings ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new ScriptCompilationException ( org.springframework.scripting.support.ScriptSource , STRING , java.io.IOException ) ; } catch ( javax.script.ScriptException javax.script.ScriptException ) { throw new ScriptCompilationException ( org.springframework.scripting.support.ScriptSource , new StandardScriptEvalException ( javax.script.ScriptException ) ) ; } }  <METHOD_END>
<METHOD_START> protected javax.script.ScriptEngine javax.script.ScriptEngine ( ScriptSource org.springframework.scripting.support.ScriptSource ) { if ( this . javax.script.ScriptEngineManager == null ) { this . javax.script.ScriptEngineManager = new javax.script.ScriptEngineManager ( ) ; } if ( StringUtils . hasText ( this . java.lang.String ) ) { return StandardScriptUtils . retrieveEngineByName ( this . javax.script.ScriptEngineManager , this . java.lang.String ) ; } else if ( org.springframework.scripting.support.ScriptSource instanceof ResourceScriptSource ) { Resource org.springframework.scripting.support.Resource = ( ( ResourceScriptSource ) org.springframework.scripting.support.ScriptSource ) . getResource ( ) ; java.lang.String java.lang.String = StringUtils . getFilenameExtension ( org.springframework.scripting.support.Resource . getFilename ( ) ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.scripting.support.Resource ) ; } javax.script.ScriptEngine javax.script.ScriptEngine = this . javax.script.ScriptEngineManager . javax.script.ScriptEngine ( java.lang.String ) ; if ( javax.script.ScriptEngine == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } return javax.script.ScriptEngine ; } else { throw new java.lang.IllegalStateException ( STRING + org.springframework.scripting.support.ScriptSource ) ; } }  <METHOD_END>
