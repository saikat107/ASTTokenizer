<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . add ( HttpHeaders . CACHE_CONTROL , STRING ) ; org.springframework.http.HttpHeaders . add ( HttpHeaders . CACHE_CONTROL , STRING ) ; assertThat ( org.springframework.http.HttpHeaders . getFirst ( HttpHeaders . CACHE_CONTROL ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MediaType org.springframework.http.MediaType = new MediaType ( STRING , STRING ) ; MediaType org.springframework.http.MediaType = new MediaType ( STRING , STRING ) ; java.util.List<org.springframework.http.MediaType> < MediaType > java.util.List<org.springframework.http.MediaType> = new java.util.ArrayList<org.springframework.http.MediaType> <> ( NUMBER ) ; java.util.List<org.springframework.http.MediaType> . add ( org.springframework.http.MediaType ) ; java.util.List<org.springframework.http.MediaType> . add ( org.springframework.http.MediaType ) ; org.springframework.http.HttpHeaders . setAccept ( java.util.List<org.springframework.http.MediaType> ) ; assertEquals ( STRING , java.util.List<org.springframework.http.MediaType> , org.springframework.http.HttpHeaders . getAccept ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . add ( STRING , STRING ) ; org.springframework.http.HttpHeaders . add ( STRING , STRING ) ; java.util.List<org.springframework.http.MediaType> < MediaType > java.util.List<org.springframework.http.MediaType> = java.util.Arrays . java.util.List ( new MediaType ( STRING , STRING ) , new MediaType ( STRING , STRING ) ) ; assertEquals ( STRING , java.util.List<org.springframework.http.MediaType> , org.springframework.http.HttpHeaders . getAccept ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . add ( STRING , STRING ) ; org.springframework.http.HttpHeaders . add ( STRING , STRING ) ; java.util.List<org.springframework.http.MediaType> < MediaType > java.util.List<org.springframework.http.MediaType> = java.util.Arrays . java.util.List ( new MediaType ( STRING , STRING ) , new MediaType ( STRING , STRING ) , new MediaType ( STRING , STRING ) , new MediaType ( STRING , STRING ) ) ; assertEquals ( STRING , java.util.List<org.springframework.http.MediaType> , org.springframework.http.HttpHeaders . getAccept ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.StandardCharsets . java.nio.charset.Charset ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.StandardCharsets . java.nio.charset.Charset ; java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> = new java.util.ArrayList<java.nio.charset.Charset> <> ( NUMBER ) ; java.util.List<java.nio.charset.Charset> . boolean ( java.nio.charset.Charset ) ; java.util.List<java.nio.charset.Charset> . boolean ( java.nio.charset.Charset ) ; org.springframework.http.HttpHeaders . setAcceptCharset ( java.util.List<java.nio.charset.Charset> ) ; assertEquals ( STRING , java.util.List<java.nio.charset.Charset> , org.springframework.http.HttpHeaders . getAcceptCharset ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . set ( STRING , STRING ) ; assertEquals ( STRING , java.util.Arrays . java.util.List<java.nio.charset.Charset> ( java.nio.charset.StandardCharsets . java.nio.charset.Charset , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.HttpHeaders . getAcceptCharset ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.EnumSet<org.springframework.http.HttpMethod> < HttpMethod > java.util.EnumSet<org.springframework.http.HttpMethod> = java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . POST ) ; org.springframework.http.HttpHeaders . setAllow ( java.util.EnumSet<org.springframework.http.HttpMethod> ) ; assertEquals ( STRING , java.util.EnumSet<org.springframework.http.HttpMethod> , org.springframework.http.HttpHeaders . getAllow ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = NUMBER ; org.springframework.http.HttpHeaders . setContentLength ( long ) ; assertEquals ( STRING , long , org.springframework.http.HttpHeaders . getContentLength ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MediaType org.springframework.http.MediaType = new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; org.springframework.http.HttpHeaders . setContentType ( org.springframework.http.MediaType ) ; assertEquals ( STRING , org.springframework.http.MediaType , org.springframework.http.HttpHeaders . getContentType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; org.springframework.http.HttpHeaders . setLocation ( java.net.URI ) ; assertEquals ( STRING , java.net.URI , org.springframework.http.HttpHeaders . getLocation ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setETag ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , org.springframework.http.HttpHeaders . getETag ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.net.InetSocketAddress java.net.InetSocketAddress = java.net.InetSocketAddress . java.net.InetSocketAddress ( STRING , NUMBER ) ; org.springframework.http.HttpHeaders . setHost ( java.net.InetSocketAddress ) ; assertEquals ( STRING , java.net.InetSocketAddress , org.springframework.http.HttpHeaders . getHost ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.net.InetSocketAddress java.net.InetSocketAddress = java.net.InetSocketAddress . java.net.InetSocketAddress ( STRING , NUMBER ) ; org.springframework.http.HttpHeaders . setHost ( java.net.InetSocketAddress ) ; assertEquals ( STRING , java.net.InetSocketAddress , org.springframework.http.HttpHeaders . getHost ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setETag ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , org.springframework.http.HttpHeaders . getETag ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setIfMatch ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , org.springframework.http.HttpHeaders . getIfMatch ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.http.HttpHeaders . setIfMatch ( STRING ) ; org.springframework.http.HttpHeaders . getIfMatch ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . add ( HttpHeaders . IF_MATCH , STRING ) ; org.springframework.http.HttpHeaders . add ( HttpHeaders . IF_MATCH , STRING ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . get ( HttpHeaders . IF_MATCH ) . get ( NUMBER ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . get ( HttpHeaders . IF_MATCH ) . get ( NUMBER ) ) ; assertThat ( org.springframework.http.HttpHeaders . getIfMatch ( ) , Matchers . contains ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setIfNoneMatch ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , org.springframework.http.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setIfNoneMatch ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , org.springframework.http.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( NUMBER ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; org.springframework.http.HttpHeaders . setIfNoneMatch ( java.util.List<java.lang.String> ) ; assertThat ( org.springframework.http.HttpHeaders . getIfNoneMatch ( ) , Matchers . contains ( STRING , STRING , STRING ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; long long = java.util.Calendar . long ( ) ; org.springframework.http.HttpHeaders . setDate ( long ) ; assertEquals ( STRING , long , org.springframework.http.HttpHeaders . getDate ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; org.springframework.http.HttpHeaders . set ( STRING , STRING ) ; assertEquals ( STRING , long , org.springframework.http.HttpHeaders . getDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.http.HttpHeaders . set ( STRING , STRING ) ; org.springframework.http.HttpHeaders . getDate ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ( ) ; try { java.util.Locale . void ( new java.util.Locale ( STRING , STRING ) ) ; java.util.Calendar java.util.Calendar = new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; long long = java.util.Calendar . long ( ) ; org.springframework.http.HttpHeaders . setDate ( long ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , long , org.springframework.http.HttpHeaders . getDate ( ) ) ; } finally { java.util.Locale . void ( java.util.Locale ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; long long = java.util.Calendar . long ( ) ; org.springframework.http.HttpHeaders . setLastModified ( long ) ; assertEquals ( STRING , long , org.springframework.http.HttpHeaders . getLastModified ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; long long = java.util.Calendar . long ( ) ; org.springframework.http.HttpHeaders . setExpires ( long ) ; assertEquals ( STRING , long , org.springframework.http.HttpHeaders . getExpires ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . set ( STRING , STRING ) ; assertEquals ( - NUMBER , org.springframework.http.HttpHeaders . getExpires ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; long long = java.util.Calendar . long ( ) ; org.springframework.http.HttpHeaders . setIfModifiedSince ( long ) ; assertEquals ( STRING , long , org.springframework.http.HttpHeaders . getIfModifiedSince ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . set ( HttpHeaders . IF_MODIFIED_SINCE , STRING ) ; assertEquals ( - NUMBER , org.springframework.http.HttpHeaders . getIfModifiedSince ( ) ) ; org.springframework.http.HttpHeaders . set ( HttpHeaders . IF_MODIFIED_SINCE , STRING ) ; assertEquals ( - NUMBER , org.springframework.http.HttpHeaders . getIfModifiedSince ( ) ) ; org.springframework.http.HttpHeaders . set ( HttpHeaders . IF_MODIFIED_SINCE , STRING ) ; assertEquals ( - NUMBER , org.springframework.http.HttpHeaders . getIfModifiedSince ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setPragma ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , org.springframework.http.HttpHeaders . getPragma ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setCacheControl ( java.lang.String ) ; assertEquals ( STRING , java.lang.String , org.springframework.http.HttpHeaders . getCacheControl ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . add ( HttpHeaders . CACHE_CONTROL , STRING ) ; org.springframework.http.HttpHeaders . add ( HttpHeaders . CACHE_CONTROL , STRING ) ; assertThat ( org.springframework.http.HttpHeaders . getCacheControl ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentDisposition org.springframework.http.ContentDisposition = org.springframework.http.HttpHeaders . getContentDisposition ( ) ; assertNotNull ( org.springframework.http.ContentDisposition ) ; assertEquals ( STRING , ContentDisposition . empty ( ) , org.springframework.http.HttpHeaders . getContentDisposition ( ) ) ; org.springframework.http.ContentDisposition = ContentDisposition . builder ( STRING ) . name ( STRING ) . filename ( STRING ) . size ( NUMBER ) . build ( ) ; org.springframework.http.HttpHeaders . setContentDisposition ( org.springframework.http.ContentDisposition ) ; assertEquals ( STRING , org.springframework.http.ContentDisposition , org.springframework.http.HttpHeaders . getContentDisposition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . setAllow ( java.util.Collections .< HttpMethod > java.util.Set<org.springframework.http.HttpMethod> ( ) ) ; assertThat ( org.springframework.http.HttpHeaders . getAllow ( ) , Matchers . emptyCollectionOf ( HttpMethod .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.http.HttpHeaders . getAccessControlAllowCredentials ( ) ) ; org.springframework.http.HttpHeaders . setAccessControlAllowCredentials ( false ) ; assertFalse ( org.springframework.http.HttpHeaders . getAccessControlAllowCredentials ( ) ) ; org.springframework.http.HttpHeaders . setAccessControlAllowCredentials ( true ) ; assertTrue ( org.springframework.http.HttpHeaders . getAccessControlAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlAllowHeaders ( ) ; assertThat ( java.util.List<java.lang.String> , Matchers . emptyCollectionOf ( java.lang.String .class ) ) ; org.springframework.http.HttpHeaders . setAccessControlAllowHeaders ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlAllowHeaders ( ) ; assertEquals ( java.util.List<java.lang.String> , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlAllowHeaders ( ) ; assertThat ( java.util.List<java.lang.String> , Matchers . emptyCollectionOf ( java.lang.String .class ) ) ; org.springframework.http.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_ALLOW_HEADERS , STRING ) ; org.springframework.http.HttpHeaders . add ( HttpHeaders . ACCESS_CONTROL_ALLOW_HEADERS , STRING ) ; java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlAllowHeaders ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.http.HttpMethod> < HttpMethod > java.util.List<org.springframework.http.HttpMethod> = org.springframework.http.HttpHeaders . getAccessControlAllowMethods ( ) ; assertThat ( java.util.List<org.springframework.http.HttpMethod> , Matchers . emptyCollectionOf ( HttpMethod .class ) ) ; org.springframework.http.HttpHeaders . setAccessControlAllowMethods ( java.util.Arrays . java.util.List ( HttpMethod . GET , HttpMethod . POST ) ) ; java.util.List<org.springframework.http.HttpMethod> = org.springframework.http.HttpHeaders . getAccessControlAllowMethods ( ) ; assertEquals ( java.util.List<org.springframework.http.HttpMethod> , java.util.Arrays . java.util.List ( HttpMethod . GET , HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.http.HttpHeaders . getAccessControlAllowOrigin ( ) ) ; org.springframework.http.HttpHeaders . setAccessControlAllowOrigin ( STRING ) ; assertEquals ( STRING , org.springframework.http.HttpHeaders . getAccessControlAllowOrigin ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlExposeHeaders ( ) ; assertThat ( java.util.List<java.lang.String> , Matchers . emptyCollectionOf ( java.lang.String .class ) ) ; org.springframework.http.HttpHeaders . setAccessControlExposeHeaders ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlExposeHeaders ( ) ; assertEquals ( java.util.List<java.lang.String> , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( - NUMBER , org.springframework.http.HttpHeaders . getAccessControlMaxAge ( ) ) ; org.springframework.http.HttpHeaders . setAccessControlMaxAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.http.HttpHeaders . getAccessControlMaxAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlRequestHeaders ( ) ; assertThat ( java.util.List<java.lang.String> , Matchers . emptyCollectionOf ( java.lang.String .class ) ) ; org.springframework.http.HttpHeaders . setAccessControlRequestHeaders ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.List<java.lang.String> = org.springframework.http.HttpHeaders . getAccessControlRequestHeaders ( ) ; assertEquals ( java.util.List<java.lang.String> , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.http.HttpHeaders . getAccessControlRequestMethod ( ) ) ; org.springframework.http.HttpHeaders . setAccessControlRequestMethod ( HttpMethod . POST ) ; assertEquals ( HttpMethod . POST , org.springframework.http.HttpHeaders . getAccessControlRequestMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.http.HttpHeaders . setAcceptLanguage ( java.util.Locale . java.util.Locale.LanguageRange . java.util.List<java.util.Locale.LanguageRange> ( java.lang.String ) ) ; assertEquals ( java.lang.String , org.springframework.http.HttpHeaders . getFirst ( HttpHeaders . ACCEPT_LANGUAGE ) ) ; java.util.List<java.util.Locale.LanguageRange> < java.util.Locale . java.util.Locale.LanguageRange > java.util.List<java.util.Locale.LanguageRange> = java.util.Arrays . java.util.List<java.util.Locale.LanguageRange> ( new java.util.Locale . java.util.Locale.LanguageRange ( STRING ) , new java.util.Locale . java.util.Locale.LanguageRange ( STRING , NUMBER ) , new java.util.Locale . java.util.Locale.LanguageRange ( STRING , NUMBER ) , new java.util.Locale . java.util.Locale.LanguageRange ( STRING , NUMBER ) , new java.util.Locale . java.util.Locale.LanguageRange ( STRING , NUMBER ) ) ; assertEquals ( java.util.List<java.util.Locale.LanguageRange> , org.springframework.http.HttpHeaders . getAcceptLanguage ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale ( STRING ) , org.springframework.http.HttpHeaders . getAcceptLanguageAsLocale ( ) ) ; org.springframework.http.HttpHeaders . setAcceptLanguageAsLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.http.HttpHeaders . getAcceptLanguageAsLocale ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . setContentLanguage ( java.util.Locale . java.util.Locale ) ; assertEquals ( java.util.Locale . java.util.Locale , org.springframework.http.HttpHeaders . getContentLanguage ( ) ) ; assertEquals ( STRING , org.springframework.http.HttpHeaders . getFirst ( HttpHeaders . CONTENT_LANGUAGE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.HttpHeaders . set ( HttpHeaders . CONTENT_LANGUAGE , STRING ) ; assertEquals ( STRING , java.util.Locale . java.util.Locale , org.springframework.http.HttpHeaders . getContentLanguage ( ) ) ; }  <METHOD_END>
