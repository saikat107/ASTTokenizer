<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new AspectMetadata ( java.lang.String .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AspectMetadata org.springframework.aop.aspectj.annotation.AspectMetadata = new AspectMetadata ( ExceptionAspect .class , STRING ) ; assertFalse ( org.springframework.aop.aspectj.annotation.AspectMetadata . isPerThisOrPerTarget ( ) ) ; assertSame ( Pointcut . TRUE , org.springframework.aop.aspectj.annotation.AspectMetadata . getPerClausePointcut ( ) ) ; assertEquals ( PerClauseKind . SINGLETON , org.springframework.aop.aspectj.annotation.AspectMetadata . getAjType ( ) . getPerClause ( ) . getKind ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AspectMetadata org.springframework.aop.aspectj.annotation.AspectMetadata = new AspectMetadata ( PerTargetAspect .class , STRING ) ; assertTrue ( org.springframework.aop.aspectj.annotation.AspectMetadata . isPerThisOrPerTarget ( ) ) ; assertNotSame ( Pointcut . TRUE , org.springframework.aop.aspectj.annotation.AspectMetadata . getPerClausePointcut ( ) ) ; assertEquals ( PerClauseKind . PERTARGET , org.springframework.aop.aspectj.annotation.AspectMetadata . getAjType ( ) . getPerClause ( ) . getKind ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AspectMetadata org.springframework.aop.aspectj.annotation.AspectMetadata = new AspectMetadata ( PerThisAspect .class , STRING ) ; assertTrue ( org.springframework.aop.aspectj.annotation.AspectMetadata . isPerThisOrPerTarget ( ) ) ; assertNotSame ( Pointcut . TRUE , org.springframework.aop.aspectj.annotation.AspectMetadata . getPerClausePointcut ( ) ) ; assertEquals ( PerClauseKind . PERTHIS , org.springframework.aop.aspectj.annotation.AspectMetadata . getAjType ( ) . getPerClause ( ) . getKind ( ) ) ; }  <METHOD_END>
