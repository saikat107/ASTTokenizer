<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , HttpStatus org.springframework.web.reactive.result.view.HttpStatus ) { super( java.lang.String ); void ( org.springframework.web.reactive.result.view.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( HttpStatus org.springframework.web.reactive.result.view.HttpStatus ) { Assert . notNull ( org.springframework.web.reactive.result.view.HttpStatus , STRING ) ; Assert . isTrue ( org.springframework.web.reactive.result.view.HttpStatus . is3xxRedirection ( ) , STRING ) ; this . org.springframework.web.reactive.result.view.HttpStatus = org.springframework.web.reactive.result.view.HttpStatus ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.view.HttpStatus org.springframework.web.reactive.result.view.HttpStatus ( ) { return this . org.springframework.web.reactive.result.view.HttpStatus ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; if ( org.springframework.web.reactive.result.view.HttpStatus ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Locale java.util.Locale ) throws java.lang.Exception { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.view.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.view.Mono<java.lang.Void> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , MediaType org.springframework.web.reactive.result.view.MediaType , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { java.lang.String java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.reactive.result.view.ServerWebExchange ) ; return org.springframework.web.reactive.result.view.Mono<java.lang.Void> ( java.lang.String , org.springframework.web.reactive.result.view.ServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> protected final java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( boolean ( ) && getUrl ( ) . startsWith ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.web.reactive.result.view.ServerWebExchange . getRequest ( ) . getContextPath ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( getUrl ( ) ) ; if ( StringUtils . hasText ( java.lang.StringBuilder ) ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.view.ServerWebExchange ) ; java.lang.StringBuilder = java.lang.StringBuilder ( java.lang.StringBuilder . java.lang.String ( ) , java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.String> ) ; } if ( boolean ( ) ) { java.lang.StringBuilder = java.lang.StringBuilder ( java.lang.StringBuilder . java.lang.String ( ) , org.springframework.web.reactive.result.view.ServerWebExchange . getRequest ( ) ) ; } java.lang.String java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; RequestDataValueProcessor org.springframework.web.reactive.result.view.RequestDataValueProcessor = getRequestDataValueProcessor ( ) ; return ( org.springframework.web.reactive.result.view.RequestDataValueProcessor != null ? org.springframework.web.reactive.result.view.RequestDataValueProcessor . processUrl ( org.springframework.web.reactive.result.view.ServerWebExchange , java.lang.String ) : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; return ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.reactive.result.view.ServerWebExchange . getAttribute ( java.lang.String ) . orElse ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; boolean boolean = java.util.regex.Matcher . boolean ( ) ; if ( ! boolean ) { return new java.lang.StringBuilder ( java.lang.String ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; int int = NUMBER ; while ( boolean ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.Object java.lang.Object = ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ? java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) : java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ) ; Assert . notNull ( java.lang.Object , STRING + java.lang.String + STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( int , java.util.regex.Matcher . int ( ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object . java.lang.String ( ) ) ) ; int = java.util.regex.Matcher . int ( ) ; boolean = java.util.regex.Matcher . boolean ( ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( int , java.lang.String . int ( ) ) ) ; return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { return UriUtils . encode ( java.lang.String , java.nio.charset.StandardCharsets . java.nio.charset.Charset . java.lang.String ( ) ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalStateException ( java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.String java.lang.String , ServerHttpRequest org.springframework.web.reactive.result.view.ServerHttpRequest ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.view.ServerHttpRequest . getURI ( ) . getRawQuery ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return new java.lang.StringBuilder ( java.lang.String ) ; } int int = java.lang.String . int ( STRING ) ; java.lang.String java.lang.String = ( int > - NUMBER ? java.lang.String . java.lang.String ( int ) : null ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( int != - NUMBER ? java.lang.String . java.lang.String ( NUMBER , int ) : java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . int ( '?' ) < NUMBER ? '?' : '&' ) . java.lang.StringBuilder ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.view.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.view.Mono<java.lang.Void> ( java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { ServerHttpResponse org.springframework.web.reactive.result.view.ServerHttpResponse = org.springframework.web.reactive.result.view.ServerWebExchange . getResponse ( ) ; java.lang.String java.lang.String = ( boolean ( java.lang.String ) ? java.lang.String : org.springframework.web.reactive.result.view.ServerHttpResponse . encodeUrl ( java.lang.String ) ) ; org.springframework.web.reactive.result.view.ServerHttpResponse . getHeaders ( ) . setLocation ( java.net.URI . java.net.URI ( java.lang.String ) ) ; org.springframework.web.reactive.result.view.ServerHttpResponse . setStatusCode ( org.springframework.web.reactive.result.view.HttpStatus ( ) ) ; return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( ObjectUtils . isEmpty ( this . java.lang.String[] ) ) { return false ; } java.lang.String java.lang.String = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) . getHost ( ) ; if ( StringUtils . isEmpty ( java.lang.String ) ) { return false ; } for ( java.lang.String java.lang.String : this . java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return false ; } } return true ; }  <METHOD_END>
