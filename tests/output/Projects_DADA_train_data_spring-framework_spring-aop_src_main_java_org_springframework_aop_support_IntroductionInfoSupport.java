<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return this . java.util.Set<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ this . java.util.Set<java.lang.Class<?>> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : this . java.util.Set<java.lang.Class<?>> ) { if ( java.lang.Class<> . boolean ( ) && java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { this . java.util.Set<java.lang.Class<?>> . boolean ( ClassUtils . getAllInterfacesAsSet ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( MethodInvocation org.springframework.aop.support.MethodInvocation ) { java.lang.Boolean java.lang.Boolean = this . java.util.Map<java.lang.reflect.Method,java.lang.Boolean> . java.lang.Boolean ( org.springframework.aop.support.MethodInvocation . getMethod ( ) ) ; if ( java.lang.Boolean != null ) { return java.lang.Boolean ; } else { boolean boolean = boolean ( org.springframework.aop.support.MethodInvocation . getMethod ( ) . getDeclaringClass ( ) ) ; this . java.util.Map<java.lang.reflect.Method,java.lang.Boolean> . java.lang.Boolean ( org.springframework.aop.support.MethodInvocation . getMethod ( ) , boolean ) ; return boolean ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; this . java.util.Map<java.lang.reflect.Method,java.lang.Boolean> = new java.util.concurrent.ConcurrentHashMap<java.lang.reflect.Method,java.lang.Boolean> <> ( NUMBER ) ; }  <METHOD_END>
