<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this( java.util.Map<java.lang.String,java.lang.Object> , null ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.security.Principal java.security.Principal ) { super( java.util.Map<java.lang.String,java.lang.Object> ); this . java.security.Principal = java.security.Principal ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { checkNativeSessionInitialized ( ) ; return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { checkNativeSessionInitialized ( ) ; return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.adapter.jetty.HttpHeaders org.springframework.web.socket.adapter.jetty.HttpHeaders ( ) { checkNativeSessionInitialized ( ) ; return this . org.springframework.web.socket.adapter.jetty.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { checkNativeSessionInitialized ( ) ; return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> ( ) { checkNativeSessionInitialized ( ) ; return this . java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return this . java.security.Principal ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { checkNativeSessionInitialized ( ) ; return getNativeSession ( ) . getLocalAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { checkNativeSessionInitialized ( ) ; return getNativeSession ( ) . getRemoteAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { checkNativeSessionInitialized ( ) ; getNativeSession ( ) . getPolicy ( ) . setMaxTextMessageSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { checkNativeSessionInitialized ( ) ; return getNativeSession ( ) . getPolicy ( ) . getMaxTextMessageSize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { checkNativeSessionInitialized ( ) ; getNativeSession ( ) . getPolicy ( ) . setMaxBinaryMessageSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { checkNativeSessionInitialized ( ) ; return getNativeSession ( ) . getPolicy ( ) . getMaxBinaryMessageSize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( getNativeSession ( ) != null && getNativeSession ( ) . isOpen ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Session org.springframework.web.socket.adapter.jetty.Session ) { super. initializeNativeSession ( org.springframework.web.socket.adapter.jetty.Session ) ; this . java.lang.String = ObjectUtils . getIdentityHexString ( getNativeSession ( ) ) ; this . java.net.URI = org.springframework.web.socket.adapter.jetty.Session . getUpgradeRequest ( ) . getRequestURI ( ) ; HttpHeaders org.springframework.web.socket.adapter.jetty.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.socket.adapter.jetty.HttpHeaders . putAll ( org.springframework.web.socket.adapter.jetty.Session . getUpgradeRequest ( ) . getHeaders ( ) ) ; this . org.springframework.web.socket.adapter.jetty.HttpHeaders = HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.socket.adapter.jetty.HttpHeaders ) ; this . java.lang.String = org.springframework.web.socket.adapter.jetty.Session . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) ; java.util.List<org.springframework.web.socket.adapter.jetty.ExtensionConfig> < ExtensionConfig > java.util.List<org.springframework.web.socket.adapter.jetty.ExtensionConfig> = org.springframework.web.socket.adapter.jetty.Session . getUpgradeResponse ( ) . getExtensions ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.socket.adapter.jetty.ExtensionConfig> ) ) { java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.socket.adapter.jetty.ExtensionConfig> . size ( ) ) ; for ( ExtensionConfig org.springframework.web.socket.adapter.jetty.ExtensionConfig : java.util.List<org.springframework.web.socket.adapter.jetty.ExtensionConfig> ) { java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> . add ( new WebSocketExtension ( org.springframework.web.socket.adapter.jetty.ExtensionConfig . getName ( ) , org.springframework.web.socket.adapter.jetty.ExtensionConfig . getParameters ( ) ) ) ; } this . java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> = java.util.Collections . java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> ( java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> ) ; } else { this . java.util.List<org.springframework.web.socket.adapter.jetty.WebSocketExtension> = java.util.Collections . java.util.List<java.lang.Object> ( ) ; } if ( this . java.security.Principal == null ) { this . java.security.Principal = org.springframework.web.socket.adapter.jetty.Session . getUpgradeRequest ( ) . getUserPrincipal ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TextMessage org.springframework.web.socket.adapter.jetty.TextMessage ) throws java.io.IOException { org.springframework.web.socket.adapter.jetty.RemoteEndpoint ( ) . sendString ( org.springframework.web.socket.adapter.jetty.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BinaryMessage org.springframework.web.socket.adapter.jetty.BinaryMessage ) throws java.io.IOException { org.springframework.web.socket.adapter.jetty.RemoteEndpoint ( ) . sendBytes ( org.springframework.web.socket.adapter.jetty.BinaryMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( PingMessage org.springframework.web.socket.adapter.jetty.PingMessage ) throws java.io.IOException { org.springframework.web.socket.adapter.jetty.RemoteEndpoint ( ) . sendPing ( org.springframework.web.socket.adapter.jetty.PingMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( PongMessage org.springframework.web.socket.adapter.jetty.PongMessage ) throws java.io.IOException { org.springframework.web.socket.adapter.jetty.RemoteEndpoint ( ) . sendPong ( org.springframework.web.socket.adapter.jetty.PongMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.adapter.jetty.RemoteEndpoint org.springframework.web.socket.adapter.jetty.RemoteEndpoint ( ) java.io.IOException { try { return getNativeSession ( ) . getRemote ( ) ; } catch ( WebSocketException org.springframework.web.socket.adapter.jetty.WebSocketException ) { throw new java.io.IOException ( STRING + java.lang.String ( ) , org.springframework.web.socket.adapter.jetty.WebSocketException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CloseStatus org.springframework.web.socket.adapter.jetty.CloseStatus ) throws java.io.IOException { getNativeSession ( ) . close ( org.springframework.web.socket.adapter.jetty.CloseStatus . getCode ( ) , org.springframework.web.socket.adapter.jetty.CloseStatus . getReason ( ) ) ; }  <METHOD_END>
