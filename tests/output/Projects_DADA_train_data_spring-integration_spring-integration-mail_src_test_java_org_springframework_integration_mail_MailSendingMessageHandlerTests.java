<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.integration.mail.StubJavaMailSender = new StubJavaMailSender ( new MimeMessage ( ( Session ) null ) ) ; this . org.springframework.integration.mail.MailSendingMessageHandler = new MailSendingMessageHandler ( this . org.springframework.integration.mail.StubJavaMailSender ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.mail.StubJavaMailSender . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mail.MailSendingMessageHandler . handleMessage ( MailTestsHelper . createIntegrationMessage ( ) ) ; SimpleMailMessage org.springframework.integration.mail.SimpleMailMessage = MailTestsHelper . createSimpleMailMessage ( ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.mail.StubJavaMailSender . getSentMimeMessages ( ) . size ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.mail.SimpleMailMessage , org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = { NUMBER , NUMBER , NUMBER } ; org . springframework . org.springframework.messaging . org.springframework.messaging < byte [] > message = MessageBuilder . withPayload ( byte[] ) . setHeader ( MailHeaders . ATTACHMENT_FILENAME , STRING ) . setHeader ( MailHeaders . TO , MailTestsHelper . TO ) . build ( ) ; this . org.springframework.integration.mail.MailSendingMessageHandler . handleMessage ( message ) ; byte [] byte[] = new byte [ NUMBER ] ; MimeMessage org.springframework.integration.mail.MimeMessage = this . org.springframework.integration.mail.StubJavaMailSender . getSentMimeMessages ( ) . get ( NUMBER ) ; assertTrue ( STRING , org.springframework.integration.mail.MimeMessage . getContent ( ) instanceof Multipart ) ; int int = new java.io.DataInputStream ( ( ( Multipart ) org.springframework.integration.mail.MimeMessage . getContent ( ) ) . getBodyPart ( NUMBER ) . getInputStream ( ) ) . int ( byte[] ) ; assertEquals ( STRING , byte[] . int , int ) ; byte [] byte[] = new byte [ int ] ; java.lang.System . void ( byte[] , NUMBER , byte[] , NUMBER , byte[] . int ) ; assertArrayEquals ( STRING , byte[] , byte[] ) ; assertEquals ( org.springframework.integration.mail.MimeMessage . getRecipients ( Message . RecipientType . TO ) . length , MailTestsHelper . TO . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.mail.MailSendingMessageHandler . handleMessage ( MailTestsHelper . createIntegrationMessage ( ) ) ; SimpleMailMessage org.springframework.integration.mail.SimpleMailMessage = MailTestsHelper . createSimpleMailMessage ( ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.mail.StubJavaMailSender . getSentMimeMessages ( ) . size ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.mail.SimpleMailMessage , org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleMailMessage org.springframework.integration.mail.SimpleMailMessage = MailTestsHelper . createSimpleMailMessage ( ) ; java.lang.String [] java.lang.String[] = org.springframework.integration.mail.SimpleMailMessage . getTo ( ) ; this . org.springframework.integration.mail.MailSendingMessageHandler . handleMessage ( MessageBuilder . withPayload ( org.springframework.integration.mail.SimpleMailMessage ) . build ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . size ( ) ) ; SimpleMailMessage org.springframework.integration.mail.SimpleMailMessage = org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . get ( NUMBER ) ; assertTrue ( org.springframework.integration.mail.SimpleMailMessage . getTo ( ) . equals ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleMailMessage org.springframework.integration.mail.SimpleMailMessage = MailTestsHelper . createSimpleMailMessage ( ) ; org.springframework.integration.mail.SimpleMailMessage . getTo ( ) ; this . org.springframework.integration.mail.MailSendingMessageHandler . handleMessage ( MessageBuilder . withPayload ( org.springframework.integration.mail.SimpleMailMessage ) . setHeader ( MailHeaders . TO , new java.lang.String [] { STRING } ) . build ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . size ( ) ) ; SimpleMailMessage org.springframework.integration.mail.SimpleMailMessage = org.springframework.integration.mail.StubJavaMailSender . getSentSimpleMailMessages ( ) . get ( NUMBER ) ; assertTrue ( org.springframework.integration.mail.SimpleMailMessage . getTo ( ) [ NUMBER ] . equals ( STRING ) ) ; }  <METHOD_END>
