<METHOD_START> public void ( DevToolsProperties org.springframework.boot.devtools.autoconfigure.DevToolsProperties , ServerProperties org.springframework.boot.devtools.autoconfigure.ServerProperties ) { this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties = org.springframework.boot.devtools.autoconfigure.DevToolsProperties ; this . org.springframework.boot.devtools.autoconfigure.ServerProperties = org.springframework.boot.devtools.autoconfigure.ServerProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.devtools.autoconfigure.AccessManager org.springframework.boot.devtools.autoconfigure.AccessManager ( ) { RemoteDevToolsProperties org.springframework.boot.devtools.autoconfigure.RemoteDevToolsProperties = this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getRemote ( ) ; return new HttpHeaderAccessManager ( org.springframework.boot.devtools.autoconfigure.RemoteDevToolsProperties . getSecretHeaderName ( ) , org.springframework.boot.devtools.autoconfigure.RemoteDevToolsProperties . getSecret ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.HandlerMapper org.springframework.boot.devtools.autoconfigure.HandlerMapper ( ) { Handler org.springframework.boot.devtools.autoconfigure.Handler = new HttpStatusHandler ( ) ; return new UrlHandlerMapper ( ( this . org.springframework.boot.devtools.autoconfigure.ServerProperties . getServlet ( ) . getContextPath ( ) == null ? STRING : this . org.springframework.boot.devtools.autoconfigure.ServerProperties . getServlet ( ) . getContextPath ( ) ) + this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getRemote ( ) . getContextPath ( ) , org.springframework.boot.devtools.autoconfigure.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.devtools.autoconfigure.DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter ( AccessManager org.springframework.boot.devtools.autoconfigure.AccessManager , java.util.Collection<org.springframework.boot.devtools.autoconfigure.HandlerMapper> < HandlerMapper > java.util.Collection<org.springframework.boot.devtools.autoconfigure.HandlerMapper> ) { Dispatcher org.springframework.boot.devtools.autoconfigure.Dispatcher = new Dispatcher ( org.springframework.boot.devtools.autoconfigure.AccessManager , java.util.Collection<org.springframework.boot.devtools.autoconfigure.HandlerMapper> ) ; return new DispatcherFilter ( org.springframework.boot.devtools.autoconfigure.Dispatcher ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter ( ) { return new DefaultSourceFolderUrlFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.devtools.autoconfigure.HttpRestartServer org.springframework.boot.devtools.autoconfigure.HttpRestartServer ( SourceFolderUrlFilter org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter ) { return new HttpRestartServer ( org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.devtools.autoconfigure.UrlHandlerMapper org.springframework.boot.devtools.autoconfigure.UrlHandlerMapper ( HttpRestartServer org.springframework.boot.devtools.autoconfigure.HttpRestartServer ) { java.lang.String java.lang.String = ( this . org.springframework.boot.devtools.autoconfigure.ServerProperties . getServlet ( ) . getContextPath ( ) == null ? STRING : this . org.springframework.boot.devtools.autoconfigure.ServerProperties . getServlet ( ) . getContextPath ( ) ) + this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getRemote ( ) . getContextPath ( ) + STRING ; org.springframework.boot.devtools.autoconfigure.Log . warn ( STRING + java.lang.String ) ; Handler org.springframework.boot.devtools.autoconfigure.Handler = new HttpRestartServerHandler ( org.springframework.boot.devtools.autoconfigure.HttpRestartServer ) ; return new UrlHandlerMapper ( java.lang.String , org.springframework.boot.devtools.autoconfigure.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.devtools.autoconfigure.UrlHandlerMapper org.springframework.boot.devtools.autoconfigure.UrlHandlerMapper ( @ Qualifier ( STRING ) HttpTunnelServer org.springframework.boot.devtools.autoconfigure.HttpTunnelServer ) { java.lang.String java.lang.String = ( this . org.springframework.boot.devtools.autoconfigure.ServerProperties . getServlet ( ) . getContextPath ( ) == null ? STRING : this . org.springframework.boot.devtools.autoconfigure.ServerProperties . getServlet ( ) . getContextPath ( ) ) + this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getRemote ( ) . getContextPath ( ) + STRING ; org.springframework.boot.devtools.autoconfigure.Log . warn ( STRING + java.lang.String ) ; Handler org.springframework.boot.devtools.autoconfigure.Handler = new HttpTunnelServerHandler ( org.springframework.boot.devtools.autoconfigure.HttpTunnelServer ) ; return new UrlHandlerMapper ( java.lang.String , org.springframework.boot.devtools.autoconfigure.Handler ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.devtools.autoconfigure.HttpTunnelServer org.springframework.boot.devtools.autoconfigure.HttpTunnelServer ( ) { return new HttpTunnelServer ( new SocketTargetServerConnection ( new RemoteDebugPortProvider ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfiguration.RemoteDevToolsSecurityConfiguration.RemoteRestartWebSecurityConfigurer org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfiguration.RemoteDevToolsSecurityConfiguration.RemoteRestartWebSecurityConfigurer ( ) { return new org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfiguration.RemoteDevToolsSecurityConfiguration.RemoteRestartWebSecurityConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpSecurity org.springframework.boot.devtools.autoconfigure.HttpSecurity ) throws java.lang.Exception { org.springframework.boot.devtools.autoconfigure.HttpSecurity . antMatcher ( this . org.springframework.boot.devtools.autoconfigure.DevToolsProperties . getRemote ( ) . getContextPath ( ) + STRING ) ; org.springframework.boot.devtools.autoconfigure.HttpSecurity . csrf ( ) . disable ( ) ; }  <METHOD_END>
