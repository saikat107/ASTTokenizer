<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkAnnotatedParamNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , RequestHeader .class , this :: boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( RequestHeader org.springframework.web.reactive.result.method.annotation.RequestHeader , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ! java.util.Map .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.NamedValueInfo org.springframework.web.reactive.result.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { RequestHeader org.springframework.web.reactive.result.method.annotation.RequestHeader = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotation ( RequestHeader .class ) ; return new org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver.RequestHeaderNamedValueInfo ( org.springframework.web.reactive.result.method.annotation.RequestHeader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) . getHeaders ( ) . get ( java.lang.String ) ; java.lang.Object java.lang.Object = null ; if ( java.util.List<java.lang.String> != null ) { java.lang.Object = ( java.util.List<java.lang.String> . int ( ) == NUMBER ? java.util.List<java.lang.String> . java.lang.String ( NUMBER ) : java.util.List<java.lang.String> ) ; } return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ; throw new ServerWebInputException ( STRING + java.lang.String + STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( RequestHeader org.springframework.web.reactive.result.method.annotation.RequestHeader ) { super( org.springframework.web.reactive.result.method.annotation.RequestHeader . name ( ) , org.springframework.web.reactive.result.method.annotation.RequestHeader . required ( ) , org.springframework.web.reactive.result.method.annotation.RequestHeader . defaultValue ( ) ); }  <METHOD_END>
