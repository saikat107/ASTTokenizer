<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.data.mongodb.config.MongoCredential> < MongoCredential > java.util.List<org.springframework.data.mongodb.config.MongoCredential> = new java.util.ArrayList<org.springframework.data.mongodb.config.MongoCredential> < MongoCredential > ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.util.Properties java.util.Properties = java.util.Properties ( java.lang.String ) ; if ( ! java.util.Properties . boolean ( ) ) { if ( java.util.Properties . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; if ( MongoCredential . GSSAPI_MECHANISM . equals ( java.lang.String ) ) { void ( java.lang.String[] ) ; java.util.List<org.springframework.data.mongodb.config.MongoCredential> . add ( MongoCredential . createGSSAPICredential ( java.lang.String[] [ NUMBER ] ) ) ; } else if ( MongoCredential . MONGODB_CR_MECHANISM . equals ( java.lang.String ) ) { void ( java.lang.String[] ) ; void ( java.lang.String ) ; java.util.List<org.springframework.data.mongodb.config.MongoCredential> . add ( MongoCredential . createMongoCRCredential ( java.lang.String[] [ NUMBER ] , java.lang.String , java.lang.String[] [ NUMBER ] . char[] ( ) ) ) ; } else if ( MongoCredential . MONGODB_X509_MECHANISM . equals ( java.lang.String ) ) { void ( java.lang.String[] ) ; java.util.List<org.springframework.data.mongodb.config.MongoCredential> . add ( MongoCredential . createMongoX509Credential ( java.lang.String[] [ NUMBER ] ) ) ; } else if ( MongoCredential . PLAIN_MECHANISM . equals ( java.lang.String ) ) { void ( java.lang.String[] ) ; void ( java.lang.String ) ; java.util.List<org.springframework.data.mongodb.config.MongoCredential> . add ( MongoCredential . createPlainCredential ( java.lang.String[] [ NUMBER ] , java.lang.String , java.lang.String[] [ NUMBER ] . char[] ( ) ) ) ; } else if ( MongoCredential . SCRAM_SHA_1_MECHANISM . equals ( java.lang.String ) ) { void ( java.lang.String[] ) ; void ( java.lang.String ) ; java.util.List<org.springframework.data.mongodb.config.MongoCredential> . add ( MongoCredential . createScramSha1Credential ( java.lang.String[] [ NUMBER ] , java.lang.String , java.lang.String[] [ NUMBER ] . char[] ( ) ) ) ; } else { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } } } else { void ( java.lang.String[] ) ; void ( java.lang.String ) ; java.util.List<org.springframework.data.mongodb.config.MongoCredential> . add ( MongoCredential . createCredential ( java.lang.String[] [ NUMBER ] , java.lang.String , java.lang.String[] [ NUMBER ] . char[] ( ) ) ) ; } } void ( java.util.List<org.springframework.data.mongodb.config.MongoCredential> ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = StringUtils . trimLeadingCharacter ( java.util.regex.Matcher . java.lang.String ( ) , '\'' ) ; java.util.List<java.lang.String> . boolean ( StringUtils . trimTrailingCharacter ( java.lang.String , '\'' ) ) ; } if ( ! java.util.List<java.lang.String> . boolean ( ) ) { return java.util.List<java.lang.String> ; } return java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( java.lang.String ) ; int = int != - NUMBER ? int : java.lang.String . int ( java.lang.String ) ; return int == - NUMBER ? new java.lang.String [] {} : java.lang.String . java.lang.String ( NUMBER , int ) . java.lang.String[] ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( java.lang.String ) ; if ( int == - NUMBER ) { return STRING ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; int int = java.lang.String . int ( java.lang.String ) ; return int > - NUMBER ? java.lang.String . java.lang.String ( NUMBER , int ) : java.lang.String ; }  <METHOD_END>
<METHOD_START> private static java.util.Properties java.util.Properties ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( java.lang.String ) ; int int = java.lang.String . int ( java.lang.String ) ; if ( int == - NUMBER || int > int ) { return new java.util.Properties ( ) ; } java.util.Properties java.util.Properties = new java.util.Properties ( ) ; for ( java.lang.String java.lang.String : java.lang.String . java.lang.String ( int + NUMBER ) . java.lang.String[] ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String [] java.lang.String[] ) { void ( java.lang.String[] ) ; if ( java.lang.String[] . int != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String [] java.lang.String[] ) { if ( java.lang.String[] . int == NUMBER || ! StringUtils . hasText ( java.lang.String[] [ NUMBER ] ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
