<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; assertTrue ( org.springframework.context.annotation.ApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.ClassPathXmlApplicationContext . getBeanFactory ( ) . getBeanDefinition ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.BeanDefinition . getScope ( ) ) ; assertFalse ( org.springframework.context.annotation.BeanDefinition . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.context.annotation.BeansException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.context.annotation.BeansException ) { } }  <METHOD_END>
