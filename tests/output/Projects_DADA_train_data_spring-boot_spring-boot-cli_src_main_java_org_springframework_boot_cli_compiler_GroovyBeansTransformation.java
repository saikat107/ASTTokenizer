<METHOD_START> @ java.lang.Override public void void ( ASTNode [] org.springframework.boot.cli.compiler.ASTNode[] , SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) { for ( ASTNode org.springframework.boot.cli.compiler.ASTNode : org.springframework.boot.cli.compiler.ASTNode[] ) { if ( org.springframework.boot.cli.compiler.ASTNode instanceof ModuleNode ) { ModuleNode org.springframework.boot.cli.compiler.ModuleNode = ( ModuleNode ) org.springframework.boot.cli.compiler.ASTNode ; for ( ClassNode org.springframework.boot.cli.compiler.ClassNode : new java.util.ArrayList <> ( org.springframework.boot.cli.compiler.ModuleNode . getClasses ( ) ) ) { if ( org.springframework.boot.cli.compiler.ClassNode . isScript ( ) ) { org.springframework.boot.cli.compiler.ClassNode . visitContents ( new org.springframework.boot.cli.compiler.GroovyBeansTransformation.ClassVisitor ( org.springframework.boot.cli.compiler.SourceUnit , org.springframework.boot.cli.compiler.ClassNode ) ) ; } } } } }  <METHOD_END>
<METHOD_START> void ( SourceUnit org.springframework.boot.cli.compiler.SourceUnit , ClassNode org.springframework.boot.cli.compiler.ClassNode ) { this . org.springframework.boot.cli.compiler.SourceUnit = org.springframework.boot.cli.compiler.SourceUnit ; this . org.springframework.boot.cli.compiler.ClassNode = org.springframework.boot.cli.compiler.ClassNode ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.cli.compiler.SourceUnit org.springframework.boot.cli.compiler.SourceUnit ( ) { return this . org.springframework.boot.cli.compiler.SourceUnit ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BlockStatement org.springframework.boot.cli.compiler.BlockStatement ) { if ( org.springframework.boot.cli.compiler.BlockStatement . isEmpty ( ) || this . boolean ) { return; } ClosureExpression org.springframework.boot.cli.compiler.ClosureExpression = org.springframework.boot.cli.compiler.ClosureExpression ( org.springframework.boot.cli.compiler.BlockStatement ) ; if ( org.springframework.boot.cli.compiler.ClosureExpression != null ) { this . org.springframework.boot.cli.compiler.ClassNode . addInterface ( ClassHelper . make ( java.lang.String ) ) ; this . org.springframework.boot.cli.compiler.ClassNode . addProperty ( new PropertyNode ( java.lang.String , java.lang.reflect.Modifier . int | java.lang.reflect.Modifier . int , ClassHelper . CLOSURE_TYPE . getPlainNodeReference ( ) , this . org.springframework.boot.cli.compiler.ClassNode , org.springframework.boot.cli.compiler.ClosureExpression , null , null ) ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.ClosureExpression org.springframework.boot.cli.compiler.ClosureExpression ( BlockStatement org.springframework.boot.cli.compiler.BlockStatement ) { return AstUtils . getClosure ( org.springframework.boot.cli.compiler.BlockStatement , java.lang.String , true ) ; }  <METHOD_END>
