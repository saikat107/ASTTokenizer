<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.statemachine.processor.MethodParameterTests.Bean1 org.springframework.statemachine.processor.MethodParameterTests.Bean1 = new org.springframework.statemachine.processor.MethodParameterTests.Bean1 ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.statemachine.processor.MethodParameterTests.Bean1 .class , STRING , java.util.Map .class , ExtendedState .class , StateMachine .class , Message .class , java.lang.Exception .class , StateContext .class ) ; OnTransition org.springframework.statemachine.processor.OnTransition = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , OnTransition .class ) ; StateMachineHandler < OnTransition , java.lang.String , java.lang.String > org.springframework.statemachine.processor.StateMachineHandler<org.springframework.statemachine.processor.OnTransition,java.lang.String,java.lang.String> = new StateMachineHandler < OnTransition , java.lang.String , java.lang.String > ( org.springframework.statemachine.processor.MethodParameterTests.Bean1 .class , org.springframework.statemachine.processor.MethodParameterTests.Bean1 , java.lang.reflect.Method , org.springframework.statemachine.processor.OnTransition , org.springframework.statemachine.processor.OnTransition ) ; Message < java.lang.String > org.springframework.statemachine.processor.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MessageHeaders org.springframework.statemachine.processor.MessageHeaders = org.springframework.statemachine.processor.Message<java.lang.String> . getHeaders ( ) ; ExtendedState org.springframework.statemachine.processor.ExtendedState = new DefaultExtendedState ( ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.processor.Transition<java.lang.String,java.lang.String> = mock ( Transition .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.processor.StateMachine<java.lang.String,java.lang.String> = mock ( StateMachine .class ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.processor.State<java.lang.String,java.lang.String> = mock ( State .class ) ; State < java.lang.String , java.lang.String > org.springframework.statemachine.processor.State<java.lang.String,java.lang.String> = mock ( State .class ) ; java.lang.Exception java.lang.Exception = new java.lang.RuntimeException ( ) ; StateMachineRuntime < java.lang.String , java.lang.String > org.springframework.statemachine.processor.StateMachineRuntime<java.lang.String,java.lang.String> = new StateMachineRuntime < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public org.springframework.statemachine.processor.StateContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.processor.StateContext<java.lang.String,java.lang.String> ( ) { return new DefaultStateContext < java.lang.String , java.lang.String > ( Stage . TRANSITION , org.springframework.statemachine.processor.Message<java.lang.String> , org.springframework.statemachine.processor.MessageHeaders , org.springframework.statemachine.processor.ExtendedState , org.springframework.statemachine.processor.Transition<java.lang.String,java.lang.String> , org.springframework.statemachine.processor.StateMachine<java.lang.String,java.lang.String> , org.springframework.statemachine.processor.State<java.lang.String,java.lang.String> , org.springframework.statemachine.processor.State<java.lang.String,java.lang.String> , java.lang.Exception ) ; } } ; org.springframework.statemachine.processor.StateMachineHandler<org.springframework.statemachine.processor.OnTransition,java.lang.String,java.lang.String> . handle ( org.springframework.statemachine.processor.StateMachineRuntime<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.processor.StateContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.processor.StateContext<java.lang.String,java.lang.String> ( ) { return new DefaultStateContext < java.lang.String , java.lang.String > ( Stage . TRANSITION , org.springframework.statemachine.processor.Message<java.lang.String> , org.springframework.statemachine.processor.MessageHeaders , org.springframework.statemachine.processor.ExtendedState , org.springframework.statemachine.processor.Transition<java.lang.String,java.lang.String> , org.springframework.statemachine.processor.StateMachine<java.lang.String,java.lang.String> , org.springframework.statemachine.processor.State<java.lang.String,java.lang.String> , org.springframework.statemachine.processor.State<java.lang.String,java.lang.String> , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition public void void ( @ EventHeaders java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ExtendedState org.springframework.statemachine.processor.ExtendedState , StateMachine < ? , ? > org.springframework.statemachine.processor.StateMachine<?,?> , Message < ? > org.springframework.statemachine.processor.Message<?> , java.lang.Exception java.lang.Exception , StateContext < ? , ? > org.springframework.statemachine.processor.StateContext<?,?> ) { assertThat ( java.util.Map<java.lang.String,java.lang.Object> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.processor.ExtendedState , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.processor.StateMachine<,> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.processor.Message<> , notNullValue ( ) ) ; assertThat ( java.lang.Exception , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.processor.StateContext<,> , notNullValue ( ) ) ; }  <METHOD_END>
