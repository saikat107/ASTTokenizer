<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.servlet.support.ServletContext ) throws org.springframework.web.servlet.support.ServletException { super. onStartup ( org.springframework.web.servlet.support.ServletContext ) ; void ( org.springframework.web.servlet.support.ServletContext ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletContext org.springframework.web.servlet.support.ServletContext ) { java.lang.String java.lang.String = java.lang.String ( ) ; Assert . hasLength ( java.lang.String , STRING ) ; WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext = org.springframework.web.servlet.support.WebApplicationContext ( ) ; Assert . notNull ( org.springframework.web.servlet.support.WebApplicationContext , STRING + STRING + java.lang.String + STRING ) ; FrameworkServlet org.springframework.web.servlet.support.FrameworkServlet = org.springframework.web.servlet.support.FrameworkServlet ( org.springframework.web.servlet.support.WebApplicationContext ) ; org.springframework.web.servlet.support.FrameworkServlet . setContextInitializers ( org.springframework.web.servlet.support.ApplicationContextInitializer<?>[] ( ) ) ; ServletRegistration . ServletRegistration ServletRegistration.Dynamic = org.springframework.web.servlet.support.ServletContext . addServlet ( java.lang.String , org.springframework.web.servlet.support.FrameworkServlet ) ; Assert . notNull ( ServletRegistration.Dynamic , STRING + java.lang.String + STRING + STRING ) ; ServletRegistration.Dynamic . setLoadOnStartup ( NUMBER ) ; ServletRegistration.Dynamic . addMapping ( java.lang.String[] ( ) ) ; ServletRegistration.Dynamic . setAsyncSupported ( boolean ( ) ) ; Filter [] org.springframework.web.servlet.support.Filter[] = org.springframework.web.servlet.support.Filter[] ( ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.web.servlet.support.Filter[] ) ) { for ( Filter org.springframework.web.servlet.support.Filter : org.springframework.web.servlet.support.Filter[] ) { FilterRegistration.Dynamic ( org.springframework.web.servlet.support.ServletContext , org.springframework.web.servlet.support.Filter ) ; } } void ( ServletRegistration.Dynamic ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.servlet.support.WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ( )  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.support.FrameworkServlet org.springframework.web.servlet.support.FrameworkServlet ( WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ) { return new DispatcherServlet ( org.springframework.web.servlet.support.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.support.ApplicationContextInitializer<?> < ? > [] org.springframework.web.servlet.support.ApplicationContextInitializer<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String [] java.lang.String[] ( )  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.support.Filter [] org.springframework.web.servlet.support.Filter[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> protected FilterRegistration . FilterRegistration.Dynamic FilterRegistration.Dynamic ( ServletContext org.springframework.web.servlet.support.ServletContext , Filter org.springframework.web.servlet.support.Filter ) { java.lang.String java.lang.String = Conventions . getVariableName ( org.springframework.web.servlet.support.Filter ) ; Dynamic org.springframework.web.servlet.support.Dynamic = org.springframework.web.servlet.support.ServletContext . addFilter ( java.lang.String , org.springframework.web.servlet.support.Filter ) ; if ( org.springframework.web.servlet.support.Dynamic == null ) { int int = - NUMBER ; while ( int == - NUMBER || org.springframework.web.servlet.support.Dynamic == null ) { int ++ ; org.springframework.web.servlet.support.Dynamic = org.springframework.web.servlet.support.ServletContext . addFilter ( java.lang.String + STRING + int , org.springframework.web.servlet.support.Filter ) ; Assert . isTrue ( int < NUMBER , STRING + org.springframework.web.servlet.support.Filter + STRING + STRING ) ; } } org.springframework.web.servlet.support.Dynamic . setAsyncSupported ( boolean ( ) ) ; org.springframework.web.servlet.support.Dynamic . addMappingForServletNames ( java.util.EnumSet<org.springframework.web.servlet.support.DispatcherType> ( ) , false , java.lang.String ( ) ) ; return org.springframework.web.servlet.support.Dynamic ; }  <METHOD_END>
<METHOD_START> private java.util.EnumSet<org.springframework.web.servlet.support.DispatcherType> < DispatcherType > java.util.EnumSet<org.springframework.web.servlet.support.DispatcherType> ( ) { return ( boolean ( ) ? java.util.EnumSet . java.util.EnumSet ( DispatcherType . REQUEST , DispatcherType . FORWARD , DispatcherType . INCLUDE , DispatcherType . ASYNC ) : java.util.EnumSet . java.util.EnumSet ( DispatcherType . REQUEST , DispatcherType . FORWARD , DispatcherType . INCLUDE ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletRegistration . ServletRegistration ServletRegistration.Dynamic ) {	}  <METHOD_END>
