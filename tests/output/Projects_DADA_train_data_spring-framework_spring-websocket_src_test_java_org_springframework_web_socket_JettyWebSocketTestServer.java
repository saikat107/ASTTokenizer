<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.socket.Server = new Server ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebApplicationContext org.springframework.web.socket.WebApplicationContext , Filter ... org.springframework.web.socket.Filter[] ) { ServletHolder org.springframework.web.socket.ServletHolder = new ServletHolder ( new DispatcherServlet ( org.springframework.web.socket.WebApplicationContext ) ) ; this . org.springframework.web.socket.ServletContextHandler = new ServletContextHandler ( ) ; this . org.springframework.web.socket.ServletContextHandler . addServlet ( org.springframework.web.socket.ServletHolder , STRING ) ; for ( Filter org.springframework.web.socket.Filter : org.springframework.web.socket.Filter[] ) { this . org.springframework.web.socket.ServletContextHandler . addFilter ( new FilterHolder ( org.springframework.web.socket.Filter ) , STRING , java.util.EnumSet<org.springframework.web.socket.DispatcherType> ( ) ) ; } this . org.springframework.web.socket.Server . setHandler ( this . org.springframework.web.socket.ServletContextHandler ) ; }  <METHOD_END>
<METHOD_START> private java.util.EnumSet<org.springframework.web.socket.DispatcherType> < DispatcherType > java.util.EnumSet<org.springframework.web.socket.DispatcherType> ( ) { return java.util.EnumSet . java.util.EnumSet ( DispatcherType . REQUEST , DispatcherType . FORWARD , DispatcherType . INCLUDE , DispatcherType . ASYNC ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.web.socket.Server . start ( ) ; this . org.springframework.web.socket.ServletContextHandler . start ( ) ; Connector [] org.springframework.web.socket.Connector[] = org.springframework.web.socket.Server . getConnectors ( ) ; NetworkConnector org.springframework.web.socket.NetworkConnector = ( NetworkConnector ) org.springframework.web.socket.Connector[] [ NUMBER ] ; this . int = org.springframework.web.socket.NetworkConnector . getLocalPort ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { try { if ( this . org.springframework.web.socket.ServletContextHandler . isRunning ( ) ) { this . org.springframework.web.socket.ServletContextHandler . stop ( ) ; } } finally { if ( this . org.springframework.web.socket.Server . isRunning ( ) ) { this . org.springframework.web.socket.Server . setStopTimeout ( NUMBER ) ; this . org.springframework.web.socket.Server . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.ServletContext org.springframework.web.socket.ServletContext ( ) { return this . org.springframework.web.socket.ServletContextHandler . getServletContext ( ) ; }  <METHOD_END>
