<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.Set<java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.List<java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericIntegerBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_BY_TYPE ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericIntegerBean org.springframework.beans.factory.support.GenericIntegerBean = ( GenericIntegerBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericIntegerBean . getResourceList ( ) . get ( NUMBER ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericIntegerBean . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericIntegerBean .class ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.List<java.lang.Integer> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; try { org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getMessage ( ) . contains ( STRING ) && org.springframework.beans.factory.support.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getMessage ( ) . contains ( TestBean .class . java.lang.String ( ) ) && org.springframework.beans.factory.support.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_BY_TYPE ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.BeanFactoryGenericsTests> ( ) ) ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.GenericBean<> . getListOfArrays ( ) . size ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.GenericBean<> . getListOfArrays ( ) . get ( NUMBER ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Set<java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Set<java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.List<java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerSingleton ( STRING , new UrlResource ( STRING ) ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAutowireMode ( RootBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) ) ; assertNull ( org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Set<java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . size ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . size ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Map<java.lang.Short,java.lang.Integer> < java.lang.Short , java.lang.Integer > java.util.Map<java.lang.Short,java.lang.Integer> = new java.util.HashMap<java.lang.Short,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.Short,java.lang.Integer> . java.lang.Integer ( new java.lang.Short ( ( short ) NUMBER ) , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.Short,java.lang.Integer> . java.lang.Integer ( new java.lang.Short ( ( short ) NUMBER ) , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.Short,java.lang.Integer> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.Short,java.lang.Integer> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . size ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getLongMap ( ) . get ( new java.lang.Long ( STRING ) ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getLongMap ( ) . get ( new java.lang.Long ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . addPropertyEditorRegistrar ( new PropertyEditorRegistrar ( ) { @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.support.PropertyEditorRegistry ) { org.springframework.beans.factory.support.PropertyEditorRegistry . registerCustomEditor ( java.lang.Number .class , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; } } ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; java.util.Map<java.lang.String,java.util.AbstractCollection<?>> < java.lang.String , java.util.AbstractCollection<?> < ? > > java.util.Map<java.lang.String,java.util.AbstractCollection<?>> = new java.util.HashMap<java.lang.String,java.util.AbstractCollection<?>> <> ( ) ; java.util.HashSet<java.lang.Integer> < java.lang.Integer > java.util.HashSet<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.HashSet<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.util.AbstractCollection<?>> . java.util.AbstractCollection<?> ( STRING , java.util.HashSet<java.lang.Integer> ) ; java.util.ArrayList<java.lang.Boolean> < java.lang.Boolean > java.util.ArrayList<java.lang.Boolean> = new java.util.ArrayList<java.lang.Boolean> <> ( ) ; java.util.ArrayList<java.lang.Boolean> . boolean ( java.lang.Boolean . java.lang.Boolean ) ; java.util.Map<java.lang.String,java.util.AbstractCollection<?>> . java.util.AbstractCollection<?> ( STRING , java.util.ArrayList<java.lang.Boolean> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.Boolean . java.lang.Boolean ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.util.AbstractCollection<?>> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getCollectionMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) instanceof java.util.HashSet ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getCollectionMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) instanceof java.util.ArrayList ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.support.PropertyEditorRegistry ) { org.springframework.beans.factory.support.PropertyEditorRegistry . registerCustomEditor ( java.lang.Number .class , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Set<java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Set<java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.List<java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Set<java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.factory.support.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getPlainMap ( ) . get ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getLongMap ( ) . get ( new java.lang.Long ( STRING ) ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.GenericBean<> . getLongMap ( ) . get ( new java.lang.Long ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . addPropertyEditorRegistrar ( new PropertyEditorRegistrar ( ) { @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.support.PropertyEditorRegistry ) { org.springframework.beans.factory.support.PropertyEditorRegistry . registerCustomEditor ( java.lang.Number .class , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; } } ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( GenericBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; java.util.Map<java.lang.String,java.util.AbstractCollection<?>> < java.lang.String , java.util.AbstractCollection<?> < ? > > java.util.Map<java.lang.String,java.util.AbstractCollection<?>> = new java.util.HashMap<java.lang.String,java.util.AbstractCollection<?>> <> ( ) ; java.util.HashSet<java.lang.Integer> < java.lang.Integer > java.util.HashSet<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.HashSet<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.util.AbstractCollection<?>> . java.util.AbstractCollection<?> ( STRING , java.util.HashSet<java.lang.Integer> ) ; java.util.ArrayList<java.lang.Boolean> < java.lang.Boolean > java.util.ArrayList<java.lang.Boolean> = new java.util.ArrayList<java.lang.Boolean> <> ( ) ; java.util.ArrayList<java.lang.Boolean> . boolean ( java.lang.Boolean . java.lang.Boolean ) ; java.util.Map<java.lang.String,java.util.AbstractCollection<?>> . java.util.AbstractCollection<?> ( STRING , java.util.ArrayList<java.lang.Boolean> ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.Boolean . java.lang.Boolean ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.util.AbstractCollection<?>> ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; GenericBean < ? > org.springframework.beans.factory.support.GenericBean<?> = ( GenericBean < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getCollectionMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) instanceof java.util.HashSet ) ; assertTrue ( org.springframework.beans.factory.support.GenericBean<> . getCollectionMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) instanceof java.util.ArrayList ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.support.PropertyEditorRegistry ) { org.springframework.beans.factory.support.PropertyEditorRegistry . registerCustomEditor ( java.lang.Number .class , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.BeanFactoryGenericsTests> ( ) ) ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( new java.net.URL ( STRING ) , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.BeanFactoryGenericsTests> ( ) ) ) ; java.util.Set<?> < ? > java.util.Set<?> = ( java.util.Set<?> < ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertEquals ( new java.net.URL ( STRING ) , java.util.Set<> . java.util.Iterator<> ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.BeanFactoryGenericsTests> ( ) ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map<,> . java.util.Set<> ( ) . java.util.Iterator<> ( ) . next ( ) ) ; assertEquals ( new java.net.URL ( STRING ) , java.util.Map<,> . java.util.Collection<> ( ) . java.util.Iterator<> ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.BeanFactoryGenericsTests> ( ) ) ) ; GenericIntegerBean org.springframework.beans.factory.support.GenericIntegerBean = ( GenericIntegerBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericIntegerBean . getGenericProperty ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.BeanFactoryGenericsTests> ( ) ) ) ; GenericSetOfIntegerBean org.springframework.beans.factory.support.GenericSetOfIntegerBean = ( GenericSetOfIntegerBean ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericSetOfIntegerBean . getGenericProperty ( ) . iterator ( ) . next ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericSetOfIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) . iterator ( ) . next ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.GenericSetOfIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . LONG_RUNNING ) ; DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.support.BeanFactoryGenericsTests> ( ) ) ) ; org.springframework.beans.factory.support.BeanFactoryGenericsTests.UrlSet org.springframework.beans.factory.support.BeanFactoryGenericsTests.UrlSet = ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.UrlSet ) org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.BeanFactoryGenericsTests.UrlSet . int ( ) ) ; assertEquals ( new java.net.URL ( STRING ) , org.springframework.beans.factory.support.BeanFactoryGenericsTests.UrlSet . java.util.Iterator<java.net.URL> ( ) . java.net.URL ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( Mockito .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.Runnable .class ) ; DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.util.Map<java.lang.String,java.lang.Runnable> < java.lang.String , java.lang.Runnable > java.util.Map<java.lang.String,java.lang.Runnable> = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeansOfType ( java.lang.Runnable .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Runnable> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.MocksControl .class ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.Runnable .class ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.util.Map<java.lang.String,java.lang.Runnable> < java.lang.String , java.lang.Runnable > java.util.Map<java.lang.String,java.lang.Runnable> = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeansOfType ( java.lang.Runnable .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Runnable> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.MocksControl .class ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.Runnable .class . java.lang.String ( ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.util.Map<java.lang.String,java.lang.Runnable> < java.lang.String , java.lang.Runnable > java.util.Map<java.lang.String,java.lang.Runnable> = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeansOfType ( java.lang.Runnable .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Runnable> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.support.RootBeanDefinition . setBeanClassName ( Mockito .class . java.lang.String ( ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( new TypedStringValue ( java.lang.Runnable .class . java.lang.String ( ) ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.util.Map<java.lang.String,java.lang.Runnable> < java.lang.String , java.lang.Runnable > java.util.Map<java.lang.String,java.lang.Runnable> = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeansOfType ( java.lang.Runnable .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Runnable> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.MocksControl .class ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.util.Map<java.lang.String,java.lang.Runnable> < java.lang.String , java.lang.Runnable > java.util.Map<java.lang.String,java.lang.Runnable> = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeansOfType ( java.lang.Runnable .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Runnable> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.MocksControl .class ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryBeanName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.lang.Runnable .class ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.util.Map<java.lang.String,java.lang.Runnable> < java.lang.String , java.lang.Runnable > java.util.Map<java.lang.String,java.lang.Runnable> = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeansOfType ( java.lang.Runnable .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Runnable> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . setAutowireCandidateResolver ( new GenericTypeAwareAutowireCandidateResolver ( ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean .class , RootBeanDefinition . AUTOWIRE_CONSTRUCTOR , false ) ) ; org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean .class ) ; assertSame ( org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> ( ) ) ; assertSame ( org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClass ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class , java.lang.Double .class ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class , java.lang.Float .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . setAutowireCandidateResolver ( new GenericTypeAwareAutowireCandidateResolver ( ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.DoubleStore .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.FloatStore .class ) ) ; org.springframework.beans.factory.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean .class , RootBeanDefinition . AUTOWIRE_CONSTRUCTOR , false ) ) ; org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean .class ) ; assertSame ( org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> ( ) ) ; assertSame ( org.springframework.beans.factory.support.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberBean . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClass ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class , java.lang.Double .class ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore .class , java.lang.Float .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlList org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlList , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlSet org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlSet , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlMap org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlMap ) { assertEquals ( NUMBER , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlList . int ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlSet . int ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NamedUrlMap . int ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<? extends java.net.URL> < ? extends java.net.URL > java.util.Set<? extends java.net.URL> ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<java.net.URI> < java.net.URI > java.util.Set<java.net.URI> ) throws java.net.MalformedURLException { for ( java.net.URI java.net.URI : java.util.Set<java.net.URI> ) { boolean ( java.net.URI . java.net.URL ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return ( T ) java.lang.reflect.Proxy . java.lang.Object ( org.springframework.beans.factory.support.BeanFactoryGenericsTests .class . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { java.lang.Class<T> } , new java.lang.reflect.InvocationHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { throw new java.lang.UnsupportedOperationException ( STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> < java.lang.Double > org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> , org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> < java.lang.Float > org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> ) { this . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> = org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> ; this . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> = org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> < java.lang.Double > org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> ( ) { return this . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Double> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> < java.lang.Float > org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> ( ) { return this . org.springframework.beans.factory.support.BeanFactoryGenericsTests.NumberStore<java.lang.Float> ; }  <METHOD_END>
