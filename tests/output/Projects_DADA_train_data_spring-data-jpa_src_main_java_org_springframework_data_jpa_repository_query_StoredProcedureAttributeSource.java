<METHOD_START> public org.springframework.data.jpa.repository.query.StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes ( java.lang.reflect.Method java.lang.reflect.Method , JpaEntityMetadata < ? > org.springframework.data.jpa.repository.query.JpaEntityMetadata<?> ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.JpaEntityMetadata<> , STRING ) ; Procedure org.springframework.data.jpa.repository.query.Procedure = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , Procedure .class ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.Procedure , STRING ) ; NamedStoredProcedureQuery org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery = org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.JpaEntityMetadata<> , org.springframework.data.jpa.repository.query.Procedure ) ; if ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery != null ) { return org.springframework.data.jpa.repository.query.StoredProcedureAttributes ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery , org.springframework.data.jpa.repository.query.Procedure ) ; } java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.Procedure ) ; if ( StringUtils . isEmpty ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Method ) ; } return new StoredProcedureAttributes ( java.lang.String , null , java.lang.reflect.Method . java.lang.Class<?> ( ) , false ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , Procedure org.springframework.data.jpa.repository.query.Procedure ) { if ( StringUtils . hasText ( org.springframework.data.jpa.repository.query.Procedure . value ( ) ) ) { return org.springframework.data.jpa.repository.query.Procedure . value ( ) ; } java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.Procedure . procedureName ( ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes ( java.lang.reflect.Method java.lang.reflect.Method , NamedStoredProcedureQuery org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery , Procedure org.springframework.data.jpa.repository.query.Procedure ) { java.lang.String java.lang.String = null ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( ! org.springframework.data.jpa.repository.query.Procedure . outputParameterName ( ) . isEmpty ( ) ) { java.lang.String = org.springframework.data.jpa.repository.query.Procedure . outputParameterName ( ) ; } else { java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> < StoredProcedureParameter > java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> = java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery ) ; if ( java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> . size ( ) != NUMBER && ! void .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method ) ) ; } if ( ! java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> . isEmpty ( ) ) { StoredProcedureParameter org.springframework.data.jpa.repository.query.StoredProcedureParameter = java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> . get ( NUMBER ) ; java.lang.String = org.springframework.data.jpa.repository.query.StoredProcedureParameter . name ( ) ; java.lang.Class<?> = org.springframework.data.jpa.repository.query.StoredProcedureParameter . type ( ) ; } } if ( java.lang.Class<> == null || java.lang.Object .class . boolean ( java.lang.Class<> ) || void .class . boolean ( java.lang.Class<> ) ) { java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; } return new StoredProcedureAttributes ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery . name ( ) , java.lang.String , java.lang.Class<> , true ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> < StoredProcedureParameter > java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> ( NamedStoredProcedureQuery org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery ) { java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> < StoredProcedureParameter > java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> = new java.util.ArrayList<org.springframework.data.jpa.repository.query.StoredProcedureParameter> < StoredProcedureParameter > ( ) ; for ( StoredProcedureParameter org.springframework.data.jpa.repository.query.StoredProcedureParameter : org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery . parameters ( ) ) { switch ( org.springframework.data.jpa.repository.query.StoredProcedureParameter . mode ( ) ) { case OUT : case INOUT : case REF_CURSOR : java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> . add ( org.springframework.data.jpa.repository.query.StoredProcedureParameter ) ; break; case IN : default: continue; } } return java.util.List<org.springframework.data.jpa.repository.query.StoredProcedureParameter> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery ( java.lang.reflect.Method java.lang.reflect.Method , JpaEntityMetadata < ? > org.springframework.data.jpa.repository.query.JpaEntityMetadata<?> , Procedure org.springframework.data.jpa.repository.query.Procedure ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.JpaEntityMetadata<> , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.Procedure , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.repository.query.JpaEntityMetadata<> . getJavaType ( ) ; java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> < NamedStoredProcedureQuery > java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> = java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> ( java.lang.Class<> ) ; if ( java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> . isEmpty ( ) ) { return null ; } java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.JpaEntityMetadata<> , org.springframework.data.jpa.repository.query.Procedure ) ; for ( NamedStoredProcedureQuery org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery : java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> ) { if ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery . name ( ) . equals ( java.lang.String ) ) { return org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , JpaEntityMetadata < ? > org.springframework.data.jpa.repository.query.JpaEntityMetadata<?> , Procedure org.springframework.data.jpa.repository.query.Procedure ) { return StringUtils . hasText ( org.springframework.data.jpa.repository.query.Procedure . name ( ) ) ? org.springframework.data.jpa.repository.query.Procedure . name ( ) : org.springframework.data.jpa.repository.query.JpaEntityMetadata<> . getEntityName ( ) + STRING + java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> < NamedStoredProcedureQuery > java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> < NamedStoredProcedureQuery > java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> = new java.util.ArrayList<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> < NamedStoredProcedureQuery > ( ) ; NamedStoredProcedureQueries org.springframework.data.jpa.repository.query.NamedStoredProcedureQueries = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , NamedStoredProcedureQueries .class ) ; if ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQueries != null ) { java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> . addAll ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQueries . value ( ) ) ) ; } NamedStoredProcedureQuery org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , NamedStoredProcedureQuery .class ) ; if ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery != null ) { java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> . add ( org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery ) ; } return java.util.List<org.springframework.data.jpa.repository.query.NamedStoredProcedureQuery> ; }  <METHOD_END>
