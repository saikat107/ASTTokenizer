<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointAutoConfigurationTests.TestConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; MockHttpServletRequest org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest = new MockHttpServletRequest ( ) ; Health org.springframework.boot.actuate.autoconfigure.Health = ( Health ) this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( HealthMvcEndpoint .class ) . invoke ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest , null ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Health . getDetails ( ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointAutoConfigurationTests.TestConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; Health org.springframework.boot.actuate.autoconfigure.Health = ( Health ) this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( HealthMvcEndpoint .class ) . invoke ( null , null ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; Health org.springframework.boot.actuate.autoconfigure.Health = ( Health ) org.springframework.boot.actuate.autoconfigure.Health . getDetails ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointAutoConfigurationTests.TestConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; HealthMvcEndpoint org.springframework.boot.actuate.autoconfigure.HealthMvcEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( HealthMvcEndpoint .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.HealthMvcEndpoint , STRING ) ) . isEqualTo ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointAutoConfigurationTests.TestHealthIndicator org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointAutoConfigurationTests.TestHealthIndicator ( ) { return new org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointAutoConfigurationTests.TestHealthIndicator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Builder org.springframework.boot.actuate.autoconfigure.Builder ) throws java.lang.Exception { org.springframework.boot.actuate.autoconfigure.Builder . up ( ) . withDetail ( STRING , STRING ) ; }  <METHOD_END>
