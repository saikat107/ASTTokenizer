<METHOD_START> @ After public void void ( ) { if ( org.springframework.integration.monitor.GenericXmlApplicationContext != null ) { org.springframework.integration.monitor.GenericXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelNames ( ) ) . contains ( STRING ) ) ; javax.management.MBeanServer javax.management.MBeanServer = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( javax.management.MBeanServer .class ) ; assertEquals ( NUMBER , javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) . int ( ) ) ; assertEquals ( NUMBER , javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; javax.management.MBeanServer javax.management.MBeanServer = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( javax.management.MBeanServer .class ) ; java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; javax.management.MBeanOperationInfo [] javax.management.MBeanOperationInfo[] = javax.management.MBeanServer . javax.management.MBeanInfo ( java.util.Set<javax.management.ObjectName> . java.util.Iterator<javax.management.ObjectName> ( ) . javax.management.ObjectName ( ) ) . javax.management.MBeanOperationInfo[] ( ) ; java.lang.String java.lang.String = null ; for ( javax.management.MBeanOperationInfo javax.management.MBeanOperationInfo : javax.management.MBeanOperationInfo[] ) { java.lang.String java.lang.String = javax.management.MBeanOperationInfo . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ; } } assertEquals ( STRING , java.lang.String ) ; assertTrue ( ( java.lang.Boolean ) javax.management.MBeanServer . java.lang.Object ( java.util.Set<javax.management.ObjectName> . java.util.Iterator<javax.management.ObjectName> ( ) . javax.management.ObjectName ( ) , STRING , null , null ) ) ; org.springframework.integration.monitor.IntegrationMBeanExporter . stopActiveComponents ( NUMBER ) ; assertFalse ( ( java.lang.Boolean ) javax.management.MBeanServer . java.lang.Object ( java.util.Set<javax.management.ObjectName> . java.util.Iterator<javax.management.ObjectName> ( ) . javax.management.ObjectName ( ) , STRING , null , null ) ) ; org.springframework.integration.monitor.MBeanExporterIntegrationTests.ActiveChannel org.springframework.integration.monitor.MBeanExporterIntegrationTests.ActiveChannel = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( STRING , org.springframework.integration.monitor.MBeanExporterIntegrationTests.ActiveChannel .class ) ; assertTrue ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.ActiveChannel . boolean ( ) ) ; org.springframework.integration.monitor.MBeanExporterIntegrationTests.OtherActiveComponent org.springframework.integration.monitor.MBeanExporterIntegrationTests.OtherActiveComponent = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.OtherActiveComponent .class ) ; assertTrue ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.OtherActiveComponent . boolean ( ) ) ; assertTrue ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.OtherActiveComponent . boolean ( ) ) ; assertTrue ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.OtherActiveComponent . isRunning ( ) ) ; assertFalse ( org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.AMessageProducer .class ) . isRunning ( ) ) ; QueueChannel org.springframework.integration.monitor.QueueChannel = ( QueueChannel ) java.lang.Object ( org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( STRING ) ) ; QueueChannel org.springframework.integration.monitor.QueueChannel = ( QueueChannel ) java.lang.Object ( org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( STRING ) ) ; org.springframework.integration.monitor.QueueChannel . purge ( null ) ; org.springframework.integration.monitor.QueueChannel . purge ( null ) ; org.springframework.integration.monitor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.monitor.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof Advised ) ) { return java.lang.Object ; } Advised org.springframework.integration.monitor.Advised = ( Advised ) java.lang.Object ; if ( org.springframework.integration.monitor.Advised . getTargetSource ( ) == null ) { return null ; } try { return java.lang.Object ( org.springframework.integration.monitor.Advised . getTargetSource ( ) . getTarget ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; SourcePollingChannelAdapter org.springframework.integration.monitor.SourcePollingChannelAdapter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( SourcePollingChannelAdapter .class ) ; org.springframework.integration.monitor.SourcePollingChannelAdapter . start ( ) ; int int = NUMBER ; while ( org.springframework.integration.monitor.SourcePollingChannelAdapter . isRunning ( ) ) { int += NUMBER ; if ( int > NUMBER ) { fail ( STRING ) ; } java.lang.Thread . void ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; javax.management.MBeanServer javax.management.MBeanServer = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( javax.management.MBeanServer .class ) ; java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; javax.management.MBeanOperationInfo [] javax.management.MBeanOperationInfo[] = javax.management.MBeanServer . javax.management.MBeanInfo ( java.util.Set<javax.management.ObjectName> . java.util.Iterator<javax.management.ObjectName> ( ) . javax.management.ObjectName ( ) ) . javax.management.MBeanOperationInfo[] ( ) ; java.lang.String java.lang.String = null ; for ( javax.management.MBeanOperationInfo javax.management.MBeanOperationInfo : javax.management.MBeanOperationInfo[] ) { java.lang.String java.lang.String = javax.management.MBeanOperationInfo . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ; } } assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.monitor.GenericXmlApplicationContext . close ( ) ; org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; javax.management.MBeanServer = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( javax.management.MBeanServer .class ) ; java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; javax.management.MBeanServer javax.management.MBeanServer = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( javax.management.MBeanServer .class ) ; java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.integration.monitor.MBeanExporterIntegrationTests> ( ) , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; assertNotNull ( org.springframework.integration.monitor.IntegrationMBeanExporter ) ; javax.management.MBeanServer javax.management.MBeanServer = org.springframework.integration.monitor.GenericXmlApplicationContext . getBean ( javax.management.MBeanServer .class ) ; java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.integration.monitor.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.Config1 .class ) ; AnnotationConfigApplicationContext org.springframework.integration.monitor.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.integration.monitor.MBeanExporterIntegrationTests.Config2 .class ) ; assertSame ( TestUtils . getPropertyValue ( org.springframework.integration.monitor.AnnotationConfigApplicationContext . getBean ( IntegrationMBeanExporter .class ) , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.monitor.AnnotationConfigApplicationContext . getBean ( IntegrationMBeanExporter .class ) , STRING ) ) ; org.springframework.integration.monitor.AnnotationConfigApplicationContext . close ( ) ; org.springframework.integration.monitor.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( IntegrationObjectSupport org.springframework.integration.monitor.IntegrationObjectSupport ) { this . org.springframework.integration.monitor.IntegrationObjectSupport = org.springframework.integration.monitor.IntegrationObjectSupport ; setComponentName ( org.springframework.integration.monitor.IntegrationObjectSupport . getComponentName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( ) java.lang.Exception { Assert . state ( java.util.Date != null , STRING ) ; return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.util.Date .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { Assert . state ( java.util.Date != null , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.monitor.MessageChannel ) { this . org.springframework.integration.monitor.MessageChannel = org.springframework.integration.monitor.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.monitor.MBeanExporterIntegrationTests.Metric org.springframework.integration.monitor.MBeanExporterIntegrationTests.Metric ( ) java.lang.Exception { Assert . state ( org.springframework.integration.monitor.MessageChannel != null , STRING ) ; return org.springframework.integration.monitor.MBeanExporterIntegrationTests.Metric ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.integration.monitor.MBeanExporterIntegrationTests.Metric .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.monitor.MessageChannel ) { this . org.springframework.integration.monitor.MessageChannel = org.springframework.integration.monitor.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { Assert . state ( org.springframework.integration.monitor.MessageChannel != null , STRING ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { java.lang.Thread . void ( NUMBER ) ; int ++ ; return STRING + int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.monitor.Message<?> , long long ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { this . boolean = true ; return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { this . boolean = true ; return NUMBER ; }  <METHOD_END>
