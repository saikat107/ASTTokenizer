<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . DISCONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . DISCONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING + java.lang.String + java.lang.String + STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . CONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getFirstNativeHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getHost ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . SEND , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . toString ( ) , NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getDestination ( ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . SEND , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getContentLength ( ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . SEND , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( - NUMBER ) , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getContentLength ( ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . SEND , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getContentLength ( ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . SEND , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getContentLength ( ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . DISCONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getFirstNativeHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = StompConversionException .class ) public void void ( ) { org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( ( java.lang.String + java.lang.String ) . byte[] ( ) ) ; final java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.StompDecoder . decode ( java.nio.ByteBuffer ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( StompCommand . SEND , StompHeaderAccessor . wrap ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) ) . getCommand ( ) ) ; assertEquals ( StompCommand . DISCONNECT , StompHeaderAccessor . wrap ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) ) . getCommand ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING + java.lang.String + java.lang.String + STRING ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ; assertEquals ( StompCommand . CONNECT , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.StompHeaderAccessor . toNativeHeaderMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getFirstNativeHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getFirstNativeHeader ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.Message<byte[]> . getPayload ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = StompConversionException .class ) public void void ( ) { org.springframework.messaging.simp.stomp.Message<byte[]> ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( java.lang.String . byte[] ( ) ) ; final java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.StompDecoder . decode ( java.nio.ByteBuffer ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( SimpMessageType . HEARTBEAT , StompHeaderAccessor . wrap ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) ) . getMessageType ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( java.lang.String . byte[] ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.Message<byte[]> ( java.nio.ByteBuffer ) ) ; assertEquals ( NUMBER , java.nio.ByteBuffer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.stomp.Message<byte[]> < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> ( java.lang.String java.lang.String ) { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( java.lang.String . byte[] ( ) ) ; return org.springframework.messaging.simp.stomp.Message<byte[]> ( java.nio.ByteBuffer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.stomp.Message<byte[]> < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> ( java.nio.ByteBuffer java.nio.ByteBuffer ) { java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = this . org.springframework.messaging.simp.stomp.StompDecoder . decode ( java.nio.ByteBuffer ) ; if ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . isEmpty ( ) ) { return null ; } else { return java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) ; } }  <METHOD_END>
