<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . initial ( TestStates . SI ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . SI ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . initial ( TestStates . SI ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . state ( TestStates . SI ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . SI ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . state ( TestStates . SI ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . state ( TestStates . SI ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . SI ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . parent ( TestStates . SI ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . state ( TestStates . S1 ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . S1 ) ) ; assertThat ( ( TestStates ) org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getParent ( ) , is ( TestStates . SI ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> = java.util.Arrays . java.util.List ( org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> ( ) ) ; DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . initial ( TestStates . S1 ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . state ( TestStates . S1 , null , java.util.Collection<org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . S1 ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getEntryActions ( ) , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getExitActions ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> = java.util.Arrays . java.util.List ( org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> ( ) ) ; DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . state ( TestStates . S2 , java.util.Collection<org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , null ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . S2 ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getExitActions ( ) , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getEntryActions ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . end ( TestStates . SF ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . SF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . state ( TestStates . SF ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . end ( TestStates . SF ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . SF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> = new DefaultStateConfigurer < TestStates , TestEvents > ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder = new org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ( ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . choice ( TestStates . S1 ) ; org.springframework.statemachine.config.configurers.DefaultStateConfigurer<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> . configure ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getState ( ) , is ( TestStates . S1 ) ) ; assertThat ( org.springframework.statemachine.config.configurers.DefaultStateConfigurerTests.TestStateMachineStateBuilder . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> . iterator ( ) . next ( ) . getPseudoStateKind ( ) , is ( PseudoStateKind . CHOICE ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> < StateData < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> ) { this . java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> = java.util.Collection<org.springframework.statemachine.config.configurers.StateData<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents>> ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.config.configurers.Action<org.springframework.statemachine.config.configurers.TestStates,org.springframework.statemachine.config.configurers.TestEvents> ( ) { return new TestExitAction ( ) ; }  <METHOD_END>
