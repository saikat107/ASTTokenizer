<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.boot.autoconfigure.orm.jpa.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.boot.autoconfigure.orm.jpa.BeansException { if ( java.lang.Object instanceof javax.sql.DataSource ) { this . javax.sql.DataSource = ( javax.sql.DataSource ) java.lang.Object ; } if ( java.lang.Object instanceof JpaProperties ) { this . org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = ( JpaProperties ) java.lang.Object ; } if ( java.lang.Object instanceof EntityManagerFactory ) { void ( ( EntityManagerFactory ) java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( EntityManagerFactory org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactory ) { javax.sql.DataSource javax.sql.DataSource = javax.sql.DataSource ( org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactory ) ; if ( javax.sql.DataSource != null && boolean ( javax.sql.DataSource ) ) { this . org.springframework.boot.autoconfigure.orm.jpa.ApplicationContext . publishEvent ( new DataSourceInitializedEvent ( javax.sql.DataSource ) ) ; } }  <METHOD_END>
<METHOD_START> private javax.sql.DataSource javax.sql.DataSource ( EntityManagerFactory org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactory ) { java.lang.Object java.lang.Object = org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactory . getProperties ( ) . get ( STRING ) ; return ( java.lang.Object != null && java.lang.Object instanceof javax.sql.DataSource ? ( javax.sql.DataSource ) java.lang.Object : this . javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( javax.sql.DataSource javax.sql.DataSource ) { if ( this . org.springframework.boot.autoconfigure.orm.jpa.JpaProperties == null ) { return true ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ) ; if ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.boot.autoconfigure.orm.jpa.AnnotationMetadata , BeanDefinitionRegistry org.springframework.boot.autoconfigure.orm.jpa.BeanDefinitionRegistry ) { if ( ! org.springframework.boot.autoconfigure.orm.jpa.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { GenericBeanDefinition org.springframework.boot.autoconfigure.orm.jpa.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.boot.autoconfigure.orm.jpa.GenericBeanDefinition . setBeanClass ( org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher .class ) ; org.springframework.boot.autoconfigure.orm.jpa.GenericBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.boot.autoconfigure.orm.jpa.GenericBeanDefinition . setSynthetic ( true ) ; org.springframework.boot.autoconfigure.orm.jpa.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.autoconfigure.orm.jpa.GenericBeanDefinition ) ; } }  <METHOD_END>
