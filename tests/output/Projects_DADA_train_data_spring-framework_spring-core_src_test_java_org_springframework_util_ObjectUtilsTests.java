<METHOD_START> @ Test public void void ( ) { assertTrue ( ObjectUtils . isCheckedException ( new java.lang.Exception ( ) ) ) ; assertTrue ( ObjectUtils . isCheckedException ( new java.sql.SQLException ( ) ) ) ; assertFalse ( ObjectUtils . isCheckedException ( new java.lang.RuntimeException ( ) ) ) ; assertFalse ( ObjectUtils . isCheckedException ( new java.lang.IllegalArgumentException ( STRING ) ) ) ; assertTrue ( ObjectUtils . isCheckedException ( new java.lang.Throwable ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class [ NUMBER ] ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class [] { java.lang.Exception .class } ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class [] { java.sql.SQLException .class , java.io.IOException .class } ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class [] { java.lang.Throwable .class } ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.RuntimeException ( ) ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.RuntimeException ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.RuntimeException ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.RuntimeException ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.RuntimeException ( ) , java.lang.Class<?>[] ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Exception ( ) ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Exception ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Exception ( ) , java.lang.Class<?>[] ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Exception ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Exception ( ) , java.lang.Class<?>[] ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.sql.SQLException ( ) ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.sql.SQLException ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.sql.SQLException ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.sql.SQLException ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.sql.SQLException ( ) , java.lang.Class<?>[] ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Throwable ( ) ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Throwable ( ) , java.lang.Class<?>[] ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Throwable ( ) , java.lang.Class<?>[] ) ) ; assertFalse ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Throwable ( ) , java.lang.Class<?>[] ) ) ; assertTrue ( ObjectUtils . isCompatibleWithThrowsClause ( new java.lang.Throwable ( ) , java.lang.Class<?>[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isEmpty ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isEmpty ( new char [ NUMBER ] ) ) ; assertTrue ( isEmpty ( new java.lang.Object [ NUMBER ] ) ) ; assertTrue ( isEmpty ( new java.lang.Integer [ NUMBER ] ) ) ; assertFalse ( isEmpty ( new int [] { NUMBER } ) ) ; assertFalse ( isEmpty ( new java.lang.Integer [] { new java.lang.Integer ( NUMBER ) } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isEmpty ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ) ; assertTrue ( isEmpty ( java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; assertFalse ( isEmpty ( java.util.Set<java.lang.String> ) ) ; assertFalse ( isEmpty ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isEmpty ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; assertFalse ( isEmpty ( java.util.HashMap<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( isEmpty ( new java.lang.StringBuilder ( ) ) ) ; assertTrue ( isEmpty ( STRING ) ) ; assertFalse ( isEmpty ( new java.lang.StringBuilder ( STRING ) ) ) ; assertFalse ( isEmpty ( STRING ) ) ; assertFalse ( isEmpty ( STRING ) ) ; assertFalse ( isEmpty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( isEmpty ( NUMBER ) ) ; assertFalse ( isEmpty ( new java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int [] int[] = new int [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ; java.lang.Integer [] java.lang.Integer[] = ( java.lang.Integer [] ) ObjectUtils . toObjectArray ( int[] ) ; assertTrue ( java.lang.Integer[] . int == NUMBER ) ; for ( int int = NUMBER ; int < java.lang.Integer[] . int ; int ++ ) { assertEquals ( int[] [ int ] , java.lang.Integer[] [ int ] . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = ObjectUtils . toObjectArray ( null ) ; assertNotNull ( java.lang.Object[] ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = ObjectUtils . toObjectArray ( new byte [] {} ) ; assertNotNull ( java.lang.Object[] ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; ObjectUtils . toObjectArray ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; assertArrayEquals ( java.lang.String[] , ObjectUtils . toObjectArray ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; java.lang.String java.lang.String = STRING ; java.lang.Object [] java.lang.Object[] = ObjectUtils . addObjectToArray ( java.lang.String[] , java.lang.String ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; assertEquals ( java.lang.String , java.lang.Object[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [ NUMBER ] ; java.lang.String java.lang.String = STRING ; java.lang.String [] java.lang.String[] = ObjectUtils . addObjectToArray ( java.lang.String[] , java.lang.String ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String [] java.lang.String[] = new java.lang.String [] { java.lang.String } ; java.lang.String java.lang.String = STRING ; java.lang.String [] java.lang.String[] = ObjectUtils . addObjectToArray ( java.lang.String[] , java.lang.String ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { null } ; java.lang.String java.lang.String = STRING ; java.lang.String [] java.lang.String[] = ObjectUtils . addObjectToArray ( java.lang.String[] , java.lang.String ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( null , java.lang.String[] [ NUMBER ] ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String [] java.lang.String[] = ObjectUtils . addObjectToArray ( null , java.lang.String ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = ObjectUtils . addObjectToArray ( null , null ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; assertEquals ( null , java.lang.Object[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( ObjectUtils . nullSafeEquals ( new java.lang.String [] { STRING , STRING , STRING } , new java.lang.String [] { STRING , STRING , STRING } ) ) ; assertTrue ( ObjectUtils . nullSafeEquals ( new int [] { NUMBER , NUMBER , NUMBER } , new int [] { NUMBER , NUMBER , NUMBER } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Deprecated public void void ( ) { int int = java.lang.Boolean . java.lang.Boolean . int ( ) ; assertEquals ( int , ObjectUtils . hashCode ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Deprecated public void void ( ) { int int = java.lang.Boolean . java.lang.Boolean . int ( ) ; assertEquals ( int , ObjectUtils . hashCode ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Deprecated public void void ( ) { double double = NUMBER ; int int = ( new java.lang.Double ( double ) ) . int ( ) ; assertEquals ( int , ObjectUtils . hashCode ( double ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Deprecated public void void ( ) { float float = NUMBER ; int int = ( new java.lang.Float ( float ) ) . int ( ) ; assertEquals ( int , ObjectUtils . hashCode ( float ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Deprecated public void void ( ) { long long = NUMBER ; int int = ( new java.lang.Long ( long ) ) . int ( ) ; assertEquals ( int , ObjectUtils . hashCode ( long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + ObjectUtils . getIdentityHexString ( java.lang.Object ) ; java.lang.String java.lang.String = ObjectUtils . identityToString ( java.lang.Object ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . identityToString ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveArray ( boolean [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClassUtils . isPrimitiveArray ( java.lang.Object [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClassUtils . isPrimitiveArray ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( byte .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Byte .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Character .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( char .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Double .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( float .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Float .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( int .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( short .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Short .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER * NUMBER + java.lang.Boolean . java.lang.Boolean . int ( ) ; int = NUMBER * int + java.lang.Boolean . java.lang.Boolean . int ( ) ; boolean [] boolean[] = { true , false } ; int int = ObjectUtils . nullSafeHashCode ( boolean[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( boolean [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER * NUMBER + NUMBER ; int = NUMBER * int + NUMBER ; byte [] byte[] = { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( byte[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( byte [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER * NUMBER + 'a' ; int = NUMBER * int + 'E' ; char [] char[] = { 'a' , 'E' } ; int int = ObjectUtils . nullSafeHashCode ( char[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( char [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.lang.Double . long ( NUMBER ) ; int int = NUMBER * NUMBER + ( int ) ( long ^ ( long >>> NUMBER ) ) ; long = java.lang.Double . long ( NUMBER ) ; int = NUMBER * int + ( int ) ( long ^ ( long >>> NUMBER ) ) ; double [] double[] = { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( double[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( double [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER * NUMBER + java.lang.Float . int ( NUMBER ) ; int = NUMBER * int + java.lang.Float . int ( NUMBER ) ; float [] float[] = { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( float[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( float [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER * NUMBER + NUMBER ; int = NUMBER * int + NUMBER ; int [] int[] = { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( int[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( int [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = NUMBER ; int int = NUMBER * NUMBER + ( int ) ( long ^ ( long >>> NUMBER ) ) ; long = NUMBER ; int = NUMBER * int + ( int ) ( long ^ ( long >>> NUMBER ) ) ; long [] long[] = { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( long[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( long [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String . int ( ) , ObjectUtils . nullSafeHashCode ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER * NUMBER + STRING . int ( ) ; int = NUMBER * int + STRING . int ( ) ; java.lang.Object [] java.lang.Object[] = { STRING , STRING } ; int int = ObjectUtils . nullSafeHashCode ( java.lang.Object[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( java.lang.Object [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new boolean [] { true , false } ; int int = ObjectUtils . nullSafeHashCode ( ( boolean [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new byte [] { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( ( byte [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new char [] { 'l' , 'M' } ; int int = ObjectUtils . nullSafeHashCode ( ( char [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new double [] { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( ( double [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new float [] { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( ( float [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new int [] { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( ( int [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new long [] { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( ( long [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object [] { STRING , STRING } ; int int = ObjectUtils . nullSafeHashCode ( ( java.lang.Object [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new short [] { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( ( short [] ) java.lang.Object ) ; void ( int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( java.lang.Object ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER * NUMBER + NUMBER ; int = NUMBER * int + NUMBER ; short [] short[] = { NUMBER , NUMBER } ; int int = ObjectUtils . nullSafeHashCode ( short[] ) ; assertEquals ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , ObjectUtils . nullSafeHashCode ( ( short [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { boolean [] boolean[] = { true , false } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( boolean[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { boolean [] boolean[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( boolean[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( boolean [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { byte [] byte[] = { NUMBER , NUMBER } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { byte [] byte[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( byte [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { char [] char[] = { 'A' , 'B' } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( char[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { char [] char[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( char[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( char [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { double [] double[] = { NUMBER , NUMBER } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( double[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { double [] double[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( double[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( double [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { float [] float[] = { NUMBER , NUMBER } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( float[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { float [] float[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( float[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( float [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int [] int[] = { NUMBER , NUMBER } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( int[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int [] int[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( int[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( int [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long [] long[] = { NUMBER , NUMBER } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( long[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long [] long[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( long[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( long [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING , new java.lang.Long ( NUMBER ) } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( java.lang.Object [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { short [] short[] = { NUMBER , NUMBER } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( short[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { short [] short[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( short[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( short [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = { STRING , STRING } ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = {} ; assertEquals ( STRING , ObjectUtils . nullSafeToString ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , ObjectUtils . nullSafeToString ( ( java.lang.String [] ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( true ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( true ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( true ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( true ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( true ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( true ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( false ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING , true ) , is ( true ) ) ; assertThat ( ObjectUtils . containsConstant ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING , true ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ObjectUtils . caseInsensitiveValueOf ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes ) ) ; assertThat ( ObjectUtils . caseInsensitiveValueOf ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) , is ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes ) ) ; org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( is ( STRING ) ) ; ObjectUtils . caseInsensitiveValueOf ( org.springframework.util.ObjectUtilsTests.Tropes . org.springframework.util.ObjectUtilsTests.Tropes[] ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , java.lang.Object java.lang.Object ) { int int = ObjectUtils . nullSafeHashCode ( java.lang.Object ) ; assertEquals ( int , int ) ; assertTrue ( java.lang.Object . int ( ) != int ) ; }  <METHOD_END>
