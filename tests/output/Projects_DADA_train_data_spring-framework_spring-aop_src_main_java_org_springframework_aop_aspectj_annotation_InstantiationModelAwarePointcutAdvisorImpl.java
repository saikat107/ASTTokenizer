<METHOD_START> public void ( AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , java.lang.reflect.Method java.lang.reflect.Method , AspectJAdvisorFactory org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory , MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory , int int , java.lang.String java.lang.String ) { this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut = org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ; this . java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; this . java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; this . java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory = org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ; this . org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory = org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ; this . int = int ; this . java.lang.String = java.lang.String ; if ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . isLazilyInstantiated ( ) ) { Pointcut org.springframework.aop.aspectj.annotation.Pointcut = Pointcuts . union ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getPerClausePointcut ( ) , this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ) ; this . org.springframework.aop.aspectj.annotation.Pointcut = new org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.PerTargetInstantiationModelPointcut ( this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , org.springframework.aop.aspectj.annotation.Pointcut , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; this . boolean = true ; } else { this . org.springframework.aop.aspectj.annotation.Pointcut = this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ; this . boolean = false ; this . org.springframework.aop.aspectj.annotation.Advice = org.springframework.aop.aspectj.annotation.Advice ( this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.aspectj.annotation.Pointcut org.springframework.aop.aspectj.annotation.Pointcut ( ) { return this . org.springframework.aop.aspectj.annotation.Pointcut ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( org.springframework.aop.aspectj.annotation.AspectMetadata ( ) . getAjType ( ) . getPerClause ( ) . getKind ( ) != PerClauseKind . SINGLETON ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.aspectj.annotation.AspectMetadata org.springframework.aop.aspectj.annotation.AspectMetadata ( ) { return this . org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized org.springframework.aop.aspectj.annotation.Advice org.springframework.aop.aspectj.annotation.Advice ( ) { if ( this . org.springframework.aop.aspectj.annotation.Advice == null ) { this . org.springframework.aop.aspectj.annotation.Advice = org.springframework.aop.aspectj.annotation.Advice ( this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ) ; } return this . org.springframework.aop.aspectj.annotation.Advice ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized boolean boolean ( ) { return ( this . org.springframework.aop.aspectj.annotation.Advice != null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.aspectj.annotation.Advice org.springframework.aop.aspectj.annotation.Advice ( AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ) { return this . org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory . getAdvice ( this . java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , this . org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory , this . int , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ( ) { return this . org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ( ) { return this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getOrder ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( this . java.lang.Boolean == null ) { void ( ) ; } return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( this . java.lang.Boolean == null ) { void ( ) ; } return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> private void void ( ) { AspectJAnnotation < ? > org.springframework.aop.aspectj.annotation.AspectJAnnotation<?> = AbstractAspectJAdvisorFactory . findAspectJAnnotationOnMethod ( this . java.lang.reflect.Method ) ; if ( org.springframework.aop.aspectj.annotation.AspectJAnnotation<> == null ) { this . java.lang.Boolean = false ; this . java.lang.Boolean = false ; } else { switch ( org.springframework.aop.aspectj.annotation.AspectJAnnotation<> . getAnnotationType ( ) ) { case AtAfter : case AtAfterReturning : case AtAfterThrowing : this . java.lang.Boolean = true ; this . java.lang.Boolean = false ; break; case AtAround : case AtPointcut : this . java.lang.Boolean = false ; this . java.lang.Boolean = false ; break; case AtBefore : this . java.lang.Boolean = false ; this . java.lang.Boolean = true ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ( ) . getExpression ( ) + STRING + this . java.lang.reflect.Method + STRING + this . org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getAjType ( ) . getPerClause ( ) . getKind ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; try { this . java.lang.reflect.Method = this . java.lang.Class<> . java.lang.reflect.Method ( this . java.lang.String , this . java.lang.Class<?>[] ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalStateException ( STRING , java.lang.NoSuchMethodException ) ; } }  <METHOD_END>
<METHOD_START> private void ( AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , Pointcut org.springframework.aop.aspectj.annotation.Pointcut , MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) { this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut = org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ; this . org.springframework.aop.aspectj.annotation.Pointcut = org.springframework.aop.aspectj.annotation.Pointcut ; if ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory instanceof LazySingletonAspectInstanceFactoryDecorator ) { this . org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator = ( LazySingletonAspectInstanceFactoryDecorator ) org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( boolean ( ) && this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , java.lang.Class<> ) ) || this . org.springframework.aop.aspectj.annotation.Pointcut . getMethodMatcher ( ) . matches ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return ( boolean ( ) && this . org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ( this . org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator == null || this . org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . isMaterialized ( ) ) ; }  <METHOD_END>
