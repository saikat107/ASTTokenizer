<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest = new WebRequest ( new java.net.URL ( STRING ) ) ; WebResponseData org.springframework.test.web.servlet.htmlunit.WebResponseData = new WebResponseData ( STRING . byte[] ( STRING ) , NUMBER , STRING , java.util.Collections .< NameValuePair > java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> ( ) ) ; org.springframework.test.web.servlet.htmlunit.WebResponse = new WebResponse ( org.springframework.test.web.servlet.htmlunit.WebResponseData , org.springframework.test.web.servlet.htmlunit.WebRequest , NUMBER ) ; org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection = new DelegatingWebConnection ( org.springframework.test.web.servlet.htmlunit.WebConnection , new DelegateWebConnection ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher , org.springframework.test.web.servlet.htmlunit.WebConnection ) , new DelegateWebConnection ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher , org.springframework.test.web.servlet.htmlunit.WebConnection ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.test.web.servlet.htmlunit.WebConnection . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ) . thenReturn ( org.springframework.test.web.servlet.htmlunit.WebResponse ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse , sameInstance ( org.springframework.test.web.servlet.htmlunit.WebResponse ) ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher ) . matches ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher ) . matches ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; verifyNoMoreInteractions ( org.springframework.test.web.servlet.htmlunit.WebConnection , org.springframework.test.web.servlet.htmlunit.WebConnection ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebConnection ) . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher . matches ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ) . thenReturn ( true ) ; when ( org.springframework.test.web.servlet.htmlunit.WebConnection . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ) . thenReturn ( org.springframework.test.web.servlet.htmlunit.WebResponse ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse , sameInstance ( org.springframework.test.web.servlet.htmlunit.WebResponse ) ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher ) . matches ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; verifyNoMoreInteractions ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher , org.springframework.test.web.servlet.htmlunit.WebConnection , org.springframework.test.web.servlet.htmlunit.WebConnection ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebConnection ) . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher . matches ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ) . thenReturn ( true ) ; when ( org.springframework.test.web.servlet.htmlunit.WebConnection . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ) . thenReturn ( org.springframework.test.web.servlet.htmlunit.WebResponse ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse , sameInstance ( org.springframework.test.web.servlet.htmlunit.WebResponse ) ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher ) . matches ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher ) . matches ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; verifyNoMoreInteractions ( org.springframework.test.web.servlet.htmlunit.WebConnection , org.springframework.test.web.servlet.htmlunit.WebConnection ) ; verify ( org.springframework.test.web.servlet.htmlunit.WebConnection ) . getResponse ( org.springframework.test.web.servlet.htmlunit.WebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; WebClient org.springframework.test.web.servlet.htmlunit.WebClient = new WebClient ( ) ; MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( org.springframework.test.web.servlet.htmlunit.DelegatingWebConnectionTests.TestController .class ) . build ( ) ; MockMvcWebConnection org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection = new MockMvcWebConnection ( org.springframework.test.web.servlet.htmlunit.MockMvc , org.springframework.test.web.servlet.htmlunit.WebClient ) ; WebRequestMatcher org.springframework.test.web.servlet.htmlunit.WebRequestMatcher = new UrlRegexRequestMatcher ( STRING ) ; WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = new HttpWebConnection ( org.springframework.test.web.servlet.htmlunit.WebClient ) ; WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = new DelegatingWebConnection ( org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection , new DelegateWebConnection ( org.springframework.test.web.servlet.htmlunit.WebRequestMatcher , org.springframework.test.web.servlet.htmlunit.WebConnection ) ) ; org.springframework.test.web.servlet.htmlunit.WebClient . setWebConnection ( org.springframework.test.web.servlet.htmlunit.WebConnection ) ; Page org.springframework.test.web.servlet.htmlunit.Page = org.springframework.test.web.servlet.htmlunit.WebClient . getPage ( STRING ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Page . getWebResponse ( ) . getStatusCode ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Page . getWebResponse ( ) . getContentAsString ( ) , not ( isEmptyString ( ) ) ) ; }  <METHOD_END>
