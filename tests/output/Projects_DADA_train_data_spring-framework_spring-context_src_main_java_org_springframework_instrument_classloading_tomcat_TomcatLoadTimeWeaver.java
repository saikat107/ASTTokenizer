<METHOD_START> public void ( ) { this( ClassUtils . getDefaultClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; java.lang.Class<?> < ? > java.lang.Class<?> ; try { java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; if ( ! java.lang.Class<> . boolean ( java.lang.ClassLoader ) ) { java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) ; } try { this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.instrument.ClassFileTransformer .class ) ; java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMethodIfAvailable ( java.lang.Class<> , STRING ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING ) ; } this . java.lang.reflect.Method = java.lang.reflect.Method ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { try { this . java.lang.reflect.Method . java.lang.Object ( this . java.lang.ClassLoader , java.lang.instrument.ClassFileTransformer ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new java.lang.IllegalStateException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { try { return new OverridingClassLoader ( this . java.lang.ClassLoader , ( java.lang.ClassLoader ) this . java.lang.reflect.Method . java.lang.Object ( this . java.lang.ClassLoader ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new java.lang.IllegalStateException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
