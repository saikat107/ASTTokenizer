<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.codec.xml.Jaxb2XmlEncoder . canEncode ( ResolvableType . forClass ( Pojo .class ) , MediaType . APPLICATION_XML ) ) ; assertTrue ( this . org.springframework.http.codec.xml.Jaxb2XmlEncoder . canEncode ( ResolvableType . forClass ( Pojo .class ) , MediaType . TEXT_XML ) ) ; assertFalse ( this . org.springframework.http.codec.xml.Jaxb2XmlEncoder . canEncode ( ResolvableType . forClass ( Pojo .class ) , MediaType . APPLICATION_JSON ) ) ; assertTrue ( this . org.springframework.http.codec.xml.Jaxb2XmlEncoder . canEncode ( ResolvableType . forClass ( Jaxb2XmlDecoderTests . Jaxb2XmlDecoderTests .class ) , MediaType . APPLICATION_XML ) ) ; assertFalse ( this . org.springframework.http.codec.xml.Jaxb2XmlEncoder . canEncode ( ResolvableType . forClass ( java.lang.Class<? extends org.springframework.http.codec.xml.Jaxb2XmlEncoderTests> ( ) ) , MediaType . APPLICATION_XML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < Pojo > org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.Pojo> = Flux . just ( new Pojo ( STRING , STRING ) , new Pojo ( STRING , STRING ) ) ; Flux < DataBuffer > org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> = this . org.springframework.http.codec.xml.Jaxb2XmlEncoder . encode ( org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.Pojo> , this . bufferFactory , ResolvableType . forClass ( Pojo .class ) , MediaType . APPLICATION_XML , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> ) . consumeNextWith ( dataBuffer -> { try { String s = DataBufferTestUtils . dumpString ( dataBuffer , StandardCharsets . UTF_8 ) ; assertThat ( s , isSimilarTo ( STRING + STRING ) ) ; } finally { DataBufferUtils . release ( dataBuffer ) ; } } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
