<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.test.web.client.RootUriRequestExpectationManager = new RootUriRequestExpectationManager ( this . java.lang.String , this . org.springframework.boot.test.web.client.RequestExpectationManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.web.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.web.client.ExpectedException . expectMessage ( STRING ) ; new RootUriRequestExpectationManager ( null , this . org.springframework.boot.test.web.client.RequestExpectationManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.web.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.web.client.ExpectedException . expectMessage ( STRING ) ; new RootUriRequestExpectationManager ( this . java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpectedCount org.springframework.boot.test.web.client.ExpectedCount = mock ( ExpectedCount .class ) ; RequestMatcher org.springframework.boot.test.web.client.RequestMatcher = mock ( RequestMatcher .class ) ; this . org.springframework.boot.test.web.client.RootUriRequestExpectationManager . expectRequest ( org.springframework.boot.test.web.client.ExpectedCount , org.springframework.boot.test.web.client.RequestMatcher ) ; verify ( this . org.springframework.boot.test.web.client.RequestExpectationManager ) . expectRequest ( org.springframework.boot.test.web.client.ExpectedCount , org.springframework.boot.test.web.client.RequestMatcher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest = mock ( ClientHttpRequest .class ) ; given ( org.springframework.boot.test.web.client.ClientHttpRequest . getURI ( ) ) . willReturn ( new java.net.URI ( STRING ) ) ; this . org.springframework.boot.test.web.client.RootUriRequestExpectationManager . validateRequest ( org.springframework.boot.test.web.client.ClientHttpRequest ) ; verify ( this . org.springframework.boot.test.web.client.RequestExpectationManager ) . validateRequest ( org.springframework.boot.test.web.client.ClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest = mock ( ClientHttpRequest .class ) ; given ( org.springframework.boot.test.web.client.ClientHttpRequest . getURI ( ) ) . willReturn ( new java.net.URI ( this . java.lang.String + STRING ) ) ; this . org.springframework.boot.test.web.client.RootUriRequestExpectationManager . validateRequest ( org.springframework.boot.test.web.client.ClientHttpRequest ) ; verify ( this . org.springframework.boot.test.web.client.RequestExpectationManager ) . validateRequest ( this . org.springframework.boot.test.web.client.ArgumentCaptor<org.springframework.boot.test.web.client.ClientHttpRequest> . capture ( ) ) ; HttpRequestWrapper org.springframework.boot.test.web.client.HttpRequestWrapper = ( HttpRequestWrapper ) this . org.springframework.boot.test.web.client.ArgumentCaptor<org.springframework.boot.test.web.client.ClientHttpRequest> . getValue ( ) ; assertThat ( org.springframework.boot.test.web.client.HttpRequestWrapper . getRequest ( ) ) . isSameAs ( org.springframework.boot.test.web.client.ClientHttpRequest ) ; assertThat ( org.springframework.boot.test.web.client.HttpRequestWrapper . getURI ( ) ) . isEqualTo ( new java.net.URI ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientHttpRequest org.springframework.boot.test.web.client.ClientHttpRequest = mock ( ClientHttpRequest .class ) ; given ( org.springframework.boot.test.web.client.ClientHttpRequest . getURI ( ) ) . willReturn ( new java.net.URI ( this . java.lang.String + STRING ) ) ; given ( this . org.springframework.boot.test.web.client.RequestExpectationManager . validateRequest ( ( ClientHttpRequest ) any ( ) ) ) . willThrow ( new java.lang.AssertionError ( STRING ) ) ; this . org.springframework.boot.test.web.client.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.web.client.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.test.web.client.RootUriRequestExpectationManager . validateRequest ( org.springframework.boot.test.web.client.ClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.web.client.RootUriRequestExpectationManager . reset ( ) ; verify ( this . org.springframework.boot.test.web.client.RequestExpectationManager ) . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplateBuilder ( ) . build ( ) ; MockRestServiceServer org.springframework.boot.test.web.client.MockRestServiceServer = RootUriRequestExpectationManager . bindTo ( org.springframework.boot.test.web.client.RestTemplate ) ; assertThat ( org.springframework.boot.test.web.client.MockRestServiceServer ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplateBuilder ( ) . build ( ) ; MockRestServiceServer org.springframework.boot.test.web.client.MockRestServiceServer = RootUriRequestExpectationManager . bindTo ( org.springframework.boot.test.web.client.RestTemplate , this . org.springframework.boot.test.web.client.RequestExpectationManager ) ; assertThat ( org.springframework.boot.test.web.client.MockRestServiceServer ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplateBuilder ( ) . rootUri ( this . java.lang.String ) . build ( ) ; RequestExpectationManager org.springframework.boot.test.web.client.RequestExpectationManager = RootUriRequestExpectationManager . forRestTemplate ( org.springframework.boot.test.web.client.RestTemplate , this . org.springframework.boot.test.web.client.RequestExpectationManager ) ; assertThat ( org.springframework.boot.test.web.client.RequestExpectationManager ) . isInstanceOf ( RootUriRequestExpectationManager .class ) ; assertThat ( org.springframework.boot.test.web.client.RequestExpectationManager ) . extracting ( STRING ) . containsExactly ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplateBuilder ( ) . build ( ) ; RequestExpectationManager org.springframework.boot.test.web.client.RequestExpectationManager = RootUriRequestExpectationManager . forRestTemplate ( org.springframework.boot.test.web.client.RestTemplate , this . org.springframework.boot.test.web.client.RequestExpectationManager ) ; assertThat ( org.springframework.boot.test.web.client.RequestExpectationManager ) . isSameAs ( this . org.springframework.boot.test.web.client.RequestExpectationManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplateBuilder ( ) . rootUri ( STRING ) . build ( ) ; MockRestServiceServer org.springframework.boot.test.web.client.MockRestServiceServer = RootUriRequestExpectationManager . bindTo ( org.springframework.boot.test.web.client.RestTemplate ) ; org.springframework.boot.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; org.springframework.boot.test.web.client.RestTemplate . getForEntity ( STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RestTemplate org.springframework.boot.test.web.client.RestTemplate = new RestTemplateBuilder ( ) . rootUri ( STRING ) . build ( ) ; MockRestServiceServer org.springframework.boot.test.web.client.MockRestServiceServer = RootUriRequestExpectationManager . bindTo ( org.springframework.boot.test.web.client.RestTemplate ) ; org.springframework.boot.test.web.client.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.boot.test.web.client.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.web.client.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.test.web.client.RestTemplate . getForEntity ( STRING , java.lang.String .class ) ; }  <METHOD_END>
