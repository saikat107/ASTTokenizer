<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . doesNotContainKeys ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . containsEntry ( STRING , SpringPhysicalNamingStrategy .class . java.lang.String ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . containsEntry ( STRING , SpringImplicitNamingStrategy .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . contains ( entry ( STRING , STRING ) , entry ( STRING , STRING ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . doesNotContainKeys ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . contains ( entry ( STRING , STRING ) , entry ( STRING , STRING ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . doesNotContainKeys ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . containsEntry ( AvailableSettings . USE_NEW_ID_GENERATOR_MAPPINGS , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . getHibernateProperties ( javax.sql.DataSource ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . containsEntry ( AvailableSettings . USE_NEW_ID_GENERATOR_MAPPINGS , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( STRING ) ; javax.sql.DataSource javax.sql.DataSource = javax.sql.DataSource ( ) ; Database org.springframework.boot.autoconfigure.orm.jpa.Database = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . determineDatabase ( javax.sql.DataSource ) ; assertThat ( org.springframework.boot.autoconfigure.orm.jpa.Database ) . isEqualTo ( Database . POSTGRESQL ) ; verify ( javax.sql.DataSource , never ( ) ) . getConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( ) ; Database org.springframework.boot.autoconfigure.orm.jpa.Database = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . determineDatabase ( javax.sql.DataSource ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.orm.jpa.Database ) . isEqualTo ( Database . H2 ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( STRING ) ; Database org.springframework.boot.autoconfigure.orm.jpa.Database = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . determineDatabase ( javax.sql.DataSource ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.orm.jpa.Database ) . isEqualTo ( Database . MYSQL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( ) ; Database org.springframework.boot.autoconfigure.orm.jpa.Database = org.springframework.boot.autoconfigure.orm.jpa.JpaProperties . determineDatabase ( javax.sql.DataSource ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.orm.jpa.Database ) . isEqualTo ( Database . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> private javax.sql.DataSource javax.sql.DataSource ( ) java.sql.SQLException { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willThrow ( java.sql.SQLException .class ) ; return javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> private javax.sql.DataSource javax.sql.DataSource ( java.lang.String java.lang.String ) { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; try { java.sql.DatabaseMetaData java.sql.DatabaseMetaData = mock ( java.sql.DatabaseMetaData .class ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( java.lang.String ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( java.sql.Connection . java.sql.DatabaseMetaData ( ) ) . willReturn ( java.sql.DatabaseMetaData ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { } return javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.orm.jpa.JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties ( java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.orm.jpa.JpaPropertiesTests.TestConfiguration .class ) ; org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext ; return this . org.springframework.boot.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . getBean ( JpaProperties .class ) ; }  <METHOD_END>
