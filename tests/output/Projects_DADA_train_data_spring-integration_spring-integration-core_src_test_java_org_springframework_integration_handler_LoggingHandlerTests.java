<METHOD_START> @ Test public void void ( ) { org.springframework.integration.handler.LoggingHandlerTests.TestBean org.springframework.integration.handler.LoggingHandlerTests.TestBean = new org.springframework.integration.handler.LoggingHandlerTests.TestBean ( STRING , NUMBER ) ; org.springframework.integration.handler.MessageChannel . send ( MessageBuilder . withPayload ( org.springframework.integration.handler.LoggingHandlerTests.TestBean ) . setHeader ( STRING , STRING ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LoggingHandler org.springframework.integration.handler.LoggingHandler = new LoggingHandler ( STRING ) ; org.springframework.integration.handler.LoggingHandler . setLogExpressionString ( STRING ) ; try { org.springframework.integration.handler.LoggingHandler . setShouldLogFullMessage ( true ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } org.springframework.integration.handler.LoggingHandler = new LoggingHandler ( STRING ) ; org.springframework.integration.handler.LoggingHandler . setShouldLogFullMessage ( true ) ; try { org.springframework.integration.handler.LoggingHandler . setLogExpressionString ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LoggingHandler org.springframework.integration.handler.LoggingHandler = new LoggingHandler ( STRING ) ; org.springframework.integration.handler.LoggingHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.LoggingHandler . afterPropertiesSet ( ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.handler.LoggingHandler ) ; Log org.springframework.integration.handler.Log = ( Log ) org.springframework.integration.handler.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.handler.Log = spy ( org.springframework.integration.handler.Log ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.handler.Log ) ; Expression org.springframework.integration.handler.Expression = ( Expression ) org.springframework.integration.handler.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.handler.Expression = spy ( org.springframework.integration.handler.Expression ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.handler.Expression ) ; when ( org.springframework.integration.handler.Log . isInfoEnabled ( ) ) . thenReturn ( false ) ; org.springframework.integration.handler.LoggingHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; verify ( org.springframework.integration.handler.Expression , never ( ) ) . getValue ( Mockito . any ( EvaluationContext .class ) , Mockito . any ( Message .class ) ) ; when ( org.springframework.integration.handler.Log . isInfoEnabled ( ) ) . thenReturn ( true ) ; org.springframework.integration.handler.LoggingHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; verify ( org.springframework.integration.handler.Expression , times ( NUMBER ) ) . getValue ( Mockito . any ( EvaluationContext .class ) , Mockito . any ( Message .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LoggingHandler org.springframework.integration.handler.LoggingHandler = new LoggingHandler ( Level . INFO ) ; org.springframework.integration.handler.LoggingHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.LoggingHandler . afterPropertiesSet ( ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.handler.LoggingHandler ) ; Log org.springframework.integration.handler.Log = ( Log ) org.springframework.integration.handler.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.handler.Log = spy ( org.springframework.integration.handler.Log ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.handler.Log ) ; when ( org.springframework.integration.handler.Log . isInfoEnabled ( ) ) . thenReturn ( true ) ; org.springframework.integration.handler.LoggingHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; verify ( org.springframework.integration.handler.Log , times ( NUMBER ) ) . info ( Mockito . anyString ( ) ) ; verify ( org.springframework.integration.handler.Log , never ( ) ) . warn ( Mockito . anyString ( ) ) ; org.springframework.integration.handler.LoggingHandler . setLevel ( Level . WARN ) ; org.springframework.integration.handler.LoggingHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; verify ( org.springframework.integration.handler.Log , times ( NUMBER ) ) . info ( Mockito . anyString ( ) ) ; verify ( org.springframework.integration.handler.Log , times ( NUMBER ) ) . warn ( Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LoggingHandler org.springframework.integration.handler.LoggingHandler = new LoggingHandler ( STRING ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.handler.LoggingHandler ) ; Log org.springframework.integration.handler.Log = ( Log ) org.springframework.integration.handler.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.handler.Log = spy ( org.springframework.integration.handler.Log ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.handler.Log ) ; java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; org.springframework.integration.handler.LoggingHandler . handleMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; verify ( org.springframework.integration.handler.Log ) . error ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
