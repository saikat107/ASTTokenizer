<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { SpringApplication . main ( java.lang.String[] ( ) ) ; assertThat ( java.lang.String ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication . main ( java.lang.String[] ( ClassUtils . getPackageName ( java.lang.Class<? extends org.springframework.boot.SimpleMainTests> ( ) ) + STRING ) ) ; assertThat ( java.lang.String ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication . main ( java.lang.String[] ( java.lang.Class<? extends org.springframework.boot.SimpleMainTests> ( ) . java.lang.String ( ) ) ) ; assertThat ( java.lang.String ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication . main ( java.lang.String[] ( STRING ) ) ; assertThat ( java.lang.String ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication . main ( java.lang.String[] ( java.lang.Class<? extends org.springframework.boot.SimpleMainTests> ( ) . java.lang.String ( ) , STRING ) ) ; assertThat ( java.lang.String ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( java.lang.String ... java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; if ( java.lang.String[] . int > NUMBER ) { java.util.List<java.lang.String> . boolean ( STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . org.springframework.boot.InternalOutputCapture . toString ( ) ; }  <METHOD_END>
