<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.websocket.client.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.websocket.client.Message<?> = this . org.springframework.integration.websocket.client.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.websocket.client.Message<> ) ; StompHeaderAccessor org.springframework.integration.websocket.client.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.integration.websocket.client.Message<> ) ; assertEquals ( StompCommand . MESSAGE . getMessageType ( ) , org.springframework.integration.websocket.client.StompHeaderAccessor . getMessageType ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.websocket.client.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.TomcatWebSocketTestServer org.springframework.integration.websocket.client.TomcatWebSocketTestServer ( ) { return new TomcatWebSocketTestServer ( org.springframework.integration.websocket.client.WebSocketClientTests.ServerFlowConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.WebSocketClient org.springframework.integration.websocket.client.WebSocketClient ( ) { return new SockJsClient ( java.util.Collections .< Transport > java.util.List<org.springframework.integration.websocket.client.Transport> ( new WebSocketTransport ( new StandardWebSocketClient ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.IntegrationWebSocketContainer org.springframework.integration.websocket.client.IntegrationWebSocketContainer ( ) { return new ClientWebSocketContainer ( org.springframework.integration.websocket.client.WebSocketClient ( ) , org.springframework.integration.websocket.client.TomcatWebSocketTestServer ( ) . getWsBaseUrl ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.SubProtocolHandler org.springframework.integration.websocket.client.SubProtocolHandler ( ) { return new StompSubProtocolHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.MessageChannel org.springframework.integration.websocket.client.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.MessageChannel org.springframework.integration.websocket.client.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.MessageProducer org.springframework.integration.websocket.client.MessageProducer ( ) { WebSocketInboundChannelAdapter org.springframework.integration.websocket.client.WebSocketInboundChannelAdapter = new WebSocketInboundChannelAdapter ( org.springframework.integration.websocket.client.IntegrationWebSocketContainer ( ) , new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.client.SubProtocolHandler ( ) ) ) ; org.springframework.integration.websocket.client.WebSocketInboundChannelAdapter . setOutputChannel ( org.springframework.integration.websocket.client.MessageChannel ( ) ) ; return org.springframework.integration.websocket.client.WebSocketInboundChannelAdapter ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.websocket.client.MessageHandler org.springframework.integration.websocket.client.MessageHandler ( ) { return new WebSocketOutboundMessageHandler ( org.springframework.integration.websocket.client.IntegrationWebSocketContainer ( ) , new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.client.SubProtocolHandler ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Transformer ( inputChannel = STRING , outputChannel = STRING , poller = @ Poller ( fixedDelay = STRING , maxMessagesPerPoll = STRING ) ) public org . springframework . integration . org.springframework.integration.transformer . org.springframework.integration.transformer.Transformer org.springframework.integration.transformer.Transformer ( ) { return new ObjectToStringTransformer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.DirectChannel org.springframework.integration.websocket.client.DirectChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.client.WebSocketClientTests.ServerFlowConfig.TestService org.springframework.integration.websocket.client.WebSocketClientTests.ServerFlowConfig.TestService ( ) { return new org.springframework.integration.websocket.client.WebSocketClientTests.ServerFlowConfig.TestService ( ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public byte [] byte[] ( java.lang.String java.lang.String ) { return ( STRING + java.lang.String ) . byte[] ( ) ; }  <METHOD_END>
