<METHOD_START> @ java.lang.Override public void void ( Scope org.springframework.data.gemfire.Scope ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. setScope ( Scope . LOCAL ) ; super. afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> , java.lang.Boolean java.lang.Boolean , DataPolicy org.springframework.data.gemfire.DataPolicy ) { if ( org.springframework.data.gemfire.DataPolicy == null || DataPolicy . NORMAL . equals ( org.springframework.data.gemfire.DataPolicy ) ) { DataPolicy org.springframework.data.gemfire.DataPolicy = ( isPersistent ( ) ? DataPolicy . PERSISTENT_REPLICATE : DataPolicy . NORMAL ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; } else if ( DataPolicy . PRELOADED . equals ( org.springframework.data.gemfire.DataPolicy ) ) { DataPolicy org.springframework.data.gemfire.DataPolicy = ( isPersistent ( ) ? DataPolicy . PERSISTENT_REPLICATE : DataPolicy . PRELOADED ) ; org.springframework.data.gemfire.RegionFactory<K,V> . setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; } else if ( DataPolicy . PERSISTENT_REPLICATE . equals ( org.springframework.data.gemfire.DataPolicy ) && RegionShortcutWrapper . valueOf ( getShortcut ( ) ) . isPersistent ( ) ) { org.springframework.data.gemfire.RegionFactory<K,V> . setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; } else { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.DataPolicy ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( RegionFactory < K , V > org.springframework.data.gemfire.RegionFactory<K,V> , java.lang.Boolean java.lang.Boolean , java.lang.String java.lang.String ) { DataPolicy org.springframework.data.gemfire.DataPolicy = null ; if ( java.lang.String != null ) { org.springframework.data.gemfire.DataPolicy = new DataPolicyConverter ( ) . convert ( java.lang.String ) ; Assert . notNull ( org.springframework.data.gemfire.DataPolicy , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } void ( org.springframework.data.gemfire.RegionFactory<K,V> , java.lang.Boolean , org.springframework.data.gemfire.DataPolicy ) ; }  <METHOD_END>
