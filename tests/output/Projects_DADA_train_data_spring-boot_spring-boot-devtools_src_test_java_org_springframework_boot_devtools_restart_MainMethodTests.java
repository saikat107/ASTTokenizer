<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.lang.reflect.Method = org.springframework.boot.devtools.restart.MainMethodTests.Valid .class . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.ExpectedException . expectMessage ( STRING ) ; new MainMethod ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MainMethod org.springframework.boot.devtools.restart.MainMethod = new org.springframework.boot.devtools.restart.MainMethodTests.TestThread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.MainMethodTests.Valid . void ( ) ; } } ) . org.springframework.boot.devtools.restart.MainMethod ( ) ; assertThat ( org.springframework.boot.devtools.restart.MainMethod . getMethod ( ) ) . isEqualTo ( this . java.lang.reflect.Method ) ; assertThat ( org.springframework.boot.devtools.restart.MainMethod . getDeclaringClassName ( ) ) . isEqualTo ( this . java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.MainMethodTests.Valid . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.restart.ExpectedException . expectMessage ( STRING ) ; new org.springframework.boot.devtools.restart.MainMethodTests.TestThread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.MainMethodTests.MissingArgs . void ( ) ; } } ) . org.springframework.boot.devtools.restart.MainMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.MainMethodTests.MissingArgs . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.restart.ExpectedException . expectMessage ( STRING ) ; new org.springframework.boot.devtools.restart.MainMethodTests.TestThread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { new org.springframework.boot.devtools.restart.MainMethodTests.NonStaticMain ( ) . void ( ) ; } } ) . org.springframework.boot.devtools.restart.MainMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { new org.springframework.boot.devtools.restart.MainMethodTests.NonStaticMain ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Runnable java.lang.Runnable ) { this . java.lang.Runnable = java.lang.Runnable ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.restart.MainMethod org.springframework.boot.devtools.restart.MainMethod ( ) java.lang.InterruptedException { void ( ) ; void ( ) ; if ( this . java.lang.Exception != null ) { ReflectionUtils . rethrowRuntimeException ( this . java.lang.Exception ) ; } return this . org.springframework.boot.devtools.restart.MainMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . java.lang.Runnable . void ( ) ; this . org.springframework.boot.devtools.restart.MainMethod = org.springframework.boot.devtools.restart.MainMethodTests . java.lang.ThreadLocal<org.springframework.boot.devtools.restart.MainMethod> . get ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . java.lang.Exception = java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String ... java.lang.String[] ) { void ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { java.lang.ThreadLocal<org.springframework.boot.devtools.restart.MainMethod> . set ( new MainMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { java.lang.ThreadLocal<org.springframework.boot.devtools.restart.MainMethod> . set ( new MainMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { java.lang.ThreadLocal<org.springframework.boot.devtools.restart.MainMethod> . set ( new MainMethod ( ) ) ; }  <METHOD_END>
