<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.naming.NamingException { super. afterPropertiesSet ( ) ; if ( this . boolean ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) javax.naming.NamingException { synchronized ( this . java.lang.Object ) { java.lang.Object java.lang.Object = lookup ( ) ; if ( this . boolean ) { this . java.lang.Object = java.lang.Object ; this . java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Object java.lang.Object ) throws org.springframework.ejb.access.EjbAccessException { try { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( STRING , ( java.lang.Class [] ) null ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new EjbAccessException ( STRING + java.lang.Object + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException { if ( ! this . boolean || ( this . boolean && ! boolean ( ) ) ) { return ( this . java.lang.Object != null ? this . java.lang.Object : lookup ( ) ) ; } else { synchronized ( this . java.lang.Object ) { if ( this . java.lang.Object == null ) { this . java.lang.Object = lookup ( ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ( this . java.lang.Object ) ; } return this . java.lang.Object ; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation ) throws java.lang.Throwable { javax.naming.Context javax.naming.Context = ( this . boolean ? getJndiTemplate ( ) . getContext ( ) : null ) ; try { return java.lang.Object ( org.springframework.ejb.access.MethodInvocation ) ; } finally { getJndiTemplate ( ) . releaseContext ( javax.naming.Context ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation ) throws java.lang.Throwable ;  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException , java.lang.reflect.InvocationTargetException { try { java.lang.Object java.lang.Object = java.lang.Object ( ) ; java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.reflect.Method ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Object ) ; } if ( java.lang.reflect.Method == null ) { return java.lang.Object ; } return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , ( java.lang.Object [] ) null ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new EjbAccessException ( STRING , java.lang.IllegalAccessException ) ; } }  <METHOD_END>
