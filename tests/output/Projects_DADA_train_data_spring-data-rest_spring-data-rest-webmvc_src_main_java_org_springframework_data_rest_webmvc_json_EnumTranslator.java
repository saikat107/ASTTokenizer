<METHOD_START> public void ( MessageSourceAccessor org.springframework.data.rest.webmvc.json.MessageSourceAccessor ) { Assert . notNull ( org.springframework.data.rest.webmvc.json.MessageSourceAccessor , STRING ) ; this . org.springframework.data.rest.webmvc.json.MessageSourceAccessor = org.springframework.data.rest.webmvc.json.MessageSourceAccessor ; this . boolean = true ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Enum<?> < ? > java.lang.Enum<?> ) { Assert . notNull ( java.lang.Enum<> , STRING ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.Enum<> . java.lang.Class<> ( ) . java.lang.String ( ) , java.lang.Enum<> . java.lang.String ( ) ) ; try { return org.springframework.data.rest.webmvc.json.MessageSourceAccessor . getMessage ( java.lang.String ) ; } catch ( NoSuchMessageException org.springframework.data.rest.webmvc.json.NoSuchMessageException ) { return boolean ? java.lang.String ( java.lang.Enum<> ) : java.lang.Enum<> . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Class<? extends java.lang.Enum<?>> < ? extends java.lang.Enum<?> < ? > > java.lang.Class<? extends java.lang.Enum<?>> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.Enum<?> < ? > java.lang.Enum<?> : java.lang.Class<> . getEnumConstants ( ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( java.lang.Enum<> ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public < T extends java.lang.Enum<?> < ? > > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return null ; } Assert . notNull ( java.lang.Class<T> , STRING ) ; T T = T ( java.lang.Class<T> , java.lang.String , true ) ; if ( T != null ) { return T ; } T = T ( java.lang.Class<T> , java.lang.String ) ; if ( T != null && boolean && java.lang.String ( T ) . boolean ( java.lang.String ) ) { return T ; } return boolean ? T ( java.lang.Class<T> , java.lang.String , false ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T extends java.lang.Enum<?> < ? > > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String , boolean boolean ) { for ( java.lang.Enum<?> < ? > java.lang.Enum<?> : java.lang.Class<T> . T[] ( ) ) { java.lang.String java.lang.String = boolean ? java.lang.String ( java.lang.Enum<> ) : java.lang.Enum<> . java.lang.String ( ) ; if ( java.lang.String != null && java.lang.String . boolean ( java.lang.String ) ) { return ( T ) java.lang.Enum<> ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Enum<?> < ? > java.lang.Enum<?> ) { return StringUtils . capitalize ( java.lang.Enum<> . java.lang.String ( ) . java.lang.String ( java.util.Locale . java.util.Locale ) . java.lang.String ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private < T extends java.lang.Enum<?> < ? > > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return T ( java.lang.Class<T> , java.lang.String . java.lang.String ( java.util.Locale . java.util.Locale ) . java.lang.String ( STRING , STRING ) , true ) ; }  <METHOD_END>
