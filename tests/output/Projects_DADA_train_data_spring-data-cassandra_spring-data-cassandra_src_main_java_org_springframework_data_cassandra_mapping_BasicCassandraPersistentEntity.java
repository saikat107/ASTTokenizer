<METHOD_START> public void ( TypeInformation < T > org.springframework.data.cassandra.mapping.TypeInformation<T> ) { this( org.springframework.data.cassandra.mapping.TypeInformation<T> , null , org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ); }  <METHOD_END>
<METHOD_START> public void ( TypeInformation < T > org.springframework.data.cassandra.mapping.TypeInformation<T> , CassandraMappingContext org.springframework.data.cassandra.mapping.CassandraMappingContext ) { this( org.springframework.data.cassandra.mapping.TypeInformation<T> , org.springframework.data.cassandra.mapping.CassandraMappingContext , org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ); }  <METHOD_END>
<METHOD_START> public void ( TypeInformation < T > org.springframework.data.cassandra.mapping.TypeInformation<T> , CassandraMappingContext org.springframework.data.cassandra.mapping.CassandraMappingContext , CassandraPersistentEntityMetadataVerifier org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ) { super( org.springframework.data.cassandra.mapping.TypeInformation<T> , java.util.Optional<java.util.Comparator<org.springframework.data.cassandra.mapping.CassandraPersistentProperty>> ); this . org.springframework.data.cassandra.mapping.CassandraMappingContext = org.springframework.data.cassandra.mapping.CassandraMappingContext ; void ( org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.mapping.CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ( ) { java.util.Optional<org.springframework.data.cassandra.mapping.Table> < Table > java.util.Optional<org.springframework.data.cassandra.mapping.Table> = findAnnotation ( Table .class ) ; return java.util.Optional<org.springframework.data.cassandra.mapping.Table> . map ( annotation -> determineName ( annotation . value ( ) , annotation . forceQuote ( ) ) ) . orElseGet ( this :: org.springframework.data.cassandra.mapping.CqlIdentifier ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Association < CassandraPersistentProperty > org.springframework.data.cassandra.mapping.Association<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) { throw new UnsupportedCassandraOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AssociationHandler < CassandraPersistentProperty > org.springframework.data.cassandra.mapping.AssociationHandler<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) { throw new UnsupportedCassandraOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return findAnnotation ( PrimaryKeyClass .class ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ( ) { java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> <> ( ) ; Assert . state ( boolean ( ) , java.lang.String . java.lang.String ( STRING , this . getType ( ) . getName ( ) ) ) ; void ( this , java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) ; return java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ; }  <METHOD_END>
<METHOD_START> protected void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , final java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) { org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> { if ( property . isCompositePrimaryKey ( ) ) { addCompositePrimaryKeyProperties ( property . getCompositePrimaryKeyEntity ( ) , properties ) ; } else { properties . add ( property ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.data.cassandra.mapping.MappingException { super. verify ( ) ; if ( org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier != null ) { org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier . verify ( this ) ; } if ( ! java.util.Optional<org.springframework.data.cassandra.mapping.CqlIdentifier> . isPresent ( ) ) { void ( org.springframework.data.cassandra.mapping.CqlIdentifier ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.cassandra.mapping.ApplicationContext ) throws org.springframework.data.cassandra.mapping.BeansException { Assert . notNull ( org.springframework.data.cassandra.mapping.ApplicationContext , STRING ) ; this . org.springframework.data.cassandra.mapping.ApplicationContext = org.springframework.data.cassandra.mapping.ApplicationContext ; org.springframework.data.cassandra.mapping.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.data.cassandra.mapping.StandardEvaluationContext . addPropertyAccessor ( new BeanFactoryAccessor ( ) ) ; org.springframework.data.cassandra.mapping.StandardEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.data.cassandra.mapping.ApplicationContext ) ) ; org.springframework.data.cassandra.mapping.StandardEvaluationContext . setRootObject ( org.springframework.data.cassandra.mapping.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.ApplicationContext org.springframework.data.cassandra.mapping.ApplicationContext ( ) { return org.springframework.data.cassandra.mapping.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { boolean boolean = ! this . java.util.Optional<java.lang.Boolean> . boolean ( ) || this . java.util.Optional<java.lang.Boolean> . java.util.Optional<java.lang.Boolean> ( java.lang.Boolean -> java.lang.Boolean != boolean ) . boolean ( ) ; this . java.util.Optional<java.lang.Boolean> = java.util.Optional . java.util.Optional<java.lang.Boolean> ( boolean ) ; if ( boolean ) { void ( cqlId ( org.springframework.data.cassandra.mapping.CqlIdentifier ( ) . getUnquoted ( ) , boolean ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CassandraMappingContext org.springframework.data.cassandra.mapping.CassandraMappingContext ( ) { return org.springframework.data.cassandra.mapping.CassandraMappingContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ) { Assert . notNull ( org.springframework.data.cassandra.mapping.CqlIdentifier , STRING ) ; this . java.util.Optional<org.springframework.data.cassandra.mapping.CqlIdentifier> = java.util.Optional . java.util.Optional ( org.springframework.data.cassandra.mapping.CqlIdentifier ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ( ) { return java.util.Optional<org.springframework.data.cassandra.mapping.CqlIdentifier> . orElseGet ( this :: org.springframework.data.cassandra.mapping.CqlIdentifier ) ; }  <METHOD_END>
<METHOD_START> public void void ( CassandraPersistentEntityMetadataVerifier org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ) { this . org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier = org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ( ) { return org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.UserType org.springframework.data.cassandra.mapping.UserType ( ) { return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.mapping.CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ( ) { return cqlId ( getType ( ) . getSimpleName ( ) , false ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.mapping.CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ( java.lang.String java.lang.String , boolean boolean ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return cqlId ( getType ( ) . getSimpleName ( ) , boolean ) ; } return cqlId ( org.springframework.data.cassandra.mapping.StandardEvaluationContext == null ? java.lang.String : SpelUtils . evaluate ( java.lang.String , org.springframework.data.cassandra.mapping.StandardEvaluationContext ) , boolean ) ; }  <METHOD_END>
