<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext != null ) { this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.web.servlet.FilterRegistrationIntegrationTests.FilterConfiguration .class ) ; assertThat ( this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . getServletContext ( ) . getFilterRegistrations ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.web.servlet.FilterRegistrationIntegrationTests.ScopedTargetFilterConfiguration .class ) ; assertThat ( this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . getServletContext ( ) . getFilterRegistrations ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.web.servlet.FilterRegistrationIntegrationTests.ContainerConfiguration .class , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.TomcatServletWebServerFactory org.springframework.boot.web.servlet.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) public org.springframework.boot.web.servlet.Filter org.springframework.boot.web.servlet.Filter ( ) { return new MockFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.Filter org.springframework.boot.web.servlet.Filter ( ) { return new MockFilter ( ) ; }  <METHOD_END>
