<METHOD_START> @ java.lang.Override public org.springframework.web.server.session.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.session.Mono<java.lang.Void> ( WebSession org.springframework.web.server.session.WebSession ) { this . java.util.Map<java.lang.String,org.springframework.web.server.session.WebSession> . put ( org.springframework.web.server.session.WebSession . getId ( ) , org.springframework.web.server.session.WebSession ) ; return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> < WebSession > org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> ( java.lang.String java.lang.String ) { return ( this . java.util.Map<java.lang.String,org.springframework.web.server.session.WebSession> . containsKey ( java.lang.String ) ? Mono . just ( this . java.util.Map<java.lang.String,org.springframework.web.server.session.WebSession> . get ( java.lang.String ) ) : Mono . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.session.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.session.Mono<java.lang.Void> ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.web.server.session.WebSession> . remove ( java.lang.String ) ; return Mono . empty ( ) ; }  <METHOD_END>
