<METHOD_START> @ Before public void void ( ) { org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver = new QuerydslPredicateArgumentResolver ( new QuerydslBindingsFactory ( SimpleEntityPathResolver . INSTANCE ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; org.springframework.data.web.querydsl.MockHttpServletRequest = new MockHttpServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . supportsParameter ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . supportsParameter ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . supportsParameter ( org.springframework.data.web.querydsl.MethodParameter ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . supportsParameter ( org.springframework.data.web.querydsl.MethodParameter ( STRING , java.lang.String .class ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Predicate org.springframework.data.web.querydsl.Predicate = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.querydsl.Predicate ) . isEqualTo ( ( Predicate ) QUser . user . firstname . eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Predicate org.springframework.data.web.querydsl.Predicate = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.querydsl.Predicate ) . isEqualTo ( ( Predicate ) QUser . user . firstname . eq ( STRING ) . and ( QUser . user . lastname . eq ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Predicate org.springframework.data.web.querydsl.Predicate = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; BooleanExpression org.springframework.data.web.querydsl.BooleanExpression = QUser . user . address . city . eq ( STRING ) ; assertThat ( org.springframework.data.web.querydsl.Predicate ) . isEqualTo ( ( Predicate ) org.springframework.data.web.querydsl.BooleanExpression ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Predicate org.springframework.data.web.querydsl.Predicate = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class , Pageable .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.querydsl.Predicate ) . isEqualTo ( ( Predicate ) QUser . user . address . city . eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Predicate org.springframework.data.web.querydsl.Predicate = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.querydsl.Predicate ) . isEqualTo ( QUser . user . firstname . eq ( STRING . java.lang.String ( ) ) . and ( QUser . user . lastname . toLowerCase ( ) . eq ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Predicate org.springframework.data.web.querydsl.Predicate = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.querydsl.Predicate ) . isEqualTo ( ( Predicate ) QUser . user . inceptionYear . eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , new java.lang.String [] { STRING , STRING } ) ; Predicate org.springframework.data.web.querydsl.Predicate = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.querydsl.Predicate ) . isEqualTo ( ( Predicate ) QUser . user . inceptionYear . in ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.querydsl.MockHttpServletRequest . addParameter ( STRING , STRING ) ; java.lang.Object java.lang.Object = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver . resolveArgument ( org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) , null , new ServletWebRequest ( org.springframework.data.web.querydsl.MockHttpServletRequest ) , null ) ; assertThat ( java.lang.Object . java.lang.String ( ) ) . isEqualTo ( QUser . user . inceptionYear . eq ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { TypeInformation < ? > org.springframework.data.web.querydsl.TypeInformation<?> = ReflectionTestUtils . invokeMethod ( org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolver , STRING , org.springframework.data.web.querydsl.MethodParameter ( STRING , Predicate .class ) ) ; assertThat ( org.springframework.data.web.querydsl.TypeInformation<> ) . isEqualTo ( ( TypeInformation ) ClassTypeInformation . from ( User .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { TypeInformation org.springframework.data.web.querydsl.TypeInformation = ClassTypeInformation . from ( User .class ) ; TypeInformation org.springframework.data.web.querydsl.TypeInformation = ClassTypeInformation . from ( ModelAndView .class ) ; assertThat ( extractTypeInfo ( org.springframework.data.web.querydsl.MethodParameter ( STRING ) ) ) . isEqualTo ( org.springframework.data.web.querydsl.TypeInformation ) ; assertThat ( extractTypeInfo ( org.springframework.data.web.querydsl.MethodParameter ( STRING ) ) ) . isEqualTo ( org.springframework.data.web.querydsl.TypeInformation ) ; assertThat ( extractTypeInfo ( org.springframework.data.web.querydsl.MethodParameter ( STRING ) ) ) . isEqualTo ( org.springframework.data.web.querydsl.TypeInformation ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.querydsl.MethodParameter org.springframework.data.web.querydsl.MethodParameter ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.RuntimeException { try { return new MethodParameter ( org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolverUnitTests.Sample .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) , java.lang.Class<?>[] . int == NUMBER ? - NUMBER : NUMBER ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.RuntimeException ( java.lang.NoSuchMethodException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( QuerydslBindings org.springframework.data.web.querydsl.QuerydslBindings , QUser org.springframework.data.web.querydsl.QUser ) { org.springframework.data.web.querydsl.QuerydslBindings . bind ( user . firstname ) . firstOptional ( ( path , value ) -> value . map ( it -> path . eq ( it . toUpperCase ( ) ) ) ) ; org.springframework.data.web.querydsl.QuerydslBindings . bind ( user . lastname ) . first ( ( path , value ) -> Optional . of ( path . toLowerCase ( ) . eq ( value ) ) ) ; org.springframework.data.web.querydsl.QuerydslBindings . excluding ( user . address ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.User org.springframework.data.web.querydsl.User ( Predicate org.springframework.data.web.querydsl.Predicate );  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.User org.springframework.data.web.querydsl.User ( @ QuerydslPredicate java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.User org.springframework.data.web.querydsl.User ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.User org.springframework.data.web.querydsl.User ( @ QuerydslPredicate Predicate org.springframework.data.web.querydsl.Predicate );  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.Page<org.springframework.data.web.querydsl.User> < User > org.springframework.data.web.querydsl.Page<org.springframework.data.web.querydsl.User> ( @ QuerydslPredicate Predicate org.springframework.data.web.querydsl.Predicate , Pageable org.springframework.data.web.querydsl.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.User org.springframework.data.web.querydsl.User ( @ QuerydslPredicate ( bindings = org.springframework.data.web.querydsl.QuerydslPredicateArgumentResolverUnitTests.SpecificBinding .class ) Predicate org.springframework.data.web.querydsl.Predicate );  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.HttpEntity<org.springframework.data.web.querydsl.User> < User > org.springframework.data.web.querydsl.HttpEntity<org.springframework.data.web.querydsl.User> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.ModelAndView org.springframework.data.web.querydsl.ModelAndView ( )  <METHOD_END>
<METHOD_START> org.springframework.data.web.querydsl.ResponseEntity<org.springframework.data.web.querydsl.Resource<org.springframework.data.web.querydsl.User>> < Resource < User > > org.springframework.data.web.querydsl.ResponseEntity<org.springframework.data.web.querydsl.Resource<org.springframework.data.web.querydsl.User>> ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( QuerydslBindings org.springframework.data.web.querydsl.QuerydslBindings , QUser org.springframework.data.web.querydsl.QUser ) { org.springframework.data.web.querydsl.QuerydslBindings . bind ( QUser . user . firstname ) . first ( ( path , value ) -> Optional . of ( path . contains ( value ) ) ) ; }  <METHOD_END>
