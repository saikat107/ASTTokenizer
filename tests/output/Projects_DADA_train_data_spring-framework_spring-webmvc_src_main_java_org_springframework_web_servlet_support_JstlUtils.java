<METHOD_START> public static org.springframework.web.servlet.support.MessageSource org.springframework.web.servlet.support.MessageSource ( ServletContext org.springframework.web.servlet.support.ServletContext , MessageSource org.springframework.web.servlet.support.MessageSource ) { if ( org.springframework.web.servlet.support.ServletContext != null ) { java.lang.String java.lang.String = org.springframework.web.servlet.support.ServletContext . getInitParameter ( Config . FMT_LOCALIZATION_CONTEXT ) ; if ( java.lang.String != null ) { ResourceBundleMessageSource org.springframework.web.servlet.support.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.web.servlet.support.ResourceBundleMessageSource . setBasename ( java.lang.String ) ; org.springframework.web.servlet.support.ResourceBundleMessageSource . setParentMessageSource ( org.springframework.web.servlet.support.MessageSource ) ; return org.springframework.web.servlet.support.ResourceBundleMessageSource ; } } return org.springframework.web.servlet.support.MessageSource ; }  <METHOD_END>
<METHOD_START> public static void void ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest , MessageSource org.springframework.web.servlet.support.MessageSource ) { java.util.Locale java.util.Locale = RequestContextUtils . getLocale ( org.springframework.web.servlet.support.HttpServletRequest ) ; Config . set ( org.springframework.web.servlet.support.HttpServletRequest , Config . FMT_LOCALE , java.util.Locale ) ; java.util.TimeZone java.util.TimeZone = RequestContextUtils . getTimeZone ( org.springframework.web.servlet.support.HttpServletRequest ) ; if ( java.util.TimeZone != null ) { Config . set ( org.springframework.web.servlet.support.HttpServletRequest , Config . FMT_TIME_ZONE , java.util.TimeZone ) ; } if ( org.springframework.web.servlet.support.MessageSource != null ) { LocalizationContext org.springframework.web.servlet.support.LocalizationContext = new org.springframework.web.servlet.support.JstlUtils.SpringLocalizationContext ( org.springframework.web.servlet.support.MessageSource , org.springframework.web.servlet.support.HttpServletRequest ) ; Config . set ( org.springframework.web.servlet.support.HttpServletRequest , Config . FMT_LOCALIZATION_CONTEXT , org.springframework.web.servlet.support.LocalizationContext ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( RequestContext org.springframework.web.servlet.support.RequestContext ) { Config . set ( org.springframework.web.servlet.support.RequestContext . getRequest ( ) , Config . FMT_LOCALE , org.springframework.web.servlet.support.RequestContext . getLocale ( ) ) ; java.util.TimeZone java.util.TimeZone = org.springframework.web.servlet.support.RequestContext . getTimeZone ( ) ; if ( java.util.TimeZone != null ) { Config . set ( org.springframework.web.servlet.support.RequestContext . getRequest ( ) , Config . FMT_TIME_ZONE , java.util.TimeZone ) ; } MessageSource org.springframework.web.servlet.support.MessageSource = org.springframework.web.servlet.support.MessageSource ( org.springframework.web.servlet.support.RequestContext . getServletContext ( ) , org.springframework.web.servlet.support.RequestContext . getMessageSource ( ) ) ; LocalizationContext org.springframework.web.servlet.support.LocalizationContext = new org.springframework.web.servlet.support.JstlUtils.SpringLocalizationContext ( org.springframework.web.servlet.support.MessageSource , org.springframework.web.servlet.support.RequestContext . getRequest ( ) ) ; Config . set ( org.springframework.web.servlet.support.RequestContext . getRequest ( ) , Config . FMT_LOCALIZATION_CONTEXT , org.springframework.web.servlet.support.LocalizationContext ) ; }  <METHOD_END>
<METHOD_START> public void ( MessageSource org.springframework.web.servlet.support.MessageSource , HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) { this . org.springframework.web.servlet.support.MessageSource = org.springframework.web.servlet.support.MessageSource ; this . org.springframework.web.servlet.support.HttpServletRequest = org.springframework.web.servlet.support.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.ResourceBundle java.util.ResourceBundle ( ) { HttpSession org.springframework.web.servlet.support.HttpSession = this . org.springframework.web.servlet.support.HttpServletRequest . getSession ( false ) ; if ( org.springframework.web.servlet.support.HttpSession != null ) { java.lang.Object java.lang.Object = Config . get ( org.springframework.web.servlet.support.HttpSession , Config . FMT_LOCALIZATION_CONTEXT ) ; if ( java.lang.Object instanceof LocalizationContext ) { java.util.ResourceBundle java.util.ResourceBundle = ( ( LocalizationContext ) java.lang.Object ) . getResourceBundle ( ) ; return new MessageSourceResourceBundle ( this . org.springframework.web.servlet.support.MessageSource , java.util.Locale ( ) , java.util.ResourceBundle ) ; } } return new MessageSourceResourceBundle ( this . org.springframework.web.servlet.support.MessageSource , java.util.Locale ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( ) { HttpSession org.springframework.web.servlet.support.HttpSession = this . org.springframework.web.servlet.support.HttpServletRequest . getSession ( false ) ; if ( org.springframework.web.servlet.support.HttpSession != null ) { java.lang.Object java.lang.Object = Config . get ( org.springframework.web.servlet.support.HttpSession , Config . FMT_LOCALE ) ; if ( java.lang.Object instanceof java.util.Locale ) { return ( java.util.Locale ) java.lang.Object ; } } return RequestContextUtils . getLocale ( this . org.springframework.web.servlet.support.HttpServletRequest ) ; }  <METHOD_END>
