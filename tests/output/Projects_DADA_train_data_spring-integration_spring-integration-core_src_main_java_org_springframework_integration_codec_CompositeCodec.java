<METHOD_START> public void ( java.util.Map<java.lang.Class<?>,org.springframework.integration.codec.Codec> < java.lang.Class<?> < ? > , Codec > java.util.Map<java.lang.Class<?>,org.springframework.integration.codec.Codec> , Codec org.springframework.integration.codec.Codec ) { Assert . notNull ( org.springframework.integration.codec.Codec , STRING ) ; this . org.springframework.integration.codec.Codec = org.springframework.integration.codec.Codec ; this . java.util.Map<java.lang.Class<?>,org.springframework.integration.codec.Codec> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.codec.Codec> < java.lang.Class<?> < ? > , Codec > ( java.util.Map<java.lang.Class<?>,org.springframework.integration.codec.Codec> ) ; }  <METHOD_END>
<METHOD_START> public void ( Codec org.springframework.integration.codec.Codec ) { this( null , org.springframework.integration.codec.Codec ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.io.OutputStream , STRING ) ; Codec org.springframework.integration.codec.Codec = org.springframework.integration.codec.Codec ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( org.springframework.integration.codec.Codec != null ) { org.springframework.integration.codec.Codec . encode ( java.lang.Object , java.io.OutputStream ) ; } else { this . org.springframework.integration.codec.Codec . encode ( java.lang.Object , java.io.OutputStream ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.Object java.lang.Object ) throws java.io.IOException { Assert . notNull ( java.lang.Object , STRING ) ; Codec org.springframework.integration.codec.Codec = org.springframework.integration.codec.Codec ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( org.springframework.integration.codec.Codec != null ) { return org.springframework.integration.codec.Codec . encode ( java.lang.Object ) ; } else { return this . org.springframework.integration.codec.Codec . encode ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.io.InputStream java.io.InputStream , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.io.IOException { Assert . notNull ( java.io.InputStream , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Codec org.springframework.integration.codec.Codec = org.springframework.integration.codec.Codec ( java.lang.Class<T> ) ; if ( org.springframework.integration.codec.Codec != null ) { return org.springframework.integration.codec.Codec . decode ( java.io.InputStream , java.lang.Class<T> ) ; } else { return this . org.springframework.integration.codec.Codec . decode ( java.io.InputStream , java.lang.Class<T> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( byte [] byte[] , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.io.IOException { return T ( new java.io.ByteArrayInputStream ( byte[] ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.codec.Codec org.springframework.integration.codec.Codec ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( this . java.util.Map<java.lang.Class<?>,org.springframework.integration.codec.Codec> == null ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . findClosestMatch ( java.lang.Class<> , this . java.util.Map<java.lang.Class<?>,org.springframework.integration.codec.Codec> . keySet ( ) , false ) ; return this . java.util.Map<java.lang.Class<?>,org.springframework.integration.codec.Codec> . get ( java.lang.Class<> ) ; }  <METHOD_END>
