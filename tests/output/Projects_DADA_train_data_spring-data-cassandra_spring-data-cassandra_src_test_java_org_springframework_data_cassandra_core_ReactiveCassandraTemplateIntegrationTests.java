<METHOD_START> @ Before public void void ( ) java.lang.Exception { MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter = new MappingCassandraConverter ( ) ; CassandraTemplate org.springframework.data.cassandra.core.CassandraTemplate = new CassandraTemplate ( this . session , org.springframework.data.cassandra.core.MappingCassandraConverter ) ; DefaultBridgedReactiveSession org.springframework.data.cassandra.core.DefaultBridgedReactiveSession = new DefaultBridgedReactiveSession ( this . session , Schedulers . elastic ( ) ) ; org.springframework.data.cassandra.core.ReactiveCassandraTemplate = new ReactiveCassandraTemplate ( new ReactiveCqlTemplate ( org.springframework.data.cassandra.core.DefaultBridgedReactiveSession ) , org.springframework.data.cassandra.core.MappingCassandraConverter ) ; SchemaTestUtils . potentiallyCreateTableFor ( Person .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . truncate ( Person .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; Mono < Person > org.springframework.data.cassandra.core.Mono<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.Mono<org.springframework.data.cassandra.core.Person> ) . expectNext ( org.springframework.data.cassandra.core.Person ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . expectNext ( org.springframework.data.cassandra.core.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . count ( Person .class ) ) . expectNext ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; org.springframework.data.cassandra.core.Person . setFirstname ( STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . expectNext ( org.springframework.data.cassandra.core.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ) . expectNext ( org.springframework.data.cassandra.core.Person ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . deleteById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . expectNext ( true ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) . verifyComplete ( ) ; }  <METHOD_END>
