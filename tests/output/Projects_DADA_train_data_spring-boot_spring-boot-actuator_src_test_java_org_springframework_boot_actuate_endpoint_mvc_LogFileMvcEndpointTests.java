<METHOD_START> @ Before public void void ( ) java.io.IOException { this . java.io.File = this . org.springframework.boot.actuate.endpoint.mvc.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , this . java.io.File ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment = new MockEnvironment ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint = new LogFileMvcEndpoint ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . setEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . HEAD . name ( ) , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . invoke ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . NOT_FOUND . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment . setProperty ( STRING , STRING ) ; MockHttpServletResponse org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . HEAD . name ( ) , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . invoke ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . NOT_FOUND . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment . setProperty ( STRING , this . java.io.File . java.lang.String ( ) ) ; MockHttpServletResponse org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . HEAD . name ( ) , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . invoke ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . OK . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment . setProperty ( STRING , this . java.io.File . java.lang.String ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . setEnabled ( false ) ; MockHttpServletResponse org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . HEAD . name ( ) , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . invoke ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . NOT_FOUND . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment . setProperty ( STRING , this . java.io.File . java.lang.String ( ) ) ; MockHttpServletResponse org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . GET . name ( ) , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . invoke ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . OK . value ( ) ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getContentAsString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . setExternalFile ( this . java.io.File ) ; MockHttpServletResponse org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . GET . name ( ) , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint . invoke ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . OK . value ( ) ) ; assertThat ( STRING ) . isEqualTo ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
