<METHOD_START> @ Test public void void ( ) { Unmarshaller org.springframework.integration.xml.transformer.Unmarshaller = new org.springframework.integration.xml.transformer.UnmarshallingTransformerTests.TestUnmarshaller ( false ) ; UnmarshallingTransformer org.springframework.integration.xml.transformer.UnmarshallingTransformer = new UnmarshallingTransformer ( org.springframework.integration.xml.transformer.Unmarshaller ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.UnmarshallingTransformer . transformPayload ( new StringSource ( STRING ) ) ; assertEquals ( java.lang.String .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Unmarshaller org.springframework.integration.xml.transformer.Unmarshaller = new org.springframework.integration.xml.transformer.UnmarshallingTransformerTests.TestUnmarshaller ( true ) ; UnmarshallingTransformer org.springframework.integration.xml.transformer.UnmarshallingTransformer = new UnmarshallingTransformer ( org.springframework.integration.xml.transformer.Unmarshaller ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.UnmarshallingTransformer . transformPayload ( new StringSource ( STRING ) ) ; assertEquals ( GenericMessage .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Unmarshaller org.springframework.integration.xml.transformer.Unmarshaller = new org.springframework.integration.xml.transformer.UnmarshallingTransformerTests.TestUnmarshaller ( true ) ; UnmarshallingTransformer org.springframework.integration.xml.transformer.UnmarshallingTransformer = new UnmarshallingTransformer ( org.springframework.integration.xml.transformer.Unmarshaller ) ; Message < ? > org.springframework.integration.xml.transformer.Message<?> = org.springframework.integration.xml.transformer.UnmarshallingTransformer . transform ( MessageBuilder . withPayload ( new StringSource ( STRING ) ) . build ( ) ) ; assertNotNull ( org.springframework.integration.xml.transformer.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( javax.xml.transform.Source javax.xml.transform.Source ) throws org.springframework.integration.xml.transformer.XmlMappingException , java.io.IOException { if ( javax.xml.transform.Source instanceof StringSource ) { char [] char[] = new char [ NUMBER ] ; ( ( StringSource ) javax.xml.transform.Source ) . getReader ( ) . read ( char[] ) ; if ( boolean ) { return new GenericMessage < java.lang.String > ( STRING + new java.lang.String ( char[] ) . java.lang.String ( ) ) ; } return STRING + new java.lang.String ( char[] ) . java.lang.String ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
