<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static void void ( final java.lang.String [] java.lang.String[] ) throws java.lang.Exception { void ( org.springframework.data.gemfire.fork.Cache ( org.springframework.data.gemfire.fork.Cache ( org.springframework.data.gemfire.fork.Cache ( org.springframework.data.gemfire.fork.Cache ( java.lang.String , java.lang.String ) , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.Cache org.springframework.data.gemfire.fork.Cache ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new CacheFactory ( ) . set ( STRING , java.lang.String ) . set ( STRING , STRING ) . set ( STRING , java.lang.String ) . create ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.Cache org.springframework.data.gemfire.fork.Cache ( Cache org.springframework.data.gemfire.fork.Cache , java.lang.String java.lang.String ) { RegionFactory < java.lang.String , java.lang.Integer > org.springframework.data.gemfire.fork.RegionFactory<java.lang.String,java.lang.Integer> = org.springframework.data.gemfire.fork.Cache . createRegionFactory ( RegionShortcut . REPLICATE ) ; org.springframework.data.gemfire.fork.RegionFactory<java.lang.String,java.lang.Integer> . setScope ( Scope . DISTRIBUTED_ACK ) ; org.springframework.data.gemfire.fork.Region<java.lang.String,java.lang.Integer> = org.springframework.data.gemfire.fork.RegionFactory<java.lang.String,java.lang.Integer> . create ( java.lang.String ) ; return org.springframework.data.gemfire.fork.Cache ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.Cache org.springframework.data.gemfire.fork.Cache ( Cache org.springframework.data.gemfire.fork.Cache ) throws java.io.IOException { CacheServer org.springframework.data.gemfire.fork.CacheServer = org.springframework.data.gemfire.fork.Cache . addCacheServer ( ) ; org.springframework.data.gemfire.fork.CacheServer . setPort ( int ( int ) ) ; org.springframework.data.gemfire.fork.CacheServer . start ( ) ; return org.springframework.data.gemfire.fork.Cache ; }  <METHOD_END>
<METHOD_START> private static int int ( int int ) { return java.lang.Integer . java.lang.Integer ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.Cache org.springframework.data.gemfire.fork.Cache ( Cache org.springframework.data.gemfire.fork.Cache ) { java.lang.Runtime . java.lang.Runtime ( ) . void ( new java.lang.Thread ( ( ) { if ( org.springframework.data.gemfire.fork.Cache != null ) { try { org.springframework.data.gemfire.fork.Cache . close ( ) ; } catch ( CacheClosedException org.springframework.data.gemfire.fork.CacheClosedException ) {				} } } ) ) ; return org.springframework.data.gemfire.fork.Cache ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( Cache org.springframework.data.gemfire.fork.Cache ) throws java.io.IOException { ForkUtil . createControlFile ( org.springframework.data.gemfire.fork.CqCacheServerProcess .class . java.lang.String ( ) ) ; java.util.Scanner java.util.Scanner = new java.util.Scanner ( java.lang.System . java.io.InputStream ) ; java.util.Scanner . java.lang.String ( ) ; org.springframework.data.gemfire.fork.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; org.springframework.data.gemfire.fork.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; org.springframework.data.gemfire.fork.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; java.util.Scanner . java.lang.String ( ) ; }  <METHOD_END>
