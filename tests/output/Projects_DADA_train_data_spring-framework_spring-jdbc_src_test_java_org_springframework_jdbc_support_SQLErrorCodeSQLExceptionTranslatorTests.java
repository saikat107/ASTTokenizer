<METHOD_START> @ Test public void void ( ) { SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( org.springframework.jdbc.support.SQLErrorCodes ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; BadSqlGrammarException org.springframework.jdbc.support.BadSqlGrammarException = ( BadSqlGrammarException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( STRING , org.springframework.jdbc.support.BadSqlGrammarException . getSql ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.BadSqlGrammarException . getSQLException ( ) ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; InvalidResultSetAccessException org.springframework.jdbc.support.InvalidResultSetAccessException = ( InvalidResultSetAccessException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( STRING , org.springframework.jdbc.support.InvalidResultSetAccessException . getSql ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.InvalidResultSetAccessException . getSQLException ( ) ) ; void ( org.springframework.jdbc.support.SQLExceptionTranslator , NUMBER , DataAccessResourceFailureException .class ) ; void ( org.springframework.jdbc.support.SQLExceptionTranslator , NUMBER , DataIntegrityViolationException .class ) ; void ( org.springframework.jdbc.support.SQLExceptionTranslator , NUMBER , CannotAcquireLockException .class ) ; void ( org.springframework.jdbc.support.SQLExceptionTranslator , NUMBER , DeadlockLoserDataAccessException .class ) ; void ( org.springframework.jdbc.support.SQLExceptionTranslator , NUMBER , CannotSerializeTransactionException .class ) ; void ( org.springframework.jdbc.support.SQLExceptionTranslator , NUMBER , DuplicateKeyException .class ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; DataAccessException org.springframework.jdbc.support.DataAccessException = org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertTrue ( STRING , DataIntegrityViolationException .class . boolean ( org.springframework.jdbc.support.DataAccessException . getClass ( ) ) ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; BadSqlGrammarException org.springframework.jdbc.support.BadSqlGrammarException = ( BadSqlGrammarException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( STRING , org.springframework.jdbc.support.BadSqlGrammarException . getSql ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.BadSqlGrammarException . getSQLException ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator , int int , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , int ) ; DataAccessException org.springframework.jdbc.support.DataAccessException = org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertTrue ( java.lang.Class<> . boolean ( org.springframework.jdbc.support.DataAccessException ) ) ; assertTrue ( org.springframework.jdbc.support.DataAccessException . getCause ( ) == java.sql.SQLException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( org.springframework.jdbc.support.SQLErrorCodes ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; java.sql.BatchUpdateException java.sql.BatchUpdateException = new java.sql.BatchUpdateException ( ) ; java.sql.BatchUpdateException . void ( java.sql.SQLException ) ; BadSqlGrammarException org.springframework.jdbc.support.BadSqlGrammarException = ( BadSqlGrammarException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.BatchUpdateException ) ; assertEquals ( STRING , org.springframework.jdbc.support.BadSqlGrammarException . getSql ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.BadSqlGrammarException . getSQLException ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( org.springframework.jdbc.support.SQLErrorCodes ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; java.sql.DataTruncation java.sql.DataTruncation = new java.sql.DataTruncation ( NUMBER , true , true , NUMBER , NUMBER , java.sql.SQLException ) ; DataAccessResourceFailureException org.springframework.jdbc.support.DataAccessResourceFailureException = ( DataAccessResourceFailureException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.DataTruncation ) ; assertEquals ( java.sql.DataTruncation , org.springframework.jdbc.support.DataAccessResourceFailureException . getCause ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final DataAccessException org.springframework.jdbc.support.DataAccessException = new DataAccessException ( STRING ) {} ; final java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; SQLErrorCodeSQLExceptionTranslator org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( ) { @ java.lang.Override protected org.springframework.jdbc.support.DataAccessException org.springframework.jdbc.support.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.sql.SQLException java.sql.SQLException ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , java.lang.String ) ; return ( java.sql.SQLException == java.sql.SQLException ) ? org.springframework.jdbc.support.DataAccessException : null ; } } ; org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator . setSqlErrorCodes ( org.springframework.jdbc.support.SQLErrorCodes ) ; assertEquals ( org.springframework.jdbc.support.DataAccessException , org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator . translate ( java.lang.String , java.lang.String , java.sql.SQLException ) ) ; DataIntegrityViolationException org.springframework.jdbc.support.DataIntegrityViolationException = ( DataIntegrityViolationException ) org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator . translate ( java.lang.String , java.lang.String , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.DataIntegrityViolationException . getCause ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.DataAccessException org.springframework.jdbc.support.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.sql.SQLException java.sql.SQLException ) { assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , java.lang.String ) ; return ( java.sql.SQLException == java.sql.SQLException ) ? org.springframework.jdbc.support.DataAccessException : null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = new SQLErrorCodes ( ) ; final CustomSQLErrorCodesTranslation org.springframework.jdbc.support.CustomSQLErrorCodesTranslation = new CustomSQLErrorCodesTranslation ( ) ; org.springframework.jdbc.support.SQLErrorCodes . setBadSqlGrammarCodes ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.jdbc.support.SQLErrorCodes . setDataIntegrityViolationCodes ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.jdbc.support.CustomSQLErrorCodesTranslation . setErrorCodes ( new java.lang.String [] { STRING } ) ; org.springframework.jdbc.support.CustomSQLErrorCodesTranslation . setExceptionClass ( CustomErrorCodeException .class ) ; org.springframework.jdbc.support.SQLErrorCodes . setCustomTranslations ( new CustomSQLErrorCodesTranslation [] { org.springframework.jdbc.support.CustomSQLErrorCodesTranslation } ) ; SQLErrorCodeSQLExceptionTranslator org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( ) ; org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator . setSqlErrorCodes ( org.springframework.jdbc.support.SQLErrorCodes ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; assertEquals ( CustomErrorCodeException .class , org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator . translate ( java.lang.String , java.lang.String , java.sql.SQLException ) . getClass ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator . translate ( java.lang.String , java.lang.String , java.sql.SQLException ) . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; DataIntegrityViolationException org.springframework.jdbc.support.DataIntegrityViolationException = ( DataIntegrityViolationException ) org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator . translate ( java.lang.String , java.lang.String , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.DataIntegrityViolationException . getCause ( ) ) ; org.springframework.jdbc.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.jdbc.support.CustomSQLErrorCodesTranslation . setExceptionClass ( java.lang.String .class ) ; }  <METHOD_END>
