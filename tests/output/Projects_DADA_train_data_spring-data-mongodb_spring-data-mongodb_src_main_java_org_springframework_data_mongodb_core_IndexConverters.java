<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> static org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.IndexDefinition,org.springframework.data.mongodb.core.IndexOptions> < IndexDefinition , IndexOptions > org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.IndexDefinition,org.springframework.data.mongodb.core.IndexOptions> ( ) { return org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.IndexDefinition,org.springframework.data.mongodb.core.IndexOptions> ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.Document,org.springframework.data.mongodb.core.IndexInfo> < Document , IndexInfo > org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.Document,org.springframework.data.mongodb.core.IndexInfo> ( ) { return org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.Document,org.springframework.data.mongodb.core.IndexInfo> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.IndexDefinition,org.springframework.data.mongodb.core.IndexOptions> < IndexDefinition , IndexOptions > org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.IndexDefinition,org.springframework.data.mongodb.core.IndexOptions> ( ) { return indexDefinition -> { Document indexOptions = indexDefinition . getIndexOptions ( ) ; IndexOptions ops = new IndexOptions ( ) ; if ( indexOptions . containsKey ( STRING ) ) { ops = ops . name ( indexOptions . get ( STRING ) . toString ( ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . unique ( ( Boolean ) indexOptions . get ( STRING ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . sparse ( ( Boolean ) indexOptions . get ( STRING ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . background ( ( Boolean ) indexOptions . get ( STRING ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . expireAfter ( ( Long ) indexOptions . get ( STRING ) , TimeUnit . SECONDS ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . min ( ( ( Number ) indexOptions . get ( STRING ) ) . doubleValue ( ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . max ( ( ( Number ) indexOptions . get ( STRING ) ) . doubleValue ( ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . bits ( ( Integer ) indexOptions . get ( STRING ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . bucketSize ( ( ( Number ) indexOptions . get ( STRING ) ) . doubleValue ( ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . defaultLanguage ( indexOptions . get ( STRING ) . toString ( ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . languageOverride ( indexOptions . get ( STRING ) . toString ( ) ) ; } if ( indexOptions . containsKey ( STRING ) ) { ops = ops . weights ( ( org . bson . Document ) indexOptions . get ( STRING ) ) ; } for ( String key : indexOptions . keySet ( ) ) { if ( ObjectUtils . nullSafeEquals ( STRING , indexOptions . get ( key ) ) ) { ops = ops . sphereVersion ( NUMBER ) ; } } if( indexOptions . containsKey ( STRING ) ) { ops = ops . partialFilterExpression ( ( org . bson . Document ) indexOptions . get ( STRING ) ) ; } return ops ; } ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.Document,org.springframework.data.mongodb.core.IndexInfo> < Document , IndexInfo > org.springframework.data.mongodb.core.Converter<org.springframework.data.mongodb.core.Document,org.springframework.data.mongodb.core.IndexInfo> ( ) { return ix -> { return IndexInfo . indexInfoOf ( ix ) ; } ; }  <METHOD_END>
