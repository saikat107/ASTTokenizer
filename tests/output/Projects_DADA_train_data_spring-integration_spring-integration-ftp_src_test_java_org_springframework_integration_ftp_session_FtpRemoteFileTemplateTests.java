<METHOD_START> @ Test public void void ( ) java.io.IOException { FtpRemoteFileTemplate org.springframework.integration.ftp.session.FtpRemoteFileTemplate = new FtpRemoteFileTemplate ( org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> ) ; DefaultFileNameGenerator org.springframework.integration.ftp.session.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.ftp.session.DefaultFileNameGenerator . setExpression ( STRING ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . setFileNameGenerator ( org.springframework.integration.ftp.session.DefaultFileNameGenerator ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . setUseTemporaryFileName ( false ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . execute ( session -> { session . mkdir ( STRING ) ; return session . mkdir ( STRING ) ; } ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . append ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . append ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( org.springframework.integration.ftp.session.FtpRemoteFileTemplate . exists ( STRING ) ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . executeWithClient ( ( ClientCallbackWithoutResult < FTPClient > ) client -> { try { FTPFile [] files = client . listFiles ( STRING ) ; assertEquals ( NUMBER , files [ NUMBER ] . getSize ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . execute ( ( SessionCallbackWithoutResult < FTPFile > ) session -> { assertTrue ( session . remove ( STRING ) ) ; assertTrue ( session . rmdir ( STRING ) ) ; FTPFile [] files = session . list ( STRING ) ; assertEquals ( NUMBER , files . length ) ; assertTrue ( session . rmdir ( STRING ) ) ; } ) ; assertFalse ( org.springframework.integration.ftp.session.FtpRemoteFileTemplate . getSession ( ) . exists ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) SessionFactory < FTPFile > org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> = mock ( SessionFactory .class ) ; when ( org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> . getSession ( ) ) . thenThrow ( new java.lang.RuntimeException ( STRING ) ) ; FtpRemoteFileTemplate org.springframework.integration.ftp.session.FtpRemoteFileTemplate = new FtpRemoteFileTemplate ( org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.ftp.session.FtpRemoteFileTemplate . afterPropertiesSet ( ) ; java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) , java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ) ; java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( java.io.File ) ; java.io.FileOutputStream . void ( STRING . byte[] ( ) ) ; java.io.FileOutputStream . void ( ) ; try { org.springframework.integration.ftp.session.FtpRemoteFileTemplate . send ( new GenericMessage < java.io.File > ( java.io.File ) ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.ftp.session.MessagingException ) { assertEquals ( STRING , org.springframework.integration.ftp.session.MessagingException . getCause ( ) . getMessage ( ) ) ; } java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) , java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ) ; assertTrue ( java.io.File . boolean ( java.io.File ) ) ; java.io.File . boolean ( ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> < FTPFile > org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> ( ) { return org.springframework.integration.ftp.session.FtpRemoteFileTemplateTests . sessionFactory ( ) ; }  <METHOD_END>
