<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.HttpHandler org.springframework.web.reactive.result.HttpHandler ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.result.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.result.SimpleUrlHandlerMappingIntegrationTests.WebConfig .class ) ; org.springframework.web.reactive.result.AnnotationConfigApplicationContext . refresh ( ) ; return WebHttpHandlerBuilder . webHandler ( new DispatcherHandler ( org.springframework.web.reactive.result.AnnotationConfigApplicationContext ) ) . exceptionHandlers ( java.util.Collections . java.util.List ( new ResponseStatusExceptionHandler ( ) ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + STRING ) ; RequestEntity < java.lang.Void > org.springframework.web.reactive.result.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ) . build ( ) ; ResponseEntity < byte [] > org.springframework.web.reactive.result.ResponseEntity<byte[]> = new RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.RequestEntity<java.lang.Void> , byte [] .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.ResponseEntity<byte[]> . getStatusCode ( ) ) ; assertArrayEquals ( STRING . byte[] ( STRING ) , org.springframework.web.reactive.result.ResponseEntity<byte[]> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + STRING ) ; RequestEntity < java.lang.Void > org.springframework.web.reactive.result.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ) . build ( ) ; ResponseEntity < byte [] > org.springframework.web.reactive.result.ResponseEntity<byte[]> = new RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.RequestEntity<java.lang.Void> , byte [] .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.ResponseEntity<byte[]> . getStatusCode ( ) ) ; assertArrayEquals ( STRING . byte[] ( STRING ) , org.springframework.web.reactive.result.ResponseEntity<byte[]> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + STRING ) ; RequestEntity < java.lang.Void > org.springframework.web.reactive.result.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ) . build ( ) ; ResponseEntity < byte [] > org.springframework.web.reactive.result.ResponseEntity<byte[]> = new RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.RequestEntity<java.lang.Void> , byte [] .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.ResponseEntity<byte[]> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.ResponseEntity<byte[]> . getHeaders ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + STRING ) ; RequestEntity < java.lang.Void > org.springframework.web.reactive.result.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ) . build ( ) ; try { new RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.RequestEntity<java.lang.Void> , byte [] .class ) ; } catch ( HttpClientErrorException org.springframework.web.reactive.result.HttpClientErrorException ) { assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.result.HttpClientErrorException . getStatusCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.reactive.result.DataBuffer org.springframework.web.reactive.result.DataBuffer ( java.lang.String java.lang.String ) { DefaultDataBuffer org.springframework.web.reactive.result.DefaultDataBuffer = new DefaultDataBufferFactory ( ) . allocateBuffer ( ) ; return org.springframework.web.reactive.result.DefaultDataBuffer . write ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.result.SimpleUrlHandlerMapping org.springframework.web.reactive.result.SimpleUrlHandlerMapping ( ) { return new SimpleUrlHandlerMapping ( ) { { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( WebHandler ) exchange -> exchange . getResponse ( ) . writeWith ( Flux . just ( asDataBuffer ( STRING ) ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( WebHandler ) exchange -> exchange . getResponse ( ) . writeWith ( Flux . just ( asDataBuffer ( STRING ) ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( WebHandler ) exchange -> { exchange . getResponse ( ) . getHeaders ( ) . add ( STRING , STRING ) ; return Mono . empty ( ) ; } ) ; setUrlMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.result.SimpleHandlerAdapter org.springframework.web.reactive.result.SimpleHandlerAdapter ( ) { return new SimpleHandlerAdapter ( ) ; }  <METHOD_END>
