<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; assertTrue ( org.springframework.beans.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getIntegerSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . registerCustomEditor ( java.lang.Number .class , new CustomNumberEditor ( java.lang.Integer .class , true ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; assertTrue ( org.springframework.beans.GenericBean<> . getNumberSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getNumberSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; java.util.Set<org.springframework.beans.TestBean> < TestBean > java.util.Set<org.springframework.beans.TestBean> = new java.util.HashSet<org.springframework.beans.TestBean> <> ( ) ; java.util.Set<org.springframework.beans.TestBean> . add ( new TestBean ( ) ) ; try { org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Set<org.springframework.beans.TestBean> ) ; fail ( STRING ) ; } catch ( TypeMismatchException org.springframework.beans.TypeMismatchException ) { assertTrue ( org.springframework.beans.TypeMismatchException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; org.springframework.beans.GenericBean<> . setResourceList ( new java.util.ArrayList <> ( ) ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.beans.GenericBean<> . getResourceList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; org.springframework.beans.GenericBean<> . setShortMap ( new java.util.HashMap <> ( ) ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , org.springframework.beans.GenericBean<> . getLongMap ( ) . get ( new java.lang.Long ( STRING ) ) ) ; assertEquals ( STRING , org.springframework.beans.GenericBean<> . getLongMap ( ) . get ( new java.lang.Long ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; org.springframework.beans.GenericBean<> . setLongMap ( new java.util.HashMap<java.lang.Long,java.lang.Integer> < java.lang.Long , java.lang.Integer > ( ) ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.GenericBean<> . getLongMap ( ) . get ( new java.lang.Long ( STRING ) ) ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . registerCustomEditor ( java.lang.Number .class , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; java.util.Map<java.lang.String,java.util.Collection> < java.lang.String , java.util.Collection > java.util.Map<java.lang.String,java.util.Collection> = new java.util.HashMap<java.lang.String,java.util.Collection> <> ( ) ; java.util.HashSet<java.lang.Integer> < java.lang.Integer > java.util.HashSet<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.HashSet<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.util.Collection> . java.util.Collection ( STRING , java.util.HashSet<java.lang.Integer> ) ; java.util.ArrayList<java.lang.Boolean> < java.lang.Boolean > java.util.ArrayList<java.lang.Boolean> = new java.util.ArrayList<java.lang.Boolean> <> ( ) ; java.util.ArrayList<java.lang.Boolean> . boolean ( java.lang.Boolean . java.lang.Boolean ) ; java.util.Map<java.lang.String,java.util.Collection> . java.util.Collection ( STRING , java.util.ArrayList<java.lang.Boolean> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.util.Collection> ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCollectionMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) instanceof java.util.HashSet ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCollectionMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) instanceof java.util.ArrayList ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; org.springframework.beans.GenericBean<> . setCollectionMap ( new java.util.HashMap <> ( ) ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . registerCustomEditor ( java.lang.Number .class , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; java.util.HashSet<java.lang.Integer> < java.lang.Integer > java.util.HashSet<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.HashSet<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.HashSet<java.lang.Integer> ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCollectionMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) instanceof java.util.HashSet ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Properties ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getShortMap ( ) . get ( new java.lang.Short ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.List<java.util.List<java.lang.Integer>> = new java.util.LinkedList<java.util.List<java.lang.Integer>> <> ( ) ; java.util.List<java.util.List<java.lang.Integer>> . boolean ( new java.util.LinkedList<java.lang.Integer> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setListOfLists ( java.util.List<java.util.List<java.lang.Integer>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getListOfLists ( ) . get ( NUMBER ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.List<java.util.List<java.lang.Integer>> = new java.util.LinkedList<java.util.List<java.lang.Integer>> <> ( ) ; java.util.List<java.util.List<java.lang.Integer>> . boolean ( new java.util.LinkedList<java.lang.Integer> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setListOfLists ( java.util.List<java.util.List<java.lang.Integer>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getListOfLists ( ) . get ( NUMBER ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.ArrayList<java.lang.String[]> < java.lang.String [] > java.util.ArrayList<java.lang.String[]> = new java.util.ArrayList<java.lang.String[]> <> ( ) ; java.util.ArrayList<java.lang.String[]> . boolean ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.beans.GenericBean<java.lang.String> . setListOfArrays ( java.util.ArrayList<java.lang.String[]> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.GenericBean<java.lang.String> . getListOfArrays ( ) . get ( NUMBER ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.ArrayList<java.lang.String[]> < java.lang.String [] > java.util.ArrayList<java.lang.String[]> = new java.util.ArrayList<java.lang.String[]> <> ( ) ; java.util.ArrayList<java.lang.String[]> . boolean ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.beans.GenericBean<java.lang.String> . setListOfArrays ( java.util.ArrayList<java.lang.String[]> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . registerCustomEditor ( java.lang.String .class , new StringTrimmerEditor ( false ) ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.GenericBean<java.lang.String> . getListOfArrays ( ) . get ( NUMBER ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> < java.util.Map<java.lang.Integer,java.lang.Long> < java.lang.Integer , java.lang.Long > > java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> = new java.util.LinkedList<java.util.Map<java.lang.Integer,java.lang.Long>> <> ( ) ; java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> . boolean ( new java.util.HashMap<java.lang.Integer,java.lang.Long> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setListOfMaps ( java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.Long ( NUMBER ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getListOfMaps ( ) . get ( NUMBER ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> < java.util.Map<java.lang.Integer,java.lang.Long> < java.lang.Integer , java.lang.Long > > java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> = new java.util.LinkedList<java.util.Map<java.lang.Integer,java.lang.Long>> <> ( ) ; java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> . boolean ( new java.util.HashMap<java.lang.Integer,java.lang.Long> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setListOfMaps ( java.util.List<java.util.Map<java.lang.Integer,java.lang.Long>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getListOfMaps ( ) . get ( NUMBER ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> < java.lang.String , java.util.Map<java.lang.Integer,java.lang.Long> < java.lang.Integer , java.lang.Long > > java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> <> ( ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> . java.util.Map<java.lang.Integer,java.lang.Long> ( STRING , new java.util.HashMap<java.lang.Integer,java.lang.Long> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setMapOfMaps ( java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.Long ( NUMBER ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getMapOfMaps ( ) . get ( STRING ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> < java.lang.String , java.util.Map<java.lang.Integer,java.lang.Long> < java.lang.Integer , java.lang.Long > > java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> <> ( ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> . java.util.Map<java.lang.Integer,java.lang.Long> ( STRING , new java.util.HashMap<java.lang.Integer,java.lang.Long> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setMapOfMaps ( java.util.Map<java.lang.String,java.util.Map<java.lang.Integer,java.lang.Long>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getMapOfMaps ( ) . get ( STRING ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> < java.lang.Integer , java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>> <> ( ) ; java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> . java.util.List<java.lang.Integer> ( new java.lang.Integer ( NUMBER ) , new java.util.LinkedList<java.lang.Integer> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setMapOfLists ( java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getMapOfLists ( ) . get ( new java.lang.Integer ( NUMBER ) ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { GenericBean < java.lang.String > org.springframework.beans.GenericBean<java.lang.String> = new GenericBean <> ( ) ; java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> < java.lang.Integer , java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>> <> ( ) ; java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> . java.util.List<java.lang.Integer> ( new java.lang.Integer ( NUMBER ) , new java.util.LinkedList<java.lang.Integer> <> ( ) ) ; org.springframework.beans.GenericBean<java.lang.String> . setMapOfLists ( java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<java.lang.String> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<java.lang.String> . getMapOfLists ( ) . get ( new java.lang.Integer ( NUMBER ) ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean = new org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean . java.util.Map<java.lang.String,java.lang.Integer> ( ) . java.lang.Integer ( STRING ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING , STRING } ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.List<java.lang.String> ) ; org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean = new org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; java.lang.Object java.lang.Object = org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean . java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> ( ) . java.util.List<java.lang.Integer> ( STRING ) . java.lang.Integer ( NUMBER ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> = new java.util.LinkedList<java.util.Map<java.lang.String,java.lang.String>> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> . boolean ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean = new org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.List<java.util.Map<java.lang.String,java.lang.String>> ) ; java.lang.Object java.lang.Object = org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean . java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> ( ) . java.util.Map<java.lang.String,java.lang.Integer> ( NUMBER ) . java.lang.Integer ( STRING ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.String>>> < java.lang.String , java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.String>>> = new java.util.HashMap<java.lang.String,java.util.List<java.util.List<java.lang.String>>> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING , STRING } ) ; java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.String>>> . java.util.List<java.util.List<java.lang.String>> ( STRING , java.util.Collections . java.util.List<java.util.List<java.lang.String>> ( java.util.List<java.lang.String> ) ) ; org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean = new org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.String>>> ) ; java.lang.Object java.lang.Object = org.springframework.beans.BeanWrapperGenericsTests.NestedGenericCollectionBean . java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> ( ) . java.util.List<java.util.List<java.lang.Integer>> ( STRING ) . java.util.List<java.lang.Integer> ( NUMBER ) . java.lang.Integer ( NUMBER ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.util.List<java.lang.String>,java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.util.List<java.lang.String>,java.util.List<java.lang.String>> = new java.util.HashMap<java.util.List<java.lang.String>,java.util.List<java.lang.String>> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Map<java.util.List<java.lang.String>,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ; org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder = new org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.util.List<java.lang.String>,java.util.List<java.lang.String>> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ( ) . java.util.Set<java.util.List<java.lang.Integer>> ( ) . java.util.Iterator<java.util.List<java.lang.Integer>> ( ) . java.util.List<java.lang.Integer> ( ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ( ) . java.util.Collection<java.util.List<java.lang.Long>> ( ) . java.util.Iterator<java.util.List<java.lang.Long>> ( ) . java.util.List<java.lang.Long> ( ) . java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> < java.util.Set<java.lang.String> < java.lang.String > , java.util.Set<java.lang.String> < java.lang.String > > java.util.Map<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> = new java.util.HashMap<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> <> ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Map<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> . java.util.Set<java.lang.String> ( java.util.Set<java.lang.String> , java.util.Set<java.lang.String> ) ; org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder = new org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ( ) . java.util.Set<java.util.List<java.lang.Integer>> ( ) . java.util.Iterator<java.util.List<java.lang.Integer>> ( ) . java.util.List<java.lang.Integer> ( ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ( ) . java.util.Collection<java.util.List<java.lang.Long>> ( ) . java.util.Iterator<java.util.List<java.lang.Long>> ( ) . java.util.List<java.lang.Long> ( ) . java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder = new org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ( ) . java.util.Set<java.lang.Integer> ( ) . java.util.Iterator<java.lang.Integer> ( ) . java.lang.Integer ( ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ( ) . java.util.Collection<java.util.List<java.lang.Long>> ( ) . java.util.Iterator<java.util.List<java.lang.Long>> ( ) . java.util.List<java.lang.Long> ( ) . java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder = new org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ( ) . java.util.Set<java.lang.Integer> ( ) . java.util.Iterator<java.lang.Integer> ( ) . java.lang.Integer ( ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ( ) . java.util.Collection<java.util.List<java.lang.Long>> ( ) . java.util.Iterator<java.util.List<java.lang.Long>> ( ) . java.util.List<java.lang.Long> ( ) . java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder = new org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ( ) . java.util.Set<java.lang.Integer> ( ) . java.util.Iterator<java.lang.Integer> ( ) . java.lang.Integer ( ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ( ) . java.util.Collection<java.util.List<java.lang.Long>> ( ) . java.util.Iterator<java.util.List<java.lang.Long>> ( ) . java.util.List<java.lang.Long> ( ) . java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder = new org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ( ) . java.util.Set<java.lang.Integer> ( ) . java.util.Iterator<java.lang.Integer> ( ) . java.lang.Integer ( ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.ComplexMapHolder . org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ( ) . java.util.Collection<java.util.List<java.lang.Long>> ( ) . java.util.Iterator<java.util.List<java.lang.Long>> ( ) . java.util.List<java.lang.Long> ( ) . java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericIntegerBean org.springframework.beans.GenericIntegerBean = new GenericIntegerBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericIntegerBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericIntegerBean . getGenericProperty ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericSetOfIntegerBean org.springframework.beans.GenericSetOfIntegerBean = new GenericSetOfIntegerBean ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericSetOfIntegerBean ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericSetOfIntegerBean . getGenericProperty ( ) . iterator ( ) . next ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericSetOfIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) . iterator ( ) . next ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericSetOfIntegerBean . getGenericListProperty ( ) . get ( NUMBER ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperGenericsTests.Bar org.springframework.beans.BeanWrapperGenericsTests.Bar = new org.springframework.beans.BeanWrapperGenericsTests.Bar ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.Bar ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Double ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.Bar . java.lang.Double ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanWrapperGenericsTests.Promotion org.springframework.beans.BeanWrapperGenericsTests.Promotion = new org.springframework.beans.BeanWrapperGenericsTests.Promotion ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.BeanWrapperGenericsTests.Promotion ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.beans.BeanWrapperGenericsTests.Promotion . java.lang.Long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class Holder < D > { private final D D ; public void ( D D ) { this . D = D ; } public D D ( ) { return this . D ; } } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Holder < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > context = new Holder <> ( java.util.Map<java.lang.String,java.lang.Object> ) ; BeanWrapper org.springframework.beans.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( context ) ; assertEquals ( STRING , org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( D D ) { this . D = D ; }  <METHOD_END>
<METHOD_START> public D D ( ) { return this . D ; }  <METHOD_END>
<METHOD_START> public abstract java.lang.Object java.lang.Object ( )  <METHOD_END>
<METHOD_START> public abstract java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> < java.lang.String , java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> ( )  <METHOD_END>
<METHOD_START> public abstract void void ( java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> < java.lang.String , java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ( ) { return java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ) { this . java.util.Map<java.lang.String,java.lang.Integer> = java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> < java.lang.String , java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> ( ) { return java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> < java.lang.String , java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> ) { this . java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> = java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> < java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> ( ) { return java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> < java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> ) { this . java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> = java.util.List<java.util.Map<java.lang.String,java.lang.Integer>> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> < java.lang.String , java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> ( ) { return java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> < java.lang.String , java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> ) { this . java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> = java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> < java.util.List<java.lang.Integer> < java.lang.Integer > , java.util.List<java.lang.Long> < java.lang.Long > > java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ) { this . java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> = java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> < java.util.List<java.lang.Integer> < java.lang.Integer > , java.util.List<java.lang.Long> < java.lang.Long > > java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ( ) { return java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> < java.lang.Integer , java.util.List<java.lang.Long> < java.lang.Long > > java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ) { this . java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> = java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> < java.lang.Integer , java.util.List<java.lang.Long> < java.lang.Long > > java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ( ) { return java.util.Map<java.lang.Integer,java.util.List<java.lang.Long>> ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.BeanWrapperGenericsTests.DerivedMap org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ) { this . org.springframework.beans.BeanWrapperGenericsTests.DerivedMap = org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.BeanWrapperGenericsTests.DerivedMap org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ( ) { return org.springframework.beans.BeanWrapperGenericsTests.DerivedMap ; }  <METHOD_END>
<METHOD_START> java.lang.Number java.lang.Number ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Double java.lang.Double ( ) { return this . double ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Double java.lang.Double ) { this . double = java.lang.Double ; }  <METHOD_END>
<METHOD_START> T T ( )  <METHOD_END>
<METHOD_START> void void ( T T );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
