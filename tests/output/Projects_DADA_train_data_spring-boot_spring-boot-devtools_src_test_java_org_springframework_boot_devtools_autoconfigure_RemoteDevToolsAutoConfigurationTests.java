<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.boot.devtools.autoconfigure.MockFilterChain = new MockFilterChain ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; this . org.springframework.boot.devtools.autoconfigure.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( java.lang.String + STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( java.lang.String + STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( java.lang.String + STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( STRING + java.lang.String + STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; this . org.springframework.boot.devtools.autoconfigure.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( java.lang.String + STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( STRING + java.lang.String + STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( java.lang.String + STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; this . org.springframework.boot.devtools.autoconfigure.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( java.lang.String ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; assertThat ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; DispatcherFilter org.springframework.boot.devtools.autoconfigure.DispatcherFilter = this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DispatcherFilter .class ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . setRequestURI ( STRING + java.lang.String ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse . setStatus ( NUMBER ) ; org.springframework.boot.devtools.autoconfigure.DispatcherFilter . doFilter ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletRequest , this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse , this . org.springframework.boot.devtools.autoconfigure.MockFilterChain ) ; assertThat ( this . org.springframework.boot.devtools.autoconfigure.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { assertThat ( this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfigurationTests.MockHttpTunnelServer .class ) . invoked ) . isEqualTo ( boolean ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { assertThat ( this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfigurationTests.MockHttpRestartServer .class ) . invoked ) . isEqualTo ( boolean ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfigurationTests.Config .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.devtools.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.HttpTunnelServer org.springframework.boot.devtools.autoconfigure.HttpTunnelServer ( ) { return new org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfigurationTests.MockHttpTunnelServer ( new SocketTargetServerConnection ( new RemoteDebugPortProvider ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.HttpRestartServer org.springframework.boot.devtools.autoconfigure.HttpRestartServer ( ) { SourceFolderUrlFilter org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter = mock ( SourceFolderUrlFilter .class ) ; return new org.springframework.boot.devtools.autoconfigure.RemoteDevToolsAutoConfigurationTests.MockHttpRestartServer ( org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter ) ; }  <METHOD_END>
<METHOD_START> void ( TargetServerConnection org.springframework.boot.devtools.autoconfigure.TargetServerConnection ) { super( org.springframework.boot.devtools.autoconfigure.TargetServerConnection ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.boot.devtools.autoconfigure.ServerHttpRequest , ServerHttpResponse org.springframework.boot.devtools.autoconfigure.ServerHttpResponse )				throws java.io.IOException { this . boolean = true ; }  <METHOD_END>
<METHOD_START> void ( SourceFolderUrlFilter org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter ) { super( org.springframework.boot.devtools.autoconfigure.SourceFolderUrlFilter ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.boot.devtools.autoconfigure.ServerHttpRequest , ServerHttpResponse org.springframework.boot.devtools.autoconfigure.ServerHttpResponse )				throws java.io.IOException { this . boolean = true ; }  <METHOD_END>
