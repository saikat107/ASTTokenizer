<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , int .class ) , NUMBER ) ) ; assertEquals ( int .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.core.convert.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( TypeDescriptor . nested ( org.springframework.core.convert.MethodParameter , NUMBER ) , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) ) ; assertEquals ( TypeDescriptor . nested ( org.springframework.core.convert.MethodParameter , NUMBER ) , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) ) ; assertEquals ( TypeDescriptor . nested ( org.springframework.core.convert.MethodParameter , NUMBER ) , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getMapValueTypeDescriptor ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Enum .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getMapValueTypeDescriptor ( ) . getType ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.core.convert.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertNull ( org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.core.convert.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.Integer [] .class ) , NUMBER ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; assertEquals ( java.lang.Integer [] .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer [] .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( TypeDescriptor . valueOf ( java.lang.Integer .class ) , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.core.convert.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class ) , NUMBER ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; assertEquals ( java.util.Map .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.Map .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( TypeDescriptor . nested ( org.springframework.core.convert.MethodParameter , NUMBER ) , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) ) ; assertEquals ( TypeDescriptor . nested ( org.springframework.core.convert.MethodParameter , NUMBER ) , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.ParameterAnnotation .class ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . hasAnnotation ( org.springframework.core.convert.TypeDescriptorTests.ParameterAnnotation .class ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.ParameterAnnotation .class ) . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> < java.lang.Integer > org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> = new org.springframework.core.convert.TypeDescriptorTests.IntegerType ( ) ; Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.GenericType> ( ) . java.lang.reflect.Method ( STRING ) , org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.GenericType> ( ) . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Number> < java.lang.Number > org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Number> = new org.springframework.core.convert.TypeDescriptorTests.NumberType ( ) ; Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Number> . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.GenericType> ( ) . java.lang.reflect.Method ( STRING ) , org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Number> . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.GenericType> ( ) . java.lang.reflect.Method ( STRING , java.lang.Number .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> < java.lang.Integer > org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> = new org.springframework.core.convert.TypeDescriptorTests.IntegerType ( ) ; Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.GenericType> ( ) . java.lang.reflect.Method ( STRING ) , org.springframework.core.convert.TypeDescriptorTests.GenericType<java.lang.Integer> . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.GenericType> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.TypeDescriptorTests.IntegerClass org.springframework.core.convert.TypeDescriptorTests.IntegerClass = new org.springframework.core.convert.TypeDescriptorTests.IntegerClass ( ) ; Property org.springframework.core.convert.Property = new Property ( org.springframework.core.convert.TypeDescriptorTests.IntegerClass . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.IntegerClass> ( ) , org.springframework.core.convert.TypeDescriptorTests.IntegerClass . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.IntegerClass> ( ) . java.lang.reflect.Method ( STRING ) , org.springframework.core.convert.TypeDescriptorTests.IntegerClass . java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests.IntegerClass> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 .class ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . hasAnnotation ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; assertEquals ( java.util.Map .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Long .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 .class ) ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation2 .class ) ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation3 .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 .class , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String ) throws java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( java.lang.String ) , - NUMBER ) ) ; assertNotNull ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.String + STRING , org.springframework.core.convert.TypeDescriptor . getAnnotation ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.TypeDescriptorTests .class . java.lang.reflect.Field ( STRING ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.TypeDescriptorTests .class . java.lang.reflect.Field ( STRING ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.TypeDescriptorTests .class . java.lang.reflect.Field ( STRING ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertNull ( org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.TypeDescriptorTests .class . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Class<java.lang.Integer> , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.TypeDescriptorTests .class . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.TypeDescriptorTests .class . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.TypeDescriptorTests .class . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Long .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.FieldAnnotation .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Integer .class ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( int .class ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Class<java.lang.Integer> , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( int [] .class ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Class<java.lang.Integer> , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.Collection .class ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertNull ( org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . forObject ( STRING ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . forObject ( null ) ; assertNull ( org.springframework.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) , NUMBER ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class ) , NUMBER ) , NUMBER ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) , NUMBER ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER , NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) , NUMBER ) ; assertNull ( org.springframework.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) , NUMBER ) ; assertNull ( org.springframework.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER , NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) , NUMBER ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) , NUMBER ) ; assertNull ( org.springframework.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) , NUMBER ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.List .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . nested ( org.springframework.core.convert.Property , NUMBER ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . collection ( java.util.List .class , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( TypeDescriptor . valueOf ( java.lang.Integer .class ) , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . collection ( java.util.List .class , TypeDescriptor . collection ( java.util.List .class , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( TypeDescriptor . valueOf ( java.lang.Integer .class ) , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . map ( java.util.Map .class , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ; assertEquals ( java.util.Map .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.Map .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . map ( java.util.Map .class , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . map ( java.util.Map .class , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ) ; assertEquals ( java.util.Map .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; assertEquals ( java.util.Map .class , org.springframework.core.convert.TypeDescriptor . getObjectType ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . getName ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.TypeDescriptor . toString ( ) ) ; assertTrue ( ! org.springframework.core.convert.TypeDescriptor . isPrimitive ( ) ) ; assertEquals ( NUMBER , org.springframework.core.convert.TypeDescriptor . getAnnotations ( ) . length ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isCollection ( ) ) ; assertFalse ( org.springframework.core.convert.TypeDescriptor . isArray ( ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getMapValueTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Number .class ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . narrow ( java.lang.Integer ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.List .class ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . elementTypeDescriptor ( java.lang.Integer ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( NUMBER ) ; org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . elementTypeDescriptor ( java.util.List<java.lang.Integer> ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.FieldAnnotation .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.Map .class ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( java.lang.Integer ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( NUMBER ) ; org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( java.util.List<java.lang.Integer> ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.FieldAnnotation .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.Map .class ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( java.lang.Integer ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( NUMBER ) ; org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( java.util.List<java.lang.Integer> ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertNotNull ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.FieldAnnotation .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.String .class ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.String .class ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.Date .class ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.Date .class ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.List .class ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.List .class ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.Map .class ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . valueOf ( java.util.Map .class ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; MethodParameter org.springframework.core.convert.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) ) ; assertNotEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) ) ; assertNotEquals ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( TypeDescriptor . valueOf ( java.lang.Integer .class ) . isAssignableTo ( TypeDescriptor . valueOf ( java.lang.Number .class ) ) ) ; assertFalse ( TypeDescriptor . valueOf ( java.lang.Number .class ) . isAssignableTo ( TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ) ; assertFalse ( TypeDescriptor . valueOf ( java.lang.String .class ) . isAssignableTo ( TypeDescriptor . valueOf ( java.lang.String [] .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertTrue ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertTrue ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertFalse ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertTrue ( TypeDescriptor . valueOf ( java.util.List .class ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertTrue ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertTrue ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertFalse ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertTrue ( TypeDescriptor . valueOf ( java.util.Map .class ) . isAssignableTo ( new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . isMap ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertEquals ( java.util.List .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.util.Set .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = org.springframework.core.convert.TypeDescriptor . upcast ( java.lang.Object .class ) ; assertTrue ( org.springframework.core.convert.TypeDescriptor . getAnnotation ( org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 .class ) != null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Property org.springframework.core.convert.Property = new Property ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING ) , java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = new TypeDescriptor ( org.springframework.core.convert.Property ) ; try { org.springframework.core.convert.TypeDescriptor . upcast ( java.util.Collection .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class CustomSet extends java.util.HashSet<java.lang.String> < java.lang.String > {		} assertEquals ( TypeDescriptor . valueOf ( CustomSet .class ) . getElementTypeDescriptor ( ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( TypeDescriptor . forObject ( new CustomSet ( ) ) . getElementTypeDescriptor ( ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) class CustomMap extends java.util.HashMap<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > {		} assertEquals ( TypeDescriptor . valueOf ( CustomMap .class ) . getMapKeyTypeDescriptor ( ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( TypeDescriptor . valueOf ( CustomMap .class ) . getMapValueTypeDescriptor ( ) , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ; assertEquals ( TypeDescriptor . forObject ( new CustomMap ( ) ) . getMapKeyTypeDescriptor ( ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( TypeDescriptor . forObject ( new CustomMap ( ) ) . getMapValueTypeDescriptor ( ) , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . map ( java.util.LinkedHashMap .class , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . array ( org.springframework.core.convert.TypeDescriptor ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor . getType ( ) , java.util.LinkedHashMap [] .class ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) , org.springframework.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . array ( TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( org.springframework.core.convert.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.String [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( TypeDescriptor . array ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . forObject ( STRING ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( org.springframework.core.convert.TypeDescriptor ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; TypeDescriptor org.springframework.core.convert.TypeDescriptor = ( TypeDescriptor ) java.io.ObjectInputStream . java.lang.Object ( ) ; assertThat ( org.springframework.core.convert.TypeDescriptor , equalTo ( org.springframework.core.convert.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . collection ( java.util.List .class , null ) ; assertThat ( org.springframework.core.convert.TypeDescriptor . getElementTypeDescriptor ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeDescriptor org.springframework.core.convert.TypeDescriptor = TypeDescriptor . map ( java.util.LinkedHashMap .class , null , null ) ; assertThat ( org.springframework.core.convert.TypeDescriptor . getMapKeyTypeDescriptor ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.convert.TypeDescriptor . getMapValueTypeDescriptor ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Field ( STRING ) ; MethodParameter org.springframework.core.convert.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.core.convert.TypeDescriptorTests> ( ) . java.lang.reflect.Method ( STRING , int .class ) , NUMBER ) ; assertThat ( new TypeDescriptor ( java.lang.reflect.Field ) . getSource ( ) , equalTo ( ( java.lang.Object ) java.lang.reflect.Field ) ) ; assertThat ( new TypeDescriptor ( org.springframework.core.convert.MethodParameter ) . getSource ( ) , equalTo ( ( java.lang.Object ) org.springframework.core.convert.MethodParameter ) ) ; assertThat ( TypeDescriptor . valueOf ( java.lang.Integer .class ) . getSource ( ) , equalTo ( ( java.lang.Object ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Enum<?>>>> < java.util.List<java.util.Map<java.lang.Integer,java.lang.Enum<?>>> < java.util.Map<java.lang.Integer,java.lang.Enum<?>> < java.lang.Integer , java.lang.Enum<?> < ? > > > > java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Enum<?>>>> ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.List java.util.List ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer [] java.lang.Integer[] ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Integer,java.util.List<java.lang.String>> < java.lang.Integer , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.Integer,java.util.List<java.lang.String>> ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> < java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > > java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.List> < java.util.List > java.util.List<java.util.List> ) {	}  <METHOD_END>
<METHOD_START> public java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> < java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > > java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> < java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > > java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> ) {	}  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> < java.lang.String , java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 public java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> < java.util.List<java.lang.Integer> < java.lang.Integer > , java.util.List<java.lang.Long> < java.lang.Long > > java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ( ) { return java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ; }  <METHOD_END>
<METHOD_START> @ org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation2 public void void ( java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> < java.util.List<java.lang.Integer> < java.lang.Integer > , java.util.List<java.lang.Long> < java.lang.Long > > java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ) { this . java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> = java.util.Map<java.util.List<java.lang.Integer>,java.util.List<java.lang.Long>> ; }  <METHOD_END>
<METHOD_START> @ org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ org.springframework.core.convert.TypeDescriptorTests.ComposedMethodAnnotation1 public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ org.springframework.core.convert.TypeDescriptorTests.ComposedComposedMethodAnnotation1 public void void ( ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> < java.lang.String , java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > > java.util.Map<java.lang.String,java.util.List<java.util.List<java.lang.Integer>>> ) {	}  <METHOD_END>
<METHOD_START> public void void ( @ org.springframework.core.convert.TypeDescriptorTests.ParameterAnnotation ( NUMBER ) java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> public void void ( @ org.springframework.core.convert.TypeDescriptorTests.ParameterAnnotation ( NUMBER ) java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> public T T ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( T T ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.convert.TypeDescriptorTests.MethodAnnotation1 public java.util.List<T> < T > java.util.List<T> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<T> < T > java.util.List<T> ) {		}  <METHOD_END>
<METHOD_START> T T ( )  <METHOD_END>
<METHOD_START> void void ( T T );  <METHOD_END>
<METHOD_START> java.util.List<T> < T > java.util.List<T> ( )  <METHOD_END>
<METHOD_START> void void ( java.util.List<T> < T > java.util.List<T> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Integer java.lang.Integer ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Number java.lang.Number ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.Number> < java.lang.Number > java.util.List<java.lang.Number> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<java.lang.Number> < java.lang.Number > java.util.List<java.lang.Number> ) {		}  <METHOD_END>
