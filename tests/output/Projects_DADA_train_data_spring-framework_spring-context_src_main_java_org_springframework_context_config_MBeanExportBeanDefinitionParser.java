<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.context.config.AbstractBeanDefinition , ParserContext org.springframework.context.config.ParserContext ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.context.config.AbstractBeanDefinition org.springframework.context.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.context.config.ParserContext ) { BeanDefinitionBuilder org.springframework.context.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AnnotationMBeanExporter .class ) ; org.springframework.context.config.BeanDefinitionBuilder . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.context.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setSource ( org.springframework.context.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.context.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.context.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } else { AbstractBeanDefinition org.springframework.context.config.AbstractBeanDefinition = MBeanServerBeanDefinitionParser . findServerForSpecialEnvironment ( ) ; if ( org.springframework.context.config.AbstractBeanDefinition != null ) { org.springframework.context.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.context.config.AbstractBeanDefinition ) ; } } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; RegistrationPolicy org.springframework.context.config.RegistrationPolicy = RegistrationPolicy . FAIL_ON_EXISTING ; if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.context.config.RegistrationPolicy = RegistrationPolicy . IGNORE_EXISTING ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.context.config.RegistrationPolicy = RegistrationPolicy . REPLACE_EXISTING ; } org.springframework.context.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.context.config.RegistrationPolicy ) ; return org.springframework.context.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
