<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithExplicitName .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . contains ( STRING ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; java.lang.String java.lang.String ; MutablePropertySources org.springframework.context.annotation.MutablePropertySources = org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) ; java.util.Iterator < org . springframework . org.springframework.core . org.springframework.core . org.springframework.core < ? > > iterator = org.springframework.context.annotation.MutablePropertySources . iterator ( ) ; do { java.lang.String = iterator . next ( ) . getName ( ) ; } while ( iterator . hasNext ( ) ); assertThat ( java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithImplicitName .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . contains ( STRING ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithTestProfileBeans .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithImplicitName .class , org.springframework.context.annotation.PropertySourceAnnotationTests.P2Config .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; } { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.P2Config .class , org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithImplicitName .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithImplicitName .class , org.springframework.context.annotation.PropertySourceAnnotationTests.WithCustomFactory .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithImplicitName .class , org.springframework.context.annotation.PropertySourceAnnotationTests.WithCustomFactoryAsMeta .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithUnresolvablePlaceholder .class ) ; try { org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; } catch ( BeanDefinitionStoreException org.springframework.context.annotation.BeanDefinitionStoreException ) { assertTrue ( org.springframework.context.annotation.BeanDefinitionStoreException . getCause ( ) instanceof java.lang.IllegalArgumentException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithUnresolvablePlaceholderAndDefault .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithResolvablePlaceholder .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithResolvablePlaceholderAndFactoryBean .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithEmptyResourceLocations .class ) ; try { org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; } catch ( BeanDefinitionStoreException org.springframework.context.annotation.BeanDefinitionStoreException ) { assertTrue ( org.springframework.context.annotation.BeanDefinitionStoreException . getCause ( ) instanceof java.lang.IllegalArgumentException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithNameAndMultipleResourceLocations .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithMultipleResourceLocations .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithPropertySources .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithNamedPropertySources .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.ExpectedException . expect ( BeanDefinitionStoreException .class ) ; org.springframework.context.annotation.ExpectedException . expectCause ( isA ( java.io.FileNotFoundException .class ) ) ; new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithMissingPropertySource .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithIgnoredPropertySource .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithSameSourceImportedInDifferentOrder .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithNameAndMultipleResourceLocations .class ) ; AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithMultipleResourceLocations .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithFourResourceLocations .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; MapPropertySource org.springframework.context.annotation.MapPropertySource = new MapPropertySource ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addLast ( org.springframework.context.annotation.MapPropertySource ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.PropertySourceAnnotationTests.ConfigWithFourResourceLocations .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.Environment . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.Environment . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.FactoryBean org.springframework.context.annotation.FactoryBean ( ) { final java.lang.String java.lang.String = org.springframework.context.annotation.Environment . getProperty ( STRING ) ; return new FactoryBean ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return new TestBean ( java.lang.String ) ; } @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return TestBean .class ; } @ java.lang.Override public boolean boolean ( ) { return false ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return TestBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.Environment . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.Environment . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Profile ( STRING ) public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( org.springframework.context.annotation.Environment . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org . springframework . org.springframework.core . org.springframework.core . org.springframework.core.env.PropertySource org.springframework.core.env.PropertySource ( java.lang.String java.lang.String , EncodedResource org.springframework.context.annotation.EncodedResource ) throws java.io.IOException { java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( org.springframework.context.annotation.EncodedResource ) ; return new org . springframework . org.springframework.core . org.springframework.core . org.springframework.core < java.util.Properties > ( STRING + java.lang.String , java.util.Properties ) { @ Override public Object getProperty ( String name ) { String value = props . getProperty ( name ) ; return ( value != null ? value . toUpperCase ( ) : null ) ; } } ; }  <METHOD_END>
<METHOD_START> @ Override public Object getProperty ( String name ) { String value = props . getProperty ( name ) ; return ( value != null ? value . toUpperCase ( ) : null ) ; }  <METHOD_END>
