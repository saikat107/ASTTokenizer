<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( org.springframework.integration.aggregator.MethodInvokingMessageGroupProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultAggregatingMessageGroupProcessor org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor = new DefaultAggregatingMessageGroupProcessor ( ) ; DirectFieldAccessor org.springframework.integration.aggregator.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor ) ; org.springframework.integration.aggregator.DirectFieldAccessor . setPropertyValue ( STRING , new MutableMessageBuilderFactory ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MutableMessageBuilder . withPayload ( STRING ) . setCorrelationId ( NUMBER ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = java.util.Arrays .< Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> ) ; MessageGroup org.springframework.integration.aggregator.MessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , null ) ; org.springframework.integration.aggregator.Message<?> = MutableMessageBuilder . withPayload ( STRING ) . setCorrelationId ( NUMBER ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> = java.util.Arrays .< Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.MessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , NUMBER ) ; java.lang.Object = org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = java.util.Collections .< Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> ) ; MessageGroup org.springframework.integration.aggregator.MessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = java.util.Arrays .< Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> ) ; MessageGroup org.springframework.integration.aggregator.MessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = java.util.Arrays .< Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> ) ; MessageGroup org.springframework.integration.aggregator.MessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = java.util.Arrays .< Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> ) ; MessageGroup org.springframework.integration.aggregator.MessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = java.util.Arrays .< Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> ( org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> ) ; MessageGroup org.springframework.integration.aggregator.MessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.aggregator.Message<?> < ? > org.springframework.integration.aggregator.Message<?> ( java.lang.Object java.lang.Object , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.Object ) . setSequenceNumber ( java.lang.Integer ) . setSequenceSize ( java.lang.Integer ) . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
