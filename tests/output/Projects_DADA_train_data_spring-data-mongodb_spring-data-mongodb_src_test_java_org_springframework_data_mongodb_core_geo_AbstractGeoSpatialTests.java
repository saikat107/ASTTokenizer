<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.geo.MongoClient org.springframework.data.mongodb.core.geo.MongoClient ( ) { return new MongoClient ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.geo.MongoTemplate . setWriteConcern ( WriteConcern . FSYNC_SAFE ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.mongodb.core.geo.MongoTemplate . dropCollection ( Venue .class ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new Venue ( STRING , - NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NearQuery org.springframework.data.mongodb.core.geo.NearQuery = NearQuery . near ( - NUMBER , NUMBER , Metrics . KILOMETERS ) . num ( NUMBER ) . maxDistance ( NUMBER ) ; GeoResults < Venue > org.springframework.data.mongodb.core.geo.GeoResults<org.springframework.data.mongodb.core.geo.Venue> = org.springframework.data.mongodb.core.geo.MongoTemplate . geoNear ( org.springframework.data.mongodb.core.geo.NearQuery , Venue .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoResults<org.springframework.data.mongodb.core.geo.Venue> . getContent ( ) . size ( ) , is ( not ( NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoResults<org.springframework.data.mongodb.core.geo.Venue> . getAverageDistance ( ) . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Circle org.springframework.data.mongodb.core.geo.Circle = new Circle ( - NUMBER , NUMBER , NUMBER ) ; java.util.List<org.springframework.data.mongodb.core.geo.Venue> < Venue > java.util.List<org.springframework.data.mongodb.core.geo.Venue> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( query ( where ( STRING ) . within ( org.springframework.data.mongodb.core.geo.Circle ) ) , Venue .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.Venue> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Circle org.springframework.data.mongodb.core.geo.Circle = new Circle ( - NUMBER , NUMBER , NUMBER ) ; java.util.List<org.springframework.data.mongodb.core.geo.Venue> < Venue > java.util.List<org.springframework.data.mongodb.core.geo.Venue> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( query ( where ( STRING ) . withinSphere ( org.springframework.data.mongodb.core.geo.Circle ) ) , Venue .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.Venue> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Box org.springframework.data.mongodb.core.geo.Box = new Box ( new Point ( - NUMBER , NUMBER ) , new Point ( - NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.geo.Venue> < Venue > java.util.List<org.springframework.data.mongodb.core.geo.Venue> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( query ( where ( STRING ) . within ( org.springframework.data.mongodb.core.geo.Box ) ) , Venue .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.Venue> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Polygon org.springframework.data.mongodb.core.geo.Polygon = new Polygon ( org.springframework.data.mongodb.core.geo.Point , org.springframework.data.mongodb.core.geo.Point , org.springframework.data.mongodb.core.geo.Point , org.springframework.data.mongodb.core.geo.Point ) ; java.util.List<org.springframework.data.mongodb.core.geo.Venue> < Venue > java.util.List<org.springframework.data.mongodb.core.geo.Venue> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( query ( where ( STRING ) . within ( org.springframework.data.mongodb.core.geo.Polygon ) ) , Venue .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.Venue> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Query org.springframework.data.mongodb.core.geo.Query = query ( where ( STRING ) . nearSphere ( org.springframework.data.mongodb.core.geo.Point ) . maxDistance ( NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.geo.Venue> < Venue > java.util.List<org.springframework.data.mongodb.core.geo.Venue> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( org.springframework.data.mongodb.core.geo.Query , Venue .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.Venue> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.geo.Query = query ( where ( STRING ) . lt ( LocalDate . now ( ) ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . geoNear ( NearQuery . near ( NUMBER , NUMBER ) . spherical ( true ) . query ( org.springframework.data.mongodb.core.geo.Query ) , Venue .class ) ; }  <METHOD_END>
