<METHOD_START> public static < T extends java.lang.annotation.Annotation > org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> < T > org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> ( java.lang.Class<> , new java.util.HashSet<java.lang.annotation.Annotation> <> ( ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> private static < T extends java.lang.annotation.Annotation > org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> < T > org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; if ( java.lang.Class<> == null || java.lang.Object .class == java.lang.Class<> ) { return null ; } if ( AnnotationUtils . isAnnotationDeclaredLocally ( java.lang.Class<T> , java.lang.Class<> ) ) { return new org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> <> ( java.lang.Class<> , java.lang.Class<> . T ( java.lang.Class<T> ) ) ; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.Class<> . java.lang.String ( ) ) && java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ) { org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> < T > org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> = org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> ) ; if ( org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> != null ) { return new org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> <> ( java.lang.Class<> , org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> . java.lang.Class<?> ( ) , java.lang.annotation.Annotation , org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> . T ( ) ) ; } } } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> < T > org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> = org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> ) ; if ( org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> != null ) { return new org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> <> ( java.lang.Class<> , org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> . java.lang.Class<?> ( ) , org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> . java.lang.annotation.Annotation ( ) , org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> . T ( ) ) ; } } return org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor<T> ( java.lang.Class<> . java.lang.Class<? super > ( ) , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { return org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<> , new java.util.HashSet<java.lang.annotation.Annotation> <> ( ) , java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ... java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { void ( java.lang.Class<? extends java.lang.annotation.Annotation>[] , STRING ) ; if ( java.lang.Class<> == null || java.lang.Object .class == java.lang.Class<> ) { return null ; } for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.lang.Class<? extends java.lang.annotation.Annotation>[] ) { if ( AnnotationUtils . isAnnotationDeclaredLocally ( java.lang.Class<> , java.lang.Class<> ) ) { return new org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<> , java.lang.Class<> . getAnnotation ( java.lang.Class<> ) ) ; } } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ) { if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.annotation.Annotation ) && java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ) { org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor = org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; if ( org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor != null ) { return new org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<> , org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor . java.lang.Class<?> ( ) , java.lang.annotation.Annotation , org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor . java.lang.annotation.Annotation ( ) ) ; } } } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor = org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; if ( org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor != null ) { return new org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<> , org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor . java.lang.Class<?> ( ) , org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor . java.lang.annotation.Annotation ( ) , org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor . java.lang.annotation.Annotation ( ) ) ; } } return org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor ( java.lang.Class<> . java.lang.Class<? super > ( ) , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation>[] ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String java.lang.String ) { if ( ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String ) ; } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( ! java.lang.annotation.Annotation .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , T T ) { this( java.lang.Class<> , java.lang.Class<> , null , T ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.annotation.Annotation java.lang.annotation.Annotation , T T ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( T , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.annotation.Annotation = java.lang.annotation.Annotation ; this . T = T ; this . org.springframework.test.util.AnnotationAttributes = AnnotatedElementUtils . findMergedAnnotationAttributes ( java.lang.Class<> , T . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) , false , false ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public T T ( ) { return this . T ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public T T ( ) { return AnnotationUtils . synthesizeAnnotation ( org.springframework.test.util.AnnotationAttributes ( ) , ( java.lang.Class<T> < T > ) java.lang.Class<? extends java.lang.annotation.Annotation> ( ) , java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return this . T . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.util.AnnotationAttributes org.springframework.test.util.AnnotationAttributes ( ) { return this . org.springframework.test.util.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public java.lang.annotation.Annotation java.lang.annotation.Annotation ( ) { return this . java.lang.annotation.Annotation ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return ( this . java.lang.annotation.Annotation != null ? this . java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return new ToStringCreator ( this ) . append ( STRING , this . java.lang.Class<> ) . append ( STRING , this . java.lang.Class<> ) . append ( STRING , this . java.lang.annotation.Annotation ) . append ( STRING , this . T ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { this( java.lang.Class<> , java.lang.Class<> , null , java.lang.annotation.Annotation ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { super( java.lang.Class<> , java.lang.Class<> , java.lang.annotation.Annotation , java.lang.annotation.Annotation ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.annotation.Annotation java.lang.annotation.Annotation ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
