<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MongoDbStoringMessageHandler ( ( MongoDbFactory ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MongoDbStoringMessageHandler ( ( MongoOperations ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoDbStoringMessageHandler org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler = new MongoDbStoringMessageHandler ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . afterPropertiesSet ( ) ; Message < Person > org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> = MessageBuilder . withPayload ( this . createPerson ( STRING ) ) . build ( ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . handleMessage ( org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> ) ; MongoTemplate org.springframework.integration.mongodb.outbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; Query org.springframework.integration.mongodb.outbound.Query = new BasicQuery ( STRING ) ; Person org.springframework.integration.mongodb.outbound.Person = org.springframework.integration.mongodb.outbound.MongoTemplate . findOne ( org.springframework.integration.mongodb.outbound.Query , Person .class , STRING ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getAddress ( ) . getState ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoDbStoringMessageHandler org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler = new MongoDbStoringMessageHandler ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setCollectionNameExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . afterPropertiesSet ( ) ; Message < Person > org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> = MessageBuilder . withPayload ( this . createPerson ( STRING ) ) . build ( ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . handleMessage ( org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> ) ; MongoTemplate org.springframework.integration.mongodb.outbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; Query org.springframework.integration.mongodb.outbound.Query = new BasicQuery ( STRING ) ; Person org.springframework.integration.mongodb.outbound.Person = org.springframework.integration.mongodb.outbound.MongoTemplate . findOne ( org.springframework.integration.mongodb.outbound.Query , Person .class , STRING ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getAddress ( ) . getState ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoDbStoringMessageHandler org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler = new MongoDbStoringMessageHandler ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setCollectionNameExpression ( new LiteralExpression ( STRING ) ) ; MappingMongoConverter org.springframework.integration.mongodb.outbound.MappingMongoConverter = new TestMongoConverter ( org.springframework.integration.mongodb.outbound.MongoDbFactory , new MongoMappingContext ( ) ) ; org.springframework.integration.mongodb.outbound.MappingMongoConverter . afterPropertiesSet ( ) ; org.springframework.integration.mongodb.outbound.MappingMongoConverter = spy ( org.springframework.integration.mongodb.outbound.MappingMongoConverter ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setMongoConverter ( org.springframework.integration.mongodb.outbound.MappingMongoConverter ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . afterPropertiesSet ( ) ; Message < Person > org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> = MessageBuilder . withPayload ( this . createPerson ( STRING ) ) . build ( ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . handleMessage ( org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> ) ; MongoTemplate org.springframework.integration.mongodb.outbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; Query org.springframework.integration.mongodb.outbound.Query = new BasicQuery ( STRING ) ; Person org.springframework.integration.mongodb.outbound.Person = org.springframework.integration.mongodb.outbound.MongoTemplate . findOne ( org.springframework.integration.mongodb.outbound.Query , Person .class , STRING ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getAddress ( ) . getState ( ) ) ; verify ( org.springframework.integration.mongodb.outbound.MappingMongoConverter , times ( NUMBER ) ) . write ( Mockito . any ( ) , Mockito . any ( Bson .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MappingMongoConverter org.springframework.integration.mongodb.outbound.MappingMongoConverter = new TestMongoConverter ( org.springframework.integration.mongodb.outbound.MongoDbFactory , new MongoMappingContext ( ) ) ; org.springframework.integration.mongodb.outbound.MappingMongoConverter . afterPropertiesSet ( ) ; org.springframework.integration.mongodb.outbound.MappingMongoConverter = spy ( org.springframework.integration.mongodb.outbound.MappingMongoConverter ) ; MongoTemplate org.springframework.integration.mongodb.outbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.outbound.MongoDbFactory , org.springframework.integration.mongodb.outbound.MappingMongoConverter ) ; MongoDbStoringMessageHandler org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler = new MongoDbStoringMessageHandler ( org.springframework.integration.mongodb.outbound.MongoTemplate ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setCollectionNameExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . afterPropertiesSet ( ) ; Message < Person > org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> = MessageBuilder . withPayload ( this . createPerson ( STRING ) ) . build ( ) ; org.springframework.integration.mongodb.outbound.MongoDbStoringMessageHandler . handleMessage ( org.springframework.integration.mongodb.outbound.Message<org.springframework.integration.mongodb.outbound.Person> ) ; MongoTemplate org.springframework.integration.mongodb.outbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; Query org.springframework.integration.mongodb.outbound.Query = new BasicQuery ( STRING ) ; Person org.springframework.integration.mongodb.outbound.Person = org.springframework.integration.mongodb.outbound.MongoTemplate . findOne ( org.springframework.integration.mongodb.outbound.Query , Person .class , STRING ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getAddress ( ) . getState ( ) ) ; verify ( org.springframework.integration.mongodb.outbound.MappingMongoConverter , times ( NUMBER ) ) . write ( Mockito . any ( ) , Mockito . any ( Bson .class ) ) ; }  <METHOD_END>
