<METHOD_START> public void ( Metamodel org.springframework.data.jpa.mapping.Metamodel , Property org.springframework.data.jpa.mapping.Property , PersistentEntity < ? , JpaPersistentProperty > org.springframework.data.jpa.mapping.PersistentEntity<?,org.springframework.data.jpa.mapping.JpaPersistentProperty> , SimpleTypeHolder org.springframework.data.jpa.mapping.SimpleTypeHolder ) { super( org.springframework.data.jpa.mapping.Property , org.springframework.data.jpa.mapping.PersistentEntity<,org.springframework.data.jpa.mapping.JpaPersistentProperty> , org.springframework.data.jpa.mapping.SimpleTypeHolder ); Assert . notNull ( org.springframework.data.jpa.mapping.Metamodel , STRING ) ; this . java.util.Optional<java.lang.Boolean> = java.util.Optional<java.lang.Boolean> ( ) ; this . java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> = java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> ( ) ; this . boolean = boolean ( ) ; this . org.springframework.data.jpa.mapping.JpaMetamodel = new JpaMetamodel ( org.springframework.data.jpa.mapping.Metamodel ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> . isPresent ( ) ? java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> . get ( ) . getType ( ) : super. getActualType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<? extends org.springframework.data.jpa.mapping.TypeInformation<?>> < ? extends TypeInformation < ? > > java.lang.Iterable<? extends org.springframework.data.jpa.mapping.TypeInformation<?>> ( ) { return java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> . isPresent ( ) ? java.util.Collections . java.util.Set ( java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> . get ( ) ) : super. getPersistentEntityType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> . java.util.stream.Stream<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) . boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> -> isAnnotationPresent ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.jpa.mapping.JpaMetamodel . isJpaManaged ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> . java.util.stream.Stream<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) . boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> -> findAnnotation ( java.lang.Class<> ) . isPresent ( ) ) ) { return true ; } return getType ( ) . isAnnotationPresent ( Embeddable .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( Transient .class ) || super. isTransient ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.mapping.Association<org.springframework.data.jpa.mapping.JpaPersistentProperty> < JpaPersistentProperty > org.springframework.data.jpa.mapping.Association<org.springframework.data.jpa.mapping.JpaPersistentProperty> ( ) { return new Association < JpaPersistentProperty > ( this , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Optional<java.lang.Boolean> . java.lang.Boolean ( ( ) super. usePropertyAccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( Version .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean && super. isWritable ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Boolean> < java.lang.Boolean > java.util.Optional<java.lang.Boolean> ( ) { java.util.Optional<org.springframework.data.annotation.AccessType> < org . springframework . data . org.springframework.data.annotation . org.springframework.data.annotation > java.util.Optional<org.springframework.data.annotation.AccessType> = findAnnotation ( org . springframework . data . org.springframework.data.annotation . org.springframework.data.annotation .class ) ; if ( java.util.Optional<org.springframework.data.annotation.AccessType> . isPresent ( ) ) { return java.util.Optional<org.springframework.data.annotation.AccessType> . map ( it -> Type . PROPERTY . equals ( it . value ( ) ) ) ; } java.util.Optional<org.springframework.data.jpa.mapping.Access> < Access > java.util.Optional<org.springframework.data.jpa.mapping.Access> = findAnnotation ( Access .class ) ; if ( java.util.Optional<org.springframework.data.jpa.mapping.Access> . isPresent ( ) ) { return java.util.Optional<org.springframework.data.jpa.mapping.Access> . map ( it -> AccessType . PROPERTY . equals ( it . value ( ) ) ) ; } java.util.Optional<org.springframework.data.annotation.AccessType> = findPropertyOrOwnerAnnotation ( org . springframework . data . org.springframework.data.annotation . org.springframework.data.annotation .class ) ; if ( java.util.Optional<org.springframework.data.annotation.AccessType> . isPresent ( ) ) { return java.util.Optional<org.springframework.data.annotation.AccessType> . map ( it -> Type . PROPERTY . equals ( it . value ( ) ) ) ; } java.util.Optional<org.springframework.data.jpa.mapping.Access> = findPropertyOrOwnerAnnotation ( Access .class ) ; return java.util.Optional<org.springframework.data.jpa.mapping.Access> . map ( t -> AccessType . PROPERTY . equals ( t . value ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> ( ) { if ( ! boolean ( ) ) { return java.util.Optional . java.util.Optional<org.springframework.data.jpa.mapping.TypeInformation<?>> ( ) ; } return java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> . java.util.stream.Stream<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Class<? extends java.lang.annotation.Annotation> -> Optionals . toStream ( findAnnotation ( java.lang.Class<> ) ) ) . map ( it -> AnnotationUtils . getValue ( it , STRING ) ) . filter ( it -> it != null && ! void .class . equals ( it ) ) . map ( it -> ( Class < ? > ) it ) . findFirst ( ) . map ( it -> ( TypeInformation < ? > ) ClassTypeInformation . from ( it ) ) ; }  <METHOD_END>
<METHOD_START> private final boolean boolean ( ) { return ! java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> . java.util.stream.Stream<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Class<? extends java.lang.annotation.Annotation> -> Optionals . toStream ( findAnnotation ( java.lang.Class<> ) ) ) . map ( it -> AnnotationUtils . getValue ( it , STRING ) ) . anyMatch ( it -> it . equals ( Boolean . FALSE ) ) ; }  <METHOD_END>
