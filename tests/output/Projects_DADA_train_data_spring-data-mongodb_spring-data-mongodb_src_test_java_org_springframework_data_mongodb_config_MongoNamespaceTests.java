<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoClientFactoryBean org.springframework.data.mongodb.config.MongoClientFactoryBean = ( MongoClientFactoryBean ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; assertNull ( getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ) ; assertNull ( getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoClientFactoryBean org.springframework.data.mongodb.config.MongoClientFactoryBean = ( MongoClientFactoryBean ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; MongoClientOptions org.springframework.data.mongodb.config.MongoClientOptions = ( MongoClientOptions ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; assertFalse ( STRING , org.springframework.data.mongodb.config.MongoClientOptions . getSocketFactory ( ) instanceof javax.net.ssl.SSLSocketFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoClientFactoryBean org.springframework.data.mongodb.config.MongoClientFactoryBean = ( MongoClientFactoryBean ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoClientOptions org.springframework.data.mongodb.config.MongoClientOptions = ( MongoClientOptions ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; assertTrue ( STRING , org.springframework.data.mongodb.config.MongoClientOptions . getSocketFactory ( ) instanceof javax.net.ssl.SSLSocketFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoClientFactoryBean org.springframework.data.mongodb.config.MongoClientFactoryBean = ( MongoClientFactoryBean ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoClientOptions org.springframework.data.mongodb.config.MongoClientOptions = ( MongoClientOptions ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; assertTrue ( STRING , org.springframework.data.mongodb.config.MongoClientOptions . getSocketFactory ( ) instanceof javax.net.ssl.SSLSocketFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoClientFactoryBean org.springframework.data.mongodb.config.MongoClientFactoryBean = ( MongoClientFactoryBean ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; javax.net.ssl.SSLSocketFactory javax.net.ssl.SSLSocketFactory = org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING , javax.net.ssl.SSLSocketFactory .class ) ; MongoClientOptions org.springframework.data.mongodb.config.MongoClientOptions = ( MongoClientOptions ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; assertTrue ( STRING , org.springframework.data.mongodb.config.MongoClientOptions . getSocketFactory ( ) instanceof javax.net.ssl.SSLSocketFactory ) ; assertSame ( javax.net.ssl.SSLSocketFactory , org.springframework.data.mongodb.config.MongoClientOptions . getSocketFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = ( MongoDbFactory ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoClient org.springframework.data.mongodb.config.MongoClient = ( MongoClient ) getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ; assertEquals ( STRING , org.springframework.data.mongodb.config.MongoClient . getAddress ( ) . getHost ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.config.MongoClient . getAddress ( ) . getPort ( ) ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = ( MongoDbFactory ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoClient org.springframework.data.mongodb.config.MongoClient = ( MongoClient ) getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ; assertEquals ( STRING , org.springframework.data.mongodb.config.MongoClient . getAddress ( ) . getHost ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.config.MongoClient . getAddress ( ) . getPort ( ) ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoOperations org.springframework.data.mongodb.config.MongoOperations = ( MongoOperations ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = ( MongoDbFactory ) getField ( org.springframework.data.mongodb.config.MongoOperations , STRING ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ) ; MongoConverter org.springframework.data.mongodb.config.MongoConverter = ( MongoConverter ) getField ( org.springframework.data.mongodb.config.MongoOperations , STRING ) ; assertNotNull ( org.springframework.data.mongodb.config.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoOperations org.springframework.data.mongodb.config.MongoOperations = ( MongoOperations ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = ( MongoDbFactory ) getField ( org.springframework.data.mongodb.config.MongoOperations , STRING ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ) ; WriteConcern org.springframework.data.mongodb.config.WriteConcern = ( WriteConcern ) getField ( org.springframework.data.mongodb.config.MongoOperations , STRING ) ; assertEquals ( WriteConcern . SAFE , org.springframework.data.mongodb.config.WriteConcern ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; GridFsOperations org.springframework.data.mongodb.config.GridFsOperations = ( GridFsOperations ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = ( MongoDbFactory ) getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ) ; MongoConverter org.springframework.data.mongodb.config.MongoConverter = ( MongoConverter ) getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ; assertNotNull ( org.springframework.data.mongodb.config.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; GridFsOperations org.springframework.data.mongodb.config.GridFsOperations = ( GridFsOperations ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = ( MongoDbFactory ) getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ) ; assertEquals ( null , getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ) ; MongoConverter org.springframework.data.mongodb.config.MongoConverter = ( MongoConverter ) getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ; assertNotNull ( org.springframework.data.mongodb.config.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; GridFsOperations org.springframework.data.mongodb.config.GridFsOperations = ( GridFsOperations ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = ( MongoDbFactory ) getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.MongoDbFactory , STRING ) ) ; assertEquals ( STRING , getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ) ; MongoConverter org.springframework.data.mongodb.config.MongoConverter = ( MongoConverter ) getField ( org.springframework.data.mongodb.config.GridFsOperations , STRING ) ; assertNotNull ( org.springframework.data.mongodb.config.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.mongodb.config.ApplicationContext . containsBean ( STRING ) ) ; MongoClientFactoryBean org.springframework.data.mongodb.config.MongoClientFactoryBean = ( MongoClientFactoryBean ) org.springframework.data.mongodb.config.ApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) getField ( org.springframework.data.mongodb.config.MongoClientFactoryBean , STRING ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; MongoClient org.springframework.data.mongodb.config.MongoClient = org.springframework.data.mongodb.config.MongoClientFactoryBean . getObject ( ) ; MongoClientOptions org.springframework.data.mongodb.config.MongoClientOptions = org.springframework.data.mongodb.config.MongoClient . getMongoClientOptions ( ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.config.MongoClientOptions . getConnectionsPerHost ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.config.MongoClientOptions . getConnectTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.config.MongoClientOptions . getMaxWaitTime ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.config.MongoClientOptions . getSocketTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.config.MongoClientOptions . getThreadsAllowedToBlockForConnectionMultiplier ( ) ) ; }  <METHOD_END>
