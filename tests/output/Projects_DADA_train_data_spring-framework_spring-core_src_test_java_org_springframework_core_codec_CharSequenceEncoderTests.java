<METHOD_START> @ Before public void void ( ) { this . org.springframework.core.codec.CharSequenceEncoder = CharSequenceEncoder . textPlainOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.core.codec.CharSequenceEncoder . canEncode ( ResolvableType . forClass ( java.lang.String .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertTrue ( this . org.springframework.core.codec.CharSequenceEncoder . canEncode ( ResolvableType . forClass ( java.lang.StringBuilder .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertTrue ( this . org.springframework.core.codec.CharSequenceEncoder . canEncode ( ResolvableType . forClass ( java.lang.StringBuffer .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertFalse ( this . org.springframework.core.codec.CharSequenceEncoder . canEncode ( ResolvableType . forClass ( java.lang.Integer .class ) , MimeTypeUtils . TEXT_PLAIN ) ) ; assertFalse ( this . org.springframework.core.codec.CharSequenceEncoder . canEncode ( ResolvableType . forClass ( java.lang.String .class ) , MimeTypeUtils . APPLICATION_JSON ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.core.codec.Flux<java.lang.String> = Flux . just ( STRING ) ; Flux < DataBuffer > org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> = Flux . from ( this . org.springframework.core.codec.CharSequenceEncoder . encode ( org.springframework.core.codec.Flux<java.lang.String> , this . bufferFactory , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; StepVerifier . create ( org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.StringBuilder > org.springframework.core.codec.Flux<java.lang.StringBuilder> = Flux . just ( new java.lang.StringBuilder ( STRING ) ) ; Flux < DataBuffer > org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> = Flux . from ( this . org.springframework.core.codec.CharSequenceEncoder . encode ( org.springframework.core.codec.Flux<java.lang.StringBuilder> , this . bufferFactory , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; StepVerifier . create ( org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
