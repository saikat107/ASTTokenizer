<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = StringUtils . trimAllWhitespace ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = StringUtils . trimAllWhitespace ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = StringUtils . trimAllWhitespace ( BeanFactoryUtils . originalBeanName ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.ClassNotFoundException , java.lang.NoSuchFieldException { if ( this . java.lang.Class<> != null && this . java.lang.Object != null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . java.lang.Class<> == null && this . java.lang.Object == null ) { if ( this . java.lang.String != null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . java.lang.String == null ) { this . java.lang.String = this . java.lang.String ; } int int = this . java.lang.String . int ( '.' ) ; if ( int == - NUMBER || int == this . java.lang.String . int ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } java.lang.String java.lang.String = this . java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = this . java.lang.String . java.lang.String ( int + NUMBER ) ; this . java.lang.Class<?> = ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; this . java.lang.String = java.lang.String ; } else if ( this . java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = ( this . java.lang.Object != null ) ? this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : this . java.lang.Class<> ; this . java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.IllegalAccessException { if ( this . java.lang.reflect.Field == null ) { throw new FactoryBeanNotInitializedException ( ) ; } ReflectionUtils . makeAccessible ( this . java.lang.reflect.Field ) ; if ( this . java.lang.Object != null ) { return this . java.lang.reflect.Field . java.lang.Object ( this . java.lang.Object ) ; } else { return this . java.lang.reflect.Field . java.lang.Object ( null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( this . java.lang.reflect.Field != null ? this . java.lang.reflect.Field . java.lang.Class<?> ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
