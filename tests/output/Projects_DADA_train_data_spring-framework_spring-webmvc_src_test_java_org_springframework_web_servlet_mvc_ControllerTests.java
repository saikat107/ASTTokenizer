<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ParameterizableViewController org.springframework.web.servlet.mvc.ParameterizableViewController = new ParameterizableViewController ( ) ; org.springframework.web.servlet.mvc.ParameterizableViewController . setViewName ( java.lang.String ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = org.springframework.web.servlet.mvc.ParameterizableViewController . handleRequest ( new MockHttpServletRequest ( STRING , STRING ) , new MockHttpServletResponse ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . size ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) . equals ( java.lang.String ) ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.ParameterizableViewController . getViewName ( ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletForwardingController org.springframework.web.servlet.mvc.ServletForwardingController = new ServletForwardingController ( ) ; org.springframework.web.servlet.mvc.ServletForwardingController . setServletName ( STRING ) ; void ( org.springframework.web.servlet.mvc.ServletForwardingController , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletForwardingController org.springframework.web.servlet.mvc.ServletForwardingController = new ServletForwardingController ( ) ; org.springframework.web.servlet.mvc.ServletForwardingController . setServletName ( STRING ) ; void ( org.springframework.web.servlet.mvc.ServletForwardingController , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletForwardingController org.springframework.web.servlet.mvc.ServletForwardingController = new ServletForwardingController ( ) ; org.springframework.web.servlet.mvc.ServletForwardingController . setBeanName ( STRING ) ; void ( org.springframework.web.servlet.mvc.ServletForwardingController , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( ServletForwardingController org.springframework.web.servlet.mvc.ServletForwardingController , boolean boolean )			throws java.lang.Exception { HttpServletRequest org.springframework.web.servlet.mvc.HttpServletRequest = mock ( HttpServletRequest .class ) ; HttpServletResponse org.springframework.web.servlet.mvc.HttpServletResponse = mock ( HttpServletResponse .class ) ; ServletContext org.springframework.web.servlet.mvc.ServletContext = mock ( ServletContext .class ) ; RequestDispatcher org.springframework.web.servlet.mvc.RequestDispatcher = mock ( RequestDispatcher .class ) ; given ( org.springframework.web.servlet.mvc.HttpServletRequest . getMethod ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.mvc.ServletContext . getNamedDispatcher ( STRING ) ) . willReturn ( org.springframework.web.servlet.mvc.RequestDispatcher ) ; if ( boolean ) { given ( org.springframework.web.servlet.mvc.HttpServletRequest . getAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( STRING ) ; } else { given ( org.springframework.web.servlet.mvc.HttpServletRequest . getAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; } StaticWebApplicationContext org.springframework.web.servlet.mvc.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.mvc.ServletContext ) ; org.springframework.web.servlet.mvc.ServletForwardingController . setApplicationContext ( org.springframework.web.servlet.mvc.StaticWebApplicationContext ) ; assertNull ( org.springframework.web.servlet.mvc.ServletForwardingController . handleRequest ( org.springframework.web.servlet.mvc.HttpServletRequest , org.springframework.web.servlet.mvc.HttpServletResponse ) ) ; if ( boolean ) { verify ( org.springframework.web.servlet.mvc.RequestDispatcher ) . include ( org.springframework.web.servlet.mvc.HttpServletRequest , org.springframework.web.servlet.mvc.HttpServletResponse ) ; } else { verify ( org.springframework.web.servlet.mvc.RequestDispatcher ) . forward ( org.springframework.web.servlet.mvc.HttpServletRequest , org.springframework.web.servlet.mvc.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.servlet.mvc.HttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HttpServletResponse org.springframework.web.servlet.mvc.HttpServletResponse = new MockHttpServletResponse ( ) ; ServletWrappingController org.springframework.web.servlet.mvc.ServletWrappingController = new ServletWrappingController ( ) ; org.springframework.web.servlet.mvc.ServletWrappingController . setServletClass ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet .class ) ; org.springframework.web.servlet.mvc.ServletWrappingController . setServletName ( STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.mvc.ServletWrappingController . setInitParameters ( java.util.Properties ) ; org.springframework.web.servlet.mvc.ServletWrappingController . afterPropertiesSet ( ) ; assertNotNull ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletConfig ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletConfig . getServletName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletConfig . getInitParameter ( STRING ) ) ; assertNull ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletRequest ) ; assertFalse ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . boolean ) ; assertNull ( org.springframework.web.servlet.mvc.ServletWrappingController . handleRequest ( org.springframework.web.servlet.mvc.HttpServletRequest , org.springframework.web.servlet.mvc.HttpServletResponse ) ) ; assertEquals ( org.springframework.web.servlet.mvc.HttpServletRequest , org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletRequest ) ; assertEquals ( org.springframework.web.servlet.mvc.HttpServletResponse , org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletResponse ) ; assertFalse ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . boolean ) ; org.springframework.web.servlet.mvc.ServletWrappingController . destroy ( ) ; assertTrue ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.servlet.mvc.HttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HttpServletResponse org.springframework.web.servlet.mvc.HttpServletResponse = new MockHttpServletResponse ( ) ; ServletWrappingController org.springframework.web.servlet.mvc.ServletWrappingController = new ServletWrappingController ( ) ; org.springframework.web.servlet.mvc.ServletWrappingController . setServletClass ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet .class ) ; org.springframework.web.servlet.mvc.ServletWrappingController . setBeanName ( STRING ) ; org.springframework.web.servlet.mvc.ServletWrappingController . afterPropertiesSet ( ) ; assertNotNull ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletConfig ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletConfig . getServletName ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletRequest ) ; assertFalse ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . boolean ) ; assertNull ( org.springframework.web.servlet.mvc.ServletWrappingController . handleRequest ( org.springframework.web.servlet.mvc.HttpServletRequest , org.springframework.web.servlet.mvc.HttpServletResponse ) ) ; assertEquals ( org.springframework.web.servlet.mvc.HttpServletRequest , org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletRequest ) ; assertEquals ( org.springframework.web.servlet.mvc.HttpServletResponse , org.springframework.web.servlet.mvc.ControllerTests.TestServlet . org.springframework.web.servlet.mvc.ServletResponse ) ; assertFalse ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . boolean ) ; org.springframework.web.servlet.mvc.ServletWrappingController . destroy ( ) ; assertTrue ( org.springframework.web.servlet.mvc.ControllerTests.TestServlet . boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { org.springframework.web.servlet.mvc.ServletConfig = null ; org.springframework.web.servlet.mvc.ServletRequest = null ; org.springframework.web.servlet.mvc.ServletResponse = null ; boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletConfig org.springframework.web.servlet.mvc.ServletConfig ) { org.springframework.web.servlet.mvc.ServletConfig = org.springframework.web.servlet.mvc.ServletConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.ServletConfig org.springframework.web.servlet.mvc.ServletConfig ( ) { return org.springframework.web.servlet.mvc.ServletConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.mvc.ServletRequest , ServletResponse org.springframework.web.servlet.mvc.ServletResponse ) { org.springframework.web.servlet.mvc.ServletRequest = org.springframework.web.servlet.mvc.ServletRequest ; org.springframework.web.servlet.mvc.ServletResponse = org.springframework.web.servlet.mvc.ServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = true ; }  <METHOD_END>
