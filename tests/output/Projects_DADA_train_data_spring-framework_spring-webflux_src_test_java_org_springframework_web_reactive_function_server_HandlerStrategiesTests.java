<METHOD_START> @ Test public void void ( ) { HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies = HandlerStrategies . empty ( ) . build ( ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.reactive.function.server.HandlerStrategies . messageReaders ( ) . get ( ) . findFirst ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) . get ( ) . findFirst ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.reactive.function.server.HandlerStrategies . viewResolvers ( ) . get ( ) . findFirst ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpMessageReader < ? > org.springframework.web.reactive.function.server.HttpMessageReader<?> = new org.springframework.web.reactive.function.server.HandlerStrategiesTests.DummyMessageReader ( ) ; HttpMessageWriter < ? > org.springframework.web.reactive.function.server.HttpMessageWriter<?> = new org.springframework.web.reactive.function.server.HandlerStrategiesTests.DummyMessageWriter ( ) ; HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies = HandlerStrategies . empty ( ) . messageReader ( org.springframework.web.reactive.function.server.HttpMessageReader<> ) . messageWriter ( org.springframework.web.reactive.function.server.HttpMessageWriter<> ) . build ( ) ; assertEquals ( NUMBER , ( ( java.lang.Long ) org.springframework.web.reactive.function.server.HandlerStrategies . messageReaders ( ) . get ( ) . count ( ) ) . long ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.HttpMessageReader<> ) , org.springframework.web.reactive.function.server.HandlerStrategies . messageReaders ( ) . get ( ) . findFirst ( ) ) ; assertEquals ( NUMBER , ( ( java.lang.Long ) org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) . get ( ) . count ( ) ) . long ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.HttpMessageWriter<> ) , org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) . get ( ) . findFirst ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.reactive.function.server.HandlerStrategies . viewResolvers ( ) . get ( ) . findFirst ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.web.reactive.function.server.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.web.reactive.function.server.StaticApplicationContext . registerSingleton ( STRING , org.springframework.web.reactive.function.server.HandlerStrategiesTests.DummyMessageWriter .class ) ; org.springframework.web.reactive.function.server.StaticApplicationContext . registerSingleton ( STRING , org.springframework.web.reactive.function.server.HandlerStrategiesTests.DummyMessageReader .class ) ; org.springframework.web.reactive.function.server.StaticApplicationContext . refresh ( ) ; HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies = HandlerStrategies . of ( org.springframework.web.reactive.function.server.StaticApplicationContext ) ; assertTrue ( org.springframework.web.reactive.function.server.HandlerStrategies . messageReaders ( ) . get ( ) . allMatch ( r -> r instanceof DummyMessageReader ) ) ; assertTrue ( org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) . get ( ) . allMatch ( r -> r instanceof DummyMessageWriter ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.web.reactive.function.server.ResolvableType , MediaType org.springframework.web.reactive.function.server.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.server.MediaType> ( ) { return java.util.Collections . java.util.List<org.springframework.web.reactive.function.server.MediaType> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> ( Publisher < ? > org.springframework.web.reactive.function.server.Publisher<?> , ResolvableType org.springframework.web.reactive.function.server.ResolvableType , MediaType org.springframework.web.reactive.function.server.MediaType , ReactiveHttpOutputMessage org.springframework.web.reactive.function.server.ReactiveHttpOutputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.web.reactive.function.server.ResolvableType , MediaType org.springframework.web.reactive.function.server.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.function.server.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.function.server.MediaType> ( ) { return java.util.Collections . java.util.List<org.springframework.web.reactive.function.server.MediaType> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Flux<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.function.server.Flux<java.lang.Object> ( ResolvableType org.springframework.web.reactive.function.server.ResolvableType , ReactiveHttpInputMessage org.springframework.web.reactive.function.server.ReactiveHttpInputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return Flux . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.function.server.Mono<java.lang.Object> ( ResolvableType org.springframework.web.reactive.function.server.ResolvableType , ReactiveHttpInputMessage org.springframework.web.reactive.function.server.ReactiveHttpInputMessage , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return Mono . empty ( ) ; }  <METHOD_END>
