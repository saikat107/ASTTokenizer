<METHOD_START> private void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.util.Optional<java.lang.reflect.Field> = java.util.Optional . java.util.Optional ( ReflectionUtils . findField ( java.lang.Class<> , org.springframework.data.auditing.AnnotationFieldFilter ) ) ; this . java.util.Optional<java.lang.reflect.Field> = java.util.Optional . java.util.Optional ( ReflectionUtils . findField ( java.lang.Class<> , org.springframework.data.auditing.AnnotationFieldFilter ) ) ; this . java.util.Optional<java.lang.reflect.Field> = java.util.Optional . java.util.Optional ( ReflectionUtils . findField ( java.lang.Class<> , org.springframework.data.auditing.AnnotationFieldFilter ) ) ; this . java.util.Optional<java.lang.reflect.Field> = java.util.Optional . java.util.Optional ( ReflectionUtils . findField ( java.lang.Class<> , org.springframework.data.auditing.AnnotationFieldFilter ) ) ; void ( java.util.Optional<java.lang.reflect.Field> ) ; void ( java.util.Optional<java.lang.reflect.Field> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ) { java.util.Optional<java.lang.reflect.Field> . void ( java.lang.reflect.Field -> { if ( java.util.List<java.lang.String> . boolean ( java.lang.reflect.Field . java.lang.Class<?> ( ) . java.lang.String ( ) ) ) { return; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Field . java.lang.Class<?> ( ) ; if ( Jsr310Converters . supports ( java.lang.Class<> ) || ThreeTenBackPortConverters . supports ( java.lang.Class<> ) ) { return; } throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> , java.util.List<java.lang.String> ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.auditing.AnnotationAuditingMetadata org.springframework.data.auditing.AnnotationAuditingMetadata ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.auditing.AnnotationAuditingMetadata> . org.springframework.data.auditing.AnnotationAuditingMetadata ( java.lang.Class<> , org.springframework.data.auditing.AnnotationAuditingMetadata ::new ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return Optionals . isAnyPresent ( java.util.Optional<java.lang.reflect.Field> , java.util.Optional<java.lang.reflect.Field> , java.util.Optional<java.lang.reflect.Field> , java.util.Optional<java.lang.reflect.Field> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ( ) { return java.util.Optional<java.lang.reflect.Field> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ( ) { return java.util.Optional<java.lang.reflect.Field> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ( ) { return java.util.Optional<java.lang.reflect.Field> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ( ) { return java.util.Optional<java.lang.reflect.Field> ; }  <METHOD_END>
