<METHOD_START> @ java.lang.Override protected org.springframework.http.client.ClientHttpRequestFactory org.springframework.http.client.ClientHttpRequestFactory ( ) { return new HttpComponentsClientHttpRequestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) java.lang.Exception { super. httpMethods ( ) ; assertHttpMethod ( STRING , HttpMethod . PATCH ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpClient org.springframework.http.client.HttpClient = HttpClientBuilder . create ( ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.http.client.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.http.client.HttpClient ) ; org.springframework.http.client.HttpComponentsClientHttpRequestFactory . setConnectTimeout ( NUMBER ) ; org.springframework.http.client.HttpComponentsClientHttpRequestFactory . setConnectionRequestTimeout ( NUMBER ) ; org.springframework.http.client.HttpComponentsClientHttpRequestFactory . setReadTimeout ( NUMBER ) ; java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; HttpComponentsClientHttpRequest org.springframework.http.client.HttpComponentsClientHttpRequest = ( HttpComponentsClientHttpRequest ) org.springframework.http.client.HttpComponentsClientHttpRequestFactory . createRequest ( java.net.URI , HttpMethod . GET ) ; java.lang.Object java.lang.Object = org.springframework.http.client.HttpComponentsClientHttpRequest . getHttpContext ( ) . getAttribute ( HttpClientContext . REQUEST_CONFIG ) ; assertNotNull ( STRING , java.lang.Object ) ; assertTrue ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , RequestConfig .class . boolean ( java.lang.Object ) ) ; RequestConfig org.springframework.http.client.RequestConfig = ( RequestConfig ) java.lang.Object ; assertEquals ( STRING , NUMBER , org.springframework.http.client.RequestConfig . getConnectTimeout ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.http.client.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.http.client.RequestConfig . getSocketTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestConfig org.springframework.http.client.RequestConfig = RequestConfig . custom ( ) . setConnectTimeout ( NUMBER ) . build ( ) ; CloseableHttpClient org.springframework.http.client.CloseableHttpClient = mock ( CloseableHttpClient .class , withSettings ( ) . extraInterfaces ( Configurable .class ) ) ; Configurable org.springframework.http.client.Configurable = ( Configurable ) org.springframework.http.client.CloseableHttpClient ; when ( org.springframework.http.client.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.http.client.RequestConfig ) ; HttpComponentsClientHttpRequestFactory org.springframework.http.client.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.http.client.CloseableHttpClient ) ; assertSame ( STRING , org.springframework.http.client.RequestConfig , org.springframework.http.client.RequestConfig ( org.springframework.http.client.HttpComponentsClientHttpRequestFactory ) ) ; org.springframework.http.client.HttpComponentsClientHttpRequestFactory . setConnectionRequestTimeout ( NUMBER ) ; RequestConfig org.springframework.http.client.RequestConfig = org.springframework.http.client.RequestConfig ( org.springframework.http.client.HttpComponentsClientHttpRequestFactory ) ; assertNotNull ( org.springframework.http.client.RequestConfig ) ; assertEquals ( NUMBER , org.springframework.http.client.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.http.client.RequestConfig . getConnectTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestConfig org.springframework.http.client.RequestConfig = RequestConfig . custom ( ) . setConnectTimeout ( NUMBER ) . setConnectionRequestTimeout ( NUMBER ) . build ( ) ; CloseableHttpClient org.springframework.http.client.CloseableHttpClient = mock ( CloseableHttpClient .class , withSettings ( ) . extraInterfaces ( Configurable .class ) ) ; Configurable org.springframework.http.client.Configurable = ( Configurable ) org.springframework.http.client.CloseableHttpClient ; when ( org.springframework.http.client.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.http.client.RequestConfig ) ; HttpComponentsClientHttpRequestFactory org.springframework.http.client.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.http.client.CloseableHttpClient ) ; org.springframework.http.client.HttpComponentsClientHttpRequestFactory . setConnectTimeout ( NUMBER ) ; RequestConfig org.springframework.http.client.RequestConfig = org.springframework.http.client.RequestConfig ( org.springframework.http.client.HttpComponentsClientHttpRequestFactory ) ; assertEquals ( NUMBER , org.springframework.http.client.RequestConfig . getConnectTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.http.client.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( - NUMBER , org.springframework.http.client.RequestConfig . getSocketTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestConfig org.springframework.http.client.RequestConfig = RequestConfig . custom ( ) . setSocketTimeout ( NUMBER ) . build ( ) ; final CloseableHttpClient org.springframework.http.client.CloseableHttpClient = mock ( CloseableHttpClient .class , withSettings ( ) . extraInterfaces ( Configurable .class ) ) ; Configurable org.springframework.http.client.Configurable = ( Configurable ) org.springframework.http.client.CloseableHttpClient ; when ( org.springframework.http.client.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.http.client.RequestConfig ) ; HttpComponentsClientHttpRequestFactory org.springframework.http.client.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( ) { @ java.lang.Override public org.springframework.http.client.HttpClient org.springframework.http.client.HttpClient ( ) { return org.springframework.http.client.CloseableHttpClient ; } } ; org.springframework.http.client.HttpComponentsClientHttpRequestFactory . setReadTimeout ( NUMBER ) ; RequestConfig org.springframework.http.client.RequestConfig = org.springframework.http.client.RequestConfig ( org.springframework.http.client.HttpComponentsClientHttpRequestFactory ) ; assertEquals ( - NUMBER , org.springframework.http.client.RequestConfig . getConnectTimeout ( ) ) ; assertEquals ( - NUMBER , org.springframework.http.client.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.http.client.RequestConfig . getSocketTimeout ( ) ) ; RequestConfig org.springframework.http.client.RequestConfig = RequestConfig . custom ( ) . setConnectTimeout ( NUMBER ) . build ( ) ; when ( org.springframework.http.client.Configurable . getConfig ( ) ) . thenReturn ( org.springframework.http.client.RequestConfig ) ; org.springframework.http.client.HttpComponentsClientHttpRequestFactory . setReadTimeout ( NUMBER ) ; RequestConfig org.springframework.http.client.RequestConfig = org.springframework.http.client.RequestConfig ( org.springframework.http.client.HttpComponentsClientHttpRequestFactory ) ; assertEquals ( NUMBER , org.springframework.http.client.RequestConfig . getConnectTimeout ( ) ) ; assertEquals ( - NUMBER , org.springframework.http.client.RequestConfig . getConnectionRequestTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.http.client.RequestConfig . getSocketTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpClient org.springframework.http.client.HttpClient ( ) { return org.springframework.http.client.CloseableHttpClient ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.client.RequestConfig org.springframework.http.client.RequestConfig ( HttpComponentsClientHttpRequestFactory org.springframework.http.client.HttpComponentsClientHttpRequestFactory ) throws java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; HttpComponentsClientHttpRequest org.springframework.http.client.HttpComponentsClientHttpRequest = ( HttpComponentsClientHttpRequest ) org.springframework.http.client.HttpComponentsClientHttpRequestFactory . createRequest ( java.net.URI , HttpMethod . GET ) ; return ( RequestConfig ) org.springframework.http.client.HttpComponentsClientHttpRequest . getHttpContext ( ) . getAttribute ( HttpClientContext . REQUEST_CONFIG ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; void ( java.net.URI , HttpMethod . GET , false ) ; void ( java.net.URI , HttpMethod . HEAD , false ) ; void ( java.net.URI , HttpMethod . OPTIONS , false ) ; void ( java.net.URI , HttpMethod . TRACE , false ) ; void ( java.net.URI , HttpMethod . PUT , true ) ; void ( java.net.URI , HttpMethod . POST , true ) ; void ( java.net.URI , HttpMethod . PATCH , true ) ; void ( java.net.URI , HttpMethod . DELETE , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod , boolean boolean ) { HttpUriRequest org.springframework.http.client.HttpUriRequest = ( ( HttpComponentsClientHttpRequestFactory ) this . factory ) . createHttpUriRequest ( org.springframework.http.client.HttpMethod , java.net.URI ) ; assertEquals ( boolean , org.springframework.http.client.HttpUriRequest instanceof HttpEntityEnclosingRequest ) ; }  <METHOD_END>
