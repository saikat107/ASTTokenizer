<METHOD_START> public void ( SubscribableChannel org.springframework.web.socket.messaging.SubscribableChannel , MessageChannel org.springframework.web.socket.messaging.MessageChannel , SimpMessageSendingOperations org.springframework.web.socket.messaging.SimpMessageSendingOperations ) { super( org.springframework.web.socket.messaging.SubscribableChannel , org.springframework.web.socket.messaging.MessageChannel , org.springframework.web.socket.messaging.SimpMessageSendingOperations ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; super. afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( getApplicationContext ( ) == null ) { return; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getApplicationContext ( ) ) ; } java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> < ControllerAdviceBean > java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> = ControllerAdviceBean . findAnnotatedBeans ( getApplicationContext ( ) ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> ) ; void ( org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler.MessagingControllerAdviceBean . java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> ( java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> < MessagingAdviceBean > java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> ) { if ( java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> == null ) { return; } for ( MessagingAdviceBean org.springframework.web.socket.messaging.MessagingAdviceBean : java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.socket.messaging.MessagingAdviceBean . getBeanType ( ) ; AnnotationExceptionHandlerMethodResolver org.springframework.web.socket.messaging.AnnotationExceptionHandlerMethodResolver = new AnnotationExceptionHandlerMethodResolver ( java.lang.Class<> ) ; if ( org.springframework.web.socket.messaging.AnnotationExceptionHandlerMethodResolver . hasExceptionMappings ( ) ) { registerExceptionHandlerAdvice ( org.springframework.web.socket.messaging.MessagingAdviceBean , org.springframework.web.socket.messaging.AnnotationExceptionHandlerMethodResolver ) ; logger . info ( STRING + org.springframework.web.socket.messaging.MessagingAdviceBean ) ; } } }  <METHOD_END>
<METHOD_START> private void ( ControllerAdviceBean org.springframework.web.socket.messaging.ControllerAdviceBean ) { this . org.springframework.web.socket.messaging.ControllerAdviceBean = org.springframework.web.socket.messaging.ControllerAdviceBean ; }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> < MessagingAdviceBean > java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> ( java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> < ControllerAdviceBean > java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> ) { java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> < MessagingAdviceBean > java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> . size ( ) ) ; for ( ControllerAdviceBean org.springframework.web.socket.messaging.ControllerAdviceBean : java.util.List<org.springframework.web.socket.messaging.ControllerAdviceBean> ) { java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> . add ( new org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler.MessagingControllerAdviceBean ( org.springframework.web.socket.messaging.ControllerAdviceBean ) ) ; } return java.util.List<org.springframework.web.socket.messaging.MessagingAdviceBean> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . org.springframework.web.socket.messaging.ControllerAdviceBean . getBeanType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.web.socket.messaging.ControllerAdviceBean . resolveBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . org.springframework.web.socket.messaging.ControllerAdviceBean . isApplicableToBeanType ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.socket.messaging.ControllerAdviceBean . getOrder ( ) ; }  <METHOD_END>
