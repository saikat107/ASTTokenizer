<METHOD_START> @ Before public void void ( ) { org.springframework.data.auditing.AuditingHandler = org.springframework.data.auditing.AuditingHandler ( ) ; org.springframework.data.auditing.AuditedUser = new AuditedUser ( ) ; org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> = mock ( AuditorAware .class ) ; when ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> . getCurrentAuditor ( ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.auditing.AuditedUser ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.auditing.AuditingHandler org.springframework.data.auditing.AuditingHandler ( ) { return new AuditingHandler ( new PersistentEntities ( java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.auditing.AuditingHandler . markCreated ( org.springframework.data.auditing.AuditedUser ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedDate ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedDate ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedBy ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedBy ( ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.auditing.AuditingHandler . setAuditorAware ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> ) ; org.springframework.data.auditing.AuditingHandler . markCreated ( org.springframework.data.auditing.AuditedUser ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedDate ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedDate ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedBy ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedBy ( ) ) . isPresent ( ) ; verify ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> ) . getCurrentAuditor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.auditing.AuditingHandler . setAuditorAware ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> ) ; org.springframework.data.auditing.AuditingHandler . setModifyOnCreation ( false ) ; org.springframework.data.auditing.AuditingHandler . markCreated ( org.springframework.data.auditing.AuditedUser ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedDate ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedBy ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedBy ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedDate ( ) ) . isNotPresent ( ) ; verify ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> ) . getCurrentAuditor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AuditedUser org.springframework.data.auditing.AuditedUser = new AuditedUser ( ) ; audited . id = NUMBER ; org.springframework.data.auditing.AuditingHandler . setAuditorAware ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> ) ; org.springframework.data.auditing.AuditingHandler . markModified ( org.springframework.data.auditing.AuditedUser ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedBy ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedDate ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedBy ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedDate ( ) ) . isPresent ( ) ; verify ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> ) . getCurrentAuditor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.auditing.AuditingHandler . setDateTimeForNow ( false ) ; org.springframework.data.auditing.AuditingHandler . setAuditorAware ( org.springframework.data.auditing.AuditorAware<org.springframework.data.auditing.AuditedUser> ) ; org.springframework.data.auditing.AuditingHandler . markCreated ( org.springframework.data.auditing.AuditedUser ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedBy ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getCreatedDate ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedBy ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.auditing.AuditedUser . getLastModifiedDate ( ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTimeProvider org.springframework.data.auditing.DateTimeProvider = mock ( DateTimeProvider .class ) ; doReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) . when ( org.springframework.data.auditing.DateTimeProvider ) . getNow ( ) ; org.springframework.data.auditing.AuditingHandler . setDateTimeProvider ( org.springframework.data.auditing.DateTimeProvider ) ; org.springframework.data.auditing.AuditingHandler . markCreated ( org.springframework.data.auditing.AuditedUser ) ; verify ( org.springframework.data.auditing.DateTimeProvider , times ( NUMBER ) ) . getNow ( ) ; }  <METHOD_END>
