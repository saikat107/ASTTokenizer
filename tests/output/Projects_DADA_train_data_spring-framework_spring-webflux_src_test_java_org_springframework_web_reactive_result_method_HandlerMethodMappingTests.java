<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> = new org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandlerMethodMapping ( ) ; this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler = new org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler ( ) ; this . java.lang.reflect.Method = org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler . java.lang.Class<? extends org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler> ( ) . java.lang.reflect.Method ( STRING ) ; this . java.lang.reflect.Method = org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler . java.lang.Class<? extends org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler> ( ) . java.lang.reflect.Method ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getHandler ( MockServerHttpRequest . get ( java.lang.String ) . toExchange ( ) ) ; assertEquals ( this . java.lang.reflect.Method , ( ( HandlerMethod ) org.springframework.web.reactive.result.method.Mono<java.lang.Object> . block ( ) ) . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getHandler ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ; assertEquals ( this . java.lang.reflect.Method , ( ( HandlerMethod ) org.springframework.web.reactive.result.method.Mono<java.lang.Object> . block ( ) ) . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getHandler ( MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) . expectError ( java.lang.IllegalStateException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getMappingsByUrl ( java.lang.String ) ; assertNotNull ( java.util.List<java.lang.String> ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler = new org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler ( ) ; org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler = new org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler ( ) ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getMappingsByUrl ( java.lang.String ) ; assertNotNull ( java.util.List<java.lang.String> ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.reactive.result.method.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getHandler ( MockServerHttpRequest . get ( java.lang.String ) . toExchange ( ) ) ; assertNotNull ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> . block ( ) ) ; this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . unregisterMapping ( java.lang.String ) ; org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getHandler ( MockServerHttpRequest . get ( java.lang.String ) . toExchange ( ) ) ; assertNull ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> . block ( ) ) ; assertNull ( this . org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getMappingsByUrl ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; return java.lang.String . boolean ( STRING ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { return ( this . org.springframework.web.reactive.result.method.PathMatcher . isPattern ( java.lang.String ) ? java.util.Collections . java.util.Set<java.lang.String> ( ) : java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.method.ServerWebExchange . getRequest ( ) . getURI ( ) . getPath ( ) ; return ( this . org.springframework.web.reactive.result.method.PathMatcher . match ( java.lang.String , java.lang.String ) ? java.lang.String : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> ( ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.method.ServerWebExchange . getRequest ( ) . getURI ( ) . getPath ( ) ; return this . org.springframework.web.reactive.result.method.PathMatcher . getPatternComparator ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ java.lang.SuppressWarnings ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping @ java.lang.SuppressWarnings ( STRING ) public void void ( ) {		}  <METHOD_END>
