<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertThat ( this . org.springframework.boot.test.util.ConfigurableEnvironment . containsProperty ( java.lang.String ) ) . isFalse ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.test.util.ConfigurableEnvironment , java.lang.String ) ; assertThat ( this . org.springframework.boot.test.util.ConfigurableEnvironment . containsProperty ( java.lang.String ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.test.util.ConfigurableEnvironment . getProperty ( java.lang.String ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( this . org.springframework.boot.test.util.ConfigurableEnvironment . containsProperty ( java.lang.String ) ) . isFalse ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.test.util.ConfigurableEnvironment , java.lang.String + java.lang.String + java.lang.String ) ; assertThat ( this . org.springframework.boot.test.util.ConfigurableEnvironment . getProperty ( java.lang.String ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MapPropertySource org.springframework.boot.test.util.MapPropertySource = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.test.util.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( org.springframework.boot.test.util.MapPropertySource ) ; assertThat ( this . org.springframework.boot.test.util.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.test.util.ConfigurableEnvironment , STRING ) ; assertThat ( this . org.springframework.boot.test.util.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
