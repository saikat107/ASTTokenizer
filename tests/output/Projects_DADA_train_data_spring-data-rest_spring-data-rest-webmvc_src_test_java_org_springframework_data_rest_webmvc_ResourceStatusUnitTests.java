<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.webmvc.ResourceStatus = ResourceStatus . of ( org.springframework.data.rest.webmvc.HttpHeadersPreparer ) ; KeyValueMappingContext < ? , ? > org.springframework.data.rest.webmvc.KeyValueMappingContext<?,?> = new KeyValueMappingContext <> ( ) ; this . org.springframework.data.rest.webmvc.KeyValuePersistentEntity<?,?> = org.springframework.data.rest.webmvc.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.ResourceStatusUnitTests.Sample .class ) ; doReturn ( new HttpHeaders ( ) ) . when ( org.springframework.data.rest.webmvc.HttpHeadersPreparer ) . prepareHeaders ( eq ( org.springframework.data.rest.webmvc.KeyValuePersistentEntity<,> ) , any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ResourceStatus . of ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.rest.webmvc.ResourceStatus . getStatusAndHeaders ( new HttpHeaders ( ) , new org.springframework.data.rest.webmvc.ResourceStatusUnitTests.Sample ( NUMBER ) , org.springframework.data.rest.webmvc.KeyValuePersistentEntity<,> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders = new HttpHeaders ( ) ; org.springframework.data.rest.webmvc.HttpHeaders . setIfNoneMatch ( STRING ) ; void ( org.springframework.data.rest.webmvc.ResourceStatus . getStatusAndHeaders ( org.springframework.data.rest.webmvc.HttpHeaders , new org.springframework.data.rest.webmvc.ResourceStatusUnitTests.Sample ( NUMBER ) , org.springframework.data.rest.webmvc.KeyValuePersistentEntity<,> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( true ) . when ( org.springframework.data.rest.webmvc.HttpHeadersPreparer ) . isObjectStillValid ( any ( ) , any ( HttpHeaders .class ) ) ; void ( org.springframework.data.rest.webmvc.ResourceStatus . getStatusAndHeaders ( new HttpHeaders ( ) , new org.springframework.data.rest.webmvc.ResourceStatusUnitTests.Sample ( NUMBER ) , org.springframework.data.rest.webmvc.KeyValuePersistentEntity<,> ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( StatusAndHeaders org.springframework.data.rest.webmvc.StatusAndHeaders ) { assertThat ( org.springframework.data.rest.webmvc.StatusAndHeaders . isModified ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.StatusAndHeaders . toResponseEntity ( java.util.function.Supplier<org.springframework.data.rest.webmvc.PersistentEntityResource> ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; verify ( java.util.function.Supplier<org.springframework.data.rest.webmvc.PersistentEntityResource> ) . get ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( StatusAndHeaders org.springframework.data.rest.webmvc.StatusAndHeaders ) { assertThat ( org.springframework.data.rest.webmvc.StatusAndHeaders . isModified ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.rest.webmvc.StatusAndHeaders . toResponseEntity ( java.util.function.Supplier<org.springframework.data.rest.webmvc.PersistentEntityResource> ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus . NOT_MODIFIED ) ; }  <METHOD_END>
