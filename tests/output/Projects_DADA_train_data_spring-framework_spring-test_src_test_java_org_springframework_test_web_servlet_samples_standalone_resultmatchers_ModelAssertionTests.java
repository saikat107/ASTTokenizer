<METHOD_START> @ Before public void void ( ) { org.springframework.test.web.servlet.samples.standalone.resultmatchers.ModelAssertionTests.SampleController org.springframework.test.web.servlet.samples.standalone.resultmatchers.ModelAssertionTests.SampleController = new org.springframework.test.web.servlet.samples.standalone.resultmatchers.ModelAssertionTests.SampleController ( STRING , NUMBER , new Person ( STRING ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc = standaloneSetup ( org.springframework.test.web.servlet.samples.standalone.resultmatchers.ModelAssertionTests.SampleController ) . defaultRequest ( get ( STRING ) ) . alwaysExpect ( status ( ) . isOk ( ) ) . setControllerAdvice ( new org.springframework.test.web.servlet.samples.standalone.resultmatchers.ModelAssertionTests.ModelAttributeAdvice ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( model ( ) . attribute ( STRING , NUMBER ) ) . andExpect ( model ( ) . attribute ( STRING , STRING ) ) . andExpect ( model ( ) . attribute ( STRING , equalTo ( NUMBER ) ) ) . andExpect ( model ( ) . attribute ( STRING , equalTo ( STRING ) ) ) . andExpect ( model ( ) . attribute ( STRING , equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( model ( ) . attributeExists ( STRING , STRING , STRING ) ) . andExpect ( model ( ) . attribute ( STRING , notNullValue ( ) ) ) . andExpect ( model ( ) . attribute ( STRING , nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( model ( ) . attribute ( STRING , equalTo ( NUMBER ) ) ) . andExpect ( model ( ) . attribute ( STRING , allOf ( startsWith ( STRING ) , endsWith ( STRING ) ) ) ) . andExpect ( model ( ) . attribute ( STRING , hasProperty ( STRING , equalTo ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( post ( STRING ) ) . andExpect ( model ( ) . attributeHasErrors ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( model ( ) . hasNoErrors ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object ... java.lang.Object[] ) { this . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( Model org.springframework.test.web.servlet.samples.standalone.resultmatchers.Model ) { for ( java.lang.Object java.lang.Object : this . java.lang.Object[] ) { org.springframework.test.web.servlet.samples.standalone.resultmatchers.Model . addAttribute ( java.lang.Object ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public java.lang.String java.lang.String ( @ Valid Person org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person , BindingResult org.springframework.test.web.servlet.samples.standalone.resultmatchers.BindingResult , Model org.springframework.test.web.servlet.samples.standalone.resultmatchers.Model ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
