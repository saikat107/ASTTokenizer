<METHOD_START> @ Test public void void ( ) org.springframework.boot.logging.logback.JoranException { JoranConfigurator org.springframework.boot.logging.logback.JoranConfigurator = new JoranConfigurator ( ) ; LoggerContext org.springframework.boot.logging.logback.LoggerContext = new LoggerContext ( ) ; org.springframework.boot.logging.logback.JoranConfigurator . setContext ( org.springframework.boot.logging.logback.LoggerContext ) ; org.springframework.boot.logging.logback.JoranConfigurator . doConfigure ( new java.io.File ( STRING ) ) ; Appender < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> = org.springframework.boot.logging.logback.LoggerContext . getLogger ( STRING ) . getAppender ( STRING ) ; assertThat ( org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) . isInstanceOf ( ConsoleAppender .class ) ; Encoder < ? > org.springframework.boot.logging.logback.Encoder<?> = ( ( ConsoleAppender < ? > ) org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) . getEncoder ( ) ; assertThat ( org.springframework.boot.logging.logback.Encoder<> ) . isInstanceOf ( PatternLayoutEncoder .class ) ; assertThat ( ( ( PatternLayoutEncoder ) org.springframework.boot.logging.logback.Encoder<> ) . getPattern ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.logging.logback.JoranException { JoranConfigurator org.springframework.boot.logging.logback.JoranConfigurator = new JoranConfigurator ( ) ; LoggerContext org.springframework.boot.logging.logback.LoggerContext = new LoggerContext ( ) ; org.springframework.boot.logging.logback.JoranConfigurator . setContext ( org.springframework.boot.logging.logback.LoggerContext ) ; org.springframework.boot.logging.logback.JoranConfigurator . doConfigure ( new java.io.File ( STRING ) ) ; Appender < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> = org.springframework.boot.logging.logback.LoggerContext . getLogger ( STRING ) . getAppender ( STRING ) ; assertThat ( org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) . isInstanceOf ( FileAppender .class ) ; Encoder < ? > org.springframework.boot.logging.logback.Encoder<?> = ( ( FileAppender < ? > ) org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) . getEncoder ( ) ; assertThat ( org.springframework.boot.logging.logback.Encoder<> ) . isInstanceOf ( PatternLayoutEncoder .class ) ; assertThat ( ( ( PatternLayoutEncoder ) org.springframework.boot.logging.logback.Encoder<> ) . getPattern ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
