<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.history.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) ; java.util.Map<java.lang.String,org.springframework.integration.history.ConsumerEndpointFactoryBean> < java.lang.String , ConsumerEndpointFactoryBean > java.util.Map<java.lang.String,org.springframework.integration.history.ConsumerEndpointFactoryBean> = org.springframework.integration.history.ConfigurableApplicationContext . getBeansOfType ( ConsumerEndpointFactoryBean .class ) ; for ( ConsumerEndpointFactoryBean org.springframework.integration.history.ConsumerEndpointFactoryBean : java.util.Map<java.lang.String,org.springframework.integration.history.ConsumerEndpointFactoryBean> . values ( ) ) { DirectFieldAccessor org.springframework.integration.history.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.history.ConsumerEndpointFactoryBean ) ; java.lang.String java.lang.String = org.springframework.integration.history.DirectFieldAccessor . getPropertyValue ( STRING ) . getClass ( ) . getName ( ) ; assertFalse ( STRING . boolean ( java.lang.String ) ) ; } org.springframework.integration.history.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.history.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway .class ) ; DirectChannel org.springframework.integration.history.DirectChannel = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.history.MessageHandler = Mockito . spy ( new MessageHandler ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { java.util.Iterator<java.util.Properties> < java.util.Properties > java.util.Iterator<java.util.Properties> = org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) . iterator ( ) ; java.util.Properties java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; } } ) ; org.springframework.integration.history.DirectChannel . subscribe ( org.springframework.integration.history.MessageHandler ) ; Message < ? > org.springframework.integration.history.Message<?> = org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway . org.springframework.integration.history.Message<?> ( STRING ) ; Mockito . verify ( org.springframework.integration.history.MessageHandler , Mockito . times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; assertNotNull ( org.springframework.integration.history.Message<> ) ; org.springframework.integration.history.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { java.util.Iterator<java.util.Properties> < java.util.Properties > java.util.Iterator<java.util.Properties> = org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) . iterator ( ) ; java.util.Properties java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . NAME_PROPERTY ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( MessageHistory . TYPE_PROPERTY ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.history.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway .class ) ; DirectChannel org.springframework.integration.history.DirectChannel = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.history.MessageHandler = Mockito . spy ( new MessageHandler ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { assertNull ( org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; } } ) ; org.springframework.integration.history.DirectChannel . subscribe ( org.springframework.integration.history.MessageHandler ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway . org.springframework.integration.history.Message<?> ( STRING ) ; Mockito . verify ( org.springframework.integration.history.MessageHandler , Mockito . times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.history.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { assertNull ( org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.history.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway .class ) ; DirectChannel org.springframework.integration.history.DirectChannel = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.history.MessageHandler = Mockito . spy ( new MessageHandler ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { java.util.Iterator<java.util.Properties> < java.util.Properties > java.util.Iterator<java.util.Properties> = org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) . iterator ( ) ; assertTrue ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; } } ) ; org.springframework.integration.history.DirectChannel . subscribe ( org.springframework.integration.history.MessageHandler ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway . org.springframework.integration.history.Message<?> ( STRING ) ; Mockito . verify ( org.springframework.integration.history.MessageHandler , Mockito . times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.history.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { java.util.Iterator<java.util.Properties> < java.util.Properties > java.util.Iterator<java.util.Properties> = org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) . iterator ( ) ; assertTrue ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.history.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway .class ) ; DirectChannel org.springframework.integration.history.DirectChannel = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.history.MessageHandler = Mockito . spy ( new MessageHandler ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { java.util.Iterator<java.util.Properties> < java.util.Properties > java.util.Iterator<java.util.Properties> = org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) . iterator ( ) ; assertTrue ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; java.util.Properties java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertTrue ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; java.util.Properties java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertFalse ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; } } ) ; org.springframework.integration.history.DirectChannel . subscribe ( org.springframework.integration.history.MessageHandler ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway . org.springframework.integration.history.Message<?> ( STRING ) ; Mockito . verify ( org.springframework.integration.history.MessageHandler , Mockito . times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.history.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.history.Message<?> ) { java.util.Iterator<java.util.Properties> < java.util.Properties > java.util.Iterator<java.util.Properties> = org.springframework.integration.history.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) . iterator ( ) ; assertTrue ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; java.util.Properties java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertTrue ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; java.util.Properties java.util.Properties = java.util.Iterator<java.util.Properties> . java.util.Properties ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertFalse ( java.util.Iterator<java.util.Properties> . boolean ( ) ) ; MessageChannel org.springframework.integration.history.MessageChannel = ( MessageChannel ) org.springframework.integration.history.Message<> . getHeaders ( ) . getReplyChannel ( ) ; org.springframework.integration.history.MessageChannel . send ( org.springframework.integration.history.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { ConfigurableApplicationContext org.springframework.integration.history.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) ; ConfigurableApplicationContext org.springframework.integration.history.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests .class ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway .class ) ; DirectChannel org.springframework.integration.history.DirectChannel = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.history.DirectChannel . subscribe ( message -> { MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( message ) ; } ) ; org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway .class ) ; DirectChannel org.springframework.integration.history.DirectChannel = org.springframework.integration.history.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.history.DirectChannel . subscribe ( message -> { MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( message ) ; } ) ; StopWatch org.springframework.integration.history.StopWatch = new StopWatch ( ) ; org.springframework.integration.history.StopWatch . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway . org.springframework.integration.history.Message<?> ( STRING ) ; } org.springframework.integration.history.StopWatch . stop ( ) ; org.springframework.integration.history.Log . info ( STRING + org.springframework.integration.history.StopWatch . getTotalTimeSeconds ( ) ) ; org.springframework.integration.history.StopWatch = new StopWatch ( ) ; org.springframework.integration.history.StopWatch . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.history.MessageHistoryIntegrationTests.SampleGateway . org.springframework.integration.history.Message<?> ( STRING ) ; } org.springframework.integration.history.StopWatch . stop ( ) ; org.springframework.integration.history.Log . info ( STRING + org.springframework.integration.history.StopWatch . getTotalTimeSeconds ( ) ) ; org.springframework.integration.history.ConfigurableApplicationContext . close ( ) ; org.springframework.integration.history.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.integration.history.Message<?> < ? > org.springframework.integration.history.Message<?> ( java.lang.String java.lang.String );  <METHOD_END>
