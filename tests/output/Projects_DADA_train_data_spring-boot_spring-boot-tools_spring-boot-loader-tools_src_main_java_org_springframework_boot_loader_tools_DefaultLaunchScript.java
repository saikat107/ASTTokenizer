<METHOD_START> public void ( java.io.File java.io.File , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) throws java.io.IOException { java.lang.String java.lang.String = java.lang.String ( java.io.File ) ; this . java.lang.String = java.lang.String ( java.lang.String , java.util.Map<,> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.io.File java.io.File ) throws java.io.IOException { if ( java.io.File == null ) { return java.lang.String ( java.lang.Class<? extends org.springframework.boot.loader.tools.DefaultLaunchScript> ( ) . java.io.InputStream ( STRING ) ) ; } return java.lang.String ( new java.io.FileInputStream ( java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { try { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; void ( java.io.InputStream , java.io.ByteArrayOutputStream ) ; return new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) , java.nio.charset.Charset ) ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream )			throws java.io.IOException { byte [] byte[] = new byte [ int ] ; int int = - NUMBER ; while ( ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { java.io.OutputStream . void ( byte[] , NUMBER , int ) ; } java.io.OutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( java.util.Map<,> != null && java.util.Map<,> . boolean ( java.lang.String ) ) { java.lang.String = ( java.lang.String ) java.util.Map<,> . get ( java.lang.String ) ; } else { java.lang.String = ( java.lang.String == null ? java.util.regex.Matcher . java.lang.String ( NUMBER ) : java.lang.String . java.lang.String ( NUMBER ) ) ; } java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.lang.String . java.lang.String ( STRING , STRING ) ) ; } java.util.regex.Matcher . java.lang.StringBuffer ( java.lang.StringBuffer ) ; return java.lang.StringBuffer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ) { return this . java.lang.String . byte[] ( java.nio.charset.Charset ) ; }  <METHOD_END>
