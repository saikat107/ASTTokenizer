<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.BeanDefinition org.springframework.web.servlet.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; XmlReaderContext org.springframework.web.servlet.config.XmlReaderContext = org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) ; CompositeComponentDefinition org.springframework.web.servlet.config.CompositeComponentDefinition = new CompositeComponentDefinition ( org.w3c.dom.Element . java.lang.String ( ) , java.lang.Object ) ; org.springframework.web.servlet.config.ParserContext . pushContainingComponent ( org.springframework.web.servlet.config.CompositeComponentDefinition ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element , java.lang.Object , org.springframework.web.servlet.config.ParserContext ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerMapping .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , NUMBER ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.Boolean java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , ! java.lang.Boolean ) ; } void ( org.springframework.web.servlet.config.RootBeanDefinition , org.w3c.dom.Element , org.springframework.web.servlet.config.ParserContext ) ; org.springframework.web.servlet.config.XmlReaderContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = MvcNamespaceUtils . registerCorsConfigurations ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element , java.lang.Object , org.springframework.web.servlet.config.ParserContext ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element , java.lang.Object , org.springframework.web.servlet.config.ParserContext ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ConfigurableWebBindingInitializer .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; ManagedList < ? > org.springframework.web.servlet.config.ManagedList<?> = org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element , java.lang.Object , org.springframework.web.servlet.config.ParserContext ) ; ManagedList < ? > org.springframework.web.servlet.config.ManagedList<?> = org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element , org.springframework.web.servlet.config.ParserContext ) ; ManagedList < ? > org.springframework.web.servlet.config.ManagedList<?> = org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element , org.springframework.web.servlet.config.ParserContext ) ; java.lang.String java.lang.String = java.lang.String ( org.w3c.dom.Element ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element ) ; ManagedList < ? > org.springframework.web.servlet.config.ManagedList<?> = org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element , java.lang.Object , org.springframework.web.servlet.config.ParserContext ) ; ManagedList < ? > org.springframework.web.servlet.config.ManagedList<?> = org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element , java.lang.Object , org.springframework.web.servlet.config.ParserContext ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; void ( org.springframework.web.servlet.config.RootBeanDefinition ) ; void ( org.springframework.web.servlet.config.RootBeanDefinition ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.Boolean java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Boolean ) ; } if ( org.springframework.web.servlet.config.ManagedList<> != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; } if ( org.springframework.web.servlet.config.ManagedList<> != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; } if ( java.lang.String != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.String ) ; } if ( org.springframework.web.servlet.config.RuntimeBeanReference != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; } org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; org.springframework.web.servlet.config.XmlReaderContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; java.lang.String java.lang.String = MvcUriComponentsBuilder . MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.CompositeUriComponentsContributorFactoryBean .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; org.springframework.web.servlet.config.XmlReaderContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ConversionServiceExposingInterceptor .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.RuntimeBeanReference ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( MappedInterceptor .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , ( java.lang.Object ) null ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.RootBeanDefinition ) ; java.lang.String java.lang.String = org.springframework.web.servlet.config.XmlReaderContext . registerWithGeneratedName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ExceptionHandlerExceptionResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , NUMBER ) ; void ( org.springframework.web.servlet.config.RootBeanDefinition ) ; if ( org.springframework.web.servlet.config.ManagedList<> != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; } if ( org.springframework.web.servlet.config.ManagedList<> != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<> ) ; } java.lang.String java.lang.String = org.springframework.web.servlet.config.XmlReaderContext . registerWithGeneratedName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ResponseStatusExceptionResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , NUMBER ) ; java.lang.String java.lang.String = org.springframework.web.servlet.config.XmlReaderContext . registerWithGeneratedName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( DefaultHandlerExceptionResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , NUMBER ) ; java.lang.String java.lang.String = org.springframework.web.servlet.config.XmlReaderContext . registerWithGeneratedName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; MvcNamespaceUtils . registerDefaultComponents ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; org.springframework.web.servlet.config.ParserContext . popAndRegisterContainingComponent ( ) ; return null ; }  <METHOD_END>
<METHOD_START> protected void void ( RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition ) { if ( boolean ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RootBeanDefinition ( JsonViewRequestBodyAdvice .class ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition ) { if ( boolean ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RootBeanDefinition ( JsonViewResponseBodyAdvice .class ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object , ParserContext org.springframework.web.servlet.config.ParserContext ) { RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RuntimeBeanReference = new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } else { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( FormattingConversionServiceFactoryBean .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; java.lang.String java.lang.String = org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.RuntimeBeanReference = new RuntimeBeanReference ( java.lang.String ) ; } return org.springframework.web.servlet.config.RuntimeBeanReference ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object , ParserContext org.springframework.web.servlet.config.ParserContext ) { if ( org.w3c.dom.Element . boolean ( STRING ) ) { return new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } else if ( boolean ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( STRING ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; java.lang.String java.lang.String = org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; return new RuntimeBeanReference ( java.lang.String ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object , ParserContext org.springframework.web.servlet.config.ParserContext ) { RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.servlet.config.RuntimeBeanReference = new RuntimeBeanReference ( java.lang.String ) ; } else { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ContentNegotiationManagerFactoryBean .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.Properties ( ) ) ; java.lang.String java.lang.String = java.lang.String ; org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.RuntimeBeanReference = new RuntimeBeanReference ( java.lang.String ) ; } return org.springframework.web.servlet.config.RuntimeBeanReference ; }  <METHOD_END>
<METHOD_START> private void void ( RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.Boolean java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Boolean ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.Boolean java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Boolean ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { java.lang.Boolean java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.lang.Boolean ) ; } RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = null ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RuntimeBeanReference = new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } org.springframework.web.servlet.config.RuntimeBeanReference = MvcNamespaceUtils . registerUrlPathHelper ( org.springframework.web.servlet.config.RuntimeBeanReference , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = null ; if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RuntimeBeanReference = new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } org.springframework.web.servlet.config.RuntimeBeanReference = MvcNamespaceUtils . registerPathMatcher ( org.springframework.web.servlet.config.RuntimeBeanReference , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; if ( boolean ) { java.util.Properties . java.lang.Object ( STRING , MediaType . APPLICATION_ATOM_XML_VALUE ) ; java.util.Properties . java.lang.Object ( STRING , MediaType . APPLICATION_RSS_XML_VALUE ) ; } if ( boolean || boolean ) { java.util.Properties . java.lang.Object ( STRING , MediaType . APPLICATION_XML_VALUE ) ; } if ( boolean || boolean ) { java.util.Properties . java.lang.Object ( STRING , MediaType . APPLICATION_JSON_VALUE ) ; } if ( boolean ) { java.util.Properties . java.lang.Object ( STRING , STRING ) ; } if ( boolean ) { java.util.Properties . java.lang.Object ( STRING , STRING ) ; } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element ) { if ( org.w3c.dom.Element . boolean ( STRING ) ) { return new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; return ( org.w3c.dom.Element != null ) ? org.w3c.dom.Element . java.lang.String ( STRING ) : null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( org.w3c.dom.Element org.w3c.dom.Element ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { if ( org.w3c.dom.Element . boolean ( STRING ) ) { return new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<?> < ? > org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object , ParserContext org.springframework.web.servlet.config.ParserContext ) { ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> = new ManagedList <> ( ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ) { BeanDefinitionHolder org.springframework.web.servlet.config.BeanDefinitionHolder = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parseBeanDefinitionElement ( org.w3c.dom.Element ) ; org.springframework.web.servlet.config.BeanDefinitionHolder = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . decorateBeanDefinitionIfRequired ( org.w3c.dom.Element , org.springframework.web.servlet.config.BeanDefinitionHolder ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.BeanDefinitionHolder ) ; } } } return org.springframework.web.servlet.config.ManagedList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<?> < ? > org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object , ParserContext org.springframework.web.servlet.config.ParserContext ) { ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> = new ManagedList <> ( ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ) { BeanDefinitionHolder org.springframework.web.servlet.config.BeanDefinitionHolder = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parseBeanDefinitionElement ( org.w3c.dom.Element ) ; org.springframework.web.servlet.config.BeanDefinitionHolder = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . decorateBeanDefinitionIfRequired ( org.w3c.dom.Element , org.springframework.web.servlet.config.BeanDefinitionHolder ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.BeanDefinitionHolder ) ; } } } return org.springframework.web.servlet.config.ManagedList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<?> < ? > org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { ManagedList < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> = org.springframework.web.servlet.config.ManagedList<java.lang.Object> ( org.w3c.dom.Element , org.springframework.web.servlet.config.ParserContext ) ; return org.springframework.web.servlet.config.ManagedList<java.lang.Object> ( org.springframework.web.servlet.config.ManagedList<java.lang.Object> , org.springframework.web.servlet.config.ParserContext ) ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> , ParserContext org.springframework.web.servlet.config.ParserContext ) { ManagedList < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> = new ManagedList <> ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( java.lang.Object instanceof BeanDefinitionHolder ) { BeanDefinitionHolder org.springframework.web.servlet.config.BeanDefinitionHolder = ( BeanDefinitionHolder ) java.lang.Object ; java.lang.String java.lang.String = org.springframework.web.servlet.config.BeanDefinitionHolder . getBeanDefinition ( ) . getBeanClassName ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( java.lang.String , org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . getBeanClassLoader ( ) ) ; if ( WebArgumentResolver .class . boolean ( java.lang.Class<> ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ServletWebArgumentResolverAdapter .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.BeanDefinitionHolder ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( new BeanDefinitionHolder ( org.springframework.web.servlet.config.RootBeanDefinition , org.springframework.web.servlet.config.BeanDefinitionHolder . getBeanName ( ) + STRING ) ) ; continue; } } org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( java.lang.Object ) ; } return org.springframework.web.servlet.config.ManagedList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<?> < ? > org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; return ( org.w3c.dom.Element != null ? org.springframework.web.servlet.config.ManagedList<java.lang.Object> ( org.w3c.dom.Element , org.springframework.web.servlet.config.ParserContext ) : null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<?> < ? > org.springframework.web.servlet.config.ManagedList<?> ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object , ParserContext org.springframework.web.servlet.config.ParserContext ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> = new ManagedList <> ( ) ; if ( org.w3c.dom.Element != null ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING , STRING ) ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( java.lang.Object ) ; } } if ( org.w3c.dom.Element == null || java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( ByteArrayHttpMessageConverter .class , java.lang.Object ) ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = org.springframework.web.servlet.config.RootBeanDefinition ( StringHttpMessageConverter .class , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , false ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( ResourceHttpMessageConverter .class , java.lang.Object ) ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( SourceHttpMessageConverter .class , java.lang.Object ) ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( AllEncompassingFormHttpMessageConverter .class , java.lang.Object ) ) ; if ( boolean ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( AtomFeedHttpMessageConverter .class , java.lang.Object ) ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( RssChannelHttpMessageConverter .class , java.lang.Object ) ) ; } if ( boolean ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = org.springframework.web.servlet.config.RootBeanDefinition ( MappingJackson2XmlHttpMessageConverter .class , java.lang.Object ) ; GenericBeanDefinition org.springframework.web.servlet.config.GenericBeanDefinition = org.springframework.web.servlet.config.GenericBeanDefinition ( java.lang.Object ) ; org.springframework.web.servlet.config.GenericBeanDefinition . getPropertyValues ( ) . add ( STRING , true ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.GenericBeanDefinition ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } else if ( boolean ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( Jaxb2RootElementHttpMessageConverter .class , java.lang.Object ) ) ; } if ( boolean ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = org.springframework.web.servlet.config.RootBeanDefinition ( MappingJackson2HttpMessageConverter .class , java.lang.Object ) ; GenericBeanDefinition org.springframework.web.servlet.config.GenericBeanDefinition = org.springframework.web.servlet.config.GenericBeanDefinition ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.GenericBeanDefinition ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } else if ( boolean ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ( GsonHttpMessageConverter .class , java.lang.Object ) ) ; } if ( boolean ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = org.springframework.web.servlet.config.RootBeanDefinition ( MappingJackson2SmileHttpMessageConverter .class , java.lang.Object ) ; GenericBeanDefinition org.springframework.web.servlet.config.GenericBeanDefinition = org.springframework.web.servlet.config.GenericBeanDefinition ( java.lang.Object ) ; org.springframework.web.servlet.config.GenericBeanDefinition . getPropertyValues ( ) . add ( STRING , new SmileFactory ( ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.GenericBeanDefinition ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } if ( boolean ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = org.springframework.web.servlet.config.RootBeanDefinition ( MappingJackson2CborHttpMessageConverter .class , java.lang.Object ) ; GenericBeanDefinition org.springframework.web.servlet.config.GenericBeanDefinition = org.springframework.web.servlet.config.GenericBeanDefinition ( java.lang.Object ) ; org.springframework.web.servlet.config.GenericBeanDefinition . getPropertyValues ( ) . add ( STRING , new CBORFactory ( ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.GenericBeanDefinition ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } } return org.springframework.web.servlet.config.ManagedList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.GenericBeanDefinition org.springframework.web.servlet.config.GenericBeanDefinition ( java.lang.Object java.lang.Object ) { GenericBeanDefinition org.springframework.web.servlet.config.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.web.servlet.config.GenericBeanDefinition . setBeanClass ( Jackson2ObjectMapperFactoryBean .class ) ; org.springframework.web.servlet.config.GenericBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.GenericBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; return org.springframework.web.servlet.config.GenericBeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; return org.springframework.web.servlet.config.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { ManagedList < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> = new ManagedList <> ( ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING , STRING ) ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( java.lang.Object ) ; } return org.springframework.web.servlet.config.ManagedList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.ManagedList<org.springframework.web.servlet.config.BeanReference> < BeanReference > org.springframework.web.servlet.config.ManagedList<org.springframework.web.servlet.config.BeanReference> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { ManagedList < BeanReference > org.springframework.web.servlet.config.ManagedList<org.springframework.web.servlet.config.BeanReference> = new ManagedList <> ( ) ; org.springframework.web.servlet.config.ManagedList<org.springframework.web.servlet.config.BeanReference> . setSource ( org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ) { BeanReference org.springframework.web.servlet.config.BeanReference ; if ( StringUtils . hasText ( STRING ) ) { org.springframework.web.servlet.config.BeanReference = new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) , false ) ; org.springframework.web.servlet.config.ManagedList<org.springframework.web.servlet.config.BeanReference> . add ( org.springframework.web.servlet.config.BeanReference ) ; } else if ( StringUtils . hasText ( STRING ) ) { org.springframework.web.servlet.config.BeanReference = new RuntimeBeanReference ( org.w3c.dom.Element . java.lang.String ( STRING ) , true ) ; org.springframework.web.servlet.config.ManagedList<org.springframework.web.servlet.config.BeanReference> . add ( org.springframework.web.servlet.config.BeanReference ) ; } else { org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . error ( STRING , org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; } } return org.springframework.web.servlet.config.ManagedList<org.springframework.web.servlet.config.BeanReference> ; }  <METHOD_END>
<METHOD_START> public void void ( RequestMappingHandlerAdapter org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) { this . org.springframework.web.servlet.config.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.RequestMappingHandlerAdapter ; }  <METHOD_END>
<METHOD_START> public void void ( ConversionService org.springframework.web.servlet.config.ConversionService ) { this . org.springframework.web.servlet.config.ConversionService = org.springframework.web.servlet.config.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.servlet.config.CompositeUriComponentsContributor = new CompositeUriComponentsContributor ( this . org.springframework.web.servlet.config.RequestMappingHandlerAdapter . getArgumentResolvers ( ) , this . org.springframework.web.servlet.config.ConversionService ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.CompositeUriComponentsContributor org.springframework.web.servlet.config.CompositeUriComponentsContributor ( ) java.lang.Exception { return this . org.springframework.web.servlet.config.CompositeUriComponentsContributor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return CompositeUriComponentsContributor .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
