<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public java.util.Optional<org.springframework.data.querydsl.binding.Predicate> < Predicate > java.util.Optional<org.springframework.data.querydsl.binding.Predicate> ( Path < ? > org.springframework.data.querydsl.binding.Path<?> , java.util.Collection<? extends java.lang.Object> < ? extends java.lang.Object > java.util.Collection<? extends java.lang.Object> ) { Assert . notNull ( org.springframework.data.querydsl.binding.Path<> , STRING ) ; Assert . notNull ( java.util.Collection<> , STRING ) ; if ( java.util.Collection<> . boolean ( ) ) { return java.util.Optional . java.util.Optional<org.springframework.data.querydsl.binding.Predicate> ( ) ; } if ( org.springframework.data.querydsl.binding.Path<> instanceof CollectionPathBase ) { BooleanBuilder org.springframework.data.querydsl.binding.BooleanBuilder = new BooleanBuilder ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { org.springframework.data.querydsl.binding.BooleanBuilder . and ( ( ( CollectionPathBase ) org.springframework.data.querydsl.binding.Path<> ) . contains ( java.lang.Object ) ) ; } return java.util.Optional . java.util.Optional ( org.springframework.data.querydsl.binding.BooleanBuilder . getValue ( ) ) ; } if ( org.springframework.data.querydsl.binding.Path<> instanceof SimpleExpression ) { if ( java.util.Collection<> . int ( ) > NUMBER ) { return java.util.Optional . java.util.Optional ( ( ( SimpleExpression ) org.springframework.data.querydsl.binding.Path<> ) . in ( java.util.Collection<> ) ) ; } return java.util.Optional . java.util.Optional ( ( ( SimpleExpression ) org.springframework.data.querydsl.binding.Path<> ) . eq ( java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ) ) ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.querydsl.binding.Path<> , org.springframework.data.querydsl.binding.Path<> . getMetadata ( ) . getPathType ( ) ) ) ; }  <METHOD_END>
