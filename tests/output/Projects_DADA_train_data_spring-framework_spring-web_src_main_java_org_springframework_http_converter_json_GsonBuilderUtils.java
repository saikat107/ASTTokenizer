<METHOD_START> public static org.springframework.http.converter.json.GsonBuilder org.springframework.http.converter.json.GsonBuilder ( ) { GsonBuilder org.springframework.http.converter.json.GsonBuilder = new GsonBuilder ( ) ; org.springframework.http.converter.json.GsonBuilder . registerTypeHierarchyAdapter ( byte [] .class , new org.springframework.http.converter.json.GsonBuilderUtils.Base64TypeAdapter ( ) ) ; return org.springframework.http.converter.json.GsonBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.converter.json.JsonElement org.springframework.http.converter.json.JsonElement ( byte [] byte[] , java.lang.reflect.Type java.lang.reflect.Type , JsonSerializationContext org.springframework.http.converter.json.JsonSerializationContext ) { return new JsonPrimitive ( Base64Utils . encodeToString ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( JsonElement org.springframework.http.converter.json.JsonElement , java.lang.reflect.Type java.lang.reflect.Type , JsonDeserializationContext org.springframework.http.converter.json.JsonDeserializationContext ) { return Base64Utils . decodeFromString ( org.springframework.http.converter.json.JsonElement . getAsString ( ) ) ; }  <METHOD_END>
