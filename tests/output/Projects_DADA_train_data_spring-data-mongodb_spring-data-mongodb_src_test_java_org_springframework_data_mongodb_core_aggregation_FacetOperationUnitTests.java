<METHOD_START> @ Test public void void ( ) java.lang.Exception { FacetOperation org.springframework.data.mongodb.core.aggregation.FacetOperation = new FacetOperation ( ) . and ( match ( Criteria . where ( STRING ) . exists ( true ) ) , bucket ( STRING ) . withBoundaries ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) . withDefaultBucket ( STRING ) . andOutputCount ( ) . as ( STRING ) . andOutput ( STRING ) . push ( ) . as ( STRING ) ) . as ( STRING ) . and ( bucketAuto ( STRING , NUMBER ) ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.FacetOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING + STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FacetOperation org.springframework.data.mongodb.core.aggregation.FacetOperation = facet ( ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.FacetOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { FacetOperation org.springframework.data.mongodb.core.aggregation.FacetOperation = new FacetOperation ( ) . and ( project ( STRING ) , bucket ( STRING ) . withBoundaries ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) . withDefaultBucket ( STRING ) . andOutputCount ( ) . as ( STRING ) . andOutput ( STRING ) . push ( ) . as ( STRING ) ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.FacetOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING + STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOperation org.springframework.data.mongodb.core.aggregation.FacetOperation = new FacetOperation ( ) . and ( project ( STRING ) . and ( STRING ) . as ( STRING ) , bucketAuto ( STRING , NUMBER ) . andOutput ( STRING ) . push ( ) . as ( STRING ) ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.FacetOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
