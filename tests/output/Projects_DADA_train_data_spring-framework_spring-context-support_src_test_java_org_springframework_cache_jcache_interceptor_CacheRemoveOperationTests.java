<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.interceptor.CacheRemoveOperation org.springframework.cache.jcache.interceptor.CacheRemoveOperation ( ) { CacheMethodDetails < CacheRemove > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> = create ( CacheRemove .class , SampleObject .class , STRING , java.lang.Long .class ) ; return new CacheRemoveOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> , defaultCacheResolver , defaultKeyGenerator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheRemoveOperation org.springframework.cache.jcache.interceptor.CacheRemoveOperation = org.springframework.cache.jcache.interceptor.CacheRemoveOperation ( ) ; CacheInvocationParameter [] org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] = org.springframework.cache.jcache.interceptor.CacheRemoveOperation . getAllParameters ( NUMBER ) ; assertEquals ( NUMBER , allParameters . length ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] , java.lang.Long .class , NUMBER , NUMBER ) ; }  <METHOD_END>
