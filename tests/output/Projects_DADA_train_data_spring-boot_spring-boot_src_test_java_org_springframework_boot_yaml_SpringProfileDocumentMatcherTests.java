<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . ABSTAIN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( java.lang.String . java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DocumentMatcher org.springframework.boot.yaml.DocumentMatcher = new SpringProfileDocumentMatcher ( STRING , STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING ) ; assertThat ( org.springframework.boot.yaml.DocumentMatcher . matches ( java.util.Properties ) ) . isEqualTo ( MatchStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( java.lang.String java.lang.String ) throws java.io.IOException { YamlPropertiesFactoryBean org.springframework.boot.yaml.YamlPropertiesFactoryBean = new YamlPropertiesFactoryBean ( ) ; ByteArrayResource org.springframework.boot.yaml.ByteArrayResource = new ByteArrayResource ( java.lang.String . byte[] ( ) ) ; org.springframework.boot.yaml.YamlPropertiesFactoryBean . setResources ( org.springframework.boot.yaml.ByteArrayResource ) ; org.springframework.boot.yaml.YamlPropertiesFactoryBean . afterPropertiesSet ( ) ; return org.springframework.boot.yaml.YamlPropertiesFactoryBean . getObject ( ) ; }  <METHOD_END>
