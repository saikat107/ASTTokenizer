<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> < WebMvcConfigurer > java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) ) { this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> . addAll ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . configurePathMatch ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContentNegotiationConfigurer org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . configureContentNegotiation ( org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncSupportConfigurer org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . configureAsyncSupport ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DefaultServletHandlerConfigurer org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . configureDefaultServletHandling ( org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.web.servlet.config.annotation.FormatterRegistry ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . addFormatters ( org.springframework.web.servlet.config.annotation.FormatterRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( InterceptorRegistry org.springframework.web.servlet.config.annotation.InterceptorRegistry ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . addInterceptors ( org.springframework.web.servlet.config.annotation.InterceptorRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . addResourceHandlers ( org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CorsRegistry org.springframework.web.servlet.config.annotation.CorsRegistry ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . addCorsMappings ( org.springframework.web.servlet.config.annotation.CorsRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewControllerRegistry org.springframework.web.servlet.config.annotation.ViewControllerRegistry ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . addViewControllers ( org.springframework.web.servlet.config.annotation.ViewControllerRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . configureViewResolvers ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . addArgumentResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . addReturnValueHandlers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . configureMessageConverters ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . extendMessageConverters ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . configureHandlerExceptionResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { org.springframework.web.servlet.config.annotation.WebMvcConfigurer . extendHandlerExceptionResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.annotation.Validator org.springframework.web.servlet.config.annotation.Validator ( ) { Validator org.springframework.web.servlet.config.annotation.Validator = null ; for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { Validator org.springframework.web.servlet.config.annotation.Validator = org.springframework.web.servlet.config.annotation.WebMvcConfigurer . getValidator ( ) ; if ( org.springframework.web.servlet.config.annotation.Validator != null ) { if ( org.springframework.web.servlet.config.annotation.Validator != null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.servlet.config.annotation.Validator + STRING + org.springframework.web.servlet.config.annotation.Validator + STRING ) ; } org.springframework.web.servlet.config.annotation.Validator = org.springframework.web.servlet.config.annotation.Validator ; } } return org.springframework.web.servlet.config.annotation.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.annotation.MessageCodesResolver org.springframework.web.servlet.config.annotation.MessageCodesResolver ( ) { MessageCodesResolver org.springframework.web.servlet.config.annotation.MessageCodesResolver = null ; for ( WebMvcConfigurer org.springframework.web.servlet.config.annotation.WebMvcConfigurer : this . java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { MessageCodesResolver org.springframework.web.servlet.config.annotation.MessageCodesResolver = org.springframework.web.servlet.config.annotation.WebMvcConfigurer . getMessageCodesResolver ( ) ; if ( org.springframework.web.servlet.config.annotation.MessageCodesResolver != null ) { if ( org.springframework.web.servlet.config.annotation.MessageCodesResolver != null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.servlet.config.annotation.MessageCodesResolver + STRING + org.springframework.web.servlet.config.annotation.MessageCodesResolver + STRING ) ; } org.springframework.web.servlet.config.annotation.MessageCodesResolver = org.springframework.web.servlet.config.annotation.MessageCodesResolver ; } } return org.springframework.web.servlet.config.annotation.MessageCodesResolver ; }  <METHOD_END>
