<METHOD_START> private static org.springframework.boot.actuate.security.AuthenticationAuditListener.WebAuditListener org.springframework.boot.actuate.security.AuthenticationAuditListener.WebAuditListener ( ) { if ( ClassUtils . isPresent ( java.lang.String , null ) ) { return new org.springframework.boot.actuate.security.AuthenticationAuditListener.WebAuditListener ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AbstractAuthenticationEvent org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) { if ( org.springframework.boot.actuate.security.AbstractAuthenticationEvent instanceof AbstractAuthenticationFailureEvent ) { void ( ( AbstractAuthenticationFailureEvent ) org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) ; } else if ( this . org.springframework.boot.actuate.security.AuthenticationAuditListener.WebAuditListener != null && this . org.springframework.boot.actuate.security.AuthenticationAuditListener.WebAuditListener . boolean ( org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) ) { this . org.springframework.boot.actuate.security.AuthenticationAuditListener.WebAuditListener . void ( this , org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) ; } else if ( org.springframework.boot.actuate.security.AbstractAuthenticationEvent instanceof AuthenticationSuccessEvent ) { void ( ( AuthenticationSuccessEvent ) org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractAuthenticationFailureEvent org.springframework.boot.actuate.security.AbstractAuthenticationFailureEvent ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AbstractAuthenticationFailureEvent . getException ( ) . getClass ( ) . getName ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AbstractAuthenticationFailureEvent . getException ( ) . getMessage ( ) ) ; if ( org.springframework.boot.actuate.security.AbstractAuthenticationFailureEvent . getAuthentication ( ) . getDetails ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AbstractAuthenticationFailureEvent . getAuthentication ( ) . getDetails ( ) ) ; } publish ( new AuditEvent ( org.springframework.boot.actuate.security.AbstractAuthenticationFailureEvent . getAuthentication ( ) . getName ( ) , java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AuthenticationSuccessEvent org.springframework.boot.actuate.security.AuthenticationSuccessEvent ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( org.springframework.boot.actuate.security.AuthenticationSuccessEvent . getAuthentication ( ) . getDetails ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthenticationSuccessEvent . getAuthentication ( ) . getDetails ( ) ) ; } publish ( new AuditEvent ( org.springframework.boot.actuate.security.AuthenticationSuccessEvent . getAuthentication ( ) . getName ( ) , java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.actuate.security.AuthenticationAuditListener org.springframework.boot.actuate.security.AuthenticationAuditListener , AbstractAuthenticationEvent org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) { if ( org.springframework.boot.actuate.security.AuthenticationAuditListener != null ) { AuthenticationSwitchUserEvent org.springframework.boot.actuate.security.AuthenticationSwitchUserEvent = ( AuthenticationSwitchUserEvent ) org.springframework.boot.actuate.security.AbstractAuthenticationEvent ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( org.springframework.boot.actuate.security.AuthenticationSwitchUserEvent . getAuthentication ( ) . getDetails ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthenticationSwitchUserEvent . getAuthentication ( ) . getDetails ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.security.AuthenticationSwitchUserEvent . getTargetUser ( ) . getUsername ( ) ) ; org.springframework.boot.actuate.security.AuthenticationAuditListener . publish ( new AuditEvent ( org.springframework.boot.actuate.security.AuthenticationSwitchUserEvent . getAuthentication ( ) . getName ( ) , java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( AbstractAuthenticationEvent org.springframework.boot.actuate.security.AbstractAuthenticationEvent ) { return org.springframework.boot.actuate.security.AbstractAuthenticationEvent instanceof AuthenticationSwitchUserEvent ; }  <METHOD_END>
