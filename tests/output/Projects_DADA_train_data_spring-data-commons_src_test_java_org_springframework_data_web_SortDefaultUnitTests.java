<METHOD_START> @ Test public void void ( ) { void ( Sort . by ( new Order ( STRING ) ) , java.lang.String ) ; void ( Sort . by ( new Order ( ASC , STRING ) ) , java.lang.String ) ; void ( Sort . by ( new Order ( ASC , STRING ) , new Order ( DESC , STRING ) , new Order ( DESC , STRING ) ) , java.lang.String[] ) ; void ( Sort . by ( STRING , STRING ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Sort org.springframework.data.web.Sort , java.lang.String ... java.lang.String[] ) { SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; Sort org.springframework.data.web.Sort = org.springframework.data.web.SortHandlerMethodArgumentResolver . parseParameterIntoSort ( java.lang.String[] , STRING ) ; assertThat ( org.springframework.data.web.Sort ) . isEqualTo ( org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver ( ) . supportsParameter ( org.springframework.data.web.MethodParameter ( STRING ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , Sort . unsorted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , Sort . by ( java.lang.String[] ) . ascending ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.web.MethodParameter ( STRING ) , org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.data.web.MethodParameter = TestUtils . getParameterOfMethod ( java.lang.Class<?> ( ) , STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver ( ) . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = org.springframework.data.web.MethodParameter ( STRING ) ; HandlerMethodArgumentResolver org.springframework.data.web.HandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; org.springframework.data.web.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.web.ExpectedException . expectMessage ( SortDefault .class . java.lang.String ( ) ) ; org.springframework.data.web.ExpectedException . expectMessage ( SortDefaults .class . java.lang.String ( ) ) ; org.springframework.data.web.ExpectedException . expectMessage ( org.springframework.data.web.MethodParameter . toString ( ) ) ; org.springframework.data.web.HandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , TestUtils . getWebRequest ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = org.springframework.data.web.MethodParameter ( STRING ) ; Sort org.springframework.data.web.Sort = Sort . by ( STRING , STRING ) ; void ( org.springframework.data.web.MethodParameter , org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.web.HandlerMethodArgumentResolver org.springframework.data.web.HandlerMethodArgumentResolver ( ) { return new SortHandlerMethodArgumentResolver ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.data.web.MethodParameter , Sort org.springframework.data.web.Sort ) throws java.lang.Exception { HandlerMethodArgumentResolver org.springframework.data.web.HandlerMethodArgumentResolver = org.springframework.data.web.HandlerMethodArgumentResolver ( ) ; assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.HandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , TestUtils . getWebRequest ( ) , null ) ) . isEqualTo ( org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.web.MethodParameter org.springframework.data.web.MethodParameter ( java.lang.String java.lang.String ) { return org.springframework.data.web.MethodParameter ( java.lang.Class<?> ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.MethodParameter org.springframework.data.web.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return TestUtils . getParameterOfMethod ( java.lang.Class<> , java.lang.String , Sort .class ) ; }  <METHOD_END>
