<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.aop.config.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.aop.config.DefaultListableBeanFactory ) ; this . org.springframework.aop.config.XmlBeanDefinitionReader . setEventListener ( this . org.springframework.aop.config.CollectingReaderEventListener ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.aop.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.aop.config.Resource ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = this . org.springframework.aop.config.CollectingReaderEventListener . getComponentDefinitions ( ) ; assertEquals ( STRING , NUMBER , componentDefinitions . length ) ; assertTrue ( STRING , org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] instanceof CompositeComponentDefinition ) ; CompositeComponentDefinition org.springframework.aop.config.CompositeComponentDefinition = ( CompositeComponentDefinition ) org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.aop.config.CompositeComponentDefinition . getName ( ) ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = org.springframework.aop.config.CompositeComponentDefinition . getNestedComponents ( ) ; assertEquals ( STRING , NUMBER , nestedComponentDefs . length ) ; PointcutComponentDefinition org.springframework.aop.config.PointcutComponentDefinition = null ; for ( int int = NUMBER ; int < nestedComponentDefs . length ; int ++ ) { ComponentDefinition org.springframework.aop.config.ComponentDefinition = org.springframework.aop.config.ComponentDefinition[] [ int ] ; if ( org.springframework.aop.config.ComponentDefinition instanceof PointcutComponentDefinition ) { org.springframework.aop.config.PointcutComponentDefinition = ( PointcutComponentDefinition ) org.springframework.aop.config.ComponentDefinition ; break; } } assertNotNull ( STRING , org.springframework.aop.config.PointcutComponentDefinition ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.PointcutComponentDefinition . getBeanDefinitions ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.aop.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.aop.config.Resource ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = this . org.springframework.aop.config.CollectingReaderEventListener . getComponentDefinitions ( ) ; assertEquals ( STRING , NUMBER , componentDefinitions . length ) ; assertTrue ( STRING , org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] instanceof CompositeComponentDefinition ) ; CompositeComponentDefinition org.springframework.aop.config.CompositeComponentDefinition = ( CompositeComponentDefinition ) org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.aop.config.CompositeComponentDefinition . getName ( ) ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = org.springframework.aop.config.CompositeComponentDefinition . getNestedComponents ( ) ; assertEquals ( STRING , NUMBER , nestedComponentDefs . length ) ; AdvisorComponentDefinition org.springframework.aop.config.AdvisorComponentDefinition = null ; for ( int int = NUMBER ; int < nestedComponentDefs . length ; int ++ ) { ComponentDefinition org.springframework.aop.config.ComponentDefinition = org.springframework.aop.config.ComponentDefinition[] [ int ] ; if ( org.springframework.aop.config.ComponentDefinition instanceof AdvisorComponentDefinition ) { org.springframework.aop.config.AdvisorComponentDefinition = ( AdvisorComponentDefinition ) org.springframework.aop.config.ComponentDefinition ; break; } } assertNotNull ( STRING , org.springframework.aop.config.AdvisorComponentDefinition ) ; assertEquals ( NUMBER , org.springframework.aop.config.AdvisorComponentDefinition . getBeanDefinitions ( ) . length ) ; assertEquals ( NUMBER , org.springframework.aop.config.AdvisorComponentDefinition . getBeanReferences ( ) . length ) ; assertTrue ( STRING , org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] instanceof BeanComponentDefinition ) ; BeanComponentDefinition org.springframework.aop.config.BeanComponentDefinition = ( BeanComponentDefinition ) org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.aop.config.BeanComponentDefinition . getBeanName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.aop.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.aop.config.Resource ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = this . org.springframework.aop.config.CollectingReaderEventListener . getComponentDefinitions ( ) ; assertEquals ( STRING , NUMBER , componentDefinitions . length ) ; assertTrue ( STRING , org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] instanceof CompositeComponentDefinition ) ; CompositeComponentDefinition org.springframework.aop.config.CompositeComponentDefinition = ( CompositeComponentDefinition ) org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.aop.config.CompositeComponentDefinition . getName ( ) ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = org.springframework.aop.config.CompositeComponentDefinition . getNestedComponents ( ) ; assertEquals ( STRING , NUMBER , nestedComponentDefs . length ) ; AdvisorComponentDefinition org.springframework.aop.config.AdvisorComponentDefinition = null ; for ( int int = NUMBER ; int < nestedComponentDefs . length ; int ++ ) { ComponentDefinition org.springframework.aop.config.ComponentDefinition = org.springframework.aop.config.ComponentDefinition[] [ int ] ; if ( org.springframework.aop.config.ComponentDefinition instanceof AdvisorComponentDefinition ) { org.springframework.aop.config.AdvisorComponentDefinition = ( AdvisorComponentDefinition ) org.springframework.aop.config.ComponentDefinition ; break; } } assertNotNull ( STRING , org.springframework.aop.config.AdvisorComponentDefinition ) ; assertEquals ( NUMBER , org.springframework.aop.config.AdvisorComponentDefinition . getBeanDefinitions ( ) . length ) ; assertEquals ( NUMBER , org.springframework.aop.config.AdvisorComponentDefinition . getBeanReferences ( ) . length ) ; assertTrue ( STRING , org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] instanceof BeanComponentDefinition ) ; BeanComponentDefinition org.springframework.aop.config.BeanComponentDefinition = ( BeanComponentDefinition ) org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.aop.config.BeanComponentDefinition . getBeanName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.aop.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.aop.config.Resource ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = this . org.springframework.aop.config.CollectingReaderEventListener . getComponentDefinitions ( ) ; assertEquals ( STRING , NUMBER , componentDefinitions . length ) ; assertTrue ( STRING , org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] instanceof CompositeComponentDefinition ) ; CompositeComponentDefinition org.springframework.aop.config.CompositeComponentDefinition = ( CompositeComponentDefinition ) org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.aop.config.CompositeComponentDefinition . getName ( ) ) ; ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = org.springframework.aop.config.CompositeComponentDefinition . getNestedComponents ( ) ; assertEquals ( STRING , NUMBER , nestedComponentDefs . length ) ; AspectComponentDefinition org.springframework.aop.config.AspectComponentDefinition = null ; for ( int int = NUMBER ; int < nestedComponentDefs . length ; int ++ ) { ComponentDefinition org.springframework.aop.config.ComponentDefinition = org.springframework.aop.config.ComponentDefinition[] [ int ] ; if ( org.springframework.aop.config.ComponentDefinition instanceof AspectComponentDefinition ) { org.springframework.aop.config.AspectComponentDefinition = ( AspectComponentDefinition ) org.springframework.aop.config.ComponentDefinition ; break; } } assertNotNull ( STRING , org.springframework.aop.config.AspectComponentDefinition ) ; BeanDefinition [] org.springframework.aop.config.BeanDefinition[] = org.springframework.aop.config.AspectComponentDefinition . getBeanDefinitions ( ) ; assertEquals ( NUMBER , beanDefinitions . length ) ; BeanReference [] org.springframework.aop.config.BeanReference[] = org.springframework.aop.config.AspectComponentDefinition . getBeanReferences ( ) ; assertEquals ( NUMBER , beanReferences . length ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; for ( int int = NUMBER ; int < beanReferences . length ; int ++ ) { BeanReference org.springframework.aop.config.BeanReference = org.springframework.aop.config.BeanReference[] [ int ] ; java.util.Set<java.lang.String> . boolean ( org.springframework.aop.config.BeanReference . getBeanName ( ) ) ; } assertEquals ( STRING , NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; for ( int int = NUMBER ; int < componentDefinitions . length ; int ++ ) { assertTrue ( org.springframework.aop.config.ComponentDefinition[] [ int ] instanceof BeanComponentDefinition ) ; } ComponentDefinition [] org.springframework.aop.config.ComponentDefinition[] = org.springframework.aop.config.AspectComponentDefinition . getNestedComponents ( ) ; assertEquals ( STRING , NUMBER , nestedComponentDefs2 . length ) ; assertTrue ( org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] instanceof PointcutComponentDefinition ) ; PointcutComponentDefinition org.springframework.aop.config.PointcutComponentDefinition = ( PointcutComponentDefinition ) org.springframework.aop.config.ComponentDefinition[] [ NUMBER ] ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.PointcutComponentDefinition . getBeanDefinitions ( ) . length ) ; }  <METHOD_END>
