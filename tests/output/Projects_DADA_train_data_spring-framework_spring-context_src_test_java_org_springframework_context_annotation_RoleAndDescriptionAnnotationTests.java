<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.RoleAndDescriptionAnnotationTests.Config .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getRole ( ) , is ( BeanDefinition . ROLE_APPLICATION ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getDescription ( ) , is ( ( java.lang.Object ) null ) ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getRole ( ) , is ( BeanDefinition . ROLE_INFRASTRUCTURE ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getDescription ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( ComponentWithoutRole .class , ComponentWithRole .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getRole ( ) , is ( BeanDefinition . ROLE_APPLICATION ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getDescription ( ) , is ( ( java.lang.Object ) null ) ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getRole ( ) , is ( BeanDefinition . ROLE_INFRASTRUCTURE ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getDescription ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . scan ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getRole ( ) , is ( BeanDefinition . ROLE_APPLICATION ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getDescription ( ) , is ( ( java.lang.Object ) null ) ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getRole ( ) , is ( BeanDefinition . ROLE_INFRASTRUCTURE ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) . getDescription ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) @ Description ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
