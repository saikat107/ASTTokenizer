<METHOD_START> public void ( PlatformTransactionManager ... org.springframework.data.transaction.PlatformTransactionManager[] ) { this( SpringTransactionSynchronizationManager . INSTANCE , org.springframework.data.transaction.PlatformTransactionManager[] ); }  <METHOD_END>
<METHOD_START> void ( SynchronizationManager org.springframework.data.transaction.SynchronizationManager , PlatformTransactionManager ... org.springframework.data.transaction.PlatformTransactionManager[] ) { Assert . notNull ( org.springframework.data.transaction.SynchronizationManager , STRING ) ; Assert . notNull ( org.springframework.data.transaction.PlatformTransactionManager[] , STRING ) ; Assert . isTrue ( transactionManagers . length > NUMBER , STRING ) ; this . org.springframework.data.transaction.SynchronizationManager = org.springframework.data.transaction.SynchronizationManager ; this . java.util.List<org.springframework.data.transaction.PlatformTransactionManager> = java.util.List ( org.springframework.data.transaction.PlatformTransactionManager[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.transaction.MultiTransactionStatus org.springframework.data.transaction.MultiTransactionStatus ( TransactionDefinition org.springframework.data.transaction.TransactionDefinition ) throws org.springframework.data.transaction.TransactionException { MultiTransactionStatus org.springframework.data.transaction.MultiTransactionStatus = new MultiTransactionStatus ( java.util.List<org.springframework.data.transaction.PlatformTransactionManager> . get ( NUMBER ) ) ; if ( ! org.springframework.data.transaction.SynchronizationManager . isSynchronizationActive ( ) ) { org.springframework.data.transaction.SynchronizationManager . initSynchronization ( ) ; org.springframework.data.transaction.MultiTransactionStatus . setNewSynchonization ( ) ; } try { for ( PlatformTransactionManager org.springframework.data.transaction.PlatformTransactionManager : java.util.List<org.springframework.data.transaction.PlatformTransactionManager> ) { org.springframework.data.transaction.MultiTransactionStatus . registerTransactionManager ( org.springframework.data.transaction.TransactionDefinition , org.springframework.data.transaction.PlatformTransactionManager ) ; } } catch ( java.lang.Exception java.lang.Exception ) { java.util.Map<org.springframework.data.transaction.PlatformTransactionManager,org.springframework.data.transaction.TransactionStatus> < PlatformTransactionManager , TransactionStatus > java.util.Map<org.springframework.data.transaction.PlatformTransactionManager,org.springframework.data.transaction.TransactionStatus> = org.springframework.data.transaction.MultiTransactionStatus . getTransactionStatuses ( ) ; for ( PlatformTransactionManager org.springframework.data.transaction.PlatformTransactionManager : java.util.List<org.springframework.data.transaction.PlatformTransactionManager> ) { try { if ( java.util.Map<org.springframework.data.transaction.PlatformTransactionManager,org.springframework.data.transaction.TransactionStatus> . get ( org.springframework.data.transaction.PlatformTransactionManager ) != null ) { org.springframework.data.transaction.PlatformTransactionManager . rollback ( java.util.Map<org.springframework.data.transaction.PlatformTransactionManager,org.springframework.data.transaction.TransactionStatus> . get ( org.springframework.data.transaction.PlatformTransactionManager ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.data.transaction.Logger . warn ( STRING + org.springframework.data.transaction.PlatformTransactionManager + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } } if ( org.springframework.data.transaction.MultiTransactionStatus . isNewSynchonization ( ) ) { org.springframework.data.transaction.SynchronizationManager . clearSynchronization ( ) ; } throw new CannotCreateTransactionException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } return org.springframework.data.transaction.MultiTransactionStatus ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionStatus org.springframework.data.transaction.TransactionStatus ) throws org.springframework.data.transaction.TransactionException { MultiTransactionStatus org.springframework.data.transaction.MultiTransactionStatus = ( MultiTransactionStatus ) org.springframework.data.transaction.TransactionStatus ; boolean boolean = true ; java.lang.Exception java.lang.Exception = null ; PlatformTransactionManager org.springframework.data.transaction.PlatformTransactionManager = null ; for ( PlatformTransactionManager org.springframework.data.transaction.PlatformTransactionManager : java.lang.Iterable<org.springframework.data.transaction.PlatformTransactionManager> ( java.util.List<org.springframework.data.transaction.PlatformTransactionManager> ) ) { if ( boolean ) { try { org.springframework.data.transaction.MultiTransactionStatus . commit ( org.springframework.data.transaction.PlatformTransactionManager ) ; } catch ( java.lang.Exception java.lang.Exception ) { boolean = false ; java.lang.Exception = java.lang.Exception ; org.springframework.data.transaction.PlatformTransactionManager = org.springframework.data.transaction.PlatformTransactionManager ; } } else { try { org.springframework.data.transaction.MultiTransactionStatus . rollback ( org.springframework.data.transaction.PlatformTransactionManager ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.data.transaction.Logger . warn ( STRING + org.springframework.data.transaction.PlatformTransactionManager + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } } } if ( org.springframework.data.transaction.MultiTransactionStatus . isNewSynchonization ( ) ) { org.springframework.data.transaction.SynchronizationManager . clearSynchronization ( ) ; } if ( java.lang.Exception != null ) { boolean boolean = org.springframework.data.transaction.PlatformTransactionManager == org.springframework.data.transaction.PlatformTransactionManager ( ) ; int int = boolean ? HeuristicCompletionException . STATE_ROLLED_BACK : HeuristicCompletionException . STATE_MIXED ; throw new HeuristicCompletionException ( int , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void void ( TransactionStatus org.springframework.data.transaction.TransactionStatus ) throws org.springframework.data.transaction.TransactionException { java.lang.Exception java.lang.Exception = null ; PlatformTransactionManager org.springframework.data.transaction.PlatformTransactionManager = null ; MultiTransactionStatus org.springframework.data.transaction.MultiTransactionStatus = ( MultiTransactionStatus ) org.springframework.data.transaction.TransactionStatus ; for ( PlatformTransactionManager org.springframework.data.transaction.PlatformTransactionManager : java.lang.Iterable<org.springframework.data.transaction.PlatformTransactionManager> ( java.util.List<org.springframework.data.transaction.PlatformTransactionManager> ) ) { try { org.springframework.data.transaction.MultiTransactionStatus . rollback ( org.springframework.data.transaction.PlatformTransactionManager ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception == null ) { java.lang.Exception = java.lang.Exception ; org.springframework.data.transaction.PlatformTransactionManager = org.springframework.data.transaction.PlatformTransactionManager ; } else { org.springframework.data.transaction.Logger . warn ( STRING + org.springframework.data.transaction.PlatformTransactionManager + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } } } if ( org.springframework.data.transaction.MultiTransactionStatus . isNewSynchonization ( ) ) { org.springframework.data.transaction.SynchronizationManager . clearSynchronization ( ) ; } if ( java.lang.Exception != null ) { throw new UnexpectedRollbackException ( STRING + org.springframework.data.transaction.PlatformTransactionManager + STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.util.Collection<T> < T > java.util.Collection<T> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> <> ( java.util.Collection<T> ) ; java.util.Collections . void ( java.util.List<T> ) ; return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.transaction.PlatformTransactionManager org.springframework.data.transaction.PlatformTransactionManager ( ) { return java.util.List<org.springframework.data.transaction.PlatformTransactionManager> . get ( int ( ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) { return java.util.List<org.springframework.data.transaction.PlatformTransactionManager> . size ( ) - NUMBER ; }  <METHOD_END>
