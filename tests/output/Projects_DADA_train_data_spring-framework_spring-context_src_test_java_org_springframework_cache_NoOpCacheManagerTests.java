<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.cache.Cache = this . org.springframework.cache.CacheManager . getCache ( STRING ) ; assertNotNull ( org.springframework.cache.Cache ) ; assertSame ( org.springframework.cache.Cache , this . org.springframework.cache.CacheManager . getCache ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( ) ; Cache org.springframework.cache.Cache = this . org.springframework.cache.CacheManager . getCache ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.cache.Cache . getName ( ) ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.Cache . put ( java.lang.Object , new java.lang.Object ( ) ) ; assertNull ( org.springframework.cache.Cache . get ( java.lang.Object ) ) ; assertNull ( org.springframework.cache.Cache . get ( java.lang.Object , java.lang.Object .class ) ) ; assertNull ( org.springframework.cache.Cache . getNativeCache ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertFalse ( this . org.springframework.cache.CacheManager . getCacheNames ( ) . contains ( java.lang.String ) ) ; this . org.springframework.cache.CacheManager . getCache ( java.lang.String ) ; assertTrue ( this . org.springframework.cache.CacheManager . getCacheNames ( ) . contains ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( ) ; Cache org.springframework.cache.Cache = this . org.springframework.cache.CacheManager . getCache ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.Object java.lang.Object = org.springframework.cache.Cache . get ( new java.lang.Object ( ) , ( ) returnValue ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.Cache = this . org.springframework.cache.CacheManager . getCache ( java.lang.String ( ) ) ; java.lang.String java.lang.String = java.lang.String ( ) ; try { org.springframework.cache.Cache . get ( java.lang.String , ( ) { throw new UnsupportedOperationException ( STRING ) ; } ) ; } catch ( Cache . Cache Cache.ValueRetrievalException ) { assertNotNull ( Cache.ValueRetrievalException . getCause ( ) ) ; assertEquals ( java.lang.UnsupportedOperationException .class , Cache.ValueRetrievalException . getCause ( ) . getClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; }  <METHOD_END>
