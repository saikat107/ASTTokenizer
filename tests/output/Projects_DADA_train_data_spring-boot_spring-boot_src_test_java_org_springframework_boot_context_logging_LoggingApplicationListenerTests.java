<METHOD_START> @ Before public void void ( ) java.lang.SecurityException , java.io.IOException { java.util.logging.LogManager . java.util.logging.LogManager ( ) . void ( JavaLoggingSystem .class . java.io.InputStream ( STRING ) ) ; void ( new ApplicationStartingEvent ( new SpringApplication ( ) , java.lang.String[] ) ) ; new java.io.File ( STRING ) . boolean ( ) ; new java.io.File ( java.lang.String ( ) + STRING ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { LoggingSystem . get ( java.lang.Class<? extends org.springframework.boot.context.logging.LoggingApplicationListenerTests> ( ) . java.lang.ClassLoader ( ) ) . cleanUp ( ) ; java.lang.System . java.lang.String ( LoggingSystem .class . java.lang.String ( ) ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( LoggingSystem . SYSTEM_PROPERTY ) ; if ( this . org.springframework.boot.context.logging.GenericApplicationContext != null ) { this . org.springframework.boot.context.logging.GenericApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) . resolvePlaceholders ( STRING ) ; java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( not ( containsString ( STRING ) ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.Log . info ( STRING , new java.lang.RuntimeException ( STRING ) ) ; assertThat ( new java.io.File ( java.lang.String ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) . startsWith ( STRING ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( new java.io.File ( java.lang.String ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( new java.io.File ( java.lang.String ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; Log org.springframework.boot.context.logging.Log = LogFactory . getLog ( org.springframework.boot.context.logging.LoggingApplicationListenerTests .class ) ; org.springframework.boot.context.logging.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new java.io.File ( STRING ) . boolean ( ) ) . isFalse ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; Log org.springframework.boot.context.logging.Log = LogFactory . getLog ( org.springframework.boot.context.logging.LoggingApplicationListenerTests .class ) ; org.springframework.boot.context.logging.Log . info ( STRING ) ; assertThat ( new java.io.File ( STRING ) . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; Log org.springframework.boot.context.logging.Log = LogFactory . getLog ( org.springframework.boot.context.logging.LoggingApplicationListenerTests .class ) ; org.springframework.boot.context.logging.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . trace ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . trace ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . trace ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . trace ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . trace ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . trace ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . fatal ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; this . org.springframework.boot.context.logging.Log . fatal ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.logging.LoggingApplicationListener . setParseArgs ( false ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.logging.LoggingApplicationListener . setSpringBootLogging ( LogLevel . ERROR ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . setParseArgs ( false ) ; void ( new ApplicationStartingEvent ( this . org.springframework.boot.context.logging.SpringApplication , new java.lang.String [] { STRING } ) ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.Log . debug ( STRING ) ; assertThat ( this . org.springframework.boot.context.logging.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( boolean ( ) ) . isTrue ( ) ; void ( new ContextClosedEvent ( this . org.springframework.boot.context.logging.GenericApplicationContext ) ) ; assertThat ( boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( not ( containsString ( STRING ) ) ) ; this . org.springframework.boot.context.logging.Log . info ( STRING , new java.lang.RuntimeException ( STRING , new java.lang.RuntimeException ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.InternalOutputCapture . expect ( containsString ( STRING ) ) ; this . org.springframework.boot.context.logging.Log . info ( STRING , new java.lang.RuntimeException ( STRING , new java.lang.RuntimeException ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener = new org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener ( ) ; java.lang.System . java.lang.String ( LoggingSystem .class . java.lang.String ( ) , org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestShutdownHandlerLoggingSystem .class . java.lang.String ( ) ) ; void ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener , new ApplicationStartingEvent ( new SpringApplication ( ) , java.lang.String[] ) ) ; org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener . java.lang.Thread ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener = new org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener ( ) ; java.lang.System . java.lang.String ( LoggingSystem .class . java.lang.String ( ) , org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestShutdownHandlerLoggingSystem .class . java.lang.String ( ) ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; void ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener , new ApplicationStartingEvent ( new SpringApplication ( ) , java.lang.String[] ) ) ; org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener . java.lang.Thread ) . isNotNull ( ) ; org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestLoggingApplicationListener . java.lang.Thread . void ( ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestShutdownHandlerLoggingSystem . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( LoggingSystem . SYSTEM_PROPERTY , org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem .class . java.lang.String ( ) ) ; void ( new ApplicationStartingEvent ( this . org.springframework.boot.context.logging.SpringApplication , new java.lang.String [ NUMBER ] ) ) ; org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem = ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem ) ReflectionTestUtils . getField ( this . org.springframework.boot.context.logging.LoggingApplicationListener , STRING ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem . boolean ) . isFalse ( ) ; void ( new ContextClosedEvent ( this . org.springframework.boot.context.logging.GenericApplicationContext ) ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem . boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( LoggingSystem . SYSTEM_PROPERTY , org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem .class . java.lang.String ( ) ) ; void ( new ApplicationStartingEvent ( this . org.springframework.boot.context.logging.SpringApplication , new java.lang.String [ NUMBER ] ) ) ; org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem = ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem ) ReflectionTestUtils . getField ( this . org.springframework.boot.context.logging.LoggingApplicationListener , STRING ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem . boolean ) . isFalse ( ) ; GenericApplicationContext org.springframework.boot.context.logging.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.boot.context.logging.GenericApplicationContext . setParent ( this . org.springframework.boot.context.logging.GenericApplicationContext ) ; void ( new ContextClosedEvent ( org.springframework.boot.context.logging.GenericApplicationContext ) ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem . boolean ) . isFalse ( ) ; void ( new ContextClosedEvent ( this . org.springframework.boot.context.logging.GenericApplicationContext ) ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem . boolean ) . isTrue ( ) ; org.springframework.boot.context.logging.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING , STRING , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.logging.GenericApplicationContext , STRING ) ; this . org.springframework.boot.context.logging.LoggingApplicationListener . initialize ( this . org.springframework.boot.context.logging.GenericApplicationContext . getEnvironment ( ) , this . org.springframework.boot.context.logging.GenericApplicationContext . getClassLoader ( ) ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING + new ApplicationPid ( ) . toString ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( LoggingSystem . SYSTEM_PROPERTY , org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem .class . java.lang.String ( ) ) ; void ( new ApplicationStartingEvent ( this . org.springframework.boot.context.logging.SpringApplication , new java.lang.String [ NUMBER ] ) ) ; org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem = ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem ) ReflectionTestUtils . getField ( this . org.springframework.boot.context.logging.LoggingApplicationListener , STRING ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem . boolean ) . isFalse ( ) ; void ( new ApplicationFailedEvent ( this . org.springframework.boot.context.logging.SpringApplication , new java.lang.String [ NUMBER ] , new GenericApplicationContext ( ) , new java.lang.Exception ( ) ) ) ; assertThat ( org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestCleanupLoggingSystem . boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationEvent org.springframework.boot.context.logging.ApplicationEvent ) { void ( this . org.springframework.boot.context.logging.LoggingApplicationListener , org.springframework.boot.context.logging.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationListener < ? > org.springframework.boot.context.logging.ApplicationListener<?> , ApplicationEvent org.springframework.boot.context.logging.ApplicationEvent ) { SimpleApplicationEventMulticaster org.springframework.boot.context.logging.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.boot.context.logging.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.boot.context.logging.ApplicationListener<> ) ; org.springframework.boot.context.logging.SimpleApplicationEventMulticaster . multicastEvent ( org.springframework.boot.context.logging.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { java.util.logging.Logger java.util.logging.Logger = java.util.logging.LogManager . java.util.logging.LogManager ( ) . java.util.logging.Logger ( STRING ) ; java.util.logging.Handler [] java.util.logging.Handler[] = java.util.logging.Logger . java.util.logging.Handler[] ( ) ; for ( java.util.logging.Handler java.util.logging.Handler : java.util.logging.Handler[] ) { if ( java.util.logging.Handler instanceof SLF4JBridgeHandler ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestShutdownHandlerLoggingSystem . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( LoggingInitializationContext org.springframework.boot.context.logging.LoggingInitializationContext , LogFile org.springframework.boot.context.logging.LogFile ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( LoggingInitializationContext org.springframework.boot.context.logging.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.context.logging.LogFile ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , LogLevel org.springframework.boot.context.logging.LogLevel ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.context.logging.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.context.logging.LoggerConfiguration> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.context.logging.LoggerConfiguration org.springframework.boot.context.logging.LoggerConfiguration ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Runnable java.lang.Runnable ( ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestShutdownHandlerLoggingSystem . java.util.concurrent.CountDownLatch . void ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.context.logging.LoggingApplicationListenerTests.TestShutdownHandlerLoggingSystem . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( java.lang.Thread java.lang.Thread ) { this . java.lang.Thread = java.lang.Thread ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , LogLevel org.springframework.boot.context.logging.LogLevel ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.context.logging.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.context.logging.LoggerConfiguration> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.context.logging.LoggerConfiguration org.springframework.boot.context.logging.LoggerConfiguration ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
