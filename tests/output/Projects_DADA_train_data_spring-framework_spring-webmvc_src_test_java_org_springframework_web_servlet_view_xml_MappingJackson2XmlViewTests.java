<METHOD_START> @ Before public void void ( ) { org.springframework.web.servlet.view.xml.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.view.xml.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.xml.Context = ContextFactory . getGlobal ( ) . enterContext ( ) ; org.springframework.web.servlet.view.xml.ScriptableObject = org.springframework.web.servlet.view.xml.Context . initStandardObjects ( ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView = new MappingJackson2XmlView ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , false , org.springframework.web.servlet.view.xml.MappingJackson2XmlView . isExposePathVariables ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . setUpdateContentLength ( true ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( MappingJackson2XmlView . DEFAULT_CONTENT_TYPE , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertEquals ( java.lang.String . int ( ) , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; org.springframework.web.servlet.view.xml.MockHttpServletRequest . setAttribute ( View . SELECTED_CONTENT_TYPE , new MediaType ( STRING , STRING ) ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.xml.MappingJackson2XmlView . setDisableCaching ( false ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertNull ( org.springframework.web.servlet.view.xml.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . setUpdateContentLength ( true ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertTrue ( org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) . length ( ) > NUMBER ) ; assertEquals ( org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) . length ( ) , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimpleAnnotated ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; assertTrue ( org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) . length ( ) > NUMBER ) ; assertTrue ( org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) . contains ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SerializerFactory org.springframework.web.servlet.view.xml.SerializerFactory = new org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.DelegatingSerializerFactory ( null ) ; XmlMapper org.springframework.web.servlet.view.xml.XmlMapper = new XmlMapper ( ) ; org.springframework.web.servlet.view.xml.XmlMapper . setSerializerFactory ( org.springframework.web.servlet.view.xml.SerializerFactory ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . setObjectMapper ( org.springframework.web.servlet.view.xml.XmlMapper ) ; java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.xml.MappingJackson2XmlView . setModelKey ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.TreeMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; fail ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , mock ( BindingResult .class , STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( JsonView .class . java.lang.String ( ) , org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.MyJacksonView1 .class ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . setUpdateContentLength ( true ) ; org.springframework.web.servlet.view.xml.MappingJackson2XmlView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xml.MockHttpServletRequest , org.springframework.web.servlet.view.xml.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) ; assertTrue ( java.lang.String . int ( ) > NUMBER ) ; assertEquals ( java.lang.String . int ( ) , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentLength ( ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . boolean ( JsonView .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.servlet.view.xml.Context . evaluateString ( org.springframework.web.servlet.view.xml.ScriptableObject , STRING + org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentAsString ( ) + STRING , STRING , NUMBER , null ) ; assertNotNull ( STRING , java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.servlet.view.xml.MockHttpServletResponse . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return new java.util.Date ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestChildBean org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestChildBean ( ) { return org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestChildBean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple ( ) { return org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple ) { this . org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple = org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , JsonGenerator org.springframework.web.servlet.view.xml.JsonGenerator , SerializerProvider org.springframework.web.servlet.view.xml.SerializerProvider ) throws java.io.IOException { org.springframework.web.servlet.view.xml.JsonGenerator . writeStartObject ( ) ; org.springframework.web.servlet.view.xml.JsonGenerator . writeFieldName ( STRING ) ; org.springframework.web.servlet.view.xml.JsonGenerator . writeString ( STRING ) ; org.springframework.web.servlet.view.xml.JsonGenerator . writeEndObject ( ) ; }  <METHOD_END>
<METHOD_START> protected void ( SerializerFactoryConfig org.springframework.web.servlet.view.xml.SerializerFactoryConfig ) { super( org.springframework.web.servlet.view.xml.SerializerFactoryConfig ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.xml.JsonSerializer<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.view.xml.JsonSerializer<java.lang.Object> ( SerializerProvider org.springframework.web.servlet.view.xml.SerializerProvider , JavaType org.springframework.web.servlet.view.xml.JavaType ) throws org.springframework.web.servlet.view.xml.JsonMappingException { if ( org.springframework.web.servlet.view.xml.JavaType . getRawClass ( ) == org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimple .class ) { return new org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests.TestBeanSimpleSerializer ( ) ; } else { return super. createSerializer ( org.springframework.web.servlet.view.xml.SerializerProvider , org.springframework.web.servlet.view.xml.JavaType ) ; } }  <METHOD_END>
