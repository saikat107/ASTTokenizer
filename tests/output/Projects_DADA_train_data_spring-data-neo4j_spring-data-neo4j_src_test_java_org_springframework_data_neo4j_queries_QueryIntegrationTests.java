<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.queries.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.queries.PlatformTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { getGraphDatabaseService ( ) . execute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.data.neo4j.queries.UserRepository . getGraph ( ) ; assertNotNull ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ) ; int int = NUMBER ; for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ) { int ++ ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; } assertEquals ( NUMBER , int ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.data.neo4j.queries.UserRepository . getGraph ( ) ; assertNotNull ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ) ; int int = NUMBER ; for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ) { int ++ ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.data.neo4j.queries.UserRepository . getUserIds ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; java.util.List<java.lang.Long> < java.lang.Long > java.util.List<java.lang.Long> = org.springframework.data.neo4j.queries.UserRepository . getUserNodeIds ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.Long> . int ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.data.neo4j.queries.UserRepository . getUserIds ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; java.util.List<java.lang.Long> < java.lang.Long > java.util.List<java.lang.Long> = org.springframework.data.neo4j.queries.UserRepository . getUserNodeIds ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.Long> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByName ( STRING ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByName ( STRING ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { int int = org.springframework.data.neo4j.queries.UserRepository . findTotalUsers ( ) ; assertEquals ( int , NUMBER ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { int int = org.springframework.data.neo4j.queries.UserRepository . findTotalUsers ( ) ; assertEquals ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.Collection<org.springframework.data.neo4j.queries.User> < User > java.util.Collection<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . getAllUsers ( ) ; assertEquals ( java.util.Collection<org.springframework.data.neo4j.queries.User> . size ( ) , NUMBER ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.Collection<org.springframework.data.neo4j.queries.User> < User > java.util.Collection<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . getAllUsers ( ) ; assertEquals ( java.util.Collection<org.springframework.data.neo4j.queries.User> . size ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByNameWithNamedParam ( STRING ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByNameWithNamedParam ( STRING ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.data.neo4j.queries.UserRepository . getUsersAsProperties ( ) ; assertNotNull ( java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> ) ; int int = NUMBER ; for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> ) { int ++ ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; } assertEquals ( NUMBER , int ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.data.neo4j.queries.UserRepository . getUsersAsProperties ( ) ; assertNotNull ( java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> ) ; int int = NUMBER ; for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : java.lang.Iterable<java.util.Map<java.lang.String,java.lang.Object>> ) { int ++ ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserRepository . findTotalUsers ( ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = java.util.Arrays . java.util.List ( new UserQueryResult ( STRING , NUMBER ) , new UserQueryResult ( STRING , NUMBER ) , new UserQueryResult ( STRING , NUMBER ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = org.springframework.data.neo4j.queries.UserRepository . retrieveAllUsersAndTheirAges ( ) ; assertNotNull ( STRING , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; assertEquals ( java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; for ( UserQueryResult org.springframework.data.neo4j.queries.UserQueryResult : java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) { assertNotNull ( org.springframework.data.neo4j.queries.UserQueryResult . getUserId ( ) ) ; assertNotNull ( org.springframework.data.neo4j.queries.UserQueryResult . getId ( ) ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserRepository . findTotalUsers ( ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = java.util.Arrays . java.util.List ( new UserQueryResult ( STRING , NUMBER ) , new UserQueryResult ( STRING , NUMBER ) , new UserQueryResult ( STRING , NUMBER ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = org.springframework.data.neo4j.queries.UserRepository . retrieveAllUsersAndTheirAges ( ) ; assertNotNull ( STRING , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; assertEquals ( java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; for ( UserQueryResult org.springframework.data.neo4j.queries.UserQueryResult : java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) { assertNotNull ( org.springframework.data.neo4j.queries.UserQueryResult . getUserId ( ) ) ; assertNotNull ( org.springframework.data.neo4j.queries.UserQueryResult . getId ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { UnmanagedUserPojo org.springframework.data.neo4j.queries.UnmanagedUserPojo = org.springframework.data.neo4j.queries.UserRepository . findIndividualUserAsDifferentObject ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UnmanagedUserPojo ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.UnmanagedUserPojo . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { UnmanagedUserPojo org.springframework.data.neo4j.queries.UnmanagedUserPojo = org.springframework.data.neo4j.queries.UserRepository . findIndividualUserAsDifferentObject ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UnmanagedUserPojo ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.UnmanagedUserPojo . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { UserQueryResultObject org.springframework.data.neo4j.queries.UserQueryResultObject = org.springframework.data.neo4j.queries.UserRepository . findIndividualUserAsProxiedObject ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UserQueryResultObject ) ; assertEquals ( STRING , STRING , org.springframework.data.neo4j.queries.UserQueryResultObject . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserQueryResultObject . getAgeOfUser ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { UserQueryResultObject org.springframework.data.neo4j.queries.UserQueryResultObject = org.springframework.data.neo4j.queries.UserRepository . findIndividualUserAsProxiedObject ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UserQueryResultObject ) ; assertEquals ( STRING , STRING , org.springframework.data.neo4j.queries.UserQueryResultObject . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserQueryResultObject . getAgeOfUser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> < RichUserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> = org.springframework.data.neo4j.queries.UserRepository . findUsersByGender ( Gender . FEMALE ) ; assertNotNull ( STRING , java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> ) ; java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> < RichUserQueryResult > java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> = java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> . hasNext ( ) ) ; RichUserQueryResult org.springframework.data.neo4j.queries.RichUserQueryResult = java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> . next ( ) ; assertEquals ( Gender . FEMALE , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserGender ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserName ( ) ) ; assertEquals ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserAccount ( ) ) ; assertArrayEquals ( new java.math.BigDecimal [] { java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) , java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) } , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserDeposits ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> . hasNext ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> < RichUserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> = org.springframework.data.neo4j.queries.UserRepository . findUsersByGender ( Gender . FEMALE ) ; assertNotNull ( STRING , java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> ) ; java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> < RichUserQueryResult > java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> = java.lang.Iterable<org.springframework.data.neo4j.queries.RichUserQueryResult> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> . hasNext ( ) ) ; RichUserQueryResult org.springframework.data.neo4j.queries.RichUserQueryResult = java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> . next ( ) ; assertEquals ( Gender . FEMALE , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserGender ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserName ( ) ) ; assertEquals ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserAccount ( ) ) ; assertArrayEquals ( new java.math.BigDecimal [] { java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) , java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) } , org.springframework.data.neo4j.queries.RichUserQueryResult . getUserDeposits ( ) ) ; assertFalse ( java.util.Iterator<org.springframework.data.neo4j.queries.RichUserQueryResult> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByName ( STRING ) ; assertNotNull ( org.springframework.data.neo4j.queries.User ) ; User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . loadUserById ( org.springframework.data.neo4j.queries.User ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByName ( STRING ) ; assertNotNull ( org.springframework.data.neo4j.queries.User ) ; User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . loadUserById ( org.springframework.data.neo4j.queries.User ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByName ( STRING ) ; assertNotNull ( org.springframework.data.neo4j.queries.User ) ; User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . loadUserByNamedId ( org.springframework.data.neo4j.queries.User ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . findUserByName ( STRING ) ; assertNotNull ( org.springframework.data.neo4j.queries.User ) ; User org.springframework.data.neo4j.queries.User = org.springframework.data.neo4j.queries.UserRepository . loadUserByNamedId ( org.springframework.data.neo4j.queries.User ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.User . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.lang.Iterable<org.springframework.data.neo4j.queries.User> < User > java.lang.Iterable<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . getAllUsersIterable ( ) ; int int = NUMBER ; for ( User org.springframework.data.neo4j.queries.User : java.lang.Iterable<org.springframework.data.neo4j.queries.User> ) { int ++ ; } assertEquals ( NUMBER , int ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.lang.Iterable<org.springframework.data.neo4j.queries.User> < User > java.lang.Iterable<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . getAllUsersIterable ( ) ; int int = NUMBER ; for ( User org.springframework.data.neo4j.queries.User : java.lang.Iterable<org.springframework.data.neo4j.queries.User> ) { int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { org.springframework.data.neo4j.queries.UserRepository . setNamesNull ( null ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.User> < User > java.lang.Iterable<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findAll ( ) ; for ( User org.springframework.data.neo4j.queries.User : java.lang.Iterable<org.springframework.data.neo4j.queries.User> ) { assertNull ( org.springframework.data.neo4j.queries.User . getName ( ) ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { org.springframework.data.neo4j.queries.UserRepository . setNamesNull ( null ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.User> < User > java.lang.Iterable<org.springframework.data.neo4j.queries.User> = org.springframework.data.neo4j.queries.UserRepository . findAll ( ) ; for ( User org.springframework.data.neo4j.queries.User : java.lang.Iterable<org.springframework.data.neo4j.queries.User> ) { assertNull ( org.springframework.data.neo4j.queries.User . getName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserRepository . findTotalUsers ( ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = java.util.Arrays . java.util.List ( new UserQueryResult ( null , NUMBER ) , new UserQueryResult ( null , NUMBER ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = org.springframework.data.neo4j.queries.UserRepository . retrieveAllUsersAndTheirAges ( ) ; assertNotNull ( STRING , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; assertEquals ( java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; for ( UserQueryResult org.springframework.data.neo4j.queries.UserQueryResult : java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) { assertNotNull ( org.springframework.data.neo4j.queries.UserQueryResult . getUserId ( ) ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserRepository . findTotalUsers ( ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = java.util.Arrays . java.util.List ( new UserQueryResult ( null , NUMBER ) , new UserQueryResult ( null , NUMBER ) ) ; java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> < UserQueryResult > java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> = org.springframework.data.neo4j.queries.UserRepository . retrieveAllUsersAndTheirAges ( ) ; assertNotNull ( STRING , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; assertEquals ( java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> , java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) ; for ( UserQueryResult org.springframework.data.neo4j.queries.UserQueryResult : java.lang.Iterable<org.springframework.data.neo4j.queries.UserQueryResult> ) { assertNotNull ( org.springframework.data.neo4j.queries.UserQueryResult . getUserId ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserByName ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserByName ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAndFriendsDepth1 ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) . size ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( User org.springframework.data.neo4j.queries.User : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.User . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getFriends ( ) . size ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAndFriendsDepth1 ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) . size ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( User org.springframework.data.neo4j.queries.User : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.User . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getFriends ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAndRatingsByName ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) . size ( ) ) ; for ( Rating org.springframework.data.neo4j.queries.Rating : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) ) { if ( org.springframework.data.neo4j.queries.Rating . getStars ( ) == NUMBER ) { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } else { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } } assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAvgRating ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) . length ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( TempMovie org.springframework.data.neo4j.queries.TempMovie : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.TempMovie . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAndRatingsByName ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) . size ( ) ) ; for ( Rating org.springframework.data.neo4j.queries.Rating : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) ) { if ( org.springframework.data.neo4j.queries.Rating . getStars ( ) == NUMBER ) { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } else { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } } assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAvgRating ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) . length ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( TempMovie org.springframework.data.neo4j.queries.TempMovie : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.TempMovie . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAndFriendsDepth0 ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) . size ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( User org.springframework.data.neo4j.queries.User : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.User . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getFriends ( ) . size ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAndFriendsDepth0 ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) . size ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( User org.springframework.data.neo4j.queries.User : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getFriends ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.User . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getFriends ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> < EntityWrappingQueryResult > java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> = org.springframework.data.neo4j.queries.UserRepository . findAllUserRatings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . size ( ) ) ; EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . get ( NUMBER ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) . size ( ) ) ; Rating org.springframework.data.neo4j.queries.Rating = org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Rating . getStars ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAvgRating ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) . length ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) [ NUMBER ] . getName ( ) ) ; org.springframework.data.neo4j.queries.EntityWrappingQueryResult = java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . get ( NUMBER ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; for ( Rating org.springframework.data.neo4j.queries.Rating : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) ) { if ( org.springframework.data.neo4j.queries.Rating . getStars ( ) == NUMBER ) { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } else { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } } assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAvgRating ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) . length ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( TempMovie org.springframework.data.neo4j.queries.TempMovie : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.TempMovie . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> < EntityWrappingQueryResult > java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> = org.springframework.data.neo4j.queries.UserRepository . findAllUserRatings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . size ( ) ) ; EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . get ( NUMBER ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) . size ( ) ) ; Rating org.springframework.data.neo4j.queries.Rating = org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Rating . getStars ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAvgRating ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) . length ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) [ NUMBER ] . getName ( ) ) ; org.springframework.data.neo4j.queries.EntityWrappingQueryResult = java.util.List<org.springframework.data.neo4j.queries.EntityWrappingQueryResult> . get ( NUMBER ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getUser ( ) . getName ( ) ) ; for ( Rating org.springframework.data.neo4j.queries.Rating : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getRatings ( ) ) { if ( org.springframework.data.neo4j.queries.Rating . getStars ( ) == NUMBER ) { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } else { assertEquals ( STRING , org.springframework.data.neo4j.queries.Rating . getMovie ( ) . getName ( ) ) ; } } assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAvgRating ( ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) . length ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( TempMovie org.springframework.data.neo4j.queries.TempMovie : org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getMovies ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.neo4j.queries.TempMovie . getName ( ) ) ; } assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { UserQueryResultObject org.springframework.data.neo4j.queries.UserQueryResultObject = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAsProxiedObject ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UserQueryResultObject ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UserQueryResultObject . getUser ( ) ) ; assertEquals ( STRING , STRING , org.springframework.data.neo4j.queries.UserQueryResultObject . getUser ( ) . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserQueryResultObject . getAgeOfUser ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { UserQueryResultObject org.springframework.data.neo4j.queries.UserQueryResultObject = org.springframework.data.neo4j.queries.UserRepository . findWrappedUserAsProxiedObject ( STRING ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UserQueryResultObject ) ; assertNotNull ( STRING , org.springframework.data.neo4j.queries.UserQueryResultObject . getUser ( ) ) ; assertEquals ( STRING , STRING , org.springframework.data.neo4j.queries.UserQueryResultObject . getUser ( ) . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.data.neo4j.queries.UserQueryResultObject . getAgeOfUser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findAllRatingsNull ( ) ; assertNotNull ( org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAllRatings ( ) . size ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { EntityWrappingQueryResult org.springframework.data.neo4j.queries.EntityWrappingQueryResult = org.springframework.data.neo4j.queries.UserRepository . findAllRatingsNull ( ) ; assertNotNull ( org.springframework.data.neo4j.queries.EntityWrappingQueryResult ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.EntityWrappingQueryResult . getAllRatings ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.PlatformTransactionManager org.springframework.data.neo4j.queries.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.queries.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.SessionFactory org.springframework.data.neo4j.queries.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
