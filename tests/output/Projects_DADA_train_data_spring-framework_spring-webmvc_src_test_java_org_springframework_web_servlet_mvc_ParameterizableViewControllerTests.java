<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.mvc.ParameterizableViewController = new ParameterizableViewController ( ) ; this . org.springframework.web.servlet.mvc.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.mvc.ParameterizableViewController . setViewName ( java.lang.String ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = this . org.springframework.web.servlet.mvc.ParameterizableViewController . handleRequest ( this . org.springframework.web.servlet.mvc.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelAndView org.springframework.web.servlet.mvc.ModelAndView = this . org.springframework.web.servlet.mvc.ParameterizableViewController . handleRequest ( this . org.springframework.web.servlet.mvc.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.ModelAndView . getViewName ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.MockHttpServletRequest . setAttribute ( DispatcherServlet . INPUT_FLASH_MAP_ATTRIBUTE , new ModelMap ( STRING , STRING ) ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = this . org.springframework.web.servlet.mvc.ParameterizableViewController . handleRequest ( this . org.springframework.web.servlet.mvc.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.ModelAndView . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.MockHttpServletRequest . setMethod ( HttpMethod . OPTIONS . name ( ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.MockHttpServletResponse = new MockHttpServletResponse ( ) ; ModelAndView org.springframework.web.servlet.mvc.ModelAndView = this . org.springframework.web.servlet.mvc.ParameterizableViewController . handleRequest ( this . org.springframework.web.servlet.mvc.MockHttpServletRequest , org.springframework.web.servlet.mvc.MockHttpServletResponse ) ; assertNull ( org.springframework.web.servlet.mvc.ModelAndView ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
