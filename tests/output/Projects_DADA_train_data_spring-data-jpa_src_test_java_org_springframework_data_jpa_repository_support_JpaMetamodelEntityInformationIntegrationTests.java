<METHOD_START> @ Test public void void ( ) { JpaEntityInformation < User , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.User,?> = getEntityInformation ( User .class , org.springframework.data.jpa.repository.support.EntityManager ) ; assertThat ( org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.User,> . getIdType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { JpaEntityInformation < ? , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<?,?> = getEntityInformation ( AbstractPersistable .class , org.springframework.data.jpa.repository.support.EntityManager ) ; assertEquals ( java.io.Serializable .class , org.springframework.data.jpa.repository.support.JpaEntityInformation<,> . getIdType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < PersistableWithIdClass , ? > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PersistableWithIdClass,?> = getEntityInformation ( PersistableWithIdClass .class , org.springframework.data.jpa.repository.support.EntityManager ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PersistableWithIdClass,> . getIdType ( ) , is ( typeCompatibleWith ( PersistableWithIdClassPK .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistableWithIdClass org.springframework.data.jpa.repository.support.PersistableWithIdClass = new PersistableWithIdClass ( NUMBER , NUMBER ) ; JpaEntityInformation < PersistableWithIdClass , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.PersistableWithIdClass,?> = getEntityInformation ( PersistableWithIdClass .class , org.springframework.data.jpa.repository.support.EntityManager ) ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.PersistableWithIdClass,> . getId ( org.springframework.data.jpa.repository.support.PersistableWithIdClass ) ; assertThat ( java.lang.Object , is ( java.util.Optional . java.util.Optional ( new PersistableWithIdClassPK ( NUMBER , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Item org.springframework.data.jpa.repository.support.Item = new Item ( NUMBER , NUMBER ) ; JpaEntityInformation < Item , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.Item,?> = getEntityInformation ( Item .class , org.springframework.data.jpa.repository.support.EntityManager ) ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.Item,> . getId ( org.springframework.data.jpa.repository.support.Item ) ; assertThat ( java.lang.Object , is ( java.util.Optional . java.util.Optional ( new ItemId ( NUMBER , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Item org.springframework.data.jpa.repository.support.Item = new Item ( NUMBER , NUMBER ) ; Site org.springframework.data.jpa.repository.support.Site = new Site ( NUMBER ) ; ItemSite org.springframework.data.jpa.repository.support.ItemSite = new ItemSite ( org.springframework.data.jpa.repository.support.Item , org.springframework.data.jpa.repository.support.Site ) ; JpaEntityInformation < ItemSite , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.ItemSite,?> = getEntityInformation ( ItemSite .class , org.springframework.data.jpa.repository.support.EntityManager ) ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.ItemSite,> . getId ( org.springframework.data.jpa.repository.support.ItemSite ) ; assertThat ( java.lang.Object , is ( java.util.Optional . java.util.Optional<T> ( new ItemSiteId ( new ItemId ( NUMBER , NUMBER ) , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Item org.springframework.data.jpa.repository.support.Item = new Item ( NUMBER , null ) ; Site org.springframework.data.jpa.repository.support.Site = new Site ( NUMBER ) ; ItemSite org.springframework.data.jpa.repository.support.ItemSite = new ItemSite ( org.springframework.data.jpa.repository.support.Item , org.springframework.data.jpa.repository.support.Site ) ; JpaEntityInformation < ItemSite , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.ItemSite,?> = getEntityInformation ( ItemSite .class , org.springframework.data.jpa.repository.support.EntityManager ) ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.ItemSite,> . getId ( org.springframework.data.jpa.repository.support.ItemSite ) ; assertThat ( java.lang.Object , is ( java.util.Optional . java.util.Optional<T> ( new ItemSiteId ( new ItemId ( NUMBER , null ) , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < VersionedUser , java.lang.Long > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.VersionedUser,java.lang.Long> = new JpaMetamodelEntityInformation < VersionedUser , java.lang.Long > ( VersionedUser .class , org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) ; VersionedUser org.springframework.data.jpa.repository.support.VersionedUser = new VersionedUser ( ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.VersionedUser,java.lang.Long> . isNew ( org.springframework.data.jpa.repository.support.VersionedUser ) , is ( true ) ) ; org.springframework.data.jpa.repository.support.VersionedUser . setId ( NUMBER ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.VersionedUser,java.lang.Long> . isNew ( org.springframework.data.jpa.repository.support.VersionedUser ) , is ( true ) ) ; org.springframework.data.jpa.repository.support.VersionedUser . setVersion ( NUMBER ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.VersionedUser,java.lang.Long> . isNew ( org.springframework.data.jpa.repository.support.VersionedUser ) , is ( false ) ) ; org.springframework.data.jpa.repository.support.VersionedUser . setId ( null ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.VersionedUser,java.lang.Long> . isNew ( org.springframework.data.jpa.repository.support.VersionedUser ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManagerFactory org.springframework.data.jpa.repository.support.EntityManagerFactory = Persistence . createEntityManagerFactory ( java.lang.String ( ) ) ; EntityManager org.springframework.data.jpa.repository.support.EntityManager = org.springframework.data.jpa.repository.support.EntityManagerFactory . createEntityManager ( ) ; EntityInformation < org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.Sample , org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.BaseIdClass > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.Sample,org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.BaseIdClass> = new JpaMetamodelEntityInformation < org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.Sample , org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.BaseIdClass > ( org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.Sample .class , org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.Sample,org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.BaseIdClass> . getIdType ( ) , is ( ( java.lang.Object ) org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformationIntegrationTests.BaseIdClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < SampleWithPrimitiveId , java.lang.Long > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.SampleWithPrimitiveId,java.lang.Long> = new JpaMetamodelEntityInformation < SampleWithPrimitiveId , java.lang.Long > ( SampleWithPrimitiveId .class , org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) ; SampleWithPrimitiveId org.springframework.data.jpa.repository.support.SampleWithPrimitiveId = new SampleWithPrimitiveId ( ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.SampleWithPrimitiveId,java.lang.Long> . isNew ( org.springframework.data.jpa.repository.support.SampleWithPrimitiveId ) , is ( true ) ) ; org.springframework.data.jpa.repository.support.SampleWithPrimitiveId . setId ( NUMBER ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.SampleWithPrimitiveId,java.lang.Long> . isNew ( org.springframework.data.jpa.repository.support.SampleWithPrimitiveId ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaEntityInformation < Role , java.lang.Integer > org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.Role,java.lang.Integer> = new JpaMetamodelEntityInformation < Role , java.lang.Integer > ( Role .class , org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) ; assertThat ( org.springframework.data.jpa.repository.support.JpaEntityInformation<org.springframework.data.jpa.repository.support.Role,java.lang.Integer> . getEntityName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < PrimitiveVersionProperty , java.io.Serializable > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PrimitiveVersionProperty,java.io.Serializable> = new JpaMetamodelEntityInformation < PrimitiveVersionProperty , java.io.Serializable > ( PrimitiveVersionProperty .class , org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PrimitiveVersionProperty,java.io.Serializable> . isNew ( new PrimitiveVersionProperty ( ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < PrimitiveVersionProperty , java.io.Serializable > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PrimitiveVersionProperty,java.io.Serializable> = new JpaMetamodelEntityInformation < PrimitiveVersionProperty , java.io.Serializable > ( PrimitiveVersionProperty .class , org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) ; PrimitiveVersionProperty org.springframework.data.jpa.repository.support.PrimitiveVersionProperty = new PrimitiveVersionProperty ( ) ; pvp . id = NUMBER ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PrimitiveVersionProperty,java.io.Serializable> . isNew ( org.springframework.data.jpa.repository.support.PrimitiveVersionProperty ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < PrimitiveVersionProperty , java.io.Serializable > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PrimitiveVersionProperty,java.io.Serializable> = new JpaMetamodelEntityInformation < PrimitiveVersionProperty , java.io.Serializable > ( PrimitiveVersionProperty .class , org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) ; PrimitiveVersionProperty org.springframework.data.jpa.repository.support.PrimitiveVersionProperty = new PrimitiveVersionProperty ( ) ; pvp . version = NUMBER ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PrimitiveVersionProperty,java.io.Serializable> . isNew ( org.springframework.data.jpa.repository.support.PrimitiveVersionProperty ) , is ( true ) ) ; pvp . id = NUMBER ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.PrimitiveVersionProperty,java.io.Serializable> . isNew ( org.springframework.data.jpa.repository.support.PrimitiveVersionProperty ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < SampleWithIdClass , ? > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.SampleWithIdClass,?> = getEntityInformation ( SampleWithIdClass .class , org.springframework.data.jpa.repository.support.EntityManager ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.SampleWithIdClass,> . isNew ( new SampleWithIdClass ( ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < SampleWithTimestampVersion , ? > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.SampleWithTimestampVersion,?> = getEntityInformation ( SampleWithTimestampVersion .class , org.springframework.data.jpa.repository.support.EntityManager ) ; SampleWithTimestampVersion org.springframework.data.jpa.repository.support.SampleWithTimestampVersion = new SampleWithTimestampVersion ( ) ; entity . version = new java.sql.Timestamp ( new java.util.Date ( ) . long ( ) ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.SampleWithTimestampVersion,> . isNew ( org.springframework.data.jpa.repository.support.SampleWithTimestampVersion ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInformation < User , ? > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.User,?> = getEntityInformation ( User .class , org.springframework.data.jpa.repository.support.EntityManager ) ; User org.springframework.data.jpa.repository.support.User = new User ( ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.User,> . isNew ( org.springframework.data.jpa.repository.support.User ) , is ( true ) ) ; org.springframework.data.jpa.repository.support.User . setId ( NUMBER ) ; assertThat ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.User,> . isNew ( org.springframework.data.jpa.repository.support.User ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { EntityInformation < ConcreteType1 , ? > org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.ConcreteType1,?> = getEntityInformation ( ConcreteType1 .class , org.springframework.data.jpa.repository.support.EntityManager ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.data.jpa.repository.support.EntityInformation<org.springframework.data.jpa.repository.support.ConcreteType1,> , STRING ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return Version . getVersionString ( ) . startsWith ( STRING ) ? STRING : STRING ; }  <METHOD_END>
