<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.beans.factory.xml.BeanDefinitionRegistry ) { super( org.springframework.beans.factory.xml.BeanDefinitionRegistry ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . int = ( boolean ? int : int ) ; this . boolean = ! boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( org.springframework.beans.factory.xml.Constants . asNumber ( java.lang.String ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ProblemReporter org.springframework.beans.factory.xml.ProblemReporter ) { this . org.springframework.beans.factory.xml.ProblemReporter = ( org.springframework.beans.factory.xml.ProblemReporter != null ? org.springframework.beans.factory.xml.ProblemReporter : new FailFastProblemReporter ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ReaderEventListener org.springframework.beans.factory.xml.ReaderEventListener ) { this . org.springframework.beans.factory.xml.ReaderEventListener = ( org.springframework.beans.factory.xml.ReaderEventListener != null ? org.springframework.beans.factory.xml.ReaderEventListener : new EmptyReaderEventListener ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( SourceExtractor org.springframework.beans.factory.xml.SourceExtractor ) { this . org.springframework.beans.factory.xml.SourceExtractor = ( org.springframework.beans.factory.xml.SourceExtractor != null ? org.springframework.beans.factory.xml.SourceExtractor : new NullSourceExtractor ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( NamespaceHandlerResolver org.springframework.beans.factory.xml.NamespaceHandlerResolver ) { this . org.springframework.beans.factory.xml.NamespaceHandlerResolver = org.springframework.beans.factory.xml.NamespaceHandlerResolver ; }  <METHOD_END>
<METHOD_START> public void void ( DocumentLoader org.springframework.beans.factory.xml.DocumentLoader ) { this . org.springframework.beans.factory.xml.DocumentLoader = ( org.springframework.beans.factory.xml.DocumentLoader != null ? org.springframework.beans.factory.xml.DocumentLoader : new DefaultDocumentLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.xml.sax.EntityResolver org.xml.sax.EntityResolver ) { this . org.xml.sax.EntityResolver = org.xml.sax.EntityResolver ; }  <METHOD_END>
<METHOD_START> protected org.xml.sax.EntityResolver org.xml.sax.EntityResolver ( ) { if ( this . org.xml.sax.EntityResolver == null ) { ResourceLoader org.springframework.beans.factory.xml.ResourceLoader = getResourceLoader ( ) ; if ( org.springframework.beans.factory.xml.ResourceLoader != null ) { this . org.xml.sax.EntityResolver = new ResourceEntityResolver ( org.springframework.beans.factory.xml.ResourceLoader ) ; } else { this . org.xml.sax.EntityResolver = new DelegatingEntityResolver ( getBeanClassLoader ( ) ) ; } } return this . org.xml.sax.EntityResolver ; }  <METHOD_END>
<METHOD_START> public void void ( org.xml.sax.ErrorHandler org.xml.sax.ErrorHandler ) { this . org.xml.sax.ErrorHandler = org.xml.sax.ErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null || ! BeanDefinitionDocumentReader .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Resource org.springframework.beans.factory.xml.Resource ) throws org.springframework.beans.factory.xml.BeanDefinitionStoreException { return int ( new EncodedResource ( org.springframework.beans.factory.xml.Resource ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( EncodedResource org.springframework.beans.factory.xml.EncodedResource ) throws org.springframework.beans.factory.xml.BeanDefinitionStoreException { Assert . notNull ( org.springframework.beans.factory.xml.EncodedResource , STRING ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.beans.factory.xml.EncodedResource . getResource ( ) ) ; } java.util.Set<org.springframework.beans.factory.xml.EncodedResource> < EncodedResource > java.util.Set<org.springframework.beans.factory.xml.EncodedResource> = this . java.lang.ThreadLocal<java.util.Set<org.springframework.beans.factory.xml.EncodedResource>> . get ( ) ; if ( java.util.Set<org.springframework.beans.factory.xml.EncodedResource> == null ) { java.util.Set<org.springframework.beans.factory.xml.EncodedResource> = new java.util.HashSet <> ( NUMBER ) ; this . java.lang.ThreadLocal<java.util.Set<org.springframework.beans.factory.xml.EncodedResource>> . set ( java.util.Set<org.springframework.beans.factory.xml.EncodedResource> ) ; } if ( ! java.util.Set<org.springframework.beans.factory.xml.EncodedResource> . add ( org.springframework.beans.factory.xml.EncodedResource ) ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.beans.factory.xml.EncodedResource + STRING ) ; } try { java.io.InputStream java.io.InputStream = org.springframework.beans.factory.xml.EncodedResource . getResource ( ) . getInputStream ( ) ; try { org.xml.sax.InputSource org.xml.sax.InputSource = new org.xml.sax.InputSource ( java.io.InputStream ) ; if ( org.springframework.beans.factory.xml.EncodedResource . getEncoding ( ) != null ) { org.xml.sax.InputSource . void ( org.springframework.beans.factory.xml.EncodedResource . getEncoding ( ) ) ; } return int ( org.xml.sax.InputSource , org.springframework.beans.factory.xml.EncodedResource . getResource ( ) ) ; } finally { java.io.InputStream . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.beans.factory.xml.EncodedResource . getResource ( ) , java.io.IOException ) ; } finally { java.util.Set<org.springframework.beans.factory.xml.EncodedResource> . remove ( org.springframework.beans.factory.xml.EncodedResource ) ; if ( java.util.Set<org.springframework.beans.factory.xml.EncodedResource> . isEmpty ( ) ) { this . java.lang.ThreadLocal<java.util.Set<org.springframework.beans.factory.xml.EncodedResource>> . remove ( ) ; } } }  <METHOD_END>
<METHOD_START> public int int ( org.xml.sax.InputSource org.xml.sax.InputSource ) throws org.springframework.beans.factory.xml.BeanDefinitionStoreException { return int ( org.xml.sax.InputSource , STRING ) ; }  <METHOD_END>
<METHOD_START> public int int ( org.xml.sax.InputSource org.xml.sax.InputSource , java.lang.String java.lang.String )			throws org.springframework.beans.factory.xml.BeanDefinitionStoreException { return int ( org.xml.sax.InputSource , new DescriptiveResource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected int int ( org.xml.sax.InputSource org.xml.sax.InputSource , Resource org.springframework.beans.factory.xml.Resource )			throws org.springframework.beans.factory.xml.BeanDefinitionStoreException { try { org.w3c.dom.Document org.w3c.dom.Document = org.w3c.dom.Document ( org.xml.sax.InputSource , org.springframework.beans.factory.xml.Resource ) ; return int ( org.w3c.dom.Document , org.springframework.beans.factory.xml.Resource ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.xml.BeanDefinitionStoreException ) { throw org.springframework.beans.factory.xml.BeanDefinitionStoreException ; } catch ( org.xml.sax.SAXParseException org.xml.sax.SAXParseException ) { throw new XmlBeanDefinitionStoreException ( org.springframework.beans.factory.xml.Resource . getDescription ( ) , STRING + org.xml.sax.SAXParseException . int ( ) + STRING + org.springframework.beans.factory.xml.Resource + STRING , org.xml.sax.SAXParseException ) ; } catch ( org.xml.sax.SAXException org.xml.sax.SAXException ) { throw new XmlBeanDefinitionStoreException ( org.springframework.beans.factory.xml.Resource . getDescription ( ) , STRING + org.springframework.beans.factory.xml.Resource + STRING , org.xml.sax.SAXException ) ; } catch ( javax.xml.parsers.ParserConfigurationException javax.xml.parsers.ParserConfigurationException ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.xml.Resource . getDescription ( ) , STRING + org.springframework.beans.factory.xml.Resource , javax.xml.parsers.ParserConfigurationException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.xml.Resource . getDescription ( ) , STRING + org.springframework.beans.factory.xml.Resource , java.io.IOException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.xml.Resource . getDescription ( ) , STRING + org.springframework.beans.factory.xml.Resource , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected org.w3c.dom.Document org.w3c.dom.Document ( org.xml.sax.InputSource org.xml.sax.InputSource , Resource org.springframework.beans.factory.xml.Resource ) throws java.lang.Exception { return this . org.springframework.beans.factory.xml.DocumentLoader . loadDocument ( org.xml.sax.InputSource , org.xml.sax.EntityResolver ( ) , this . org.xml.sax.ErrorHandler , int ( org.springframework.beans.factory.xml.Resource ) , boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> protected int int ( Resource org.springframework.beans.factory.xml.Resource ) { int int = int ( ) ; if ( int != int ) { return int ; } int int = int ( org.springframework.beans.factory.xml.Resource ) ; if ( int != int ) { return int ; } return int ; }  <METHOD_END>
<METHOD_START> protected int int ( Resource org.springframework.beans.factory.xml.Resource ) { if ( org.springframework.beans.factory.xml.Resource . isOpen ( ) ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.beans.factory.xml.Resource + STRING + STRING + STRING + STRING ) ; } java.io.InputStream java.io.InputStream ; try { java.io.InputStream = org.springframework.beans.factory.xml.Resource . getInputStream ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.beans.factory.xml.Resource + STRING + STRING + STRING , java.io.IOException ) ; } try { return this . org.springframework.beans.factory.xml.XmlValidationModeDetector . detectValidationMode ( java.io.InputStream ) ; } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.beans.factory.xml.Resource + STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public int int ( org.w3c.dom.Document org.w3c.dom.Document , Resource org.springframework.beans.factory.xml.Resource ) throws org.springframework.beans.factory.xml.BeanDefinitionStoreException { BeanDefinitionDocumentReader org.springframework.beans.factory.xml.BeanDefinitionDocumentReader = org.springframework.beans.factory.xml.BeanDefinitionDocumentReader ( ) ; int int = getRegistry ( ) . getBeanDefinitionCount ( ) ; org.springframework.beans.factory.xml.BeanDefinitionDocumentReader . registerBeanDefinitions ( org.w3c.dom.Document , org.springframework.beans.factory.xml.XmlReaderContext ( org.springframework.beans.factory.xml.Resource ) ) ; return getRegistry ( ) . getBeanDefinitionCount ( ) - int ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.xml.BeanDefinitionDocumentReader org.springframework.beans.factory.xml.BeanDefinitionDocumentReader ( ) { return BeanDefinitionDocumentReader .class . org.springframework.beans.factory.xml.BeanDefinitionDocumentReader ( BeanUtils . instantiateClass ( this . java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.XmlReaderContext org.springframework.beans.factory.xml.XmlReaderContext ( Resource org.springframework.beans.factory.xml.Resource ) { return new XmlReaderContext ( org.springframework.beans.factory.xml.Resource , this . org.springframework.beans.factory.xml.ProblemReporter , this . org.springframework.beans.factory.xml.ReaderEventListener , this . org.springframework.beans.factory.xml.SourceExtractor , this , org.springframework.beans.factory.xml.NamespaceHandlerResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.xml.NamespaceHandlerResolver org.springframework.beans.factory.xml.NamespaceHandlerResolver ( ) { if ( this . org.springframework.beans.factory.xml.NamespaceHandlerResolver == null ) { this . org.springframework.beans.factory.xml.NamespaceHandlerResolver = org.springframework.beans.factory.xml.NamespaceHandlerResolver ( ) ; } return this . org.springframework.beans.factory.xml.NamespaceHandlerResolver ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.xml.NamespaceHandlerResolver org.springframework.beans.factory.xml.NamespaceHandlerResolver ( ) { return new DefaultNamespaceHandlerResolver ( getResourceLoader ( ) . getClassLoader ( ) ) ; }  <METHOD_END>
