<METHOD_START> public void ( ResourceReader org.springframework.data.repository.init.ResourceReader ) { this( org.springframework.data.repository.init.ResourceReader , null ); }  <METHOD_END>
<METHOD_START> public void ( ResourceReader org.springframework.data.repository.init.ResourceReader , java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( org.springframework.data.repository.init.ResourceReader , STRING ) ; this . org.springframework.data.repository.init.ResourceReader = org.springframework.data.repository.init.ResourceReader ; this . java.lang.ClassLoader = java.lang.ClassLoader ; this . org.springframework.data.repository.init.ResourcePatternResolver = java.lang.ClassLoader == null ? new PathMatchingResourcePatternResolver ( ) : new PathMatchingResourcePatternResolver ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.io.IOException { Assert . hasText ( java.lang.String , STRING ) ; void ( org.springframework.data.repository.init.ResourcePatternResolver . getResources ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Resource ... org.springframework.data.repository.init.Resource[] ) { this . java.util.Collection<org.springframework.data.repository.init.Resource> = java.util.Arrays . java.util.List ( org.springframework.data.repository.init.Resource[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationEventPublisher org.springframework.data.repository.init.ApplicationEventPublisher ) { this . org.springframework.data.repository.init.ApplicationEventPublisher = org.springframework.data.repository.init.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( Repositories org.springframework.data.repository.init.Repositories ) { RepositoryInvokerFactory org.springframework.data.repository.init.RepositoryInvokerFactory = new DefaultRepositoryInvokerFactory ( org.springframework.data.repository.init.Repositories ) ; for ( Resource org.springframework.data.repository.init.Resource : java.util.Collection<org.springframework.data.repository.init.Resource> ) { org.springframework.data.repository.init.Logger . info ( java.lang.String . java.lang.String ( STRING , org.springframework.data.repository.init.Resource ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.repository.init.Resource ) ; if ( java.lang.Object instanceof java.util.Collection ) { for ( java.lang.Object java.lang.Object : ( java.util.Collection<?> < ? > ) java.lang.Object ) { if ( java.lang.Object != null ) { void ( java.lang.Object , org.springframework.data.repository.init.RepositoryInvokerFactory ) ; } else { org.springframework.data.repository.init.Logger . info ( STRING ) ; } } } else { void ( java.lang.Object , org.springframework.data.repository.init.RepositoryInvokerFactory ) ; } } if ( org.springframework.data.repository.init.ApplicationEventPublisher != null ) { org.springframework.data.repository.init.ApplicationEventPublisher . publishEvent ( new RepositoriesPopulatedEvent ( this , org.springframework.data.repository.init.Repositories ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Resource org.springframework.data.repository.init.Resource ) { try { return org.springframework.data.repository.init.ResourceReader . readFrom ( org.springframework.data.repository.init.Resource , java.lang.ClassLoader ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , RepositoryInvokerFactory org.springframework.data.repository.init.RepositoryInvokerFactory ) { RepositoryInvoker org.springframework.data.repository.init.RepositoryInvoker = org.springframework.data.repository.init.RepositoryInvokerFactory . getInvokerFor ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.data.repository.init.Logger . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Object , org.springframework.data.repository.init.RepositoryInvoker ) ) ; org.springframework.data.repository.init.RepositoryInvoker . invokeSave ( java.lang.Object ) ; }  <METHOD_END>
