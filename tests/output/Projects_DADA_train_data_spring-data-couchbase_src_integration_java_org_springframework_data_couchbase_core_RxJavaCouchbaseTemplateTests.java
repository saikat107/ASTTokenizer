<METHOD_START> @ Before public void void ( ) java.lang.Exception { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { TestSubscriber < java.lang.Object > org.springframework.data.couchbase.core.TestSubscriber<java.lang.Object> = TestSubscriber . create ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . remove ( java.lang.String ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<java.lang.Object> ) ; org.springframework.data.couchbase.core.TestSubscriber<java.lang.Object> . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> < ReactiveBeer > java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> ) { TestSubscriber < java.lang.Object > org.springframework.data.couchbase.core.TestSubscriber<java.lang.Object> = TestSubscriber . create ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . remove ( java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> , PersistTo . MASTER , ReplicateTo . NONE ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<java.lang.Object> ) ; org.springframework.data.couchbase.core.TestSubscriber<java.lang.Object> . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer = new ReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer = new ReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; void ( java.lang.String , java.lang.String , boolean , java.lang.String , ReactiveBeer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; long long = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . toBlocking ( ) . single ( ) . getVersion ( ) ; assertTrue ( long > NUMBER ) ; org.springframework.data.couchbase.core.VersionedReactiveBeer . setVersion ( long ) ; long long = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . toBlocking ( ) . single ( ) . getVersion ( ) ; assertTrue ( long > NUMBER ) ; assertNotEquals ( long , long ) ; void ( java.lang.String , java.lang.String , boolean , java.lang.String , VersionedReactiveBeer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; TestSubscriber < VersionedReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> = TestSubscriber . create ( ) ; long long = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . toBlocking ( ) . single ( ) . getVersion ( ) ; assertTrue ( long > NUMBER ) ; org.springframework.data.couchbase.core.VersionedReactiveBeer . setVersion ( long + NUMBER ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> ) ; AsyncUtils . awaitError ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> , OptimisticLockingFailureException .class ) ; void ( java.lang.String , java.lang.String , boolean , java.lang.String , VersionedReactiveBeer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; TestSubscriber < VersionedReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> = TestSubscriber . create ( ) ; long long = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . toBlocking ( ) . single ( ) . getVersion ( ) ; assertTrue ( long > NUMBER ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> ) ; AsyncUtils . awaitError ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> , OptimisticLockingFailureException .class ) ; void ( java.lang.String , java.lang.String , boolean , java.lang.String , VersionedReactiveBeer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> < ReactiveBeer > java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> = new java.util.ArrayList<org.springframework.data.couchbase.core.ReactiveBeer> <> ( ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; java.lang.String java.lang.String = java.lang.String ; int int = NUMBER ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> . add ( new ReactiveBeer ( STRING + int , java.lang.String + int , false , STRING ) ) ; } void ( java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithValueCount ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer = new ReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . insert ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; void ( java.lang.String , java.lang.String , boolean , java.lang.String , ReactiveBeer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer = new ReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . insert ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . insert ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitError ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> , OptimisticLockingFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> < ReactiveBeer > java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> = new java.util.ArrayList<org.springframework.data.couchbase.core.ReactiveBeer> <> ( ) ; java.lang.String java.lang.String = java.lang.String ; int int = NUMBER ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> . add ( new ReactiveBeer ( STRING + int , java.lang.String + int , false , STRING ) ) ; } void ( java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . insert ( java.util.Collection<org.springframework.data.couchbase.core.ReactiveBeer> ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithValueCount ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSubscriber < VersionedReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> = TestSubscriber . create ( ) ; TestSubscriber < VersionedReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> = TestSubscriber . create ( ) ; java.lang.String java.lang.String = java.lang.String + STRING ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . insert ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , VersionedReactiveBeer .class ) . doOnNext ( v -> v . setName ( newName ) ) . flatMap ( v -> template . update ( v ) ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> ) ; void ( java.lang.String , java.lang.String , boolean , java.lang.String , VersionedReactiveBeer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSubscriber < VersionedReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> = TestSubscriber . create ( ) ; VersionedReactiveBeer org.springframework.data.couchbase.core.VersionedReactiveBeer = new VersionedReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . update ( org.springframework.data.couchbase.core.VersionedReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> ) ; AsyncUtils . awaitError ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.VersionedReactiveBeer> , DataRetrievalFailureException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer = new ReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , ReactiveBeer .class ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithValueCount ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> , NUMBER ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . remove ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithValueCount ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> , NUMBER ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , ReactiveBeer .class ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.LinkedList<java.lang.Integer> < java.lang.Integer > ( ) ; java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> = new java.util.HashMap<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > ( ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , false ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , null ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson = new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson ( java.lang.String , java.util.List<java.lang.String> , java.util.List<java.lang.Integer> , java.util.Map<java.lang.String,java.lang.Boolean> , java.util.Map<java.lang.String,java.lang.Integer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson ) . subscribe ( ) ; assertNotNull ( org.springframework.data.couchbase.core.Bucket . get ( java.lang.String ) ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson .class ) . toBlocking ( ) . single ( ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson . java.util.List<java.lang.String> ( ) ) ; assertEquals ( java.util.List<java.lang.Integer> , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson . java.util.List<java.lang.Integer> ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson . java.lang.String ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Boolean> , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson . java.util.Map<java.lang.String,java.lang.Boolean> ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Integer> , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.ComplexPerson . java.util.Map<java.lang.String,java.lang.Integer> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; TestSubscriber < ReactiveBeer > org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> = TestSubscriber . create ( ) ; ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer = new ReactiveBeer ( java.lang.String , java.lang.String , boolean , java.lang.String ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.ReactiveBeer ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitCompletedWithAnyValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , ReactiveBeer .class ) . subscribe ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> ) ; AsyncUtils . awaitValue ( org.springframework.data.couchbase.core.TestSubscriber<org.springframework.data.couchbase.core.ReactiveBeer> , org.springframework.data.couchbase.core.ReactiveBeer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ViewQuery org.springframework.data.couchbase.core.ViewQuery = ViewQuery . from ( STRING , STRING ) ; org.springframework.data.couchbase.core.ViewQuery . stale ( Stale . FALSE ) ; final java.util.List<org.springframework.data.couchbase.core.ReactiveBeer> < ReactiveBeer > java.util.List<org.springframework.data.couchbase.core.ReactiveBeer> = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findByView ( org.springframework.data.couchbase.core.ViewQuery , ReactiveBeer .class ) . toList ( ) . toBlocking ( ) . single ( ) ; assertTrue ( java.util.List<org.springframework.data.couchbase.core.ReactiveBeer> . size ( ) > NUMBER ) ; for ( ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer : java.util.List<org.springframework.data.couchbase.core.ReactiveBeer> ) { assertNotNull ( org.springframework.data.couchbase.core.ReactiveBeer . getId ( ) ) ; assertNotNull ( org.springframework.data.couchbase.core.ReactiveBeer . getName ( ) ) ; assertNotNull ( org.springframework.data.couchbase.core.ReactiveBeer . getActive ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { N1qlQuery org.springframework.data.couchbase.core.N1qlQuery = N1qlQuery . simple ( select ( STRING ) . from ( i ( org.springframework.data.couchbase.core.Bucket . name ( ) ) ) . limit ( NUMBER ) ) ; AsyncN1qlQueryResult org.springframework.data.couchbase.core.AsyncN1qlQueryResult = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . queryN1QL ( org.springframework.data.couchbase.core.N1qlQuery ) . toBlocking ( ) . single ( ) ; assertTrue ( org.springframework.data.couchbase.core.AsyncN1qlQueryResult . finalSuccess ( ) . toBlocking ( ) . single ( ) ) ; assertFalse ( org.springframework.data.couchbase.core.AsyncN1qlQueryResult . rows ( ) . toList ( ) . toBlocking ( ) . single ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment = new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment ( STRING , NUMBER , STRING , STRING ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment = new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment ( STRING , NUMBER , STRING , STRING ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( java.util.Arrays . java.util.List<org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment> ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.FullFragment ) ) . subscribe ( ) ; N1qlQuery org.springframework.data.couchbase.core.N1qlQuery = N1qlQuery . simple ( select ( i ( STRING ) ) . from ( i ( org.springframework.data.couchbase.core.Bucket . name ( ) ) ) . where ( x ( STRING ) . eq ( s ( STRING ) ) . and ( x ( STRING ) . gt ( NUMBER ) ) ) , N1qlParams . build ( ) . consistency ( ScanConsistency . REQUEST_PLUS ) ) ; java.util.List<org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment> < org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment > java.util.List<org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment> = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findByN1QLProjection ( org.springframework.data.couchbase.core.N1qlQuery , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment .class ) . toList ( ) . toBlocking ( ) . single ( ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment> ) ; assertFalse ( java.util.List<org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment> . boolean ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment> . int ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment> . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.Fragment ( NUMBER ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final long long = new java.util.Date ( ) . long ( ) ; final int int = new java.util.Random ( ) . int ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt ( STRING , long , int ) ) . toBlocking ( ) . single ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( STRING , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt .class ) . toBlocking ( ) . single ( ) ; assertNotNull ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt ) ; assertEquals ( long , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt . long ( ) ) ; assertEquals ( int , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt . int ( ) ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt ( STRING , int , int ) ) . toBlocking ( ) . single ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( STRING , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt .class ) . toBlocking ( ) . single ( ) ; assertNotNull ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt ) ; assertEquals ( int , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt . long ( ) ) ; assertEquals ( int , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithLongAndInt . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum = new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum ( STRING , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum ) . toBlocking ( ) . single ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( STRING , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum .class ) . toBlocking ( ) . single ( ) ; assertNotNull ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum ) ; assertEquals ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ( ) , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass = new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass ( STRING , java.lang.Integer .class ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass . void ( STRING ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass ) . toBlocking ( ) . single ( ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( STRING , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass .class ) . toBlocking ( ) . single ( ) ; assertNotNull ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass ) ; assertThat ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithClass . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.DocumentWithTouchOnRead org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.DocumentWithTouchOnRead = new org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.DocumentWithTouchOnRead ( java.lang.String ) ; org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . save ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.DocumentWithTouchOnRead ) . subscribe ( ) ; java.lang.Thread . void ( NUMBER ) ; assertNotNull ( org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.DocumentWithTouchOnRead .class ) . toBlocking ( ) . single ( ) ) ; java.lang.Thread . void ( NUMBER ) ; assertNotNull ( org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.DocumentWithTouchOnRead .class ) . toBlocking ( ) . single ( ) ) ; java.lang.Thread . void ( NUMBER ) ; assertNull ( org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findById ( java.lang.String , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.DocumentWithTouchOnRead .class ) . toBlocking ( ) . single ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ViewQuery org.springframework.data.couchbase.core.ViewQuery = ViewQuery . from ( STRING , STRING ) ; org.springframework.data.couchbase.core.ViewQuery . descending ( ) . includeDocsOrdered ( true ) ; java.lang.String java.lang.String = null ; java.util.List<org.springframework.data.couchbase.core.ReactiveBeer> < ReactiveBeer > java.util.List<org.springframework.data.couchbase.core.ReactiveBeer> = org.springframework.data.couchbase.core.RxJavaCouchbaseOperations . findByView ( org.springframework.data.couchbase.core.ViewQuery , ReactiveBeer .class ) . toList ( ) . toBlocking ( ) . single ( ) ; assertTrue ( org.springframework.data.couchbase.core.ViewQuery . isIncludeDocs ( ) ) ; assertTrue ( org.springframework.data.couchbase.core.ViewQuery . isOrderRetained ( ) ) ; assertEquals ( RawJsonDocument .class , org.springframework.data.couchbase.core.ViewQuery . includeDocsTarget ( ) ) ; for ( ReactiveBeer org.springframework.data.couchbase.core.ReactiveBeer : java.util.List<org.springframework.data.couchbase.core.ReactiveBeer> ) { if ( java.lang.String != null ) { assertThat ( org.springframework.data.couchbase.core.ReactiveBeer . getName ( ) + STRING + java.lang.String , org.springframework.data.couchbase.core.ReactiveBeer . getName ( ) . compareTo ( java.lang.String ) < NUMBER ) ; } java.lang.String = org.springframework.data.couchbase.core.ReactiveBeer . getName ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . get ( java.lang.String , RawJsonDocument .class ) ; assertNotNull ( org.springframework.data.couchbase.core.RawJsonDocument ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.core.RawJsonDocument . content ( ) ; assertNotNull ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.couchbase.core.ObjectMapper . readValue ( java.lang.String , new TypeReference < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ( ) {} ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MappingCouchbaseConverter . TYPEKEY_DEFAULT ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( java.lang.Class<> . java.lang.String ( ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MappingCouchbaseConverter . TYPEKEY_DEFAULT ) ) ; assertEquals ( boolean , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> , java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> , java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ) { this . java.lang.String = java.lang.String ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; this . java.util.List<java.lang.Integer> = java.util.List<java.lang.Integer> ; this . java.util.Map<java.lang.String,java.lang.Boolean> = java.util.Map<java.lang.String,java.lang.Boolean> ; this . java.util.Map<java.lang.String,java.lang.Integer> = java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( ) { return java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> ( ) { return java.util.Map<java.lang.String,java.lang.Boolean> ; }  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ( ) { return java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( final java.lang.String java.lang.String , final long long , int int ) { this . java.lang.String = java.lang.String ; this . long = long ; this . int = int ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> void void ( final long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> void ( final java.lang.String java.lang.String , final org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ) { this . java.lang.String = java.lang.String ; this . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type = org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ( ) { return org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ; }  <METHOD_END>
<METHOD_START> void void ( final org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ) { this . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type = org.springframework.data.couchbase.core.RxJavaCouchbaseTemplateTests.SimpleWithEnum.Type ; }  <METHOD_END>
<METHOD_START> void ( final java.lang.String java.lang.String , final java.lang.Class<java.lang.Integer> < java.lang.Integer > java.lang.Class<java.lang.Integer> ) { this . java.lang.String = java.lang.String ; this . java.lang.Class<java.lang.Integer> = java.lang.Class<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.Class<java.lang.Integer> < java.lang.Integer > java.lang.Class<java.lang.Integer> ( ) { return java.lang.Class<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.Class<java.lang.Integer> < java.lang.Integer > java.lang.Class<java.lang.Integer> ) { this . java.lang.Class<java.lang.Integer> = java.lang.Class<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + java.lang.String + '\'' + STRING + long + STRING + java.lang.String + '\'' + '}' ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , long long , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . long = long ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
