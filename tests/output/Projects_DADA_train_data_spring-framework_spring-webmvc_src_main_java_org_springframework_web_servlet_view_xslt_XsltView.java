<METHOD_START> public void void ( java.lang.Class<? extends javax.xml.transform.TransformerFactory> < ? extends javax.xml.transform.TransformerFactory > java.lang.Class<? extends javax.xml.transform.TransformerFactory> ) { this . java.lang.Class<? extends javax.xml.transform.TransformerFactory> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( javax.xml.transform.URIResolver javax.xml.transform.URIResolver ) { this . javax.xml.transform.URIResolver = javax.xml.transform.URIResolver ; }  <METHOD_END>
<METHOD_START> public void void ( javax.xml.transform.ErrorListener javax.xml.transform.ErrorListener ) { this . javax.xml.transform.ErrorListener = ( javax.xml.transform.ErrorListener != null ? javax.xml.transform.ErrorListener : new SimpleTransformErrorListener ( logger ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.web.servlet.view.xslt.BeansException { this . javax.xml.transform.TransformerFactory = javax.xml.transform.TransformerFactory ( this . java.lang.Class<> ) ; this . javax.xml.transform.TransformerFactory . void ( this . javax.xml.transform.ErrorListener ) ; if ( this . javax.xml.transform.URIResolver != null ) { this . javax.xml.transform.TransformerFactory . void ( this . javax.xml.transform.URIResolver ) ; } if ( this . boolean ) { this . javax.xml.transform.Templates = javax.xml.transform.Templates ( ) ; } }  <METHOD_END>
<METHOD_START> protected javax.xml.transform.TransformerFactory javax.xml.transform.TransformerFactory ( java.lang.Class<? extends javax.xml.transform.TransformerFactory> < ? extends javax.xml.transform.TransformerFactory > java.lang.Class<? extends javax.xml.transform.TransformerFactory> ) { if ( java.lang.Class<> != null ) { try { return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new javax.xml.transform.TransformerFactoryConfigurationError ( java.lang.Exception , STRING ) ; } } else { return javax.xml.transform.TransformerFactory . javax.xml.transform.TransformerFactory ( ) ; } }  <METHOD_END>
<METHOD_START> protected final javax.xml.transform.TransformerFactory javax.xml.transform.TransformerFactory ( ) { return this . javax.xml.transform.TransformerFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.xslt.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.xslt.HttpServletResponse )			throws java.lang.Exception { javax.xml.transform.Templates javax.xml.transform.Templates = this . javax.xml.transform.Templates ; if ( javax.xml.transform.Templates == null ) { javax.xml.transform.Templates = javax.xml.transform.Templates ( ) ; } javax.xml.transform.Transformer javax.xml.transform.Transformer = javax.xml.transform.Transformer ( javax.xml.transform.Templates ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xslt.HttpServletResponse , javax.xml.transform.Transformer ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.xslt.HttpServletResponse , javax.xml.transform.Transformer ) ; javax.xml.transform.Source javax.xml.transform.Source = null ; try { javax.xml.transform.Source = javax.xml.transform.Source ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( javax.xml.transform.Source == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.util.Map<java.lang.String,java.lang.Object> ) ; } javax.xml.transform.Transformer . void ( javax.xml.transform.Source , javax.xml.transform.Result ( org.springframework.web.servlet.view.xslt.HttpServletResponse ) ) ; } finally { void ( javax.xml.transform.Source ) ; } }  <METHOD_END>
<METHOD_START> protected javax.xml.transform.Result javax.xml.transform.Result ( HttpServletResponse org.springframework.web.servlet.view.xslt.HttpServletResponse ) throws java.lang.Exception { return new javax.xml.transform.stream.StreamResult ( org.springframework.web.servlet.view.xslt.HttpServletResponse . getOutputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> protected javax.xml.transform.Source javax.xml.transform.Source ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws java.lang.Exception { if ( this . java.lang.String != null ) { return javax.xml.transform.Source ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( this . java.lang.String ) ) ; } java.lang.Object java.lang.Object = CollectionUtils . findValueOfType ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) , java.lang.Class<?>[] ( ) ) ; return ( java.lang.Object != null ? javax.xml.transform.Source ( java.lang.Object ) : null ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { javax.xml.transform.Source .class , org.w3c.dom.Document .class , org.w3c.dom.Node .class , java.io.Reader .class , java.io.InputStream .class , Resource .class } ; }  <METHOD_END>
<METHOD_START> protected javax.xml.transform.Source javax.xml.transform.Source ( java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( java.lang.Object instanceof javax.xml.transform.Source ) { return ( javax.xml.transform.Source ) java.lang.Object ; } else if ( java.lang.Object instanceof org.w3c.dom.Document ) { return new javax.xml.transform.dom.DOMSource ( ( ( org.w3c.dom.Document ) java.lang.Object ) . org.w3c.dom.Element ( ) ) ; } else if ( java.lang.Object instanceof org.w3c.dom.Node ) { return new javax.xml.transform.dom.DOMSource ( ( org.w3c.dom.Node ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.io.Reader ) { return new javax.xml.transform.stream.StreamSource ( ( java.io.Reader ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.io.InputStream ) { return new javax.xml.transform.stream.StreamSource ( ( java.io.InputStream ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Resource ) { Resource org.springframework.web.servlet.view.xslt.Resource = ( Resource ) java.lang.Object ; return new javax.xml.transform.stream.StreamSource ( org.springframework.web.servlet.view.xslt.Resource . getInputStream ( ) , org.springframework.web.servlet.view.xslt.Resource . getURI ( ) . toASCIIString ( ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletResponse org.springframework.web.servlet.view.xslt.HttpServletResponse , javax.xml.transform.Transformer javax.xml.transform.Transformer ) { void ( java.util.Map<java.lang.String,java.lang.Object> , javax.xml.transform.Transformer ) ; void ( javax.xml.transform.Transformer ) ; void ( javax.xml.transform.Transformer ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( javax.xml.transform.Transformer javax.xml.transform.Transformer ) { if ( this . boolean ) { TransformerUtils . enableIndenting ( javax.xml.transform.Transformer ) ; } else { TransformerUtils . disableIndenting ( javax.xml.transform.Transformer ) ; } }  <METHOD_END>
<METHOD_START> protected final void void ( javax.xml.transform.Transformer javax.xml.transform.Transformer ) { if ( this . java.util.Properties != null ) { java.util.Enumeration<?> < ? > java.util.Enumeration<?> = this . java.util.Properties . java.util.Enumeration<?> ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; javax.xml.transform.Transformer . void ( java.lang.String , this . java.util.Properties . java.lang.String ( java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> protected final void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , javax.xml.transform.Transformer javax.xml.transform.Transformer ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { javax.xml.transform.Transformer . void ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletResponse org.springframework.web.servlet.view.xslt.HttpServletResponse , javax.xml.transform.Transformer javax.xml.transform.Transformer ) { java.lang.String java.lang.String = getContentType ( ) ; java.lang.String java.lang.String = javax.xml.transform.Transformer . java.lang.String ( javax.xml.transform.OutputKeys . java.lang.String ) ; java.lang.String java.lang.String = javax.xml.transform.Transformer . java.lang.String ( javax.xml.transform.OutputKeys . java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.lang.String ; } if ( StringUtils . hasText ( java.lang.String ) ) { if ( java.lang.String != null && ! java.lang.String . java.lang.String ( ) . boolean ( WebUtils . CONTENT_TYPE_CHARSET_PREFIX ) ) { java.lang.String = java.lang.String + WebUtils . CONTENT_TYPE_CHARSET_PREFIX + java.lang.String ; } } org.springframework.web.servlet.view.xslt.HttpServletResponse . setContentType ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private javax.xml.transform.Templates javax.xml.transform.Templates ( ) org.springframework.web.servlet.view.xslt.ApplicationContextException { javax.xml.transform.Source javax.xml.transform.Source = javax.xml.transform.Source ( ) ; try { javax.xml.transform.Templates javax.xml.transform.Templates = this . javax.xml.transform.TransformerFactory . javax.xml.transform.Templates ( javax.xml.transform.Source ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + javax.xml.transform.Templates + STRING ) ; } return javax.xml.transform.Templates ; } catch ( javax.xml.transform.TransformerConfigurationException javax.xml.transform.TransformerConfigurationException ) { throw new ApplicationContextException ( STRING + getUrl ( ) + STRING , javax.xml.transform.TransformerConfigurationException ) ; } finally { void ( javax.xml.transform.Source ) ; } }  <METHOD_END>
<METHOD_START> protected javax.xml.transform.Transformer javax.xml.transform.Transformer ( javax.xml.transform.Templates javax.xml.transform.Templates ) throws javax.xml.transform.TransformerConfigurationException { javax.xml.transform.Transformer javax.xml.transform.Transformer = javax.xml.transform.Templates . javax.xml.transform.Transformer ( ) ; if ( this . javax.xml.transform.URIResolver != null ) { javax.xml.transform.Transformer . void ( this . javax.xml.transform.URIResolver ) ; } return javax.xml.transform.Transformer ; }  <METHOD_END>
<METHOD_START> protected javax.xml.transform.Source javax.xml.transform.Source ( ) { java.lang.String java.lang.String = getUrl ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } try { Resource org.springframework.web.servlet.view.xslt.Resource = getApplicationContext ( ) . getResource ( java.lang.String ) ; return new javax.xml.transform.stream.StreamSource ( org.springframework.web.servlet.view.xslt.Resource . getInputStream ( ) , org.springframework.web.servlet.view.xslt.Resource . getURI ( ) . toASCIIString ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new ApplicationContextException ( STRING + java.lang.String + STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.transform.Source javax.xml.transform.Source ) { if ( javax.xml.transform.Source instanceof javax.xml.transform.stream.StreamSource ) { javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = ( javax.xml.transform.stream.StreamSource ) javax.xml.transform.Source ; if ( javax.xml.transform.stream.StreamSource . java.io.Reader ( ) != null ) { try { javax.xml.transform.stream.StreamSource . java.io.Reader ( ) . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } if ( javax.xml.transform.stream.StreamSource . java.io.InputStream ( ) != null ) { try { javax.xml.transform.stream.StreamSource . java.io.InputStream ( ) . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } }  <METHOD_END>
