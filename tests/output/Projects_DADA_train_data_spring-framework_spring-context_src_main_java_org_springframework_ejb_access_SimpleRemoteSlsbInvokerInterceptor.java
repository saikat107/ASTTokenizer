<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object = null ; try { java.lang.Object = java.lang.Object ( ) ; return RmiClientInterceptorUtils . invokeRemoteMethod ( org.springframework.ejb.access.MethodInvocation , java.lang.Object ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new RemoteLookupFailureException ( STRING + getJndiName ( ) + STRING , javax.naming.NamingException ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( java.lang.Throwable instanceof java.rmi.RemoteException ) { java.rmi.RemoteException java.rmi.RemoteException = ( java.rmi.RemoteException ) java.lang.Throwable ; throw RmiClientInterceptorUtils . convertRmiAccessException ( org.springframework.ejb.access.MethodInvocation . getMethod ( ) , java.rmi.RemoteException , isConnectFailure ( java.rmi.RemoteException ) , getJndiName ( ) ) ; } else if ( java.lang.Throwable instanceof CreateException ) { throw RmiClientInterceptorUtils . convertRmiAccessException ( org.springframework.ejb.access.MethodInvocation . getMethod ( ) , java.lang.Throwable , STRING + getJndiName ( ) + STRING ) ; } throw java.lang.Throwable ; } finally { if ( java.lang.Object instanceof EJBObject ) { void ( ( EJBObject ) java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException , java.lang.reflect.InvocationTargetException { if ( this . boolean ) { synchronized ( this . java.lang.Object ) { if ( this . java.lang.Object == null ) { this . java.lang.Object = newSessionBeanInstance ( ) ; } return this . java.lang.Object ; } } else { return newSessionBeanInstance ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( EJBObject org.springframework.ejb.access.EJBObject ) { if ( ! this . boolean ) { removeSessionBeanInstance ( org.springframework.ejb.access.EJBObject ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) javax.naming.NamingException { super. refreshHome ( ) ; if ( this . boolean ) { synchronized ( this . java.lang.Object ) { this . java.lang.Object = null ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { synchronized ( this . java.lang.Object ) { if ( this . java.lang.Object instanceof EJBObject ) { removeSessionBeanInstance ( ( EJBObject ) this . java.lang.Object ) ; } } } }  <METHOD_END>
