<METHOD_START> protected void ( ) { this( org.springframework.web.socket.server.support.RequestUpgradeStrategy ( ) ); }  <METHOD_END>
<METHOD_START> protected void ( RequestUpgradeStrategy org.springframework.web.socket.server.support.RequestUpgradeStrategy ) { Assert . notNull ( org.springframework.web.socket.server.support.RequestUpgradeStrategy , STRING ) ; this . org.springframework.web.socket.server.support.RequestUpgradeStrategy = org.springframework.web.socket.server.support.RequestUpgradeStrategy ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.socket.server.support.RequestUpgradeStrategy org.springframework.web.socket.server.support.RequestUpgradeStrategy ( ) { java.lang.String java.lang.String ; if ( boolean ) { java.lang.String = STRING ; } else if ( boolean ) { java.lang.String = STRING ; } else if ( boolean ) { java.lang.String = STRING ; } else if ( boolean ) { java.lang.String = STRING ; } else if ( boolean ) { java.lang.String = STRING ; } else if ( boolean ) { java.lang.String = STRING ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , org.springframework.web.socket.server.support.AbstractHandshakeHandler .class . java.lang.ClassLoader ( ) ) ; return ( RequestUpgradeStrategy ) ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.server.support.RequestUpgradeStrategy org.springframework.web.socket.server.support.RequestUpgradeStrategy ( ) { return this . org.springframework.web.socket.server.support.RequestUpgradeStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.util.List<java.lang.String> . void ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ this . java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! boolean ( ) ) { this . boolean = true ; void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . org.springframework.web.socket.server.support.RequestUpgradeStrategy instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.server.support.RequestUpgradeStrategy ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) ) { this . boolean = false ; void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . org.springframework.web.socket.server.support.RequestUpgradeStrategy instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.server.support.RequestUpgradeStrategy ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.support.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws org.springframework.web.socket.server.support.HandshakeFailureException { WebSocketHttpHeaders org.springframework.web.socket.server.support.WebSocketHttpHeaders = new WebSocketHttpHeaders ( org.springframework.web.socket.server.support.ServerHttpRequest . getHeaders ( ) ) ; if ( org.springframework.web.socket.server.support.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.server.support.Log . trace ( STRING + org.springframework.web.socket.server.support.ServerHttpRequest . getURI ( ) + STRING + org.springframework.web.socket.server.support.WebSocketHttpHeaders ) ; } try { if ( HttpMethod . GET != org.springframework.web.socket.server.support.ServerHttpRequest . getMethod ( ) ) { org.springframework.web.socket.server.support.ServerHttpResponse . setStatusCode ( HttpStatus . METHOD_NOT_ALLOWED ) ; org.springframework.web.socket.server.support.ServerHttpResponse . getHeaders ( ) . setAllow ( java.util.Collections . java.util.Set ( HttpMethod . GET ) ) ; if ( org.springframework.web.socket.server.support.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.server.support.Log . error ( STRING + org.springframework.web.socket.server.support.ServerHttpRequest . getMethod ( ) ) ; } return false ; } if ( ! STRING . boolean ( org.springframework.web.socket.server.support.WebSocketHttpHeaders . getUpgrade ( ) ) ) { void ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse ) ; return false ; } if ( ! org.springframework.web.socket.server.support.WebSocketHttpHeaders . getConnection ( ) . contains ( STRING ) && ! org.springframework.web.socket.server.support.WebSocketHttpHeaders . getConnection ( ) . contains ( STRING ) ) { void ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse ) ; return false ; } if ( ! boolean ( org.springframework.web.socket.server.support.WebSocketHttpHeaders ) ) { void ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse ) ; return false ; } if ( ! boolean ( org.springframework.web.socket.server.support.ServerHttpRequest ) ) { org.springframework.web.socket.server.support.ServerHttpResponse . setStatusCode ( HttpStatus . FORBIDDEN ) ; return false ; } java.lang.String java.lang.String = org.springframework.web.socket.server.support.WebSocketHttpHeaders . getSecWebSocketKey ( ) ; if ( java.lang.String == null ) { if ( org.springframework.web.socket.server.support.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.server.support.Log . error ( STRING ) ; } org.springframework.web.socket.server.support.ServerHttpResponse . setStatusCode ( HttpStatus . BAD_REQUEST ) ; return false ; } } catch ( java.io.IOException java.io.IOException ) { throw new HandshakeFailureException ( STRING + org.springframework.web.socket.server.support.ServerHttpRequest . getURI ( ) , java.io.IOException ) ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.web.socket.server.support.WebSocketHttpHeaders . getSecWebSocketProtocol ( ) , org.springframework.web.socket.server.support.WebSocketHandler ) ; java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> = org.springframework.web.socket.server.support.WebSocketHttpHeaders . getSecWebSocketExtensions ( ) ; java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> = this . org.springframework.web.socket.server.support.RequestUpgradeStrategy . getSupportedExtensions ( org.springframework.web.socket.server.support.ServerHttpRequest ) ; java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> = java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> ( org.springframework.web.socket.server.support.ServerHttpRequest , java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> , java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> ) ; java.security.Principal java.security.Principal = java.security.Principal ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; if ( org.springframework.web.socket.server.support.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.server.support.Log . trace ( STRING + java.lang.String + STRING + java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> ) ; } this . org.springframework.web.socket.server.support.RequestUpgradeStrategy . upgrade ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , java.lang.String , java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> , java.security.Principal , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; return true ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.support.ServerHttpResponse ) throws java.io.IOException { if ( org.springframework.web.socket.server.support.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.server.support.Log . error ( STRING + org.springframework.web.socket.server.support.ServerHttpRequest . getHeaders ( ) . getUpgrade ( ) ) ; } org.springframework.web.socket.server.support.ServerHttpResponse . setStatusCode ( HttpStatus . BAD_REQUEST ) ; org.springframework.web.socket.server.support.ServerHttpResponse . getBody ( ) . write ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.support.ServerHttpResponse ) throws java.io.IOException { if ( org.springframework.web.socket.server.support.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.server.support.Log . error ( STRING + org.springframework.web.socket.server.support.ServerHttpRequest . getHeaders ( ) . getConnection ( ) ) ; } org.springframework.web.socket.server.support.ServerHttpResponse . setStatusCode ( HttpStatus . BAD_REQUEST ) ; org.springframework.web.socket.server.support.ServerHttpResponse . getBody ( ) . write ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( WebSocketHttpHeaders org.springframework.web.socket.server.support.WebSocketHttpHeaders ) { java.lang.String java.lang.String = org.springframework.web.socket.server.support.WebSocketHttpHeaders . getSecWebSocketVersion ( ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . java.lang.String ( ) . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( ) { return this . org.springframework.web.socket.server.support.RequestUpgradeStrategy . getSupportedVersions ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.support.ServerHttpResponse ) { if ( org.springframework.web.socket.server.support.Log . isErrorEnabled ( ) ) { java.lang.String java.lang.String = org.springframework.web.socket.server.support.ServerHttpRequest . getHeaders ( ) . getFirst ( STRING ) ; org.springframework.web.socket.server.support.Log . error ( STRING + java.lang.String + STRING + java.util.Arrays . java.lang.String ( java.lang.String[] ( ) ) ) ; } org.springframework.web.socket.server.support.ServerHttpResponse . setStatusCode ( HttpStatus . UPGRADE_REQUIRED ) ; org.springframework.web.socket.server.support.ServerHttpResponse . getHeaders ( ) . set ( WebSocketHttpHeaders . SEC_WEBSOCKET_VERSION , StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest ) { return true ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler ) { if ( java.util.List<java.lang.String> != null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.web.socket.server.support.WebSocketHandler ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ) { return java.lang.String ; } if ( this . java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ) { return java.lang.String ; } } } return null ; }  <METHOD_END>
<METHOD_START> protected final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler ) { WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler = WebSocketHandlerDecorator . unwrap ( org.springframework.web.socket.server.support.WebSocketHandler ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = null ; if ( org.springframework.web.socket.server.support.WebSocketHandler instanceof SubProtocolCapable ) { java.util.List<java.lang.String> = ( ( SubProtocolCapable ) org.springframework.web.socket.server.support.WebSocketHandler ) . getSubProtocols ( ) ; } return ( java.util.List<java.lang.String> != null ? java.util.List<java.lang.String> : java.util.Collections . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> , java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> ) { java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> . size ( ) ) ; for ( WebSocketExtension org.springframework.web.socket.server.support.WebSocketExtension : java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> ) { if ( java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> . contains ( org.springframework.web.socket.server.support.WebSocketExtension ) ) { java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> . add ( org.springframework.web.socket.server.support.WebSocketExtension ) ; } } return java.util.List<org.springframework.web.socket.server.support.WebSocketExtension> ; }  <METHOD_END>
<METHOD_START> protected java.security.Principal java.security.Principal ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return org.springframework.web.socket.server.support.ServerHttpRequest . getPrincipal ( ) ; }  <METHOD_END>
