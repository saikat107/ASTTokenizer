<METHOD_START> @ java.lang.Override protected org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory = new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ; ConfigurableMongoDbMessageStore org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore = new ConfigurableMongoDbMessageStore ( org.springframework.integration.mongodb.store.MongoDbFactory ) ; GenericApplicationContext org.springframework.integration.mongodb.store.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.mongodb.store.GenericApplicationContext . refresh ( ) ; org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore . setApplicationContext ( org.springframework.integration.mongodb.store.GenericApplicationContext ) ; org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore . afterPropertiesSet ( ) ; return org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.mongodb.store.MessageStore org.springframework.integration.mongodb.store.MessageStore ( ) java.lang.Exception { return this . org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { super. testWithAggregatorWithShutdown ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) @ MongoDbAvailable public void void ( ) java.lang.Exception { cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; StopWatch org.springframework.integration.mongodb.store.StopWatch = new StopWatch ( STRING ) ; int int = NUMBER ; void ( org.springframework.integration.mongodb.store.StopWatch , int , true ) ; void ( org.springframework.integration.mongodb.store.StopWatch , int , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( StopWatch org.springframework.integration.mongodb.store.StopWatch , int int , boolean boolean ) { ClassPathXmlApplicationContext org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageGroupStoreTests> ( ) ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . refresh ( ) ; AbstractMessageGroupStore org.springframework.integration.mongodb.store.AbstractMessageGroupStore = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING , AbstractMessageGroupStore .class ) ; org.springframework.integration.mongodb.store.AbstractMessageGroupStore . setLazyLoadMessageGroups ( boolean ) ; MessageChannel org.springframework.integration.mongodb.store.MessageChannel = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.mongodb.store.QueueChannel = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.mongodb.store.StopWatch . start ( boolean ? STRING : STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.integration.mongodb.store.MessageChannel . send ( MessageBuilder . withPayload ( STRING + int ) . setCorrelationId ( NUMBER ) . build ( ) ) ; } assertNotNull ( org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.mongodb.store.StopWatch . stop ( ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; ClassPathXmlApplicationContext org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageGroupStoreTests> ( ) ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . refresh ( ) ; org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageGroupStoreTests.TestGateway org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageGroupStoreTests.TestGateway = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageGroupStoreTests.TestGateway .class ) ; java.lang.String java.lang.String = org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageGroupStoreTests.TestGateway . java.lang.String ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { this . cleanupCollections ( new SimpleMongoDbFactory ( new MongoClient ( ) , STRING ) ) ; ClassPathXmlApplicationContext org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageGroupStoreTests> ( ) ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( PriorityChannel .class ) ) ; QueueChannel org.springframework.integration.mongodb.store.QueueChannel = ( QueueChannel ) java.lang.Object ; Message < java.lang.String > org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.QueueChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , - NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.QueueChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.QueueChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.QueueChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.QueueChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.mongodb.store.QueueChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.mongodb.store.QueueChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) ; org.springframework.integration.mongodb.store.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.mongodb.store.Message<?> < ? > org.springframework.integration.mongodb.store.Message<?> ( Document org.springframework.integration.mongodb.store.Document ) { return MessageBuilder . withPayload ( org.springframework.integration.mongodb.store.Document . get ( STRING ) ) . copyHeaders ( ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.integration.mongodb.store.Document . get ( STRING ) ) . build ( ) ; }  <METHOD_END>
