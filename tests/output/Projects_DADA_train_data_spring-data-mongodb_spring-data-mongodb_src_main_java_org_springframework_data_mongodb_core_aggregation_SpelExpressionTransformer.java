<METHOD_START> public void ( ) { java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> < org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode> < ? extends ExpressionNode > > java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> = new java.util.ArrayList<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> < org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode> < ? extends ExpressionNode > > ( ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.OperatorNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.LiteralNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.IndexerNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.InlineListNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.PropertyOrFieldReferenceNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.CompoundExpressionNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.MethodReferenceNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.NotOperatorNodeConversion ( this ) ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> . add ( new org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ValueRetrievingNodeConversion ( this ) ) ; this . java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> = java.util.Collections . java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> ( java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object ... java.lang.Object[] ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , STRING ) ; Assert . notNull ( java.lang.Object[] , STRING ) ; SpelExpression org.springframework.data.mongodb.core.aggregation.SpelExpression = ( SpelExpression ) org.springframework.data.mongodb.core.aggregation.SpelExpressionParser . parseExpression ( java.lang.String ) ; ExpressionState org.springframework.data.mongodb.core.aggregation.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( java.lang.Object[] ) , org.springframework.data.mongodb.core.aggregation.SpelParserConfiguration ) ; ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode = ExpressionNode . from ( org.springframework.data.mongodb.core.aggregation.SpelExpression . getAST ( ) , org.springframework.data.mongodb.core.aggregation.ExpressionState ) ; return java.lang.Object ( new AggregationExpressionTransformationContext < ExpressionNode > ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , null , null , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < ExpressionNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) { return org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . getCurrentNode ( ) ) . convert ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<org.springframework.data.mongodb.core.aggregation.ExpressionNode> < ExpressionNode > org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { for ( org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode> < ? extends ExpressionNode > org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode> : java.util.List<org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode>> ) { if ( org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<> . boolean ( org.springframework.data.mongodb.core.aggregation.ExpressionNode ) ) { return ( org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<org.springframework.data.mongodb.core.aggregation.ExpressionNode> < ExpressionNode > ) org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion<> ; } } throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.mongodb.core.aggregation.ExpressionNode + STRING + org.springframework.data.mongodb.core.aggregation.ExpressionNode . getClass ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer , STRING ) ; this . java.lang.Class<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode> = ( java.lang.Class<? extends org.springframework.data.mongodb.core.aggregation.ExpressionNode> < ? extends ExpressionNode > ) GenericTypeResolver . resolveTypeArgument ( this . java.lang.Class<? extends org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion> ( ) , org.springframework.data.mongodb.core.aggregation.SpelExpressionTransformer.ExpressionNodeConversion .class ) ; this . org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return java.lang.Class<> . boolean ( org.springframework.data.mongodb.core.aggregation.ExpressionNode . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode , AggregationExpressionTransformationContext < ? > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<?> ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<> , STRING ) ; return java.lang.Object ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<> . getParentNode ( ) , null , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode , ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode , Document org.springframework.data.mongodb.core.aggregation.Document , AggregationExpressionTransformationContext < ? > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<?> ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<> , STRING ) ; return java.lang.Object ( new AggregationExpressionTransformationContext < ExpressionNode > ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , org.springframework.data.mongodb.core.aggregation.ExpressionNode , org.springframework.data.mongodb.core.aggregation.Document , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<> . getAggregationContext ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < ExpressionNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) { return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer . transform ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < T > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<T> );  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < OperatorNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> ) { OperatorNode org.springframework.data.mongodb.core.aggregation.OperatorNode = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> . getCurrentNode ( ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> , org.springframework.data.mongodb.core.aggregation.OperatorNode ) ; if ( org.springframework.data.mongodb.core.aggregation.OperatorNode . isLogicalOperator ( ) ) { for ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode : org.springframework.data.mongodb.core.aggregation.OperatorNode ) { java.lang.Object ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , org.springframework.data.mongodb.core.aggregation.OperatorNode , org.springframework.data.mongodb.core.aggregation.Document , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> ) ; } return org.springframework.data.mongodb.core.aggregation.Document ; } java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.mongodb.core.aggregation.OperatorNode . getLeft ( ) , org.springframework.data.mongodb.core.aggregation.OperatorNode , org.springframework.data.mongodb.core.aggregation.Document , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> ) ; if ( org.springframework.data.mongodb.core.aggregation.OperatorNode . isUnaryMinus ( ) ) { return java.lang.Object ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> , java.lang.Object ) ; } java.lang.Object ( org.springframework.data.mongodb.core.aggregation.OperatorNode . getRight ( ) , org.springframework.data.mongodb.core.aggregation.OperatorNode , org.springframework.data.mongodb.core.aggregation.Document , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> ) ; return org.springframework.data.mongodb.core.aggregation.Document ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( AggregationExpressionTransformationContext < OperatorNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> , OperatorNode org.springframework.data.mongodb.core.aggregation.OperatorNode ) { Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( org.springframework.data.mongodb.core.aggregation.OperatorNode . getMongoOperator ( ) , new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ) ; if ( ! org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> . hasPreviousOperation ( ) ) { return org.springframework.data.mongodb.core.aggregation.Document ; } if ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> . parentIsSameOperation ( ) ) { org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> . getPreviousOperationObject ( ) ; } else if ( ! org.springframework.data.mongodb.core.aggregation.OperatorNode . isUnaryOperator ( ) ) { org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.OperatorNode> . addToPreviousOperation ( org.springframework.data.mongodb.core.aggregation.Document ) ; } return org.springframework.data.mongodb.core.aggregation.Document ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ExpressionTransformationContextSupport < OperatorNode > org.springframework.data.mongodb.core.aggregation.ExpressionTransformationContextSupport<org.springframework.data.mongodb.core.aggregation.OperatorNode> , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = java.lang.Object instanceof java.lang.Number ? java.lang.Object : new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( java.lang.Integer . java.lang.Integer ( - NUMBER ) , java.lang.Object ) ) ; if ( java.lang.Object != null && org.springframework.data.mongodb.core.aggregation.ExpressionTransformationContextSupport<org.springframework.data.mongodb.core.aggregation.OperatorNode> . hasPreviousOperation ( ) ) { org.springframework.data.mongodb.core.aggregation.ExpressionTransformationContextSupport<org.springframework.data.mongodb.core.aggregation.OperatorNode> . addToPreviousOperation ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isMathematicalOperation ( ) || org.springframework.data.mongodb.core.aggregation.ExpressionNode . isLogicalOperator ( ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < ExpressionNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) { return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . addToPreviousOrReturn ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . getCurrentNode ( ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( Indexer .class ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < ExpressionNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) { ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . getCurrentNode ( ) ; if ( ! org.springframework.data.mongodb.core.aggregation.ExpressionNode . hasChildren ( ) ) { return null ; } return java.lang.Object ( org.springframework.data.mongodb.core.aggregation.ExpressionNode . getChild ( NUMBER ) , org.springframework.data.mongodb.core.aggregation.ExpressionNode , null , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( InlineList .class ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < ExpressionNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . getFieldReference ( ) . toString ( ) ; return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . addToPreviousOrReturn ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( PropertyOrFieldReference .class ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < LiteralNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.LiteralNode> ) { LiteralNode org.springframework.data.mongodb.core.aggregation.LiteralNode = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.LiteralNode> . getCurrentNode ( ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.aggregation.LiteralNode . getValue ( ) ; if ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.LiteralNode> . hasPreviousOperation ( ) ) { if ( org.springframework.data.mongodb.core.aggregation.LiteralNode . isUnaryMinus ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.LiteralNode> . getParentNode ( ) ) ) { return NumberUtils . convertNumberToTargetClass ( ( ( java.lang.Number ) java.lang.Object ) . double ( ) * - NUMBER , ( java.lang.Class<java.lang.Number> < java.lang.Number > ) java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.LiteralNode> . addToPreviousOperation ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isLiteral ( ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < MethodReferenceNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.MethodReferenceNode> ) { MethodReferenceNode org.springframework.data.mongodb.core.aggregation.MethodReferenceNode = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.MethodReferenceNode> . getCurrentNode ( ) ; AggregationMethodReference org.springframework.data.mongodb.core.aggregation.AggregationMethodReference = org.springframework.data.mongodb.core.aggregation.MethodReferenceNode . getMethodReference ( ) ; java.lang.Object java.lang.Object = null ; if ( ObjectUtils . nullSafeEquals ( org.springframework.data.mongodb.core.aggregation.AggregationMethodReference . getArgumentType ( ) , ArgumentType . SINGLE ) ) { java.lang.Object = java.lang.Object ( org.springframework.data.mongodb.core.aggregation.MethodReferenceNode . getChild ( NUMBER ) , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.MethodReferenceNode> ) ; } else if ( ObjectUtils . nullSafeEquals ( org.springframework.data.mongodb.core.aggregation.AggregationMethodReference . getArgumentType ( ) , ArgumentType . MAP ) ) { Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) ; int int = NUMBER ; for( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode : org.springframework.data.mongodb.core.aggregation.MethodReferenceNode ) { org.springframework.data.mongodb.core.aggregation.Document . put ( org.springframework.data.mongodb.core.aggregation.AggregationMethodReference . getArgumentMap ( ) [ int ++ ] , java.lang.Object ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.MethodReferenceNode> ) ) ; } java.lang.Object = org.springframework.data.mongodb.core.aggregation.Document ; } else { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode : org.springframework.data.mongodb.core.aggregation.MethodReferenceNode ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.MethodReferenceNode> ) ) ; } java.lang.Object = java.util.List<java.lang.Object> ; } return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.MethodReferenceNode> . addToPreviousOrReturn ( new Document ( org.springframework.data.mongodb.core.aggregation.AggregationMethodReference . getMongoOperator ( ) , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < ExpressionNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) { ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . getCurrentNode ( ) ; if ( org.springframework.data.mongodb.core.aggregation.ExpressionNode . hasfirstChildNotOfType ( Indexer .class ) ) { return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . addToPreviousOrReturn ( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . getFieldReference ( ) . toString ( ) ) ; } return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . addToPreviousOrReturn ( org.springframework.data.mongodb.core.aggregation.ExpressionNode . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( CompoundExpression .class ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < NotOperatorNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.NotOperatorNode> ) { NotOperatorNode org.springframework.data.mongodb.core.aggregation.NotOperatorNode = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.NotOperatorNode> . getCurrentNode ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode : org.springframework.data.mongodb.core.aggregation.NotOperatorNode ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.mongodb.core.aggregation.ExpressionNode , org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.NotOperatorNode> ) ) ; } return org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.NotOperatorNode> . addToPreviousOrReturn ( new Document ( org.springframework.data.mongodb.core.aggregation.NotOperatorNode . getMongoOperator ( ) , java.util.List<java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( OperatorNot .class ) ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpressionTransformer org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ) { super( org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( AggregationExpressionTransformationContext < ExpressionNode > org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.aggregation.AggregationExpressionTransformationContext<org.springframework.data.mongodb.core.aggregation.ExpressionNode> . getCurrentNode ( ) . getValue ( ) ; return ObjectUtils . isArray ( java.lang.Object ) ? java.util.Arrays . java.util.List ( ObjectUtils . toObjectArray ( java.lang.Object ) ) : java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ExpressionNode org.springframework.data.mongodb.core.aggregation.ExpressionNode ) { return org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( InlineMap .class ) || org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( InlineList .class ) || org.springframework.data.mongodb.core.aggregation.ExpressionNode . isOfType ( ConstructorReference .class ) ; }  <METHOD_END>
