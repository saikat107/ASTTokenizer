<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> = new java.util.ArrayList<org.springframework.http.client.ClientHttpRequestInterceptor> <> ( ) ; java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . add ( new org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ( ) ) ; java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . add ( new org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ( ) ) ; java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . add ( new org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ( ) ) ; org.springframework.http.client.InterceptingClientHttpRequestFactory = new InterceptingClientHttpRequestFactory ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock , java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.InterceptingClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ; ClientHttpResponse org.springframework.http.client.ClientHttpResponse = org.springframework.http.client.ClientHttpRequest . execute ( ) ; assertTrue ( ( ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ) java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . get ( NUMBER ) ) . boolean ) ; assertTrue ( ( ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ) java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . get ( NUMBER ) ) . boolean ) ; assertTrue ( ( ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ) java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . get ( NUMBER ) ) . boolean ) ; assertTrue ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock . boolean ) ; assertSame ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.ResponseMock , org.springframework.http.client.ClientHttpResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> = new java.util.ArrayList<org.springframework.http.client.ClientHttpRequestInterceptor> <> ( ) ; java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . add ( new ClientHttpRequestInterceptor ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.ResponseMock ; } } ) ; java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . add ( new org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ( ) ) ; org.springframework.http.client.InterceptingClientHttpRequestFactory = new InterceptingClientHttpRequestFactory ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock , java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.InterceptingClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ; ClientHttpResponse org.springframework.http.client.ClientHttpResponse = org.springframework.http.client.ClientHttpRequest . execute ( ) ; assertFalse ( ( ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.NoOpInterceptor ) java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> . get ( NUMBER ) ) . boolean ) ; assertFalse ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock . boolean ) ; assertSame ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.ResponseMock , org.springframework.http.client.ClientHttpResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.ResponseMock ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; ClientHttpRequestInterceptor org.springframework.http.client.ClientHttpRequestInterceptor = new ClientHttpRequestInterceptor ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { HttpRequestWrapper org.springframework.http.client.HttpRequestWrapper = new HttpRequestWrapper ( org.springframework.http.client.HttpRequest ) ; org.springframework.http.client.HttpRequestWrapper . getHeaders ( ) . add ( java.lang.String , java.lang.String ) ; return org.springframework.http.client.ClientHttpRequestExecution . execute ( org.springframework.http.client.HttpRequestWrapper , byte[] ) ; } } ; org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock = new org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( ) java.io.IOException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.client.HttpHeaders ( ) . get ( java.lang.String ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; return super. org.springframework.http.client.ClientHttpResponse ( ) ; } } ; org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock . org.springframework.http.client.HttpHeaders ( ) . add ( java.lang.String , java.lang.String ) ; org.springframework.http.client.InterceptingClientHttpRequestFactory = new InterceptingClientHttpRequestFactory ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock , java.util.Collections . java.util.List ( org.springframework.http.client.ClientHttpRequestInterceptor ) ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.InterceptingClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ; org.springframework.http.client.ClientHttpRequest . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { HttpRequestWrapper org.springframework.http.client.HttpRequestWrapper = new HttpRequestWrapper ( org.springframework.http.client.HttpRequest ) ; org.springframework.http.client.HttpRequestWrapper . getHeaders ( ) . add ( java.lang.String , java.lang.String ) ; return org.springframework.http.client.ClientHttpRequestExecution . execute ( org.springframework.http.client.HttpRequestWrapper , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( ) java.io.IOException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.client.HttpHeaders ( ) . get ( java.lang.String ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; return super. org.springframework.http.client.ClientHttpResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.net.URI java.net.URI = new java.net.URI ( STRING ) ; ClientHttpRequestInterceptor org.springframework.http.client.ClientHttpRequestInterceptor = new ClientHttpRequestInterceptor ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.ClientHttpRequestExecution . execute ( new HttpRequestWrapper ( org.springframework.http.client.HttpRequest ) { @ java.lang.Override public java.net.URI java.net.URI ( ) { return java.net.URI ; } } , byte[] ) ; } } ; org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock = new org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { assertEquals ( java.net.URI , java.net.URI ) ; return super. org.springframework.http.client.ClientHttpRequest ( java.net.URI , org.springframework.http.client.HttpMethod ) ; } } ; org.springframework.http.client.InterceptingClientHttpRequestFactory = new InterceptingClientHttpRequestFactory ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock , java.util.Collections . java.util.List ( org.springframework.http.client.ClientHttpRequestInterceptor ) ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.InterceptingClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ; org.springframework.http.client.ClientHttpRequest . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.ClientHttpRequestExecution . execute ( new HttpRequestWrapper ( org.springframework.http.client.HttpRequest ) { @ java.lang.Override public java.net.URI java.net.URI ( ) { return java.net.URI ; } } , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { assertEquals ( java.net.URI , java.net.URI ) ; return super. org.springframework.http.client.ClientHttpRequest ( java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final HttpMethod org.springframework.http.client.HttpMethod = HttpMethod . POST ; ClientHttpRequestInterceptor org.springframework.http.client.ClientHttpRequestInterceptor = new ClientHttpRequestInterceptor ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.ClientHttpRequestExecution . execute ( new HttpRequestWrapper ( org.springframework.http.client.HttpRequest ) { @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return org.springframework.http.client.HttpMethod ; } } , byte[] ) ; } } ; org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock = new org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { assertEquals ( org.springframework.http.client.HttpMethod , org.springframework.http.client.HttpMethod ) ; return super. org.springframework.http.client.ClientHttpRequest ( java.net.URI , org.springframework.http.client.HttpMethod ) ; } } ; org.springframework.http.client.InterceptingClientHttpRequestFactory = new InterceptingClientHttpRequestFactory ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock , java.util.Collections . java.util.List ( org.springframework.http.client.ClientHttpRequestInterceptor ) ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.InterceptingClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ; org.springframework.http.client.ClientHttpRequest . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.ClientHttpRequestExecution . execute ( new HttpRequestWrapper ( org.springframework.http.client.HttpRequest ) { @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return org.springframework.http.client.HttpMethod ; } } , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return org.springframework.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { assertEquals ( org.springframework.http.client.HttpMethod , org.springframework.http.client.HttpMethod ) ; return super. org.springframework.http.client.ClientHttpRequest ( java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final byte [] byte[] = STRING . byte[] ( ) ; ClientHttpRequestInterceptor org.springframework.http.client.ClientHttpRequestInterceptor = new ClientHttpRequestInterceptor ( ) { @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.ClientHttpRequestExecution . execute ( org.springframework.http.client.HttpRequest , byte[] ) ; } } ; org.springframework.http.client.InterceptingClientHttpRequestFactory = new InterceptingClientHttpRequestFactory ( org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestFactoryMock , java.util.Collections . java.util.List ( org.springframework.http.client.ClientHttpRequestInterceptor ) ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.InterceptingClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ; org.springframework.http.client.ClientHttpRequest . execute ( ) ; assertTrue ( java.util.Arrays . boolean ( byte[] , org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock . java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )					throws java.io.IOException { return org.springframework.http.client.ClientHttpRequestExecution . execute ( org.springframework.http.client.HttpRequest , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.ClientHttpRequestExecution )				throws java.io.IOException { boolean = true ; return org.springframework.http.client.ClientHttpRequestExecution . execute ( org.springframework.http.client.HttpRequest , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock . void ( java.net.URI ) ; org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock . void ( org.springframework.http.client.HttpMethod ) ; return org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.RequestMock ; }  <METHOD_END>
<METHOD_START> private void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return java.net.URI ; }  <METHOD_END>
<METHOD_START> public void void ( java.net.URI java.net.URI ) { this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return org.springframework.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> public void void ( HttpMethod org.springframework.http.client.HttpMethod ) { this . org.springframework.http.client.HttpMethod = org.springframework.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpHeaders org.springframework.http.client.HttpHeaders ( ) { return org.springframework.http.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return java.io.ByteArrayOutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( ) java.io.IOException { boolean = true ; return org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.ResponseMock ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpStatus org.springframework.http.client.HttpStatus ( ) java.io.IOException { return org.springframework.http.client.HttpStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.io.IOException { return org.springframework.http.client.HttpStatus . value ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.io.IOException { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpHeaders org.springframework.http.client.HttpHeaders ( ) { return org.springframework.http.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
