<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.RootUser org.springframework.data.gemfire.repository.sample.RootUser ( final java.lang.String java.lang.String ) { RootUser org.springframework.data.gemfire.repository.sample.RootUser = new RootUser ( java.lang.String ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> . put ( java.lang.String , org.springframework.data.gemfire.repository.sample.RootUser ) ; return org.springframework.data.gemfire.repository.sample.RootUser ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.GuestUser org.springframework.data.gemfire.repository.sample.GuestUser ( final java.lang.String java.lang.String ) { GuestUser org.springframework.data.gemfire.repository.sample.GuestUser = new GuestUser ( java.lang.String ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> . put ( java.lang.String , org.springframework.data.gemfire.repository.sample.GuestUser ) ; return org.springframework.data.gemfire.repository.sample.GuestUser ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.RootUser org.springframework.data.gemfire.repository.sample.RootUser ( final java.lang.String java.lang.String ) { java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> < RootUser > java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> = java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> ( java.lang.String ) ; return ( java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> . isEmpty ( ) ? null : java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> protected static java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> < RootUser > java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> ( final java.lang.String ... java.lang.String[] ) { return java.util.List ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.GuestUser org.springframework.data.gemfire.repository.sample.GuestUser ( final java.lang.String java.lang.String ) { java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> < GuestUser > java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> = java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> ( java.lang.String ) ; return ( java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> . isEmpty ( ) ? null : java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> protected static java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> < GuestUser > java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> ( final java.lang.String ... java.lang.String[] ) { return java.util.List ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected static < T extends org.springframework.data.gemfire.repository.sample.User > java.util.List<T> < T > java.util.List<T> ( final java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> , final java.lang.String ... java.lang.String[] ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { T T = java.util.Map<java.lang.String,T> . T ( java.lang.String ) ; if ( T != null ) { java.util.List<T> . boolean ( T ) ; } } java.util.Collections . void ( java.util.List<T> ) ; return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.Programmer org.springframework.data.gemfire.repository.sample.Programmer ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { Programmer org.springframework.data.gemfire.repository.sample.Programmer = new Programmer ( java.lang.String ) ; org.springframework.data.gemfire.repository.sample.Programmer . setProgrammingLanguage ( java.lang.String ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . put ( java.lang.String , org.springframework.data.gemfire.repository.sample.Programmer ) ; return org.springframework.data.gemfire.repository.sample.Programmer ; }  <METHOD_END>
<METHOD_START> protected static java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> < Programmer > java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ( final java.lang.String ... java.lang.String[] ) { java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> < Programmer > java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> = new java.util.ArrayList<org.springframework.data.gemfire.repository.sample.Programmer> < Programmer > ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { Programmer org.springframework.data.gemfire.repository.sample.Programmer = java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . get ( java.lang.String ) ; if ( org.springframework.data.gemfire.repository.sample.Programmer != null ) { java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . add ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . get ( java.lang.String ) ) ; } } java.util.Collections . void ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ) ; return java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> ) ; if ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . isEmpty ( ) ) { org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . putAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> ) ; } assertEquals ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . size ( ) , org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . size ( ) ) ; assertNotNull ( STRING , org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> ) ; if ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> . isEmpty ( ) ) { org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> . putAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> ) ; } assertEquals ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> . size ( ) , org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.RootUser> . size ( ) ) ; assertNotNull ( STRING , org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> ) ; if ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> . isEmpty ( ) ) { org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> . putAll ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> ) ; } assertEquals ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> . size ( ) , org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.GuestUser> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.repository.sample.ProgrammerRepository . findOne ( STRING ) . orElse ( null ) ) . isEqualTo ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.sample.Programmer> . get ( STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> < Programmer > java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> = org.springframework.data.gemfire.repository.sample.ProgrammerRepository . findDistinctByProgrammingLanguageOrderByUsernameAsc ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . isEmpty ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . size ( ) ) ; assertEquals ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ( STRING , STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> < Programmer > java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> = org.springframework.data.gemfire.repository.sample.ProgrammerRepository . findDistinctByProgrammingLanguageLikeOrderByUsernameAsc ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . isEmpty ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . size ( ) ) ; assertEquals ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.ProgrammerRepository . save ( new Wrapper <> ( org.springframework.data.gemfire.repository.sample.Programmer ( STRING , STRING ) , STRING ) ) ; org.springframework.data.gemfire.repository.sample.ProgrammerRepository . save ( new Wrapper <> ( org.springframework.data.gemfire.repository.sample.Programmer ( STRING , STRING ) , STRING ) ) ; org.springframework.data.gemfire.repository.sample.ProgrammerRepository . save ( new Wrapper <> ( org.springframework.data.gemfire.repository.sample.Programmer ( STRING , STRING ) , STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> = org.springframework.data.gemfire.repository.sample.ProgrammerRepository . findDistinctByProgrammingLanguageOrderByUsernameAsc ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . isEmpty ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . size ( ) ) ; assertEquals ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ( STRING , STRING , STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> = org.springframework.data.gemfire.repository.sample.ProgrammerRepository . findDistinctByProgrammingLanguageLikeOrderByUsernameAsc ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . isEmpty ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . size ( ) ) ; assertEquals ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ( STRING , STRING , STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> < Programmer > java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> = org.springframework.data.gemfire.repository.sample.ProgrammerRepository . findDistinctByProgrammingLanguageLikeOrderByUsernameAsc ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . isEmpty ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . size ( ) ) ; assertEquals ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> , java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ( STRING , STRING , STRING , STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> < Programmer > java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> = org.springframework.data.gemfire.repository.sample.ProgrammerRepository . findDistinctByProgrammingLanguageLikeOrderByUsernameAsc ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> ) ; assertTrue ( java.util.List<org.springframework.data.gemfire.repository.sample.Programmer> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.repository.sample.RootUserRepository . findOne ( STRING ) . orElse ( null ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.RootUser ( STRING ) ) ; assertThat ( org.springframework.data.gemfire.repository.sample.GuestUserRepository . findOne ( STRING ) . orElse ( null ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.GuestUser ( STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> < RootUser > java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> = org.springframework.data.gemfire.repository.sample.RootUserRepository . findDistinctByUsername ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> . isEmpty ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> . size ( ) ) ; assertEquals ( org.springframework.data.gemfire.repository.sample.RootUser ( STRING ) , java.util.List<org.springframework.data.gemfire.repository.sample.RootUser> . get ( NUMBER ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> < GuestUser > java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> = org.springframework.data.gemfire.repository.sample.GuestUserRepository . findDistinctByUsername ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> . isEmpty ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> . size ( ) ) ; assertEquals ( org.springframework.data.gemfire.repository.sample.GuestUser ( STRING ) , java.util.List<org.springframework.data.gemfire.repository.sample.GuestUser> . get ( NUMBER ) ) ; }  <METHOD_END>
