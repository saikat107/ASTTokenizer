<METHOD_START> public void ( ) { this . java.lang.Class<? extends java.lang.annotation.Annotation> = null ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { super( int ); this . java.lang.Class<? extends java.lang.annotation.Annotation> = null ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( java.util.Map<java.lang.String,java.lang.Object> ); this . java.lang.Class<? extends java.lang.annotation.Annotation> = null ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ) { super( org.springframework.core.annotation.AnnotationAttributes ); this . java.lang.Class<? extends java.lang.annotation.Annotation> = org.springframework.core.annotation.AnnotationAttributes . java.lang.Class<> ; this . java.lang.String = org.springframework.core.annotation.AnnotationAttributes . java.lang.String ; this . boolean = org.springframework.core.annotation.AnnotationAttributes . boolean ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; this . java.lang.String = java.lang.Class<> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<? extends java.lang.annotation.Annotation> ( java.lang.String , java.lang.ClassLoader ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { if ( java.lang.ClassLoader != null ) { try { return ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return java.lang.String[] ( java.lang.String , java.lang.String [] .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return java.lang.Boolean ( java.lang.String , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < N extends java.lang.Number > N N ( java.lang.String java.lang.String ) { return ( N ) java.lang.Number ( java.lang.String , java.lang.Number .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < E extends java.lang.Enum<?> < ? > > E E ( java.lang.String java.lang.String ) { return ( E ) java.lang.Enum ( java.lang.String , java.lang.Enum .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ( java.lang.String java.lang.String ) { return java.lang.Class ( java.lang.String , java.lang.Class .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.String java.lang.String ) { return java.lang.Class[] ( java.lang.String , java.lang.Class [] .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.String java.lang.String ) { return org.springframework.core.annotation.AnnotationAttributes ( java.lang.String , org.springframework.core.annotation.AnnotationAttributes .class ) ; }  <METHOD_END>
<METHOD_START> public < A extends java.lang.annotation.Annotation > A A ( java.lang.String java.lang.String , java.lang.Class<A> < A > java.lang.Class<A> ) { return A ( java.lang.String , java.lang.Class<A> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.annotation.AnnotationAttributes [] org.springframework.core.annotation.AnnotationAttributes[] ( java.lang.String java.lang.String ) { return org.springframework.core.annotation.AnnotationAttributes[] ( java.lang.String , org.springframework.core.annotation.AnnotationAttributes [] .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < A extends java.lang.annotation.Annotation > A [] A[] ( java.lang.String java.lang.String , java.lang.Class<A> < A > java.lang.Class<A> ) { java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<A> , NUMBER ) ; return ( A [] ) getRequiredAttribute ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . hasText ( java.lang.String , STRING ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; void ( java.lang.String , java.lang.Object ) ; void ( java.lang.String , java.lang.Object ) ; if ( ! java.lang.Class<T> . boolean ( java.lang.Object ) && java.lang.Class<T> . boolean ( ) && java.lang.Class<T> . java.lang.Class<?> ( ) . boolean ( java.lang.Object ) ) { java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<T> . java.lang.Class<?> ( ) , NUMBER ) ; java.lang.reflect.Array . void ( java.lang.Object , NUMBER , java.lang.Object ) ; java.lang.Object = java.lang.Object ; } void ( java.lang.String , java.lang.Object , java.lang.Class<T> ) ; return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , ( ) String . format ( STRING , attributeName , this . displayName ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String , this . java.lang.String , java.lang.Object ) , ( java.lang.Exception ) java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ! java.lang.Class<> . boolean ( java.lang.Object ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) , this . java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = java.lang.Object ( java.lang.String , java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> = java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . boolean ( ) ) { java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . java.util.Map.Entry<java.lang.String,java.lang.Object> ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '=' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . boolean ( ) ? STRING : STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return STRING ; } if ( java.lang.Object instanceof java.lang.Object [] ) { return STRING + StringUtils . arrayToDelimitedString ( ( java.lang.Object [] ) java.lang.Object , STRING ) + STRING ; } return java.lang.String . java.lang.String ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { return null ; } if ( java.util.Map<java.lang.String,java.lang.Object> instanceof org.springframework.core.annotation.AnnotationAttributes ) { return ( org.springframework.core.annotation.AnnotationAttributes ) java.util.Map<java.lang.String,java.lang.Object> ; } return new org.springframework.core.annotation.AnnotationAttributes ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
