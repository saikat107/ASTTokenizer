<METHOD_START> void ( ConversionService org.springframework.boot.bind.ConversionService ) { this . org.springframework.boot.bind.ConversionService = org.springframework.boot.bind.ConversionService ; this . org.springframework.boot.bind.GenericConversionService = new GenericConversionService ( ) ; DefaultConversionService . addCollectionConverters ( this . org.springframework.boot.bind.GenericConversionService ) ; this . org.springframework.boot.bind.GenericConversionService . addConverterFactory ( new org.springframework.boot.bind.RelaxedConversionService.StringToEnumIgnoringCaseConverterFactory ( ) ) ; this . org.springframework.boot.bind.GenericConversionService . addConverter ( new StringToCharArrayConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( this . org.springframework.boot.bind.ConversionService != null && this . org.springframework.boot.bind.ConversionService . canConvert ( java.lang.Class<> , java.lang.Class<> ) ) || this . org.springframework.boot.bind.GenericConversionService . canConvert ( java.lang.Class<> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.boot.bind.TypeDescriptor , TypeDescriptor org.springframework.boot.bind.TypeDescriptor ) { return ( this . org.springframework.boot.bind.ConversionService != null && this . org.springframework.boot.bind.ConversionService . canConvert ( org.springframework.boot.bind.TypeDescriptor , org.springframework.boot.bind.TypeDescriptor ) ) || this . org.springframework.boot.bind.GenericConversionService . canConvert ( org.springframework.boot.bind.TypeDescriptor , org.springframework.boot.bind.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; return ( T ) java.lang.Object ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , TypeDescriptor . valueOf ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.boot.bind.TypeDescriptor , TypeDescriptor org.springframework.boot.bind.TypeDescriptor ) { if ( this . org.springframework.boot.bind.ConversionService != null ) { try { return this . org.springframework.boot.bind.ConversionService . convert ( java.lang.Object , org.springframework.boot.bind.TypeDescriptor , org.springframework.boot.bind.TypeDescriptor ) ; } catch ( ConversionFailedException org.springframework.boot.bind.ConversionFailedException ) { } } return this . org.springframework.boot.bind.GenericConversionService . convert ( java.lang.Object , org.springframework.boot.bind.TypeDescriptor , org.springframework.boot.bind.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends java.lang.Enum > org.springframework.boot.bind.Converter<java.lang.String,T> < java.lang.String , T > org.springframework.boot.bind.Converter<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<T> ; while ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( ) ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } Assert . notNull ( java.lang.Class<> , STRING + java.lang.Class<T> . java.lang.String ( ) + STRING ) ; return new org.springframework.boot.bind.RelaxedConversionService.StringToEnumIgnoringCaseConverterFactory.StringToEnum ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( ) ) { return null ; } java.lang.String = java.lang.String . java.lang.String ( ) ; for ( T T : ( java.util.Set<T> < T > ) java.util.EnumSet . java.util.EnumSet<T> ( this . java.lang.Class<T> ) ) { RelaxedNames org.springframework.boot.bind.RelaxedNames = new RelaxedNames ( T . java.lang.String ( ) . java.lang.String ( '_' , '-' ) . java.lang.String ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.boot.bind.RelaxedNames ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return T ; } } if ( T . java.lang.String ( ) . boolean ( java.lang.String ) ) { return T ; } } throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.Class<T> . java.lang.String ( ) + STRING + java.lang.String ) ; }  <METHOD_END>
