<METHOD_START> public void ( MongoClient org.springframework.data.mongodb.core.MongoClient , java.lang.String java.lang.String ) { this( new SimpleMongoDbFactory ( org.springframework.data.mongodb.core.MongoClient , java.lang.String ) , null ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.data.mongodb.core.MongoDbFactory ) { this( org.springframework.data.mongodb.core.MongoDbFactory , null ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.data.mongodb.core.MongoDbFactory , MongoConverter org.springframework.data.mongodb.core.MongoConverter ) { Assert . notNull ( org.springframework.data.mongodb.core.MongoDbFactory , STRING ) ; this . org.springframework.data.mongodb.core.MongoDbFactory = org.springframework.data.mongodb.core.MongoDbFactory ; this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.MongoDbFactory . getExceptionTranslator ( ) ; this . org.springframework.data.mongodb.core.MongoConverter = org.springframework.data.mongodb.core.MongoConverter == null ? org.springframework.data.mongodb.core.MongoConverter ( org.springframework.data.mongodb.core.MongoDbFactory ) : org.springframework.data.mongodb.core.MongoConverter ; this . org.springframework.data.mongodb.core.QueryMapper = new QueryMapper ( this . org.springframework.data.mongodb.core.MongoConverter ) ; this . org.springframework.data.mongodb.core.UpdateMapper = new UpdateMapper ( this . org.springframework.data.mongodb.core.MongoConverter ) ; org.springframework.data.mongodb.core.MappingContext<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.MongoPersistentProperty> = this . org.springframework.data.mongodb.core.MongoConverter . getMappingContext ( ) ; if ( null != org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> && org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> instanceof MongoMappingContext ) { org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator = new MongoPersistentEntityIndexCreator ( ( MongoMappingContext ) org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> , this ) ; org.springframework.data.mongodb.core.ApplicationEventPublisher = new MongoMappingEventPublisher ( org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator ) ; if ( org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> instanceof ApplicationEventPublisherAware ) { ( ( ApplicationEventPublisherAware ) org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> ) . setApplicationEventPublisher ( org.springframework.data.mongodb.core.ApplicationEventPublisher ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( WriteResultChecking org.springframework.data.mongodb.core.WriteResultChecking ) { this . org.springframework.data.mongodb.core.WriteResultChecking = org.springframework.data.mongodb.core.WriteResultChecking == null ? org.springframework.data.mongodb.core.WriteResultChecking : org.springframework.data.mongodb.core.WriteResultChecking ; }  <METHOD_END>
<METHOD_START> public void void ( WriteConcern org.springframework.data.mongodb.core.WriteConcern ) { this . org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ; }  <METHOD_END>
<METHOD_START> public void void ( WriteConcernResolver org.springframework.data.mongodb.core.WriteConcernResolver ) { this . org.springframework.data.mongodb.core.WriteConcernResolver = org.springframework.data.mongodb.core.WriteConcernResolver ; }  <METHOD_END>
<METHOD_START> public void void ( ReadPreference org.springframework.data.mongodb.core.ReadPreference ) { this . org.springframework.data.mongodb.core.ReadPreference = org.springframework.data.mongodb.core.ReadPreference ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.data.mongodb.core.ApplicationContext ) throws org.springframework.data.mongodb.core.BeansException { void ( org.springframework.data.mongodb.core.ApplicationContext ) ; org.springframework.data.mongodb.core.ApplicationEventPublisher = org.springframework.data.mongodb.core.ApplicationContext ; if ( org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> instanceof ApplicationEventPublisherAware ) { ( ( ApplicationEventPublisherAware ) org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> ) . setApplicationEventPublisher ( org.springframework.data.mongodb.core.ApplicationEventPublisher ) ; } org.springframework.data.mongodb.core.ResourceLoader = org.springframework.data.mongodb.core.ApplicationContext ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.data.mongodb.core.ApplicationContext ) { java.lang.String [] java.lang.String[] = org.springframework.data.mongodb.core.ApplicationContext . getBeanNamesForType ( MongoPersistentEntityIndexCreator .class ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { MongoPersistentEntityIndexCreator org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator = org.springframework.data.mongodb.core.ApplicationContext . getBean ( java.lang.String , MongoPersistentEntityIndexCreator .class ) ; if ( org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator . isIndexCreatorFor ( org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> ) ) { return; } } if ( org.springframework.data.mongodb.core.ApplicationContext instanceof ConfigurableApplicationContext ) { ( ( ConfigurableApplicationContext ) org.springframework.data.mongodb.core.ApplicationContext ) . addApplicationListener ( org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoConverter org.springframework.data.mongodb.core.MongoConverter ( ) { return this . org.springframework.data.mongodb.core.MongoConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.CloseableIterator<T> < T > org.springframework.data.mongodb.core.CloseableIterator<T> ( final Query org.springframework.data.mongodb.core.Query , final java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.CloseableIterator ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.mongodb.core.CloseableIterator<T> < T > org.springframework.data.mongodb.core.CloseableIterator<T> ( final Query org.springframework.data.mongodb.core.Query , final java.lang.Class<T> < T > java.lang.Class<T> , final java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.data.mongodb.core.Query , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; return T ( java.lang.String , new CollectionCallback < CloseableIterator < T > > ( ) { @ java.lang.Override public org.springframework.data.mongodb.core.CloseableIterator<T> < T > org.springframework.data.mongodb.core.CloseableIterator<T> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<T> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedFields ( org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.MongoPersistentEntity<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.MongoPersistentEntity<> ) ; FindIterable < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) . projection ( org.springframework.data.mongodb.core.Document ) ; org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer = new org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) ; org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> = new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ; return new org.springframework.data.mongodb.core.MongoTemplate.CloseableIterableCursorAdapter<T> < T > ( org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer . org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) , org.springframework.data.mongodb.core.PersistenceExceptionTranslator , org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.CloseableIterator<T> < T > org.springframework.data.mongodb.core.CloseableIterator<T> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<T> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedFields ( org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.MongoPersistentEntity<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.MongoPersistentEntity<> ) ; FindIterable < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) . projection ( org.springframework.data.mongodb.core.Document ) ; org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer = new org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) ; org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> = new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ; return new org.springframework.data.mongodb.core.MongoTemplate.CloseableIterableCursorAdapter<T> < T > ( org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer . org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) , org.springframework.data.mongodb.core.PersistenceExceptionTranslator , org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . java.lang.String ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( final java.lang.String java.lang.String ) { return T ( new DbCallback < Document > ( ) { public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.MongoDatabase . runCommand ( Document . parse ( java.lang.String ) , Document .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.MongoDatabase . runCommand ( Document . parse ( java.lang.String ) , Document .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( final Document org.springframework.data.mongodb.core.Document ) { Document org.springframework.data.mongodb.core.Document = T ( new DbCallback < Document > ( ) { public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.MongoDatabase . runCommand ( org.springframework.data.mongodb.core.Document , Document .class ) ; } } ) ; return org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.MongoDatabase . runCommand ( org.springframework.data.mongodb.core.Document , Document .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( final Document org.springframework.data.mongodb.core.Document , final ReadPreference org.springframework.data.mongodb.core.ReadPreference ) { Assert . notNull ( org.springframework.data.mongodb.core.Document , STRING ) ; Document org.springframework.data.mongodb.core.Document = T ( new DbCallback < Document > ( ) { public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.ReadPreference != null ? org.springframework.data.mongodb.core.MongoDatabase . runCommand ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.ReadPreference , Document .class ) : org.springframework.data.mongodb.core.MongoDatabase . runCommand ( org.springframework.data.mongodb.core.Document , Document .class ) ; } } ) ; return org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.ReadPreference != null ? org.springframework.data.mongodb.core.MongoDatabase . runCommand ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.ReadPreference , Document .class ) : org.springframework.data.mongodb.core.MongoDatabase . runCommand ( org.springframework.data.mongodb.core.Document , Document .class ) ; }  <METHOD_END>
<METHOD_START> public void void ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String , DocumentCallbackHandler org.springframework.data.mongodb.core.DocumentCallbackHandler ) { void ( org.springframework.data.mongodb.core.Query , java.lang.String , org.springframework.data.mongodb.core.DocumentCallbackHandler , new org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer ( org.springframework.data.mongodb.core.Query , null ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String , DocumentCallbackHandler org.springframework.data.mongodb.core.DocumentCallbackHandler , CursorPreparer org.springframework.data.mongodb.core.CursorPreparer ) { Assert . notNull ( org.springframework.data.mongodb.core.Query , STRING ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Query . getSortObject ( ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Query . getFieldsObject ( ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.String ) ; } this . void ( new org.springframework.data.mongodb.core.MongoTemplate.FindCallback ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.CursorPreparer , org.springframework.data.mongodb.core.DocumentCallbackHandler , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( DbCallback < T > org.springframework.data.mongodb.core.DbCallback<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.DbCallback<T> , STRING ) ; try { MongoDatabase org.springframework.data.mongodb.core.MongoDatabase = this . org.springframework.data.mongodb.core.MongoDatabase ( ) ; return org.springframework.data.mongodb.core.DbCallback<T> . doInDB ( org.springframework.data.mongodb.core.MongoDatabase ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Class<?> < ? > java.lang.Class<?> , CollectionCallback < T > org.springframework.data.mongodb.core.CollectionCallback<T> ) { return java.lang.Object ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.CollectionCallback<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.String java.lang.String , CollectionCallback < T > org.springframework.data.mongodb.core.CollectionCallback<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.CollectionCallback<T> , STRING ) ; try { MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.MongoDatabase ( ) , java.lang.String ) ; return org.springframework.data.mongodb.core.CollectionCallback<T> . doInCollection ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( java.lang.Class<T> < T > java.lang.Class<T> , CollectionOptions org.springframework.data.mongodb.core.CollectionOptions ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( java.lang.String ( java.lang.Class<T> ) , org.springframework.data.mongodb.core.CollectionOptions ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( java.lang.String , new Document ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( final java.lang.String java.lang.String , final CollectionOptions org.springframework.data.mongodb.core.CollectionOptions ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( java.lang.String , org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.CollectionOptions ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( final java.lang.String java.lang.String ) { return T ( new DbCallback < MongoCollection < Document > > ( ) { public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.MongoDatabase . getCollection ( java.lang.String , Document .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { return org.springframework.data.mongodb.core.MongoDatabase . getCollection ( java.lang.String , Document .class ) ; }  <METHOD_END>
<METHOD_START> public < T > boolean boolean ( java.lang.Class<T> < T > java.lang.Class<T> ) { return boolean ( java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( final java.lang.String java.lang.String ) { return T ( new DbCallback < java.lang.Boolean > ( ) { public java.lang.Boolean java.lang.Boolean ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.MongoDatabase . listCollectionNames ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.MongoDatabase . listCollectionNames ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public < T > void void ( java.lang.Class<T> < T > java.lang.Class<T> ) { void ( java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { T ( java.lang.String , new CollectionCallback < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . drop ( ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getCollectionName ( ) ) ; } return null ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . drop ( ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getCollectionName ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.IndexOperations org.springframework.data.mongodb.core.IndexOperations ( java.lang.String java.lang.String ) { return new DefaultIndexOperations ( org.springframework.data.mongodb.core.MongoDbFactory ( ) , java.lang.String , org.springframework.data.mongodb.core.QueryMapper ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.IndexOperations org.springframework.data.mongodb.core.IndexOperations ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new DefaultIndexOperations ( org.springframework.data.mongodb.core.MongoDbFactory ( ) , java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.QueryMapper ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( BulkMode org.springframework.data.mongodb.core.BulkMode , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.BulkMode , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( BulkMode org.springframework.data.mongodb.core.BulkMode , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.BulkMode , java.lang.Class<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( BulkMode org.springframework.data.mongodb.core.BulkMode , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.data.mongodb.core.BulkMode , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; DefaultBulkOperations org.springframework.data.mongodb.core.DefaultBulkOperations = new DefaultBulkOperations ( this , org.springframework.data.mongodb.core.BulkMode , java.lang.String , java.lang.Class<> ) ; org.springframework.data.mongodb.core.DefaultBulkOperations . setExceptionTranslator ( org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; org.springframework.data.mongodb.core.DefaultBulkOperations . setWriteConcernResolver ( org.springframework.data.mongodb.core.WriteConcernResolver ) ; org.springframework.data.mongodb.core.DefaultBulkOperations . setDefaultWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) ; return org.springframework.data.mongodb.core.DefaultBulkOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.ScriptOperations org.springframework.data.mongodb.core.ScriptOperations ( ) { return new DefaultScriptOperations ( this ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.lang.Object ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.Query . getSortObject ( ) == null ) { return java.lang.Object ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , java.lang.Class<T> ) ; } else { org.springframework.data.mongodb.core.Query . limit ( NUMBER ) ; java.util.List<T> < T > java.util.List<T> = java.util.List ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ) ; return java.util.List<T> . boolean ( ) ? null : java.util.List<T> . T ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( org.springframework.data.mongodb.core.Query , java.lang.Class<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return boolean ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.Query == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Class<> ) ) ; return T ( java.lang.String , new org.springframework.data.mongodb.core.MongoTemplate.FindCallback ( org.springframework.data.mongodb.core.Document ) ) . iterator ( ) . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> public < T > java.util.List<T> < T > java.util.List<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.List ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > java.util.List<T> < T > java.util.List<T> ( final Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.Query == null ) { return java.util.List<T> ( java.lang.Class<T> , java.lang.String ) ; } return java.util.List ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , java.lang.Class<T> , new org.springframework.data.mongodb.core.MongoTemplate.QueryCursorPreparer ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { return T ( java.lang.Object , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) . flatMap ( it -> it . getIdProperty ( ) ) . map ( it -> it . getName ( ) ) . orElse ( java.lang.String ) ; return java.lang.Object ( java.lang.String , new Document ( java.lang.String , java.lang.Object ) , null , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.GeoResults<T> < T > org.springframework.data.mongodb.core.GeoResults<T> ( NearQuery org.springframework.data.mongodb.core.NearQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.GeoResults ( org.springframework.data.mongodb.core.NearQuery , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > org.springframework.data.mongodb.core.GeoResults<T> < T > org.springframework.data.mongodb.core.GeoResults<T> ( NearQuery org.springframework.data.mongodb.core.NearQuery , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.NearQuery == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } if ( java.lang.Class<T> == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } java.lang.String java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ( java.lang.Class<T> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.NearQuery . toDocument ( ) ; Document org.springframework.data.mongodb.core.Document = new Document ( STRING , java.lang.String ) ; org.springframework.data.mongodb.core.Document . putAll ( org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { Document org.springframework.data.mongodb.core.Document = ( Document ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; org.springframework.data.mongodb.core.Document . put ( STRING , org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Class<T> ) ) ) ; } if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , java.lang.Class<T> , java.lang.String ) ; } Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Document , this . org.springframework.data.mongodb.core.ReadPreference ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; java.util.List<java.lang.Object> = java.util.List<java.lang.Object> == null ? java.util.Collections . java.util.List<java.lang.Object> ( ) : java.util.List<java.lang.Object> ; org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<org.springframework.data.mongodb.core.GeoResult<T>> < GeoResult < T > > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<org.springframework.data.mongodb.core.GeoResult<T>> = new org.springframework.data.mongodb.core.MongoTemplate.GeoNearResultDocumentCallback<T> < T > ( new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) , org.springframework.data.mongodb.core.NearQuery . getMetric ( ) ) ; java.util.List<org.springframework.data.mongodb.core.GeoResult<T>> < GeoResult < T > > java.util.List<org.springframework.data.mongodb.core.GeoResult<T>> = new java.util.ArrayList<org.springframework.data.mongodb.core.GeoResult<T>> < GeoResult < T > > ( java.util.List<java.lang.Object> . int ( ) ) ; int int = NUMBER ; long long = org.springframework.data.mongodb.core.NearQuery . getSkip ( ) != null ? org.springframework.data.mongodb.core.NearQuery . getSkip ( ) : NUMBER ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { */ if ( int >= long ) { java.util.List<org.springframework.data.mongodb.core.GeoResult<T>> . add ( org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<org.springframework.data.mongodb.core.GeoResult<T>> . doWith ( ( Document ) java.lang.Object ) ) ; } int ++ ; } if ( long > NUMBER ) { return new GeoResults < T > ( java.util.List<org.springframework.data.mongodb.core.GeoResult<T>> , org.springframework.data.mongodb.core.NearQuery . getMetric ( ) ) ; } GeoCommandStatistics org.springframework.data.mongodb.core.GeoCommandStatistics = GeoCommandStatistics . from ( org.springframework.data.mongodb.core.Document ) ; return new GeoResults < T > ( java.util.List<org.springframework.data.mongodb.core.GeoResult<T>> , new Distance ( org.springframework.data.mongodb.core.GeoCommandStatistics . getAverageDistance ( ) , org.springframework.data.mongodb.core.NearQuery . getMetric ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.lang.Object ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return java.lang.Object ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) , java.lang.Class<T> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.lang.Object ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.FindAndModifyOptions , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return java.lang.Object ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) , java.lang.Class<T> , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.FindAndModifyOptions ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.lang.Object ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return java.lang.Object ( java.lang.String , org.springframework.data.mongodb.core.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public long long ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return long ( org.springframework.data.mongodb.core.Query , java.lang.Class<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public long long ( final Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return long ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public long long ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; final Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Query == null ? null : org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Class<>> ( java.lang.Class<> ) . java.util.Optional<java.lang.Object> ( it -> mappingContext . getPersistentEntity ( entityClass ) ) ) ; return T ( java.lang.String , ( CollectionCallback < java.lang.Long > ) collection -> collection . count ( document ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object ) ; void ( java.lang.Object , java.lang.String ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { void ( java.lang.Object ) ; void ( java.lang.String , java.lang.Object , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { if ( null != java.lang.Object ) { if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) || java.util.Collection<java.lang.String> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) { if ( this . org.springframework.data.mongodb.core.ReadPreference != null ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withReadPreference ( org.springframework.data.mongodb.core.ReadPreference ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.WriteConcern org.springframework.data.mongodb.core.WriteConcern ( MongoAction org.springframework.data.mongodb.core.MongoAction ) { WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcernResolver . resolve ( org.springframework.data.mongodb.core.MongoAction ) ; return org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.WriteConcern org.springframework.data.mongodb.core.WriteConcern ( WriteConcern org.springframework.data.mongodb.core.WriteConcern ) { if ( ObjectUtils . nullSafeEquals ( WriteResultChecking . EXCEPTION , org.springframework.data.mongodb.core.WriteResultChecking ) && MongoClientVersion . isMongo3Driver ( ) ) { if ( org.springframework.data.mongodb.core.WriteConcern == null || org.springframework.data.mongodb.core.WriteConcern . getWObject ( ) == null || ( org.springframework.data.mongodb.core.WriteConcern . getWObject ( ) instanceof java.lang.Number && ( ( java.lang.Number ) org.springframework.data.mongodb.core.WriteConcern . getWObject ( ) ) . int ( ) < NUMBER ) ) { return WriteConcern . ACKNOWLEDGED ; } } return org.springframework.data.mongodb.core.WriteConcern ; }  <METHOD_END>
<METHOD_START> protected < T > void void ( java.lang.String java.lang.String , T T , MongoWriter < T > org.springframework.data.mongodb.core.MongoWriter<T> ) { void ( T ) ; void ( new BeforeConvertEvent < T > ( T , java.lang.String ) ) ; void ( T ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( T , org.springframework.data.mongodb.core.MongoWriter<T> ) ; void ( new BeforeSaveEvent < T > ( T , org.springframework.data.mongodb.core.Document , java.lang.String ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.data.mongodb.core.Document , T . java.lang.Class<? extends java.lang.Object> ( ) ) ; void ( T , java.lang.Object ) ; void ( new AfterSaveEvent < T > ( T , org.springframework.data.mongodb.core.Document , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( T T , MongoWriter < T > org.springframework.data.mongodb.core.MongoWriter<T> ) { if ( T instanceof Document ) { return ( Document ) T ; } if ( ! ( T instanceof java.lang.String ) ) { Document org.springframework.data.mongodb.core.Document = new Document ( ) ; org.springframework.data.mongodb.core.MongoWriter<T> . write ( T , org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.Document . containsKey ( java.lang.String ) && org.springframework.data.mongodb.core.Document . get ( java.lang.String ) == null ) { org.springframework.data.mongodb.core.Document . remove ( java.lang.String ) ; } return org.springframework.data.mongodb.core.Document ; } else { try { return Document . parse ( ( java.lang.String ) T ) ; } catch ( JSONParseException org.springframework.data.mongodb.core.JSONParseException ) { throw new MappingException ( STRING , org.springframework.data.mongodb.core.JSONParseException ) ; } catch ( org . org.bson . org.bson . org.bson org.bson.json.JsonParseException ) { throw new MappingException ( STRING , org.bson.json.JsonParseException ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; ifAllPresent ( java.util.Optional<> , java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> it . getVersionProperty ( ) ) , ( l , r ) -> { ConvertingPropertyAccessor accessor = new ConvertingPropertyAccessor ( l . getPropertyAccessor ( entity ) , mongoConverter . getConversionService ( ) ) ; accessor . setProperty ( r , Optional . of ( NUMBER ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends java.lang.Object> < ? extends java.lang.Object > java.util.Collection<? extends java.lang.Object> , java.lang.Class<?> < ? > java.lang.Class<?> ) { void ( java.lang.String ( java.lang.Class<> ) , java.util.Collection<> , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends java.lang.Object> < ? extends java.lang.Object > java.util.Collection<? extends java.lang.Object> , java.lang.String java.lang.String ) { void ( java.lang.String , java.util.Collection<> , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends java.lang.Object> < ? extends java.lang.Object > java.util.Collection<? extends java.lang.Object> ) { void ( java.util.Collection<> , this . org.springframework.data.mongodb.core.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> protected < T > void void ( java.util.Collection<? extends T> < ? extends T > java.util.Collection<? extends T> , MongoWriter < T > org.springframework.data.mongodb.core.MongoWriter<T> ) { java.util.Map<java.lang.String,java.util.List<T>> < java.lang.String , java.util.List<T> < T > > java.util.Map<java.lang.String,java.util.List<T>> = new java.util.HashMap<java.lang.String,java.util.List<T>> < java.lang.String , java.util.List<T> < T > > ( ) ; for ( T T : java.util.Collection<> ) { if ( T == null ) { continue; } MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getRequiredPersistentEntity ( T . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.MongoPersistentEntity<> . getCollection ( ) ; java.util.List<T> < T > java.util.List<T> = java.util.Map<java.lang.String,java.util.List<T>> . java.util.List<T> ( java.lang.String ) ; if ( null == java.util.List<T> ) { java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; java.util.Map<java.lang.String,java.util.List<T>> . java.util.List<T> ( java.lang.String , java.util.List<T> ) ; } java.util.List<T> . boolean ( T ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<T>> < java.lang.String , java.util.List<T> < T > > java.util.Map.Entry<java.lang.String,java.util.List<T>> : java.util.Map<java.lang.String,java.util.List<T>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.List<T>>> ( ) ) { void ( java.util.Map.Entry<java.lang.String,java.util.List<T>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.util.List<T>> . java.util.List<T> ( ) , this . org.springframework.data.mongodb.core.MongoConverter ) ; } }  <METHOD_END>
<METHOD_START> protected < T > void void ( java.lang.String java.lang.String , java.util.Collection<? extends T> < ? extends T > java.util.Collection<? extends T> , MongoWriter < T > org.springframework.data.mongodb.core.MongoWriter<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.MongoWriter<T> , STRING ) ; java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.Document> < Document > ( ) ; for ( T T : java.util.Collection<> ) { void ( T ) ; void ( new BeforeConvertEvent < T > ( T , java.lang.String ) ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( T , org.springframework.data.mongodb.core.MongoWriter<T> ) ; void ( new BeforeSaveEvent < T > ( T , org.springframework.data.mongodb.core.Document , java.lang.String ) ) ; java.util.List<org.springframework.data.mongodb.core.Document> . add ( org.springframework.data.mongodb.core.Document ) ; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.util.List<org.springframework.data.mongodb.core.ObjectId> ( java.lang.String , java.util.List<org.springframework.data.mongodb.core.Document> ) , java.util.List<org.springframework.data.mongodb.core.Document> ) ; int int = NUMBER ; for ( T T : java.util.Collection<> ) { if ( int < java.util.List<java.lang.Object> . int ( ) ) { void ( T , java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; void ( new AfterSaveEvent < T > ( T , java.util.List<org.springframework.data.mongodb.core.Document> . get ( int ) , java.lang.String ) ) ; } int ++ ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; void ( java.lang.Object , java.lang.String ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> = java.util.Optional<> . java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> ( it -> it . getVersionProperty ( ) ) ; mapIfAllPresent ( java.util.Optional<> , java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> , ( l , r ) -> doSaveVersioned ( objectToSave , l , collectionName ) ) . orElseGet ( ( ) doSave ( collectionName , objectToSave , this . mongoConverter ) ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( T T , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> , java.lang.String java.lang.String ) { ConvertingPropertyAccessor org.springframework.data.mongodb.core.ConvertingPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.mongodb.core.MongoPersistentEntity<> . getPropertyAccessor ( T ) , org.springframework.data.mongodb.core.MongoConverter . getConversionService ( ) ) ; java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> = org.springframework.data.mongodb.core.MongoPersistentEntity<> . getVersionProperty ( ) ; java.util.Optional<java.lang.Number> < java.lang.Number > java.util.Optional<java.lang.Number> = java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> . flatMap ( it -> convertingAccessor . getProperty ( it , Number .class ) ) ; return mapIfAllPresent ( java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> , java.util.Optional<java.lang.Number> , ( property , number ) -> { convertingAccessor . setProperty ( property , Optional . of ( number . longValue ( ) + NUMBER ) ) ; maybeEmitEvent ( new BeforeConvertEvent < T > ( objectToSave , collectionName ) ) ; assertUpdateableIdIfNotSet ( objectToSave ) ; Document document = new Document ( ) ; this . mongoConverter . write ( objectToSave , document ) ; maybeEmitEvent ( new BeforeSaveEvent < T > ( objectToSave , document , collectionName ) ) ; Update update = Update . fromDocument ( document , ID_FIELD ) ; MongoPersistentProperty idProperty = entity . getRequiredIdProperty ( ) ; Object id = entity . getIdentifierAccessor ( objectToSave ) . getRequiredIdentifier ( ) ; Query query = new Query ( Criteria . where ( idProperty . getName ( ) ) . is ( id ) . and ( property . getName ( ) ) . is ( number ) ) ; UpdateResult result = doUpdate ( collectionName , query , update , objectToSave . getClass ( ) , false , false ) ; if ( result . getModifiedCount ( ) == NUMBER ) { throw new OptimisticLockingFailureException ( String . format ( STRING , id , versionNumber , collectionName ) ) ; } maybeEmitEvent ( new AfterSaveEvent < T > ( objectToSave , document , collectionName ) ) ; return objectToSave ; } ) . orElseGet ( ( ) { doInsert ( collectionName , objectToSave , this . mongoConverter ) ; return objectToSave ; } ) ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.lang.String java.lang.String , T T , MongoWriter < T > org.springframework.data.mongodb.core.MongoWriter<T> ) { void ( new BeforeConvertEvent < T > ( T , java.lang.String ) ) ; void ( T ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( T , org.springframework.data.mongodb.core.MongoWriter<T> ) ; void ( new BeforeSaveEvent < T > ( T , org.springframework.data.mongodb.core.Document , java.lang.String ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.data.mongodb.core.Document , T . java.lang.Class<? extends java.lang.Object> ( ) ) ; void ( T , java.lang.Object ) ; void ( new AfterSaveEvent < T > ( T , org.springframework.data.mongodb.core.Document , java.lang.String ) ) ; return T ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( final java.lang.String java.lang.String , final Document org.springframework.data.mongodb.core.Document , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , org.springframework.data.mongodb.core.Document . keySet ( ) , java.lang.String ) ; } return T ( java.lang.String , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . INSERT , java.lang.String , java.lang.Class<> , org.springframework.data.mongodb.core.Document , null ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . insertOne ( org.springframework.data.mongodb.core.Document ) ; } return org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . INSERT , java.lang.String , java.lang.Class<> , org.springframework.data.mongodb.core.Document , null ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . insertOne ( org.springframework.data.mongodb.core.Document ) ; } return org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.mongodb.core.ObjectId> < ObjectId > java.util.List<org.springframework.data.mongodb.core.ObjectId> ( final java.lang.String java.lang.String , final java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> ) { if ( java.util.List<org.springframework.data.mongodb.core.Document> . isEmpty ( ) ) { return java.util.Collections . java.util.List<org.springframework.data.mongodb.core.ObjectId> ( ) ; } if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , java.util.List<org.springframework.data.mongodb.core.Document> . size ( ) ) ; } T ( java.lang.String , new CollectionCallback < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . INSERT_LIST , java.lang.String , null , null , null ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertMany ( java.util.List<org.springframework.data.mongodb.core.Document> ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . insertMany ( java.util.List<org.springframework.data.mongodb.core.Document> ) ; } return null ; } } ) ; java.util.List<org.springframework.data.mongodb.core.ObjectId> < ObjectId > java.util.List<org.springframework.data.mongodb.core.ObjectId> = new java.util.ArrayList<org.springframework.data.mongodb.core.ObjectId> < ObjectId > ( ) ; for ( Document org.springframework.data.mongodb.core.Document : java.util.List<org.springframework.data.mongodb.core.Document> ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ; if ( java.lang.Object instanceof ObjectId ) { java.util.List<org.springframework.data.mongodb.core.ObjectId> . add ( ( ObjectId ) java.lang.Object ) ; } else { java.util.List<org.springframework.data.mongodb.core.ObjectId> . add ( null ) ; } } return java.util.List<org.springframework.data.mongodb.core.ObjectId> ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . INSERT_LIST , java.lang.String , null , null , null ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertMany ( java.util.List<org.springframework.data.mongodb.core.Document> ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . insertMany ( java.util.List<org.springframework.data.mongodb.core.Document> ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( final java.lang.String java.lang.String , final Document org.springframework.data.mongodb.core.Document , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , org.springframework.data.mongodb.core.Document . keySet ( ) ) ; } return T ( java.lang.String , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . SAVE , java.lang.String , java.lang.Class<> , org.springframework.data.mongodb.core.Document , null ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; if ( ! org.springframework.data.mongodb.core.Document . containsKey ( java.lang.String ) ) { if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . insertOne ( org.springframework.data.mongodb.core.Document ) ; } } else if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . replaceOne ( Filters . eq ( java.lang.String , org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ) , org.springframework.data.mongodb.core.Document , new UpdateOptions ( ) . upsert ( true ) ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . replaceOne ( Filters . eq ( java.lang.String , org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ) , org.springframework.data.mongodb.core.Document , new UpdateOptions ( ) . upsert ( true ) ) ; } return org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . SAVE , java.lang.String , java.lang.Class<> , org.springframework.data.mongodb.core.Document , null ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; if ( ! org.springframework.data.mongodb.core.Document . containsKey ( java.lang.String ) ) { if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . insertOne ( org.springframework.data.mongodb.core.Document ) ; } } else if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . replaceOne ( Filters . eq ( java.lang.String , org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ) , org.springframework.data.mongodb.core.Document , new UpdateOptions ( ) . upsert ( true ) ) ; } else { org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . replaceOne ( Filters . eq ( java.lang.String , org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ) , org.springframework.data.mongodb.core.Document , new UpdateOptions ( ) . upsert ( true ) ) ; } return org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , true , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , true , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , true , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , false , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( Query org.springframework.data.mongodb.core.Query , Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String ( java.lang.Class<> ) , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , false , true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.UpdateResult ( java.lang.String , org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , java.lang.Class<> , false , true ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( final java.lang.String java.lang.String , final Query org.springframework.data.mongodb.core.Query , final Update org.springframework.data.mongodb.core.Update , final java.lang.Class<?> < ? > java.lang.Class<?> , final boolean boolean , final boolean boolean ) { return T ( java.lang.String , new CollectionCallback < UpdateResult > ( ) { public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = java.lang.Class<> == null ? java.util.Optional . java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( ) : java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Class<> ) ; void ( java.util.Optional<> , org.springframework.data.mongodb.core.Update ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Query == null ? new Document ( ) : org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , java.util.Optional<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Update == null ? new Document ( ) : org.springframework.data.mongodb.core.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.Update . getUpdateObject ( ) , java.util.Optional<> ) ; if ( boolean && org.springframework.data.mongodb.core.Update . isIsolated ( ) && ! org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.Document . put ( STRING , NUMBER ) ; } if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , java.lang.String ) ; } MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . UPDATE , java.lang.String , java.lang.Class<> , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; UpdateOptions org.springframework.data.mongodb.core.UpdateOptions = new UpdateOptions ( ) ; org.springframework.data.mongodb.core.UpdateOptions . upsert ( boolean ) ; org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.WriteConcern != null ? org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) : org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; if ( ! UpdateMapper . isUpdateObject ( org.springframework.data.mongodb.core.Document ) ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . replaceOne ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.UpdateOptions ) ; } else { if ( boolean ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . updateMany ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.UpdateOptions ) ; } else { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . updateOne ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.UpdateOptions ) ; } } } } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.UpdateResult org.springframework.data.mongodb.core.UpdateResult ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = java.lang.Class<> == null ? java.util.Optional . java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( ) : java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Class<> ) ; void ( java.util.Optional<> , org.springframework.data.mongodb.core.Update ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Query == null ? new Document ( ) : org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , java.util.Optional<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Update == null ? new Document ( ) : org.springframework.data.mongodb.core.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.Update . getUpdateObject ( ) , java.util.Optional<> ) ; if ( boolean && org.springframework.data.mongodb.core.Update . isIsolated ( ) && ! org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.Document . put ( STRING , NUMBER ) ; } if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , java.lang.String ) ; } MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . UPDATE , java.lang.String , java.lang.Class<> , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; UpdateOptions org.springframework.data.mongodb.core.UpdateOptions = new UpdateOptions ( ) ; org.springframework.data.mongodb.core.UpdateOptions . upsert ( boolean ) ; org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.WriteConcern != null ? org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) : org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; if ( ! UpdateMapper . isUpdateObject ( org.springframework.data.mongodb.core.Document ) ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . replaceOne ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.UpdateOptions ) ; } else { if ( boolean ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . updateMany ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.UpdateOptions ) ; } else { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . updateOne ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.UpdateOptions ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> , Update org.springframework.data.mongodb.core.Update ) { ifAllPresent ( java.util.Optional<> , java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> it . getVersionProperty ( ) ) , ( entity , property ) -> { String versionFieldName = property . getFieldName ( ) ; if ( ! update . modifies ( versionFieldName ) ) { update . inc ( versionFieldName , NUMBER ) ; } } ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Document org.springframework.data.mongodb.core.Document , java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ) { return mapIfAllPresent ( java.util.Optional<> , java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> it . getVersionProperty ( ) ) , ( entity , property ) -> document . containsKey ( property . getFieldName ( ) ) ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } return org.springframework.data.mongodb.core.DeleteResult ( org.springframework.data.mongodb.core.Query ( java.lang.Object ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; if ( java.lang.Object == null ) { return null ; } return org.springframework.data.mongodb.core.DeleteResult ( java.lang.String , org.springframework.data.mongodb.core.Query ( java.lang.Object ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> < java.lang.String , java.util.Optional<java.lang.Object> < java.lang.Object > > org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( java.lang.Object instanceof Document ) { return Pair . of ( java.lang.String , java.util.Optional . java.util.Optional ( ( ( Document ) java.lang.Object ) . get ( java.lang.String ) ) ) ; } java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) ; return mapIfAllPresent ( java.util.Optional<> , java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> it . getIdProperty ( ) ) , ( l , r ) -> Pair . of ( r . getFieldName ( ) , l . getPropertyAccessor ( object ) . getProperty ( r ) ) ) . orElseThrow ( ( ) new MappingException ( STRING + objectType ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.Query org.springframework.data.mongodb.core.Query ( java.lang.Object java.lang.Object ) { Pair < java.lang.String , java.util.Optional<java.lang.Object> < java.lang.Object > > org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> = org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> ( java.lang.Object ) ; return new Query ( where ( org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> . getFirst ( ) ) . is ( org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> . getSecond ( ) . orElse ( null ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.Query org.springframework.data.mongodb.core.Query ( java.util.Collection<?> < ? > java.util.Collection<?> ) { Assert . notEmpty ( java.util.Collection<> , STRING ) ; java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Collection<> . java.util.Iterator<> ( ) ; Pair < java.lang.String , java.util.Optional<java.lang.Object> < java.lang.Object > > org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> = org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> ( java.util.Iterator<> . next ( ) ) ; java.util.ArrayList<java.lang.Object> < java.lang.Object > java.util.ArrayList<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.Collection<> . int ( ) ) ; java.util.ArrayList<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> . getSecond ( ) . orElse ( null ) ) ; while ( java.util.Iterator<> . boolean ( ) ) { java.util.ArrayList<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> ( java.util.Iterator<> . next ( ) ) . getSecond ( ) . orElse ( null ) ) ; } return new Query ( where ( org.springframework.data.mongodb.core.Pair<java.lang.String,java.util.Optional<java.lang.Object>> . getFirst ( ) ) . in ( java.util.ArrayList<java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> = java.util.Optional<> . java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> ( it -> it . getIdProperty ( ) ) ; Optionals . ifAllPresent ( java.util.Optional<> , java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> , ( entity , property ) -> { Optional < Object > propertyValue = entity . getPropertyAccessor ( value ) . getProperty ( property ) ; if ( propertyValue . isPresent ( ) ) { return; } if ( ! MongoSimpleTypes . AUTOGENERATED_ID_TYPES . contains ( property . getType ( ) ) ) { throw new InvalidDataAccessApiUsageException ( String . format ( STRING , property . getType ( ) . getName ( ) , value . getClass ( ) . getName ( ) ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.DeleteResult ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.DeleteResult ( org.springframework.data.mongodb.core.Query , java.lang.Class<> , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.DeleteResult ( java.lang.String , org.springframework.data.mongodb.core.Query , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( final java.lang.String java.lang.String , final Query org.springframework.data.mongodb.core.Query , final java.lang.Class<T> < T > java.lang.Class<T> ) { if ( org.springframework.data.mongodb.core.Query == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } Assert . hasText ( java.lang.String , STRING ) ; final Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Query . getQueryObject ( ) ; final java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Class<T> ) ; return T ( java.lang.String , new CollectionCallback < DeleteResult > ( ) { public org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { void ( new BeforeDeleteEvent < T > ( org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . REMOVE , java.lang.String , java.lang.Class<T> , null , org.springframework.data.mongodb.core.Document ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; DeleteResult org.springframework.data.mongodb.core.DeleteResult = null ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , new java.lang.Object [] { serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , java.lang.String } ) ; } if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.DeleteResult = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . deleteMany ( org.springframework.data.mongodb.core.Document ) ; } else { org.springframework.data.mongodb.core.DeleteResult = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . deleteMany ( org.springframework.data.mongodb.core.Document ) ; } void ( new AfterDeleteEvent < T > ( org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; return org.springframework.data.mongodb.core.DeleteResult ; } } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DeleteResult org.springframework.data.mongodb.core.DeleteResult ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { void ( new BeforeDeleteEvent < T > ( org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; MongoAction org.springframework.data.mongodb.core.MongoAction = new MongoAction ( org.springframework.data.mongodb.core.WriteConcern , MongoActionOperation . REMOVE , java.lang.String , java.lang.Class<T> , null , org.springframework.data.mongodb.core.Document ) ; WriteConcern org.springframework.data.mongodb.core.WriteConcern = org.springframework.data.mongodb.core.WriteConcern ( org.springframework.data.mongodb.core.MongoAction ) ; DeleteResult org.springframework.data.mongodb.core.DeleteResult = null ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , new java.lang.Object [] { serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , java.lang.String } ) ; } if ( org.springframework.data.mongodb.core.WriteConcern == null ) { org.springframework.data.mongodb.core.DeleteResult = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . deleteMany ( org.springframework.data.mongodb.core.Document ) ; } else { org.springframework.data.mongodb.core.DeleteResult = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . withWriteConcern ( org.springframework.data.mongodb.core.WriteConcern ) . deleteMany ( org.springframework.data.mongodb.core.Document ) ; } void ( new AfterDeleteEvent < T > ( org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; return org.springframework.data.mongodb.core.DeleteResult ; }  <METHOD_END>
<METHOD_START> public < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.List<T> ( java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> public < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return java.util.List<T> ( new org.springframework.data.mongodb.core.MongoTemplate.FindCallback ( null ) , null , new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.MapReduceResults<T> < T > org.springframework.data.mongodb.core.MapReduceResults<T> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.MapReduceResults ( null , java.lang.String , java.lang.String , java.lang.String , new MapReduceOptions ( ) . outputTypeInline ( ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.MapReduceResults<T> < T > org.springframework.data.mongodb.core.MapReduceResults<T> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , MapReduceOptions org.springframework.data.mongodb.core.MapReduceOptions , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.MapReduceResults ( null , java.lang.String , java.lang.String , java.lang.String , org.springframework.data.mongodb.core.MapReduceOptions , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.MapReduceResults<T> < T > org.springframework.data.mongodb.core.MapReduceResults<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.MapReduceResults ( org.springframework.data.mongodb.core.Query , java.lang.String , java.lang.String , java.lang.String , new MapReduceOptions ( ) . outputTypeInline ( ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.MapReduceResults<T> < T > org.springframework.data.mongodb.core.MapReduceResults<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , MapReduceOptions org.springframework.data.mongodb.core.MapReduceOptions , java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( java.lang.String ) ; MapReduceIterable < Document > org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . mapReduce ( java.lang.String , java.lang.String ) ; if ( org.springframework.data.mongodb.core.Query != null && org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> != null ) { if ( org.springframework.data.mongodb.core.Query . getLimit ( ) > NUMBER && org.springframework.data.mongodb.core.MapReduceOptions . getLimit ( ) == null ) { org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . limit ( org.springframework.data.mongodb.core.Query . getLimit ( ) ) ; } if ( org.springframework.data.mongodb.core.Query . getMeta ( ) != null && org.springframework.data.mongodb.core.Query . getMeta ( ) . getMaxTimeMsec ( ) != null ) { org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . maxTime ( org.springframework.data.mongodb.core.Query . getMeta ( ) . getMaxTimeMsec ( ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } if ( org.springframework.data.mongodb.core.Query . getSortObject ( ) != null ) { org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . sort ( org.springframework.data.mongodb.core.Query . getSortObject ( ) ) ; } org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . filter ( org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; } if ( org.springframework.data.mongodb.core.MapReduceOptions != null ) { if ( ! CollectionUtils . isEmpty ( org.springframework.data.mongodb.core.MapReduceOptions . getScopeVariables ( ) ) ) { Document org.springframework.data.mongodb.core.Document = new Document ( ) ; org.springframework.data.mongodb.core.Document . putAll ( org.springframework.data.mongodb.core.MapReduceOptions . getScopeVariables ( ) ) ; org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . scope ( org.springframework.data.mongodb.core.Document ) ; } if ( org.springframework.data.mongodb.core.MapReduceOptions . getLimit ( ) != null && org.springframework.data.mongodb.core.MapReduceOptions . getLimit ( ) . intValue ( ) > NUMBER ) { org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . limit ( org.springframework.data.mongodb.core.MapReduceOptions . getLimit ( ) ) ; } if ( StringUtils . hasText ( org.springframework.data.mongodb.core.MapReduceOptions . getFinalizeFunction ( ) ) ) { org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . finalizeFunction ( org.springframework.data.mongodb.core.MapReduceOptions . getFinalizeFunction ( ) ) ; } if ( org.springframework.data.mongodb.core.MapReduceOptions . getJavaScriptMode ( ) != null ) { org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . jsMode ( org.springframework.data.mongodb.core.MapReduceOptions . getJavaScriptMode ( ) ) ; } if ( org.springframework.data.mongodb.core.MapReduceOptions . getOutputSharded ( ) != null ) { org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> . sharded ( org.springframework.data.mongodb.core.MapReduceOptions . getOutputSharded ( ) ) ; } } java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> = new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ; for ( Document org.springframework.data.mongodb.core.Document : org.springframework.data.mongodb.core.MapReduceIterable<org.springframework.data.mongodb.core.Document> ) { java.util.List<T> . boolean ( org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> . T ( org.springframework.data.mongodb.core.Document ) ) ; } return new MapReduceResults < T > ( java.util.List<T> , new Document ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.GroupByResults<T> < T > org.springframework.data.mongodb.core.GroupByResults<T> ( java.lang.String java.lang.String , GroupBy org.springframework.data.mongodb.core.GroupBy , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.core.GroupByResults ( null , java.lang.String , org.springframework.data.mongodb.core.GroupBy , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.mongodb.core.GroupByResults<T> < T > org.springframework.data.mongodb.core.GroupByResults<T> ( Criteria org.springframework.data.mongodb.core.Criteria , java.lang.String java.lang.String , GroupBy org.springframework.data.mongodb.core.GroupBy , java.lang.Class<T> < T > java.lang.Class<T> ) { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.GroupBy . getGroupByObject ( ) ; org.springframework.data.mongodb.core.Document . put ( STRING , java.lang.String ) ; if ( org.springframework.data.mongodb.core.Criteria == null ) { org.springframework.data.mongodb.core.Document . put ( STRING , null ) ; } else { org.springframework.data.mongodb.core.Document . put ( STRING , org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Criteria . getCriteriaObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.Document . get ( STRING ) ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( ( java.lang.String ) java.lang.Object ) ; org.springframework.data.mongodb.core.Document . put ( STRING , Document . parse ( java.lang.String ) ) ; } } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.Document . put ( STRING , java.lang.String ( org.springframework.data.mongodb.core.Document . get ( STRING ) . toString ( ) ) ) ; } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.Document . put ( STRING , java.lang.String ( org.springframework.data.mongodb.core.Document . get ( STRING ) . toString ( ) ) ) ; } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.Document . put ( STRING , java.lang.String ( org.springframework.data.mongodb.core.Document . get ( STRING ) . toString ( ) ) ) ; } Document org.springframework.data.mongodb.core.Document = new Document ( STRING , org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) ) ; } Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , org.springframework.data.mongodb.core.Document ) ; } @ java.lang.SuppressWarnings ( STRING ) java.lang.Iterable<org.springframework.data.mongodb.core.Document> < Document > java.lang.Iterable<org.springframework.data.mongodb.core.Document> = ( java.lang.Iterable<org.springframework.data.mongodb.core.Document> < Document > ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> = new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ; for ( Document org.springframework.data.mongodb.core.Document : java.lang.Iterable<org.springframework.data.mongodb.core.Document> ) { java.util.List<T> . boolean ( org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> . T ( org.springframework.data.mongodb.core.Document ) ) ; } return new GroupByResults < T > ( java.util.List<T> , org.springframework.data.mongodb.core.Document ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.AggregationResults<O> < O > org.springframework.data.mongodb.core.AggregationResults<O> ( TypedAggregation < ? > org.springframework.data.mongodb.core.TypedAggregation<?> , java.lang.Class<O> < O > java.lang.Class<O> ) { return org.springframework.data.mongodb.core.AggregationResults ( org.springframework.data.mongodb.core.TypedAggregation<> , java.lang.String ( org.springframework.data.mongodb.core.TypedAggregation<> . getInputType ( ) ) , java.lang.Class<O> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.AggregationResults<O> < O > org.springframework.data.mongodb.core.AggregationResults<O> ( TypedAggregation < ? > org.springframework.data.mongodb.core.TypedAggregation<?> , java.lang.String java.lang.String , java.lang.Class<O> < O > java.lang.Class<O> ) { Assert . notNull ( org.springframework.data.mongodb.core.TypedAggregation<> , STRING ) ; AggregationOperationContext org.springframework.data.mongodb.core.AggregationOperationContext = new TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.TypedAggregation<> . getInputType ( ) , org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> , org.springframework.data.mongodb.core.QueryMapper ) ; return org.springframework.data.mongodb.core.AggregationResults ( org.springframework.data.mongodb.core.TypedAggregation<> , java.lang.String , java.lang.Class<O> , org.springframework.data.mongodb.core.AggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.AggregationResults<O> < O > org.springframework.data.mongodb.core.AggregationResults<O> ( Aggregation org.springframework.data.mongodb.core.Aggregation , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<O> < O > java.lang.Class<O> ) { return org.springframework.data.mongodb.core.AggregationResults ( org.springframework.data.mongodb.core.Aggregation , java.lang.String ( java.lang.Class<> ) , java.lang.Class<O> , new TypeBasedAggregationOperationContext ( java.lang.Class<> , org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> , org.springframework.data.mongodb.core.QueryMapper ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.AggregationResults<O> < O > org.springframework.data.mongodb.core.AggregationResults<O> ( Aggregation org.springframework.data.mongodb.core.Aggregation , java.lang.String java.lang.String , java.lang.Class<O> < O > java.lang.Class<O> ) { return org.springframework.data.mongodb.core.AggregationResults ( org.springframework.data.mongodb.core.Aggregation , java.lang.String , java.lang.Class<O> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.CloseableIterator<O> < O > org.springframework.data.mongodb.core.CloseableIterator<O> ( TypedAggregation < ? > org.springframework.data.mongodb.core.TypedAggregation<?> , java.lang.String java.lang.String , java.lang.Class<O> < O > java.lang.Class<O> ) { Assert . notNull ( org.springframework.data.mongodb.core.TypedAggregation<> , STRING ) ; AggregationOperationContext org.springframework.data.mongodb.core.AggregationOperationContext = new TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.TypedAggregation<> . getInputType ( ) , org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> , org.springframework.data.mongodb.core.QueryMapper ) ; return org.springframework.data.mongodb.core.CloseableIterator ( org.springframework.data.mongodb.core.TypedAggregation<> , java.lang.String , java.lang.Class<O> , org.springframework.data.mongodb.core.AggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.CloseableIterator<O> < O > org.springframework.data.mongodb.core.CloseableIterator<O> ( TypedAggregation < ? > org.springframework.data.mongodb.core.TypedAggregation<?> , java.lang.Class<O> < O > java.lang.Class<O> ) { return org.springframework.data.mongodb.core.CloseableIterator ( org.springframework.data.mongodb.core.TypedAggregation<> , java.lang.String ( org.springframework.data.mongodb.core.TypedAggregation<> . getInputType ( ) ) , java.lang.Class<O> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.CloseableIterator<O> < O > org.springframework.data.mongodb.core.CloseableIterator<O> ( Aggregation org.springframework.data.mongodb.core.Aggregation , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<O> < O > java.lang.Class<O> ) { return org.springframework.data.mongodb.core.CloseableIterator ( org.springframework.data.mongodb.core.Aggregation , java.lang.String ( java.lang.Class<> ) , java.lang.Class<O> , new TypeBasedAggregationOperationContext ( java.lang.Class<> , org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> , org.springframework.data.mongodb.core.QueryMapper ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < O > org.springframework.data.mongodb.core.CloseableIterator<O> < O > org.springframework.data.mongodb.core.CloseableIterator<O> ( Aggregation org.springframework.data.mongodb.core.Aggregation , java.lang.String java.lang.String , java.lang.Class<O> < O > java.lang.Class<O> ) { return org.springframework.data.mongodb.core.CloseableIterator ( org.springframework.data.mongodb.core.Aggregation , java.lang.String , java.lang.Class<O> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.String java.lang.String ) { return java.lang.Object ( org.springframework.data.mongodb.core.Query , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.List ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { return java.util.List ( java.lang.String , org.springframework.data.mongodb.core.Query , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.List<T> < T > java.util.List<T> ( java.lang.String java.lang.String , Query org.springframework.data.mongodb.core.Query , java.lang.Class<T> < T > java.lang.Class<T> ) { java.util.List<T> < T > java.util.List<T> = java.util.List ( org.springframework.data.mongodb.core.Query , java.lang.Class<T> , java.lang.String ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<T> ) ) { org.springframework.data.mongodb.core.DeleteResult ( org.springframework.data.mongodb.core.Query ( java.util.List<T> ) , java.lang.Class<T> , java.lang.String ) ; } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> protected < O > org.springframework.data.mongodb.core.AggregationResults<O> < O > org.springframework.data.mongodb.core.AggregationResults<O> ( Aggregation org.springframework.data.mongodb.core.Aggregation , java.lang.String java.lang.String , java.lang.Class<O> < O > java.lang.Class<O> , AggregationOperationContext org.springframework.data.mongodb.core.AggregationOperationContext ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.Aggregation , STRING ) ; Assert . notNull ( java.lang.Class<O> , STRING ) ; AggregationOperationContext org.springframework.data.mongodb.core.AggregationOperationContext = org.springframework.data.mongodb.core.AggregationOperationContext == null ? Aggregation . DEFAULT_CONTEXT : org.springframework.data.mongodb.core.AggregationOperationContext ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Aggregation . toDocument ( java.lang.String , org.springframework.data.mongodb.core.AggregationOperationContext ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) ) ; } Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Document , this . org.springframework.data.mongodb.core.ReadPreference ) ; return new AggregationResults < O > ( java.util.List ( java.lang.Class<O> , org.springframework.data.mongodb.core.Document , java.lang.String ) , org.springframework.data.mongodb.core.Document ) ; }  <METHOD_END>
<METHOD_START> private < O > java.util.List<O> < O > java.util.List<O> ( java.lang.Class<O> < O > java.lang.Class<O> , Document org.springframework.data.mongodb.core.Document , java.lang.String java.lang.String ) { @ java.lang.SuppressWarnings ( STRING ) java.lang.Iterable<org.springframework.data.mongodb.core.Document> < Document > java.lang.Iterable<org.springframework.data.mongodb.core.Document> = ( java.lang.Iterable<org.springframework.data.mongodb.core.Document> < Document > ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; if ( java.lang.Iterable<org.springframework.data.mongodb.core.Document> == null ) { return java.util.Collections . java.util.List<O> ( ) ; } org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<O> < O > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<O> = new org.springframework.data.mongodb.core.MongoTemplate.UnwrapAndReadDocumentCallback<O> < O > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<O> , java.lang.String ) ; java.util.List<O> < O > java.util.List<O> = new java.util.ArrayList<O> < O > ( ) ; for ( Document org.springframework.data.mongodb.core.Document : java.lang.Iterable<org.springframework.data.mongodb.core.Document> ) { java.util.List<O> . boolean ( org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<O> . O ( org.springframework.data.mongodb.core.Document ) ) ; } return java.util.List<O> ; }  <METHOD_END>
<METHOD_START> protected < O > org.springframework.data.mongodb.core.CloseableIterator<O> < O > org.springframework.data.mongodb.core.CloseableIterator<O> ( Aggregation org.springframework.data.mongodb.core.Aggregation , java.lang.String java.lang.String , java.lang.Class<O> < O > java.lang.Class<O> , AggregationOperationContext org.springframework.data.mongodb.core.AggregationOperationContext ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.Aggregation , STRING ) ; Assert . notNull ( java.lang.Class<O> , STRING ) ; AggregationOperationContext org.springframework.data.mongodb.core.AggregationOperationContext = org.springframework.data.mongodb.core.AggregationOperationContext == null ? Aggregation . DEFAULT_CONTEXT : org.springframework.data.mongodb.core.AggregationOperationContext ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Aggregation . toDocument ( java.lang.String , org.springframework.data.mongodb.core.AggregationOperationContext ) ; void ( org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) ) ; } org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<O> < O > org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<O> = new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<O> < O > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<O> , java.lang.String ) ; return T ( java.lang.String , new CollectionCallback < CloseableIterator < O > > ( ) { @ java.lang.Override public org.springframework.data.mongodb.core.CloseableIterator<O> < O > org.springframework.data.mongodb.core.CloseableIterator<O> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> = ( java.util.List<org.springframework.data.mongodb.core.Document> < Document > ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; AggregationOptions org.springframework.data.mongodb.core.AggregationOptions = AggregationOptions . fromDocument ( org.springframework.data.mongodb.core.Document ) ; AggregateIterable < Document > org.springframework.data.mongodb.core.AggregateIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . aggregate ( java.util.List<org.springframework.data.mongodb.core.Document> ) . allowDiskUse ( org.springframework.data.mongodb.core.AggregationOptions . isAllowDiskUse ( ) ) . useCursor ( true ) ; java.lang.Integer java.lang.Integer = org.springframework.data.mongodb.core.AggregationOptions . getCursorBatchSize ( ) ; if ( java.lang.Integer != null ) { org.springframework.data.mongodb.core.AggregateIterable<org.springframework.data.mongodb.core.Document> . batchSize ( java.lang.Integer ) ; } return new org.springframework.data.mongodb.core.MongoTemplate.CloseableIterableCursorAdapter<O> < O > ( org.springframework.data.mongodb.core.AggregateIterable<org.springframework.data.mongodb.core.Document> . iterator ( ) , org.springframework.data.mongodb.core.PersistenceExceptionTranslator , org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<O> ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.CloseableIterator<O> < O > org.springframework.data.mongodb.core.CloseableIterator<O> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> = ( java.util.List<org.springframework.data.mongodb.core.Document> < Document > ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; AggregationOptions org.springframework.data.mongodb.core.AggregationOptions = AggregationOptions . fromDocument ( org.springframework.data.mongodb.core.Document ) ; AggregateIterable < Document > org.springframework.data.mongodb.core.AggregateIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . aggregate ( java.util.List<org.springframework.data.mongodb.core.Document> ) . allowDiskUse ( org.springframework.data.mongodb.core.AggregationOptions . isAllowDiskUse ( ) ) . useCursor ( true ) ; java.lang.Integer java.lang.Integer = org.springframework.data.mongodb.core.AggregationOptions . getCursorBatchSize ( ) ; if ( java.lang.Integer != null ) { org.springframework.data.mongodb.core.AggregateIterable<org.springframework.data.mongodb.core.Document> . batchSize ( java.lang.Integer ) ; } return new org.springframework.data.mongodb.core.MongoTemplate.CloseableIterableCursorAdapter<O> < O > ( org.springframework.data.mongodb.core.AggregateIterable<org.springframework.data.mongodb.core.Document> . iterator ( ) , org.springframework.data.mongodb.core.PersistenceExceptionTranslator , org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<O> ) ; }  <METHOD_END>
<METHOD_START> private void void ( Document org.springframework.data.mongodb.core.Document ) { java.lang.Boolean java.lang.Boolean = org.springframework.data.mongodb.core.Document . get ( STRING , java.lang.Boolean .class ) ; if ( java.lang.Boolean != null && java.lang.Boolean ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ; if ( this . org.springframework.data.mongodb.core.ResourceLoader != null && ResourceUtils . isUrl ( java.lang.String ) ) { Resource org.springframework.data.mongodb.core.Resource = org.springframework.data.mongodb.core.ResourceLoader . getResource ( java.lang.String ) ; if ( ! org.springframework.data.mongodb.core.Resource . exists ( ) ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } java.util.Scanner java.util.Scanner = null ; try { java.util.Scanner = new java.util.Scanner ( org.springframework.data.mongodb.core.Resource . getInputStream ( ) ) ; return java.util.Scanner . java.util.Scanner ( STRING ) . java.lang.String ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , java.io.IOException ) ; } finally { if ( java.util.Scanner != null ) { java.util.Scanner . void ( ) ; } } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return T ( new DbCallback < java.util.Set<java.lang.String> < java.lang.String > > ( ) { public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.MongoDatabase . listCollectionNames ( ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } return java.util.Set<java.lang.String> ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.MongoDatabase . listCollectionNames ( ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ( ) { return org.springframework.data.mongodb.core.MongoDbFactory . getDb ( ) ; }  <METHOD_END>
<METHOD_START> protected < T > void void ( MongoMappingEvent < T > org.springframework.data.mongodb.core.MongoMappingEvent<T> ) { if ( null != org.springframework.data.mongodb.core.ApplicationEventPublisher ) { org.springframework.data.mongodb.core.ApplicationEventPublisher . publishEvent ( org.springframework.data.mongodb.core.MongoMappingEvent<T> ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( final java.lang.String java.lang.String , final Document org.springframework.data.mongodb.core.Document ) { return T ( new DbCallback < MongoCollection < Document > > ( ) { public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { CreateCollectionOptions org.springframework.data.mongodb.core.CreateCollectionOptions = new CreateCollectionOptions ( ) ; if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.CreateCollectionOptions . capped ( ( java.lang.Boolean ) org.springframework.data.mongodb.core.Document . get ( STRING ) ) ; } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.CreateCollectionOptions . sizeInBytes ( ( ( java.lang.Number ) org.springframework.data.mongodb.core.Document . get ( STRING ) ) . long ( ) ) ; } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.CreateCollectionOptions . maxDocuments ( ( ( java.lang.Number ) org.springframework.data.mongodb.core.Document . get ( STRING ) ) . long ( ) ) ; } org.springframework.data.mongodb.core.MongoDatabase . createCollection ( java.lang.String , org.springframework.data.mongodb.core.CreateCollectionOptions ) ; MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoDatabase . getCollection ( java.lang.String , Document .class ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getCollectionName ( ) ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; } } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { CreateCollectionOptions org.springframework.data.mongodb.core.CreateCollectionOptions = new CreateCollectionOptions ( ) ; if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.CreateCollectionOptions . capped ( ( java.lang.Boolean ) org.springframework.data.mongodb.core.Document . get ( STRING ) ) ; } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.CreateCollectionOptions . sizeInBytes ( ( ( java.lang.Number ) org.springframework.data.mongodb.core.Document . get ( STRING ) ) . long ( ) ) ; } if ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) ) { org.springframework.data.mongodb.core.CreateCollectionOptions . maxDocuments ( ( ( java.lang.Number ) org.springframework.data.mongodb.core.Document . get ( STRING ) ) . long ( ) ) ; } org.springframework.data.mongodb.core.MongoDatabase . createCollection ( java.lang.String , org.springframework.data.mongodb.core.CreateCollectionOptions ) ; MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoDatabase . getCollection ( java.lang.String , Document .class ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getCollectionName ( ) ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document == null ? null : org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ; } return T ( new org.springframework.data.mongodb.core.MongoTemplate.FindOneCallback ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) , new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( this . org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.List<T> < T > java.util.List<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.List ( java.lang.String , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , null , new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( this . org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.List<T> < T > java.util.List<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> , CursorPreparer org.springframework.data.mongodb.core.CursorPreparer ) { return java.util.List ( java.lang.String , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , org.springframework.data.mongodb.core.CursorPreparer , new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.MongoConverter , java.lang.Class<T> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected < S , T > java.util.List<T> < T > java.util.List<T> ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<S> < S > java.lang.Class<S> , CursorPreparer org.springframework.data.mongodb.core.CursorPreparer , org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> ) { java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<S> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedFields ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , java.lang.Class<S> , java.lang.String ) ; } return java.util.List ( new org.springframework.data.mongodb.core.MongoTemplate.FindCallback ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.CursorPreparer , org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( CollectionOptions org.springframework.data.mongodb.core.CollectionOptions ) { Document org.springframework.data.mongodb.core.Document = new Document ( ) ; if ( org.springframework.data.mongodb.core.CollectionOptions != null ) { if ( org.springframework.data.mongodb.core.CollectionOptions . getCapped ( ) != null ) { org.springframework.data.mongodb.core.Document . put ( STRING , org.springframework.data.mongodb.core.CollectionOptions . getCapped ( ) . booleanValue ( ) ) ; } if ( org.springframework.data.mongodb.core.CollectionOptions . getSize ( ) != null ) { org.springframework.data.mongodb.core.Document . put ( STRING , org.springframework.data.mongodb.core.CollectionOptions . getSize ( ) . intValue ( ) ) ; } if ( org.springframework.data.mongodb.core.CollectionOptions . getMaxDocuments ( ) != null ) { org.springframework.data.mongodb.core.Document . put ( STRING , org.springframework.data.mongodb.core.CollectionOptions . getMaxDocuments ( ) . intValue ( ) ) ; } } return org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> ) { EntityReader < ? super T , Bson > org.springframework.data.mongodb.core.EntityReader<? super T,org.springframework.data.mongodb.core.Bson> = this . org.springframework.data.mongodb.core.MongoConverter ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ; } java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; return T ( new org.springframework.data.mongodb.core.MongoTemplate.FindAndRemoveCallback ( org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document ) , new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , java.lang.Class<T> < T > java.lang.Class<T> , Update org.springframework.data.mongodb.core.Update , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions ) { EntityReader < ? super T , Bson > org.springframework.data.mongodb.core.EntityReader<? super T,org.springframework.data.mongodb.core.Bson> = this . org.springframework.data.mongodb.core.MongoConverter ; if ( org.springframework.data.mongodb.core.FindAndModifyOptions == null ) { org.springframework.data.mongodb.core.FindAndModifyOptions = new FindAndModifyOptions ( ) ; } java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; void ( java.util.Optional<> , org.springframework.data.mongodb.core.Update ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Document , java.util.Optional<> ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.UpdateMapper . getMappedObject ( org.springframework.data.mongodb.core.Update . getUpdateObject ( ) , java.util.Optional<> ) ; if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING + STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , java.lang.Class<T> , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , java.lang.String ) ; } return T ( new org.springframework.data.mongodb.core.MongoTemplate.FindAndModifyCallback ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.FindAndModifyOptions ) , new org.springframework.data.mongodb.core.MongoTemplate.ReadDocumentCallback<T> < T > ( org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> , java.lang.Class<T> , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return; } if ( java.lang.Object instanceof Document ) { Document org.springframework.data.mongodb.core.Document = ( Document ) java.lang.Object ; org.springframework.data.mongodb.core.Document . put ( java.lang.String , java.lang.Object ) ; return; } java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) . ifPresent ( idProp -> { ConversionService conversionService = mongoConverter . getConversionService ( ) ; MongoPersistentEntity < ? > entity = mappingContext . getRequiredPersistentEntity ( savedObject . getClass ( ) ) ; PersistentPropertyAccessor accessor = entity . getPropertyAccessor ( savedObject ) ; Optional < Object > value = accessor . getProperty ( idProp ) ; if ( ! value . isPresent ( ) ) { new ConvertingPropertyAccessor ( accessor , conversionService ) . setProperty ( idProp , Optional . of ( id ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( MongoDatabase org.springframework.data.mongodb.core.MongoDatabase , java.lang.String java.lang.String ) { try { MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoDatabase . getCollection ( java.lang.String , Document .class ) ; org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) ; return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> private < T > T T ( CollectionCallback < Document > org.springframework.data.mongodb.core.CollectionCallback<org.springframework.data.mongodb.core.Document> , org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> , java.lang.String java.lang.String ) { try { T T = org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> . T ( org.springframework.data.mongodb.core.CollectionCallback<org.springframework.data.mongodb.core.Document> . doInCollection ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.MongoDatabase ( ) , java.lang.String ) ) ) ; return T ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> private < T > java.util.List<T> < T > java.util.List<T> ( CollectionCallback < FindIterable < Document > > org.springframework.data.mongodb.core.CollectionCallback<org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document>> , CursorPreparer org.springframework.data.mongodb.core.CursorPreparer , org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> , java.lang.String java.lang.String ) { try { MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = null ; try { FindIterable < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.CollectionCallback<org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document>> . doInCollection ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.MongoDatabase ( ) , java.lang.String ) ) ; if ( org.springframework.data.mongodb.core.CursorPreparer != null ) { org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.CursorPreparer . prepare ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; } org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . iterator ( ) ; java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; while ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . hasNext ( ) ) { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . next ( ) ; java.util.List<T> . boolean ( org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> . T ( org.springframework.data.mongodb.core.Document ) ) ; } return java.util.List<T> ; } finally { if ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> != null ) { org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . close ( ) ; } } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> private void void ( CollectionCallback < FindIterable < Document > > org.springframework.data.mongodb.core.CollectionCallback<org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document>> , CursorPreparer org.springframework.data.mongodb.core.CursorPreparer , DocumentCallbackHandler org.springframework.data.mongodb.core.DocumentCallbackHandler , java.lang.String java.lang.String ) { try { MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = null ; try { FindIterable < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.CollectionCallback<org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document>> . doInCollection ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.MongoDatabase ( ) , java.lang.String ) ) ; if ( org.springframework.data.mongodb.core.CursorPreparer != null ) { org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.CursorPreparer . prepare ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; } org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . iterator ( ) ; while ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . hasNext ( ) ) { org.springframework.data.mongodb.core.DocumentCallbackHandler . processDocument ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . next ( ) ) ; } } finally { if ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> != null ) { org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . close ( ) ; } } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator ( ) { return org.springframework.data.mongodb.core.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Optional . java.util.Optional<java.lang.Class<>> ( java.lang.Class<> ) . java.util.Optional<java.lang.Object> ( java.lang.Class<> -> org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.MongoPersistentProperty> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) . flatMap ( it -> it . getIdProperty ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T > java.lang.String java.lang.String ( T T ) { if ( null != T ) { return java.lang.String ( T . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } return org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<> ) . getCollection ( ) ; }  <METHOD_END>
<METHOD_START> private static final org.springframework.data.mongodb.core.MongoConverter org.springframework.data.mongodb.core.MongoConverter ( MongoDbFactory org.springframework.data.mongodb.core.MongoDbFactory ) { DbRefResolver org.springframework.data.mongodb.core.DbRefResolver = new DefaultDbRefResolver ( org.springframework.data.mongodb.core.MongoDbFactory ) ; MappingMongoConverter org.springframework.data.mongodb.core.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.DbRefResolver , new MongoMappingContext ( ) ) ; org.springframework.data.mongodb.core.MappingMongoConverter . afterPropertiesSet ( ) ; return org.springframework.data.mongodb.core.MappingMongoConverter ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.mongodb.core.Query == null || org.springframework.data.mongodb.core.Query . getSortObject ( ) == null ) { return null ; } return org.springframework.data.mongodb.core.QueryMapper . getMappedSort ( org.springframework.data.mongodb.core.Query . getSortObject ( ) , org.springframework.data.mongodb.core.MappingContext<,org.springframework.data.mongodb.core.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> static java.lang.RuntimeException java.lang.RuntimeException ( java.lang.RuntimeException java.lang.RuntimeException , PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) { java.lang.RuntimeException java.lang.RuntimeException = org.springframework.data.mongodb.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ; return java.lang.RuntimeException == null ? java.lang.RuntimeException : java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.util.List<org.springframework.data.mongodb.core.ObjectId> < ObjectId > java.util.List<org.springframework.data.mongodb.core.ObjectId> , java.util.List<org.springframework.data.mongodb.core.Document> < Document > java.util.List<org.springframework.data.mongodb.core.Document> ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.List<org.springframework.data.mongodb.core.ObjectId> . size ( ) ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.mongodb.core.ObjectId> . size ( ) ; int ++ ) { ObjectId org.springframework.data.mongodb.core.ObjectId = java.util.List<org.springframework.data.mongodb.core.ObjectId> . get ( int ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.ObjectId == null ? java.util.List<org.springframework.data.mongodb.core.Document> . get ( int ) . get ( java.lang.String ) : org.springframework.data.mongodb.core.ObjectId ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { if ( org.springframework.data.mongodb.core.Document == null ) { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getFullName ( ) ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) . first ( ) ; } else { if ( org.springframework.data.mongodb.core.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.Logger . debug ( STRING , serializeToJsonSafely ( org.springframework.data.mongodb.core.Document ) , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . getNamespace ( ) . getFullName ( ) ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) . projection ( org.springframework.data.mongodb.core.Document ) . first ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( Document org.springframework.data.mongodb.core.Document ) { this( org.springframework.data.mongodb.core.Document , null ); }  <METHOD_END>
<METHOD_START> public void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document == null ? new Document ( ) : org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )				throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { if ( org.springframework.data.mongodb.core.Document == null || org.springframework.data.mongodb.core.Document . isEmpty ( ) ) { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) ; } else { return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( org.springframework.data.mongodb.core.Document ) . projection ( org.springframework.data.mongodb.core.Document ) ; } }  <METHOD_END>
<METHOD_START> public void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { FindOneAndDeleteOptions org.springframework.data.mongodb.core.FindOneAndDeleteOptions = new FindOneAndDeleteOptions ( ) ; org.springframework.data.mongodb.core.FindOneAndDeleteOptions . sort ( org.springframework.data.mongodb.core.Document ) ; org.springframework.data.mongodb.core.FindOneAndDeleteOptions . projection ( org.springframework.data.mongodb.core.Document ) ; return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . findOneAndDelete ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.FindOneAndDeleteOptions ) ; }  <METHOD_END>
<METHOD_START> public void ( Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , Document org.springframework.data.mongodb.core.Document , FindAndModifyOptions org.springframework.data.mongodb.core.FindAndModifyOptions ) { this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.Document ; this . org.springframework.data.mongodb.core.FindAndModifyOptions = org.springframework.data.mongodb.core.FindAndModifyOptions ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { FindOneAndUpdateOptions org.springframework.data.mongodb.core.FindOneAndUpdateOptions = new FindOneAndUpdateOptions ( ) ; org.springframework.data.mongodb.core.FindOneAndUpdateOptions . sort ( org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.FindAndModifyOptions . isUpsert ( ) ) { org.springframework.data.mongodb.core.FindOneAndUpdateOptions . upsert ( true ) ; } org.springframework.data.mongodb.core.FindOneAndUpdateOptions . projection ( org.springframework.data.mongodb.core.Document ) ; if ( org.springframework.data.mongodb.core.FindAndModifyOptions . returnNew ) { org.springframework.data.mongodb.core.FindOneAndUpdateOptions . returnDocument ( ReturnDocument . AFTER ) ; } return org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . findOneAndUpdate ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.FindOneAndUpdateOptions ) ; }  <METHOD_END>
<METHOD_START> T T ( Document org.springframework.data.mongodb.core.Document );  <METHOD_END>
<METHOD_START> public void ( EntityReader < ? super T , Bson > org.springframework.data.mongodb.core.EntityReader<? super T,org.springframework.data.mongodb.core.Bson> , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; this . org.springframework.data.mongodb.core.EntityReader<? super T,org.springframework.data.mongodb.core.Bson> = org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> ; this . java.lang.Class<T> = java.lang.Class<T> ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public T T ( Document org.springframework.data.mongodb.core.Document ) { if ( null != org.springframework.data.mongodb.core.Document ) { void ( new AfterLoadEvent < T > ( org.springframework.data.mongodb.core.Document , java.lang.Class<T> , java.lang.String ) ) ; } T T = org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> . read ( java.lang.Class<T> , org.springframework.data.mongodb.core.Document ) ; if ( null != T ) { void ( new AfterConvertEvent < T > ( org.springframework.data.mongodb.core.Document , T , java.lang.String ) ) ; } return T ; }  <METHOD_END>
<METHOD_START> public void ( EntityReader < ? super T , Bson > org.springframework.data.mongodb.core.EntityReader<? super T,org.springframework.data.mongodb.core.Bson> , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { super( org.springframework.data.mongodb.core.EntityReader<,org.springframework.data.mongodb.core.Bson> , java.lang.Class<T> , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Document org.springframework.data.mongodb.core.Document ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.Document . get ( Fields . UNDERSCORE_ID ) ; if ( ! ( java.lang.Object instanceof Document ) ) { return super. T ( org.springframework.data.mongodb.core.Document ) ; } Document org.springframework.data.mongodb.core.Document = new Document ( ) ; Document org.springframework.data.mongodb.core.Document = ( Document ) java.lang.Object ; org.springframework.data.mongodb.core.Document . putAll ( org.springframework.data.mongodb.core.Document ) ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.Document . keySet ( ) ) { if ( ! Fields . UNDERSCORE_ID . equals ( java.lang.String ) ) { org.springframework.data.mongodb.core.Document . put ( java.lang.String , org.springframework.data.mongodb.core.Document . get ( java.lang.String ) ) ; } } return super. T ( org.springframework.data.mongodb.core.Document ) ; }  <METHOD_END>
<METHOD_START> public void ( Query org.springframework.data.mongodb.core.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.data.mongodb.core.Query = org.springframework.data.mongodb.core.Query ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( FindIterable < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) { if ( org.springframework.data.mongodb.core.Query == null ) { return org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ; } if ( org.springframework.data.mongodb.core.Query . getSkip ( ) <= NUMBER && org.springframework.data.mongodb.core.Query . getLimit ( ) <= NUMBER && org.springframework.data.mongodb.core.Query . getSortObject ( ) == null && ! StringUtils . hasText ( org.springframework.data.mongodb.core.Query . getHint ( ) ) && ! org.springframework.data.mongodb.core.Query . getMeta ( ) . hasValues ( ) ) { return org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ; } FindIterable < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ; try { if ( org.springframework.data.mongodb.core.Query . getSkip ( ) > NUMBER ) { org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . skip ( ( int ) org.springframework.data.mongodb.core.Query . getSkip ( ) ) ; } if ( org.springframework.data.mongodb.core.Query . getLimit ( ) > NUMBER ) { org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . limit ( org.springframework.data.mongodb.core.Query . getLimit ( ) ) ; } if ( org.springframework.data.mongodb.core.Query . getSortObject ( ) != null ) { Document org.springframework.data.mongodb.core.Document = java.lang.Class<> != null ? org.springframework.data.mongodb.core.Document ( org.springframework.data.mongodb.core.Query , java.lang.Class<> ) : org.springframework.data.mongodb.core.Query . getSortObject ( ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . sort ( org.springframework.data.mongodb.core.Document ) ; } Document org.springframework.data.mongodb.core.Document = new Document ( ) ; if ( StringUtils . hasText ( org.springframework.data.mongodb.core.Query . getHint ( ) ) ) { org.springframework.data.mongodb.core.Document . put ( STRING , org.springframework.data.mongodb.core.Query . getHint ( ) ) ; } if ( org.springframework.data.mongodb.core.Query . getMeta ( ) . hasValues ( ) ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.data.mongodb.core.Query . getMeta ( ) . values ( ) ) { org.springframework.data.mongodb.core.Document . put ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } for ( Meta . Meta Meta.CursorOption : org.springframework.data.mongodb.core.Query . getMeta ( ) . getFlags ( ) ) { switch ( Meta.CursorOption ) { case NO_TIMEOUT : org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . noCursorTimeout ( true ) ; break; case PARTIAL : org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . partial ( true ) ; break; default: throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , Meta.CursorOption ) ) ; } } } org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . modifiers ( org.springframework.data.mongodb.core.Document ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } return org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> , Metric org.springframework.data.mongodb.core.Metric ) { Assert . notNull ( org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> , STRING ) ; this . org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> = org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> ; this . org.springframework.data.mongodb.core.Metric = org.springframework.data.mongodb.core.Metric ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.GeoResult<T> < T > org.springframework.data.mongodb.core.GeoResult<T> ( Document org.springframework.data.mongodb.core.Document ) { double double = ( ( java.lang.Double ) org.springframework.data.mongodb.core.Document . get ( STRING ) ) . double ( ) ; Document org.springframework.data.mongodb.core.Document = ( Document ) org.springframework.data.mongodb.core.Document . get ( STRING ) ; T T = org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> . T ( org.springframework.data.mongodb.core.Document ) ; return new GeoResult < T > ( T , new Distance ( double , org.springframework.data.mongodb.core.Metric ) ) ; }  <METHOD_END>
<METHOD_START> void ( MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> , PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator , org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> ) { this . org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> ; this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.PersistenceExceptionTranslator ; this . org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> = org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> ; }  <METHOD_END>
<METHOD_START> public void ( FindIterable < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> , PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator , org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> < T > org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> ) { this . org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . iterator ( ) ; this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.PersistenceExceptionTranslator ; this . org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> = org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> == null ) { return false ; } try { return org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . hasNext ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { if ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> == null ) { return null ; } try { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . next ( ) ; T T = org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> . T ( org.springframework.data.mongodb.core.Document ) ; return T ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> ; try { org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . close ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) ; } finally { org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = null ; org.springframework.data.mongodb.core.PersistenceExceptionTranslator = null ; org.springframework.data.mongodb.core.MongoTemplate.DocumentCallback<T> = null ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.MongoDbFactory org.springframework.data.mongodb.core.MongoDbFactory ( ) { return org.springframework.data.mongodb.core.MongoDbFactory ; }  <METHOD_END>
