<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.IgnoredRequestCustomizer org.springframework.boot.actuate.autoconfigure.IgnoredRequestCustomizer ( ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties , ObjectProvider < ManagementContextResolver > org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ManagementContextResolver> ) { return new org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.ManagementIgnoredRequestCustomizer ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties , org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ManagementContextResolver> . getIfAvailable ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties , ManagementContextResolver org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ) { this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ; this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver = org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IgnoredRequestConfigurer org.springframework.boot.actuate.autoconfigure.IgnoredRequestConfigurer ) { if ( ! this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . isEnabled ( ) ) { RequestMatcher org.springframework.boot.actuate.autoconfigure.RequestMatcher = org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.LazyEndpointPathRequestMatcher . org.springframework.boot.actuate.autoconfigure.RequestMatcher ( this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ) ; org.springframework.boot.actuate.autoconfigure.IgnoredRequestConfigurer . requestMatchers ( org.springframework.boot.actuate.autoconfigure.RequestMatcher ) ; } }  <METHOD_END>
<METHOD_START> public void ( ObjectProvider < SecurityProperties > org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.SecurityProperties> , ObjectProvider < ManagementServerProperties > org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ManagementServerProperties> ) { this . org.springframework.boot.actuate.autoconfigure.SecurityProperties = org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.SecurityProperties> . getIfAvailable ( ) ; this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ManagementServerProperties> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties != null && this . org.springframework.boot.actuate.autoconfigure.SecurityProperties != null ) { this . org.springframework.boot.actuate.autoconfigure.SecurityProperties . getUser ( ) . getRole ( ) . addAll ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . getRoles ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.ConditionOutcome org.springframework.boot.actuate.autoconfigure.ConditionOutcome ( ConditionContext org.springframework.boot.actuate.autoconfigure.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.actuate.autoconfigure.AnnotatedTypeMetadata ) { java.lang.String java.lang.String = org.springframework.boot.actuate.autoconfigure.ConditionContext . getEnvironment ( ) . getProperty ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.boot.actuate.autoconfigure.ConditionContext . getEnvironment ( ) . getProperty ( STRING , STRING ) ; ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( STRING . boolean ( java.lang.String ) && ! STRING . boolean ( java.lang.String ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . because ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . because ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( SecurityProperties org.springframework.boot.actuate.autoconfigure.SecurityProperties , ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties , ObjectProvider < ManagementContextResolver > org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ManagementContextResolver> ) { this . org.springframework.boot.actuate.autoconfigure.SecurityProperties = org.springframework.boot.actuate.autoconfigure.SecurityProperties ; this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ; this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver = org.springframework.boot.actuate.autoconfigure.ObjectProvider<org.springframework.boot.actuate.autoconfigure.ManagementContextResolver> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.boot.actuate.autoconfigure.HttpSecurity ) throws java.lang.Exception { RequestMatcher org.springframework.boot.actuate.autoconfigure.RequestMatcher = org.springframework.boot.actuate.autoconfigure.RequestMatcher ( ) ; if ( org.springframework.boot.actuate.autoconfigure.RequestMatcher != null ) { if ( this . org.springframework.boot.actuate.autoconfigure.SecurityProperties . isRequireSsl ( ) ) { org.springframework.boot.actuate.autoconfigure.HttpSecurity . requiresChannel ( ) . anyRequest ( ) . requiresSecure ( ) ; } AuthenticationEntryPoint org.springframework.boot.actuate.autoconfigure.AuthenticationEntryPoint = org.springframework.boot.actuate.autoconfigure.AuthenticationEntryPoint ( ) ; org.springframework.boot.actuate.autoconfigure.HttpSecurity . exceptionHandling ( ) . authenticationEntryPoint ( org.springframework.boot.actuate.autoconfigure.AuthenticationEntryPoint ) ; org.springframework.boot.actuate.autoconfigure.HttpSecurity . requestMatcher ( org.springframework.boot.actuate.autoconfigure.RequestMatcher ) ; configurePermittedRequests ( org.springframework.boot.actuate.autoconfigure.HttpSecurity . authorizeRequests ( ) ) ; org.springframework.boot.actuate.autoconfigure.HttpSecurity . httpBasic ( ) . authenticationEntryPoint ( org.springframework.boot.actuate.autoconfigure.AuthenticationEntryPoint ) ; org.springframework.boot.actuate.autoconfigure.HttpSecurity . csrf ( ) . disable ( ) ; org.springframework.boot.actuate.autoconfigure.HttpSecurity . sessionManagement ( ) . sessionCreationPolicy ( org.springframework.boot.actuate.autoconfigure.SessionCreationPolicy ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . getSessions ( ) ) ) ; SpringBootWebSecurityConfiguration . configureHeaders ( org.springframework.boot.actuate.autoconfigure.HttpSecurity . headers ( ) , this . org.springframework.boot.actuate.autoconfigure.SecurityProperties . getHeaders ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.SessionCreationPolicy org.springframework.boot.actuate.autoconfigure.SessionCreationPolicy ( java.lang.Enum<?> < ? > java.lang.Enum<?> ) { if ( java.lang.Enum<> == null ) { return SessionCreationPolicy . STATELESS ; } return SessionCreationPolicy . valueOf ( java.lang.Enum<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.RequestMatcher org.springframework.boot.actuate.autoconfigure.RequestMatcher ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . isEnabled ( ) ) { return org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.LazyEndpointPathRequestMatcher . org.springframework.boot.actuate.autoconfigure.RequestMatcher ( this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ) ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.AuthenticationEntryPoint org.springframework.boot.actuate.autoconfigure.AuthenticationEntryPoint ( ) { BasicAuthenticationEntryPoint org.springframework.boot.actuate.autoconfigure.BasicAuthenticationEntryPoint = new BasicAuthenticationEntryPoint ( ) ; org.springframework.boot.actuate.autoconfigure.BasicAuthenticationEntryPoint . setRealmName ( this . org.springframework.boot.actuate.autoconfigure.SecurityProperties . getBasic ( ) . getRealm ( ) ) ; return org.springframework.boot.actuate.autoconfigure.BasicAuthenticationEntryPoint ; }  <METHOD_END>
<METHOD_START> private void configurePermittedRequests ( ExpressionUrlAuthorizationConfigurer < HttpSecurity > . ExpressionUrlAuthorizationConfigurer requests ) { requests . requestMatchers ( new org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.LazyEndpointPathRequestMatcher ( this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver , org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths . org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths ) ) . authenticated ( ) ; requests . requestMatchers ( new org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.LazyEndpointPathRequestMatcher ( this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver , org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths . org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths ) ) . permitAll ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint ) { return ! org.springframework.boot.actuate.autoconfigure.MvcEndpoint . isSensitive ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint ) { return org.springframework.boot.actuate.autoconfigure.MvcEndpoint . isSensitive ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ) { if ( org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping == null ) { return java.lang.String[] ; } java.util.Set<? extends org.springframework.boot.actuate.autoconfigure.MvcEndpoint> < ? extends MvcEndpoint > java.util.Set<? extends org.springframework.boot.actuate.autoconfigure.MvcEndpoint> = org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . getEndpoints ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Set<> . int ( ) ) ; for ( MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint : java.util.Set<> ) { if ( boolean ( org.springframework.boot.actuate.autoconfigure.MvcEndpoint ) ) { java.lang.String java.lang.String = org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . getPath ( org.springframework.boot.actuate.autoconfigure.MvcEndpoint . getPath ( ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; if ( ! java.lang.String . boolean ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String + STRING ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String + STRING ) ; } java.util.Set<java.lang.String> . boolean ( java.lang.String + STRING ) ; } } return java.util.Set<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.Set<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint ) { return true ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.actuate.autoconfigure.RequestMatcher org.springframework.boot.actuate.autoconfigure.RequestMatcher ( ManagementContextResolver org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ) { if ( org.springframework.boot.actuate.autoconfigure.ManagementContextResolver == null ) { return null ; } ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = org.springframework.boot.actuate.autoconfigure.ManagementContextResolver . getApplicationContext ( ) . getBean ( ManagementServerProperties .class ) ; ServerProperties org.springframework.boot.actuate.autoconfigure.ServerProperties = org.springframework.boot.actuate.autoconfigure.ManagementContextResolver . getApplicationContext ( ) . getBean ( ServerProperties .class ) ; java.lang.String java.lang.String = org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { AntPathRequestMatcher org.springframework.boot.actuate.autoconfigure.AntPathRequestMatcher = new AntPathRequestMatcher ( org.springframework.boot.actuate.autoconfigure.ServerProperties . getServlet ( ) . getPath ( java.lang.String ) + STRING ) ; return org.springframework.boot.actuate.autoconfigure.AntPathRequestMatcher ; } return new org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.LazyEndpointPathRequestMatcher ( org.springframework.boot.actuate.autoconfigure.ManagementContextResolver , org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths . org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths ) ; }  <METHOD_END>
<METHOD_START> void ( ManagementContextResolver org.springframework.boot.actuate.autoconfigure.ManagementContextResolver , org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths ) { this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver = org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ; this . org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths = org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest ) { if ( this . org.springframework.boot.actuate.autoconfigure.RequestMatcher == null ) { this . org.springframework.boot.actuate.autoconfigure.RequestMatcher = org.springframework.boot.actuate.autoconfigure.RequestMatcher ( ) ; } return this . org.springframework.boot.actuate.autoconfigure.RequestMatcher . matches ( org.springframework.boot.actuate.autoconfigure.HttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.RequestMatcher org.springframework.boot.actuate.autoconfigure.RequestMatcher ( ) { ServerProperties org.springframework.boot.actuate.autoconfigure.ServerProperties = this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver . getApplicationContext ( ) . getBean ( ServerProperties .class ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMatcher> < RequestMatcher > java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMatcher> = new java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.RequestMatcher> <> ( ) ; EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping = org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ( ) ; for ( java.lang.String java.lang.String : this . org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration.EndpointPaths . java.lang.String[] ( org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ) ) { java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMatcher> . add ( new AntPathRequestMatcher ( org.springframework.boot.actuate.autoconfigure.ServerProperties . getServlet ( ) . getPath ( java.lang.String ) ) ) ; } return ( java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMatcher> . isEmpty ( ) ? org.springframework.boot.actuate.autoconfigure.RequestMatcher : new OrRequestMatcher ( java.util.List<org.springframework.boot.actuate.autoconfigure.RequestMatcher> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ( ) { EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping = null ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.ManagementContextResolver . getApplicationContext ( ) ; if ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBeanNamesForType ( EndpointHandlerMapping .class ) . length > NUMBER ) { org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping = org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( EndpointHandlerMapping .class ) ; } if ( org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping == null ) { org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Collections .< MvcEndpoint > java.util.Set<org.springframework.boot.actuate.autoconfigure.MvcEndpoint> ( ) ) ; } return org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ; }  <METHOD_END>
