<METHOD_START> @ Before public void void ( ) { KeyValueOperations org.springframework.data.map.KeyValueOperations = new KeyValueTemplate ( new MapKeyValueAdapter ( ) ) ; KeyValueRepositoryFactory org.springframework.data.map.KeyValueRepositoryFactory = org.springframework.data.map.KeyValueRepositoryFactory ( org.springframework.data.map.KeyValueOperations ) ; this . T = T ( org.springframework.data.map.KeyValueRepositoryFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; assertThat ( T . java.util.List<org.springframework.data.map.Person> ( NUMBER ) , hasItems ( org.springframework.data.map.Person , org.springframework.data.map.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; assertThat ( T . java.util.List<org.springframework.data.map.Person> ( org.springframework.data.map.Person . getFirstname ( ) ) , hasItems ( org.springframework.data.map.Person ) ) ; assertThat ( T . java.util.List<org.springframework.data.map.Person> ( org.springframework.data.map.Person . getFirstname ( ) ) , hasItems ( org.springframework.data.map.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; assertThat ( T . java.util.List<org.springframework.data.map.Person> ( org.springframework.data.map.Person . getFirstname ( ) , NUMBER ) , hasItem ( org.springframework.data.map.Person ) ) ; assertThat ( T . java.util.List<org.springframework.data.map.Person> ( org.springframework.data.map.Person . getFirstname ( ) , NUMBER ) , hasItem ( org.springframework.data.map.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; Page < Person > org.springframework.data.map.Page<org.springframework.data.map.Person> = T . org.springframework.data.map.Page<org.springframework.data.map.Person> ( NUMBER , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.map.Page<org.springframework.data.map.Person> . hasNext ( ) , is ( true ) ) ; assertThat ( org.springframework.data.map.Page<org.springframework.data.map.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.map.Page<org.springframework.data.map.Person> . getContent ( ) , IsCollectionWithSize . hasSize ( NUMBER ) ) ; Page < Person > org.springframework.data.map.Page<org.springframework.data.map.Person> = T . org.springframework.data.map.Page<org.springframework.data.map.Person> ( NUMBER , org.springframework.data.map.Page<org.springframework.data.map.Person> . nextPageable ( ) ) ; assertThat ( org.springframework.data.map.Page<org.springframework.data.map.Person> . hasNext ( ) , is ( false ) ) ; assertThat ( org.springframework.data.map.Page<org.springframework.data.map.Person> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.map.Page<org.springframework.data.map.Person> . getContent ( ) , IsCollectionWithSize . hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; assertThat ( T . java.util.List<org.springframework.data.map.Person> ( NUMBER , org.springframework.data.map.Person . getFirstname ( ) ) , hasItems ( org.springframework.data.map.Person , org.springframework.data.map.Person , org.springframework.data.map.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; assertThat ( T . org.springframework.data.map.Person ( org.springframework.data.map.Person . getAge ( ) , org.springframework.data.map.Person . getFirstname ( ) ) , is ( org.springframework.data.map.Person ) ) ; assertThat ( T . org.springframework.data.map.Person ( org.springframework.data.map.Person . getAge ( ) , org.springframework.data.map.Person . getFirstname ( ) ) , is ( org.springframework.data.map.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; assertThat ( T . findAll ( new Sort ( new Sort . Sort ( Direction . ASC , STRING ) , new Sort . Sort ( Direction . DESC , STRING ) ) ) , contains ( org.springframework.data.map.Person , org.springframework.data.map.Person , org.springframework.data.map.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; java.util.List<org.springframework.data.map.Person> < Person > java.util.List<org.springframework.data.map.Person> = T . java.util.List<org.springframework.data.map.Person> ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.map.Person> , contains ( org.springframework.data.map.Person , org.springframework.data.map.Person , org.springframework.data.map.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> < org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary > java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> = T . java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> ( NUMBER , new Sort ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> . org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary ( NUMBER ) . java.lang.String ( ) , is ( org.springframework.data.map.Person . getFirstname ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T . save ( java.util.List<org.springframework.data.map.Person> ) ; java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> < org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary > java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> = T . java.util.List ( NUMBER , new Sort ( STRING ) , org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary .class ) ; assertThat ( java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> . org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary ( NUMBER ) . java.lang.String ( ) , is ( org.springframework.data.map.Person . getFirstname ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.map.KeyValueRepositoryFactory org.springframework.data.map.KeyValueRepositoryFactory ( KeyValueOperations org.springframework.data.map.KeyValueOperations ) { return new KeyValueRepositoryFactory ( org.springframework.data.map.KeyValueOperations ) ; }  <METHOD_END>
<METHOD_START> protected abstract T T ( KeyValueRepositoryFactory org.springframework.data.map.KeyValueRepositoryFactory );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.map.Person> < Person > java.util.List<org.springframework.data.map.Person> ( int int );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.map.Person> < Person > java.util.List<org.springframework.data.map.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.map.Person> < Person > java.util.List<org.springframework.data.map.Person> ( java.lang.String java.lang.String , int int );  <METHOD_END>
<METHOD_START> org.springframework.data.map.Page<org.springframework.data.map.Person> < Person > org.springframework.data.map.Page<org.springframework.data.map.Person> ( int int , Pageable org.springframework.data.map.Pageable );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.map.Person> < Person > java.util.List<org.springframework.data.map.Person> ( int int , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.map.Person org.springframework.data.map.Person ( int int , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.map.Person> < Person > java.util.List<org.springframework.data.map.Person> ( int int );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> < org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary > java.util.List<org.springframework.data.map.AbstractRepositoryUnitTests.PersonSummary> ( int int , Sort org.springframework.data.map.Sort );  <METHOD_END>
<METHOD_START> < T > java.util.List<T> < T > java.util.List<T> ( int int , Sort org.springframework.data.map.Sort , java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
