<METHOD_START> public void ( CacheProperties org.springframework.boot.autoconfigure.cache.CacheProperties , CacheManagerCustomizers org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers , ObjectProvider < ConfigurationBuilder > org.springframework.boot.autoconfigure.cache.ObjectProvider<org.springframework.boot.autoconfigure.cache.ConfigurationBuilder> ) { this . org.springframework.boot.autoconfigure.cache.CacheProperties = org.springframework.boot.autoconfigure.cache.CacheProperties ; this . org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers = org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers ; this . org.springframework.boot.autoconfigure.cache.ConfigurationBuilder = org.springframework.boot.autoconfigure.cache.ObjectProvider<org.springframework.boot.autoconfigure.cache.ConfigurationBuilder> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager ( EmbeddedCacheManager org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager ) { SpringEmbeddedCacheManager org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager = new SpringEmbeddedCacheManager ( org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager ) ; return this . org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers . customize ( org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( destroyMethod = STRING ) @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager ( ) java.io.IOException { EmbeddedCacheManager org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager = org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.boot.autoconfigure.cache.CacheProperties . getCacheNames ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager . defineConfiguration ( java.lang.String , org.infinispan.configuration.cache.Configuration ( ) ) ; } } return org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager org.springframework.boot.autoconfigure.cache.EmbeddedCacheManager ( ) java.io.IOException { Resource org.springframework.boot.autoconfigure.cache.Resource = this . org.springframework.boot.autoconfigure.cache.CacheProperties . resolveConfigLocation ( this . org.springframework.boot.autoconfigure.cache.CacheProperties . getInfinispan ( ) . getConfig ( ) ) ; if ( org.springframework.boot.autoconfigure.cache.Resource != null ) { java.io.InputStream java.io.InputStream = org.springframework.boot.autoconfigure.cache.Resource . getInputStream ( ) ; try { return new DefaultCacheManager ( java.io.InputStream ) ; } finally { java.io.InputStream . void ( ) ; } } return new DefaultCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> private org . org.infinispan . org.infinispan . org.infinispan . org.infinispan.configuration.cache.Configuration org.infinispan.configuration.cache.Configuration ( ) { if ( this . org.springframework.boot.autoconfigure.cache.ConfigurationBuilder != null ) { return this . org.springframework.boot.autoconfigure.cache.ConfigurationBuilder . build ( ) ; } return new ConfigurationBuilder ( ) . build ( ) ; }  <METHOD_END>
