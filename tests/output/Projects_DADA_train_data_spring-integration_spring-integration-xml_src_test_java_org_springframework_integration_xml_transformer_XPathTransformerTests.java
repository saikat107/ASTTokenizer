<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.xml.transformer.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathExpression org.springframework.integration.xml.transformer.XPathExpression = XPathExpressionFactory . createXPathExpression ( STRING ) ; XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( org.springframework.integration.xml.transformer.XPathExpression ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( STRING ) ; org.springframework.integration.xml.transformer.XPathTransformer . setEvaluationType ( XPathEvaluationType . NUMBER_RESULT ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertEquals ( new java.lang.Double ( NUMBER ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( STRING ) ; org.springframework.integration.xml.transformer.XPathTransformer . setEvaluationType ( XPathEvaluationType . BOOLEAN_RESULT ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( STRING ) ; org.springframework.integration.xml.transformer.XPathTransformer . setEvaluationType ( XPathEvaluationType . NODE_RESULT ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertTrue ( java.lang.Object instanceof org.w3c.dom.Node ) ; org.w3c.dom.Node org.w3c.dom.Node = ( org.w3c.dom.Node ) java.lang.Object ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( STRING ) ; org.springframework.integration.xml.transformer.XPathTransformer . setEvaluationType ( XPathEvaluationType . NODE_LIST_RESULT ) ; Message < ? > org.springframework.integration.xml.transformer.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertTrue ( java.util.List .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> = ( java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<org.w3c.dom.Node> . int ( ) ) ; org.w3c.dom.Node org.w3c.dom.Node = java.util.List<org.w3c.dom.Node> . org.w3c.dom.Node ( NUMBER ) ; org.w3c.dom.Node org.w3c.dom.Node = java.util.List<org.w3c.dom.Node> . org.w3c.dom.Node ( NUMBER ) ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( STRING ) ; org.springframework.integration.xml.transformer.XPathTransformer . setNodeMapper ( new org.springframework.integration.xml.transformer.XPathTransformerTests.TestNodeMapper ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathTransformer org.springframework.integration.xml.transformer.XPathTransformer = new XPathTransformer ( STRING ) ; org.springframework.integration.xml.transformer.XPathTransformer . setConverter ( new org.springframework.integration.xml.transformer.XPathTransformerTests.TestXmlPayloadConverter ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XPathTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( org.w3c.dom.Node org.w3c.dom.Node , int int ) throws org.w3c.dom.DOMException { return org.w3c.dom.Node . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.xml.transform.Source javax.xml.transform.Source ( java.lang.Object java.lang.Object ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.w3c.dom.Node org.w3c.dom.Node ( java.lang.Object java.lang.Object ) { try { return javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) . javax.xml.parsers.DocumentBuilder ( ) . org.w3c.dom.Document ( new org.xml.sax.InputSource ( new java.io.StringReader ( STRING ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.w3c.dom.Document org.w3c.dom.Document ( java.lang.Object java.lang.Object ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
