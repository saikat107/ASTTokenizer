<METHOD_START> @ Test public void void ( ) { SimpMessageType org.springframework.messaging.simp.SimpMessageType = org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) . combine ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . SUBSCRIBE ) ) . getMessageType ( ) ; assertEquals ( SimpMessageType . SUBSCRIBE , org.springframework.messaging.simp.SimpMessageType ) ; org.springframework.messaging.simp.SimpMessageType = org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) . combine ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) ) . getMessageType ( ) ; assertEquals ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.SimpMessageType ) ; org.springframework.messaging.simp.SimpMessageType = org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . SUBSCRIBE ) . combine ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . SUBSCRIBE ) ) . getMessageType ( ) ; assertEquals ( SimpMessageType . SUBSCRIBE , org.springframework.messaging.simp.SimpMessageType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.Message<?> = org.springframework.messaging.simp.Message<byte[]> ( SimpMessageType . MESSAGE ) ; SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition = org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) ; SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition = org.springframework.messaging.simp.SimpMessageTypeMessageCondition . getMatchingCondition ( org.springframework.messaging.simp.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition ) ; assertEquals ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.SimpMessageTypeMessageCondition . getMessageType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.Message<?> = org.springframework.messaging.simp.Message<byte[]> ( null ) ; SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition = org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) ; assertNull ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition . getMatchingCondition ( org.springframework.messaging.simp.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.simp.Message<byte[]> = org.springframework.messaging.simp.Message<byte[]> ( null ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) . compareTo ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) , org.springframework.messaging.simp.Message<byte[]> ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . MESSAGE ) . compareTo ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType . SUBSCRIBE ) , org.springframework.messaging.simp.Message<byte[]> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.Message<byte[]> < byte [] > org.springframework.messaging.simp.Message<byte[]> ( SimpMessageType org.springframework.messaging.simp.SimpMessageType ) { MessageBuilder < byte [] > org.springframework.messaging.simp.MessageBuilder<byte[]> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) ; if ( org.springframework.messaging.simp.SimpMessageType != null ) { org.springframework.messaging.simp.MessageBuilder<byte[]> . setHeader ( SimpMessageHeaderAccessor . MESSAGE_TYPE_HEADER , org.springframework.messaging.simp.SimpMessageType ) ; } return org.springframework.messaging.simp.MessageBuilder<byte[]> . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( SimpMessageType org.springframework.messaging.simp.SimpMessageType ) { return new SimpMessageTypeMessageCondition ( org.springframework.messaging.simp.SimpMessageType ) ; }  <METHOD_END>
