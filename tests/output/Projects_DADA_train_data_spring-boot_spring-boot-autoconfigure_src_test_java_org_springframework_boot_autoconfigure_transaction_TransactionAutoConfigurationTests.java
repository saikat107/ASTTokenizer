<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.EmptyConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( TransactionTemplate .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.lang.Class<?> < ? > [] { DataSourceAutoConfiguration .class , DataSourceTransactionManagerAutoConfiguration .class } , STRING ) ; PlatformTransactionManager org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager = this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBean ( PlatformTransactionManager .class ) ; TransactionTemplate org.springframework.boot.autoconfigure.transaction.TransactionTemplate = this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBean ( TransactionTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.TransactionTemplate . getTransactionManager ( ) ) . isSameAs ( org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.SeveralTransactionManagersConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( TransactionTemplate .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.CustomTransactionManagerConfiguration .class ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.transaction.TransactionTemplate> < java.lang.String , TransactionTemplate > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.transaction.TransactionTemplate> = this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( TransactionTemplate .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.transaction.TransactionTemplate> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.transaction.TransactionTemplate> . containsKey ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.SeveralTransactionManagersConfiguration .class ) ; TransactionManagerCustomizers org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers = this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBean ( TransactionManagerCustomizers .class ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers , STRING ) ; assertThat ( java.util.List<> ) . hasSize ( NUMBER ) . first ( ) . isInstanceOf ( TransactionProperties .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.BaseConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionalService .class ) . isTransactionActive ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionManagersConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherServiceImpl .class ) . isTransactionActive ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionalServiceImpl .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionManagersConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherService .class ) . isTransactionActive ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherServiceImpl .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionalServiceImpl .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.lang.Class<?> < ? > [] { org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.CustomTransactionManagementConfiguration .class , org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionManagersConfiguration .class } , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherService .class ) . isTransactionActive ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherServiceImpl .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionalServiceImpl .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { void ( new java.lang.Class<?> < ? > [] { java.lang.Class<> } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . register ( TransactionAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.transaction.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager ( ) { return mock ( PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager ( ) { return mock ( PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.TransactionTemplate org.springframework.boot.autoconfigure.transaction.TransactionTemplate ( ) { return new TransactionTemplate ( org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager org.springframework.boot.autoconfigure.transaction.PlatformTransactionManager ( ) { return mock ( PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionalService org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionalService ( ) { return new org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.TransactionalServiceImpl ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherServiceImpl org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherServiceImpl ( ) { return new org.springframework.boot.autoconfigure.transaction.TransactionAutoConfigurationTests.AnotherServiceImpl ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.DataSourceTransactionManager org.springframework.boot.autoconfigure.transaction.DataSourceTransactionManager ( ) { return new DataSourceTransactionManager ( javax.sql.DataSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . driverClassName ( STRING ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Transactional boolean boolean ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return TransactionSynchronizationManager . isActualTransactionActive ( ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional public boolean boolean ( ) { return TransactionSynchronizationManager . isActualTransactionActive ( ) ; }  <METHOD_END>
