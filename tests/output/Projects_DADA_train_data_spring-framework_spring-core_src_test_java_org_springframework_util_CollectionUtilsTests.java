<METHOD_START> @ Test public void void ( ) { assertTrue ( CollectionUtils . isEmpty ( ( java.util.Set<java.lang.Object> < java.lang.Object > ) null ) ) ; assertTrue ( CollectionUtils . isEmpty ( ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) null ) ) ; assertTrue ( CollectionUtils . isEmpty ( new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ) ) ; assertTrue ( CollectionUtils . isEmpty ( new java.util.HashSet <> ( ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.LinkedList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( new java.lang.Object ( ) ) ; assertFalse ( CollectionUtils . isEmpty ( java.util.List<java.lang.Object> ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertFalse ( CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { STRING , STRING } ; java.util.List<java.lang.Comparable<?>> < java.lang.Comparable<?> < ? > > java.util.List<java.lang.Comparable<?>> = new java.util.LinkedList<java.lang.Comparable<?>> <> ( ) ; java.util.List<java.lang.Comparable<?>> . boolean ( STRING ) ; CollectionUtils . mergeArrayIntoCollection ( java.lang.Object[] , java.util.List<java.lang.Comparable<?>> ) ; assertEquals ( STRING , java.util.List<java.lang.Comparable<?>> . java.lang.Comparable<?> ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.Comparable<?>> . java.lang.Comparable<?> ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.Comparable<?>> . java.lang.Comparable<?> ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int [] int[] = new int [] { NUMBER , NUMBER } ; java.util.List<java.lang.Comparable<?>> < java.lang.Comparable<?> < ? > > java.util.List<java.lang.Comparable<?>> = new java.util.LinkedList<java.lang.Comparable<?>> <> ( ) ; java.util.List<java.lang.Comparable<?>> . boolean ( new java.lang.Integer ( NUMBER ) ) ; CollectionUtils . mergeArrayIntoCollection ( int[] , java.util.List<java.lang.Comparable<?>> ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Comparable<?>> . java.lang.Comparable<?> ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Comparable<?>> . java.lang.Comparable<?> ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Comparable<?>> . java.lang.Comparable<?> ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( java.util.Properties ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( CollectionUtils . contains ( ( java.util.Iterator<java.lang.String> < java.lang.String > ) null , STRING ) ) ; assertFalse ( CollectionUtils . contains ( ( java.util.Enumeration<java.lang.String> < java.lang.String > ) null , STRING ) ) ; assertFalse ( CollectionUtils . contains ( new java.util.LinkedList<java.lang.String> < java.lang.String > ( ) . java.util.Iterator<java.lang.String> ( ) , STRING ) ) ; assertFalse ( CollectionUtils . contains ( new java.util.Hashtable<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) . java.util.Enumeration<java.lang.String> ( ) , STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( CollectionUtils . contains ( java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) , STRING ) ) ; java.util.Hashtable<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Hashtable<java.lang.String,java.lang.String> = new java.util.Hashtable<java.lang.String,java.lang.String> <> ( ) ; java.util.Hashtable<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertTrue ( CollectionUtils . contains ( java.util.Hashtable<java.lang.String,java.lang.String> . java.util.Enumeration<java.lang.String> ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( CollectionUtils . containsAny ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( CollectionUtils . containsAny ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertFalse ( CollectionUtils . containsAny ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( STRING , CollectionUtils . containsInstance ( null , this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.util.CollectionUtilsTests.Instance> < org.springframework.util.CollectionUtilsTests.Instance > java.util.List<org.springframework.util.CollectionUtilsTests.Instance> = new java.util.ArrayList<org.springframework.util.CollectionUtilsTests.Instance> <> ( ) ; java.util.List<org.springframework.util.CollectionUtilsTests.Instance> . boolean ( new org.springframework.util.CollectionUtilsTests.Instance ( STRING ) ) ; assertFalse ( STRING , CollectionUtils . containsInstance ( java.util.List<org.springframework.util.CollectionUtilsTests.Instance> , new org.springframework.util.CollectionUtilsTests.Instance ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.util.CollectionUtilsTests.Instance> < org.springframework.util.CollectionUtilsTests.Instance > java.util.List<org.springframework.util.CollectionUtilsTests.Instance> = new java.util.ArrayList<org.springframework.util.CollectionUtilsTests.Instance> <> ( ) ; java.util.List<org.springframework.util.CollectionUtilsTests.Instance> . boolean ( new org.springframework.util.CollectionUtilsTests.Instance ( STRING ) ) ; org.springframework.util.CollectionUtilsTests.Instance org.springframework.util.CollectionUtilsTests.Instance = new org.springframework.util.CollectionUtilsTests.Instance ( STRING ) ; java.util.List<org.springframework.util.CollectionUtilsTests.Instance> . boolean ( org.springframework.util.CollectionUtilsTests.Instance ) ; assertTrue ( STRING , CollectionUtils . containsInstance ( java.util.List<org.springframework.util.CollectionUtilsTests.Instance> , org.springframework.util.CollectionUtilsTests.Instance ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.util.CollectionUtilsTests.Instance> < org.springframework.util.CollectionUtilsTests.Instance > java.util.List<org.springframework.util.CollectionUtilsTests.Instance> = new java.util.ArrayList<org.springframework.util.CollectionUtilsTests.Instance> <> ( ) ; java.util.List<org.springframework.util.CollectionUtilsTests.Instance> . boolean ( new org.springframework.util.CollectionUtilsTests.Instance ( STRING ) ) ; java.util.List<org.springframework.util.CollectionUtilsTests.Instance> . boolean ( new org.springframework.util.CollectionUtilsTests.Instance ( STRING ) ) ; assertFalse ( STRING , CollectionUtils . containsInstance ( java.util.List<org.springframework.util.CollectionUtilsTests.Instance> , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertEquals ( STRING , CollectionUtils . findFirstMatch ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertFalse ( CollectionUtils . hasUniqueObject ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( CollectionUtils . hasUniqueObject ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( null ) ; assertFalse ( CollectionUtils . hasUniqueObject ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertFalse ( CollectionUtils . hasUniqueObject ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.List<java.lang.String> . boolean ( null ) ; assertTrue ( CollectionUtils . hasUniqueObject ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( null ) ; assertTrue ( CollectionUtils . hasUniqueObject ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; assertFalse ( CollectionUtils . hasUniqueObject ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || this . java.lang.Class<? extends org.springframework.util.CollectionUtilsTests.Instance> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.util.CollectionUtilsTests.Instance org.springframework.util.CollectionUtilsTests.Instance = ( org.springframework.util.CollectionUtilsTests.Instance ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.util.CollectionUtilsTests.Instance . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
