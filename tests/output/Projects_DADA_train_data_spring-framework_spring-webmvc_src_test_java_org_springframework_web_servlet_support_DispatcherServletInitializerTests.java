<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.support.ServletException { org.springframework.web.servlet.support.AbstractDispatcherServletInitializer . onStartup ( org.springframework.web.servlet.support.MockServletContext ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . size ( ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . get ( java.lang.String ) ) ; DispatcherServlet org.springframework.web.servlet.support.DispatcherServlet = ( DispatcherServlet ) java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . get ( java.lang.String ) ; assertEquals ( org.springframework.web.servlet.support.DispatcherServletInitializerTests.MyDispatcherServlet .class , org.springframework.web.servlet.support.DispatcherServlet . getClass ( ) ) ; WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext = org.springframework.web.servlet.support.DispatcherServlet . getWebApplicationContext ( ) ; assertTrue ( org.springframework.web.servlet.support.WebApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.support.WebApplicationContext . getBean ( STRING ) instanceof org.springframework.web.servlet.support.DispatcherServletInitializerTests.MyBean ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . size ( ) ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . get ( java.lang.String ) ) ; MockServletRegistration org.springframework.web.servlet.support.MockServletRegistration = java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . get ( java.lang.String ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) , org.springframework.web.servlet.support.MockServletRegistration . getMappings ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.support.MockServletRegistration . getLoadOnStartup ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.support.MockServletRegistration . getRunAsRole ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( java.lang.String java.lang.String , Servlet org.springframework.web.servlet.support.Servlet ) { java.util.Map<java.lang.String,org.springframework.web.servlet.support.Servlet> . put ( java.lang.String , org.springframework.web.servlet.support.Servlet ) ; MockServletRegistration org.springframework.web.servlet.support.MockServletRegistration = new MockServletRegistration ( ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.support.MockServletRegistration> . put ( java.lang.String , org.springframework.web.servlet.support.MockServletRegistration ) ; return org.springframework.web.servlet.support.MockServletRegistration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.support.DispatcherServlet org.springframework.web.servlet.support.DispatcherServlet ( WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ) { return new org.springframework.web.servlet.support.DispatcherServletInitializerTests.MyDispatcherServlet ( org.springframework.web.servlet.support.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.support.WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ( ) { StaticWebApplicationContext org.springframework.web.servlet.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.support.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.support.DispatcherServletInitializerTests.MyBean .class ) ; return org.springframework.web.servlet.support.StaticWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { java.lang.String } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServletRegistration . ServletRegistration ServletRegistration.Dynamic ) { ServletRegistration.Dynamic . setRunAsRole ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.support.WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void ( WebApplicationContext org.springframework.web.servlet.support.WebApplicationContext ) { super( org.springframework.web.servlet.support.WebApplicationContext ); }  <METHOD_END>
