<METHOD_START> public int int ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( java.io.InputStream ) ) ; try { boolean boolean = false ; java.lang.String java.lang.String ; while ( ( java.lang.String = java.io.BufferedReader . java.lang.String ( ) ) != null ) { java.lang.String = java.lang.String ( java.lang.String ) ; if ( this . boolean || ! StringUtils . hasText ( java.lang.String ) ) { continue; } if ( boolean ( java.lang.String ) ) { boolean = true ; break; } if ( boolean ( java.lang.String ) ) { break; } } return ( boolean ? int : int ) ; } catch ( java.io.CharConversionException java.io.CharConversionException ) { return int ; } finally { java.io.BufferedReader . void ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { if ( this . boolean ) { return false ; } int int = java.lang.String . int ( '<' ) ; return ( int > - NUMBER && ( java.lang.String . int ( ) > int + NUMBER ) && java.lang.Character . boolean ( java.lang.String . char ( int + NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( java.lang.String ) && ! java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String ; } while ( ( java.lang.String = java.lang.String ( java.lang.String ) ) != null ) { if ( ! this . boolean && ! java.lang.String . java.lang.String ( ) . boolean ( java.lang.String ) ) { return java.lang.String ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = ( this . boolean ? int ( java.lang.String ) : int ( java.lang.String ) ) ; return ( int == - NUMBER ? null : java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { return int ( java.lang.String , java.lang.String , true ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { return int ( java.lang.String , java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) { int int = java.lang.String . int ( java.lang.String ) ; if ( int > - NUMBER ) { this . boolean = boolean ; } return ( int == - NUMBER ? int : int + java.lang.String . int ( ) ) ; }  <METHOD_END>
