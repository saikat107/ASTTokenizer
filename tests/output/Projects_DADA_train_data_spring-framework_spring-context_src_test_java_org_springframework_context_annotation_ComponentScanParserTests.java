<METHOD_START> private org.springframework.context.annotation.ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext ( java.lang.String java.lang.String ) { return new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<? extends org.springframework.context.annotation.ComponentScanParserTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = org.springframework.context.annotation.ClassPathXmlApplicationContext ( STRING ) ; assertTrue ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; try { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = org.springframework.context.annotation.ClassPathXmlApplicationContext ( STRING ) ; assertTrue ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = org.springframework.context.annotation.ClassPathXmlApplicationContext ( STRING ) ; assertFalse ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = org.springframework.context.annotation.ClassPathXmlApplicationContext ( STRING ) ; assertTrue ( org.springframework.context.annotation.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = org.springframework.context.annotation.ClassPathXmlApplicationContext ( STRING ) ; AutowiredQualifierFooService org.springframework.context.annotation.AutowiredQualifierFooService = ( AutowiredQualifierFooService ) org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.AutowiredQualifierFooService . isInitCalled ( ) ) ; assertEquals ( STRING , org.springframework.context.annotation.AutowiredQualifierFooService . foo ( NUMBER ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = org.springframework.context.annotation.ClassPathXmlApplicationContext ( STRING ) ; org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean = ( org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean ) org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean . org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationDependencyBean ( ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = org.springframework.context.annotation.ClassPathXmlApplicationContext ( STRING ) ; org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean = ( org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean ) org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean . org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationDependencyBean ( ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; { GenericXmlApplicationContext org.springframework.context.annotation.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.context.annotation.GenericXmlApplicationContext . load ( java.lang.String ) ; org.springframework.context.annotation.GenericXmlApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.GenericXmlApplicationContext . containsBean ( ProfileAnnotatedComponent . BEAN_NAME ) , is ( false ) ) ; org.springframework.context.annotation.GenericXmlApplicationContext . close ( ) ; } { GenericXmlApplicationContext org.springframework.context.annotation.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.context.annotation.GenericXmlApplicationContext . getEnvironment ( ) . setActiveProfiles ( ProfileAnnotatedComponent . PROFILE_NAME ) ; org.springframework.context.annotation.GenericXmlApplicationContext . load ( java.lang.String ) ; org.springframework.context.annotation.GenericXmlApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.GenericXmlApplicationContext . containsBean ( ProfileAnnotatedComponent . BEAN_NAME ) , is ( true ) ) ; org.springframework.context.annotation.GenericXmlApplicationContext . close ( ) ; } { ConfigurableApplicationContext org.springframework.context.annotation.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { java.lang.String } , false ) ; org.springframework.context.annotation.ConfigurableApplicationContext . getEnvironment ( ) . setActiveProfiles ( ProfileAnnotatedComponent . PROFILE_NAME ) ; org.springframework.context.annotation.ConfigurableApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.ConfigurableApplicationContext . containsBean ( ProfileAnnotatedComponent . BEAN_NAME ) , is ( true ) ) ; org.springframework.context.annotation.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationDependencyBean org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationDependencyBean ( ) { return this . org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationDependencyBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.context.annotation.MetadataReader , MetadataReaderFactory org.springframework.context.annotation.MetadataReaderFactory ) { return org.springframework.context.annotation.MetadataReader . getClassMetadata ( ) . getClassName ( ) . contains ( STRING ) ; }  <METHOD_END>
