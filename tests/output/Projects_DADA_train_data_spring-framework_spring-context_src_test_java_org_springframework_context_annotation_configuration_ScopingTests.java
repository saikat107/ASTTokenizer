<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.context.annotation.configuration.ScopingTests.CustomScope = new org.springframework.context.annotation.configuration.ScopingTests.CustomScope ( ) ; org.springframework.context.annotation.configuration.GenericApplicationContext = org.springframework.context.annotation.configuration.GenericApplicationContext ( org.springframework.context.annotation.configuration.ScopingTests.ScopedConfigurationClass .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { if ( org.springframework.context.annotation.configuration.GenericApplicationContext != null ) { org.springframework.context.annotation.configuration.GenericApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.configuration.GenericApplicationContext org.springframework.context.annotation.configuration.GenericApplicationContext ( java.lang.Class<?> < ? > java.lang.Class<?> ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; if ( org.springframework.context.annotation.configuration.ScopingTests.CustomScope != null ) { org.springframework.context.annotation.configuration.DefaultListableBeanFactory . registerScope ( java.lang.String , org.springframework.context.annotation.configuration.ScopingTests.CustomScope ) ; } org.springframework.context.annotation.configuration.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertSame ( java.lang.String , java.lang.Object , java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertSame ( java.lang.String , java.lang.Object , java.lang.Object ) ; org.springframework.context.annotation.configuration.ScopingTests.CustomScope . boolean = true ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertNotSame ( java.lang.String , java.lang.Object , java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertSame ( java.lang.String , java.lang.Object , java.lang.Object ) ; org.springframework.context.annotation.configuration.ScopingTests.CustomScope . boolean = true ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertNotSame ( java.lang.String , java.lang.Object , java.lang.Object ) ; org.springframework.context.annotation.configuration.ScopingTests.CustomScope . boolean = true ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertNotSame ( java.lang.String , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; org.springframework.context.annotation.configuration.ScopingTests.CustomScope . boolean = true ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING + java.lang.String ) ; assertFalse ( java.lang.Object instanceof ScopedObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.context.annotation.configuration.TestBean = ( TestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING ) ; ITestBean org.springframework.context.annotation.configuration.ITestBean = org.springframework.context.annotation.configuration.TestBean . getSpouse ( ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.ITestBean instanceof ScopedObject ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; assertEquals ( java.lang.String , org.springframework.context.annotation.configuration.ITestBean . getName ( ) ) ; ITestBean org.springframework.context.annotation.configuration.ITestBean = ( ITestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertEquals ( org.springframework.context.annotation.configuration.ITestBean . getName ( ) , org.springframework.context.annotation.configuration.ITestBean . getName ( ) ) ; assertNotSame ( org.springframework.context.annotation.configuration.ITestBean , org.springframework.context.annotation.configuration.ITestBean ) ; org.springframework.context.annotation.configuration.ScopingTests.CustomScope . boolean = true ; org.springframework.context.annotation.configuration.ITestBean = ( ITestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertSame ( org.springframework.context.annotation.configuration.ITestBean . getName ( ) , org.springframework.context.annotation.configuration.ITestBean . getName ( ) ) ; assertNotSame ( org.springframework.context.annotation.configuration.ITestBean , org.springframework.context.annotation.configuration.ITestBean ) ; org.springframework.context.annotation.configuration.ITestBean = ( ITestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertSame ( org.springframework.context.annotation.configuration.ITestBean . getName ( ) , org.springframework.context.annotation.configuration.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.context.annotation.configuration.TestBean = ( TestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING ) ; ITestBean org.springframework.context.annotation.configuration.ITestBean = org.springframework.context.annotation.configuration.TestBean . getSpouse ( ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.ITestBean instanceof ScopedObject ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; assertEquals ( java.lang.String , org.springframework.context.annotation.configuration.ITestBean . getName ( ) ) ; TestBean org.springframework.context.annotation.configuration.TestBean = ( TestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertEquals ( org.springframework.context.annotation.configuration.ITestBean . getName ( ) , org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; assertNotSame ( org.springframework.context.annotation.configuration.ITestBean , org.springframework.context.annotation.configuration.TestBean ) ; org.springframework.context.annotation.configuration.ScopingTests.CustomScope . boolean = true ; java.lang.String = STRING ; org.springframework.context.annotation.configuration.TestBean = ( TestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertSame ( org.springframework.context.annotation.configuration.ITestBean . getName ( ) , org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; assertNotSame ( org.springframework.context.annotation.configuration.ITestBean , org.springframework.context.annotation.configuration.TestBean ) ; org.springframework.context.annotation.configuration.TestBean = ( TestBean ) org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( java.lang.String ) ; assertSame ( org.springframework.context.annotation.configuration.ITestBean . getName ( ) , org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( org.springframework.context.annotation.configuration.ScopingTests.Foo org.springframework.context.annotation.configuration.ScopingTests.Foo ) { this . org.springframework.context.annotation.configuration.ScopingTests.Foo = org.springframework.context.annotation.configuration.ScopingTests.Foo ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.configuration.ScopingTests.Foo org.springframework.context.annotation.configuration.ScopingTests.Foo ( ) { return org.springframework.context.annotation.configuration.ScopingTests.Foo ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( proxyMode = ScopedProxyMode . INTERFACES ) public java.lang.Object java.lang.Object ( ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.configuration.ScopingTests.MyScope public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { TestBean org.springframework.context.annotation.configuration.TestBean = new TestBean ( ) ; org.springframework.context.annotation.configuration.TestBean . setName ( java.lang.String ) ; return org.springframework.context.annotation.configuration.TestBean ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.configuration.ScopingTests.MyScope public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { TestBean org.springframework.context.annotation.configuration.TestBean = new TestBean ( ) ; org.springframework.context.annotation.configuration.TestBean . setName ( java.lang.String ) ; return org.springframework.context.annotation.configuration.TestBean ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.configuration.ScopingTests.MyProxiedScope public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { TestBean org.springframework.context.annotation.configuration.TestBean = new TestBean ( ) ; org.springframework.context.annotation.configuration.TestBean . setName ( java.lang.String ) ; return org.springframework.context.annotation.configuration.TestBean ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.annotation.configuration.ScopingTests.MyProxiedScope public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { TestBean org.springframework.context.annotation.configuration.TestBean = new TestBean ( ) ; org.springframework.context.annotation.configuration.TestBean . setName ( java.lang.String ) ; return org.springframework.context.annotation.configuration.TestBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { TestBean org.springframework.context.annotation.configuration.TestBean = new TestBean ( ) ; org.springframework.context.annotation.configuration.TestBean . setSpouse ( org.springframework.context.annotation.configuration.TestBean ( ) ) ; return org.springframework.context.annotation.configuration.TestBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { TestBean org.springframework.context.annotation.configuration.TestBean = new TestBean ( ) ; org.springframework.context.annotation.configuration.TestBean . setSpouse ( org.springframework.context.annotation.configuration.ITestBean ( ) ) ; return org.springframework.context.annotation.configuration.TestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ObjectFactory < ? > org.springframework.context.annotation.configuration.ObjectFactory<?> ) { if ( boolean ) { java.util.Map<java.lang.String,java.lang.Object> . void ( ) ; boolean = false ; } java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.context.annotation.configuration.ObjectFactory<> . getObject ( ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Runnable java.lang.Runnable ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
