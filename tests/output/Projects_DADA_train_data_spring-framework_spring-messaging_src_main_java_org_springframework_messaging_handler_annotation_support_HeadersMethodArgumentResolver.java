<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterType ( ) ; return ( ( org.springframework.messaging.handler.annotation.support.MethodParameter . hasParameterAnnotation ( Headers .class ) && java.util.Map .class . boolean ( java.lang.Class<> ) ) || MessageHeaders .class == java.lang.Class<> || MessageHeaderAccessor .class . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter , Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterType ( ) ; if ( java.util.Map .class . boolean ( java.lang.Class<> ) ) { return org.springframework.messaging.handler.annotation.support.Message<> . getHeaders ( ) ; } else if ( MessageHeaderAccessor .class == java.lang.Class<> ) { MessageHeaderAccessor org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.handler.annotation.support.Message<> , MessageHeaderAccessor .class ) ; return ( org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor != null ? org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor : new MessageHeaderAccessor ( org.springframework.messaging.handler.annotation.support.Message<> ) ) ; } else if ( MessageHeaderAccessor .class . boolean ( java.lang.Class<> ) ) { MessageHeaderAccessor org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.handler.annotation.support.Message<> , MessageHeaderAccessor .class ) ; if ( org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor != null && java.lang.Class<> . boolean ( org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor . getClass ( ) ) ) { return org.springframework.messaging.handler.annotation.support.MessageHeaderAccessor ; } else { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<> , STRING , Message .class ) ; Assert . notNull ( java.lang.reflect.Method , STRING + java.lang.Class<> + STRING + org.springframework.messaging.handler.annotation.support.Message<> ) ; return ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , org.springframework.messaging.handler.annotation.support.Message<> ) ; } } else { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> + STRING + org.springframework.messaging.handler.annotation.support.MethodParameter . getMethod ( ) + STRING + STRING ) ; } }  <METHOD_END>
