<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING , java.lang.String .class ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) ) . setHeader ( STRING , STRING ) . setHeaderIfAbsent ( STRING , STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . ID , java.util.UUID ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.Long java.lang.Long = NUMBER ; MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . TIMESTAMP , java.lang.Long ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . copyHeadersIfAbsent ( org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) ) . build ( ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<java.lang.String> ) . build ( ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.messaging.support.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<java.lang.String> ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertNotSame ( org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . getId ( ) , org.springframework.messaging.support.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.Integer > org.springframework.messaging.support.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.Integer > org.springframework.messaging.support.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<java.lang.Integer> ) . removeHeader ( STRING ) . build ( ) ; assertFalse ( org.springframework.messaging.support.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.Integer > org.springframework.messaging.support.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.Integer > org.springframework.messaging.support.Message<java.lang.Integer> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<java.lang.Integer> ) . setHeader ( STRING , null ) . build ( ) ; assertFalse ( org.springframework.messaging.support.Message<java.lang.Integer> . getHeaders ( ) . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<> ) . build ( ) ; assertEquals ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<> ) . build ( ) ; assertEquals ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<> ) . setHeader ( STRING , NUMBER ) . build ( ) ; assertEquals ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Date java.util.Date = new java.util.Date ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Date ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Date ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . fromMessage ( org.springframework.messaging.support.Message<> ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; assertEquals ( org.springframework.messaging.support.Message<> , org.springframework.messaging.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaderAccessor org.springframework.messaging.support.MessageHeaderAccessor = new MessageHeaderAccessor ( ) ; org.springframework.messaging.support.MessageHeaderAccessor . setLeaveMutable ( true ) ; MessageHeaders org.springframework.messaging.support.MessageHeaders = org.springframework.messaging.support.MessageHeaderAccessor . getMessageHeaders ( ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . createMessage ( STRING , org.springframework.messaging.support.MessageHeaders ) ; org.springframework.messaging.support.MessageHeaderAccessor . setHeader ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.messaging.support.MessageHeaders . get ( STRING ) ) ; assertSame ( org.springframework.messaging.support.MessageHeaderAccessor , MessageHeaderAccessor . getAccessor ( org.springframework.messaging.support.Message<> , MessageHeaderAccessor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaderAccessor org.springframework.messaging.support.MessageHeaderAccessor = new MessageHeaderAccessor ( ) ; MessageHeaders org.springframework.messaging.support.MessageHeaders = org.springframework.messaging.support.MessageHeaderAccessor . getMessageHeaders ( ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . createMessage ( STRING , org.springframework.messaging.support.MessageHeaders ) ; this . org.springframework.messaging.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.messaging.support.ExpectedException . expectMessage ( STRING ) ; org.springframework.messaging.support.MessageHeaderAccessor . setHeader ( STRING , STRING ) ; assertSame ( org.springframework.messaging.support.MessageHeaderAccessor , MessageHeaderAccessor . getAccessor ( org.springframework.messaging.support.Message<> , MessageHeaderAccessor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaderAccessor org.springframework.messaging.support.MessageHeaderAccessor = new MessageHeaderAccessor ( ) ; org.springframework.messaging.support.MessageHeaderAccessor . setIdGenerator ( new IdGenerator ( ) { @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return MessageHeaders . ID_VALUE_NONE ; } } ) ; Message < ? > org.springframework.messaging.support.Message<?> = MessageBuilder . createMessage ( STRING , org.springframework.messaging.support.MessageHeaderAccessor . getMessageHeaders ( ) ) ; assertNull ( org.springframework.messaging.support.Message<> . getHeaders ( ) . getId ( ) ) ; assertNull ( org.springframework.messaging.support.Message<> . getHeaders ( ) . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return MessageHeaders . ID_VALUE_NONE ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaderAccessor org.springframework.messaging.support.MessageHeaderAccessor = new MessageHeaderAccessor ( ) ; MessageBuilder < ? > org.springframework.messaging.support.MessageBuilder<?> = MessageBuilder . withPayload ( STRING ) . setHeaders ( org.springframework.messaging.support.MessageHeaderAccessor ) ; org.springframework.messaging.support.MessageHeaderAccessor . setHeader ( STRING , STRING ) ; Message < ? > org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.MessageBuilder<> . build ( ) ; org.springframework.messaging.support.MessageHeaderAccessor . setHeader ( STRING , STRING ) ; Message < ? > org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.MessageBuilder<> . build ( ) ; org.springframework.messaging.support.MessageHeaderAccessor . setHeader ( STRING , STRING ) ; Message < ? > org.springframework.messaging.support.Message<?> = org.springframework.messaging.support.MessageBuilder<> . build ( ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.support.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
