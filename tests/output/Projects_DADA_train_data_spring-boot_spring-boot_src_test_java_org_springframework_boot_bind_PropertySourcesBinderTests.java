<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.bind.StandardEnvironment , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new PropertySourcesBinder ( this . org.springframework.boot.bind.StandardEnvironment ) . extractAll ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.bind.StandardEnvironment , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new PropertySourcesBinder ( this . org.springframework.boot.bind.StandardEnvironment ) . extractAll ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isInstanceOf ( java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isInstanceOf ( java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.bind.StandardEnvironment , STRING , STRING ) ; org.springframework.boot.bind.PropertySourcesBinderTests.TestBean org.springframework.boot.bind.PropertySourcesBinderTests.TestBean = new org.springframework.boot.bind.PropertySourcesBinderTests.TestBean ( ) ; new PropertySourcesBinder ( this . org.springframework.boot.bind.StandardEnvironment ) . bindTo ( STRING , org.springframework.boot.bind.PropertySourcesBinderTests.TestBean ) ; assertThat ( org.springframework.boot.bind.PropertySourcesBinderTests.TestBean . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertySourcesBinderTests.TestBean . java.lang.Integer ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
