<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.aop.config.BeanFactory ) { if ( ! StringUtils . hasText ( this . java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( ! StringUtils . hasText ( this . java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.aop.config.BeanFactory . getType ( this . java.lang.String ) ; if ( java.lang.Class<> == null ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.String + STRING ) ; } this . java.lang.reflect.Method = BeanUtils . resolveSignature ( this . java.lang.String , java.lang.Class<> ) ; if ( this . java.lang.reflect.Method == null ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.String + STRING + this . java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) java.lang.Exception { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<java.lang.reflect.Method> < java.lang.reflect.Method > java.lang.Class<java.lang.reflect.Method> ( ) { return java.lang.reflect.Method .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
