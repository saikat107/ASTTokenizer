<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( ! java.util.regex.Matcher . boolean ( ) ) { this . org.springframework.data.repository.query.parser.PartTree.Subject = new org.springframework.data.repository.query.parser.PartTree.Subject ( java.util.Optional . java.util.Optional<java.lang.String> ( ) ) ; this . org.springframework.data.repository.query.parser.PartTree.Predicate = new org.springframework.data.repository.query.parser.PartTree.Predicate ( java.lang.String , java.lang.Class<> ) ; } else { this . org.springframework.data.repository.query.parser.PartTree.Subject = new org.springframework.data.repository.query.parser.PartTree.Subject ( java.util.Optional . java.util.Optional<java.lang.String> ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ) ; this . org.springframework.data.repository.query.parser.PartTree.Predicate = new org.springframework.data.repository.query.parser.PartTree.Predicate ( java.lang.String . java.lang.String ( java.util.regex.Matcher . java.lang.String ( ) . int ( ) ) , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Iterator<org.springframework.data.repository.query.parser.PartTree.OrPart> < org.springframework.data.repository.query.parser.PartTree.OrPart > java.util.Iterator<org.springframework.data.repository.query.parser.PartTree.OrPart> ( ) { return org.springframework.data.repository.query.parser.PartTree.Predicate . java.util.Iterator<org.springframework.data.repository.query.parser.PartTree.OrPart> ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.parser.Sort org.springframework.data.repository.query.parser.Sort ( ) { return org.springframework.data.repository.query.parser.PartTree.Predicate . getOrderBySource ( ) . toSort ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.repository.query.parser.PartTree.Subject . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.repository.query.parser.PartTree.Subject . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return org.springframework.data.repository.query.parser.PartTree.Subject . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.repository.query.parser.PartTree.Subject . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Integer ( ) != null ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return org.springframework.data.repository.query.parser.PartTree.Subject . java.util.Optional<java.lang.Integer> ( ) . java.lang.Integer ( null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.parser.Streamable<org.springframework.data.repository.query.parser.Part> < Part > org.springframework.data.repository.query.parser.Streamable<org.springframework.data.repository.query.parser.Part> ( ) { return flatMap ( org.springframework.data.repository.query.parser.PartTree.OrPart :: stream ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.parser.Streamable<org.springframework.data.repository.query.parser.Part> < Part > org.springframework.data.repository.query.parser.Streamable<org.springframework.data.repository.query.parser.Part> ( Type org.springframework.data.repository.query.parser.Type ) { return org.springframework.data.repository.query.parser.Streamable<org.springframework.data.repository.query.parser.Part> ( ) . filter ( part -> part . getType ( ) . equals ( type ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , StringUtils . collectionToDelimitedString ( org.springframework.data.repository.query.parser.PartTree.Predicate . java.util.List<org.springframework.data.repository.query.parser.PartTree.OrPart> , STRING ) , org.springframework.data.repository.query.parser.PartTree.Predicate . getOrderBySource ( ) . toString ( ) ) . trim ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) ; return java.util.regex.Pattern . java.lang.String[] ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String , STRING ) ; this . java.util.List<org.springframework.data.repository.query.parser.Part> = java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String[] ) . java.util.stream.Stream<java.lang.String> ( StringUtils :: hasText ) . map ( part -> new Part ( part , domainClass , alwaysIgnoreCase ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<org.springframework.data.repository.query.parser.Part> < Part > java.util.Iterator<org.springframework.data.repository.query.parser.Part> ( ) { return java.util.List<org.springframework.data.repository.query.parser.Part> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return StringUtils . collectionToDelimitedString ( java.util.List<org.springframework.data.repository.query.parser.Part> , STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { this . boolean = java.util.Optional<java.lang.String> . java.util.Optional<java.lang.Boolean> ( java.lang.String -> java.lang.String . boolean ( java.lang.String ) ) . java.lang.Boolean ( false ) ; this . boolean = boolean ( java.util.Optional<java.lang.String> , java.util.regex.Pattern ) ; this . boolean = boolean ( java.util.Optional<java.lang.String> , java.util.regex.Pattern ) ; this . boolean = boolean ( java.util.Optional<java.lang.String> , java.util.regex.Pattern ) ; this . java.util.Optional<java.lang.Integer> = java.util.Optional<java.lang.Integer> ( java.util.Optional<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Integer> < java.lang.Integer > java.util.Optional<java.lang.Integer> ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { return java.util.Optional<java.lang.String> . java.util.Optional<java.lang.Integer> ( java.lang.String -> { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( ! java.util.regex.Matcher . boolean ( ) ) { return null ; } return StringUtils . hasText ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ? java.lang.Integer . java.lang.Integer ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) : NUMBER ; } ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.Integer> < java.lang.Integer > java.util.Optional<java.lang.Integer> ( ) { return java.util.Optional<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> , java.util.regex.Pattern java.util.regex.Pattern ) { return java.util.Optional<java.lang.String> . java.util.Optional<java.lang.Boolean> ( java.lang.String -> java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) . java.lang.Boolean ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String ( java.lang.String ) , java.lang.String ) ; if ( java.lang.String[] . int > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.util.List<org.springframework.data.repository.query.parser.PartTree.OrPart> = java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String[] ( java.lang.String[] [ NUMBER ] , STRING ) ) . java.util.stream.Stream<org.springframework.data.repository.query.parser.PartTree.OrPart> ( java.lang.String -> new org.springframework.data.repository.query.parser.PartTree.OrPart ( java.lang.String , java.lang.Class<> , boolean ) ) . java.util.List<org.springframework.data.repository.query.parser.PartTree.OrPart> ( java.util.stream.Collectors . java.util.stream.Collector<org.springframework.data.repository.query.parser.PartTree.OrPart,?,java.util.List<org.springframework.data.repository.query.parser.PartTree.OrPart>> ( ) ) ; this . org.springframework.data.repository.query.parser.OrderBySource = java.lang.String[] . int == NUMBER ? new OrderBySource ( java.lang.String[] [ NUMBER ] , java.util.Optional . java.util.Optional<java.lang.Class<>> ( java.lang.Class<> ) ) : OrderBySource . EMPTY ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( java.util.regex.Matcher . boolean ( ) ) { boolean = true ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.util.regex.Matcher . int ( ) ) + java.lang.String . java.lang.String ( java.util.regex.Matcher . int ( ) , java.lang.String . int ( ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.repository.query.parser.PartTree.OrPart> < org.springframework.data.repository.query.parser.PartTree.OrPart > java.util.Iterator<org.springframework.data.repository.query.parser.PartTree.OrPart> ( ) { return java.util.List<org.springframework.data.repository.query.parser.PartTree.OrPart> . java.util.Iterator<org.springframework.data.repository.query.parser.PartTree.OrPart> ( ) ; }  <METHOD_END>
