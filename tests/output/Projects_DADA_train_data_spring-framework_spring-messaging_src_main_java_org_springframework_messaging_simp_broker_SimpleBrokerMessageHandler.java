<METHOD_START> public void ( SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel , MessageChannel org.springframework.messaging.simp.broker.MessageChannel , SubscribableChannel org.springframework.messaging.simp.broker.SubscribableChannel , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { super( org.springframework.messaging.simp.broker.SubscribableChannel , org.springframework.messaging.simp.broker.MessageChannel , org.springframework.messaging.simp.broker.SubscribableChannel , java.util.Collection<java.lang.String> ); this . org.springframework.messaging.simp.broker.SubscriptionRegistry = new DefaultSubscriptionRegistry ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( SubscriptionRegistry org.springframework.messaging.simp.broker.SubscriptionRegistry ) { Assert . notNull ( org.springframework.messaging.simp.broker.SubscriptionRegistry , STRING ) ; this . org.springframework.messaging.simp.broker.SubscriptionRegistry = org.springframework.messaging.simp.broker.SubscriptionRegistry ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.SubscriptionRegistry org.springframework.messaging.simp.broker.SubscriptionRegistry ( ) { return this . org.springframework.messaging.simp.broker.SubscriptionRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( PathMatcher org.springframework.messaging.simp.broker.PathMatcher ) { this . org.springframework.messaging.simp.broker.PathMatcher = org.springframework.messaging.simp.broker.PathMatcher ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.messaging.simp.broker.PathMatcher != null && this . org.springframework.messaging.simp.broker.SubscriptionRegistry instanceof DefaultSubscriptionRegistry ) { ( ( DefaultSubscriptionRegistry ) this . org.springframework.messaging.simp.broker.SubscriptionRegistry ) . setPathMatcher ( this . org.springframework.messaging.simp.broker.PathMatcher ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.lang.Integer != null && this . org.springframework.messaging.simp.broker.SubscriptionRegistry instanceof DefaultSubscriptionRegistry ) { ( ( DefaultSubscriptionRegistry ) this . org.springframework.messaging.simp.broker.SubscriptionRegistry ) . setCacheLimit ( this . java.lang.Integer ) ; } }  <METHOD_END>
<METHOD_START> public void void ( TaskScheduler org.springframework.messaging.simp.broker.TaskScheduler ) { Assert . notNull ( org.springframework.messaging.simp.broker.TaskScheduler , STRING ) ; this . org.springframework.messaging.simp.broker.TaskScheduler = org.springframework.messaging.simp.broker.TaskScheduler ; if ( this . long[] == null ) { this . long[] = new long [] { NUMBER , NUMBER } ; } }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.TaskScheduler org.springframework.messaging.simp.broker.TaskScheduler ( ) { return this . org.springframework.messaging.simp.broker.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public void void ( long [] long[] ) { if ( long[] == null || long[] . int != NUMBER || long[] [ NUMBER ] < NUMBER || long[] [ NUMBER ] < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.util.Arrays . java.lang.String ( long[] ) ) ; } this . long[] = long[] ; }  <METHOD_END>
<METHOD_START> public long [] long[] ( ) { return this . long[] ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.messaging.simp.broker.MessageHeaderInitializer ) { this . org.springframework.messaging.simp.broker.MessageHeaderInitializer = org.springframework.messaging.simp.broker.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.MessageHeaderInitializer org.springframework.messaging.simp.broker.MessageHeaderInitializer ( ) { return this . org.springframework.messaging.simp.broker.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { publishBrokerAvailableEvent ( ) ; if ( org.springframework.messaging.simp.broker.TaskScheduler ( ) != null ) { long long = long ( ) ; if ( long > NUMBER ) { this . java.util.concurrent.ScheduledFuture<?> = this . org.springframework.messaging.simp.broker.TaskScheduler . scheduleWithFixedDelay ( new org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.HeartbeatTask ( ) , long ) ; } } else { Assert . isTrue ( long[] ( ) == null || ( long[] ( ) [ NUMBER ] == NUMBER && long[] ( ) [ NUMBER ] == NUMBER ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> private long long ( ) { if ( long[] ( ) == null ) { return NUMBER ; } else if ( long[] ( ) [ NUMBER ] > NUMBER && long[] ( ) [ NUMBER ] > NUMBER ) { return java.lang.Math . long ( long[] ( ) [ NUMBER ] , long[] ( ) [ NUMBER ] ) ; } else { return ( long[] ( ) [ NUMBER ] > NUMBER ? long[] ( ) [ NUMBER ] : long[] ( ) [ NUMBER ] ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { publishBrokerUnavailableEvent ( ) ; if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ; SimpMessageType org.springframework.messaging.simp.broker.SimpMessageType = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.broker.MessageHeaders ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.broker.MessageHeaders ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.broker.MessageHeaders ) ; java.security.Principal java.security.Principal = SimpMessageHeaderAccessor . getUser ( org.springframework.messaging.simp.broker.MessageHeaders ) ; void ( java.lang.String ) ; if ( ! checkDestinationPrefix ( java.lang.String ) ) { return; } if ( SimpMessageType . MESSAGE . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { void ( org.springframework.messaging.simp.broker.Message<> ) ; void ( java.lang.String , org.springframework.messaging.simp.broker.Message<> ) ; } else if ( SimpMessageType . CONNECT . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { void ( org.springframework.messaging.simp.broker.Message<> ) ; long [] long[] = SimpMessageHeaderAccessor . getHeartbeat ( org.springframework.messaging.simp.broker.MessageHeaders ) ; long [] long[] = long[] ( ) ; this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo> . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo ( java.lang.String , new org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo ( java.lang.String , java.security.Principal , long[] , long[] ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . CONNECT_ACK ) ; void ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setUser ( SimpMessageHeaderAccessor . getUser ( org.springframework.messaging.simp.broker.MessageHeaders ) ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . CONNECT_MESSAGE_HEADER , org.springframework.messaging.simp.broker.Message<> ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . HEART_BEAT_HEADER , long[] ) ; Message < byte [] > org.springframework.messaging.simp.broker.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; getClientOutboundChannel ( ) . send ( org.springframework.messaging.simp.broker.Message<byte[]> ) ; } else if ( SimpMessageType . DISCONNECT . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { void ( org.springframework.messaging.simp.broker.Message<> ) ; void ( java.lang.String , java.security.Principal , org.springframework.messaging.simp.broker.Message<> ) ; } else if ( SimpMessageType . SUBSCRIBE . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { void ( org.springframework.messaging.simp.broker.Message<> ) ; this . org.springframework.messaging.simp.broker.SubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<> ) ; } else if ( SimpMessageType . UNSUBSCRIBE . equals ( org.springframework.messaging.simp.broker.SimpMessageType ) ) { void ( org.springframework.messaging.simp.broker.Message<> ) ; this . org.springframework.messaging.simp.broker.SubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo = this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo> . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo != null ) { org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . void ( java.lang.System . long ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { if ( logger . isDebugEnabled ( ) ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.broker.Message<> , SimpMessageHeaderAccessor .class ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor != null ? org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor : SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.broker.Message<> ) ) ; logger . debug ( STRING + org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getShortLogMessage ( org.springframework.messaging.simp.broker.Message<> . getPayload ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor ) { if ( org.springframework.messaging.simp.broker.MessageHeaderInitializer ( ) != null ) { org.springframework.messaging.simp.broker.MessageHeaderInitializer ( ) . initHeaders ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.security.Principal java.security.Principal , Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo> . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo ( java.lang.String ) ; this . org.springframework.messaging.simp.broker.SubscriptionRegistry . unregisterAllSubscriptions ( java.lang.String ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . DISCONNECT_ACK ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setUser ( java.security.Principal ) ; if ( org.springframework.messaging.simp.broker.Message<> != null ) { org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . DISCONNECT_MESSAGE_HEADER , org.springframework.messaging.simp.broker.Message<> ) ; } void ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor ) ; Message < byte [] > org.springframework.messaging.simp.broker.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; getClientOutboundChannel ( ) . send ( org.springframework.messaging.simp.broker.Message<byte[]> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.SubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; if ( ! org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) && logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) + STRING ) ; } long long = java.lang.System . long ( ) ; for ( java.lang.String java.lang.String : org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; void ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSubscriptionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . copyHeadersIfAbsent ( org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ) ; java.lang.Object java.lang.Object = org.springframework.messaging.simp.broker.Message<> . getPayload ( ) ; Message < ? > org.springframework.messaging.simp.broker.Message<?> = MessageBuilder . createMessage ( java.lang.Object , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; try { getClientOutboundChannel ( ) . send ( org.springframework.messaging.simp.broker.Message<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING + org.springframework.messaging.simp.broker.Message<> , java.lang.Throwable ) ; } finally { org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo = this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo> . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo != null ) { org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . void ( long ) ; } } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.messaging.simp.broker.SubscriptionRegistry + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.security.Principal java.security.Principal , long [] long[] , long [] long[] ) { this . java.lang.String = java.lang.String ; this . java.security.Principal = java.security.Principal ; if ( long[] != null && long[] != null ) { this . long = ( long[] [ NUMBER ] > NUMBER && long[] [ NUMBER ] > NUMBER ? java.lang.Math . long ( long[] [ NUMBER ] , long[] [ NUMBER ] ) * long : NUMBER ) ; this . long = ( long[] [ NUMBER ] > NUMBER && long[] [ NUMBER ] > NUMBER ? java.lang.Math . long ( long[] [ NUMBER ] , long[] [ NUMBER ] ) : NUMBER ) ; } else { this . long = NUMBER ; this . long = NUMBER ; } this . long = this . long = java.lang.System . long ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.security.Principal java.security.Principal ( ) { return this . java.security.Principal ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { long long = java.lang.System . long ( ) ; for ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo : java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo> . java.util.Collection<org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo> ( ) ) { if ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . long ( ) > NUMBER && ( long - org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . long ( ) ) > org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . long ( ) ) { void ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . java.lang.String ( ) , org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . java.security.Principal ( ) , null ) ; } if ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . long ( ) > NUMBER && ( long - org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . long ( ) ) > org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . long ( ) ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . HEARTBEAT ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . java.lang.String ( ) ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setUser ( org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.SessionInfo . java.security.Principal ( ) ) ; void ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor ) ; MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ; getClientOutboundChannel ( ) . send ( MessageBuilder . createMessage ( byte[] , org.springframework.messaging.simp.broker.MessageHeaders ) ) ; } } }  <METHOD_END>
