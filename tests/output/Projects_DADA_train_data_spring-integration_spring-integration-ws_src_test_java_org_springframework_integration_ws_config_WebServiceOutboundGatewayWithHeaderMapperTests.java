<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleWebServiceOutboundGateway org.springframework.integration.ws.config.SimpleWebServiceOutboundGateway = TestUtils . getPropertyValue ( this . org.springframework.integration.ws.config.ApplicationContext . getBean ( STRING ) , STRING , SimpleWebServiceOutboundGateway .class ) ; DefaultSoapHeaderMapper org.springframework.integration.ws.config.DefaultSoapHeaderMapper = TestUtils . getPropertyValue ( org.springframework.integration.ws.config.SimpleWebServiceOutboundGateway , STRING , DefaultSoapHeaderMapper .class ) ; assertNotNull ( org.springframework.integration.ws.config.DefaultSoapHeaderMapper ) ; AbstractHeaderMapper . AbstractHeaderMapper AbstractHeaderMapper.HeaderMatcher = TestUtils . getPropertyValue ( org.springframework.integration.ws.config.DefaultSoapHeaderMapper , STRING , AbstractHeaderMapper . AbstractHeaderMapper .class ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; AbstractHeaderMapper . AbstractHeaderMapper AbstractHeaderMapper.HeaderMatcher = TestUtils . getPropertyValue ( org.springframework.integration.ws.config.DefaultSoapHeaderMapper , STRING , AbstractHeaderMapper . AbstractHeaderMapper .class ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( java.lang.String , STRING , STRING , true ) ; assertTrue ( org.springframework.integration.ws.config.Message<> . getPayload ( ) instanceof java.lang.String ) ; assertEquals ( STRING , org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleWebServiceOutboundGateway org.springframework.integration.ws.config.SimpleWebServiceOutboundGateway = this . org.springframework.integration.ws.config.ApplicationContext . getBean ( STRING , SimpleWebServiceOutboundGateway .class ) ; org.springframework.integration.ws.config.SimpleWebServiceOutboundGateway . setExtractPayload ( false ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( java.lang.String , STRING , STRING , true ) ; assertThat ( org.springframework.integration.ws.config.Message<> . getPayload ( ) , instanceOf ( WebServiceMessage .class ) ) ; assertEquals ( STRING , org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( java.lang.String , STRING , STRING , false ) ; assertTrue ( org.springframework.integration.ws.config.Message<> . getPayload ( ) instanceof java.lang.String ) ; assertTrue ( ( ( java.lang.String ) org.springframework.integration.ws.config.Message<> . getPayload ( ) ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Document ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( javax.xml.transform.dom.DOMSource , STRING , STRING , true ) ; assertTrue ( org.springframework.integration.ws.config.Message<> . getPayload ( ) instanceof javax.xml.transform.dom.DOMSource ) ; assertEquals ( STRING , org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Document ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( javax.xml.transform.dom.DOMSource , STRING , STRING , false ) ; assertTrue ( org.springframework.integration.ws.config.Message<> . getPayload ( ) instanceof javax.xml.transform.dom.DOMSource ) ; assertTrue ( this . java.lang.String ( org.springframework.integration.ws.config.Message<> ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( org.w3c.dom.Document , STRING , STRING , true ) ; assertTrue ( org.springframework.integration.ws.config.Message<> . getPayload ( ) instanceof org.w3c.dom.Document ) ; assertEquals ( STRING , org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( org.w3c.dom.Document , STRING , STRING , false ) ; assertTrue ( org.springframework.integration.ws.config.Message<> . getPayload ( ) instanceof org.w3c.dom.Document ) ; assertTrue ( this . java.lang.String ( org.springframework.integration.ws.config.Message<> ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person = new org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person ( ) ; org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person . void ( STRING ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.Message<?> ( org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person , STRING , STRING , true ) ; assertEquals ( STRING , org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.ws.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ws.config.Message<?> < ? > org.springframework.integration.ws.config.Message<?> ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.String java.lang.String , final boolean boolean ) throws java.lang.Exception { AbstractWebServiceOutboundGateway org.springframework.integration.ws.config.AbstractWebServiceOutboundGateway = TestUtils . getPropertyValue ( this . org.springframework.integration.ws.config.ApplicationContext . getBean ( java.lang.String ) , STRING , AbstractWebServiceOutboundGateway .class ) ; if ( ! boolean ) { WebServiceTemplate org.springframework.integration.ws.config.WebServiceTemplate = TestUtils . getPropertyValue ( org.springframework.integration.ws.config.AbstractWebServiceOutboundGateway , STRING , WebServiceTemplate .class ) ; org.springframework.integration.ws.config.WebServiceTemplate . setMessageFactory ( new StubMessageFactory ( ) ) ; } WebServiceMessageSender org.springframework.integration.ws.config.WebServiceMessageSender = Mockito . mock ( WebServiceMessageSender .class ) ; WebServiceConnection org.springframework.integration.ws.config.WebServiceConnection = Mockito . mock ( WebServiceConnection .class ) ; Mockito . when ( org.springframework.integration.ws.config.WebServiceMessageSender . createConnection ( Mockito . any ( java.net.URI .class ) ) ) . thenReturn ( org.springframework.integration.ws.config.WebServiceConnection ) ; Mockito . when ( org.springframework.integration.ws.config.WebServiceMessageSender . supports ( Mockito . any ( java.net.URI .class ) ) ) . thenReturn ( true ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; WebServiceMessage wsMessage = ( WebServiceMessage ) args [ NUMBER ] ; if ( soap ) { SoapHeader soapHeader = ( ( SoapMessage ) wsMessage ) . getSoapHeader ( ) ; assertNotNull ( soapHeader . getAttributeValue ( QNameUtils . parseQNameString ( STRING ) ) ) ; assertNotNull ( soapHeader . getAttributeValue ( QNameUtils . parseQNameString ( STRING ) ) ) ; assertNotNull ( soapHeader . getAttributeValue ( QNameUtils . parseQNameString ( STRING ) ) ) ; assertNull ( soapHeader . getAttributeValue ( QNameUtils . parseQNameString ( STRING ) ) ) ; } return null ; } ) . when ( org.springframework.integration.ws.config.WebServiceConnection ) . send ( Mockito . any ( WebServiceMessage .class ) ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; WebServiceMessageFactory factory = ( WebServiceMessageFactory ) args [ NUMBER ] ; String responseMessage = factory instanceof SoapMessageFactory ? responseSoapMessage : responseNonSoapMessage ; WebServiceMessage wsMessage = factory . createWebServiceMessage ( new ByteArrayInputStream ( responseMessage . getBytes ( ) ) ) ; if ( soap ) { ( ( SoapMessage ) wsMessage ) . getSoapHeader ( ) . addAttribute ( QNameUtils . parseQNameString ( STRING ) , STRING ) ; ( ( SoapMessage ) wsMessage ) . getSoapHeader ( ) . addAttribute ( QNameUtils . parseQNameString ( STRING ) , STRING ) ; } return wsMessage ; } ) . when ( org.springframework.integration.ws.config.WebServiceConnection ) . receive ( Mockito . any ( WebServiceMessageFactory .class ) ) ; org.springframework.integration.ws.config.AbstractWebServiceOutboundGateway . setMessageSender ( org.springframework.integration.ws.config.WebServiceMessageSender ) ; MessageChannel org.springframework.integration.ws.config.MessageChannel = org.springframework.integration.ws.config.ApplicationContext . getBean ( java.lang.String , MessageChannel .class ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = MessageBuilder . withPayload ( java.lang.Object ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . setHeader ( WebServiceHeaders . SOAP_ACTION , STRING ) . build ( ) ; org.springframework.integration.ws.config.MessageChannel . send ( org.springframework.integration.ws.config.Message<> ) ; QueueChannel org.springframework.integration.ws.config.QueueChannel = org.springframework.integration.ws.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; return org.springframework.integration.ws.config.QueueChannel . receive ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Message < ? > org.springframework.integration.ws.config.Message<?> ) throws java.lang.Exception { javax.xml.transform.Transformer javax.xml.transform.Transformer = javax.xml.transform.TransformerFactory . javax.xml.transform.TransformerFactory ( ) . javax.xml.transform.Transformer ( ) ; StringResult org.springframework.integration.ws.config.StringResult = new StringResult ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.ws.config.Message<> . getPayload ( ) ; if ( java.lang.Object instanceof javax.xml.transform.dom.DOMSource ) { javax.xml.transform.Transformer . void ( ( ( javax.xml.transform.dom.DOMSource ) org.springframework.integration.ws.config.Message<> . getPayload ( ) ) , org.springframework.integration.ws.config.StringResult ) ; } else if ( java.lang.Object instanceof org.w3c.dom.Document ) { javax.xml.transform.Transformer . void ( new javax.xml.transform.dom.DOMSource ( ( org.w3c.dom.Document ) org.springframework.integration.ws.config.Message<> . getPayload ( ) ) , org.springframework.integration.ws.config.StringResult ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } return org.springframework.integration.ws.config.StringResult . toString ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax.xml.transform.Source javax.xml.transform.Source ) throws java.io.IOException , org.springframework.integration.ws.config.XmlMappingException { org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) ( ( javax.xml.transform.dom.DOMSource ) javax.xml.transform.Source ) . org.w3c.dom.Node ( ) ; java.lang.String java.lang.String = DomUtils . getChildElementValueByTagName ( org.w3c.dom.Element , STRING ) ; org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person = new org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person ( ) ; org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person . void ( java.lang.String ) ; return org.springframework.integration.ws.config.WebServiceOutboundGatewayWithHeaderMapperTests.Person ; }  <METHOD_END>
