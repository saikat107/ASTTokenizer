<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.BeanDefinition ) { return org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . LOWEST_PRECEDENCE ; }  <METHOD_END>
<METHOD_START> public void void ( SourceExtractor org.springframework.context.annotation.SourceExtractor ) { this . org.springframework.context.annotation.SourceExtractor = ( org.springframework.context.annotation.SourceExtractor != null ? org.springframework.context.annotation.SourceExtractor : new PassThroughSourceExtractor ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ProblemReporter org.springframework.context.annotation.ProblemReporter ) { this . org.springframework.context.annotation.ProblemReporter = ( org.springframework.context.annotation.ProblemReporter != null ? org.springframework.context.annotation.ProblemReporter : new FailFastProblemReporter ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( MetadataReaderFactory org.springframework.context.annotation.MetadataReaderFactory ) { Assert . notNull ( org.springframework.context.annotation.MetadataReaderFactory , STRING ) ; this . org.springframework.context.annotation.MetadataReaderFactory = org.springframework.context.annotation.MetadataReaderFactory ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator ) { Assert . notNull ( org.springframework.context.annotation.BeanNameGenerator , STRING ) ; this . boolean = true ; this . org.springframework.context.annotation.BeanNameGenerator = org.springframework.context.annotation.BeanNameGenerator ; this . org.springframework.context.annotation.BeanNameGenerator = org.springframework.context.annotation.BeanNameGenerator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.context.annotation.Environment ) { Assert . notNull ( org.springframework.context.annotation.Environment , STRING ) ; this . org.springframework.context.annotation.Environment = org.springframework.context.annotation.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.context.annotation.ResourceLoader ) { Assert . notNull ( org.springframework.context.annotation.ResourceLoader , STRING ) ; this . org.springframework.context.annotation.ResourceLoader = org.springframework.context.annotation.ResourceLoader ; if ( ! this . boolean ) { this . org.springframework.context.annotation.MetadataReaderFactory = new CachingMetadataReaderFactory ( org.springframework.context.annotation.ResourceLoader ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; if ( ! this . boolean ) { this . org.springframework.context.annotation.MetadataReaderFactory = new CachingMetadataReaderFactory ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { int int = java.lang.System . int ( org.springframework.context.annotation.BeanDefinitionRegistry ) ; if ( this . java.util.Set<java.lang.Integer> . boolean ( int ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.context.annotation.BeanDefinitionRegistry ) ; } if ( this . java.util.Set<java.lang.Integer> . boolean ( int ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.context.annotation.BeanDefinitionRegistry ) ; } this . java.util.Set<java.lang.Integer> . boolean ( int ) ; void ( org.springframework.context.annotation.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ) { int int = java.lang.System . int ( org.springframework.context.annotation.ConfigurableListableBeanFactory ) ; if ( this . java.util.Set<java.lang.Integer> . boolean ( int ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.context.annotation.ConfigurableListableBeanFactory ) ; } this . java.util.Set<java.lang.Integer> . boolean ( int ) ; if ( ! this . java.util.Set<java.lang.Integer> . boolean ( int ) ) { void ( ( BeanDefinitionRegistry ) org.springframework.context.annotation.ConfigurableListableBeanFactory ) ; } void ( org.springframework.context.annotation.ConfigurableListableBeanFactory ) ; org.springframework.context.annotation.ConfigurableListableBeanFactory . addBeanPostProcessor ( new org.springframework.context.annotation.ConfigurationClassPostProcessor.ImportAwareBeanPostProcessor ( org.springframework.context.annotation.ConfigurableListableBeanFactory ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { java.util.List<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.List<org.springframework.context.annotation.BeanDefinitionHolder> = new java.util.ArrayList<org.springframework.context.annotation.BeanDefinitionHolder> <> ( ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinitionNames ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( ConfigurationClassUtils . isFullConfigurationClass ( org.springframework.context.annotation.BeanDefinition ) || ConfigurationClassUtils . isLiteConfigurationClass ( org.springframework.context.annotation.BeanDefinition ) ) { if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( STRING + org.springframework.context.annotation.BeanDefinition ) ; } } else if ( ConfigurationClassUtils . checkConfigurationClassCandidate ( org.springframework.context.annotation.BeanDefinition , this . org.springframework.context.annotation.MetadataReaderFactory ) ) { java.util.List<org.springframework.context.annotation.BeanDefinitionHolder> . add ( new BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinition , java.lang.String ) ) ; } } if ( java.util.List<org.springframework.context.annotation.BeanDefinitionHolder> . isEmpty ( ) ) { return; } java.util.Collections . void ( java.util.List<org.springframework.context.annotation.BeanDefinitionHolder> , new java.util.Comparator<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > ( ) { @ java.lang.Override public int int ( BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder , BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder ) { int int = ConfigurationClassUtils . getOrder ( org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ) ; int int = ConfigurationClassUtils . getOrder ( org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ) ; return ( int < int ) ? - NUMBER : ( int > int ) ? NUMBER : NUMBER ; } } ) ; SingletonBeanRegistry org.springframework.context.annotation.SingletonBeanRegistry = null ; if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof SingletonBeanRegistry ) { org.springframework.context.annotation.SingletonBeanRegistry = ( SingletonBeanRegistry ) org.springframework.context.annotation.BeanDefinitionRegistry ; if ( ! this . boolean && org.springframework.context.annotation.SingletonBeanRegistry . containsSingleton ( CONFIGURATION_BEAN_NAME_GENERATOR ) ) { BeanNameGenerator org.springframework.context.annotation.BeanNameGenerator = ( BeanNameGenerator ) org.springframework.context.annotation.SingletonBeanRegistry . getSingleton ( CONFIGURATION_BEAN_NAME_GENERATOR ) ; this . org.springframework.context.annotation.BeanNameGenerator = org.springframework.context.annotation.BeanNameGenerator ; this . org.springframework.context.annotation.BeanNameGenerator = org.springframework.context.annotation.BeanNameGenerator ; } } ConfigurationClassParser org.springframework.context.annotation.ConfigurationClassParser = new ConfigurationClassParser ( this . org.springframework.context.annotation.MetadataReaderFactory , this . org.springframework.context.annotation.ProblemReporter , this . org.springframework.context.annotation.Environment , this . org.springframework.context.annotation.ResourceLoader , this . org.springframework.context.annotation.BeanNameGenerator , org.springframework.context.annotation.BeanDefinitionRegistry ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> = new java.util.LinkedHashSet <> ( java.util.List<org.springframework.context.annotation.BeanDefinitionHolder> ) ; java.util.Set<org.springframework.context.annotation.ConfigurationClass> < ConfigurationClass > java.util.Set<org.springframework.context.annotation.ConfigurationClass> = new java.util.HashSet <> ( java.util.List<org.springframework.context.annotation.BeanDefinitionHolder> . size ( ) ) ; do { org.springframework.context.annotation.ConfigurationClassParser . parse ( java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ) ; org.springframework.context.annotation.ConfigurationClassParser . validate ( ) ; java.util.Set<org.springframework.context.annotation.ConfigurationClass> < ConfigurationClass > java.util.Set<org.springframework.context.annotation.ConfigurationClass> = new java.util.LinkedHashSet <> ( org.springframework.context.annotation.ConfigurationClassParser . getConfigurationClasses ( ) ) ; java.util.Set<org.springframework.context.annotation.ConfigurationClass> . removeAll ( java.util.Set<org.springframework.context.annotation.ConfigurationClass> ) ; if ( this . org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader == null ) { this . org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader = new ConfigurationClassBeanDefinitionReader ( org.springframework.context.annotation.BeanDefinitionRegistry , this . org.springframework.context.annotation.SourceExtractor , this . org.springframework.context.annotation.ResourceLoader , this . org.springframework.context.annotation.Environment , this . org.springframework.context.annotation.BeanNameGenerator , org.springframework.context.annotation.ConfigurationClassParser . getImportRegistry ( ) ) ; } this . org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader . loadBeanDefinitions ( java.util.Set<org.springframework.context.annotation.ConfigurationClass> ) ; java.util.Set<org.springframework.context.annotation.ConfigurationClass> . addAll ( java.util.Set<org.springframework.context.annotation.ConfigurationClass> ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . clear ( ) ; if ( org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinitionCount ( ) > java.lang.String[] . int ) { java.lang.String [] java.lang.String[] = org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinitionNames ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( ConfigurationClass org.springframework.context.annotation.ConfigurationClass : java.util.Set<org.springframework.context.annotation.ConfigurationClass> ) { java.util.Set<java.lang.String> . boolean ( org.springframework.context.annotation.ConfigurationClass . getMetadata ( ) . getClassName ( ) ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( ConfigurationClassUtils . checkConfigurationClassCandidate ( org.springframework.context.annotation.BeanDefinition , this . org.springframework.context.annotation.MetadataReaderFactory ) && ! java.util.Set<java.lang.String> . boolean ( org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) ) ) { java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( new BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinition , java.lang.String ) ) ; } } } java.lang.String[] = java.lang.String[] ; } } while ( ! java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . isEmpty ( ) ); if ( org.springframework.context.annotation.SingletonBeanRegistry != null ) { if ( ! org.springframework.context.annotation.SingletonBeanRegistry . containsSingleton ( java.lang.String ) ) { org.springframework.context.annotation.SingletonBeanRegistry . registerSingleton ( java.lang.String , org.springframework.context.annotation.ConfigurationClassParser . getImportRegistry ( ) ) ; } } if ( this . org.springframework.context.annotation.MetadataReaderFactory instanceof CachingMetadataReaderFactory ) { ( ( CachingMetadataReaderFactory ) this . org.springframework.context.annotation.MetadataReaderFactory ) . clearCache ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder , BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder ) { int int = ConfigurationClassUtils . getOrder ( org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ) ; int int = ConfigurationClassUtils . getOrder ( org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ) ; return ( int < int ) ? - NUMBER : ( int > int ) ? NUMBER : NUMBER ; }  <METHOD_END>
<METHOD_START> public void void ( ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ) { java.util.Map<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> < java.lang.String , AbstractBeanDefinition > java.util.Map<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> = new java.util.LinkedHashMap<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.context.annotation.ConfigurableListableBeanFactory . getBeanDefinitionNames ( ) ) { BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; if ( ConfigurationClassUtils . isFullConfigurationClass ( org.springframework.context.annotation.BeanDefinition ) ) { if ( ! ( org.springframework.context.annotation.BeanDefinition instanceof AbstractBeanDefinition ) ) { throw new BeanDefinitionStoreException ( STRING + java.lang.String + STRING ) ; } else if ( org.springframework.context.annotation.Log . isWarnEnabled ( ) && org.springframework.context.annotation.ConfigurableListableBeanFactory . containsSingleton ( java.lang.String ) ) { org.springframework.context.annotation.Log . warn ( STRING + java.lang.String + STRING + STRING + STRING ) ; } java.util.Map<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> . put ( java.lang.String , ( AbstractBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) ; } } if ( java.util.Map<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> . isEmpty ( ) ) { return; } ConfigurationClassEnhancer org.springframework.context.annotation.ConfigurationClassEnhancer = new ConfigurationClassEnhancer ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> < java.lang.String , AbstractBeanDefinition > java.util.Map.Entry<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> : java.util.Map<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> . entrySet ( ) ) { AbstractBeanDefinition org.springframework.context.annotation.AbstractBeanDefinition = java.util.Map.Entry<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> . getValue ( ) ; org.springframework.context.annotation.AbstractBeanDefinition . setAttribute ( AutoProxyUtils . PRESERVE_TARGET_CLASS_ATTRIBUTE , java.lang.Boolean . java.lang.Boolean ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.AbstractBeanDefinition . resolveBeanClass ( this . java.lang.ClassLoader ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.ConfigurationClassEnhancer . enhance ( java.lang.Class<> , this . java.lang.ClassLoader ) ; if ( java.lang.Class<> != java.lang.Class<> ) { if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( java.lang.String . java.lang.String ( STRING + STRING , java.util.Map.Entry<java.lang.String,org.springframework.context.annotation.AbstractBeanDefinition> . getKey ( ) , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; } org.springframework.context.annotation.AbstractBeanDefinition . setBeanClass ( java.lang.Class<> ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.context.annotation.AbstractBeanDefinition . getBeanClassName ( ) , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.context.annotation.BeanFactory ) { this . org.springframework.context.annotation.BeanFactory = org.springframework.context.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.PropertyValues org.springframework.context.annotation.PropertyValues ( PropertyValues org.springframework.context.annotation.PropertyValues , java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object instanceof EnhancedConfiguration ) { ( ( EnhancedConfiguration ) java.lang.Object ) . setBeanFactory ( this . org.springframework.context.annotation.BeanFactory ) ; } return org.springframework.context.annotation.PropertyValues ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object instanceof ImportAware ) { ImportRegistry org.springframework.context.annotation.ImportRegistry = this . org.springframework.context.annotation.BeanFactory . getBean ( java.lang.String , ImportRegistry .class ) ; AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ImportRegistry . getImportingClassFor ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<? super > ( ) . java.lang.String ( ) ) ; if ( org.springframework.context.annotation.AnnotationMetadata != null ) { ( ( ImportAware ) java.lang.Object ) . setImportMetadata ( org.springframework.context.annotation.AnnotationMetadata ) ; } } return java.lang.Object ; }  <METHOD_END>
