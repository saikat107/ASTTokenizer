<METHOD_START> public void ( ) { setNestedTransactionAllowed ( true ) ; }  <METHOD_END>
<METHOD_START> public void ( UserTransaction org.springframework.transaction.jta.UserTransaction ) { this(); Assert . notNull ( org.springframework.transaction.jta.UserTransaction , STRING ) ; this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ; }  <METHOD_END>
<METHOD_START> public void ( UserTransaction org.springframework.transaction.jta.UserTransaction , TransactionManager org.springframework.transaction.jta.TransactionManager ) { this(); Assert . notNull ( org.springframework.transaction.jta.UserTransaction , STRING ) ; Assert . notNull ( org.springframework.transaction.jta.TransactionManager , STRING ) ; this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ; this . org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.TransactionManager ; }  <METHOD_END>
<METHOD_START> public void ( TransactionManager org.springframework.transaction.jta.TransactionManager ) { this(); Assert . notNull ( org.springframework.transaction.jta.TransactionManager , STRING ) ; this . org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.TransactionManager ; this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ( org.springframework.transaction.jta.TransactionManager ) ; }  <METHOD_END>
<METHOD_START> public void void ( JndiTemplate org.springframework.transaction.jta.JndiTemplate ) { Assert . notNull ( org.springframework.transaction.jta.JndiTemplate , STRING ) ; this . org.springframework.transaction.jta.JndiTemplate = org.springframework.transaction.jta.JndiTemplate ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.jta.JndiTemplate org.springframework.transaction.jta.JndiTemplate ( ) { return this . org.springframework.transaction.jta.JndiTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . org.springframework.transaction.jta.JndiTemplate = new JndiTemplate ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( ) { return this . org.springframework.transaction.jta.JndiTemplate . getEnvironment ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( UserTransaction org.springframework.transaction.jta.UserTransaction ) { this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.jta.UserTransaction org.springframework.transaction.jta.UserTransaction ( ) { return this . org.springframework.transaction.jta.UserTransaction ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionManager org.springframework.transaction.jta.TransactionManager ) { this . org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.TransactionManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.jta.TransactionManager org.springframework.transaction.jta.TransactionManager ( ) { return this . org.springframework.transaction.jta.TransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionSynchronizationRegistry org.springframework.transaction.jta.TransactionSynchronizationRegistry ) { this . org.springframework.transaction.jta.TransactionSynchronizationRegistry = org.springframework.transaction.jta.TransactionSynchronizationRegistry ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.jta.TransactionSynchronizationRegistry org.springframework.transaction.jta.TransactionSynchronizationRegistry ( ) { return this . org.springframework.transaction.jta.TransactionSynchronizationRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.transaction.jta.TransactionSystemException { void ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.transaction.jta.TransactionSystemException { if ( this . org.springframework.transaction.jta.UserTransaction == null ) { if ( StringUtils . hasLength ( this . java.lang.String ) ) { this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ( this . java.lang.String ) ; this . boolean = true ; } else { this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ( ) ; if ( this . org.springframework.transaction.jta.UserTransaction == null && this . boolean ) { this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ( ) ; } } } if ( this . org.springframework.transaction.jta.TransactionManager == null ) { if ( StringUtils . hasLength ( this . java.lang.String ) ) { this . org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.TransactionManager ( this . java.lang.String ) ; } else { this . org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.TransactionManager ( ) ; if ( this . org.springframework.transaction.jta.TransactionManager == null && this . boolean ) { this . org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.TransactionManager ( this . org.springframework.transaction.jta.UserTransaction ) ; } } } if ( this . org.springframework.transaction.jta.UserTransaction == null && this . org.springframework.transaction.jta.TransactionManager != null ) { this . org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ( this . org.springframework.transaction.jta.TransactionManager ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) java.lang.IllegalStateException { if ( this . org.springframework.transaction.jta.UserTransaction != null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . org.springframework.transaction.jta.UserTransaction ) ; } } else { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } if ( this . org.springframework.transaction.jta.TransactionManager != null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . org.springframework.transaction.jta.TransactionManager ) ; } } else { logger . warn ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . org.springframework.transaction.jta.TransactionSynchronizationRegistry == null ) { if ( StringUtils . hasLength ( this . java.lang.String ) ) { this . org.springframework.transaction.jta.TransactionSynchronizationRegistry = org.springframework.transaction.jta.TransactionSynchronizationRegistry ( this . java.lang.String ) ; } else { this . org.springframework.transaction.jta.TransactionSynchronizationRegistry = org.springframework.transaction.jta.TransactionSynchronizationRegistry ( ) ; if ( this . org.springframework.transaction.jta.TransactionSynchronizationRegistry == null && this . boolean ) { this . org.springframework.transaction.jta.TransactionSynchronizationRegistry = org.springframework.transaction.jta.TransactionSynchronizationRegistry ( this . org.springframework.transaction.jta.UserTransaction , this . org.springframework.transaction.jta.TransactionManager ) ; } } } if ( this . org.springframework.transaction.jta.TransactionSynchronizationRegistry != null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . org.springframework.transaction.jta.TransactionSynchronizationRegistry ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.UserTransaction org.springframework.transaction.jta.UserTransaction ( TransactionManager org.springframework.transaction.jta.TransactionManager ) { if ( org.springframework.transaction.jta.TransactionManager instanceof UserTransaction ) { return ( UserTransaction ) org.springframework.transaction.jta.TransactionManager ; } else { return new UserTransactionAdapter ( org.springframework.transaction.jta.TransactionManager ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.UserTransaction org.springframework.transaction.jta.UserTransaction ( java.lang.String java.lang.String )			throws org.springframework.transaction.jta.TransactionSystemException { try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return org.springframework.transaction.jta.JndiTemplate ( ) . lookup ( java.lang.String , UserTransaction .class ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new TransactionSystemException ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.TransactionManager org.springframework.transaction.jta.TransactionManager ( java.lang.String java.lang.String )			throws org.springframework.transaction.jta.TransactionSystemException { try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return org.springframework.transaction.jta.JndiTemplate ( ) . lookup ( java.lang.String , TransactionManager .class ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new TransactionSystemException ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.TransactionSynchronizationRegistry org.springframework.transaction.jta.TransactionSynchronizationRegistry ( java.lang.String java.lang.String ) throws org.springframework.transaction.jta.TransactionSystemException { try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return org.springframework.transaction.jta.JndiTemplate ( ) . lookup ( java.lang.String , TransactionSynchronizationRegistry .class ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new TransactionSystemException ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.UserTransaction org.springframework.transaction.jta.UserTransaction ( ) org.springframework.transaction.jta.TransactionSystemException { return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.TransactionManager org.springframework.transaction.jta.TransactionManager ( ) org.springframework.transaction.jta.TransactionSystemException { return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.TransactionSynchronizationRegistry org.springframework.transaction.jta.TransactionSynchronizationRegistry ( ) org.springframework.transaction.jta.TransactionSystemException { return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.UserTransaction org.springframework.transaction.jta.UserTransaction ( ) { java.lang.String java.lang.String = java.lang.String ; try { UserTransaction org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.JndiTemplate ( ) . lookup ( java.lang.String , UserTransaction .class ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } this . boolean = true ; return org.springframework.transaction.jta.UserTransaction ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } return null ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.TransactionManager org.springframework.transaction.jta.TransactionManager ( UserTransaction org.springframework.transaction.jta.UserTransaction ) { if ( org.springframework.transaction.jta.UserTransaction instanceof TransactionManager ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.transaction.jta.UserTransaction + STRING ) ; } return ( TransactionManager ) org.springframework.transaction.jta.UserTransaction ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { try { TransactionManager org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.JndiTemplate ( ) . lookup ( java.lang.String , TransactionManager .class ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return org.springframework.transaction.jta.TransactionManager ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.TransactionSynchronizationRegistry org.springframework.transaction.jta.TransactionSynchronizationRegistry ( UserTransaction org.springframework.transaction.jta.UserTransaction , TransactionManager org.springframework.transaction.jta.TransactionManager )			throws org.springframework.transaction.jta.TransactionSystemException { if ( this . boolean ) { java.lang.String java.lang.String = java.lang.String ; try { TransactionSynchronizationRegistry org.springframework.transaction.jta.TransactionSynchronizationRegistry = org.springframework.transaction.jta.JndiTemplate ( ) . lookup ( java.lang.String , TransactionSynchronizationRegistry .class ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return org.springframework.transaction.jta.TransactionSynchronizationRegistry ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } } } if ( org.springframework.transaction.jta.UserTransaction instanceof TransactionSynchronizationRegistry ) { return ( TransactionSynchronizationRegistry ) org.springframework.transaction.jta.UserTransaction ; } if ( org.springframework.transaction.jta.TransactionManager instanceof TransactionSynchronizationRegistry ) { return ( TransactionSynchronizationRegistry ) org.springframework.transaction.jta.TransactionManager ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { UserTransaction org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ( ) ; if ( org.springframework.transaction.jta.UserTransaction == null ) { throw new CannotCreateTransactionException ( STRING + STRING ) ; } if ( ! this . boolean ) { org.springframework.transaction.jta.UserTransaction = org.springframework.transaction.jta.UserTransaction ( this . java.lang.String != null ? this . java.lang.String : java.lang.String ) ; } return org.springframework.transaction.jta.JtaTransactionObject ( org.springframework.transaction.jta.UserTransaction ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject ( UserTransaction org.springframework.transaction.jta.UserTransaction ) { return new JtaTransactionObject ( org.springframework.transaction.jta.UserTransaction ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) java.lang.Object ; try { return ( org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . getStatus ( ) != Status . STATUS_NO_TRANSACTION ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.SystemException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.transaction.jta.TransactionDefinition ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) java.lang.Object ; try { void ( org.springframework.transaction.jta.JtaTransactionObject , org.springframework.transaction.jta.TransactionDefinition ) ; } catch ( NotSupportedException org.springframework.transaction.jta.NotSupportedException ) { throw new NestedTransactionNotSupportedException ( STRING , org.springframework.transaction.jta.NotSupportedException ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { throw new NestedTransactionNotSupportedException ( STRING , java.lang.UnsupportedOperationException ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new CannotCreateTransactionException ( STRING , org.springframework.transaction.jta.SystemException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , TransactionDefinition org.springframework.transaction.jta.TransactionDefinition )			throws org.springframework.transaction.jta.NotSupportedException , org.springframework.transaction.jta.SystemException { void ( org.springframework.transaction.jta.JtaTransactionObject , org.springframework.transaction.jta.TransactionDefinition . getIsolationLevel ( ) ) ; int int = determineTimeout ( org.springframework.transaction.jta.TransactionDefinition ) ; void ( org.springframework.transaction.jta.JtaTransactionObject , int ) ; org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . begin ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , int int )			throws org.springframework.transaction.jta.InvalidIsolationLevelException , org.springframework.transaction.jta.SystemException { if ( ! this . boolean && int != TransactionDefinition . ISOLATION_DEFAULT ) { throw new InvalidIsolationLevelException ( STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , int int ) throws org.springframework.transaction.jta.SystemException { if ( int > TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . setTransactionTimeout ( int ) ; if ( int > NUMBER ) { txObject . resetTransactionTimeout = true ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) java.lang.Object ; try { return java.lang.Object ( org.springframework.transaction.jta.JtaTransactionObject ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.SystemException ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject ) throws org.springframework.transaction.jta.SystemException { if ( org.springframework.transaction.jta.TransactionManager ( ) == null ) { throw new TransactionSuspensionNotSupportedException ( STRING + STRING ) ; } return org.springframework.transaction.jta.TransactionManager ( ) . suspend ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) java.lang.Object ; try { void ( org.springframework.transaction.jta.JtaTransactionObject , java.lang.Object ) ; } catch ( javax.transaction.InvalidTransactionException javax.transaction.InvalidTransactionException ) { throw new IllegalTransactionStateException ( STRING , javax.transaction.InvalidTransactionException ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new TransactionSystemException ( STRING , java.lang.IllegalStateException ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.SystemException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , java.lang.Object java.lang.Object )		throws javax.transaction.InvalidTransactionException , org.springframework.transaction.jta.SystemException { if ( org.springframework.transaction.jta.TransactionManager ( ) == null ) { throw new TransactionSuspensionNotSupportedException ( STRING + STRING ) ; } org.springframework.transaction.jta.TransactionManager ( ) . resume ( ( Transaction ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.transaction.jta.DefaultTransactionStatus ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) org.springframework.transaction.jta.DefaultTransactionStatus . getTransaction ( ) ; try { int int = org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . getStatus ( ) ; if ( int == Status . STATUS_NO_TRANSACTION ) { throw new UnexpectedRollbackException ( STRING ) ; } if ( int == Status . STATUS_ROLLEDBACK ) { try { org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . rollback ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.IllegalStateException ) ; } } throw new UnexpectedRollbackException ( STRING ) ; } org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . commit ( ) ; } catch ( RollbackException org.springframework.transaction.jta.RollbackException ) { throw new UnexpectedRollbackException ( STRING , org.springframework.transaction.jta.RollbackException ) ; } catch ( HeuristicMixedException org.springframework.transaction.jta.HeuristicMixedException ) { throw new HeuristicCompletionException ( HeuristicCompletionException . STATE_MIXED , org.springframework.transaction.jta.HeuristicMixedException ) ; } catch ( HeuristicRollbackException org.springframework.transaction.jta.HeuristicRollbackException ) { throw new HeuristicCompletionException ( HeuristicCompletionException . STATE_ROLLED_BACK , org.springframework.transaction.jta.HeuristicRollbackException ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new TransactionSystemException ( STRING , java.lang.IllegalStateException ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.SystemException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.transaction.jta.DefaultTransactionStatus ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) org.springframework.transaction.jta.DefaultTransactionStatus . getTransaction ( ) ; try { int int = org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . getStatus ( ) ; if ( int != Status . STATUS_NO_TRANSACTION ) { try { org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . rollback ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { if ( int == Status . STATUS_ROLLEDBACK ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.IllegalStateException ) ; } } else { throw new TransactionSystemException ( STRING , java.lang.IllegalStateException ) ; } } } } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.SystemException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.transaction.jta.DefaultTransactionStatus ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) org.springframework.transaction.jta.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.transaction.jta.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING ) ; } try { int int = org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . getStatus ( ) ; if ( int != Status . STATUS_NO_TRANSACTION && int != Status . STATUS_ROLLEDBACK ) { org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . setRollbackOnly ( ) ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new TransactionSystemException ( STRING , java.lang.IllegalStateException ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.SystemException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.util.List<org.springframework.transaction.jta.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.jta.TransactionSynchronization> ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) java.lang.Object ; logger . debug ( STRING ) ; try { void ( org.springframework.transaction.jta.JtaTransactionObject , java.util.List<org.springframework.transaction.jta.TransactionSynchronization> ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.SystemException ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof RollbackException || java.lang.Exception . java.lang.Throwable ( ) instanceof RollbackException ) { logger . debug ( STRING + STRING + STRING + STRING + java.lang.Exception ) ; invokeAfterCompletion ( java.util.List<org.springframework.transaction.jta.TransactionSynchronization> , TransactionSynchronization . STATUS_ROLLED_BACK ) ; } else { logger . debug ( STRING + STRING + STRING + STRING + java.lang.Exception ) ; invokeAfterCompletion ( java.util.List<org.springframework.transaction.jta.TransactionSynchronization> , TransactionSynchronization . STATUS_UNKNOWN ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , java.util.List<org.springframework.transaction.jta.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.jta.TransactionSynchronization> )			throws org.springframework.transaction.jta.RollbackException , org.springframework.transaction.jta.SystemException { int int = org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . getStatus ( ) ; if ( int == Status . STATUS_NO_TRANSACTION ) { throw new RollbackException ( STRING ) ; } if ( int == Status . STATUS_ROLLEDBACK ) { throw new RollbackException ( STRING ) ; } if ( this . org.springframework.transaction.jta.TransactionSynchronizationRegistry != null ) { this . org.springframework.transaction.jta.TransactionSynchronizationRegistry . registerInterposedSynchronization ( new JtaAfterCompletionSynchronization ( java.util.List<org.springframework.transaction.jta.TransactionSynchronization> ) ) ; } else if ( org.springframework.transaction.jta.TransactionManager ( ) != null ) { Transaction org.springframework.transaction.jta.Transaction = org.springframework.transaction.jta.TransactionManager ( ) . getTransaction ( ) ; if ( org.springframework.transaction.jta.Transaction == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } org.springframework.transaction.jta.Transaction . registerSynchronization ( new JtaAfterCompletionSynchronization ( java.util.List<org.springframework.transaction.jta.TransactionSynchronization> ) ) ; } else { logger . warn ( STRING + STRING + STRING ) ; invokeAfterCompletion ( java.util.List<org.springframework.transaction.jta.TransactionSynchronization> , TransactionSynchronization . STATUS_UNKNOWN ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject = ( JtaTransactionObject ) java.lang.Object ; if ( txObject . resetTransactionTimeout ) { try { org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . setTransactionTimeout ( NUMBER ) ; } catch ( SystemException org.springframework.transaction.jta.SystemException ) { logger . debug ( STRING , org.springframework.transaction.jta.SystemException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.jta.Transaction org.springframework.transaction.jta.Transaction ( java.lang.String java.lang.String , int int ) throws org.springframework.transaction.jta.NotSupportedException , org.springframework.transaction.jta.SystemException { TransactionManager org.springframework.transaction.jta.TransactionManager = org.springframework.transaction.jta.TransactionManager ( ) ; Assert . state ( org.springframework.transaction.jta.TransactionManager != null , STRING ) ; if ( int >= NUMBER ) { org.springframework.transaction.jta.TransactionManager . setTransactionTimeout ( int ) ; } org.springframework.transaction.jta.TransactionManager . begin ( ) ; return new ManagedTransactionAdapter ( org.springframework.transaction.jta.TransactionManager ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; this . org.springframework.transaction.jta.JndiTemplate = new JndiTemplate ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
