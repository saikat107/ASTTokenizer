<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.statemachine.guard.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; Expression org.springframework.statemachine.guard.Expression = org.springframework.statemachine.guard.SpelExpressionParser . parseExpression ( STRING ) ; SpelExpressionGuard < TestStates , TestEvents > org.springframework.statemachine.guard.SpelExpressionGuard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> = new SpelExpressionGuard < TestStates , TestEvents > ( org.springframework.statemachine.guard.Expression ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MessageHeaders org.springframework.statemachine.guard.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; DefaultStateContext < TestStates , TestEvents > org.springframework.statemachine.guard.DefaultStateContext<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> = new DefaultStateContext < TestStates , TestEvents > ( null , null , org.springframework.statemachine.guard.MessageHeaders , null , null , null , null , null , null ) ; assertThat ( org.springframework.statemachine.guard.SpelExpressionGuard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . evaluate ( org.springframework.statemachine.guard.DefaultStateContext<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.guard.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( BaseConfig .class , org.springframework.statemachine.guard.SpelExpressionGuardTests.Config1 .class ) ; assertTrue ( org.springframework.statemachine.guard.AnnotationConfigApplicationContext . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.guard.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guardExpression ( STRING ) ; }  <METHOD_END>
