<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; AjType < ? > org.springframework.aop.aspectj.annotation.AjType<?> = null ; while ( java.lang.Class<> != java.lang.Object .class ) { AjType < ? > org.springframework.aop.aspectj.annotation.AjType<?> = AjTypeSystem . getAjType ( java.lang.Class<> ) ; if ( org.springframework.aop.aspectj.annotation.AjType<> . isAspect ( ) ) { org.springframework.aop.aspectj.annotation.AjType<?> = org.springframework.aop.aspectj.annotation.AjType<> ; break; } java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } if ( org.springframework.aop.aspectj.annotation.AjType<> == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } if ( org.springframework.aop.aspectj.annotation.AjType<> . getDeclarePrecedence ( ) . length > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Class<?> = org.springframework.aop.aspectj.annotation.AjType<> . getJavaClass ( ) ; this . org.springframework.aop.aspectj.annotation.AjType<?> = org.springframework.aop.aspectj.annotation.AjType<> ; switch ( this . org.springframework.aop.aspectj.annotation.AjType<> . getPerClause ( ) . getKind ( ) ) { case SINGLETON : this . org.springframework.aop.aspectj.annotation.Pointcut = Pointcut . TRUE ; return; case PERTARGET : case PERTHIS : AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . setLocation ( java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . setExpression ( java.lang.String ( java.lang.Class<> ) ) ; org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . setPointcutDeclarationScope ( java.lang.Class<> ) ; this . org.springframework.aop.aspectj.annotation.Pointcut = org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ; return; case PERTYPEWITHIN : this . org.springframework.aop.aspectj.annotation.Pointcut = new ComposablePointcut ( new TypePatternClassFilter ( java.lang.String ( java.lang.Class<> ) ) ) ; return; default: throw new AopConfigException ( STRING + org.springframework.aop.aspectj.annotation.AjType<> . getPerClause ( ) . getKind ( ) + STRING + java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = java.lang.Class<> . A ( Aspect .class ) . value ( ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.aspectj.annotation.AjType<?> < ? > org.springframework.aop.aspectj.annotation.AjType<?> ( ) { return this . org.springframework.aop.aspectj.annotation.AjType<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.aop.aspectj.annotation.Pointcut org.springframework.aop.aspectj.annotation.Pointcut ( ) { return this . org.springframework.aop.aspectj.annotation.Pointcut ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { PerClauseKind org.springframework.aop.aspectj.annotation.PerClauseKind = org.springframework.aop.aspectj.annotation.AjType<?> ( ) . getPerClause ( ) . getKind ( ) ; return ( org.springframework.aop.aspectj.annotation.PerClauseKind == PerClauseKind . PERTARGET || org.springframework.aop.aspectj.annotation.PerClauseKind == PerClauseKind . PERTHIS ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { PerClauseKind org.springframework.aop.aspectj.annotation.PerClauseKind = org.springframework.aop.aspectj.annotation.AjType<?> ( ) . getPerClause ( ) . getKind ( ) ; return ( org.springframework.aop.aspectj.annotation.PerClauseKind == PerClauseKind . PERTYPEWITHIN ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( boolean ( ) || boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; this . org.springframework.aop.aspectj.annotation.AjType<?> = AjTypeSystem . getAjType ( this . java.lang.Class<> ) ; }  <METHOD_END>
