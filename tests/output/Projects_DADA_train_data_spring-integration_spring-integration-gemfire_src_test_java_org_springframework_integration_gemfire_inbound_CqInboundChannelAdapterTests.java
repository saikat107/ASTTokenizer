<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { java.io.OutputStream = ForkUtil . cacheServer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.gemfire.inbound.LocalRegion . put ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.gemfire.inbound.Message<?> = org.springframework.integration.gemfire.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.inbound.Message<> ) ; assertTrue ( org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) instanceof CqEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.integration.gemfire.inbound.LocalRegion . put ( STRING , NUMBER ) ; Message < ? > org.springframework.integration.gemfire.inbound.Message<?> = org.springframework.integration.gemfire.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.inbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { try { java.io.OutputStream . void ( STRING . byte[] ( ) ) ; java.io.OutputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
