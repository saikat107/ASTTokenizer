<METHOD_START> void ( TestRunnerConfiguration org.springframework.boot.cli.command.test.TestRunnerConfiguration , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] . java.lang.Object ( ) ; this . org.springframework.boot.cli.command.test.GroovyCompiler = new GroovyCompiler ( org.springframework.boot.cli.command.test.TestRunnerConfiguration ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = this . org.springframework.boot.cli.command.test.GroovyCompiler . compile ( this . java.lang.String[] ) ; if ( java.lang.Object[] . int == NUMBER ) { throw new java.lang.RuntimeException ( STRING + java.util.Arrays . java.lang.String ( this . java.lang.String[] ) + STRING ) ; } org.springframework.boot.cli.command.test.TestRunner.RunThread org.springframework.boot.cli.command.test.TestRunner.RunThread = new org.springframework.boot.cli.command.test.TestRunner.RunThread ( java.lang.Object[] ) ; org.springframework.boot.cli.command.test.TestRunner.RunThread . void ( ) ; org.springframework.boot.cli.command.test.TestRunner.RunThread . void ( new java.lang.Thread . java.lang.Thread.UncaughtExceptionHandler ( ) { @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread , java.lang.Throwable java.lang.Throwable ) { org.springframework.boot.cli.command.test.TestRunner .this . java.lang.Throwable = java.lang.Throwable ; } } ) ; org.springframework.boot.cli.command.test.TestRunner.RunThread . void ( ) ; if ( this . java.lang.Throwable != null ) { TestFailedException org.springframework.boot.cli.command.test.TestFailedException = new TestFailedException ( this . java.lang.Throwable ) ; this . java.lang.Throwable = null ; throw org.springframework.boot.cli.command.test.TestFailedException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread , java.lang.Throwable java.lang.Throwable ) { org.springframework.boot.cli.command.test.TestRunner .this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Object ... java.lang.Object[] ) { super( STRING ); void ( true ) ; if ( java.lang.Object[] . int != NUMBER && java.lang.Object[] [ NUMBER ] instanceof java.lang.Class ) { void ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . java.lang.ClassLoader ( ) ) ; } this . java.lang.Class<?> = java.lang.Class<?> ( java.lang.ClassLoader ( ) ) ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.ClassLoader java.lang.ClassLoader ) { try { return java.lang.ClassLoader ( ) . java.lang.Class<?> ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.Object [] java.lang.Object[] ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( ( java.lang.Object instanceof java.lang.Class ) && boolean ( ( java.lang.Class<?> < ? > ) java.lang.Object ) ) { java.util.List<java.lang.Class<?>> . boolean ( ( java.lang.Class<?> < ? > ) java.lang.Object ) ; } } return java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( boolean ( java.lang.Class<> ) || boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.Method . java.lang.annotation.Annotation[] ( ) ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( this . java.lang.Class<> != null && this . java.lang.Class<> . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { if ( this . java.lang.Class<?>[] . int == NUMBER ) { java.lang.System . java.io.PrintStream . void ( STRING ) ; } else { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( DelegateTestRunner .class . java.lang.String ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.Class [] .class , java.lang.Class<> ) ; java.lang.Object java.lang.Object = java.lang.Class<> . newInstance ( ) ; java.lang.reflect.Method . java.lang.Object ( null , this . java.lang.Class<?>[] , java.lang.Object ) ; boolean boolean = ( java.lang.Boolean ) java.lang.Class<> . java.lang.reflect.Method ( STRING ) . java.lang.Object ( java.lang.Object ) ; if ( ! boolean ) { throw new java.lang.RuntimeException ( STRING ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { ReflectionUtils . rethrowRuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
