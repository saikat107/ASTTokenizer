<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.autoproxy.AtAspectJAfterThrowingTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.autoproxy.AtAspectJAfterThrowingTests> ( ) ) ; ITestBean org.springframework.aop.aspectj.autoproxy.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.autoproxy.ExceptionHandlingAspect org.springframework.aop.aspectj.autoproxy.ExceptionHandlingAspect = ( org.springframework.aop.aspectj.autoproxy.ExceptionHandlingAspect ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.autoproxy.ITestBean ) ) ; try { org.springframework.aop.aspectj.autoproxy.ITestBean . unreliableFileOperation ( ) ; } catch ( java.io.IOException java.io.IOException ) { } assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.ExceptionHandlingAspect . int ) ; assertNotNull ( org.springframework.aop.aspectj.autoproxy.ExceptionHandlingAspect . java.io.IOException ) ; }  <METHOD_END>
<METHOD_START> @ AfterThrowing ( pointcut = STRING , throwing = STRING ) public void void ( java.io.IOException java.io.IOException ) { int ++ ; java.io.IOException = java.io.IOException ; }  <METHOD_END>
