<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( WebApplicationContext org.springframework.web.context.WebApplicationContext ) { this . org.springframework.web.context.WebApplicationContext = org.springframework.web.context.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( org.springframework.web.context.ApplicationContextInitializer<?> < ? > ... org.springframework.web.context.ApplicationContextInitializer<?>[] ) { if ( org.springframework.web.context.ApplicationContextInitializer<?>[] != null ) { for ( ApplicationContextInitializer < ? > org.springframework.web.context.ApplicationContextInitializer<?> : org.springframework.web.context.ApplicationContextInitializer<?>[] ) { this . java.util.List<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> . add ( ( ApplicationContextInitializer < ConfigurableApplicationContext > ) org.springframework.web.context.ApplicationContextInitializer<> ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.web.context.WebApplicationContext org.springframework.web.context.WebApplicationContext ( ServletContext org.springframework.web.context.ServletContext ) { if ( org.springframework.web.context.ServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) != null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } Log org.springframework.web.context.Log = LogFactory . getLog ( org.springframework.web.context.ContextLoader .class ) ; org.springframework.web.context.ServletContext . log ( STRING ) ; if ( org.springframework.web.context.Log . isInfoEnabled ( ) ) { org.springframework.web.context.Log . info ( STRING ) ; } long long = java.lang.System . long ( ) ; try { if ( this . org.springframework.web.context.WebApplicationContext == null ) { this . org.springframework.web.context.WebApplicationContext = org.springframework.web.context.WebApplicationContext ( org.springframework.web.context.ServletContext ) ; } if ( this . org.springframework.web.context.WebApplicationContext instanceof ConfigurableWebApplicationContext ) { ConfigurableWebApplicationContext org.springframework.web.context.ConfigurableWebApplicationContext = ( ConfigurableWebApplicationContext ) this . org.springframework.web.context.WebApplicationContext ; if ( ! org.springframework.web.context.ConfigurableWebApplicationContext . isActive ( ) ) { if ( org.springframework.web.context.ConfigurableWebApplicationContext . getParent ( ) == null ) { ApplicationContext org.springframework.web.context.ApplicationContext = org.springframework.web.context.ApplicationContext ( org.springframework.web.context.ServletContext ) ; org.springframework.web.context.ConfigurableWebApplicationContext . setParent ( org.springframework.web.context.ApplicationContext ) ; } void ( org.springframework.web.context.ConfigurableWebApplicationContext , org.springframework.web.context.ServletContext ) ; } } org.springframework.web.context.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , this . org.springframework.web.context.WebApplicationContext ) ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; if ( java.lang.ClassLoader == org.springframework.web.context.ContextLoader .class . java.lang.ClassLoader ( ) ) { org.springframework.web.context.WebApplicationContext = this . org.springframework.web.context.WebApplicationContext ; } else if ( java.lang.ClassLoader != null ) { java.util.Map<java.lang.ClassLoader,org.springframework.web.context.WebApplicationContext> . put ( java.lang.ClassLoader , this . org.springframework.web.context.WebApplicationContext ) ; } if ( org.springframework.web.context.Log . isDebugEnabled ( ) ) { org.springframework.web.context.Log . debug ( STRING + WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + STRING ) ; } if ( org.springframework.web.context.Log . isInfoEnabled ( ) ) { long long = java.lang.System . long ( ) - long ; org.springframework.web.context.Log . info ( STRING + long + STRING ) ; } return this . org.springframework.web.context.WebApplicationContext ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.web.context.Log . error ( STRING , java.lang.RuntimeException ) ; org.springframework.web.context.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , java.lang.RuntimeException ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { org.springframework.web.context.Log . error ( STRING , java.lang.Error ) ; org.springframework.web.context.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , java.lang.Error ) ; throw java.lang.Error ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.context.WebApplicationContext org.springframework.web.context.WebApplicationContext ( ServletContext org.springframework.web.context.ServletContext ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.web.context.ServletContext ) ; if ( ! ConfigurableWebApplicationContext .class . boolean ( java.lang.Class<> ) ) { throw new ApplicationContextException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + ConfigurableWebApplicationContext .class . java.lang.String ( ) + STRING ) ; } return ( ConfigurableWebApplicationContext ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( ServletContext org.springframework.web.context.ServletContext ) { java.lang.String java.lang.String = org.springframework.web.context.ServletContext . getInitParameter ( java.lang.String ) ; if ( java.lang.String != null ) { try { return ClassUtils . forName ( java.lang.String , ClassUtils . getDefaultClassLoader ( ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new ApplicationContextException ( STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } } else { java.lang.String = java.util.Properties . java.lang.String ( WebApplicationContext .class . java.lang.String ( ) ) ; try { return ClassUtils . forName ( java.lang.String , org.springframework.web.context.ContextLoader .class . java.lang.ClassLoader ( ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new ApplicationContextException ( STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableWebApplicationContext org.springframework.web.context.ConfigurableWebApplicationContext , ServletContext org.springframework.web.context.ServletContext ) { if ( ObjectUtils . identityToString ( org.springframework.web.context.ConfigurableWebApplicationContext ) . equals ( org.springframework.web.context.ConfigurableWebApplicationContext . getId ( ) ) ) { java.lang.String java.lang.String = org.springframework.web.context.ServletContext . getInitParameter ( java.lang.String ) ; if ( java.lang.String != null ) { org.springframework.web.context.ConfigurableWebApplicationContext . setId ( java.lang.String ) ; } else { org.springframework.web.context.ConfigurableWebApplicationContext . setId ( ConfigurableWebApplicationContext . APPLICATION_CONTEXT_ID_PREFIX + ObjectUtils . getDisplayString ( org.springframework.web.context.ServletContext . getContextPath ( ) ) ) ; } } org.springframework.web.context.ConfigurableWebApplicationContext . setServletContext ( org.springframework.web.context.ServletContext ) ; java.lang.String java.lang.String = org.springframework.web.context.ServletContext . getInitParameter ( java.lang.String ) ; if ( java.lang.String != null ) { org.springframework.web.context.ConfigurableWebApplicationContext . setConfigLocation ( java.lang.String ) ; } ConfigurableEnvironment org.springframework.web.context.ConfigurableEnvironment = org.springframework.web.context.ConfigurableWebApplicationContext . getEnvironment ( ) ; if ( org.springframework.web.context.ConfigurableEnvironment instanceof ConfigurableWebEnvironment ) { ( ( ConfigurableWebEnvironment ) org.springframework.web.context.ConfigurableEnvironment ) . initPropertySources ( org.springframework.web.context.ServletContext , null ) ; } void ( org.springframework.web.context.ServletContext , org.springframework.web.context.ConfigurableWebApplicationContext ) ; org.springframework.web.context.ConfigurableWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletContext org.springframework.web.context.ServletContext , ConfigurableWebApplicationContext org.springframework.web.context.ConfigurableWebApplicationContext ) { java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> < java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> < ApplicationContextInitializer < ConfigurableApplicationContext > > > java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> = java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> ( org.springframework.web.context.ServletContext ) ; for ( java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> < ApplicationContextInitializer < ConfigurableApplicationContext > > java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> : java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveTypeArgument ( java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> , ApplicationContextInitializer .class ) ; if ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( org.springframework.web.context.ConfigurableWebApplicationContext ) ) { throw new ApplicationContextException ( java.lang.String . java.lang.String ( STRING + STRING + STRING , java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> . getName ( ) , java.lang.Class<> . java.lang.String ( ) , org.springframework.web.context.ConfigurableWebApplicationContext . getClass ( ) . getName ( ) ) ) ; } this . java.util.List<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> . add ( BeanUtils . instantiateClass ( java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> ) ) ; } AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> ) ; for ( ApplicationContextInitializer < ConfigurableApplicationContext > org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext> : this . java.util.List<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> ) { org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext> . initialize ( org.springframework.web.context.ConfigurableWebApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> < java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> < ApplicationContextInitializer < ConfigurableApplicationContext > > > java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> ( ServletContext org.springframework.web.context.ServletContext ) { java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> < java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> < ApplicationContextInitializer < ConfigurableApplicationContext > > > java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> = new java.util.ArrayList<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> <> ( ) ; java.lang.String java.lang.String = org.springframework.web.context.ServletContext . getInitParameter ( java.lang.String ) ; if ( java.lang.String != null ) { for ( java.lang.String java.lang.String : StringUtils . tokenizeToStringArray ( java.lang.String , java.lang.String ) ) { java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> . add ( java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> ( java.lang.String ) ) ; } } java.lang.String java.lang.String = org.springframework.web.context.ServletContext . getInitParameter ( java.lang.String ) ; if ( java.lang.String != null ) { for ( java.lang.String java.lang.String : StringUtils . tokenizeToStringArray ( java.lang.String , java.lang.String ) ) { java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> . add ( java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> ( java.lang.String ) ) ; } } return java.util.List<java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> < ApplicationContextInitializer < ConfigurableApplicationContext > > java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> ( java.lang.String java.lang.String ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , ClassUtils . getDefaultClassLoader ( ) ) ; if ( ! ApplicationContextInitializer .class . boolean ( java.lang.Class<> ) ) { throw new ApplicationContextException ( STRING + java.lang.Class<> ) ; } return ( java.lang.Class<org.springframework.web.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableApplicationContext>> < ApplicationContextInitializer < ConfigurableApplicationContext > > ) java.lang.Class<> ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new ApplicationContextException ( STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.context.ApplicationContext org.springframework.web.context.ApplicationContext ( ServletContext org.springframework.web.context.ServletContext ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( ServletContext org.springframework.web.context.ServletContext ) { org.springframework.web.context.ServletContext . log ( STRING ) ; try { if ( this . org.springframework.web.context.WebApplicationContext instanceof ConfigurableWebApplicationContext ) { ( ( ConfigurableWebApplicationContext ) this . org.springframework.web.context.WebApplicationContext ) . close ( ) ; } } finally { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; if ( java.lang.ClassLoader == org.springframework.web.context.ContextLoader .class . java.lang.ClassLoader ( ) ) { org.springframework.web.context.WebApplicationContext = null ; } else if ( java.lang.ClassLoader != null ) { java.util.Map<java.lang.ClassLoader,org.springframework.web.context.WebApplicationContext> . remove ( java.lang.ClassLoader ) ; } org.springframework.web.context.ServletContext . removeAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.web.context.WebApplicationContext org.springframework.web.context.WebApplicationContext ( ) { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; if ( java.lang.ClassLoader != null ) { WebApplicationContext org.springframework.web.context.WebApplicationContext = java.util.Map<java.lang.ClassLoader,org.springframework.web.context.WebApplicationContext> . get ( java.lang.ClassLoader ) ; if ( org.springframework.web.context.WebApplicationContext != null ) { return org.springframework.web.context.WebApplicationContext ; } } return org.springframework.web.context.WebApplicationContext ; }  <METHOD_END>
