<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( MethodInvokingMessageHandler .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; MessageHandler org.springframework.integration.config.xml.MessageHandler = TestUtils . getPropertyValue ( java.lang.Object , STRING , MessageHandler .class ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.integration.config.xml.MessageHandler ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.MessageHandler , STRING ) , Matchers . instanceOf ( RequestHandlerRetryAdvice .class ) ) ; org.springframework.integration.config.xml.MessageHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; QueueChannel org.springframework.integration.config.xml.QueueChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertThat ( org.springframework.integration.config.xml.Message<> , instanceOf ( ErrorMessage .class ) ) ; assertThat ( org.springframework.integration.config.xml.Message<> . getPayload ( ) , instanceOf ( MessagingException .class ) ) ; assertEquals ( STRING , ( ( MessagingException ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) . getFailedMessage ( ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( MethodInvokingMessageHandler .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( TestConsumer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
