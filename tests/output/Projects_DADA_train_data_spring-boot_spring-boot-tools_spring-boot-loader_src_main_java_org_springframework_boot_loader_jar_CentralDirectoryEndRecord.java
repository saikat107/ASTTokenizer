<METHOD_START> void ( RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ) throws java.io.IOException { this . byte[] = byte[] ( org.springframework.boot.loader.jar.RandomAccessData , int ) ; this . int = int ; this . int = this . byte[] . int - this . int ; while ( ! boolean ( ) ) { this . int ++ ; if ( this . int > this . byte[] . int ) { if ( this . int >= int || this . int > org.springframework.boot.loader.jar.RandomAccessData . getSize ( ) ) { throw new java.io.IOException ( STRING + STRING + this . int + STRING ) ; } this . byte[] = byte[] ( org.springframework.boot.loader.jar.RandomAccessData , this . int + int ) ; } this . int = this . byte[] . int - this . int ; } }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( RandomAccessData org.springframework.boot.loader.jar.RandomAccessData , int int )			throws java.io.IOException { int int = ( int ) java.lang.Math . int ( org.springframework.boot.loader.jar.RandomAccessData . getSize ( ) , int ) ; return Bytes . get ( org.springframework.boot.loader.jar.RandomAccessData . getSubsection ( org.springframework.boot.loader.jar.RandomAccessData . getSize ( ) - int , int ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( this . byte[] . int < int || Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) != int ) { return false ; } long long = Bytes . littleEndianValue ( this . byte[] , this . int + int , NUMBER ) ; return this . int == int + long ; }  <METHOD_END>
<METHOD_START> public long long ( RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ) { long long = Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; long long = Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; long long = org.springframework.boot.loader.jar.RandomAccessData . getSize ( ) - this . int - long ; return long - long ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ( RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ) { long long = Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; long long = Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; return org.springframework.boot.loader.jar.RandomAccessData . getSubsection ( long , long ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { long long = Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; if ( long == NUMBER ) { throw new java.lang.IllegalStateException ( STRING ) ; } return ( int ) long ; }  <METHOD_END>
