<METHOD_START> @ Before public final void void ( ) java.lang.Exception { this . java.io.StringWriter = new java.io.StringWriter ( ) ; this . org.springframework.web.servlet.tags.form.MockPageContext = org.springframework.web.servlet.tags.form.MockPageContext ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.tags.form.MockPageContext org.springframework.web.servlet.tags.form.MockPageContext ( ) org.springframework.web.servlet.tags.form.JspException { MockPageContext org.springframework.web.servlet.tags.form.MockPageContext = createPageContext ( ) ; MockHttpServletRequest org.springframework.web.servlet.tags.form.MockHttpServletRequest = ( MockHttpServletRequest ) org.springframework.web.servlet.tags.form.MockPageContext . getRequest ( ) ; StaticWebApplicationContext org.springframework.web.servlet.tags.form.StaticWebApplicationContext = ( StaticWebApplicationContext ) RequestContextUtils . findWebApplicationContext ( org.springframework.web.servlet.tags.form.MockHttpServletRequest ) ; org.springframework.web.servlet.tags.form.StaticWebApplicationContext . registerSingleton ( STRING , RequestDataValueProcessorWrapper .class ) ; void ( org.springframework.web.servlet.tags.form.MockHttpServletRequest ) ; void ( org.springframework.web.servlet.tags.form.MockPageContext ) ; RequestContext org.springframework.web.servlet.tags.form.RequestContext = new JspAwareRequestContext ( org.springframework.web.servlet.tags.form.MockPageContext ) ; org.springframework.web.servlet.tags.form.MockPageContext . setAttribute ( RequestContextAwareTag . REQUEST_CONTEXT_PAGE_ATTRIBUTE , org.springframework.web.servlet.tags.form.RequestContext ) ; return org.springframework.web.servlet.tags.form.MockPageContext ; }  <METHOD_END>
<METHOD_START> protected void void ( MockPageContext org.springframework.web.servlet.tags.form.MockPageContext ) throws org.springframework.web.servlet.tags.form.JspException {	}  <METHOD_END>
<METHOD_START> protected void void ( MockHttpServletRequest org.springframework.web.servlet.tags.form.MockHttpServletRequest ) {	}  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.tags.form.MockPageContext org.springframework.web.servlet.tags.form.MockPageContext ( ) { return this . org.springframework.web.servlet.tags.form.MockPageContext ; }  <METHOD_END>
<METHOD_START> protected java.io.Writer java.io.Writer ( ) { return this . java.io.StringWriter ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.io.StringWriter . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.servlet.tags.form.RequestContext org.springframework.web.servlet.tags.form.RequestContext ( ) { return ( RequestContext ) org.springframework.web.servlet.tags.form.MockPageContext ( ) . getAttribute ( RequestContextAwareTag . REQUEST_CONTEXT_PAGE_ATTRIBUTE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.web.servlet.tags.form.RequestDataValueProcessor org.springframework.web.servlet.tags.form.RequestDataValueProcessor ( ) { RequestDataValueProcessor org.springframework.web.servlet.tags.form.RequestDataValueProcessor = mock ( RequestDataValueProcessor .class ) ; HttpServletRequest org.springframework.web.servlet.tags.form.HttpServletRequest = ( HttpServletRequest ) org.springframework.web.servlet.tags.form.MockPageContext ( ) . getRequest ( ) ; StaticWebApplicationContext org.springframework.web.servlet.tags.form.StaticWebApplicationContext = ( StaticWebApplicationContext ) RequestContextUtils . findWebApplicationContext ( org.springframework.web.servlet.tags.form.HttpServletRequest ) ; org.springframework.web.servlet.tags.form.StaticWebApplicationContext . getBean ( RequestDataValueProcessorWrapper .class ) . setRequestDataValueProcessor ( org.springframework.web.servlet.tags.form.RequestDataValueProcessor ) ; return org.springframework.web.servlet.tags.form.RequestDataValueProcessor ; }  <METHOD_END>
<METHOD_START> protected void void ( Errors org.springframework.web.servlet.tags.form.Errors ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map ( BindingResult . MODEL_KEY_PREFIX + java.lang.String , org.springframework.web.servlet.tags.form.Errors ) ; MockPageContext org.springframework.web.servlet.tags.form.MockPageContext = org.springframework.web.servlet.tags.form.MockPageContext ( ) ; RequestContext org.springframework.web.servlet.tags.form.RequestContext = new RequestContext ( ( HttpServletRequest ) org.springframework.web.servlet.tags.form.MockPageContext . getRequest ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.servlet.tags.form.MockPageContext . setAttribute ( RequestContextAwareTag . REQUEST_CONTEXT_PAGE_ATTRIBUTE , org.springframework.web.servlet.tags.form.RequestContext ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String + STRING + java.lang.String + STRING ; assertTrue ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertTrue ( STRING + java.lang.String + STRING + java.lang.String + STRING , ! java.lang.String . boolean ( java.lang.String + STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER , java.lang.String . int ( STRING ) ) ; assertTrue ( STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
