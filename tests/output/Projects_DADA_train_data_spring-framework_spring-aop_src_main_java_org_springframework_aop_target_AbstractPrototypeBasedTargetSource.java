<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.aop.target.BeanFactory ) throws org.springframework.aop.target.BeansException { super. setBeanFactory ( org.springframework.aop.target.BeanFactory ) ; if ( ! org.springframework.aop.target.BeanFactory . isPrototype ( getTargetBeanName ( ) ) ) { throw new BeanDefinitionStoreException ( STRING + getTargetBeanName ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) org.springframework.aop.target.BeansException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getTargetBeanName ( ) + STRING ) ; } return getBeanFactory ( ) . getBean ( getTargetBeanName ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + getTargetBeanName ( ) + STRING ) ; } if ( getBeanFactory ( ) instanceof ConfigurableBeanFactory ) { ( ( ConfigurableBeanFactory ) getBeanFactory ( ) ) . destroyBean ( getTargetBeanName ( ) , java.lang.Object ) ; } else if ( java.lang.Object instanceof DisposableBean ) { try { ( ( DisposableBean ) java.lang.Object ) . destroy ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING + getTargetBeanName ( ) + STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { throw new java.io.NotSerializableException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) java.io.ObjectStreamException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this + STRING ) ; } try { return new SingletonTargetSource ( getTarget ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING + this + STRING , java.lang.Exception ) ; throw new java.io.NotSerializableException ( STRING + this + STRING + java.lang.Exception ) ; } }  <METHOD_END>
