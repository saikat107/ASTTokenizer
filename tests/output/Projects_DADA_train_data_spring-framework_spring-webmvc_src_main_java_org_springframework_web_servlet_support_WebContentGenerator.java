<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { if ( boolean ) { this . java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( NUMBER ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { void ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.String ... java.lang.String[] ) { if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { this . java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } else { this . java.util.Set<java.lang.String> = null ; } void ( ) ; }  <METHOD_END>
<METHOD_START> public final java.lang.String [] java.lang.String[] ( ) { return StringUtils . toStringArray ( this . java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ; if ( this . java.util.Set<java.lang.String> == null ) { java.util.Collection<java.lang.String> = new java.util.ArrayList <> ( HttpMethod . values ( ) . length - NUMBER ) ; for ( HttpMethod org.springframework.web.servlet.support.HttpMethod : HttpMethod . values ( ) ) { if ( ! HttpMethod . TRACE . equals ( org.springframework.web.servlet.support.HttpMethod ) ) { java.util.Collection<java.lang.String> . boolean ( org.springframework.web.servlet.support.HttpMethod . name ( ) ) ; } } } else if ( this . java.util.Set<java.lang.String> . boolean ( HttpMethod . OPTIONS . name ( ) ) ) { java.util.Collection<java.lang.String> = this . java.util.Set<java.lang.String> ; } else { java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( this . java.util.Set<java.lang.String> ) ; java.util.Collection<java.lang.String> . boolean ( HttpMethod . OPTIONS . name ( ) ) ; } this . java.lang.String = StringUtils . collectionToCommaDelimitedString ( java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public final void void ( CacheControl org.springframework.web.servlet.support.CacheControl ) { this . org.springframework.web.servlet.support.CacheControl = org.springframework.web.servlet.support.CacheControl ; }  <METHOD_END>
<METHOD_START> public final org.springframework.web.servlet.support.CacheControl org.springframework.web.servlet.support.CacheControl ( ) { return this . org.springframework.web.servlet.support.CacheControl ; }  <METHOD_END>
<METHOD_START> public final void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public final int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public final java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected final void void ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest ) throws org.springframework.web.servlet.support.ServletException { java.lang.String java.lang.String = org.springframework.web.servlet.support.HttpServletRequest . getMethod ( ) ; if ( this . java.util.Set<java.lang.String> != null && ! this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { throw new HttpRequestMethodNotSupportedException ( java.lang.String , this . java.util.Set<java.lang.String> ) ; } if ( this . boolean && org.springframework.web.servlet.support.HttpServletRequest . getSession ( false ) == null ) { throw new HttpSessionRequiredException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected final void void ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse ) { if ( this . org.springframework.web.servlet.support.CacheControl != null ) { void ( org.springframework.web.servlet.support.HttpServletResponse , this . org.springframework.web.servlet.support.CacheControl ) ; } else { void ( org.springframework.web.servlet.support.HttpServletResponse , this . int ) ; } if ( this . java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ( org.springframework.web.servlet.support.HttpServletResponse ) ) { org.springframework.web.servlet.support.HttpServletResponse . addHeader ( STRING , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected final void void ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse , CacheControl org.springframework.web.servlet.support.CacheControl ) { java.lang.String java.lang.String = org.springframework.web.servlet.support.CacheControl . getHeaderValue ( ) ; if ( java.lang.String != null ) { org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , java.lang.String ) ; if ( org.springframework.web.servlet.support.HttpServletResponse . containsHeader ( java.lang.String ) ) { org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , STRING ) ; } if ( org.springframework.web.servlet.support.HttpServletResponse . containsHeader ( java.lang.String ) ) { org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected final void void ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse , int int ) { if ( this . boolean || ! this . boolean ) { if ( int > NUMBER ) { void ( org.springframework.web.servlet.support.HttpServletResponse , int ) ; } else if ( int == NUMBER ) { void ( org.springframework.web.servlet.support.HttpServletResponse ) ; } } else { CacheControl org.springframework.web.servlet.support.CacheControl ; if ( int > NUMBER ) { org.springframework.web.servlet.support.CacheControl = CacheControl . maxAge ( int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( this . boolean ) { org.springframework.web.servlet.support.CacheControl = org.springframework.web.servlet.support.CacheControl . mustRevalidate ( ) ; } } else if ( int == NUMBER ) { org.springframework.web.servlet.support.CacheControl = ( this . boolean ? CacheControl . noStore ( ) : CacheControl . noCache ( ) ) ; } else { org.springframework.web.servlet.support.CacheControl = CacheControl . empty ( ) ; } void ( org.springframework.web.servlet.support.HttpServletResponse , org.springframework.web.servlet.support.CacheControl ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected final void void ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse , boolean boolean ) throws org.springframework.web.servlet.support.ServletException { void ( org.springframework.web.servlet.support.HttpServletRequest ) ; void ( org.springframework.web.servlet.support.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected final void void ( HttpServletRequest org.springframework.web.servlet.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse , int int , boolean boolean )			throws org.springframework.web.servlet.support.ServletException { void ( org.springframework.web.servlet.support.HttpServletRequest ) ; void ( org.springframework.web.servlet.support.HttpServletResponse , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected final void void ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse , int int , boolean boolean ) { if ( int > NUMBER ) { void ( org.springframework.web.servlet.support.HttpServletResponse , int , boolean ) ; } else if ( int == NUMBER ) { void ( org.springframework.web.servlet.support.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected final void void ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse , int int ) { void ( org.springframework.web.servlet.support.HttpServletResponse , int , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected final void void ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse , int int , boolean boolean ) { if ( this . boolean ) { org.springframework.web.servlet.support.HttpServletResponse . setDateHeader ( java.lang.String , java.lang.System . long ( ) + int * NUMBER ) ; } else if ( org.springframework.web.servlet.support.HttpServletResponse . containsHeader ( java.lang.String ) ) { org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , STRING ) ; } if ( this . boolean ) { java.lang.String java.lang.String = STRING + int ; if ( boolean || this . boolean ) { java.lang.String += STRING ; } org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , java.lang.String ) ; } if ( org.springframework.web.servlet.support.HttpServletResponse . containsHeader ( java.lang.String ) ) { org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected final void void ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse ) { org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , STRING ) ; if ( this . boolean ) { org.springframework.web.servlet.support.HttpServletResponse . setDateHeader ( java.lang.String , NUMBER ) ; } if ( this . boolean ) { org.springframework.web.servlet.support.HttpServletResponse . setHeader ( java.lang.String , STRING ) ; if ( this . boolean ) { org.springframework.web.servlet.support.HttpServletResponse . addHeader ( java.lang.String , STRING ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( HttpServletResponse org.springframework.web.servlet.support.HttpServletResponse ) { if ( ! org.springframework.web.servlet.support.HttpServletResponse . containsHeader ( HttpHeaders . VARY ) ) { return java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ( ) ) ; } java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.lang.String[] ( ) . int ) ; java.util.Collections . boolean ( java.util.Collection<java.lang.String> , java.lang.String[] ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.web.servlet.support.HttpServletResponse . getHeaders ( HttpHeaders . VARY ) ) { for ( java.lang.String java.lang.String : StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) { if ( STRING . boolean ( java.lang.String ) ) { return java.util.Collections . java.util.List<java.lang.String> ( ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ; } } } } return java.util.Collection<java.lang.String> ; }  <METHOD_END>
